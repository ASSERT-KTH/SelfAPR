[BugLab_Variable_Misuse]^this.expectedModCount = nextIndex;^787^^^^^783^790^this.expectedModCount = parent.modCount;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList,int)   AbstractLinkedList<E> parent final int fromIndex [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  modCount  nextIndex  offset  size  Node  current  header  next  previous  
[BugLab_Argument_Swapping]^this.expectedModCount = parent.modCount.modCount;^787^^^^^783^790^this.expectedModCount = parent.modCount;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList,int)   AbstractLinkedList<E> parent final int fromIndex [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  modCount  nextIndex  offset  size  Node  current  header  next  previous  
[BugLab_Argument_Swapping]^this.expectedModCount = parent;^787^^^^^783^790^this.expectedModCount = parent.modCount;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList,int)   AbstractLinkedList<E> parent final int fromIndex [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  modCount  nextIndex  offset  size  Node  current  header  next  previous  
[BugLab_Variable_Misuse]^this.next = parent.getNode ( size, true ) ;^788^^^^^783^790^this.next = parent.getNode ( fromIndex, true ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList,int)   AbstractLinkedList<E> parent final int fromIndex [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  modCount  nextIndex  offset  size  Node  current  header  next  previous  
[BugLab_Argument_Swapping]^this.next = fromIndex.getNode ( parent, true ) ;^788^^^^^783^790^this.next = parent.getNode ( fromIndex, true ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList,int)   AbstractLinkedList<E> parent final int fromIndex [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  modCount  nextIndex  offset  size  Node  current  header  next  previous  
[BugLab_Wrong_Literal]^this.next = parent.getNode ( fromIndex, false ) ;^788^^^^^783^790^this.next = parent.getNode ( fromIndex, true ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList,int)   AbstractLinkedList<E> parent final int fromIndex [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  modCount  nextIndex  offset  size  Node  current  header  next  previous  
[BugLab_Variable_Misuse]^this.nextIndex = offset;^789^^^^^783^790^this.nextIndex = fromIndex;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList,int)   AbstractLinkedList<E> parent final int fromIndex [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  modCount  nextIndex  offset  size  Node  current  header  next  previous  
[BugLab_Variable_Misuse]^super ( sub.parent, size + sub.offset ) ;^900^^^^^899^902^super ( sub.parent, startIndex + sub.offset ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList$LinkedSubList,int)   LinkedSubList<E> sub final int startIndex [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  modCount  nextIndex  offset  size  startIndex  Node  current  header  next  previous  
[BugLab_Variable_Misuse]^super ( 3, startIndex + sub.offset ) ;^900^^^^^899^902^super ( sub.parent, startIndex + sub.offset ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList$LinkedSubList,int)   LinkedSubList<E> sub final int startIndex [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  modCount  nextIndex  offset  size  startIndex  Node  current  header  next  previous  
[BugLab_Variable_Misuse]^super ( sub.parent, startIndex + offset ) ;^900^^^^^899^902^super ( sub.parent, startIndex + sub.offset ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList$LinkedSubList,int)   LinkedSubList<E> sub final int startIndex [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  modCount  nextIndex  offset  size  startIndex  Node  current  header  next  previous  
[BugLab_Argument_Swapping]^super ( startIndex.parent, sub + sub.offset ) ;^900^^^^^899^902^super ( sub.parent, startIndex + sub.offset ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList$LinkedSubList,int)   LinkedSubList<E> sub final int startIndex [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  modCount  nextIndex  offset  size  startIndex  Node  current  header  next  previous  
[BugLab_Argument_Swapping]^super ( sub, startIndex + sub.parent.offset ) ;^900^^^^^899^902^super ( sub.parent, startIndex + sub.offset ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList$LinkedSubList,int)   LinkedSubList<E> sub final int startIndex [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  modCount  nextIndex  offset  size  startIndex  Node  current  header  next  previous  
[BugLab_Argument_Swapping]^super ( sub.parent, sub.offset + startIndex ) ;^900^^^^^899^902^super ( sub.parent, startIndex + sub.offset ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList$LinkedSubList,int)   LinkedSubList<E> sub final int startIndex [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  modCount  nextIndex  offset  size  startIndex  Node  current  header  next  previous  
[BugLab_Wrong_Operator]^super ( sub.parent, startIndex  &&  sub.offset ) ;^900^^^^^899^902^super ( sub.parent, startIndex + sub.offset ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList$LinkedSubList,int)   LinkedSubList<E> sub final int startIndex [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  modCount  nextIndex  offset  size  startIndex  Node  current  header  next  previous  
[BugLab_Variable_Misuse]^if  ( size < 0 )  {^949^^^^^948^962^if  ( fromIndex < 0 )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList,int,int)   AbstractLinkedList<E> parent final int fromIndex final int toIndex [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  modCount  nextIndex  offset  size  startIndex  toIndex  Node  current  header  next  previous  
[BugLab_Wrong_Operator]^if  ( fromIndex <= 0 )  {^949^^^^^948^962^if  ( fromIndex < 0 )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList,int,int)   AbstractLinkedList<E> parent final int fromIndex final int toIndex [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  modCount  nextIndex  offset  size  startIndex  toIndex  Node  current  header  next  previous  
[BugLab_Wrong_Literal]^if  ( fromIndex < -1 )  {^949^^^^^948^962^if  ( fromIndex < 0 )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList,int,int)   AbstractLinkedList<E> parent final int fromIndex final int toIndex [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  modCount  nextIndex  offset  size  startIndex  toIndex  Node  current  header  next  previous  
[BugLab_Variable_Misuse]^if  ( startIndex > parent.size (  )  )  {^952^^^^^948^962^if  ( toIndex > parent.size (  )  )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList,int,int)   AbstractLinkedList<E> parent final int fromIndex final int toIndex [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  modCount  nextIndex  offset  size  startIndex  toIndex  Node  current  header  next  previous  
[BugLab_Argument_Swapping]^if  ( parent > toIndex.size (  )  )  {^952^^^^^948^962^if  ( toIndex > parent.size (  )  )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList,int,int)   AbstractLinkedList<E> parent final int fromIndex final int toIndex [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  modCount  nextIndex  offset  size  startIndex  toIndex  Node  current  header  next  previous  
[BugLab_Wrong_Operator]^if  ( toIndex >= parent.size (  )  )  {^952^^^^^948^962^if  ( toIndex > parent.size (  )  )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList,int,int)   AbstractLinkedList<E> parent final int fromIndex final int toIndex [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  modCount  nextIndex  offset  size  startIndex  toIndex  Node  current  header  next  previous  
[BugLab_Variable_Misuse]^if  ( size > toIndex )  {^955^^^^^948^962^if  ( fromIndex > toIndex )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList,int,int)   AbstractLinkedList<E> parent final int fromIndex final int toIndex [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  modCount  nextIndex  offset  size  startIndex  toIndex  Node  current  header  next  previous  
[BugLab_Variable_Misuse]^if  ( fromIndex > size )  {^955^^^^^948^962^if  ( fromIndex > toIndex )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList,int,int)   AbstractLinkedList<E> parent final int fromIndex final int toIndex [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  modCount  nextIndex  offset  size  startIndex  toIndex  Node  current  header  next  previous  
[BugLab_Argument_Swapping]^if  ( toIndex > fromIndex )  {^955^^^^^948^962^if  ( fromIndex > toIndex )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList,int,int)   AbstractLinkedList<E> parent final int fromIndex final int toIndex [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  modCount  nextIndex  offset  size  startIndex  toIndex  Node  current  header  next  previous  
[BugLab_Wrong_Operator]^if  ( fromIndex >= toIndex )  {^955^^^^^948^962^if  ( fromIndex > toIndex )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList,int,int)   AbstractLinkedList<E> parent final int fromIndex final int toIndex [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  modCount  nextIndex  offset  size  startIndex  toIndex  Node  current  header  next  previous  
[BugLab_Variable_Misuse]^this.offset = toIndex;^959^^^^^948^962^this.offset = fromIndex;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList,int,int)   AbstractLinkedList<E> parent final int fromIndex final int toIndex [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  modCount  nextIndex  offset  size  startIndex  toIndex  Node  current  header  next  previous  
[BugLab_Variable_Misuse]^this.size = startIndex - fromIndex;^960^^^^^948^962^this.size = toIndex - fromIndex;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList,int,int)   AbstractLinkedList<E> parent final int fromIndex final int toIndex [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  modCount  nextIndex  offset  size  startIndex  toIndex  Node  current  header  next  previous  
[BugLab_Variable_Misuse]^this.size = toIndex - size;^960^^^^^948^962^this.size = toIndex - fromIndex;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList,int,int)   AbstractLinkedList<E> parent final int fromIndex final int toIndex [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  modCount  nextIndex  offset  size  startIndex  toIndex  Node  current  header  next  previous  
[BugLab_Argument_Swapping]^this.size = fromIndex - toIndex;^960^^^^^948^962^this.size = toIndex - fromIndex;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList,int,int)   AbstractLinkedList<E> parent final int fromIndex final int toIndex [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  modCount  nextIndex  offset  size  startIndex  toIndex  Node  current  header  next  previous  
[BugLab_Wrong_Operator]^this.size = toIndex  ==  fromIndex;^960^^^^^948^962^this.size = toIndex - fromIndex;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList,int,int)   AbstractLinkedList<E> parent final int fromIndex final int toIndex [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  modCount  nextIndex  offset  size  startIndex  toIndex  Node  current  header  next  previous  
[BugLab_Variable_Misuse]^this.expectedModCount = offset;^961^^^^^948^962^this.expectedModCount = parent.modCount;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList,int,int)   AbstractLinkedList<E> parent final int fromIndex final int toIndex [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  modCount  nextIndex  offset  size  startIndex  toIndex  Node  current  header  next  previous  
[BugLab_Argument_Swapping]^this.expectedModCount = parent.modCount.modCount;^961^^^^^948^962^this.expectedModCount = parent.modCount;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList,int,int)   AbstractLinkedList<E> parent final int fromIndex final int toIndex [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  modCount  nextIndex  offset  size  startIndex  toIndex  Node  current  header  next  previous  
[BugLab_Argument_Swapping]^this.expectedModCount = parent;^961^^^^^948^962^this.expectedModCount = parent.modCount;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList,int,int)   AbstractLinkedList<E> parent final int fromIndex final int toIndex [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  modCount  nextIndex  offset  size  startIndex  toIndex  Node  current  header  next  previous  
[BugLab_Variable_Misuse]^return toIndex;^104^^^^^103^105^return size;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] size [RETURN_TYPE] int   [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  modCount  nextIndex  offset  size  startIndex  toIndex  Node  current  header  next  previous  
[BugLab_Wrong_Operator]^return size (  )  > 0;^108^^^^^107^109^return size (  )  == 0;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] isEmpty [RETURN_TYPE] boolean   [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  modCount  nextIndex  offset  size  startIndex  toIndex  Node  current  header  next  previous  
[BugLab_Wrong_Literal]^return size (  )  == -1;^108^^^^^107^109^return size (  )  == 0;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] isEmpty [RETURN_TYPE] boolean   [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  modCount  nextIndex  offset  size  startIndex  toIndex  Node  current  header  next  previous  
[BugLab_Variable_Misuse]^final Node<E> node = getNode ( toIndex, false ) ;^112^^^^^111^114^final Node<E> node = getNode ( index, false ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] get [RETURN_TYPE] E   final int index [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  index  modCount  nextIndex  offset  size  startIndex  toIndex  Node  current  header  next  node  previous  
[BugLab_Wrong_Literal]^final Node<E> node = getNode ( index, true ) ;^112^^^^^111^114^final Node<E> node = getNode ( index, false ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] get [RETURN_TYPE] E   final int index [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  index  modCount  nextIndex  offset  size  startIndex  toIndex  Node  current  header  next  node  previous  
[BugLab_Variable_Misuse]^return null.getValue (  ) ;^113^^^^^111^114^return node.getValue (  ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] get [RETURN_TYPE] E   final int index [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  index  modCount  nextIndex  offset  size  startIndex  toIndex  Node  current  header  next  node  previous  
[BugLab_Wrong_Literal]^return new LinkedListIterator<E> ( this, size ) ;^123^^^^^122^124^return new LinkedListIterator<E> ( this, 0 ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] listIterator [RETURN_TYPE] ListIterator   [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  index  modCount  nextIndex  offset  size  startIndex  toIndex  Node  current  header  next  node  previous  
[BugLab_Variable_Misuse]^return new LinkedListIterator<E> ( this, offset ) ;^127^^^^^126^128^return new LinkedListIterator<E> ( this, fromIndex ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] listIterator [RETURN_TYPE] ListIterator   final int fromIndex [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  index  modCount  nextIndex  offset  size  startIndex  toIndex  Node  current  header  next  node  previous  
[BugLab_Variable_Misuse]^return new LinkedListIterator<E> ( this, toIndex ) ;^127^^^^^126^128^return new LinkedListIterator<E> ( this, fromIndex ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] listIterator [RETURN_TYPE] ListIterator   final int fromIndex [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  index  modCount  nextIndex  offset  size  startIndex  toIndex  Node  current  header  next  node  previous  
[BugLab_Wrong_Literal]^int i = 1;^133^^^^^132^141^int i = 0;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] indexOf [RETURN_TYPE] int   Object value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  Object  value  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[BugLab_Variable_Misuse]^if  ( toIndexsEqualValue ( node.getValue (  ) , value )  )  {^135^^^^^132^141^if  ( isEqualValue ( node.getValue (  ) , value )  )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] indexOf [RETURN_TYPE] int   Object value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  Object  value  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[BugLab_Argument_Swapping]^if  ( nodesEqualValue ( i.getValue (  ) , value )  )  {^135^^^^^132^141^if  ( isEqualValue ( node.getValue (  ) , value )  )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] indexOf [RETURN_TYPE] int   Object value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  Object  value  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[BugLab_Argument_Swapping]^if  ( isEqualValue ( value.getValue (  ) , node )  )  {^135^^^^^132^141^if  ( isEqualValue ( node.getValue (  ) , value )  )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] indexOf [RETURN_TYPE] int   Object value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  Object  value  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[BugLab_Variable_Misuse]^return offset;^136^^^^^132^141^return i;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] indexOf [RETURN_TYPE] int   Object value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  Object  value  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[BugLab_Argument_Swapping]^for  ( Node<E> node.next = header.next; node != header; node = node )  {^134^^^^^132^141^for  ( Node<E> node = header.next; node != header; node = node.next )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] indexOf [RETURN_TYPE] int   Object value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  Object  value  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[BugLab_Argument_Swapping]^for  ( Node<E> node = header; node != header.next; node = node.next )  {^134^^^^^132^141^for  ( Node<E> node = header.next; node != header; node = node.next )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] indexOf [RETURN_TYPE] int   Object value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  Object  value  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[BugLab_Argument_Swapping]^for  ( Node<E> header = node.next; node != header; node = node.next )  {^134^^^^^132^141^for  ( Node<E> node = header.next; node != header; node = node.next )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] indexOf [RETURN_TYPE] int   Object value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  Object  value  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[BugLab_Argument_Swapping]^for  ( Node<E> node = node.next; node != header; node = header.next )  {^134^^^^^132^141^for  ( Node<E> node = header.next; node != header; node = node.next )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] indexOf [RETURN_TYPE] int   Object value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  Object  value  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[BugLab_Wrong_Operator]^for  ( Node<E> node = header.next; node == header; node = node.next )  {^134^^^^^132^141^for  ( Node<E> node = header.next; node != header; node = node.next )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] indexOf [RETURN_TYPE] int   Object value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  Object  value  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[BugLab_Variable_Misuse]^if  ( isEqualValue ( null.getValue (  ) , value )  )  {^135^^^^^132^141^if  ( isEqualValue ( node.getValue (  ) , value )  )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] indexOf [RETURN_TYPE] int   Object value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  Object  value  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[BugLab_Argument_Swapping]^if  ( valuesEqualValue ( node.getValue (  ) , i )  )  {^135^^^^^132^141^if  ( isEqualValue ( node.getValue (  ) , value )  )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] indexOf [RETURN_TYPE] int   Object value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  Object  value  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[BugLab_Variable_Misuse]^return size;^136^^^^^132^141^return i;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] indexOf [RETURN_TYPE] int   Object value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  Object  value  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[BugLab_Variable_Misuse]^return toIndex;^136^^^^^132^141^return i;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] indexOf [RETURN_TYPE] int   Object value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  Object  value  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[BugLab_Argument_Swapping]^for  ( Node<E> node = header.next.next; node != header; node = node.next )  {^134^^^^^132^141^for  ( Node<E> node = header.next; node != header; node = node.next )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] indexOf [RETURN_TYPE] int   Object value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  Object  value  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[BugLab_Variable_Misuse]^int i = toIndex - 1;^144^^^^^143^152^int i = size - 1;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] lastIndexOf [RETURN_TYPE] int   Object value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  Object  value  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[BugLab_Wrong_Operator]^int i = size  <<  1;^144^^^^^143^152^int i = size - 1;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] lastIndexOf [RETURN_TYPE] int   Object value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  Object  value  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[BugLab_Wrong_Literal]^int i = size ;^144^^^^^143^152^int i = size - 1;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] lastIndexOf [RETURN_TYPE] int   Object value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  Object  value  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[BugLab_Variable_Misuse]^if  ( offsetsEqualValue ( node.getValue (  ) , value )  )  {^146^^^^^143^152^if  ( isEqualValue ( node.getValue (  ) , value )  )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] lastIndexOf [RETURN_TYPE] int   Object value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  Object  value  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[BugLab_Argument_Swapping]^if  ( isEqualValue ( value.getValue (  ) , node )  )  {^146^^^^^143^152^if  ( isEqualValue ( node.getValue (  ) , value )  )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] lastIndexOf [RETURN_TYPE] int   Object value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  Object  value  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[BugLab_Argument_Swapping]^if  ( nodesEqualValue ( i.getValue (  ) , value )  )  {^146^^^^^143^152^if  ( isEqualValue ( node.getValue (  ) , value )  )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] lastIndexOf [RETURN_TYPE] int   Object value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  Object  value  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[BugLab_Variable_Misuse]^return offset;^147^^^^^143^152^return i;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] lastIndexOf [RETURN_TYPE] int   Object value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  Object  value  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[BugLab_Variable_Misuse]^for  ( Node<E> this = header.previous; node != header; node = node.previous )  {^145^^^^^143^152^for  ( Node<E> node = header.previous; node != header; node = node.previous )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] lastIndexOf [RETURN_TYPE] int   Object value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  Object  value  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[BugLab_Argument_Swapping]^for  ( Node<E> node.previous = header.previous; node != header; node = node )  {^145^^^^^143^152^for  ( Node<E> node = header.previous; node != header; node = node.previous )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] lastIndexOf [RETURN_TYPE] int   Object value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  Object  value  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[BugLab_Argument_Swapping]^for  ( Node<E> node = node.previous.previous; node != header; node = header )  {^145^^^^^143^152^for  ( Node<E> node = header.previous; node != header; node = node.previous )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] lastIndexOf [RETURN_TYPE] int   Object value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  Object  value  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[BugLab_Argument_Swapping]^for  ( Node<E> header = node.previous; node != header; node = node.previous )  {^145^^^^^143^152^for  ( Node<E> node = header.previous; node != header; node = node.previous )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] lastIndexOf [RETURN_TYPE] int   Object value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  Object  value  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[BugLab_Wrong_Operator]^for  ( Node<E> node = header.previous; node >= header; node = node.previous )  {^145^^^^^143^152^for  ( Node<E> node = header.previous; node != header; node = node.previous )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] lastIndexOf [RETURN_TYPE] int   Object value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  Object  value  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[BugLab_Argument_Swapping]^if  ( valuesEqualValue ( node.getValue (  ) , i )  )  {^146^^^^^143^152^if  ( isEqualValue ( node.getValue (  ) , value )  )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] lastIndexOf [RETURN_TYPE] int   Object value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  Object  value  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[BugLab_Variable_Misuse]^return toIndex;^147^^^^^143^152^return i;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] lastIndexOf [RETURN_TYPE] int   Object value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  Object  value  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[BugLab_Argument_Swapping]^for  ( Node<E> node = header; node != header.previous; node = node.previous )  {^145^^^^^143^152^for  ( Node<E> node = header.previous; node != header; node = node.previous )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] lastIndexOf [RETURN_TYPE] int   Object value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  Object  value  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[BugLab_Argument_Swapping]^for  ( Node<E> node = header.previous.previous; node != header; node = node.previous )  {^145^^^^^143^152^for  ( Node<E> node = header.previous; node != header; node = node.previous )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] lastIndexOf [RETURN_TYPE] int   Object value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  Object  value  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[BugLab_Wrong_Literal]^return -offset;^151^^^^^143^152^return -1;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] lastIndexOf [RETURN_TYPE] int   Object value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  Object  value  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[BugLab_Wrong_Operator]^return indexOf ( value )  == -1;^155^^^^^154^156^return indexOf ( value )  != -1;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] contains [RETURN_TYPE] boolean   Object value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  Object  value  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[BugLab_Wrong_Literal]^return indexOf ( value )  != -0;^155^^^^^154^156^return indexOf ( value )  != -1;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] contains [RETURN_TYPE] boolean   Object value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  Object  value  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[BugLab_Wrong_Literal]^return true;^161^^^^^158^165^return false;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] containsAll [RETURN_TYPE] boolean   Collection<?> coll [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  Collection  coll  Object  o  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[BugLab_Wrong_Literal]^return false;^164^^^^^158^165^return true;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] containsAll [RETURN_TYPE] boolean   Collection<?> coll [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  Collection  coll  Object  o  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[BugLab_Variable_Misuse]^if  ( nextIndex < size )  {^176^^^^^174^190^if  ( array.length < size )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] toArray [RETURN_TYPE] <T>   T[] array [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  T[]  array  Class  componentType  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[BugLab_Variable_Misuse]^if  ( array.length < offset )  {^176^^^^^174^190^if  ( array.length < size )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] toArray [RETURN_TYPE] <T>   T[] array [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  T[]  array  Class  componentType  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[BugLab_Argument_Swapping]^if  ( size < array.length )  {^176^^^^^174^190^if  ( array.length < size )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] toArray [RETURN_TYPE] <T>   T[] array [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  T[]  array  Class  componentType  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[BugLab_Wrong_Operator]^if  ( array.length <= size )  {^176^^^^^174^190^if  ( array.length < size )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] toArray [RETURN_TYPE] <T>   T[] array [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  T[]  array  Class  componentType  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[BugLab_Variable_Misuse]^array =  ( T[] )  Array.newInstance ( componentType, nextIndex ) ;^178^^^^^174^190^array =  ( T[] )  Array.newInstance ( componentType, size ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] toArray [RETURN_TYPE] <T>   T[] array [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  T[]  array  Class  componentType  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[BugLab_Argument_Swapping]^array =  ( T[] )  Array.newInstance ( size, componentType ) ;^178^^^^^174^190^array =  ( T[] )  Array.newInstance ( componentType, size ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] toArray [RETURN_TYPE] <T>   T[] array [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  T[]  array  Class  componentType  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[BugLab_Wrong_Literal]^int i = -1;^181^^^^^174^190^int i = 0;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] toArray [RETURN_TYPE] <T>   T[] array [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  T[]  array  Class  componentType  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[BugLab_Variable_Misuse]^for  ( Node<E> node = header.next; node != header; node = node.next, offset++ )  {^182^^^^^174^190^for  ( Node<E> node = header.next; node != header; node = node.next, i++ )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] toArray [RETURN_TYPE] <T>   T[] array [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  T[]  array  Class  componentType  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[BugLab_Argument_Swapping]^for  ( Node<E> header = node.next; node != header; node = node.next, i++ )  {^182^^^^^174^190^for  ( Node<E> node = header.next; node != header; node = node.next, i++ )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] toArray [RETURN_TYPE] <T>   T[] array [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  T[]  array  Class  componentType  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[BugLab_Argument_Swapping]^for  ( Node<E> node = header.next; node != header; node = i, node.next++ )  {^182^^^^^174^190^for  ( Node<E> node = header.next; node != header; node = node.next, i++ )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] toArray [RETURN_TYPE] <T>   T[] array [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  T[]  array  Class  componentType  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[BugLab_Argument_Swapping]^for  ( Node<E> node = node.next; node != header; node = header.next, i++ )  {^182^^^^^174^190^for  ( Node<E> node = header.next; node != header; node = node.next, i++ )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] toArray [RETURN_TYPE] <T>   T[] array [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  T[]  array  Class  componentType  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[BugLab_Argument_Swapping]^for  ( Node<E> node = node.next.next; node != header; node = header, i++ )  {^182^^^^^174^190^for  ( Node<E> node = header.next; node != header; node = node.next, i++ )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] toArray [RETURN_TYPE] <T>   T[] array [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  T[]  array  Class  componentType  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[BugLab_Wrong_Operator]^for  ( Node<E> node = header.next; node == header; node = node.next, i++ )  {^182^^^^^174^190^for  ( Node<E> node = header.next; node != header; node = node.next, i++ )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] toArray [RETURN_TYPE] <T>   T[] array [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  T[]  array  Class  componentType  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[BugLab_Variable_Misuse]^for  ( Node<E> this = header.next; node != header; node = node.next, i++ )  {^182^^^^^174^190^for  ( Node<E> node = header.next; node != header; node = node.next, i++ )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] toArray [RETURN_TYPE] <T>   T[] array [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  T[]  array  Class  componentType  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[BugLab_Argument_Swapping]^for  ( Node<E> node.next = header.next; node != header; node = node, i++ )  {^182^^^^^174^190^for  ( Node<E> node = header.next; node != header; node = node.next, i++ )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] toArray [RETURN_TYPE] <T>   T[] array [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  T[]  array  Class  componentType  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[BugLab_Argument_Swapping]^for  ( Node<E> node = header; node != header.next; node = node.next, i++ )  {^182^^^^^174^190^for  ( Node<E> node = header.next; node != header; node = node.next, i++ )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] toArray [RETURN_TYPE] <T>   T[] array [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  T[]  array  Class  componentType  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[BugLab_Argument_Swapping]^for  ( Node<E> node = header.next.next; node != header; node = node.next, i++ )  {^182^^^^^174^190^for  ( Node<E> node = header.next; node != header; node = node.next, i++ )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] toArray [RETURN_TYPE] <T>   T[] array [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  T[]  array  Class  componentType  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[BugLab_Variable_Misuse]^if  ( toIndex > size )  {^186^^^^^174^190^if  ( array.length > size )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] toArray [RETURN_TYPE] <T>   T[] array [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  T[]  array  Class  componentType  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[BugLab_Argument_Swapping]^if  ( size.length > array )  {^186^^^^^174^190^if  ( array.length > size )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] toArray [RETURN_TYPE] <T>   T[] array [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  T[]  array  Class  componentType  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[BugLab_Argument_Swapping]^if  ( size > array.length )  {^186^^^^^174^190^if  ( array.length > size )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] toArray [RETURN_TYPE] <T>   T[] array [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  T[]  array  Class  componentType  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[BugLab_Wrong_Operator]^if  ( array.length < size )  {^186^^^^^174^190^if  ( array.length > size )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] toArray [RETURN_TYPE] <T>   T[] array [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  T[]  array  Class  componentType  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[BugLab_Variable_Misuse]^return new LinkedSubList<E> ( this, toIndex, toIndexExclusive ) ;^200^^^^^199^201^return new LinkedSubList<E> ( this, fromIndexInclusive, toIndexExclusive ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] subList [RETURN_TYPE] List   final int fromIndexInclusive final int toIndexExclusive [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[BugLab_Variable_Misuse]^return new LinkedSubList<E> ( this, fromIndexInclusive, size ) ;^200^^^^^199^201^return new LinkedSubList<E> ( this, fromIndexInclusive, toIndexExclusive ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] subList [RETURN_TYPE] List   final int fromIndexInclusive final int toIndexExclusive [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[BugLab_Argument_Swapping]^return new LinkedSubList<E> ( this, toIndexExclusive, fromIndexInclusive ) ;^200^^^^^199^201^return new LinkedSubList<E> ( this, fromIndexInclusive, toIndexExclusive ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] subList [RETURN_TYPE] List   final int fromIndexInclusive final int toIndexExclusive [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[BugLab_Wrong_Literal]^return false;^207^^^^^205^208^return true;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] add [RETURN_TYPE] boolean   final E value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[BugLab_Variable_Misuse]^final Node<E> node = getNode ( startIndex, true ) ;^211^^^^^210^213^final Node<E> node = getNode ( index, true ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] add [RETURN_TYPE] void   final int index final E value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[BugLab_Wrong_Literal]^final Node<E> node = getNode ( index, false ) ;^211^^^^^210^213^final Node<E> node = getNode ( index, true ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] add [RETURN_TYPE] void   final int index final E value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[BugLab_Variable_Misuse]^final Node<E> node = getNode ( toIndexExclusive, true ) ;^211^^^^^210^213^final Node<E> node = getNode ( index, true ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] add [RETURN_TYPE] void   final int index final E value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[BugLab_Argument_Swapping]^addNodeBefore ( value, node ) ;^212^^^^^210^213^addNodeBefore ( node, value ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] add [RETURN_TYPE] void   final int index final E value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[BugLab_Variable_Misuse]^return addAll ( nextIndex, coll ) ;^216^^^^^215^217^return addAll ( size, coll ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> coll [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  Collection  coll  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Argument_Swapping]^return addAll ( coll, size ) ;^216^^^^^215^217^return addAll ( size, coll ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> coll [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  Collection  coll  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Variable_Misuse]^return addAll ( toIndexExclusive, coll ) ;^216^^^^^215^217^return addAll ( size, coll ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> coll [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  Collection  coll  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Variable_Misuse]^final Node<E> node = getNode ( toIndexExclusive, true ) ;^220^^^^^219^225^final Node<E> node = getNode ( index, true ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   final int index Collection<? extends E> coll [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  value  Node  current  header  next  node  previous  Collection  coll  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Wrong_Literal]^final Node<E> node = getNode ( index, false ) ;^220^^^^^219^225^final Node<E> node = getNode ( index, true ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   final int index Collection<? extends E> coll [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  value  Node  current  header  next  node  previous  Collection  coll  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Variable_Misuse]^final Node<E> node = getNode ( size, true ) ;^220^^^^^219^225^final Node<E> node = getNode ( index, true ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   final int index Collection<? extends E> coll [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  value  Node  current  header  next  node  previous  Collection  coll  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Variable_Misuse]^addNodeBefore ( node, value ) ;^222^^^^^219^225^addNodeBefore ( node, e ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   final int index Collection<? extends E> coll [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  value  Node  current  header  next  node  previous  Collection  coll  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Argument_Swapping]^addNodeBefore ( e, node ) ;^222^^^^^219^225^addNodeBefore ( node, e ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   final int index Collection<? extends E> coll [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  value  Node  current  header  next  node  previous  Collection  coll  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Wrong_Literal]^return false;^224^^^^^219^225^return true;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   final int index Collection<? extends E> coll [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  value  Node  current  header  next  node  previous  Collection  coll  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Variable_Misuse]^final Node<E> node = getNode ( startIndex, false ) ;^230^^^^^229^234^final Node<E> node = getNode ( index, false ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[BugLab_Wrong_Literal]^final Node<E> node = getNode ( index, true ) ;^230^^^^^229^234^final Node<E> node = getNode ( index, false ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[BugLab_Variable_Misuse]^final Node<E> node = getNode ( toIndexExclusive, false ) ;^230^^^^^229^234^final Node<E> node = getNode ( index, false ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[BugLab_Variable_Misuse]^return value;^233^^^^^229^234^return oldValue;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[BugLab_Argument_Swapping]^if  ( isEqualValue ( value.getValue (  ) , node )  )  {^238^^^^^236^244^if  ( isEqualValue ( node.getValue (  ) , value )  )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] remove [RETURN_TYPE] boolean   Object value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  oldValue  value  Node  current  header  next  node  previous  Object  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Wrong_Literal]^return false;^240^^^^^236^244^return true;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] remove [RETURN_TYPE] boolean   Object value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  oldValue  value  Node  current  header  next  node  previous  Object  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Variable_Misuse]^for  ( Node<E> node = header.next; node != header; node = 0 )  {^237^^^^^236^244^for  ( Node<E> node = header.next; node != header; node = node.next )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] remove [RETURN_TYPE] boolean   Object value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  oldValue  value  Node  current  header  next  node  previous  Object  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Argument_Swapping]^for  ( Node<E> node.next = header.next; node != header; node = node )  {^237^^^^^236^244^for  ( Node<E> node = header.next; node != header; node = node.next )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] remove [RETURN_TYPE] boolean   Object value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  oldValue  value  Node  current  header  next  node  previous  Object  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Argument_Swapping]^for  ( Node<E> node = header; node != header.next; node = node.next )  {^237^^^^^236^244^for  ( Node<E> node = header.next; node != header; node = node.next )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] remove [RETURN_TYPE] boolean   Object value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  oldValue  value  Node  current  header  next  node  previous  Object  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Argument_Swapping]^for  ( Node<E> header = node.next; node != header; node = node.next )  {^237^^^^^236^244^for  ( Node<E> node = header.next; node != header; node = node.next )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] remove [RETURN_TYPE] boolean   Object value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  oldValue  value  Node  current  header  next  node  previous  Object  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Argument_Swapping]^for  ( Node<E> node = node.next.next; node != header; node = header )  {^237^^^^^236^244^for  ( Node<E> node = header.next; node != header; node = node.next )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] remove [RETURN_TYPE] boolean   Object value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  oldValue  value  Node  current  header  next  node  previous  Object  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Wrong_Operator]^for  ( Node<E> node = header.next; node == header; node = node.next )  {^237^^^^^236^244^for  ( Node<E> node = header.next; node != header; node = node.next )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] remove [RETURN_TYPE] boolean   Object value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  oldValue  value  Node  current  header  next  node  previous  Object  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Argument_Swapping]^for  ( Node<E> node = header.next.next; node != header; node = node.next )  {^237^^^^^236^244^for  ( Node<E> node = header.next; node != header; node = node.next )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] remove [RETURN_TYPE] boolean   Object value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  oldValue  value  Node  current  header  next  node  previous  Object  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Wrong_Literal]^return true;^243^^^^^236^244^return false;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] remove [RETURN_TYPE] boolean   Object value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  oldValue  value  Node  current  header  next  node  previous  Object  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Wrong_Literal]^boolean modified = true;^256^^^^^255^265^boolean modified = false;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] removeAll [RETURN_TYPE] boolean   Collection<?> coll [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  modified  E  e  oldValue  value  Node  current  header  next  node  previous  Iterator  it  Collection  coll  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Argument_Swapping]^if  ( it.contains ( coll.next (  )  )  )  {^259^^^^^255^265^if  ( coll.contains ( it.next (  )  )  )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] removeAll [RETURN_TYPE] boolean   Collection<?> coll [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  modified  E  e  oldValue  value  Node  current  header  next  node  previous  Iterator  it  Collection  coll  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Wrong_Literal]^modified = false;^261^^^^^255^265^modified = true;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] removeAll [RETURN_TYPE] boolean   Collection<?> coll [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  modified  E  e  oldValue  value  Node  current  header  next  node  previous  Iterator  it  Collection  coll  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Variable_Misuse]^if  ( coll.contains ( this.next (  )  )  )  {^259^^^^^255^265^if  ( coll.contains ( it.next (  )  )  )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] removeAll [RETURN_TYPE] boolean   Collection<?> coll [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  modified  E  e  oldValue  value  Node  current  header  next  node  previous  Iterator  it  Collection  coll  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Wrong_Literal]^boolean modified = true;^279^^^^^278^288^boolean modified = false;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] retainAll [RETURN_TYPE] boolean   Collection<?> coll [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  modified  E  e  oldValue  value  Node  current  header  next  node  previous  Iterator  it  Collection  coll  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Argument_Swapping]^if  ( it.contains ( coll.next (  )  )  == false )  {^282^^^^^278^288^if  ( coll.contains ( it.next (  )  )  == false )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] retainAll [RETURN_TYPE] boolean   Collection<?> coll [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  modified  E  e  oldValue  value  Node  current  header  next  node  previous  Iterator  it  Collection  coll  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Wrong_Operator]^if  ( coll.contains ( it.next (  )  )  >= false )  {^282^^^^^278^288^if  ( coll.contains ( it.next (  )  )  == false )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] retainAll [RETURN_TYPE] boolean   Collection<?> coll [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  modified  E  e  oldValue  value  Node  current  header  next  node  previous  Iterator  it  Collection  coll  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Wrong_Literal]^if  ( coll.contains ( it.next (  )  )  == true )  {^282^^^^^278^288^if  ( coll.contains ( it.next (  )  )  == false )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] retainAll [RETURN_TYPE] boolean   Collection<?> coll [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  modified  E  e  oldValue  value  Node  current  header  next  node  previous  Iterator  it  Collection  coll  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Wrong_Literal]^modified = false;^284^^^^^278^288^modified = true;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] retainAll [RETURN_TYPE] boolean   Collection<?> coll [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  modified  E  e  oldValue  value  Node  current  header  next  node  previous  Iterator  it  Collection  coll  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Wrong_Operator]^if  ( coll.contains ( it.next (  )  )  != false )  {^282^^^^^278^288^if  ( coll.contains ( it.next (  )  )  == false )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] retainAll [RETURN_TYPE] boolean   Collection<?> coll [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  modified  E  e  oldValue  value  Node  current  header  next  node  previous  Iterator  it  Collection  coll  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Wrong_Literal]^final Node<E> node = getNode ( index, true ) ;^291^^^^^290^295^final Node<E> node = getNode ( index, false ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] set [RETURN_TYPE] E   final int index final E value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[BugLab_Variable_Misuse]^final Node<E> node = getNode ( toIndexExclusive, false ) ;^291^^^^^290^295^final Node<E> node = getNode ( index, false ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] set [RETURN_TYPE] E   final int index final E value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[BugLab_Variable_Misuse]^updateNode ( node, oldValue ) ;^293^^^^^290^295^updateNode ( node, value ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] set [RETURN_TYPE] E   final int index final E value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[BugLab_Argument_Swapping]^updateNode ( value, node ) ;^293^^^^^290^295^updateNode ( node, value ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] set [RETURN_TYPE] E   final int index final E value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[BugLab_Variable_Misuse]^return value;^294^^^^^290^295^return oldValue;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] set [RETURN_TYPE] E   final int index final E value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[BugLab_Argument_Swapping]^final Node<E> node = header;^304^^^^^303^309^final Node<E> node = header.next;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getFirst [RETURN_TYPE] E   [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[BugLab_Argument_Swapping]^final Node<E> node = header.next.next;^304^^^^^303^309^final Node<E> node = header.next;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getFirst [RETURN_TYPE] E   [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[BugLab_Argument_Swapping]^if  ( header == node )  {^305^^^^^303^309^if  ( node == header )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getFirst [RETURN_TYPE] E   [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[BugLab_Wrong_Operator]^if  ( node >= header )  {^305^^^^^303^309^if  ( node == header )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getFirst [RETURN_TYPE] E   [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[BugLab_Argument_Swapping]^final Node<E> node = header;^312^^^^^311^317^final Node<E> node = header.previous;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getLast [RETURN_TYPE] E   [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[BugLab_Argument_Swapping]^final Node<E> node = header.previous.previous;^312^^^^^311^317^final Node<E> node = header.previous;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getLast [RETURN_TYPE] E   [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[BugLab_Argument_Swapping]^if  ( header == node )  {^313^^^^^311^317^if  ( node == header )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getLast [RETURN_TYPE] E   [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[BugLab_Wrong_Operator]^if  ( node >= header )  {^313^^^^^311^317^if  ( node == header )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getLast [RETURN_TYPE] E   [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[BugLab_Variable_Misuse]^addNodeAfter ( header, value ) ;^320^^^^^319^322^addNodeAfter ( header, o ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addFirst [RETURN_TYPE] boolean   final E o [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[BugLab_Variable_Misuse]^addNodeAfter ( 2, o ) ;^320^^^^^319^322^addNodeAfter ( header, o ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addFirst [RETURN_TYPE] boolean   final E o [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[BugLab_Argument_Swapping]^addNodeAfter ( o, header ) ;^320^^^^^319^322^addNodeAfter ( header, o ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addFirst [RETURN_TYPE] boolean   final E o [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[BugLab_Wrong_Literal]^return false;^321^^^^^319^322^return true;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addFirst [RETURN_TYPE] boolean   final E o [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[BugLab_Variable_Misuse]^addNodeBefore ( header, value ) ;^325^^^^^324^327^addNodeBefore ( header, o ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addLast [RETURN_TYPE] boolean   final E o [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[BugLab_Argument_Swapping]^addNodeBefore ( o, header ) ;^325^^^^^324^327^addNodeBefore ( header, o ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addLast [RETURN_TYPE] boolean   final E o [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[BugLab_Wrong_Literal]^return false;^326^^^^^324^327^return true;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addLast [RETURN_TYPE] boolean   final E o [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[BugLab_Argument_Swapping]^final Node<E> node = header;^330^^^^^329^337^final Node<E> node = header.next;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] removeFirst [RETURN_TYPE] E   [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[BugLab_Argument_Swapping]^final Node<E> node = header.next.next;^330^^^^^329^337^final Node<E> node = header.next;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] removeFirst [RETURN_TYPE] E   [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[BugLab_Variable_Misuse]^if  ( 1 == header )  {^331^^^^^329^337^if  ( node == header )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] removeFirst [RETURN_TYPE] E   [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[BugLab_Argument_Swapping]^if  ( header == node )  {^331^^^^^329^337^if  ( node == header )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] removeFirst [RETURN_TYPE] E   [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[BugLab_Wrong_Operator]^if  ( node >= header )  {^331^^^^^329^337^if  ( node == header )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] removeFirst [RETURN_TYPE] E   [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[BugLab_Variable_Misuse]^return value;^336^^^^^329^337^return oldValue;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] removeFirst [RETURN_TYPE] E   [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[BugLab_Argument_Swapping]^final Node<E> node = header;^340^^^^^339^347^final Node<E> node = header.previous;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] removeLast [RETURN_TYPE] E   [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[BugLab_Argument_Swapping]^final Node<E> node = header.previous.previous;^340^^^^^339^347^final Node<E> node = header.previous;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] removeLast [RETURN_TYPE] E   [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[BugLab_Argument_Swapping]^if  ( header == node )  {^341^^^^^339^347^if  ( node == header )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] removeLast [RETURN_TYPE] E   [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[BugLab_Wrong_Operator]^if  ( node != header )  {^341^^^^^339^347^if  ( node == header )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] removeLast [RETURN_TYPE] E   [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[BugLab_Variable_Misuse]^return value;^346^^^^^339^347^return oldValue;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] removeLast [RETURN_TYPE] E   [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[BugLab_Variable_Misuse]^if  ( o2 == this )  {^352^^^^^351^372^if  ( obj == this )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  Node  current  header  next  node  previous  Object  o1  o2  obj  List  other  ListIterator  it1  it2  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Wrong_Operator]^if  ( obj != this )  {^352^^^^^351^372^if  ( obj == this )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  Node  current  header  next  node  previous  Object  o1  o2  obj  List  other  ListIterator  it1  it2  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Wrong_Literal]^return false;^353^^^^^351^372^return true;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  Node  current  header  next  node  previous  Object  o1  o2  obj  List  other  ListIterator  it1  it2  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Variable_Misuse]^if  ( o2 instanceof List == false )  {^355^^^^^351^372^if  ( obj instanceof List == false )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  Node  current  header  next  node  previous  Object  o1  o2  obj  List  other  ListIterator  it1  it2  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Wrong_Operator]^if  ( obj instanceof List != false )  {^355^^^^^351^372^if  ( obj instanceof List == false )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  Node  current  header  next  node  previous  Object  o1  o2  obj  List  other  ListIterator  it1  it2  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Wrong_Operator]^if  ( obj  <=  List == false )  {^355^^^^^351^372^if  ( obj instanceof List == false )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  Node  current  header  next  node  previous  Object  o1  o2  obj  List  other  ListIterator  it1  it2  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Wrong_Literal]^if  ( obj instanceof List == true )  {^355^^^^^351^372^if  ( obj instanceof List == false )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  Node  current  header  next  node  previous  Object  o1  o2  obj  List  other  ListIterator  it1  it2  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Wrong_Literal]^return true;^356^^^^^351^372^return false;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  Node  current  header  next  node  previous  Object  o1  o2  obj  List  other  ListIterator  it1  it2  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Variable_Misuse]^if  ( this.size (  )  != size (  )  )  {^359^^^^^351^372^if  ( other.size (  )  != size (  )  )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  Node  current  header  next  node  previous  Object  o1  o2  obj  List  other  ListIterator  it1  it2  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Wrong_Operator]^if  ( other.size (  )  == size (  )  )  {^359^^^^^351^372^if  ( other.size (  )  != size (  )  )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  Node  current  header  next  node  previous  Object  o1  o2  obj  List  other  ListIterator  it1  it2  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Wrong_Literal]^return true;^360^^^^^351^372^return false;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  Node  current  header  next  node  previous  Object  o1  o2  obj  List  other  ListIterator  it1  it2  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Argument_Swapping]^while  ( it2.hasNext (  )  && it1.hasNext (  )  )  {^364^^^^^351^372^while  ( it1.hasNext (  )  && it2.hasNext (  )  )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  Node  current  header  next  node  previous  Object  o1  o2  obj  List  other  ListIterator  it1  it2  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Wrong_Operator]^while  ( it1.hasNext (  )  || it2.hasNext (  )  )  {^364^^^^^351^372^while  ( it1.hasNext (  )  && it2.hasNext (  )  )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  Node  current  header  next  node  previous  Object  o1  o2  obj  List  other  ListIterator  it1  it2  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Variable_Misuse]^if  ( ! ( obj == null ? o2 == null : o1.equals ( o2 )  )  )  {^367^^^^^351^372^if  ( ! ( o1 == null ? o2 == null : o1.equals ( o2 )  )  )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  Node  current  header  next  node  previous  Object  o1  o2  obj  List  other  ListIterator  it1  it2  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Variable_Misuse]^if  ( ! ( o1 == null ? obj == null : o1.equals ( o2 )  )  )  {^367^^^^^351^372^if  ( ! ( o1 == null ? o2 == null : o1.equals ( o2 )  )  )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  Node  current  header  next  node  previous  Object  o1  o2  obj  List  other  ListIterator  it1  it2  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Argument_Swapping]^if  ( ! ( o2 == null ? o1 == null : o1.equals ( o2 )  )  )  {^367^^^^^351^372^if  ( ! ( o1 == null ? o2 == null : o1.equals ( o2 )  )  )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  Node  current  header  next  node  previous  Object  o1  o2  obj  List  other  ListIterator  it1  it2  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Wrong_Operator]^if  ( ! ( o1 != null ? o2 == null : o1.equals ( o2 )  )  )  {^367^^^^^351^372^if  ( ! ( o1 == null ? o2 == null : o1.equals ( o2 )  )  )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  Node  current  header  next  node  previous  Object  o1  o2  obj  List  other  ListIterator  it1  it2  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Wrong_Operator]^if  ( ! ( o1 == null ? o2 != null : o1.equals ( o2 )  )  )  {^367^^^^^351^372^if  ( ! ( o1 == null ? o2 == null : o1.equals ( o2 )  )  )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  Node  current  header  next  node  previous  Object  o1  o2  obj  List  other  ListIterator  it1  it2  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Wrong_Literal]^return true;^368^^^^^351^372^return false;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  Node  current  header  next  node  previous  Object  o1  o2  obj  List  other  ListIterator  it1  it2  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Variable_Misuse]^return ! ( 4.hasNext (  )  || it2.hasNext (  )  ) ;^371^^^^^351^372^return ! ( it1.hasNext (  )  || it2.hasNext (  )  ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  Node  current  header  next  node  previous  Object  o1  o2  obj  List  other  ListIterator  it1  it2  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Argument_Swapping]^return ! ( it2.hasNext (  )  || it1.hasNext (  )  ) ;^371^^^^^351^372^return ! ( it1.hasNext (  )  || it2.hasNext (  )  ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  Node  current  header  next  node  previous  Object  o1  o2  obj  List  other  ListIterator  it1  it2  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Wrong_Operator]^return ! ( it1.hasNext (  )  && it2.hasNext (  )  ) ;^371^^^^^351^372^return ! ( it1.hasNext (  )  || it2.hasNext (  )  ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  Node  current  header  next  node  previous  Object  o1  o2  obj  List  other  ListIterator  it1  it2  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Wrong_Literal]^int hashCode = toIndex;^376^^^^^375^381^int hashCode = 1;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[BugLab_Variable_Misuse]^hashCode = 31 * nextIndex +  ( e == null ? 0 : e.hashCode (  )  ) ;^378^^^^^375^381^hashCode = 31 * hashCode +  ( e == null ? 0 : e.hashCode (  )  ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[BugLab_Variable_Misuse]^hashCode = 31 * hashCode +  ( value == null ? 0 : e.hashCode (  )  ) ;^378^^^^^375^381^hashCode = 31 * hashCode +  ( e == null ? 0 : e.hashCode (  )  ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[BugLab_Argument_Swapping]^hashCode = 31 * e +  ( hashCode == null ? 0 : e.hashCode (  )  ) ;^378^^^^^375^381^hashCode = 31 * hashCode +  ( e == null ? 0 : e.hashCode (  )  ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[BugLab_Wrong_Operator]^hashCode = 31 * hashCode +  ^  ( e == null ? 0 : e.hashCode (  )  ) ;^378^^^^^375^381^hashCode = 31 * hashCode +  ( e == null ? 0 : e.hashCode (  )  ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[BugLab_Wrong_Operator]^hashCode = 31 + hashCode +  ( e == null ? 0 : e.hashCode (  )  ) ;^378^^^^^375^381^hashCode = 31 * hashCode +  ( e == null ? 0 : e.hashCode (  )  ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[BugLab_Wrong_Operator]^hashCode = 31 * hashCode +  ( e != null ? 0 : e.hashCode (  )  ) ;^378^^^^^375^381^hashCode = 31 * hashCode +  ( e == null ? 0 : e.hashCode (  )  ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[BugLab_Wrong_Literal]^hashCode = 30 * hashCode +  ( e == null ? 0 : e.hashCode (  )  ) ;^378^^^^^375^381^hashCode = 31 * hashCode +  ( e == null ? 0 : e.hashCode (  )  ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[BugLab_Variable_Misuse]^return nextIndex;^380^^^^^375^381^return hashCode;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[BugLab_Wrong_Operator]^if  ( size (  )  < 0 )  {^385^^^^^384^403^if  ( size (  )  == 0 )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  hasNext  StringBuilder  buf  E  e  o  oldValue  value  Node  current  header  next  node  previous  Iterator  it  Object  value  int  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Wrong_Literal]^if  ( size (  )  == -1 )  {^385^^^^^384^403^if  ( size (  )  == 0 )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  hasNext  StringBuilder  buf  E  e  o  oldValue  value  Node  current  header  next  node  previous  Iterator  it  Object  value  int  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Wrong_Operator]^final StringBuilder buf = new StringBuilder ( 16 / size (  )  ) ;^388^^^^^384^403^final StringBuilder buf = new StringBuilder ( 16 * size (  )  ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  hasNext  StringBuilder  buf  E  e  o  oldValue  value  Node  current  header  next  node  previous  Iterator  it  Object  value  int  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Wrong_Literal]^final StringBuilder buf = new StringBuilder ( fromIndex * size (  )  ) ;^388^^^^^384^403^final StringBuilder buf = new StringBuilder ( 16 * size (  )  ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  hasNext  StringBuilder  buf  E  e  o  oldValue  value  Node  current  header  next  node  previous  Iterator  it  Object  value  int  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Wrong_Literal]^final StringBuilder buf = new StringBuilder ( fromIndexInclusive * size (  )  ) ;^388^^^^^384^403^final StringBuilder buf = new StringBuilder ( 16 * size (  )  ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  hasNext  StringBuilder  buf  E  e  o  oldValue  value  Node  current  header  next  node  previous  Iterator  it  Object  value  int  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Wrong_Operator]^buf.append ( value != this ? " ( this Collection ) " : value ) ;^395^^^^^384^403^buf.append ( value == this ? " ( this Collection ) " : value ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  hasNext  StringBuilder  buf  E  e  o  oldValue  value  Node  current  header  next  node  previous  Iterator  it  Object  value  int  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Wrong_Operator]^buf.append ( value <= this ? " ( this Collection ) " : value ) ;^395^^^^^384^403^buf.append ( value == this ? " ( this Collection ) " : value ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  hasNext  StringBuilder  buf  E  e  o  oldValue  value  Node  current  header  next  node  previous  Iterator  it  Object  value  int  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Argument_Swapping]^return value2 == value1 ||  ( value1 == null ? false : value1.equals ( value2 )  ) ;^416^^^^^415^417^return value1 == value2 ||  ( value1 == null ? false : value1.equals ( value2 )  ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] isEqualValue [RETURN_TYPE] boolean   Object value1 Object value2 [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  Node  current  header  next  node  previous  Object  value1  value2  int  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Wrong_Operator]^return value1 == value2 &&  ( value1 == null ? false : value1.equals ( value2 )  ) ;^416^^^^^415^417^return value1 == value2 ||  ( value1 == null ? false : value1.equals ( value2 )  ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] isEqualValue [RETURN_TYPE] boolean   Object value1 Object value2 [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  Node  current  header  next  node  previous  Object  value1  value2  int  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Wrong_Operator]^return value1 != value2 ||  ( value1 == null ? false : value1.equals ( value2 )  ) ;^416^^^^^415^417^return value1 == value2 ||  ( value1 == null ? false : value1.equals ( value2 )  ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] isEqualValue [RETURN_TYPE] boolean   Object value1 Object value2 [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  Node  current  header  next  node  previous  Object  value1  value2  int  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Wrong_Operator]^return value1 == value2 ||  ( value1 != null ? false : value1.equals ( value2 )  ) ;^416^^^^^415^417^return value1 == value2 ||  ( value1 == null ? false : value1.equals ( value2 )  ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] isEqualValue [RETURN_TYPE] boolean   Object value1 Object value2 [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  Node  current  header  next  node  previous  Object  value1  value2  int  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Wrong_Literal]^return value1 == value2 ||  ( value1 == null ? true : value1.equals ( value2 )  ) ;^416^^^^^415^417^return value1 == value2 ||  ( value1 == null ? false : value1.equals ( value2 )  ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] isEqualValue [RETURN_TYPE] boolean   Object value1 Object value2 [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  Node  current  header  next  node  previous  Object  value1  value2  int  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Variable_Misuse]^node.setValue ( oldValue ) ;^428^^^^^427^429^node.setValue ( value ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] updateNode [RETURN_TYPE] void   Node<E> node final E value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[BugLab_Variable_Misuse]^return new Node<E> ( oldValue ) ;^451^^^^^450^452^return new Node<E> ( value ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] createNode [RETURN_TYPE] AbstractLinkedList$Node   final E value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[BugLab_Variable_Misuse]^final Node<E> newNode = createNode ( oldValue ) ;^466^^^^^465^468^final Node<E> newNode = createNode ( value ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addNodeBefore [RETURN_TYPE] void   Node<E> node final E value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  newNode  next  node  previous  
[BugLab_Argument_Swapping]^addNode ( node, newNode ) ;^467^^^^^465^468^addNode ( newNode, node ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addNodeBefore [RETURN_TYPE] void   Node<E> node final E value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  newNode  next  node  previous  
[BugLab_Variable_Misuse]^final Node<E> newNode = createNode ( oldValue ) ;^482^^^^^481^484^final Node<E> newNode = createNode ( value ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addNodeAfter [RETURN_TYPE] void   Node<E> node final E value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  newNode  next  node  previous  
[BugLab_Argument_Swapping]^addNode ( node.next, newNode ) ;^483^^^^^481^484^addNode ( newNode, node.next ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addNodeAfter [RETURN_TYPE] void   Node<E> node final E value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  newNode  next  node  previous  
[BugLab_Argument_Swapping]^addNode ( newNode, node.next.next ) ;^483^^^^^481^484^addNode ( newNode, node.next ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addNodeAfter [RETURN_TYPE] void   Node<E> node final E value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  newNode  next  node  previous  
[BugLab_Argument_Swapping]^addNode ( newNode, node ) ;^483^^^^^481^484^addNode ( newNode, node.next ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addNodeAfter [RETURN_TYPE] void   Node<E> node final E value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  newNode  next  node  previous  
[BugLab_Argument_Swapping]^nodeToInsert.previous = insertBeforeNode;^495^^^^^493^500^nodeToInsert.previous = insertBeforeNode.previous;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addNode [RETURN_TYPE] void   Node<E> nodeToInsert Node<E> insertBeforeNode [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^node.previous.next = 0;^509^^^^^508^513^node.previous.next = node.next;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] removeNode [RETURN_TYPE] void   Node<E> node [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^node.previous.next = node;^509^^^^^508^513^node.previous.next = node.next;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] removeNode [RETURN_TYPE] void   Node<E> node [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Literal]^size = toIndex;^521^^^^^518^523^size = 0;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] removeAllNodes [RETURN_TYPE] void   [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^if  ( toIndexExclusive < 0 )  {^538^^^^^523^553^if  ( index < 0 )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Operator]^if  ( index <= 0 )  {^538^^^^^523^553^if  ( index < 0 )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Literal]^if  ( index < startIndex )  {^538^^^^^523^553^if  ( index < 0 )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  ( " + nextIndex + " )  less than zero." ) ;^539^540^^^^524^554^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  ( " + index + " )  less than zero." ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Operator]^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  &  ( " + index + " )  less than zero." ) ;^539^540^^^^524^554^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  ( " + index + " )  less than zero." ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Operator]^throw new IndexOutOfBoundsException ( "Couldn't get the node: "  &  "index  ( "  &  index + " )  less than zero." ) ;^539^540^^^^524^554^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  ( " + index + " )  less than zero." ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Operator]^throw new IndexOutOfBoundsException ( "Couldn't get the node: "  <=  "index  ( " + index + " )  less than zero." ) ;^539^540^^^^524^554^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  ( " + index + " )  less than zero." ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  ( " + offset + " )  less than zero." ) ;^539^540^^^^524^554^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  ( " + index + " )  less than zero." ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Operator]^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  <  ( " + index + " )  less than zero." ) ;^539^540^^^^524^554^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  ( " + index + " )  less than zero." ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Operator]^throw new IndexOutOfBoundsException ( "Couldn't get the node: "  ||  "index  ( " + index + " )  less than zero." ) ;^539^540^^^^524^554^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  ( " + index + " )  less than zero." ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Operator]^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  ==  ( " + index + " )  less than zero." ) ;^539^540^^^^524^554^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  ( " + index + " )  less than zero." ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Operator]^throw new IndexOutOfBoundsException ( "Couldn't get the node: "  <=  "index  ( "  <=  index + " )  less than zero." ) ;^539^540^^^^524^554^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  ( " + index + " )  less than zero." ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Operator]^throw new IndexOutOfBoundsException ( "Couldn't get the node: "  |  "index  ( " + index + " )  less than zero." ) ;^539^540^^^^524^554^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  ( " + index + " )  less than zero." ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  ( " + toIndex + " )  less than zero." ) ;^539^540^^^^524^554^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  ( " + index + " )  less than zero." ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Operator]^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  >=  ( " + index + " )  less than zero." ) ;^539^540^^^^524^554^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  ( " + index + " )  less than zero." ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Operator]^throw new IndexOutOfBoundsException ( "Couldn't get the node: "  &&  "index  ( " + index + " )  less than zero." ) ;^539^540^^^^524^554^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  ( " + index + " )  less than zero." ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^if  ( !endMarkerAllowed && nextIndex == size )  {^542^^^^^527^557^if  ( !endMarkerAllowed && index == size )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^if  ( !endMarkerAllowed && index == nextIndex )  {^542^^^^^527^557^if  ( !endMarkerAllowed && index == size )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^if  ( !endMarkerAllowed && size == index )  {^542^^^^^527^557^if  ( !endMarkerAllowed && index == size )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Operator]^if  ( !endMarkerAllowed || index == size )  {^542^^^^^527^557^if  ( !endMarkerAllowed && index == size )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Operator]^if  ( !endMarkerAllowed && index <= size )  {^542^^^^^527^557^if  ( !endMarkerAllowed && index == size )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  ( " + nextIndex + " )  is the size of the list." ) ;^543^544^^^^528^558^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  ( " + index + " )  is the size of the list." ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Operator]^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  !=  ( " + index + " )  is the size of the list." ) ;^543^544^^^^528^558^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  ( " + index + " )  is the size of the list." ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Operator]^throw new IndexOutOfBoundsException ( "Couldn't get the node: "  ^  "index  ( "  ^  index + " )  is the size of the list." ) ;^543^544^^^^528^558^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  ( " + index + " )  is the size of the list." ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Operator]^throw new IndexOutOfBoundsException ( "Couldn't get the node: "  >=  "index  ( " + index + " )  is the size of the list." ) ;^543^544^^^^528^558^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  ( " + index + " )  is the size of the list." ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Operator]^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  >>  ( " + index + " )  is the size of the list." ) ;^543^544^^^^528^558^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  ( " + index + " )  is the size of the list." ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Operator]^throw new IndexOutOfBoundsException ( "Couldn't get the node: "  ||  "index  ( "  ||  index + " )  is the size of the list." ) ;^543^544^^^^528^558^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  ( " + index + " )  is the size of the list." ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Operator]^throw new IndexOutOfBoundsException ( "Couldn't get the node: "  <<  "index  ( " + index + " )  is the size of the list." ) ;^543^544^^^^528^558^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  ( " + index + " )  is the size of the list." ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Operator]^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  >  ( " + index + " )  is the size of the list." ) ;^543^544^^^^528^558^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  ( " + index + " )  is the size of the list." ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Operator]^throw new IndexOutOfBoundsException ( "Couldn't get the node: "  <<  "index  ( "  <<  index + " )  is the size of the list." ) ;^543^544^^^^528^558^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  ( " + index + " )  is the size of the list." ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Operator]^throw new IndexOutOfBoundsException ( "Couldn't get the node: "  ^  "index  ( " + index + " )  is the size of the list." ) ;^543^544^^^^528^558^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  ( " + index + " )  is the size of the list." ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  ( " + toIndexExclusive + " )  is the size of the list." ) ;^543^544^^^^528^558^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  ( " + index + " )  is the size of the list." ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Operator]^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  <<  ( " + index + " )  is the size of the list." ) ;^543^544^^^^528^558^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  ( " + index + " )  is the size of the list." ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Operator]^throw new IndexOutOfBoundsException ( "Couldn't get the node: "  <  "index  ( "  <  index + " )  is the size of the list." ) ;^543^544^^^^528^558^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  ( " + index + " )  is the size of the list." ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Operator]^throw new IndexOutOfBoundsException ( "Couldn't get the node: "  &  "index  ( " + index + " )  is the size of the list." ) ;^543^544^^^^528^558^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  ( " + index + " )  is the size of the list." ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^if  ( startIndex > size )  {^546^^^^^531^561^if  ( index > size )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^if  ( index > toIndexExclusive )  {^546^^^^^531^561^if  ( index > size )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^if  ( size > index )  {^546^^^^^531^561^if  ( index > size )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Operator]^if  ( index == size )  {^546^^^^^531^561^if  ( index > size )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  ( " + toIndex + " )  greater than the size of the " + "list  ( " + size + " ) ." ) ;^547^548^549^^^532^562^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  ( " + index + " )  greater than the size of the " + "list  ( " + size + " ) ." ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  ( " + index + " )  greater than the toIndex of the " + "list  ( " + size + " ) ." ) ;^547^548^549^^^532^562^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  ( " + index + " )  greater than the size of the " + "list  ( " + size + " ) ." ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  ( " + size + " )  greater than the index of the " + "list  ( " + size + " ) ." ) ;^547^548^549^^^532^562^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  ( " + index + " )  greater than the size of the " + "list  ( " + size + " ) ." ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Operator]^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  ==  ( " + index + " )  greater than the size of the " + "list  ( " + size + " ) ." ) ;^547^548^549^^^532^562^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  ( " + index + " )  greater than the size of the " + "list  ( " + size + " ) ." ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Operator]^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  !=  ( " + index + " )  greater than the size of the " + "list  ( " + size + " ) ." ) ;^547^548^549^^^532^562^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  ( " + index + " )  greater than the size of the " + "list  ( " + size + " ) ." ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Operator]^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  ||  ( " + index + " )  greater than the size of the " + "list  ( " + size + " ) ." ) ;^547^548^549^^^532^562^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  ( " + index + " )  greater than the size of the " + "list  ( " + size + " ) ." ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Operator]^throw new IndexOutOfBoundsException ( "Couldn't get the node: "  &  "index  ( "  &  index + " )  greater than the size of the " + "list  ( " + size + " ) ." ) ;^547^548^549^^^532^562^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  ( " + index + " )  greater than the size of the " + "list  ( " + size + " ) ." ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Operator]^throw new IndexOutOfBoundsException ( "Couldn't get the node: "  |  "index  ( " + index + " )  greater than the size of the " + "list  ( " + size + " ) ." ) ;^547^548^549^^^532^562^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  ( " + index + " )  greater than the size of the " + "list  ( " + size + " ) ." ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  ( " + index + " )  greater than the nextIndex of the " + "list  ( " + size + " ) ." ) ;^547^548^549^^^532^562^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  ( " + index + " )  greater than the size of the " + "list  ( " + size + " ) ." ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Operator]^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  >=  ( " + index + " )  greater than the size of the " + "list  ( " + size + " ) ." ) ;^547^548^549^^^532^562^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  ( " + index + " )  greater than the size of the " + "list  ( " + size + " ) ." ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Operator]^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index   instanceof   ( " + index + " )  greater than the size of the " + "list  ( " + size + " ) ." ) ;^547^548^549^^^532^562^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  ( " + index + " )  greater than the size of the " + "list  ( " + size + " ) ." ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Operator]^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  >>  ( " + index + " )  greater than the size of the " + "list  ( " + size + " ) ." ) ;^547^548^549^^^532^562^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  ( " + index + " )  greater than the size of the " + "list  ( " + size + " ) ." ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Operator]^throw new IndexOutOfBoundsException ( "Couldn't get the node: "  >>  "index  ( " + index + " )  greater than the size of the " + "list  ( " + size + " ) ." ) ;^547^548^549^^^532^562^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  ( " + index + " )  greater than the size of the " + "list  ( " + size + " ) ." ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  ( " + toIndexExclusive + " )  greater than the size of the " + "list  ( " + size + " ) ." ) ;^547^548^549^^^532^562^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  ( " + index + " )  greater than the size of the " + "list  ( " + size + " ) ." ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Operator]^throw new IndexOutOfBoundsException ( "Couldn't get the node: "  <  "index  ( "  <  index + " )  greater than the size of the " + "list  ( " + size + " ) ." ) ;^547^548^549^^^532^562^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  ( " + index + " )  greater than the size of the " + "list  ( " + size + " ) ." ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  ( " + nextIndex + " )  greater than the size of the " + "list  ( " + size + " ) ." ) ;^547^548^549^^^532^562^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  ( " + index + " )  greater than the size of the " + "list  ( " + size + " ) ." ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Operator]^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  <  ( " + index + " )  greater than the size of the " + "list  ( " + size + " ) ." ) ;^547^548^549^^^532^562^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  ( " + index + " )  greater than the size of the " + "list  ( " + size + " ) ." ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Operator]^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  ^  ( " + index + " )  greater than the size of the " + "list  ( " + size + " ) ." ) ;^547^548^549^^^532^562^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  ( " + index + " )  greater than the size of the " + "list  ( " + size + " ) ." ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Operator]^throw new IndexOutOfBoundsException ( "Couldn't get the node: "   instanceof   "index  ( " + index + " )  greater than the size of the " + "list  ( " + size + " ) ." ) ;^547^548^549^^^532^562^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  ( " + index + " )  greater than the size of the " + "list  ( " + size + " ) ." ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^if  ( toIndexExclusive < size / 2 )  {^553^^^^^538^568^if  ( index < size / 2 )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^if  ( index < toIndexExclusive / 2 )  {^553^^^^^538^568^if  ( index < size / 2 )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^if  ( size < index / 2 )  {^553^^^^^538^568^if  ( index < size / 2 )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Operator]^if  ( index == size / 2 )  {^553^^^^^538^568^if  ( index < size / 2 )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Operator]^if  ( index < size * 2 )  {^553^^^^^538^568^if  ( index < size / 2 )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Operator]^if  ( index <= size / 2 )  {^553^^^^^538^568^if  ( index < size / 2 )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Literal]^if  ( index < size / index )  {^553^^^^^538^568^if  ( index < size / 2 )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^for  ( int toIndex = size; currentIndex > index; currentIndex-- )  {^562^^^^^553^565^for  ( int currentIndex = size; currentIndex > index; currentIndex-- )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^for  ( int currentIndex = size; currentIndex > toIndexExclusive; currentIndex-- )  {^562^^^^^553^565^for  ( int currentIndex = size; currentIndex > index; currentIndex-- )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^for  ( int index = size; currentIndex > currentIndex; currentIndex-- )  {^562^^^^^553^565^for  ( int currentIndex = size; currentIndex > index; currentIndex-- )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^for  ( int currentIndex = index; currentIndex > size; currentIndex-- )  {^562^^^^^553^565^for  ( int currentIndex = size; currentIndex > index; currentIndex-- )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Operator]^for  ( int currentIndex = size; currentIndex >= index; currentIndex-- )  {^562^^^^^553^565^for  ( int currentIndex = size; currentIndex > index; currentIndex-- )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^node = node.previous.previous;^563^^^^^553^565^node = node.previous;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^node = node;^563^^^^^553^565^node = node.previous;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^node = 2;^563^^^^^553^565^node = node.previous;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^for  ( int currentIndex = toIndexExclusive; currentIndex > index; currentIndex-- )  {^562^^^^^553^565^for  ( int currentIndex = size; currentIndex > index; currentIndex-- )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^for  ( int nextIndex = 0; currentIndex < index; currentIndex++ )  {^556^^^^^541^571^for  ( int currentIndex = 0; currentIndex < index; currentIndex++ )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^for  ( int currentIndex = 0; currentIndex < toIndexExclusive; currentIndex++ )  {^556^^^^^541^571^for  ( int currentIndex = 0; currentIndex < index; currentIndex++ )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^for  ( int index = 0; currentIndex < currentIndex; currentIndex++ )  {^556^^^^^541^571^for  ( int currentIndex = 0; currentIndex < index; currentIndex++ )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Operator]^for  ( int currentIndex = 0; currentIndex <= index; currentIndex++ )  {^556^^^^^541^571^for  ( int currentIndex = 0; currentIndex < index; currentIndex++ )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Literal]^for  ( int currentIndex = expectedModCount; currentIndex < index; currentIndex++ )  {^556^^^^^541^571^for  ( int currentIndex = 0; currentIndex < index; currentIndex++ )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^node = node.next.next;^557^^^^^542^572^node = node.next;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^node = node;^557^^^^^542^572^node = node.next;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^node = header;^555^^^^^540^570^node = header.next;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^node = header.next.next;^555^^^^^540^570^node = header.next;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^node = 1;^557^^^^^542^572^node = node.next;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Literal]^for  ( int currentIndex = nextIndex; currentIndex < index; currentIndex++ )  {^556^^^^^541^571^for  ( int currentIndex = 0; currentIndex < index; currentIndex++ )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^for  ( int toIndex = 0; currentIndex < index; currentIndex++ )  {^556^^^^^541^571^for  ( int currentIndex = 0; currentIndex < index; currentIndex++ )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Operator]^for  ( int currentIndex = 0; currentIndex == index; currentIndex++ )  {^556^^^^^541^571^for  ( int currentIndex = 0; currentIndex < index; currentIndex++ )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^node = this;^557^^^^^542^572^node = node.next;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^for  ( int offset = size; currentIndex > index; currentIndex-- )  {^562^^^^^547^577^for  ( int currentIndex = size; currentIndex > index; currentIndex-- )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^for  ( int currentIndex = toIndexExclusive; currentIndex > index; currentIndex-- )  {^562^^^^^547^577^for  ( int currentIndex = size; currentIndex > index; currentIndex-- )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^for  ( int index = size; currentIndex > currentIndex; currentIndex-- )  {^562^^^^^547^577^for  ( int currentIndex = size; currentIndex > index; currentIndex-- )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^for  ( int currentIndex = index; currentIndex > size; currentIndex-- )  {^562^^^^^547^577^for  ( int currentIndex = size; currentIndex > index; currentIndex-- )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^for  ( int size = currentIndex; currentIndex > index; currentIndex-- )  {^562^^^^^547^577^for  ( int currentIndex = size; currentIndex > index; currentIndex-- )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Operator]^for  ( int currentIndex = size; currentIndex >= index; currentIndex-- )  {^562^^^^^547^577^for  ( int currentIndex = size; currentIndex > index; currentIndex-- )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^node = node.previous.previous;^563^^^^^548^578^node = node.previous;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^node = node;^563^^^^^548^578^node = node.previous;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Literal]^for  ( int currentIndex = toIndexExclusive; currentIndex < index; currentIndex++ )  {^556^^^^^541^571^for  ( int currentIndex = 0; currentIndex < index; currentIndex++ )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^for  ( int currentIndex = nextIndex; currentIndex > index; currentIndex-- )  {^562^^^^^547^577^for  ( int currentIndex = size; currentIndex > index; currentIndex-- )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^return 1;^566^^^^^551^581^return node;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Literal]^return createSubListListIterator ( subList, 1 ) ;^577^^^^^576^578^return createSubListListIterator ( subList, 0 ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] createSubListIterator [RETURN_TYPE] Iterator   LinkedSubList<E> subList [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^return new LinkedSubListIterator<E> ( subList, offset ) ;^588^^^^^587^589^return new LinkedSubListIterator<E> ( subList, fromIndex ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] createSubListListIterator [RETURN_TYPE] ListIterator   LinkedSubList<E> subList final int fromIndex [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^return new LinkedSubListIterator<E> ( fromIndex, subList ) ;^588^^^^^587^589^return new LinkedSubListIterator<E> ( subList, fromIndex ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] createSubListListIterator [RETURN_TYPE] ListIterator   LinkedSubList<E> subList final int fromIndex [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^return new LinkedSubListIterator<E> ( subList, nextIndex ) ;^588^^^^^587^589^return new LinkedSubListIterator<E> ( subList, fromIndex ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] createSubListListIterator [RETURN_TYPE] ListIterator   LinkedSubList<E> subList final int fromIndex [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^outputStream.writeObject ( value ) ;^605^^^^^601^607^outputStream.writeObject ( e ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] doWriteObject [RETURN_TYPE] void   ObjectOutputStream outputStream [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  ObjectOutputStream  outputStream  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Variable_Misuse]^for  ( sizent i = 0; i < size; i++ )  {^623^^^^^620^626^for  ( int i = 0; i < size; i++ )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] doReadObject [RETURN_TYPE] void   ObjectInputStream inputStream [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  ObjectInputStream  inputStream  
[BugLab_Variable_Misuse]^for  ( int i = 0; i < nextIndex; i++ )  {^623^^^^^620^626^for  ( int i = 0; i < size; i++ )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] doReadObject [RETURN_TYPE] void   ObjectInputStream inputStream [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  ObjectInputStream  inputStream  
[BugLab_Argument_Swapping]^for  ( sizent i = 0; i < i; i++ )  {^623^^^^^620^626^for  ( int i = 0; i < size; i++ )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] doReadObject [RETURN_TYPE] void   ObjectInputStream inputStream [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  ObjectInputStream  inputStream  
[BugLab_Wrong_Operator]^for  ( int i = 0; i <= size; i++ )  {^623^^^^^620^626^for  ( int i = 0; i < size; i++ )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] doReadObject [RETURN_TYPE] void   ObjectInputStream inputStream [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  ObjectInputStream  inputStream  
[BugLab_Wrong_Literal]^for  ( int i = toIndex; i < size; i++ )  {^623^^^^^620^626^for  ( int i = 0; i < size; i++ )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] doReadObject [RETURN_TYPE] void   ObjectInputStream inputStream [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  ObjectInputStream  inputStream  
[BugLab_Wrong_Literal]^for  ( int i = -1; i < size; i++ )  {^623^^^^^620^626^for  ( int i = 0; i < size; i++ )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] doReadObject [RETURN_TYPE] void   ObjectInputStream inputStream [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  ObjectInputStream  inputStream  
[BugLab_Variable_Misuse]^return oldValue;^684^^^^^683^685^return value;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getValue [RETURN_TYPE] E   [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^this.value = oldValue;^694^^^^^693^695^this.value = value;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] setValue [RETURN_TYPE] void   final E value [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^this.next = 4;^734^^^^^733^735^this.next = next;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] setNextNode [RETURN_TYPE] void   Node<E> next [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^if  ( size != expectedModCount )  {^800^^^^^799^803^if  ( parent.modCount != expectedModCount )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] checkModCount [RETURN_TYPE] void   [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^if  ( parent.modCount != startIndex )  {^800^^^^^799^803^if  ( parent.modCount != expectedModCount )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] checkModCount [RETURN_TYPE] void   [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^if  ( expectedModCount != parent.modCount )  {^800^^^^^799^803^if  ( parent.modCount != expectedModCount )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] checkModCount [RETURN_TYPE] void   [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^if  ( expectedModCount.modCount != parent )  {^800^^^^^799^803^if  ( parent.modCount != expectedModCount )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] checkModCount [RETURN_TYPE] void   [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Operator]^if  ( parent.modCount < expectedModCount )  {^800^^^^^799^803^if  ( parent.modCount != expectedModCount )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] checkModCount [RETURN_TYPE] void   [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Operator]^if  ( current != null )  {^813^^^^^812^817^if  ( current == null )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getLastNodeReturned [RETURN_TYPE] AbstractLinkedList$Node   [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^return parent.header != next;^820^^^^^819^821^return next != parent.header;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^return parent != next.header;^820^^^^^819^821^return next != parent.header;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Operator]^return next <= parent.header;^820^^^^^819^821^return next != parent.header;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^next = next;^830^^^^^823^833^next = next.next;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] next [RETURN_TYPE] E   [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^next = next.next.next;^830^^^^^823^833^next = next.next;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] next [RETURN_TYPE] E   [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^return oldValue;^832^^^^^823^833^return value;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] next [RETURN_TYPE] E   [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^return next != parent.header;^836^^^^^835^837^return next.previous != parent.header;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] hasPrevious [RETURN_TYPE] boolean   [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^return parent.header.previous != next;^836^^^^^835^837^return next.previous != parent.header;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] hasPrevious [RETURN_TYPE] boolean   [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^return next.previous != parent;^836^^^^^835^837^return next.previous != parent.header;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] hasPrevious [RETURN_TYPE] boolean   [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^return parent.previous != next.header;^836^^^^^835^837^return next.previous != parent.header;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] hasPrevious [RETURN_TYPE] boolean   [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Operator]^return next.previous >= parent.header;^836^^^^^835^837^return next.previous != parent.header;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] hasPrevious [RETURN_TYPE] boolean   [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^next = next;^844^^^^^839^849^next = next.previous;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^next = next.previous.previous;^844^^^^^839^849^next = next.previous;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^return oldValue;^848^^^^^839^849^return value;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^return offset;^852^^^^^851^853^return nextIndex;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] nextIndex [RETURN_TYPE] int   [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Operator]^return nextIndex (  )   >>  1;^857^^^^^855^858^return nextIndex (  )  - 1;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] previousIndex [RETURN_TYPE] int   [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Literal]^return nextIndex (  )  ;^857^^^^^855^858^return nextIndex (  )  - 1;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] previousIndex [RETURN_TYPE] int   [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^if  ( next == current )  {^862^^^^^860^873^if  ( current == next )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Operator]^if  ( current != next )  {^862^^^^^860^873^if  ( current == next )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^next = next;^864^^^^^860^873^next = next.next;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^next = next.next.next;^864^^^^^860^873^next = next.next;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^getLastNodeReturned (  ) .setValue ( value ) ;^877^^^^^875^878^getLastNodeReturned (  ) .setValue ( obj ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] set [RETURN_TYPE] void   final E obj [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^parent.addNodeBefore ( next, value ) ;^882^^^^^880^886^parent.addNodeBefore ( next, obj ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^return nextIndex (  )  < modCount;^906^^^^^905^907^return nextIndex (  )  < sub.size;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^return nextIndex (  )  < sub;^906^^^^^905^907^return nextIndex (  )  < sub.size;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^return nextIndex (  )  < sub.size.size;^906^^^^^905^907^return nextIndex (  )  < sub.size;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Operator]^return nextIndex (  )  <= sub.size;^906^^^^^905^907^return nextIndex (  )  < sub.size;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Operator]^return previousIndex (  )  > 0;^911^^^^^910^912^return previousIndex (  )  >= 0;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] hasPrevious [RETURN_TYPE] boolean   [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Operator]^return super.nextIndex (  )   &&  sub.offset;^916^^^^^915^917^return super.nextIndex (  )  - sub.offset;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] nextIndex [RETURN_TYPE] int   [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^sub.expectedModCount = offset;^922^^^^^920^924^sub.expectedModCount = parent.modCount;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^sub.expectedModCount = parent;^922^^^^^920^924^sub.expectedModCount = parent.modCount;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^sub.expectedModCount = parent.modCount.modCount;^922^^^^^920^924^sub.expectedModCount = parent.modCount;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^sub.expectedModCount = toIndexExclusive;^929^^^^^927^931^sub.expectedModCount = parent.modCount;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^sub.expectedModCount = parent;^929^^^^^927^931^sub.expectedModCount = parent.modCount;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^return nextIndex;^967^^^^^965^968^return size;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] size [RETURN_TYPE] int   [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^rangeCheck ( toIndexExclusive, size ) ;^972^^^^^971^975^rangeCheck ( index, size ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] get [RETURN_TYPE] E   final int index [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^rangeCheck ( index, nextIndex ) ;^972^^^^^971^975^rangeCheck ( index, size ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] get [RETURN_TYPE] E   final int index [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^rangeCheck ( size, index ) ;^972^^^^^971^975^rangeCheck ( index, size ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] get [RETURN_TYPE] E   final int index [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^return parent.get ( nextIndex + offset ) ;^974^^^^^971^975^return parent.get ( index + offset ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] get [RETURN_TYPE] E   final int index [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^return parent.get ( index + toIndexExclusive ) ;^974^^^^^971^975^return parent.get ( index + offset ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] get [RETURN_TYPE] E   final int index [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^return parent.get ( offset + index ) ;^974^^^^^971^975^return parent.get ( index + offset ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] get [RETURN_TYPE] E   final int index [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^return offset.get ( index + parent ) ;^974^^^^^971^975^return parent.get ( index + offset ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] get [RETURN_TYPE] E   final int index [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Operator]^return parent.get ( index  <=  offset ) ;^974^^^^^971^975^return parent.get ( index + offset ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] get [RETURN_TYPE] E   final int index [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^return parent.get ( index + size ) ;^974^^^^^971^975^return parent.get ( index + offset ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] get [RETURN_TYPE] E   final int index [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Operator]^return parent.get ( index  &&  offset ) ;^974^^^^^971^975^return parent.get ( index + offset ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] get [RETURN_TYPE] E   final int index [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^rangeCheck ( nextIndex, size + 1 ) ;^979^^^^^978^985^rangeCheck ( index, size + 1 ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^rangeCheck ( index, nextIndex + 1 ) ;^979^^^^^978^985^rangeCheck ( index, size + 1 ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^rangeCheck ( size, index + 1 ) ;^979^^^^^978^985^rangeCheck ( index, size + 1 ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Operator]^rangeCheck ( index, size  >=  1 ) ;^979^^^^^978^985^rangeCheck ( index, size + 1 ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Literal]^rangeCheck ( index, size  ) ;^979^^^^^978^985^rangeCheck ( index, size + 1 ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^parent.add ( size + offset, obj ) ;^981^^^^^978^985^parent.add ( index + offset, obj ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^parent.add ( index + offset, oldValue ) ;^981^^^^^978^985^parent.add ( index + offset, obj ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^parent.add ( index + toIndexExclusive, obj ) ;^981^^^^^978^985^parent.add ( index + offset, obj ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^parent.add ( offset + index, obj ) ;^981^^^^^978^985^parent.add ( index + offset, obj ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^parent.add ( index + obj, offset ) ;^981^^^^^978^985^parent.add ( index + offset, obj ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^expectedModCount = size;^982^^^^^978^985^expectedModCount = parent.modCount;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^expectedModCount = 3.modCount;^982^^^^^978^985^expectedModCount = parent.modCount;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^expectedModCount = parent;^982^^^^^978^985^expectedModCount = parent.modCount;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^expectedModCount = parent.modCount.modCount;^982^^^^^978^985^expectedModCount = parent.modCount;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^rangeCheck ( toIndex, size ) ;^989^^^^^988^996^rangeCheck ( index, size ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^rangeCheck ( index, nextIndex ) ;^989^^^^^988^996^rangeCheck ( index, size ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^rangeCheck ( size, index ) ;^989^^^^^988^996^rangeCheck ( index, size ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^final E result = parent.remove ( nextIndex + offset ) ;^991^^^^^988^996^final E result = parent.remove ( index + offset ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^final E result = index.remove ( parent + offset ) ;^991^^^^^988^996^final E result = parent.remove ( index + offset ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^final E result = parent.remove ( offset + index ) ;^991^^^^^988^996^final E result = parent.remove ( index + offset ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Operator]^final E result = parent.remove ( index  |  offset ) ;^991^^^^^988^996^final E result = parent.remove ( index + offset ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^final E result = parent.remove ( index + size ) ;^991^^^^^988^996^final E result = parent.remove ( index + offset ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^final E result = offset.remove ( index + parent ) ;^991^^^^^988^996^final E result = parent.remove ( index + offset ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Operator]^final E result = parent.remove ( index  >>  offset ) ;^991^^^^^988^996^final E result = parent.remove ( index + offset ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^expectedModCount = modCount;^992^^^^^988^996^expectedModCount = parent.modCount;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^expectedModCount = parent;^992^^^^^988^996^expectedModCount = parent.modCount;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^expectedModCount = parent.modCount.modCount;^992^^^^^988^996^expectedModCount = parent.modCount;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^return value;^995^^^^^988^996^return result;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^return addAll ( size, 0 ) ;^1000^^^^^999^1001^return addAll ( size, coll ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> coll [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  Collection  coll  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Variable_Misuse]^return addAll ( toIndexExclusive, coll ) ;^1000^^^^^999^1001^return addAll ( size, coll ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> coll [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  Collection  coll  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Argument_Swapping]^return addAll ( coll, size ) ;^1000^^^^^999^1001^return addAll ( size, coll ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> coll [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  Collection  coll  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Variable_Misuse]^return addAll ( modCount, coll ) ;^1000^^^^^999^1001^return addAll ( size, coll ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> coll [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  Collection  coll  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Variable_Misuse]^rangeCheck ( offset, size + 1 ) ;^1005^^^^^1004^1017^rangeCheck ( index, size + 1 ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   final int index Collection<? extends E> coll [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  Collection  coll  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Variable_Misuse]^rangeCheck ( index, toIndex + 1 ) ;^1005^^^^^1004^1017^rangeCheck ( index, size + 1 ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   final int index Collection<? extends E> coll [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  Collection  coll  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Argument_Swapping]^rangeCheck ( size, index + 1 ) ;^1005^^^^^1004^1017^rangeCheck ( index, size + 1 ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   final int index Collection<? extends E> coll [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  Collection  coll  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Wrong_Operator]^rangeCheck ( index, size  ==  1 ) ;^1005^^^^^1004^1017^rangeCheck ( index, size + 1 ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   final int index Collection<? extends E> coll [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  Collection  coll  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Wrong_Literal]^rangeCheck ( index, size + size ) ;^1005^^^^^1004^1017^rangeCheck ( index, size + 1 ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   final int index Collection<? extends E> coll [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  Collection  coll  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Variable_Misuse]^if  ( toIndexExclusive == 0 )  {^1007^^^^^1004^1017^if  ( cSize == 0 )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   final int index Collection<? extends E> coll [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  Collection  coll  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Wrong_Operator]^if  ( cSize < 0 )  {^1007^^^^^1004^1017^if  ( cSize == 0 )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   final int index Collection<? extends E> coll [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  Collection  coll  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Wrong_Literal]^if  ( cSize == 1 )  {^1007^^^^^1004^1017^if  ( cSize == 0 )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   final int index Collection<? extends E> coll [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  Collection  coll  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Wrong_Literal]^return true;^1008^^^^^1004^1017^return false;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   final int index Collection<? extends E> coll [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  Collection  coll  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Variable_Misuse]^parent.addAll ( offset + nextIndex, coll ) ;^1012^^^^^1004^1017^parent.addAll ( offset + index, coll ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   final int index Collection<? extends E> coll [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  Collection  coll  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Variable_Misuse]^parent.addAll ( nextIndex + index, coll ) ;^1012^^^^^1004^1017^parent.addAll ( offset + index, coll ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   final int index Collection<? extends E> coll [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  Collection  coll  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Argument_Swapping]^parent.addAll ( coll + index, offset ) ;^1012^^^^^1004^1017^parent.addAll ( offset + index, coll ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   final int index Collection<? extends E> coll [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  Collection  coll  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Variable_Misuse]^expectedModCount = startIndex;^1013^^^^^1004^1017^expectedModCount = parent.modCount;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   final int index Collection<? extends E> coll [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  Collection  coll  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Argument_Swapping]^expectedModCount = parent;^1013^^^^^1004^1017^expectedModCount = parent.modCount;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   final int index Collection<? extends E> coll [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  Collection  coll  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Argument_Swapping]^expectedModCount = parent.modCount.modCount;^1013^^^^^1004^1017^expectedModCount = parent.modCount;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   final int index Collection<? extends E> coll [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  Collection  coll  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Variable_Misuse]^size += size;^1014^^^^^1004^1017^size += cSize;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   final int index Collection<? extends E> coll [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  Collection  coll  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Wrong_Literal]^return false;^1016^^^^^1004^1017^return true;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   final int index Collection<? extends E> coll [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  Collection  coll  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[BugLab_Variable_Misuse]^rangeCheck ( nextIndex, size ) ;^1021^^^^^1020^1024^rangeCheck ( index, size ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^rangeCheck ( index, nextIndex ) ;^1021^^^^^1020^1024^rangeCheck ( index, size ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^rangeCheck ( size, index ) ;^1021^^^^^1020^1024^rangeCheck ( index, size ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^return parent.set ( modCount + offset, obj ) ;^1023^^^^^1020^1024^return parent.set ( index + offset, obj ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^return parent.set ( index + offset, result ) ;^1023^^^^^1020^1024^return parent.set ( index + offset, obj ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^return parent.set ( index + index, obj ) ;^1023^^^^^1020^1024^return parent.set ( index + offset, obj ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^return parent.set ( offset + index, obj ) ;^1023^^^^^1020^1024^return parent.set ( index + offset, obj ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^return parent.set ( obj + offset, index ) ;^1023^^^^^1020^1024^return parent.set ( index + offset, obj ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^return obj.set ( index + offset, parent ) ;^1023^^^^^1020^1024^return parent.set ( index + offset, obj ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^return parent.set ( nextIndex + offset, obj ) ;^1023^^^^^1020^1024^return parent.set ( index + offset, obj ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^return parent.set ( index + offset, value ) ;^1023^^^^^1020^1024^return parent.set ( index + offset, obj ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^return offset.set ( index + parent, obj ) ;^1023^^^^^1020^1024^return parent.set ( index + offset, obj ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^rangeCheck ( modCount, size + 1 ) ;^1044^^^^^1043^1047^rangeCheck ( index, size + 1 ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] listIterator [RETURN_TYPE] ListIterator   final int index [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^rangeCheck ( index, nextIndex + 1 ) ;^1044^^^^^1043^1047^rangeCheck ( index, size + 1 ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] listIterator [RETURN_TYPE] ListIterator   final int index [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^rangeCheck ( size, index + 1 ) ;^1044^^^^^1043^1047^rangeCheck ( index, size + 1 ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] listIterator [RETURN_TYPE] ListIterator   final int index [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Operator]^rangeCheck ( index, size  <  1 ) ;^1044^^^^^1043^1047^rangeCheck ( index, size + 1 ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] listIterator [RETURN_TYPE] ListIterator   final int index [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Literal]^rangeCheck ( index, size  ) ;^1044^^^^^1043^1047^rangeCheck ( index, size + 1 ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] listIterator [RETURN_TYPE] ListIterator   final int index [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^return parent.createSubListListIterator ( this, offset ) ;^1046^^^^^1043^1047^return parent.createSubListListIterator ( this, index ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] listIterator [RETURN_TYPE] ListIterator   final int index [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^return index.createSubListListIterator ( this, parent ) ;^1046^^^^^1043^1047^return parent.createSubListListIterator ( this, index ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] listIterator [RETURN_TYPE] ListIterator   final int index [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^return parent.createSubListListIterator ( this, size ) ;^1046^^^^^1043^1047^return parent.createSubListListIterator ( this, index ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] listIterator [RETURN_TYPE] ListIterator   final int index [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^return new LinkedSubList<E> ( parent, toIndex + offset, toIndexExclusive + offset ) ;^1051^^^^^1050^1052^return new LinkedSubList<E> ( parent, fromIndexInclusive + offset, toIndexExclusive + offset ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] subList [RETURN_TYPE] List   final int fromIndexInclusive final int toIndexExclusive [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^return new LinkedSubList<E> ( parent, fromIndexInclusive + offset, index + offset ) ;^1051^^^^^1050^1052^return new LinkedSubList<E> ( parent, fromIndexInclusive + offset, toIndexExclusive + offset ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] subList [RETURN_TYPE] List   final int fromIndexInclusive final int toIndexExclusive [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^return new LinkedSubList<E> ( parent, fromIndexInclusive + toIndex, toIndexExclusive + offset ) ;^1051^^^^^1050^1052^return new LinkedSubList<E> ( parent, fromIndexInclusive + offset, toIndexExclusive + offset ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] subList [RETURN_TYPE] List   final int fromIndexInclusive final int toIndexExclusive [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^return new LinkedSubList<E> ( parent, toIndexExclusive + offset, fromIndexInclusive + offset ) ;^1051^^^^^1050^1052^return new LinkedSubList<E> ( parent, fromIndexInclusive + offset, toIndexExclusive + offset ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] subList [RETURN_TYPE] List   final int fromIndexInclusive final int toIndexExclusive [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^return new LinkedSubList<E> ( parent, fromIndexInclusive + toIndexExclusive, offset + offset ) ;^1051^^^^^1050^1052^return new LinkedSubList<E> ( parent, fromIndexInclusive + offset, toIndexExclusive + offset ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] subList [RETURN_TYPE] List   final int fromIndexInclusive final int toIndexExclusive [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^return new LinkedSubList<E> ( toIndexExclusive, fromIndexInclusive + offset, parent + offset ) ;^1051^^^^^1050^1052^return new LinkedSubList<E> ( parent, fromIndexInclusive + offset, toIndexExclusive + offset ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] subList [RETURN_TYPE] List   final int fromIndexInclusive final int toIndexExclusive [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^return new LinkedSubList<E> ( parent, offset + fromIndexInclusive, toIndexExclusive + offset ) ;^1051^^^^^1050^1052^return new LinkedSubList<E> ( parent, fromIndexInclusive + offset, toIndexExclusive + offset ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] subList [RETURN_TYPE] List   final int fromIndexInclusive final int toIndexExclusive [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Operator]^return new LinkedSubList<E> ( parent, fromIndexInclusive + offset, toIndexExclusive  >  offset ) ;^1051^^^^^1050^1052^return new LinkedSubList<E> ( parent, fromIndexInclusive + offset, toIndexExclusive + offset ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] subList [RETURN_TYPE] List   final int fromIndexInclusive final int toIndexExclusive [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^return new LinkedSubList<E> ( parent, fromIndexInclusive + offset, modCount + offset ) ;^1051^^^^^1050^1052^return new LinkedSubList<E> ( parent, fromIndexInclusive + offset, toIndexExclusive + offset ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] subList [RETURN_TYPE] List   final int fromIndexInclusive final int toIndexExclusive [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^return new LinkedSubList<E> ( fromIndexInclusive, parent + offset, toIndexExclusive + offset ) ;^1051^^^^^1050^1052^return new LinkedSubList<E> ( parent, fromIndexInclusive + offset, toIndexExclusive + offset ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] subList [RETURN_TYPE] List   final int fromIndexInclusive final int toIndexExclusive [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Operator]^return new LinkedSubList<E> ( parent, fromIndexInclusive + offset, toIndexExclusive  <=  offset ) ;^1051^^^^^1050^1052^return new LinkedSubList<E> ( parent, fromIndexInclusive + offset, toIndexExclusive + offset ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] subList [RETURN_TYPE] List   final int fromIndexInclusive final int toIndexExclusive [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^if  ( modCount < 0 || index >= beyond )  {^1055^^^^^1054^1058^if  ( index < 0 || index >= beyond )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] rangeCheck [RETURN_TYPE] void   final int index final int beyond [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  beyond  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^if  ( index < 0 || index >= toIndexExclusive )  {^1055^^^^^1054^1058^if  ( index < 0 || index >= beyond )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] rangeCheck [RETURN_TYPE] void   final int index final int beyond [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  beyond  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^if  ( beyond < 0 || index >= index )  {^1055^^^^^1054^1058^if  ( index < 0 || index >= beyond )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] rangeCheck [RETURN_TYPE] void   final int index final int beyond [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  beyond  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Operator]^if  ( index < 0 && index >= beyond )  {^1055^^^^^1054^1058^if  ( index < 0 || index >= beyond )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] rangeCheck [RETURN_TYPE] void   final int index final int beyond [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  beyond  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Operator]^if  ( index <= 0 || index >= beyond )  {^1055^^^^^1054^1058^if  ( index < 0 || index >= beyond )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] rangeCheck [RETURN_TYPE] void   final int index final int beyond [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  beyond  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Operator]^if  ( index < 0 || index < beyond )  {^1055^^^^^1054^1058^if  ( index < 0 || index >= beyond )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] rangeCheck [RETURN_TYPE] void   final int index final int beyond [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  beyond  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Literal]^if  ( index < beyond || index >= beyond )  {^1055^^^^^1054^1058^if  ( index < 0 || index >= beyond )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] rangeCheck [RETURN_TYPE] void   final int index final int beyond [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  beyond  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^if  ( toIndexExclusive != expectedModCount )  {^1061^^^^^1060^1064^if  ( parent.modCount != expectedModCount )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] checkModCount [RETURN_TYPE] void   [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  beyond  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Variable_Misuse]^if  ( parent.modCount != modCount )  {^1061^^^^^1060^1064^if  ( parent.modCount != expectedModCount )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] checkModCount [RETURN_TYPE] void   [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  beyond  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^if  ( expectedModCount != parent.modCount )  {^1061^^^^^1060^1064^if  ( parent.modCount != expectedModCount )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] checkModCount [RETURN_TYPE] void   [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  beyond  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^if  ( expectedModCount.modCount != parent )  {^1061^^^^^1060^1064^if  ( parent.modCount != expectedModCount )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] checkModCount [RETURN_TYPE] void   [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  beyond  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Wrong_Operator]^if  ( parent.modCount == expectedModCount )  {^1061^^^^^1060^1064^if  ( parent.modCount != expectedModCount )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] checkModCount [RETURN_TYPE] void   [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  beyond  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[BugLab_Argument_Swapping]^this.expectedModCount = parent.modCount.modCount;^787^^^^^783^790^this.expectedModCount = parent.modCount;^[CLASS] LinkedListIterator  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList,int)   AbstractLinkedList<E> parent final int fromIndex [VARIABLES] AbstractLinkedList  parent  boolean  int  expectedModCount  fromIndex  nextIndex  Node  current  next  
[BugLab_Argument_Swapping]^this.expectedModCount = parent;^787^^^^^783^790^this.expectedModCount = parent.modCount;^[CLASS] LinkedListIterator  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList,int)   AbstractLinkedList<E> parent final int fromIndex [VARIABLES] AbstractLinkedList  parent  boolean  int  expectedModCount  fromIndex  nextIndex  Node  current  next  
[BugLab_Variable_Misuse]^this.next = parent.getNode ( nextIndex, true ) ;^788^^^^^783^790^this.next = parent.getNode ( fromIndex, true ) ;^[CLASS] LinkedListIterator  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList,int)   AbstractLinkedList<E> parent final int fromIndex [VARIABLES] AbstractLinkedList  parent  boolean  int  expectedModCount  fromIndex  nextIndex  Node  current  next  
[BugLab_Argument_Swapping]^this.next = fromIndex.getNode ( parent, true ) ;^788^^^^^783^790^this.next = parent.getNode ( fromIndex, true ) ;^[CLASS] LinkedListIterator  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList,int)   AbstractLinkedList<E> parent final int fromIndex [VARIABLES] AbstractLinkedList  parent  boolean  int  expectedModCount  fromIndex  nextIndex  Node  current  next  
[BugLab_Wrong_Literal]^this.next = parent.getNode ( fromIndex, false ) ;^788^^^^^783^790^this.next = parent.getNode ( fromIndex, true ) ;^[CLASS] LinkedListIterator  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList,int)   AbstractLinkedList<E> parent final int fromIndex [VARIABLES] AbstractLinkedList  parent  boolean  int  expectedModCount  fromIndex  nextIndex  Node  current  next  
[BugLab_Variable_Misuse]^this.nextIndex = nextIndex;^789^^^^^783^790^this.nextIndex = fromIndex;^[CLASS] LinkedListIterator  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList,int)   AbstractLinkedList<E> parent final int fromIndex [VARIABLES] AbstractLinkedList  parent  boolean  int  expectedModCount  fromIndex  nextIndex  Node  current  next  
[BugLab_Variable_Misuse]^if  ( parent.modCount != nextIndex )  {^800^^^^^799^803^if  ( parent.modCount != expectedModCount )  {^[CLASS] LinkedListIterator  [METHOD] checkModCount [RETURN_TYPE] void   [VARIABLES] AbstractLinkedList  parent  boolean  int  expectedModCount  fromIndex  nextIndex  Node  current  next  
[BugLab_Argument_Swapping]^if  ( expectedModCount != parent.modCount )  {^800^^^^^799^803^if  ( parent.modCount != expectedModCount )  {^[CLASS] LinkedListIterator  [METHOD] checkModCount [RETURN_TYPE] void   [VARIABLES] AbstractLinkedList  parent  boolean  int  expectedModCount  fromIndex  nextIndex  Node  current  next  
[BugLab_Argument_Swapping]^if  ( parent.modCount.modCount != expectedModCount )  {^800^^^^^799^803^if  ( parent.modCount != expectedModCount )  {^[CLASS] LinkedListIterator  [METHOD] checkModCount [RETURN_TYPE] void   [VARIABLES] AbstractLinkedList  parent  boolean  int  expectedModCount  fromIndex  nextIndex  Node  current  next  
[BugLab_Wrong_Operator]^if  ( parent.modCount == expectedModCount )  {^800^^^^^799^803^if  ( parent.modCount != expectedModCount )  {^[CLASS] LinkedListIterator  [METHOD] checkModCount [RETURN_TYPE] void   [VARIABLES] AbstractLinkedList  parent  boolean  int  expectedModCount  fromIndex  nextIndex  Node  current  next  
[BugLab_Wrong_Operator]^if  ( current != null )  {^813^^^^^812^817^if  ( current == null )  {^[CLASS] LinkedListIterator  [METHOD] getLastNodeReturned [RETURN_TYPE] AbstractLinkedList$Node   [VARIABLES] AbstractLinkedList  parent  boolean  int  expectedModCount  fromIndex  nextIndex  Node  current  next  
[BugLab_Argument_Swapping]^return parent != next.header;^820^^^^^819^821^return next != parent.header;^[CLASS] LinkedListIterator  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] AbstractLinkedList  parent  boolean  int  expectedModCount  fromIndex  nextIndex  Node  current  next  
[BugLab_Argument_Swapping]^return next != parent;^820^^^^^819^821^return next != parent.header;^[CLASS] LinkedListIterator  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] AbstractLinkedList  parent  boolean  int  expectedModCount  fromIndex  nextIndex  Node  current  next  
[BugLab_Argument_Swapping]^return next != parent.header.header;^820^^^^^819^821^return next != parent.header;^[CLASS] LinkedListIterator  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] AbstractLinkedList  parent  boolean  int  expectedModCount  fromIndex  nextIndex  Node  current  next  
[BugLab_Wrong_Operator]^return next == parent.header;^820^^^^^819^821^return next != parent.header;^[CLASS] LinkedListIterator  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] AbstractLinkedList  parent  boolean  int  expectedModCount  fromIndex  nextIndex  Node  current  next  
[BugLab_Variable_Misuse]^final E value = this.getValue (  ) ;^828^^^^^823^833^final E value = next.getValue (  ) ;^[CLASS] LinkedListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  nextIndex  Node  current  next  
[BugLab_Variable_Misuse]^next = 3;^830^^^^^823^833^next = next.next;^[CLASS] LinkedListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  nextIndex  Node  current  next  
[BugLab_Variable_Misuse]^next = this.next;^830^^^^^823^833^next = next.next;^[CLASS] LinkedListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  nextIndex  Node  current  next  
[BugLab_Argument_Swapping]^next = next;^830^^^^^823^833^next = next.next;^[CLASS] LinkedListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  nextIndex  Node  current  next  
[BugLab_Argument_Swapping]^next = next.next.next;^830^^^^^823^833^next = next.next;^[CLASS] LinkedListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  nextIndex  Node  current  next  
[BugLab_Argument_Swapping]^return parent.header != next.previous;^836^^^^^835^837^return next.previous != parent.header;^[CLASS] LinkedListIterator  [METHOD] hasPrevious [RETURN_TYPE] boolean   [VARIABLES] AbstractLinkedList  parent  boolean  int  expectedModCount  fromIndex  nextIndex  Node  current  next  
[BugLab_Argument_Swapping]^return parent.previous != next.header;^836^^^^^835^837^return next.previous != parent.header;^[CLASS] LinkedListIterator  [METHOD] hasPrevious [RETURN_TYPE] boolean   [VARIABLES] AbstractLinkedList  parent  boolean  int  expectedModCount  fromIndex  nextIndex  Node  current  next  
[BugLab_Argument_Swapping]^return parent.header.previous != next;^836^^^^^835^837^return next.previous != parent.header;^[CLASS] LinkedListIterator  [METHOD] hasPrevious [RETURN_TYPE] boolean   [VARIABLES] AbstractLinkedList  parent  boolean  int  expectedModCount  fromIndex  nextIndex  Node  current  next  
[BugLab_Wrong_Operator]^return next.previous == parent.header;^836^^^^^835^837^return next.previous != parent.header;^[CLASS] LinkedListIterator  [METHOD] hasPrevious [RETURN_TYPE] boolean   [VARIABLES] AbstractLinkedList  parent  boolean  int  expectedModCount  fromIndex  nextIndex  Node  current  next  
[BugLab_Argument_Swapping]^next = next;^844^^^^^839^849^next = next.previous;^[CLASS] LinkedListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  nextIndex  Node  current  next  
[BugLab_Argument_Swapping]^next = next.previous.previous;^844^^^^^839^849^next = next.previous;^[CLASS] LinkedListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  nextIndex  Node  current  next  
[BugLab_Variable_Misuse]^return fromIndex;^852^^^^^851^853^return nextIndex;^[CLASS] LinkedListIterator  [METHOD] nextIndex [RETURN_TYPE] int   [VARIABLES] AbstractLinkedList  parent  boolean  int  expectedModCount  fromIndex  nextIndex  Node  current  next  
[BugLab_Wrong_Operator]^return nextIndex (  )   >=  1;^857^^^^^855^858^return nextIndex (  )  - 1;^[CLASS] LinkedListIterator  [METHOD] previousIndex [RETURN_TYPE] int   [VARIABLES] AbstractLinkedList  parent  boolean  int  expectedModCount  fromIndex  nextIndex  Node  current  next  
[BugLab_Wrong_Literal]^return nextIndex (  )  ;^857^^^^^855^858^return nextIndex (  )  - 1;^[CLASS] LinkedListIterator  [METHOD] previousIndex [RETURN_TYPE] int   [VARIABLES] AbstractLinkedList  parent  boolean  int  expectedModCount  fromIndex  nextIndex  Node  current  next  
[BugLab_Argument_Swapping]^if  ( next == current )  {^862^^^^^860^873^if  ( current == next )  {^[CLASS] LinkedListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AbstractLinkedList  parent  boolean  int  expectedModCount  fromIndex  nextIndex  Node  current  next  
[BugLab_Wrong_Operator]^if  ( current != next )  {^862^^^^^860^873^if  ( current == next )  {^[CLASS] LinkedListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AbstractLinkedList  parent  boolean  int  expectedModCount  fromIndex  nextIndex  Node  current  next  
[BugLab_Argument_Swapping]^next = next;^864^^^^^860^873^next = next.next;^[CLASS] LinkedListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AbstractLinkedList  parent  boolean  int  expectedModCount  fromIndex  nextIndex  Node  current  next  
[BugLab_Argument_Swapping]^next = next.next.next;^864^^^^^860^873^next = next.next;^[CLASS] LinkedListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AbstractLinkedList  parent  boolean  int  expectedModCount  fromIndex  nextIndex  Node  current  next  
[BugLab_Argument_Swapping]^parent.addNodeBefore ( obj, next ) ;^882^^^^^880^886^parent.addNodeBefore ( next, obj ) ;^[CLASS] LinkedListIterator  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] AbstractLinkedList  parent  boolean  E  obj  int  expectedModCount  fromIndex  nextIndex  Node  current  next  
[BugLab_Variable_Misuse]^super ( sub.parent, startIndex + startIndex ) ;^900^^^^^899^902^super ( sub.parent, startIndex + sub.offset ) ;^[CLASS] LinkedSubListIterator  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList$LinkedSubList,int)   LinkedSubList<E> sub final int startIndex [VARIABLES] LinkedSubList  sub  int  startIndex  boolean  
[BugLab_Argument_Swapping]^super ( startIndex.parent, sub + sub.offset ) ;^900^^^^^899^902^super ( sub.parent, startIndex + sub.offset ) ;^[CLASS] LinkedSubListIterator  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList$LinkedSubList,int)   LinkedSubList<E> sub final int startIndex [VARIABLES] LinkedSubList  sub  int  startIndex  boolean  
[BugLab_Argument_Swapping]^super ( sub.parent, sub.offset + startIndex ) ;^900^^^^^899^902^super ( sub.parent, startIndex + sub.offset ) ;^[CLASS] LinkedSubListIterator  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList$LinkedSubList,int)   LinkedSubList<E> sub final int startIndex [VARIABLES] LinkedSubList  sub  int  startIndex  boolean  
[BugLab_Argument_Swapping]^super ( sub, startIndex + sub.parent.offset ) ;^900^^^^^899^902^super ( sub.parent, startIndex + sub.offset ) ;^[CLASS] LinkedSubListIterator  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList$LinkedSubList,int)   LinkedSubList<E> sub final int startIndex [VARIABLES] LinkedSubList  sub  int  startIndex  boolean  
[BugLab_Wrong_Operator]^super ( sub.parent, startIndex  >=  sub.offset ) ;^900^^^^^899^902^super ( sub.parent, startIndex + sub.offset ) ;^[CLASS] LinkedSubListIterator  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList$LinkedSubList,int)   LinkedSubList<E> sub final int startIndex [VARIABLES] LinkedSubList  sub  int  startIndex  boolean  
[BugLab_Argument_Swapping]^return nextIndex (  )  < sub;^906^^^^^905^907^return nextIndex (  )  < sub.size;^[CLASS] LinkedSubListIterator  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] LinkedSubList  sub  boolean  
[BugLab_Argument_Swapping]^return nextIndex (  )  < sub.size.size;^906^^^^^905^907^return nextIndex (  )  < sub.size;^[CLASS] LinkedSubListIterator  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] LinkedSubList  sub  boolean  
[BugLab_Wrong_Operator]^return nextIndex (  )  <= sub.size;^906^^^^^905^907^return nextIndex (  )  < sub.size;^[CLASS] LinkedSubListIterator  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] LinkedSubList  sub  boolean  
[BugLab_Wrong_Operator]^return previousIndex (  )  > 0;^911^^^^^910^912^return previousIndex (  )  >= 0;^[CLASS] LinkedSubListIterator  [METHOD] hasPrevious [RETURN_TYPE] boolean   [VARIABLES] LinkedSubList  sub  boolean  
[BugLab_Wrong_Literal]^return previousIndex (  )  >= -1;^911^^^^^910^912^return previousIndex (  )  >= 0;^[CLASS] LinkedSubListIterator  [METHOD] hasPrevious [RETURN_TYPE] boolean   [VARIABLES] LinkedSubList  sub  boolean  
[BugLab_Wrong_Operator]^return super.nextIndex (  )    instanceof   sub.offset;^916^^^^^915^917^return super.nextIndex (  )  - sub.offset;^[CLASS] LinkedSubListIterator  [METHOD] nextIndex [RETURN_TYPE] int   [VARIABLES] LinkedSubList  sub  boolean  
[BugLab_Argument_Swapping]^sub.expectedModCount = parent.modCount.modCount;^929^^^^^927^931^sub.expectedModCount = parent.modCount;^[CLASS] LinkedSubListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] LinkedSubList  sub  boolean  
[BugLab_Variable_Misuse]^if  ( size < 0 )  {^949^^^^^948^962^if  ( fromIndex < 0 )  {^[CLASS] LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList,int,int)   AbstractLinkedList<E> parent final int fromIndex final int toIndex [VARIABLES] AbstractLinkedList  parent  int  expectedModCount  fromIndex  offset  size  toIndex  boolean  
[BugLab_Wrong_Operator]^if  ( fromIndex == 0 )  {^949^^^^^948^962^if  ( fromIndex < 0 )  {^[CLASS] LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList,int,int)   AbstractLinkedList<E> parent final int fromIndex final int toIndex [VARIABLES] AbstractLinkedList  parent  int  expectedModCount  fromIndex  offset  size  toIndex  boolean  
[BugLab_Variable_Misuse]^if  ( offset > parent.size (  )  )  {^952^^^^^948^962^if  ( toIndex > parent.size (  )  )  {^[CLASS] LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList,int,int)   AbstractLinkedList<E> parent final int fromIndex final int toIndex [VARIABLES] AbstractLinkedList  parent  int  expectedModCount  fromIndex  offset  size  toIndex  boolean  
[BugLab_Variable_Misuse]^if  ( toIndex > this.size (  )  )  {^952^^^^^948^962^if  ( toIndex > parent.size (  )  )  {^[CLASS] LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList,int,int)   AbstractLinkedList<E> parent final int fromIndex final int toIndex [VARIABLES] AbstractLinkedList  parent  int  expectedModCount  fromIndex  offset  size  toIndex  boolean  
[BugLab_Argument_Swapping]^if  ( parent > toIndex.size (  )  )  {^952^^^^^948^962^if  ( toIndex > parent.size (  )  )  {^[CLASS] LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList,int,int)   AbstractLinkedList<E> parent final int fromIndex final int toIndex [VARIABLES] AbstractLinkedList  parent  int  expectedModCount  fromIndex  offset  size  toIndex  boolean  
[BugLab_Wrong_Operator]^if  ( toIndex < parent.size (  )  )  {^952^^^^^948^962^if  ( toIndex > parent.size (  )  )  {^[CLASS] LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList,int,int)   AbstractLinkedList<E> parent final int fromIndex final int toIndex [VARIABLES] AbstractLinkedList  parent  int  expectedModCount  fromIndex  offset  size  toIndex  boolean  
[BugLab_Variable_Misuse]^if  ( size > toIndex )  {^955^^^^^948^962^if  ( fromIndex > toIndex )  {^[CLASS] LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList,int,int)   AbstractLinkedList<E> parent final int fromIndex final int toIndex [VARIABLES] AbstractLinkedList  parent  int  expectedModCount  fromIndex  offset  size  toIndex  boolean  
[BugLab_Variable_Misuse]^if  ( fromIndex > size )  {^955^^^^^948^962^if  ( fromIndex > toIndex )  {^[CLASS] LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList,int,int)   AbstractLinkedList<E> parent final int fromIndex final int toIndex [VARIABLES] AbstractLinkedList  parent  int  expectedModCount  fromIndex  offset  size  toIndex  boolean  
[BugLab_Argument_Swapping]^if  ( toIndex > fromIndex )  {^955^^^^^948^962^if  ( fromIndex > toIndex )  {^[CLASS] LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList,int,int)   AbstractLinkedList<E> parent final int fromIndex final int toIndex [VARIABLES] AbstractLinkedList  parent  int  expectedModCount  fromIndex  offset  size  toIndex  boolean  
[BugLab_Wrong_Operator]^if  ( fromIndex >= toIndex )  {^955^^^^^948^962^if  ( fromIndex > toIndex )  {^[CLASS] LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList,int,int)   AbstractLinkedList<E> parent final int fromIndex final int toIndex [VARIABLES] AbstractLinkedList  parent  int  expectedModCount  fromIndex  offset  size  toIndex  boolean  
[BugLab_Variable_Misuse]^this.offset = toIndex;^959^^^^^948^962^this.offset = fromIndex;^[CLASS] LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList,int,int)   AbstractLinkedList<E> parent final int fromIndex final int toIndex [VARIABLES] AbstractLinkedList  parent  int  expectedModCount  fromIndex  offset  size  toIndex  boolean  
[BugLab_Variable_Misuse]^this.size = size - fromIndex;^960^^^^^948^962^this.size = toIndex - fromIndex;^[CLASS] LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList,int,int)   AbstractLinkedList<E> parent final int fromIndex final int toIndex [VARIABLES] AbstractLinkedList  parent  int  expectedModCount  fromIndex  offset  size  toIndex  boolean  
[BugLab_Variable_Misuse]^this.size = toIndex - size;^960^^^^^948^962^this.size = toIndex - fromIndex;^[CLASS] LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList,int,int)   AbstractLinkedList<E> parent final int fromIndex final int toIndex [VARIABLES] AbstractLinkedList  parent  int  expectedModCount  fromIndex  offset  size  toIndex  boolean  
[BugLab_Argument_Swapping]^this.size = fromIndex - toIndex;^960^^^^^948^962^this.size = toIndex - fromIndex;^[CLASS] LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList,int,int)   AbstractLinkedList<E> parent final int fromIndex final int toIndex [VARIABLES] AbstractLinkedList  parent  int  expectedModCount  fromIndex  offset  size  toIndex  boolean  
[BugLab_Wrong_Operator]^this.size = toIndex   instanceof   fromIndex;^960^^^^^948^962^this.size = toIndex - fromIndex;^[CLASS] LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList,int,int)   AbstractLinkedList<E> parent final int fromIndex final int toIndex [VARIABLES] AbstractLinkedList  parent  int  expectedModCount  fromIndex  offset  size  toIndex  boolean  
[BugLab_Variable_Misuse]^this.expectedModCount = toIndex;^961^^^^^948^962^this.expectedModCount = parent.modCount;^[CLASS] LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList,int,int)   AbstractLinkedList<E> parent final int fromIndex final int toIndex [VARIABLES] AbstractLinkedList  parent  int  expectedModCount  fromIndex  offset  size  toIndex  boolean  
[BugLab_Argument_Swapping]^this.expectedModCount = parent.modCount.modCount;^961^^^^^948^962^this.expectedModCount = parent.modCount;^[CLASS] LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList,int,int)   AbstractLinkedList<E> parent final int fromIndex final int toIndex [VARIABLES] AbstractLinkedList  parent  int  expectedModCount  fromIndex  offset  size  toIndex  boolean  
[BugLab_Argument_Swapping]^this.expectedModCount = parent;^961^^^^^948^962^this.expectedModCount = parent.modCount;^[CLASS] LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList,int,int)   AbstractLinkedList<E> parent final int fromIndex final int toIndex [VARIABLES] AbstractLinkedList  parent  int  expectedModCount  fromIndex  offset  size  toIndex  boolean  
[BugLab_Variable_Misuse]^return toIndex;^967^^^^^965^968^return size;^[CLASS] LinkedSubList  [METHOD] size [RETURN_TYPE] int   [VARIABLES] AbstractLinkedList  parent  int  expectedModCount  fromIndex  offset  size  toIndex  boolean  
[BugLab_Variable_Misuse]^rangeCheck ( toIndex, size ) ;^972^^^^^971^975^rangeCheck ( index, size ) ;^[CLASS] LinkedSubList  [METHOD] get [RETURN_TYPE] E   final int index [VARIABLES] AbstractLinkedList  parent  int  expectedModCount  fromIndex  index  offset  size  toIndex  boolean  
[BugLab_Variable_Misuse]^rangeCheck ( index, toIndex ) ;^972^^^^^971^975^rangeCheck ( index, size ) ;^[CLASS] LinkedSubList  [METHOD] get [RETURN_TYPE] E   final int index [VARIABLES] AbstractLinkedList  parent  int  expectedModCount  fromIndex  index  offset  size  toIndex  boolean  
[BugLab_Argument_Swapping]^rangeCheck ( size, index ) ;^972^^^^^971^975^rangeCheck ( index, size ) ;^[CLASS] LinkedSubList  [METHOD] get [RETURN_TYPE] E   final int index [VARIABLES] AbstractLinkedList  parent  int  expectedModCount  fromIndex  index  offset  size  toIndex  boolean  
[BugLab_Variable_Misuse]^return parent.get ( toIndex + offset ) ;^974^^^^^971^975^return parent.get ( index + offset ) ;^[CLASS] LinkedSubList  [METHOD] get [RETURN_TYPE] E   final int index [VARIABLES] AbstractLinkedList  parent  int  expectedModCount  fromIndex  index  offset  size  toIndex  boolean  
[BugLab_Variable_Misuse]^return parent.get ( index + toIndex ) ;^974^^^^^971^975^return parent.get ( index + offset ) ;^[CLASS] LinkedSubList  [METHOD] get [RETURN_TYPE] E   final int index [VARIABLES] AbstractLinkedList  parent  int  expectedModCount  fromIndex  index  offset  size  toIndex  boolean  
[BugLab_Argument_Swapping]^return parent.get ( offset + index ) ;^974^^^^^971^975^return parent.get ( index + offset ) ;^[CLASS] LinkedSubList  [METHOD] get [RETURN_TYPE] E   final int index [VARIABLES] AbstractLinkedList  parent  int  expectedModCount  fromIndex  index  offset  size  toIndex  boolean  
[BugLab_Argument_Swapping]^return index.get ( parent + offset ) ;^974^^^^^971^975^return parent.get ( index + offset ) ;^[CLASS] LinkedSubList  [METHOD] get [RETURN_TYPE] E   final int index [VARIABLES] AbstractLinkedList  parent  int  expectedModCount  fromIndex  index  offset  size  toIndex  boolean  
[BugLab_Argument_Swapping]^return offset.get ( index + parent ) ;^974^^^^^971^975^return parent.get ( index + offset ) ;^[CLASS] LinkedSubList  [METHOD] get [RETURN_TYPE] E   final int index [VARIABLES] AbstractLinkedList  parent  int  expectedModCount  fromIndex  index  offset  size  toIndex  boolean  
[BugLab_Wrong_Operator]^return parent.get ( index  <<  offset ) ;^974^^^^^971^975^return parent.get ( index + offset ) ;^[CLASS] LinkedSubList  [METHOD] get [RETURN_TYPE] E   final int index [VARIABLES] AbstractLinkedList  parent  int  expectedModCount  fromIndex  index  offset  size  toIndex  boolean  
[BugLab_Wrong_Operator]^return parent.get ( index  >>  offset ) ;^974^^^^^971^975^return parent.get ( index + offset ) ;^[CLASS] LinkedSubList  [METHOD] get [RETURN_TYPE] E   final int index [VARIABLES] AbstractLinkedList  parent  int  expectedModCount  fromIndex  index  offset  size  toIndex  boolean  
[BugLab_Variable_Misuse]^rangeCheck ( toIndex, size + 1 ) ;^979^^^^^978^985^rangeCheck ( index, size + 1 ) ;^[CLASS] LinkedSubList  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AbstractLinkedList  parent  boolean  E  obj  int  expectedModCount  fromIndex  index  offset  size  toIndex  
[BugLab_Variable_Misuse]^rangeCheck ( index, toIndex + 1 ) ;^979^^^^^978^985^rangeCheck ( index, size + 1 ) ;^[CLASS] LinkedSubList  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AbstractLinkedList  parent  boolean  E  obj  int  expectedModCount  fromIndex  index  offset  size  toIndex  
[BugLab_Argument_Swapping]^rangeCheck ( size, index + 1 ) ;^979^^^^^978^985^rangeCheck ( index, size + 1 ) ;^[CLASS] LinkedSubList  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AbstractLinkedList  parent  boolean  E  obj  int  expectedModCount  fromIndex  index  offset  size  toIndex  
[BugLab_Wrong_Operator]^rangeCheck ( index, size  |  1 ) ;^979^^^^^978^985^rangeCheck ( index, size + 1 ) ;^[CLASS] LinkedSubList  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AbstractLinkedList  parent  boolean  E  obj  int  expectedModCount  fromIndex  index  offset  size  toIndex  
[BugLab_Wrong_Literal]^rangeCheck ( index, size + size ) ;^979^^^^^978^985^rangeCheck ( index, size + 1 ) ;^[CLASS] LinkedSubList  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AbstractLinkedList  parent  boolean  E  obj  int  expectedModCount  fromIndex  index  offset  size  toIndex  
[BugLab_Variable_Misuse]^parent.add ( toIndex + offset, obj ) ;^981^^^^^978^985^parent.add ( index + offset, obj ) ;^[CLASS] LinkedSubList  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AbstractLinkedList  parent  boolean  E  obj  int  expectedModCount  fromIndex  index  offset  size  toIndex  
[BugLab_Variable_Misuse]^parent.add ( index + toIndex, obj ) ;^981^^^^^978^985^parent.add ( index + offset, obj ) ;^[CLASS] LinkedSubList  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AbstractLinkedList  parent  boolean  E  obj  int  expectedModCount  fromIndex  index  offset  size  toIndex  
[BugLab_Argument_Swapping]^parent.add ( index + obj, offset ) ;^981^^^^^978^985^parent.add ( index + offset, obj ) ;^[CLASS] LinkedSubList  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AbstractLinkedList  parent  boolean  E  obj  int  expectedModCount  fromIndex  index  offset  size  toIndex  
[BugLab_Variable_Misuse]^expectedModCount = offset;^982^^^^^978^985^expectedModCount = parent.modCount;^[CLASS] LinkedSubList  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AbstractLinkedList  parent  boolean  E  obj  int  expectedModCount  fromIndex  index  offset  size  toIndex  
[BugLab_Argument_Swapping]^expectedModCount = parent;^982^^^^^978^985^expectedModCount = parent.modCount;^[CLASS] LinkedSubList  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AbstractLinkedList  parent  boolean  E  obj  int  expectedModCount  fromIndex  index  offset  size  toIndex  
[BugLab_Argument_Swapping]^expectedModCount = parent.modCount.modCount;^982^^^^^978^985^expectedModCount = parent.modCount;^[CLASS] LinkedSubList  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AbstractLinkedList  parent  boolean  E  obj  int  expectedModCount  fromIndex  index  offset  size  toIndex  
[BugLab_Variable_Misuse]^rangeCheck ( toIndex, size ) ;^989^^^^^988^996^rangeCheck ( index, size ) ;^[CLASS] LinkedSubList  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] AbstractLinkedList  parent  boolean  E  result  int  expectedModCount  fromIndex  index  offset  size  toIndex  
[BugLab_Variable_Misuse]^rangeCheck ( index, toIndex ) ;^989^^^^^988^996^rangeCheck ( index, size ) ;^[CLASS] LinkedSubList  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] AbstractLinkedList  parent  boolean  E  result  int  expectedModCount  fromIndex  index  offset  size  toIndex  
[BugLab_Argument_Swapping]^rangeCheck ( size, index ) ;^989^^^^^988^996^rangeCheck ( index, size ) ;^[CLASS] LinkedSubList  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] AbstractLinkedList  parent  boolean  E  result  int  expectedModCount  fromIndex  index  offset  size  toIndex  
[BugLab_Variable_Misuse]^final E result = parent.remove ( toIndex + offset ) ;^991^^^^^988^996^final E result = parent.remove ( index + offset ) ;^[CLASS] LinkedSubList  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] AbstractLinkedList  parent  boolean  E  result  int  expectedModCount  fromIndex  index  offset  size  toIndex  
[BugLab_Variable_Misuse]^final E result = parent.remove ( index + toIndex ) ;^991^^^^^988^996^final E result = parent.remove ( index + offset ) ;^[CLASS] LinkedSubList  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] AbstractLinkedList  parent  boolean  E  result  int  expectedModCount  fromIndex  index  offset  size  toIndex  
[BugLab_Argument_Swapping]^final E result = parent.remove ( offset + index ) ;^991^^^^^988^996^final E result = parent.remove ( index + offset ) ;^[CLASS] LinkedSubList  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] AbstractLinkedList  parent  boolean  E  result  int  expectedModCount  fromIndex  index  offset  size  toIndex  
[BugLab_Argument_Swapping]^final E result = index.remove ( parent + offset ) ;^991^^^^^988^996^final E result = parent.remove ( index + offset ) ;^[CLASS] LinkedSubList  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] AbstractLinkedList  parent  boolean  E  result  int  expectedModCount  fromIndex  index  offset  size  toIndex  
[BugLab_Wrong_Operator]^final E result = parent.remove ( index  |  offset ) ;^991^^^^^988^996^final E result = parent.remove ( index + offset ) ;^[CLASS] LinkedSubList  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] AbstractLinkedList  parent  boolean  E  result  int  expectedModCount  fromIndex  index  offset  size  toIndex  
[BugLab_Variable_Misuse]^final E result = null.remove ( index + offset ) ;^991^^^^^988^996^final E result = parent.remove ( index + offset ) ;^[CLASS] LinkedSubList  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] AbstractLinkedList  parent  boolean  E  result  int  expectedModCount  fromIndex  index  offset  size  toIndex  
[BugLab_Argument_Swapping]^final E result = offset.remove ( index + parent ) ;^991^^^^^988^996^final E result = parent.remove ( index + offset ) ;^[CLASS] LinkedSubList  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] AbstractLinkedList  parent  boolean  E  result  int  expectedModCount  fromIndex  index  offset  size  toIndex  
[BugLab_Wrong_Operator]^final E result = parent.remove ( index  &  offset ) ;^991^^^^^988^996^final E result = parent.remove ( index + offset ) ;^[CLASS] LinkedSubList  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] AbstractLinkedList  parent  boolean  E  result  int  expectedModCount  fromIndex  index  offset  size  toIndex  
[BugLab_Variable_Misuse]^expectedModCount = size;^992^^^^^988^996^expectedModCount = parent.modCount;^[CLASS] LinkedSubList  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] AbstractLinkedList  parent  boolean  E  result  int  expectedModCount  fromIndex  index  offset  size  toIndex  
[BugLab_Argument_Swapping]^expectedModCount = parent;^992^^^^^988^996^expectedModCount = parent.modCount;^[CLASS] LinkedSubList  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] AbstractLinkedList  parent  boolean  E  result  int  expectedModCount  fromIndex  index  offset  size  toIndex  
[BugLab_Argument_Swapping]^expectedModCount = parent.modCount.modCount;^992^^^^^988^996^expectedModCount = parent.modCount;^[CLASS] LinkedSubList  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] AbstractLinkedList  parent  boolean  E  result  int  expectedModCount  fromIndex  index  offset  size  toIndex  
[BugLab_Variable_Misuse]^return addAll ( toIndex, coll ) ;^1000^^^^^999^1001^return addAll ( size, coll ) ;^[CLASS] LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> coll [VARIABLES] Collection  coll  AbstractLinkedList  parent  boolean  int  expectedModCount  fromIndex  index  offset  size  toIndex  
[BugLab_Argument_Swapping]^return addAll ( coll, size ) ;^1000^^^^^999^1001^return addAll ( size, coll ) ;^[CLASS] LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> coll [VARIABLES] Collection  coll  AbstractLinkedList  parent  boolean  int  expectedModCount  fromIndex  index  offset  size  toIndex  
[BugLab_Variable_Misuse]^return addAll ( offset, coll ) ;^1000^^^^^999^1001^return addAll ( size, coll ) ;^[CLASS] LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> coll [VARIABLES] Collection  coll  AbstractLinkedList  parent  boolean  int  expectedModCount  fromIndex  index  offset  size  toIndex  
[BugLab_Variable_Misuse]^rangeCheck ( toIndex, size + 1 ) ;^1005^^^^^1004^1017^rangeCheck ( index, size + 1 ) ;^[CLASS] LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   final int index Collection<? extends E> coll [VARIABLES] Collection  coll  AbstractLinkedList  parent  boolean  int  cSize  expectedModCount  fromIndex  index  offset  size  toIndex  
[BugLab_Variable_Misuse]^rangeCheck ( index, toIndex + 1 ) ;^1005^^^^^1004^1017^rangeCheck ( index, size + 1 ) ;^[CLASS] LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   final int index Collection<? extends E> coll [VARIABLES] Collection  coll  AbstractLinkedList  parent  boolean  int  cSize  expectedModCount  fromIndex  index  offset  size  toIndex  
[BugLab_Argument_Swapping]^rangeCheck ( size, index + 1 ) ;^1005^^^^^1004^1017^rangeCheck ( index, size + 1 ) ;^[CLASS] LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   final int index Collection<? extends E> coll [VARIABLES] Collection  coll  AbstractLinkedList  parent  boolean  int  cSize  expectedModCount  fromIndex  index  offset  size  toIndex  
[BugLab_Wrong_Operator]^rangeCheck ( index, size  !=  1 ) ;^1005^^^^^1004^1017^rangeCheck ( index, size + 1 ) ;^[CLASS] LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   final int index Collection<? extends E> coll [VARIABLES] Collection  coll  AbstractLinkedList  parent  boolean  int  cSize  expectedModCount  fromIndex  index  offset  size  toIndex  
[BugLab_Wrong_Literal]^rangeCheck ( index, size + expectedModCount ) ;^1005^^^^^1004^1017^rangeCheck ( index, size + 1 ) ;^[CLASS] LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   final int index Collection<? extends E> coll [VARIABLES] Collection  coll  AbstractLinkedList  parent  boolean  int  cSize  expectedModCount  fromIndex  index  offset  size  toIndex  
[BugLab_Variable_Misuse]^if  ( toIndex == 0 )  {^1007^^^^^1004^1017^if  ( cSize == 0 )  {^[CLASS] LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   final int index Collection<? extends E> coll [VARIABLES] Collection  coll  AbstractLinkedList  parent  boolean  int  cSize  expectedModCount  fromIndex  index  offset  size  toIndex  
[BugLab_Wrong_Operator]^if  ( cSize >= 0 )  {^1007^^^^^1004^1017^if  ( cSize == 0 )  {^[CLASS] LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   final int index Collection<? extends E> coll [VARIABLES] Collection  coll  AbstractLinkedList  parent  boolean  int  cSize  expectedModCount  fromIndex  index  offset  size  toIndex  
[BugLab_Wrong_Literal]^if  ( cSize == fromIndex )  {^1007^^^^^1004^1017^if  ( cSize == 0 )  {^[CLASS] LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   final int index Collection<? extends E> coll [VARIABLES] Collection  coll  AbstractLinkedList  parent  boolean  int  cSize  expectedModCount  fromIndex  index  offset  size  toIndex  
[BugLab_Wrong_Literal]^return true;^1008^^^^^1004^1017^return false;^[CLASS] LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   final int index Collection<? extends E> coll [VARIABLES] Collection  coll  AbstractLinkedList  parent  boolean  int  cSize  expectedModCount  fromIndex  index  offset  size  toIndex  
[BugLab_Variable_Misuse]^parent.addAll ( offset + toIndex, coll ) ;^1012^^^^^1004^1017^parent.addAll ( offset + index, coll ) ;^[CLASS] LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   final int index Collection<? extends E> coll [VARIABLES] Collection  coll  AbstractLinkedList  parent  boolean  int  cSize  expectedModCount  fromIndex  index  offset  size  toIndex  
[BugLab_Variable_Misuse]^parent.addAll ( toIndex + index, coll ) ;^1012^^^^^1004^1017^parent.addAll ( offset + index, coll ) ;^[CLASS] LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   final int index Collection<? extends E> coll [VARIABLES] Collection  coll  AbstractLinkedList  parent  boolean  int  cSize  expectedModCount  fromIndex  index  offset  size  toIndex  
[BugLab_Argument_Swapping]^parent.addAll ( index + offset, coll ) ;^1012^^^^^1004^1017^parent.addAll ( offset + index, coll ) ;^[CLASS] LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   final int index Collection<? extends E> coll [VARIABLES] Collection  coll  AbstractLinkedList  parent  boolean  int  cSize  expectedModCount  fromIndex  index  offset  size  toIndex  
[BugLab_Argument_Swapping]^parent.addAll ( coll + index, offset ) ;^1012^^^^^1004^1017^parent.addAll ( offset + index, coll ) ;^[CLASS] LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   final int index Collection<? extends E> coll [VARIABLES] Collection  coll  AbstractLinkedList  parent  boolean  int  cSize  expectedModCount  fromIndex  index  offset  size  toIndex  
[BugLab_Variable_Misuse]^expectedModCount = toIndex;^1013^^^^^1004^1017^expectedModCount = parent.modCount;^[CLASS] LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   final int index Collection<? extends E> coll [VARIABLES] Collection  coll  AbstractLinkedList  parent  boolean  int  cSize  expectedModCount  fromIndex  index  offset  size  toIndex  
[BugLab_Argument_Swapping]^expectedModCount = parent;^1013^^^^^1004^1017^expectedModCount = parent.modCount;^[CLASS] LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   final int index Collection<? extends E> coll [VARIABLES] Collection  coll  AbstractLinkedList  parent  boolean  int  cSize  expectedModCount  fromIndex  index  offset  size  toIndex  
[BugLab_Argument_Swapping]^expectedModCount = parent.modCount.modCount;^1013^^^^^1004^1017^expectedModCount = parent.modCount;^[CLASS] LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   final int index Collection<? extends E> coll [VARIABLES] Collection  coll  AbstractLinkedList  parent  boolean  int  cSize  expectedModCount  fromIndex  index  offset  size  toIndex  
[BugLab_Variable_Misuse]^size += toIndex;^1014^^^^^1004^1017^size += cSize;^[CLASS] LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   final int index Collection<? extends E> coll [VARIABLES] Collection  coll  AbstractLinkedList  parent  boolean  int  cSize  expectedModCount  fromIndex  index  offset  size  toIndex  
[BugLab_Wrong_Literal]^return false;^1016^^^^^1004^1017^return true;^[CLASS] LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   final int index Collection<? extends E> coll [VARIABLES] Collection  coll  AbstractLinkedList  parent  boolean  int  cSize  expectedModCount  fromIndex  index  offset  size  toIndex  
[BugLab_Variable_Misuse]^rangeCheck ( toIndex, size ) ;^1021^^^^^1020^1024^rangeCheck ( index, size ) ;^[CLASS] LinkedSubList  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AbstractLinkedList  parent  boolean  E  obj  int  cSize  expectedModCount  fromIndex  index  offset  size  toIndex  
[BugLab_Variable_Misuse]^rangeCheck ( index, toIndex ) ;^1021^^^^^1020^1024^rangeCheck ( index, size ) ;^[CLASS] LinkedSubList  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AbstractLinkedList  parent  boolean  E  obj  int  cSize  expectedModCount  fromIndex  index  offset  size  toIndex  
[BugLab_Argument_Swapping]^rangeCheck ( size, index ) ;^1021^^^^^1020^1024^rangeCheck ( index, size ) ;^[CLASS] LinkedSubList  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AbstractLinkedList  parent  boolean  E  obj  int  cSize  expectedModCount  fromIndex  index  offset  size  toIndex  
[BugLab_Variable_Misuse]^return parent.set ( toIndex + offset, obj ) ;^1023^^^^^1020^1024^return parent.set ( index + offset, obj ) ;^[CLASS] LinkedSubList  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AbstractLinkedList  parent  boolean  E  obj  int  cSize  expectedModCount  fromIndex  index  offset  size  toIndex  
[BugLab_Variable_Misuse]^return parent.set ( index + size, obj ) ;^1023^^^^^1020^1024^return parent.set ( index + offset, obj ) ;^[CLASS] LinkedSubList  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AbstractLinkedList  parent  boolean  E  obj  int  cSize  expectedModCount  fromIndex  index  offset  size  toIndex  
[BugLab_Argument_Swapping]^return index.set ( parent + offset, obj ) ;^1023^^^^^1020^1024^return parent.set ( index + offset, obj ) ;^[CLASS] LinkedSubList  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AbstractLinkedList  parent  boolean  E  obj  int  cSize  expectedModCount  fromIndex  index  offset  size  toIndex  
[BugLab_Argument_Swapping]^return parent.set ( index + obj, offset ) ;^1023^^^^^1020^1024^return parent.set ( index + offset, obj ) ;^[CLASS] LinkedSubList  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AbstractLinkedList  parent  boolean  E  obj  int  cSize  expectedModCount  fromIndex  index  offset  size  toIndex  
[BugLab_Argument_Swapping]^return offset.set ( index + parent, obj ) ;^1023^^^^^1020^1024^return parent.set ( index + offset, obj ) ;^[CLASS] LinkedSubList  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AbstractLinkedList  parent  boolean  E  obj  int  cSize  expectedModCount  fromIndex  index  offset  size  toIndex  
[BugLab_Argument_Swapping]^return parent.set ( offset + index, obj ) ;^1023^^^^^1020^1024^return parent.set ( index + offset, obj ) ;^[CLASS] LinkedSubList  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AbstractLinkedList  parent  boolean  E  obj  int  cSize  expectedModCount  fromIndex  index  offset  size  toIndex  
[BugLab_Variable_Misuse]^return parent.set ( size + offset, obj ) ;^1023^^^^^1020^1024^return parent.set ( index + offset, obj ) ;^[CLASS] LinkedSubList  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AbstractLinkedList  parent  boolean  E  obj  int  cSize  expectedModCount  fromIndex  index  offset  size  toIndex  
[BugLab_Variable_Misuse]^return parent.set ( index + toIndex, obj ) ;^1023^^^^^1020^1024^return parent.set ( index + offset, obj ) ;^[CLASS] LinkedSubList  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AbstractLinkedList  parent  boolean  E  obj  int  cSize  expectedModCount  fromIndex  index  offset  size  toIndex  
[BugLab_Argument_Swapping]^return parent.set ( obj + offset, index ) ;^1023^^^^^1020^1024^return parent.set ( index + offset, obj ) ;^[CLASS] LinkedSubList  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AbstractLinkedList  parent  boolean  E  obj  int  cSize  expectedModCount  fromIndex  index  offset  size  toIndex  
[BugLab_Variable_Misuse]^rangeCheck ( toIndex, size + 1 ) ;^1044^^^^^1043^1047^rangeCheck ( index, size + 1 ) ;^[CLASS] LinkedSubList  [METHOD] listIterator [RETURN_TYPE] ListIterator   final int index [VARIABLES] AbstractLinkedList  parent  int  cSize  expectedModCount  fromIndex  index  offset  size  toIndex  boolean  
[BugLab_Variable_Misuse]^rangeCheck ( index, toIndex + 1 ) ;^1044^^^^^1043^1047^rangeCheck ( index, size + 1 ) ;^[CLASS] LinkedSubList  [METHOD] listIterator [RETURN_TYPE] ListIterator   final int index [VARIABLES] AbstractLinkedList  parent  int  cSize  expectedModCount  fromIndex  index  offset  size  toIndex  boolean  
[BugLab_Argument_Swapping]^rangeCheck ( size, index + 1 ) ;^1044^^^^^1043^1047^rangeCheck ( index, size + 1 ) ;^[CLASS] LinkedSubList  [METHOD] listIterator [RETURN_TYPE] ListIterator   final int index [VARIABLES] AbstractLinkedList  parent  int  cSize  expectedModCount  fromIndex  index  offset  size  toIndex  boolean  
[BugLab_Wrong_Operator]^rangeCheck ( index, size  >=  1 ) ;^1044^^^^^1043^1047^rangeCheck ( index, size + 1 ) ;^[CLASS] LinkedSubList  [METHOD] listIterator [RETURN_TYPE] ListIterator   final int index [VARIABLES] AbstractLinkedList  parent  int  cSize  expectedModCount  fromIndex  index  offset  size  toIndex  boolean  
[BugLab_Wrong_Literal]^rangeCheck ( index, size  ) ;^1044^^^^^1043^1047^rangeCheck ( index, size + 1 ) ;^[CLASS] LinkedSubList  [METHOD] listIterator [RETURN_TYPE] ListIterator   final int index [VARIABLES] AbstractLinkedList  parent  int  cSize  expectedModCount  fromIndex  index  offset  size  toIndex  boolean  
[BugLab_Variable_Misuse]^return parent.createSubListListIterator ( this, toIndex ) ;^1046^^^^^1043^1047^return parent.createSubListListIterator ( this, index ) ;^[CLASS] LinkedSubList  [METHOD] listIterator [RETURN_TYPE] ListIterator   final int index [VARIABLES] AbstractLinkedList  parent  int  cSize  expectedModCount  fromIndex  index  offset  size  toIndex  boolean  
[BugLab_Variable_Misuse]^return 4.createSubListListIterator ( this, index ) ;^1046^^^^^1043^1047^return parent.createSubListListIterator ( this, index ) ;^[CLASS] LinkedSubList  [METHOD] listIterator [RETURN_TYPE] ListIterator   final int index [VARIABLES] AbstractLinkedList  parent  int  cSize  expectedModCount  fromIndex  index  offset  size  toIndex  boolean  
[BugLab_Argument_Swapping]^return index.createSubListListIterator ( this, parent ) ;^1046^^^^^1043^1047^return parent.createSubListListIterator ( this, index ) ;^[CLASS] LinkedSubList  [METHOD] listIterator [RETURN_TYPE] ListIterator   final int index [VARIABLES] AbstractLinkedList  parent  int  cSize  expectedModCount  fromIndex  index  offset  size  toIndex  boolean  
[BugLab_Variable_Misuse]^return new LinkedSubList<E> ( parent, toIndexExclusive + offset, toIndexExclusive + offset ) ;^1051^^^^^1050^1052^return new LinkedSubList<E> ( parent, fromIndexInclusive + offset, toIndexExclusive + offset ) ;^[CLASS] LinkedSubList  [METHOD] subList [RETURN_TYPE] List   final int fromIndexInclusive final int toIndexExclusive [VARIABLES] AbstractLinkedList  parent  int  cSize  expectedModCount  fromIndex  fromIndexInclusive  index  offset  size  toIndex  toIndexExclusive  boolean  
[BugLab_Variable_Misuse]^return new LinkedSubList<E> ( parent, fromIndexInclusive + offset, offset + offset ) ;^1051^^^^^1050^1052^return new LinkedSubList<E> ( parent, fromIndexInclusive + offset, toIndexExclusive + offset ) ;^[CLASS] LinkedSubList  [METHOD] subList [RETURN_TYPE] List   final int fromIndexInclusive final int toIndexExclusive [VARIABLES] AbstractLinkedList  parent  int  cSize  expectedModCount  fromIndex  fromIndexInclusive  index  offset  size  toIndex  toIndexExclusive  boolean  
[BugLab_Variable_Misuse]^return new LinkedSubList<E> ( parent, fromIndexInclusive + toIndexExclusive, toIndexExclusive + offset ) ;^1051^^^^^1050^1052^return new LinkedSubList<E> ( parent, fromIndexInclusive + offset, toIndexExclusive + offset ) ;^[CLASS] LinkedSubList  [METHOD] subList [RETURN_TYPE] List   final int fromIndexInclusive final int toIndexExclusive [VARIABLES] AbstractLinkedList  parent  int  cSize  expectedModCount  fromIndex  fromIndexInclusive  index  offset  size  toIndex  toIndexExclusive  boolean  
[BugLab_Argument_Swapping]^return new LinkedSubList<E> ( parent, toIndexExclusive + offset, fromIndexInclusive + offset ) ;^1051^^^^^1050^1052^return new LinkedSubList<E> ( parent, fromIndexInclusive + offset, toIndexExclusive + offset ) ;^[CLASS] LinkedSubList  [METHOD] subList [RETURN_TYPE] List   final int fromIndexInclusive final int toIndexExclusive [VARIABLES] AbstractLinkedList  parent  int  cSize  expectedModCount  fromIndex  fromIndexInclusive  index  offset  size  toIndex  toIndexExclusive  boolean  
[BugLab_Argument_Swapping]^return new LinkedSubList<E> ( fromIndexInclusive, parent + offset, toIndexExclusive + offset ) ;^1051^^^^^1050^1052^return new LinkedSubList<E> ( parent, fromIndexInclusive + offset, toIndexExclusive + offset ) ;^[CLASS] LinkedSubList  [METHOD] subList [RETURN_TYPE] List   final int fromIndexInclusive final int toIndexExclusive [VARIABLES] AbstractLinkedList  parent  int  cSize  expectedModCount  fromIndex  fromIndexInclusive  index  offset  size  toIndex  toIndexExclusive  boolean  
[BugLab_Argument_Swapping]^return new LinkedSubList<E> ( parent, fromIndexInclusive + toIndexExclusive, offset + offset ) ;^1051^^^^^1050^1052^return new LinkedSubList<E> ( parent, fromIndexInclusive + offset, toIndexExclusive + offset ) ;^[CLASS] LinkedSubList  [METHOD] subList [RETURN_TYPE] List   final int fromIndexInclusive final int toIndexExclusive [VARIABLES] AbstractLinkedList  parent  int  cSize  expectedModCount  fromIndex  fromIndexInclusive  index  offset  size  toIndex  toIndexExclusive  boolean  
[BugLab_Wrong_Operator]^return new LinkedSubList<E> ( parent, fromIndexInclusive + offset, toIndexExclusive   instanceof   offset ) ;^1051^^^^^1050^1052^return new LinkedSubList<E> ( parent, fromIndexInclusive + offset, toIndexExclusive + offset ) ;^[CLASS] LinkedSubList  [METHOD] subList [RETURN_TYPE] List   final int fromIndexInclusive final int toIndexExclusive [VARIABLES] AbstractLinkedList  parent  int  cSize  expectedModCount  fromIndex  fromIndexInclusive  index  offset  size  toIndex  toIndexExclusive  boolean  
[BugLab_Variable_Misuse]^return new LinkedSubList<E> ( parent, toIndex + offset, toIndexExclusive + offset ) ;^1051^^^^^1050^1052^return new LinkedSubList<E> ( parent, fromIndexInclusive + offset, toIndexExclusive + offset ) ;^[CLASS] LinkedSubList  [METHOD] subList [RETURN_TYPE] List   final int fromIndexInclusive final int toIndexExclusive [VARIABLES] AbstractLinkedList  parent  int  cSize  expectedModCount  fromIndex  fromIndexInclusive  index  offset  size  toIndex  toIndexExclusive  boolean  
[BugLab_Variable_Misuse]^return new LinkedSubList<E> ( parent, fromIndexInclusive + offset, size + offset ) ;^1051^^^^^1050^1052^return new LinkedSubList<E> ( parent, fromIndexInclusive + offset, toIndexExclusive + offset ) ;^[CLASS] LinkedSubList  [METHOD] subList [RETURN_TYPE] List   final int fromIndexInclusive final int toIndexExclusive [VARIABLES] AbstractLinkedList  parent  int  cSize  expectedModCount  fromIndex  fromIndexInclusive  index  offset  size  toIndex  toIndexExclusive  boolean  
[BugLab_Variable_Misuse]^return new LinkedSubList<E> ( parent, fromIndexInclusive + index, toIndexExclusive + offset ) ;^1051^^^^^1050^1052^return new LinkedSubList<E> ( parent, fromIndexInclusive + offset, toIndexExclusive + offset ) ;^[CLASS] LinkedSubList  [METHOD] subList [RETURN_TYPE] List   final int fromIndexInclusive final int toIndexExclusive [VARIABLES] AbstractLinkedList  parent  int  cSize  expectedModCount  fromIndex  fromIndexInclusive  index  offset  size  toIndex  toIndexExclusive  boolean  
[BugLab_Argument_Swapping]^return new LinkedSubList<E> ( parent, offset + fromIndexInclusive, toIndexExclusive + offset ) ;^1051^^^^^1050^1052^return new LinkedSubList<E> ( parent, fromIndexInclusive + offset, toIndexExclusive + offset ) ;^[CLASS] LinkedSubList  [METHOD] subList [RETURN_TYPE] List   final int fromIndexInclusive final int toIndexExclusive [VARIABLES] AbstractLinkedList  parent  int  cSize  expectedModCount  fromIndex  fromIndexInclusive  index  offset  size  toIndex  toIndexExclusive  boolean  
[BugLab_Argument_Swapping]^return new LinkedSubList<E> ( offset, fromIndexInclusive + parent, toIndexExclusive + offset ) ;^1051^^^^^1050^1052^return new LinkedSubList<E> ( parent, fromIndexInclusive + offset, toIndexExclusive + offset ) ;^[CLASS] LinkedSubList  [METHOD] subList [RETURN_TYPE] List   final int fromIndexInclusive final int toIndexExclusive [VARIABLES] AbstractLinkedList  parent  int  cSize  expectedModCount  fromIndex  fromIndexInclusive  index  offset  size  toIndex  toIndexExclusive  boolean  
[BugLab_Wrong_Operator]^return new LinkedSubList<E> ( parent, fromIndexInclusive + offset, toIndexExclusive  ==  offset ) ;^1051^^^^^1050^1052^return new LinkedSubList<E> ( parent, fromIndexInclusive + offset, toIndexExclusive + offset ) ;^[CLASS] LinkedSubList  [METHOD] subList [RETURN_TYPE] List   final int fromIndexInclusive final int toIndexExclusive [VARIABLES] AbstractLinkedList  parent  int  cSize  expectedModCount  fromIndex  fromIndexInclusive  index  offset  size  toIndex  toIndexExclusive  boolean  
[BugLab_Variable_Misuse]^if  ( toIndexExclusive < 0 || index >= beyond )  {^1055^^^^^1054^1058^if  ( index < 0 || index >= beyond )  {^[CLASS] LinkedSubList  [METHOD] rangeCheck [RETURN_TYPE] void   final int index final int beyond [VARIABLES] AbstractLinkedList  parent  int  beyond  cSize  expectedModCount  fromIndex  fromIndexInclusive  index  offset  size  toIndex  toIndexExclusive  boolean  
[BugLab_Variable_Misuse]^if  ( index < 0 || index >= toIndexExclusive )  {^1055^^^^^1054^1058^if  ( index < 0 || index >= beyond )  {^[CLASS] LinkedSubList  [METHOD] rangeCheck [RETURN_TYPE] void   final int index final int beyond [VARIABLES] AbstractLinkedList  parent  int  beyond  cSize  expectedModCount  fromIndex  fromIndexInclusive  index  offset  size  toIndex  toIndexExclusive  boolean  
[BugLab_Argument_Swapping]^if  ( beyond < 0 || index >= index )  {^1055^^^^^1054^1058^if  ( index < 0 || index >= beyond )  {^[CLASS] LinkedSubList  [METHOD] rangeCheck [RETURN_TYPE] void   final int index final int beyond [VARIABLES] AbstractLinkedList  parent  int  beyond  cSize  expectedModCount  fromIndex  fromIndexInclusive  index  offset  size  toIndex  toIndexExclusive  boolean  
[BugLab_Wrong_Operator]^if  ( index < 0 && index >= beyond )  {^1055^^^^^1054^1058^if  ( index < 0 || index >= beyond )  {^[CLASS] LinkedSubList  [METHOD] rangeCheck [RETURN_TYPE] void   final int index final int beyond [VARIABLES] AbstractLinkedList  parent  int  beyond  cSize  expectedModCount  fromIndex  fromIndexInclusive  index  offset  size  toIndex  toIndexExclusive  boolean  
[BugLab_Wrong_Operator]^if  ( index == 0 || index >= beyond )  {^1055^^^^^1054^1058^if  ( index < 0 || index >= beyond )  {^[CLASS] LinkedSubList  [METHOD] rangeCheck [RETURN_TYPE] void   final int index final int beyond [VARIABLES] AbstractLinkedList  parent  int  beyond  cSize  expectedModCount  fromIndex  fromIndexInclusive  index  offset  size  toIndex  toIndexExclusive  boolean  
[BugLab_Wrong_Operator]^if  ( index < 0 || index > beyond )  {^1055^^^^^1054^1058^if  ( index < 0 || index >= beyond )  {^[CLASS] LinkedSubList  [METHOD] rangeCheck [RETURN_TYPE] void   final int index final int beyond [VARIABLES] AbstractLinkedList  parent  int  beyond  cSize  expectedModCount  fromIndex  fromIndexInclusive  index  offset  size  toIndex  toIndexExclusive  boolean  
[BugLab_Wrong_Literal]^if  ( index < -1 || index >= beyond )  {^1055^^^^^1054^1058^if  ( index < 0 || index >= beyond )  {^[CLASS] LinkedSubList  [METHOD] rangeCheck [RETURN_TYPE] void   final int index final int beyond [VARIABLES] AbstractLinkedList  parent  int  beyond  cSize  expectedModCount  fromIndex  fromIndexInclusive  index  offset  size  toIndex  toIndexExclusive  boolean  
[BugLab_Variable_Misuse]^if  ( index != expectedModCount )  {^1061^^^^^1060^1064^if  ( parent.modCount != expectedModCount )  {^[CLASS] LinkedSubList  [METHOD] checkModCount [RETURN_TYPE] void   [VARIABLES] AbstractLinkedList  parent  int  beyond  cSize  expectedModCount  fromIndex  fromIndexInclusive  index  offset  size  toIndex  toIndexExclusive  boolean  
[BugLab_Variable_Misuse]^if  ( parent.modCount != offset )  {^1061^^^^^1060^1064^if  ( parent.modCount != expectedModCount )  {^[CLASS] LinkedSubList  [METHOD] checkModCount [RETURN_TYPE] void   [VARIABLES] AbstractLinkedList  parent  int  beyond  cSize  expectedModCount  fromIndex  fromIndexInclusive  index  offset  size  toIndex  toIndexExclusive  boolean  
[BugLab_Argument_Swapping]^if  ( expectedModCount != parent.modCount )  {^1061^^^^^1060^1064^if  ( parent.modCount != expectedModCount )  {^[CLASS] LinkedSubList  [METHOD] checkModCount [RETURN_TYPE] void   [VARIABLES] AbstractLinkedList  parent  int  beyond  cSize  expectedModCount  fromIndex  fromIndexInclusive  index  offset  size  toIndex  toIndexExclusive  boolean  
[BugLab_Argument_Swapping]^if  ( expectedModCount.modCount != parent )  {^1061^^^^^1060^1064^if  ( parent.modCount != expectedModCount )  {^[CLASS] LinkedSubList  [METHOD] checkModCount [RETURN_TYPE] void   [VARIABLES] AbstractLinkedList  parent  int  beyond  cSize  expectedModCount  fromIndex  fromIndexInclusive  index  offset  size  toIndex  toIndexExclusive  boolean  
[BugLab_Wrong_Operator]^if  ( parent.modCount == expectedModCount )  {^1061^^^^^1060^1064^if  ( parent.modCount != expectedModCount )  {^[CLASS] LinkedSubList  [METHOD] checkModCount [RETURN_TYPE] void   [VARIABLES] AbstractLinkedList  parent  int  beyond  cSize  expectedModCount  fromIndex  fromIndexInclusive  index  offset  size  toIndex  toIndexExclusive  boolean  
