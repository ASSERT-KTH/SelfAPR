[buglab_swap_variables]^this.expectedModCount = parent.modCount.modCount;^787^^^^^783^790^this.expectedModCount = parent.modCount;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList,int)   AbstractLinkedList<E> parent final int fromIndex [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  modCount  nextIndex  offset  size  Node  current  header  next  previous  
[buglab_swap_variables]^this.expectedModCount = parent;^787^^^^^783^790^this.expectedModCount = parent.modCount;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList,int)   AbstractLinkedList<E> parent final int fromIndex [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  modCount  nextIndex  offset  size  Node  current  header  next  previous  
[buglab_swap_variables]^this.next = fromIndex.getNode ( parent, true ) ;^788^^^^^783^790^this.next = parent.getNode ( fromIndex, true ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList,int)   AbstractLinkedList<E> parent final int fromIndex [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  modCount  nextIndex  offset  size  Node  current  header  next  previous  
[buglab_swap_variables]^this.next = parent.getNode (  true ) ;^788^^^^^783^790^this.next = parent.getNode ( fromIndex, true ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList,int)   AbstractLinkedList<E> parent final int fromIndex [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  modCount  nextIndex  offset  size  Node  current  header  next  previous  
[buglab_swap_variables]^super ( startIndex.parent, sub + sub.offset ) ;^900^^^^^899^902^super ( sub.parent, startIndex + sub.offset ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList$LinkedSubList,int)   LinkedSubList<E> sub final int startIndex [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  modCount  nextIndex  offset  size  startIndex  Node  current  header  next  previous  
[buglab_swap_variables]^super ( startIndex, sub.parent + sub.offset ) ;^900^^^^^899^902^super ( sub.parent, startIndex + sub.offset ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList$LinkedSubList,int)   LinkedSubList<E> sub final int startIndex [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  modCount  nextIndex  offset  size  startIndex  Node  current  header  next  previous  
[buglab_swap_variables]^super ( sub.parent + sub.offset ) ;^900^^^^^899^902^super ( sub.parent, startIndex + sub.offset ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList$LinkedSubList,int)   LinkedSubList<E> sub final int startIndex [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  modCount  nextIndex  offset  size  startIndex  Node  current  header  next  previous  
[buglab_swap_variables]^super ( sub.offset, startIndex + sub.parent ) ;^900^^^^^899^902^super ( sub.parent, startIndex + sub.offset ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList$LinkedSubList,int)   LinkedSubList<E> sub final int startIndex [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  modCount  nextIndex  offset  size  startIndex  Node  current  header  next  previous  
[buglab_swap_variables]^super (  startIndex + sub.offset ) ;^900^^^^^899^902^super ( sub.parent, startIndex + sub.offset ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList$LinkedSubList,int)   LinkedSubList<E> sub final int startIndex [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  modCount  nextIndex  offset  size  startIndex  Node  current  header  next  previous  
[buglab_swap_variables]^super ( sub.parent, sub.offset + startIndex ) ;^900^^^^^899^902^super ( sub.parent, startIndex + sub.offset ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList$LinkedSubList,int)   LinkedSubList<E> sub final int startIndex [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  modCount  nextIndex  offset  size  startIndex  Node  current  header  next  previous  
[buglab_swap_variables]^if  ( parent > toIndex.size (  )  )  {^952^^^^^948^962^if  ( toIndex > parent.size (  )  )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList,int,int)   AbstractLinkedList<E> parent final int fromIndex final int toIndex [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  modCount  nextIndex  offset  size  startIndex  toIndex  Node  current  header  next  previous  
[buglab_swap_variables]^if  ( toIndex > fromIndex )  {^955^^^^^948^962^if  ( fromIndex > toIndex )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList,int,int)   AbstractLinkedList<E> parent final int fromIndex final int toIndex [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  modCount  nextIndex  offset  size  startIndex  toIndex  Node  current  header  next  previous  
[buglab_swap_variables]^this.size = fromIndex - toIndex;^960^^^^^948^962^this.size = toIndex - fromIndex;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList,int,int)   AbstractLinkedList<E> parent final int fromIndex final int toIndex [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  modCount  nextIndex  offset  size  startIndex  toIndex  Node  current  header  next  previous  
[buglab_swap_variables]^this.expectedModCount = parent.modCount.modCount;^961^^^^^948^962^this.expectedModCount = parent.modCount;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList,int,int)   AbstractLinkedList<E> parent final int fromIndex final int toIndex [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  modCount  nextIndex  offset  size  startIndex  toIndex  Node  current  header  next  previous  
[buglab_swap_variables]^this.expectedModCount = parent;^961^^^^^948^962^this.expectedModCount = parent.modCount;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList,int,int)   AbstractLinkedList<E> parent final int fromIndex final int toIndex [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  modCount  nextIndex  offset  size  startIndex  toIndex  Node  current  header  next  previous  
[buglab_swap_variables]^if  ( nodesEqualValue ( i.getValue (  ) , value )  )  {^135^^^^^132^141^if  ( isEqualValue ( node.getValue (  ) , value )  )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] indexOf [RETURN_TYPE] int   Object value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  Object  value  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[buglab_swap_variables]^if  ( isEqualValue ( value.getValue (  ) , node )  )  {^135^^^^^132^141^if  ( isEqualValue ( node.getValue (  ) , value )  )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] indexOf [RETURN_TYPE] int   Object value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  Object  value  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[buglab_swap_variables]^if  ( isEqualValue ( node.getValue (  )  )  )  {^135^^^^^132^141^if  ( isEqualValue ( node.getValue (  ) , value )  )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] indexOf [RETURN_TYPE] int   Object value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  Object  value  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[buglab_swap_variables]^for  ( Node<E> node.next = header.next; node != header; node = node )  {^134^^^^^132^141^for  ( Node<E> node = header.next; node != header; node = node.next )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] indexOf [RETURN_TYPE] int   Object value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  Object  value  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[buglab_swap_variables]^for  ( Node<E> node = node.next; node != header; node = header.next )  {^134^^^^^132^141^for  ( Node<E> node = header.next; node != header; node = node.next )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] indexOf [RETURN_TYPE] int   Object value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  Object  value  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[buglab_swap_variables]^for  ( Node<E> node = node.next.next; node != header; node = header )  {^134^^^^^132^141^for  ( Node<E> node = header.next; node != header; node = node.next )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] indexOf [RETURN_TYPE] int   Object value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  Object  value  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[buglab_swap_variables]^for  ( Node<E> node = header.next.next; node != header; node = node.next )  {^134^^^^^132^141^for  ( Node<E> node = header.next; node != header; node = node.next )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] indexOf [RETURN_TYPE] int   Object value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  Object  value  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[buglab_swap_variables]^for  ( Node<E> node = header; node != header.next; node = node.next )  {^134^^^^^132^141^for  ( Node<E> node = header.next; node != header; node = node.next )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] indexOf [RETURN_TYPE] int   Object value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  Object  value  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[buglab_swap_variables]^if  ( isEqualValue ( value.getValue (  ) , node )  )  {^146^^^^^143^152^if  ( isEqualValue ( node.getValue (  ) , value )  )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] lastIndexOf [RETURN_TYPE] int   Object value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  Object  value  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[buglab_swap_variables]^if  ( isEqualValue ( node.getValue (  )  )  )  {^146^^^^^143^152^if  ( isEqualValue ( node.getValue (  ) , value )  )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] lastIndexOf [RETURN_TYPE] int   Object value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  Object  value  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[buglab_swap_variables]^if  ( nodesEqualValue ( i.getValue (  ) , value )  )  {^146^^^^^143^152^if  ( isEqualValue ( node.getValue (  ) , value )  )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] lastIndexOf [RETURN_TYPE] int   Object value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  Object  value  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[buglab_swap_variables]^for  ( Node<E> header = node.previous; node != header; node = node.previous )  {^145^^^^^143^152^for  ( Node<E> node = header.previous; node != header; node = node.previous )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] lastIndexOf [RETURN_TYPE] int   Object value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  Object  value  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[buglab_swap_variables]^for  ( Node<E> node = node.previous; node != header; node = header.previous )  {^145^^^^^143^152^for  ( Node<E> node = header.previous; node != header; node = node.previous )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] lastIndexOf [RETURN_TYPE] int   Object value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  Object  value  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[buglab_swap_variables]^for  ( Node<E> node = node.previous.previous; node != header; node = header )  {^145^^^^^143^152^for  ( Node<E> node = header.previous; node != header; node = node.previous )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] lastIndexOf [RETURN_TYPE] int   Object value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  Object  value  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[buglab_swap_variables]^if  ( valuesEqualValue ( node.getValue (  ) , i )  )  {^146^^^^^143^152^if  ( isEqualValue ( node.getValue (  ) , value )  )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] lastIndexOf [RETURN_TYPE] int   Object value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  Object  value  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[buglab_swap_variables]^for  ( Node<E> node.previous = header.previous; node != header; node = node )  {^145^^^^^143^152^for  ( Node<E> node = header.previous; node != header; node = node.previous )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] lastIndexOf [RETURN_TYPE] int   Object value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  Object  value  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[buglab_swap_variables]^for  ( Node<E> node = header; node != header.previous; node = node.previous )  {^145^^^^^143^152^for  ( Node<E> node = header.previous; node != header; node = node.previous )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] lastIndexOf [RETURN_TYPE] int   Object value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  Object  value  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[buglab_swap_variables]^for  ( Node<E> node = header.previous.previous; node != header; node = node.previous )  {^145^^^^^143^152^for  ( Node<E> node = header.previous; node != header; node = node.previous )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] lastIndexOf [RETURN_TYPE] int   Object value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  Object  value  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[buglab_swap_variables]^if  ( size < array.length )  {^176^^^^^174^190^if  ( array.length < size )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] toArray [RETURN_TYPE] <T>   T[] array [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  T[]  array  Class  componentType  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[buglab_swap_variables]^array =  ( T[] )  Array.newInstance ( size, componentType ) ;^178^^^^^174^190^array =  ( T[] )  Array.newInstance ( componentType, size ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] toArray [RETURN_TYPE] <T>   T[] array [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  T[]  array  Class  componentType  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[buglab_swap_variables]^array =  ( T[] )  Array.newInstance (  size ) ;^178^^^^^174^190^array =  ( T[] )  Array.newInstance ( componentType, size ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] toArray [RETURN_TYPE] <T>   T[] array [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  T[]  array  Class  componentType  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[buglab_swap_variables]^array =  ( T[] )  Array.newInstance ( componentType ) ;^178^^^^^174^190^array =  ( T[] )  Array.newInstance ( componentType, size ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] toArray [RETURN_TYPE] <T>   T[] array [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  T[]  array  Class  componentType  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[buglab_swap_variables]^for  ( Node<E> header = node.next; node != header; node = node.next, i++ )  {^182^^^^^174^190^for  ( Node<E> node = header.next; node != header; node = node.next, i++ )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] toArray [RETURN_TYPE] <T>   T[] array [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  T[]  array  Class  componentType  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[buglab_swap_variables]^for  ( Node<E> node = i.next; node != header; node = node.next, header++ )  {^182^^^^^174^190^for  ( Node<E> node = header.next; node != header; node = node.next, i++ )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] toArray [RETURN_TYPE] <T>   T[] array [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  T[]  array  Class  componentType  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[buglab_swap_variables]^for  ( Node<E> node = header.next; node != header; node = node.next++ )  {^182^^^^^174^190^for  ( Node<E> node = header.next; node != header; node = node.next, i++ )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] toArray [RETURN_TYPE] <T>   T[] array [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  T[]  array  Class  componentType  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[buglab_swap_variables]^for  ( Node<E> node = node.next; node != header; node = header.next, i++ )  {^182^^^^^174^190^for  ( Node<E> node = header.next; node != header; node = node.next, i++ )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] toArray [RETURN_TYPE] <T>   T[] array [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  T[]  array  Class  componentType  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[buglab_swap_variables]^for  ( Node<E> node = header.next.next; node != header; node = node.next, i++ )  {^182^^^^^174^190^for  ( Node<E> node = header.next; node != header; node = node.next, i++ )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] toArray [RETURN_TYPE] <T>   T[] array [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  T[]  array  Class  componentType  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[buglab_swap_variables]^for  ( Node<E> node = header.next; node != header; node =  i++ )  {^182^^^^^174^190^for  ( Node<E> node = header.next; node != header; node = node.next, i++ )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] toArray [RETURN_TYPE] <T>   T[] array [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  T[]  array  Class  componentType  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[buglab_swap_variables]^for  ( Node<E> node.next = header.next; node != header; node = node, i++ )  {^182^^^^^174^190^for  ( Node<E> node = header.next; node != header; node = node.next, i++ )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] toArray [RETURN_TYPE] <T>   T[] array [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  T[]  array  Class  componentType  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[buglab_swap_variables]^for  ( Node<E> node = header; node != header.next; node = node.next, i++ )  {^182^^^^^174^190^for  ( Node<E> node = header.next; node != header; node = node.next, i++ )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] toArray [RETURN_TYPE] <T>   T[] array [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  T[]  array  Class  componentType  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[buglab_swap_variables]^if  ( array.length.length > size )  {^186^^^^^174^190^if  ( array.length > size )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] toArray [RETURN_TYPE] <T>   T[] array [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  T[]  array  Class  componentType  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[buglab_swap_variables]^if  ( size > array.length )  {^186^^^^^174^190^if  ( array.length > size )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] toArray [RETURN_TYPE] <T>   T[] array [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  T[]  array  Class  componentType  int  expectedModCount  fromIndex  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  
[buglab_swap_variables]^return new LinkedSubList<E> ( this, toIndexExclusive, fromIndexInclusive ) ;^200^^^^^199^201^return new LinkedSubList<E> ( this, fromIndexInclusive, toIndexExclusive ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] subList [RETURN_TYPE] List   final int fromIndexInclusive final int toIndexExclusive [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[buglab_swap_variables]^return new LinkedSubList<E> ( this,  toIndexExclusive ) ;^200^^^^^199^201^return new LinkedSubList<E> ( this, fromIndexInclusive, toIndexExclusive ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] subList [RETURN_TYPE] List   final int fromIndexInclusive final int toIndexExclusive [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[buglab_swap_variables]^return new LinkedSubList<E> ( this, fromIndexInclusive ) ;^200^^^^^199^201^return new LinkedSubList<E> ( this, fromIndexInclusive, toIndexExclusive ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] subList [RETURN_TYPE] List   final int fromIndexInclusive final int toIndexExclusive [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[buglab_swap_variables]^addNodeBefore ( value, node ) ;^212^^^^^210^213^addNodeBefore ( node, value ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] add [RETURN_TYPE] void   final int index final E value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[buglab_swap_variables]^addNodeBefore (  value ) ;^212^^^^^210^213^addNodeBefore ( node, value ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] add [RETURN_TYPE] void   final int index final E value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[buglab_swap_variables]^addNodeBefore ( node ) ;^212^^^^^210^213^addNodeBefore ( node, value ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] add [RETURN_TYPE] void   final int index final E value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[buglab_swap_variables]^return addAll ( coll, size ) ;^216^^^^^215^217^return addAll ( size, coll ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> coll [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  Collection  coll  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[buglab_swap_variables]^return addAll ( size ) ;^216^^^^^215^217^return addAll ( size, coll ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> coll [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  Collection  coll  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[buglab_swap_variables]^return addAll (  coll ) ;^216^^^^^215^217^return addAll ( size, coll ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> coll [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  value  Node  current  header  next  node  previous  Collection  coll  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[buglab_swap_variables]^addNodeBefore ( e, node ) ;^222^^^^^219^225^addNodeBefore ( node, e ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   final int index Collection<? extends E> coll [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  value  Node  current  header  next  node  previous  Collection  coll  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[buglab_swap_variables]^addNodeBefore (  e ) ;^222^^^^^219^225^addNodeBefore ( node, e ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   final int index Collection<? extends E> coll [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  value  Node  current  header  next  node  previous  Collection  coll  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[buglab_swap_variables]^addNodeBefore ( nod e ) ;^222^^^^^219^225^addNodeBefore ( node, e ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   final int index Collection<? extends E> coll [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  value  Node  current  header  next  node  previous  Collection  coll  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[buglab_swap_variables]^if  ( isEqualValue ( value.getValue (  ) , node )  )  {^238^^^^^236^244^if  ( isEqualValue ( node.getValue (  ) , value )  )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] remove [RETURN_TYPE] boolean   Object value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  oldValue  value  Node  current  header  next  node  previous  Object  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[buglab_swap_variables]^if  ( isEqualValue ( node.getValue (  )  )  )  {^238^^^^^236^244^if  ( isEqualValue ( node.getValue (  ) , value )  )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] remove [RETURN_TYPE] boolean   Object value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  oldValue  value  Node  current  header  next  node  previous  Object  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[buglab_swap_variables]^for  ( Node<E> header = node.next; node != header; node = node.next )  {^237^^^^^236^244^for  ( Node<E> node = header.next; node != header; node = node.next )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] remove [RETURN_TYPE] boolean   Object value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  oldValue  value  Node  current  header  next  node  previous  Object  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[buglab_swap_variables]^for  ( Node<E> node = header; node != header.next; node = node.next )  {^237^^^^^236^244^for  ( Node<E> node = header.next; node != header; node = node.next )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] remove [RETURN_TYPE] boolean   Object value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  oldValue  value  Node  current  header  next  node  previous  Object  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[buglab_swap_variables]^for  ( Node<E> node.next = header.next; node != header; node = node )  {^237^^^^^236^244^for  ( Node<E> node = header.next; node != header; node = node.next )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] remove [RETURN_TYPE] boolean   Object value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  oldValue  value  Node  current  header  next  node  previous  Object  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[buglab_swap_variables]^for  ( Node<E> node = header.next.next; node != header; node = node.next )  {^237^^^^^236^244^for  ( Node<E> node = header.next; node != header; node = node.next )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] remove [RETURN_TYPE] boolean   Object value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  oldValue  value  Node  current  header  next  node  previous  Object  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[buglab_swap_variables]^if  ( it.contains ( coll.next (  )  )  )  {^259^^^^^255^265^if  ( coll.contains ( it.next (  )  )  )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] removeAll [RETURN_TYPE] boolean   Collection<?> coll [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  modified  E  e  oldValue  value  Node  current  header  next  node  previous  Iterator  it  Collection  coll  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[buglab_swap_variables]^if  ( it.contains ( coll.next (  )  )  == false )  {^282^^^^^278^288^if  ( coll.contains ( it.next (  )  )  == false )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] retainAll [RETURN_TYPE] boolean   Collection<?> coll [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  modified  E  e  oldValue  value  Node  current  header  next  node  previous  Iterator  it  Collection  coll  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[buglab_swap_variables]^updateNode ( value, node ) ;^293^^^^^290^295^updateNode ( node, value ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] set [RETURN_TYPE] E   final int index final E value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[buglab_swap_variables]^updateNode (  value ) ;^293^^^^^290^295^updateNode ( node, value ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] set [RETURN_TYPE] E   final int index final E value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[buglab_swap_variables]^updateNode ( node ) ;^293^^^^^290^295^updateNode ( node, value ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] set [RETURN_TYPE] E   final int index final E value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[buglab_swap_variables]^final Node<E> node = header;^304^^^^^303^309^final Node<E> node = header.next;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getFirst [RETURN_TYPE] E   [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[buglab_swap_variables]^final Node<E> node = header.next.next;^304^^^^^303^309^final Node<E> node = header.next;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getFirst [RETURN_TYPE] E   [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[buglab_swap_variables]^if  ( header == node )  {^305^^^^^303^309^if  ( node == header )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getFirst [RETURN_TYPE] E   [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[buglab_swap_variables]^final Node<E> node = header;^312^^^^^311^317^final Node<E> node = header.previous;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getLast [RETURN_TYPE] E   [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[buglab_swap_variables]^final Node<E> node = header.previous.previous;^312^^^^^311^317^final Node<E> node = header.previous;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getLast [RETURN_TYPE] E   [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[buglab_swap_variables]^if  ( header == node )  {^313^^^^^311^317^if  ( node == header )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getLast [RETURN_TYPE] E   [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[buglab_swap_variables]^addNodeAfter ( o, header ) ;^320^^^^^319^322^addNodeAfter ( header, o ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addFirst [RETURN_TYPE] boolean   final E o [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[buglab_swap_variables]^addNodeAfter ( header ) ;^320^^^^^319^322^addNodeAfter ( header, o ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addFirst [RETURN_TYPE] boolean   final E o [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[buglab_swap_variables]^addNodeAfter (  o ) ;^320^^^^^319^322^addNodeAfter ( header, o ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addFirst [RETURN_TYPE] boolean   final E o [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[buglab_swap_variables]^addNodeBefore ( o, header ) ;^325^^^^^324^327^addNodeBefore ( header, o ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addLast [RETURN_TYPE] boolean   final E o [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[buglab_swap_variables]^addNodeBefore ( header ) ;^325^^^^^324^327^addNodeBefore ( header, o ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addLast [RETURN_TYPE] boolean   final E o [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[buglab_swap_variables]^addNodeBefore (  o ) ;^325^^^^^324^327^addNodeBefore ( header, o ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addLast [RETURN_TYPE] boolean   final E o [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[buglab_swap_variables]^final Node<E> node = header;^330^^^^^329^337^final Node<E> node = header.next;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] removeFirst [RETURN_TYPE] E   [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[buglab_swap_variables]^final Node<E> node = header.next.next;^330^^^^^329^337^final Node<E> node = header.next;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] removeFirst [RETURN_TYPE] E   [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[buglab_swap_variables]^if  ( header == node )  {^331^^^^^329^337^if  ( node == header )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] removeFirst [RETURN_TYPE] E   [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[buglab_swap_variables]^final Node<E> node = header;^340^^^^^339^347^final Node<E> node = header.previous;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] removeLast [RETURN_TYPE] E   [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[buglab_swap_variables]^final Node<E> node = header.previous.previous;^340^^^^^339^347^final Node<E> node = header.previous;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] removeLast [RETURN_TYPE] E   [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[buglab_swap_variables]^if  ( header == node )  {^341^^^^^339^347^if  ( node == header )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] removeLast [RETURN_TYPE] E   [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[buglab_swap_variables]^while  ( it2.hasNext (  )  && it1.hasNext (  )  )  {^364^^^^^351^372^while  ( it1.hasNext (  )  && it2.hasNext (  )  )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  Node  current  header  next  node  previous  Object  o1  o2  obj  List  other  ListIterator  it1  it2  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[buglab_swap_variables]^if  ( ! ( o2 == null ? o1 == null : o1.equals ( o2 )  )  )  {^367^^^^^351^372^if  ( ! ( o1 == null ? o2 == null : o1.equals ( o2 )  )  )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  Node  current  header  next  node  previous  Object  o1  o2  obj  List  other  ListIterator  it1  it2  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[buglab_swap_variables]^return ! ( it2.hasNext (  )  || it1.hasNext (  )  ) ;^371^^^^^351^372^return ! ( it1.hasNext (  )  || it2.hasNext (  )  ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  Node  current  header  next  node  previous  Object  o1  o2  obj  List  other  ListIterator  it1  it2  int  expectedModCount  fromIndex  fromIndexInclusive  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[buglab_swap_variables]^hashCode = 31 * e +  ( hashCode == null ? 0 : e.hashCode (  )  ) ;^378^^^^^375^381^hashCode = 31 * hashCode +  ( e == null ? 0 : e.hashCode (  )  ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  next  node  previous  
[buglab_swap_variables]^return value2 == value1 ||  ( value1 == null ? false : value1.equals ( value2 )  ) ;^416^^^^^415^417^return value1 == value2 ||  ( value1 == null ? false : value1.equals ( value2 )  ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] isEqualValue [RETURN_TYPE] boolean   Object value1 Object value2 [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  Node  current  header  next  node  previous  Object  value1  value2  int  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[buglab_swap_variables]^addNode ( node, newNode ) ;^467^^^^^465^468^addNode ( newNode, node ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addNodeBefore [RETURN_TYPE] void   Node<E> node final E value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  newNode  next  node  previous  
[buglab_swap_variables]^addNode (  node ) ;^467^^^^^465^468^addNode ( newNode, node ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addNodeBefore [RETURN_TYPE] void   Node<E> node final E value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  newNode  next  node  previous  
[buglab_swap_variables]^addNode ( newNode ) ;^467^^^^^465^468^addNode ( newNode, node ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addNodeBefore [RETURN_TYPE] void   Node<E> node final E value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  newNode  next  node  previous  
[buglab_swap_variables]^addNode ( node.next, newNode ) ;^483^^^^^481^484^addNode ( newNode, node.next ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addNodeAfter [RETURN_TYPE] void   Node<E> node final E value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  newNode  next  node  previous  
[buglab_swap_variables]^addNode (  node.next ) ;^483^^^^^481^484^addNode ( newNode, node.next ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addNodeAfter [RETURN_TYPE] void   Node<E> node final E value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  newNode  next  node  previous  
[buglab_swap_variables]^addNode ( node, newNode.next ) ;^483^^^^^481^484^addNode ( newNode, node.next ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addNodeAfter [RETURN_TYPE] void   Node<E> node final E value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  newNode  next  node  previous  
[buglab_swap_variables]^addNode ( newNode.next ) ;^483^^^^^481^484^addNode ( newNode, node.next ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addNodeAfter [RETURN_TYPE] void   Node<E> node final E value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  newNode  next  node  previous  
[buglab_swap_variables]^addNode ( newNode ) ;^483^^^^^481^484^addNode ( newNode, node.next ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addNodeAfter [RETURN_TYPE] void   Node<E> node final E value [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  newNode  next  node  previous  
[buglab_swap_variables]^nodeToInsert.previous = insertBeforeNode;^495^^^^^493^500^nodeToInsert.previous = insertBeforeNode.previous;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addNode [RETURN_TYPE] void   Node<E> nodeToInsert Node<E> insertBeforeNode [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^node.next.previous = node.previous.previous;^510^^^^^508^513^node.next.previous = node.previous;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] removeNode [RETURN_TYPE] void   Node<E> node [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^if  ( !endMarkerAllowed && size == index )  {^542^^^^^527^557^if  ( !endMarkerAllowed && index == size )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^if  ( size > index )  {^546^^^^^531^561^if  ( index > size )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  ( " + size + " )  greater than the index of the " + "list  ( " + size + " ) ." ) ;^547^548^549^^^532^562^throw new IndexOutOfBoundsException ( "Couldn't get the node: " + "index  ( " + index + " )  greater than the size of the " + "list  ( " + size + " ) ." ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^if  ( size < index / 2 )  {^553^^^^^538^568^if  ( index < size / 2 )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^for  ( int size = currentIndex; currentIndex > index; currentIndex-- )  {^562^^^^^553^565^for  ( int currentIndex = size; currentIndex > index; currentIndex-- )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^for  ( int index = size; currentIndex > currentIndex; currentIndex-- )  {^562^^^^^553^565^for  ( int currentIndex = size; currentIndex > index; currentIndex-- )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^node = node.previous.previous;^563^^^^^553^565^node = node.previous;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^node = node;^563^^^^^553^565^node = node.previous;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^for  ( int index = 0; currentIndex < currentIndex; currentIndex++ )  {^556^^^^^541^571^for  ( int currentIndex = 0; currentIndex < index; currentIndex++ )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^node = node.next.next;^557^^^^^542^572^node = node.next;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^node = node;^557^^^^^542^572^node = node.next;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^node = header;^555^^^^^540^570^node = header.next;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^node = header.next.next;^555^^^^^540^570^node = header.next;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^for  ( int size = currentIndex; currentIndex > index; currentIndex-- )  {^562^^^^^547^577^for  ( int currentIndex = size; currentIndex > index; currentIndex-- )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^for  ( int index = size; currentIndex > currentIndex; currentIndex-- )  {^562^^^^^547^577^for  ( int currentIndex = size; currentIndex > index; currentIndex-- )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^node = node.previous.previous;^563^^^^^548^578^node = node.previous;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^node = node;^563^^^^^548^578^node = node.previous;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] getNode [RETURN_TYPE] AbstractLinkedList$Node   final int index final boolean endMarkerAllowed [VARIABLES] LinkedSubList  sub  AbstractLinkedList  parent  boolean  endMarkerAllowed  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^return new LinkedSubListIterator<E> ( fromIndex, subList ) ;^588^^^^^587^589^return new LinkedSubListIterator<E> ( subList, fromIndex ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] createSubListListIterator [RETURN_TYPE] ListIterator   LinkedSubList<E> subList final int fromIndex [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^return new LinkedSubListIterator<E> (  fromIndex ) ;^588^^^^^587^589^return new LinkedSubListIterator<E> ( subList, fromIndex ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] createSubListListIterator [RETURN_TYPE] ListIterator   LinkedSubList<E> subList final int fromIndex [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^return new LinkedSubListIterator<E> ( subList ) ;^588^^^^^587^589^return new LinkedSubListIterator<E> ( subList, fromIndex ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] createSubListListIterator [RETURN_TYPE] ListIterator   LinkedSubList<E> subList final int fromIndex [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^for  ( sizent i = 0; i < i; i++ )  {^623^^^^^620^626^for  ( int i = 0; i < size; i++ )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] doReadObject [RETURN_TYPE] void   ObjectInputStream inputStream [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  ObjectInputStream  inputStream  
[buglab_swap_variables]^if  ( expectedModCount != parent.modCount )  {^800^^^^^799^803^if  ( parent.modCount != expectedModCount )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] checkModCount [RETURN_TYPE] void   [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^if  ( expectedModCount.modCount != parent )  {^800^^^^^799^803^if  ( parent.modCount != expectedModCount )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] checkModCount [RETURN_TYPE] void   [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^return parent.header != next;^820^^^^^819^821^return next != parent.header;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^return next != parent.header.header;^820^^^^^819^821^return next != parent.header;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^next = next;^830^^^^^823^833^next = next.next;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] next [RETURN_TYPE] E   [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^next = next.next.next;^830^^^^^823^833^next = next.next;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] next [RETURN_TYPE] E   [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^return next != parent.header;^836^^^^^835^837^return next.previous != parent.header;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] hasPrevious [RETURN_TYPE] boolean   [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^return next.previous.previous != parent.header;^836^^^^^835^837^return next.previous != parent.header;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] hasPrevious [RETURN_TYPE] boolean   [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^return parent.header != next.previous;^836^^^^^835^837^return next.previous != parent.header;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] hasPrevious [RETURN_TYPE] boolean   [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^return next.previous != parent.header.header;^836^^^^^835^837^return next.previous != parent.header;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] hasPrevious [RETURN_TYPE] boolean   [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^next = next;^844^^^^^839^849^next = next.previous;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^next = next.previous.previous;^844^^^^^839^849^next = next.previous;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^if  ( next == current )  {^862^^^^^860^873^if  ( current == next )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^next = next;^864^^^^^860^873^next = next.next;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^next = next.next.next;^864^^^^^860^873^next = next.next;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^parent.addNodeBefore ( obj, next ) ;^882^^^^^880^886^parent.addNodeBefore ( next, obj ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^parent.addNodeBefore ( next ) ;^882^^^^^880^886^parent.addNodeBefore ( next, obj ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^parent.addNodeBefore (  obj ) ;^882^^^^^880^886^parent.addNodeBefore ( next, obj ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^return nextIndex (  )  < sub;^906^^^^^905^907^return nextIndex (  )  < sub.size;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^return nextIndex (  )  < sub.size.size;^906^^^^^905^907^return nextIndex (  )  < sub.size;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^sub.expectedModCount = parent.modCount.modCount;^922^^^^^920^924^sub.expectedModCount = parent.modCount;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^sub.expectedModCount = parent;^929^^^^^927^931^sub.expectedModCount = parent.modCount;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^sub.expectedModCount = parent.modCount.modCount;^929^^^^^927^931^sub.expectedModCount = parent.modCount;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^rangeCheck ( size, index ) ;^972^^^^^971^975^rangeCheck ( index, size ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] get [RETURN_TYPE] E   final int index [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^rangeCheck (  size ) ;^972^^^^^971^975^rangeCheck ( index, size ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] get [RETURN_TYPE] E   final int index [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^rangeCheck ( index ) ;^972^^^^^971^975^rangeCheck ( index, size ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] get [RETURN_TYPE] E   final int index [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^return index.get ( parent + offset ) ;^974^^^^^971^975^return parent.get ( index + offset ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] get [RETURN_TYPE] E   final int index [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^return offset.get ( index + parent ) ;^974^^^^^971^975^return parent.get ( index + offset ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] get [RETURN_TYPE] E   final int index [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^return parent.get ( offset + index ) ;^974^^^^^971^975^return parent.get ( index + offset ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] get [RETURN_TYPE] E   final int index [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^rangeCheck ( size, index + 1 ) ;^979^^^^^978^985^rangeCheck ( index, size + 1 ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^rangeCheck (  size + 1 ) ;^979^^^^^978^985^rangeCheck ( index, size + 1 ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^rangeCheck ( index + 1 ) ;^979^^^^^978^985^rangeCheck ( index, size + 1 ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^parent.add ( index + offset ) ;^981^^^^^978^985^parent.add ( index + offset, obj ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^parent.add ( index + obj, offset ) ;^981^^^^^978^985^parent.add ( index + offset, obj ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^parent.add ( index +  obj ) ;^981^^^^^978^985^parent.add ( index + offset, obj ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^expectedModCount = parent;^982^^^^^978^985^expectedModCount = parent.modCount;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^expectedModCount = parent.modCount.modCount;^982^^^^^978^985^expectedModCount = parent.modCount;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^rangeCheck ( size, index ) ;^989^^^^^988^996^rangeCheck ( index, size ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^rangeCheck (  size ) ;^989^^^^^988^996^rangeCheck ( index, size ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^rangeCheck ( index ) ;^989^^^^^988^996^rangeCheck ( index, size ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^final E result = parent.remove ( offset + index ) ;^991^^^^^988^996^final E result = parent.remove ( index + offset ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^final E result = index.remove ( parent + offset ) ;^991^^^^^988^996^final E result = parent.remove ( index + offset ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^expectedModCount = parent;^992^^^^^988^996^expectedModCount = parent.modCount;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^expectedModCount = parent.modCount.modCount;^992^^^^^988^996^expectedModCount = parent.modCount;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^return addAll ( coll, size ) ;^1000^^^^^999^1001^return addAll ( size, coll ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> coll [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  Collection  coll  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[buglab_swap_variables]^return addAll ( size ) ;^1000^^^^^999^1001^return addAll ( size, coll ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> coll [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  Collection  coll  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[buglab_swap_variables]^return addAll (  coll ) ;^1000^^^^^999^1001^return addAll ( size, coll ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> coll [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  Collection  coll  int  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[buglab_swap_variables]^rangeCheck ( size, index + 1 ) ;^1005^^^^^1004^1017^rangeCheck ( index, size + 1 ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   final int index Collection<? extends E> coll [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  Collection  coll  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[buglab_swap_variables]^rangeCheck (  size + 1 ) ;^1005^^^^^1004^1017^rangeCheck ( index, size + 1 ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   final int index Collection<? extends E> coll [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  Collection  coll  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[buglab_swap_variables]^rangeCheck ( index + 1 ) ;^1005^^^^^1004^1017^rangeCheck ( index, size + 1 ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   final int index Collection<? extends E> coll [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  Collection  coll  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[buglab_swap_variables]^parent.addAll ( index + offset, coll ) ;^1012^^^^^1004^1017^parent.addAll ( offset + index, coll ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   final int index Collection<? extends E> coll [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  Collection  coll  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[buglab_swap_variables]^parent.addAll ( offset +  coll ) ;^1012^^^^^1004^1017^parent.addAll ( offset + index, coll ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   final int index Collection<? extends E> coll [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  Collection  coll  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[buglab_swap_variables]^parent.addAll ( offset + coll, index ) ;^1012^^^^^1004^1017^parent.addAll ( offset + index, coll ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   final int index Collection<? extends E> coll [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  Collection  coll  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[buglab_swap_variables]^parent.addAll ( offset + index ) ;^1012^^^^^1004^1017^parent.addAll ( offset + index, coll ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   final int index Collection<? extends E> coll [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  Collection  coll  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[buglab_swap_variables]^expectedModCount = parent;^1013^^^^^1004^1017^expectedModCount = parent.modCount;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   final int index Collection<? extends E> coll [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  Collection  coll  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[buglab_swap_variables]^expectedModCount = parent.modCount.modCount;^1013^^^^^1004^1017^expectedModCount = parent.modCount;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   final int index Collection<? extends E> coll [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  Collection  coll  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  
[buglab_swap_variables]^rangeCheck ( size, index ) ;^1021^^^^^1020^1024^rangeCheck ( index, size ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^rangeCheck (  size ) ;^1021^^^^^1020^1024^rangeCheck ( index, size ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^rangeCheck ( index ) ;^1021^^^^^1020^1024^rangeCheck ( index, size ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^return parent.set ( offset + index, obj ) ;^1023^^^^^1020^1024^return parent.set ( index + offset, obj ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^return parent.set ( index + obj, offset ) ;^1023^^^^^1020^1024^return parent.set ( index + offset, obj ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^return parent.set ( index + offset ) ;^1023^^^^^1020^1024^return parent.set ( index + offset, obj ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^return index.set ( parent + offset, obj ) ;^1023^^^^^1020^1024^return parent.set ( index + offset, obj ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^return parent.set ( index +  obj ) ;^1023^^^^^1020^1024^return parent.set ( index + offset, obj ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^return parent.set ( obj + offset, index ) ;^1023^^^^^1020^1024^return parent.set ( index + offset, obj ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^return obj.set ( index + offset, parent ) ;^1023^^^^^1020^1024^return parent.set ( index + offset, obj ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^rangeCheck ( size, index + 1 ) ;^1044^^^^^1043^1047^rangeCheck ( index, size + 1 ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] listIterator [RETURN_TYPE] ListIterator   final int index [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^rangeCheck (  size + 1 ) ;^1044^^^^^1043^1047^rangeCheck ( index, size + 1 ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] listIterator [RETURN_TYPE] ListIterator   final int index [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^rangeCheck ( index + 1 ) ;^1044^^^^^1043^1047^rangeCheck ( index, size + 1 ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] listIterator [RETURN_TYPE] ListIterator   final int index [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^return index.createSubListListIterator ( this, parent ) ;^1046^^^^^1043^1047^return parent.createSubListListIterator ( this, index ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] listIterator [RETURN_TYPE] ListIterator   final int index [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^return parent.createSubListListIterator ( this ) ;^1046^^^^^1043^1047^return parent.createSubListListIterator ( this, index ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] listIterator [RETURN_TYPE] ListIterator   final int index [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^return new LinkedSubList<E> ( parent, offset + fromIndexInclusive, toIndexExclusive + offset ) ;^1051^^^^^1050^1052^return new LinkedSubList<E> ( parent, fromIndexInclusive + offset, toIndexExclusive + offset ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] subList [RETURN_TYPE] List   final int fromIndexInclusive final int toIndexExclusive [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^return new LinkedSubList<E> ( parent + offset, toIndexExclusive + offset ) ;^1051^^^^^1050^1052^return new LinkedSubList<E> ( parent, fromIndexInclusive + offset, toIndexExclusive + offset ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] subList [RETURN_TYPE] List   final int fromIndexInclusive final int toIndexExclusive [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^return new LinkedSubList<E> ( parent, fromIndexInclusive + toIndexExclusive, offset + offset ) ;^1051^^^^^1050^1052^return new LinkedSubList<E> ( parent, fromIndexInclusive + offset, toIndexExclusive + offset ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] subList [RETURN_TYPE] List   final int fromIndexInclusive final int toIndexExclusive [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^return new LinkedSubList<E> ( parent, fromIndexInclusive + offset + offset ) ;^1051^^^^^1050^1052^return new LinkedSubList<E> ( parent, fromIndexInclusive + offset, toIndexExclusive + offset ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] subList [RETURN_TYPE] List   final int fromIndexInclusive final int toIndexExclusive [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^return new LinkedSubList<E> ( offset, fromIndexInclusive + parent, toIndexExclusive + offset ) ;^1051^^^^^1050^1052^return new LinkedSubList<E> ( parent, fromIndexInclusive + offset, toIndexExclusive + offset ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] subList [RETURN_TYPE] List   final int fromIndexInclusive final int toIndexExclusive [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^return new LinkedSubList<E> (  fromIndexInclusive + offset, toIndexExclusive + offset ) ;^1051^^^^^1050^1052^return new LinkedSubList<E> ( parent, fromIndexInclusive + offset, toIndexExclusive + offset ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] subList [RETURN_TYPE] List   final int fromIndexInclusive final int toIndexExclusive [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^return new LinkedSubList<E> ( parent, fromIndexInclusive +  toIndexExclusive + offset ) ;^1051^^^^^1050^1052^return new LinkedSubList<E> ( parent, fromIndexInclusive + offset, toIndexExclusive + offset ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] subList [RETURN_TYPE] List   final int fromIndexInclusive final int toIndexExclusive [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^return new LinkedSubList<E> ( parent, toIndexExclusive + offset, fromIndexInclusive + offset ) ;^1051^^^^^1050^1052^return new LinkedSubList<E> ( parent, fromIndexInclusive + offset, toIndexExclusive + offset ) ;^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] subList [RETURN_TYPE] List   final int fromIndexInclusive final int toIndexExclusive [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^if  ( beyond < 0 || index >= index )  {^1055^^^^^1054^1058^if  ( index < 0 || index >= beyond )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] rangeCheck [RETURN_TYPE] void   final int index final int beyond [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  beyond  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^if  ( expectedModCount != parent.modCount )  {^1061^^^^^1060^1064^if  ( parent.modCount != expectedModCount )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] checkModCount [RETURN_TYPE] void   [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  beyond  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^if  ( parent.modCount.modCount != expectedModCount )  {^1061^^^^^1060^1064^if  ( parent.modCount != expectedModCount )  {^[CLASS] AbstractLinkedList Node LinkedListIterator LinkedSubListIterator LinkedSubList  [METHOD] checkModCount [RETURN_TYPE] void   [VARIABLES] LinkedSubList  sub  subList  AbstractLinkedList  parent  boolean  E  e  o  obj  oldValue  result  value  int  beyond  cSize  currentIndex  expectedModCount  fromIndex  fromIndexInclusive  hashCode  i  index  modCount  nextIndex  offset  size  startIndex  toIndex  toIndexExclusive  Node  current  header  insertBeforeNode  newNode  next  node  nodeToInsert  previous  
[buglab_swap_variables]^this.expectedModCount = parent.modCount.modCount;^787^^^^^783^790^this.expectedModCount = parent.modCount;^[CLASS] LinkedListIterator  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList,int)   AbstractLinkedList<E> parent final int fromIndex [VARIABLES] AbstractLinkedList  parent  boolean  int  expectedModCount  fromIndex  nextIndex  Node  current  next  
[buglab_swap_variables]^this.expectedModCount = parent;^787^^^^^783^790^this.expectedModCount = parent.modCount;^[CLASS] LinkedListIterator  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList,int)   AbstractLinkedList<E> parent final int fromIndex [VARIABLES] AbstractLinkedList  parent  boolean  int  expectedModCount  fromIndex  nextIndex  Node  current  next  
[buglab_swap_variables]^this.next = fromIndex.getNode ( parent, true ) ;^788^^^^^783^790^this.next = parent.getNode ( fromIndex, true ) ;^[CLASS] LinkedListIterator  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList,int)   AbstractLinkedList<E> parent final int fromIndex [VARIABLES] AbstractLinkedList  parent  boolean  int  expectedModCount  fromIndex  nextIndex  Node  current  next  
[buglab_swap_variables]^this.next = parent.getNode (  true ) ;^788^^^^^783^790^this.next = parent.getNode ( fromIndex, true ) ;^[CLASS] LinkedListIterator  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList,int)   AbstractLinkedList<E> parent final int fromIndex [VARIABLES] AbstractLinkedList  parent  boolean  int  expectedModCount  fromIndex  nextIndex  Node  current  next  
[buglab_swap_variables]^if  ( expectedModCount != parent.modCount )  {^800^^^^^799^803^if  ( parent.modCount != expectedModCount )  {^[CLASS] LinkedListIterator  [METHOD] checkModCount [RETURN_TYPE] void   [VARIABLES] AbstractLinkedList  parent  boolean  int  expectedModCount  fromIndex  nextIndex  Node  current  next  
[buglab_swap_variables]^if  ( parent.modCount.modCount != expectedModCount )  {^800^^^^^799^803^if  ( parent.modCount != expectedModCount )  {^[CLASS] LinkedListIterator  [METHOD] checkModCount [RETURN_TYPE] void   [VARIABLES] AbstractLinkedList  parent  boolean  int  expectedModCount  fromIndex  nextIndex  Node  current  next  
[buglab_swap_variables]^if  ( expectedModCount.modCount != parent )  {^800^^^^^799^803^if  ( parent.modCount != expectedModCount )  {^[CLASS] LinkedListIterator  [METHOD] checkModCount [RETURN_TYPE] void   [VARIABLES] AbstractLinkedList  parent  boolean  int  expectedModCount  fromIndex  nextIndex  Node  current  next  
[buglab_swap_variables]^return parent.header != next;^820^^^^^819^821^return next != parent.header;^[CLASS] LinkedListIterator  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] AbstractLinkedList  parent  boolean  int  expectedModCount  fromIndex  nextIndex  Node  current  next  
[buglab_swap_variables]^return next != parent.header.header;^820^^^^^819^821^return next != parent.header;^[CLASS] LinkedListIterator  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] AbstractLinkedList  parent  boolean  int  expectedModCount  fromIndex  nextIndex  Node  current  next  
[buglab_swap_variables]^next = next;^830^^^^^823^833^next = next.next;^[CLASS] LinkedListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  nextIndex  Node  current  next  
[buglab_swap_variables]^next = next.next.next;^830^^^^^823^833^next = next.next;^[CLASS] LinkedListIterator  [METHOD] next [RETURN_TYPE] E   [VARIABLES] AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  nextIndex  Node  current  next  
[buglab_swap_variables]^return parent != next.previous.header;^836^^^^^835^837^return next.previous != parent.header;^[CLASS] LinkedListIterator  [METHOD] hasPrevious [RETURN_TYPE] boolean   [VARIABLES] AbstractLinkedList  parent  boolean  int  expectedModCount  fromIndex  nextIndex  Node  current  next  
[buglab_swap_variables]^return parent.header.previous != next;^836^^^^^835^837^return next.previous != parent.header;^[CLASS] LinkedListIterator  [METHOD] hasPrevious [RETURN_TYPE] boolean   [VARIABLES] AbstractLinkedList  parent  boolean  int  expectedModCount  fromIndex  nextIndex  Node  current  next  
[buglab_swap_variables]^return next.previous != parent;^836^^^^^835^837^return next.previous != parent.header;^[CLASS] LinkedListIterator  [METHOD] hasPrevious [RETURN_TYPE] boolean   [VARIABLES] AbstractLinkedList  parent  boolean  int  expectedModCount  fromIndex  nextIndex  Node  current  next  
[buglab_swap_variables]^return parent.previous != next.header;^836^^^^^835^837^return next.previous != parent.header;^[CLASS] LinkedListIterator  [METHOD] hasPrevious [RETURN_TYPE] boolean   [VARIABLES] AbstractLinkedList  parent  boolean  int  expectedModCount  fromIndex  nextIndex  Node  current  next  
[buglab_swap_variables]^next = next;^844^^^^^839^849^next = next.previous;^[CLASS] LinkedListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  nextIndex  Node  current  next  
[buglab_swap_variables]^next = next.previous.previous;^844^^^^^839^849^next = next.previous;^[CLASS] LinkedListIterator  [METHOD] previous [RETURN_TYPE] E   [VARIABLES] AbstractLinkedList  parent  boolean  E  value  int  expectedModCount  fromIndex  nextIndex  Node  current  next  
[buglab_swap_variables]^next = next;^864^^^^^860^873^next = next.next;^[CLASS] LinkedListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AbstractLinkedList  parent  boolean  int  expectedModCount  fromIndex  nextIndex  Node  current  next  
[buglab_swap_variables]^next = next.next.next;^864^^^^^860^873^next = next.next;^[CLASS] LinkedListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] AbstractLinkedList  parent  boolean  int  expectedModCount  fromIndex  nextIndex  Node  current  next  
[buglab_swap_variables]^parent.addNodeBefore ( obj, next ) ;^882^^^^^880^886^parent.addNodeBefore ( next, obj ) ;^[CLASS] LinkedListIterator  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] AbstractLinkedList  parent  boolean  E  obj  int  expectedModCount  fromIndex  nextIndex  Node  current  next  
[buglab_swap_variables]^parent.addNodeBefore ( next ) ;^882^^^^^880^886^parent.addNodeBefore ( next, obj ) ;^[CLASS] LinkedListIterator  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] AbstractLinkedList  parent  boolean  E  obj  int  expectedModCount  fromIndex  nextIndex  Node  current  next  
[buglab_swap_variables]^parent.addNodeBefore (  obj ) ;^882^^^^^880^886^parent.addNodeBefore ( next, obj ) ;^[CLASS] LinkedListIterator  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] AbstractLinkedList  parent  boolean  E  obj  int  expectedModCount  fromIndex  nextIndex  Node  current  next  
[buglab_swap_variables]^super ( startIndex.parent, sub + sub.offset ) ;^900^^^^^899^902^super ( sub.parent, startIndex + sub.offset ) ;^[CLASS] LinkedSubListIterator  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList$LinkedSubList,int)   LinkedSubList<E> sub final int startIndex [VARIABLES] LinkedSubList  sub  int  startIndex  boolean  
[buglab_swap_variables]^super ( sub.parent + sub.offset ) ;^900^^^^^899^902^super ( sub.parent, startIndex + sub.offset ) ;^[CLASS] LinkedSubListIterator  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList$LinkedSubList,int)   LinkedSubList<E> sub final int startIndex [VARIABLES] LinkedSubList  sub  int  startIndex  boolean  
[buglab_swap_variables]^super ( startIndex, sub.parent + sub.offset ) ;^900^^^^^899^902^super ( sub.parent, startIndex + sub.offset ) ;^[CLASS] LinkedSubListIterator  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList$LinkedSubList,int)   LinkedSubList<E> sub final int startIndex [VARIABLES] LinkedSubList  sub  int  startIndex  boolean  
[buglab_swap_variables]^super (  startIndex + sub.offset ) ;^900^^^^^899^902^super ( sub.parent, startIndex + sub.offset ) ;^[CLASS] LinkedSubListIterator  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList$LinkedSubList,int)   LinkedSubList<E> sub final int startIndex [VARIABLES] LinkedSubList  sub  int  startIndex  boolean  
[buglab_swap_variables]^super ( sub.parent, sub.offset + startIndex ) ;^900^^^^^899^902^super ( sub.parent, startIndex + sub.offset ) ;^[CLASS] LinkedSubListIterator  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList$LinkedSubList,int)   LinkedSubList<E> sub final int startIndex [VARIABLES] LinkedSubList  sub  int  startIndex  boolean  
[buglab_swap_variables]^return nextIndex (  )  < sub;^906^^^^^905^907^return nextIndex (  )  < sub.size;^[CLASS] LinkedSubListIterator  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] LinkedSubList  sub  boolean  
[buglab_swap_variables]^return nextIndex (  )  < sub.size.size;^906^^^^^905^907^return nextIndex (  )  < sub.size;^[CLASS] LinkedSubListIterator  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] LinkedSubList  sub  boolean  
[buglab_swap_variables]^sub.expectedModCount = parent.modCount.modCount;^922^^^^^920^924^sub.expectedModCount = parent.modCount;^[CLASS] LinkedSubListIterator  [METHOD] add [RETURN_TYPE] void   final E obj [VARIABLES] LinkedSubList  sub  E  obj  boolean  
[buglab_swap_variables]^sub.expectedModCount = parent.modCount.modCount;^929^^^^^927^931^sub.expectedModCount = parent.modCount;^[CLASS] LinkedSubListIterator  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] LinkedSubList  sub  boolean  
[buglab_swap_variables]^if  ( parent > toIndex.size (  )  )  {^952^^^^^948^962^if  ( toIndex > parent.size (  )  )  {^[CLASS] LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList,int,int)   AbstractLinkedList<E> parent final int fromIndex final int toIndex [VARIABLES] AbstractLinkedList  parent  int  expectedModCount  fromIndex  offset  size  toIndex  boolean  
[buglab_swap_variables]^if  ( toIndex > fromIndex )  {^955^^^^^948^962^if  ( fromIndex > toIndex )  {^[CLASS] LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList,int,int)   AbstractLinkedList<E> parent final int fromIndex final int toIndex [VARIABLES] AbstractLinkedList  parent  int  expectedModCount  fromIndex  offset  size  toIndex  boolean  
[buglab_swap_variables]^this.size = fromIndex - toIndex;^960^^^^^948^962^this.size = toIndex - fromIndex;^[CLASS] LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList,int,int)   AbstractLinkedList<E> parent final int fromIndex final int toIndex [VARIABLES] AbstractLinkedList  parent  int  expectedModCount  fromIndex  offset  size  toIndex  boolean  
[buglab_swap_variables]^this.expectedModCount = parent.modCount.modCount;^961^^^^^948^962^this.expectedModCount = parent.modCount;^[CLASS] LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList,int,int)   AbstractLinkedList<E> parent final int fromIndex final int toIndex [VARIABLES] AbstractLinkedList  parent  int  expectedModCount  fromIndex  offset  size  toIndex  boolean  
[buglab_swap_variables]^this.expectedModCount = parent;^961^^^^^948^962^this.expectedModCount = parent.modCount;^[CLASS] LinkedSubList  [METHOD] <init> [RETURN_TYPE] AbstractLinkedList,int,int)   AbstractLinkedList<E> parent final int fromIndex final int toIndex [VARIABLES] AbstractLinkedList  parent  int  expectedModCount  fromIndex  offset  size  toIndex  boolean  
[buglab_swap_variables]^rangeCheck ( size, index ) ;^972^^^^^971^975^rangeCheck ( index, size ) ;^[CLASS] LinkedSubList  [METHOD] get [RETURN_TYPE] E   final int index [VARIABLES] AbstractLinkedList  parent  int  expectedModCount  fromIndex  index  offset  size  toIndex  boolean  
[buglab_swap_variables]^rangeCheck (  size ) ;^972^^^^^971^975^rangeCheck ( index, size ) ;^[CLASS] LinkedSubList  [METHOD] get [RETURN_TYPE] E   final int index [VARIABLES] AbstractLinkedList  parent  int  expectedModCount  fromIndex  index  offset  size  toIndex  boolean  
[buglab_swap_variables]^rangeCheck ( index ) ;^972^^^^^971^975^rangeCheck ( index, size ) ;^[CLASS] LinkedSubList  [METHOD] get [RETURN_TYPE] E   final int index [VARIABLES] AbstractLinkedList  parent  int  expectedModCount  fromIndex  index  offset  size  toIndex  boolean  
[buglab_swap_variables]^return parent.get ( offset + index ) ;^974^^^^^971^975^return parent.get ( index + offset ) ;^[CLASS] LinkedSubList  [METHOD] get [RETURN_TYPE] E   final int index [VARIABLES] AbstractLinkedList  parent  int  expectedModCount  fromIndex  index  offset  size  toIndex  boolean  
[buglab_swap_variables]^return offset.get ( index + parent ) ;^974^^^^^971^975^return parent.get ( index + offset ) ;^[CLASS] LinkedSubList  [METHOD] get [RETURN_TYPE] E   final int index [VARIABLES] AbstractLinkedList  parent  int  expectedModCount  fromIndex  index  offset  size  toIndex  boolean  
[buglab_swap_variables]^return index.get ( parent + offset ) ;^974^^^^^971^975^return parent.get ( index + offset ) ;^[CLASS] LinkedSubList  [METHOD] get [RETURN_TYPE] E   final int index [VARIABLES] AbstractLinkedList  parent  int  expectedModCount  fromIndex  index  offset  size  toIndex  boolean  
[buglab_swap_variables]^rangeCheck ( size, index + 1 ) ;^979^^^^^978^985^rangeCheck ( index, size + 1 ) ;^[CLASS] LinkedSubList  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AbstractLinkedList  parent  boolean  E  obj  int  expectedModCount  fromIndex  index  offset  size  toIndex  
[buglab_swap_variables]^rangeCheck (  size + 1 ) ;^979^^^^^978^985^rangeCheck ( index, size + 1 ) ;^[CLASS] LinkedSubList  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AbstractLinkedList  parent  boolean  E  obj  int  expectedModCount  fromIndex  index  offset  size  toIndex  
[buglab_swap_variables]^rangeCheck ( index + 1 ) ;^979^^^^^978^985^rangeCheck ( index, size + 1 ) ;^[CLASS] LinkedSubList  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AbstractLinkedList  parent  boolean  E  obj  int  expectedModCount  fromIndex  index  offset  size  toIndex  
[buglab_swap_variables]^parent.add ( offset + index, obj ) ;^981^^^^^978^985^parent.add ( index + offset, obj ) ;^[CLASS] LinkedSubList  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AbstractLinkedList  parent  boolean  E  obj  int  expectedModCount  fromIndex  index  offset  size  toIndex  
[buglab_swap_variables]^parent.add ( obj + offset, index ) ;^981^^^^^978^985^parent.add ( index + offset, obj ) ;^[CLASS] LinkedSubList  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AbstractLinkedList  parent  boolean  E  obj  int  expectedModCount  fromIndex  index  offset  size  toIndex  
[buglab_swap_variables]^parent.add ( index + offset ) ;^981^^^^^978^985^parent.add ( index + offset, obj ) ;^[CLASS] LinkedSubList  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AbstractLinkedList  parent  boolean  E  obj  int  expectedModCount  fromIndex  index  offset  size  toIndex  
[buglab_swap_variables]^parent.add ( index +  obj ) ;^981^^^^^978^985^parent.add ( index + offset, obj ) ;^[CLASS] LinkedSubList  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AbstractLinkedList  parent  boolean  E  obj  int  expectedModCount  fromIndex  index  offset  size  toIndex  
[buglab_swap_variables]^expectedModCount = parent;^982^^^^^978^985^expectedModCount = parent.modCount;^[CLASS] LinkedSubList  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AbstractLinkedList  parent  boolean  E  obj  int  expectedModCount  fromIndex  index  offset  size  toIndex  
[buglab_swap_variables]^expectedModCount = parent.modCount.modCount;^982^^^^^978^985^expectedModCount = parent.modCount;^[CLASS] LinkedSubList  [METHOD] add [RETURN_TYPE] void   final int index final E obj [VARIABLES] AbstractLinkedList  parent  boolean  E  obj  int  expectedModCount  fromIndex  index  offset  size  toIndex  
[buglab_swap_variables]^rangeCheck ( size, index ) ;^989^^^^^988^996^rangeCheck ( index, size ) ;^[CLASS] LinkedSubList  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] AbstractLinkedList  parent  boolean  E  result  int  expectedModCount  fromIndex  index  offset  size  toIndex  
[buglab_swap_variables]^rangeCheck (  size ) ;^989^^^^^988^996^rangeCheck ( index, size ) ;^[CLASS] LinkedSubList  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] AbstractLinkedList  parent  boolean  E  result  int  expectedModCount  fromIndex  index  offset  size  toIndex  
[buglab_swap_variables]^rangeCheck ( index ) ;^989^^^^^988^996^rangeCheck ( index, size ) ;^[CLASS] LinkedSubList  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] AbstractLinkedList  parent  boolean  E  result  int  expectedModCount  fromIndex  index  offset  size  toIndex  
[buglab_swap_variables]^final E result = parent.remove ( offset + index ) ;^991^^^^^988^996^final E result = parent.remove ( index + offset ) ;^[CLASS] LinkedSubList  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] AbstractLinkedList  parent  boolean  E  result  int  expectedModCount  fromIndex  index  offset  size  toIndex  
[buglab_swap_variables]^final E result = offset.remove ( index + parent ) ;^991^^^^^988^996^final E result = parent.remove ( index + offset ) ;^[CLASS] LinkedSubList  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] AbstractLinkedList  parent  boolean  E  result  int  expectedModCount  fromIndex  index  offset  size  toIndex  
[buglab_swap_variables]^expectedModCount = parent;^992^^^^^988^996^expectedModCount = parent.modCount;^[CLASS] LinkedSubList  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] AbstractLinkedList  parent  boolean  E  result  int  expectedModCount  fromIndex  index  offset  size  toIndex  
[buglab_swap_variables]^expectedModCount = parent.modCount.modCount;^992^^^^^988^996^expectedModCount = parent.modCount;^[CLASS] LinkedSubList  [METHOD] remove [RETURN_TYPE] E   final int index [VARIABLES] AbstractLinkedList  parent  boolean  E  result  int  expectedModCount  fromIndex  index  offset  size  toIndex  
[buglab_swap_variables]^return addAll ( coll, size ) ;^1000^^^^^999^1001^return addAll ( size, coll ) ;^[CLASS] LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> coll [VARIABLES] Collection  coll  AbstractLinkedList  parent  boolean  int  expectedModCount  fromIndex  index  offset  size  toIndex  
[buglab_swap_variables]^return addAll ( size ) ;^1000^^^^^999^1001^return addAll ( size, coll ) ;^[CLASS] LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> coll [VARIABLES] Collection  coll  AbstractLinkedList  parent  boolean  int  expectedModCount  fromIndex  index  offset  size  toIndex  
[buglab_swap_variables]^return addAll (  coll ) ;^1000^^^^^999^1001^return addAll ( size, coll ) ;^[CLASS] LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   Collection<? extends E> coll [VARIABLES] Collection  coll  AbstractLinkedList  parent  boolean  int  expectedModCount  fromIndex  index  offset  size  toIndex  
[buglab_swap_variables]^rangeCheck ( size, index + 1 ) ;^1005^^^^^1004^1017^rangeCheck ( index, size + 1 ) ;^[CLASS] LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   final int index Collection<? extends E> coll [VARIABLES] Collection  coll  AbstractLinkedList  parent  boolean  int  cSize  expectedModCount  fromIndex  index  offset  size  toIndex  
[buglab_swap_variables]^rangeCheck (  size + 1 ) ;^1005^^^^^1004^1017^rangeCheck ( index, size + 1 ) ;^[CLASS] LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   final int index Collection<? extends E> coll [VARIABLES] Collection  coll  AbstractLinkedList  parent  boolean  int  cSize  expectedModCount  fromIndex  index  offset  size  toIndex  
[buglab_swap_variables]^rangeCheck ( index + 1 ) ;^1005^^^^^1004^1017^rangeCheck ( index, size + 1 ) ;^[CLASS] LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   final int index Collection<? extends E> coll [VARIABLES] Collection  coll  AbstractLinkedList  parent  boolean  int  cSize  expectedModCount  fromIndex  index  offset  size  toIndex  
[buglab_swap_variables]^parent.addAll ( offset +  coll ) ;^1012^^^^^1004^1017^parent.addAll ( offset + index, coll ) ;^[CLASS] LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   final int index Collection<? extends E> coll [VARIABLES] Collection  coll  AbstractLinkedList  parent  boolean  int  cSize  expectedModCount  fromIndex  index  offset  size  toIndex  
[buglab_swap_variables]^parent.addAll ( coll + index, offset ) ;^1012^^^^^1004^1017^parent.addAll ( offset + index, coll ) ;^[CLASS] LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   final int index Collection<? extends E> coll [VARIABLES] Collection  coll  AbstractLinkedList  parent  boolean  int  cSize  expectedModCount  fromIndex  index  offset  size  toIndex  
[buglab_swap_variables]^parent.addAll ( offset + index ) ;^1012^^^^^1004^1017^parent.addAll ( offset + index, coll ) ;^[CLASS] LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   final int index Collection<? extends E> coll [VARIABLES] Collection  coll  AbstractLinkedList  parent  boolean  int  cSize  expectedModCount  fromIndex  index  offset  size  toIndex  
[buglab_swap_variables]^parent.addAll ( index + offset, coll ) ;^1012^^^^^1004^1017^parent.addAll ( offset + index, coll ) ;^[CLASS] LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   final int index Collection<? extends E> coll [VARIABLES] Collection  coll  AbstractLinkedList  parent  boolean  int  cSize  expectedModCount  fromIndex  index  offset  size  toIndex  
[buglab_swap_variables]^expectedModCount = parent;^1013^^^^^1004^1017^expectedModCount = parent.modCount;^[CLASS] LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   final int index Collection<? extends E> coll [VARIABLES] Collection  coll  AbstractLinkedList  parent  boolean  int  cSize  expectedModCount  fromIndex  index  offset  size  toIndex  
[buglab_swap_variables]^expectedModCount = parent.modCount.modCount;^1013^^^^^1004^1017^expectedModCount = parent.modCount;^[CLASS] LinkedSubList  [METHOD] addAll [RETURN_TYPE] boolean   final int index Collection<? extends E> coll [VARIABLES] Collection  coll  AbstractLinkedList  parent  boolean  int  cSize  expectedModCount  fromIndex  index  offset  size  toIndex  
[buglab_swap_variables]^rangeCheck ( size, index ) ;^1021^^^^^1020^1024^rangeCheck ( index, size ) ;^[CLASS] LinkedSubList  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AbstractLinkedList  parent  boolean  E  obj  int  cSize  expectedModCount  fromIndex  index  offset  size  toIndex  
[buglab_swap_variables]^rangeCheck (  size ) ;^1021^^^^^1020^1024^rangeCheck ( index, size ) ;^[CLASS] LinkedSubList  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AbstractLinkedList  parent  boolean  E  obj  int  cSize  expectedModCount  fromIndex  index  offset  size  toIndex  
[buglab_swap_variables]^rangeCheck ( index ) ;^1021^^^^^1020^1024^rangeCheck ( index, size ) ;^[CLASS] LinkedSubList  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AbstractLinkedList  parent  boolean  E  obj  int  cSize  expectedModCount  fromIndex  index  offset  size  toIndex  
[buglab_swap_variables]^return parent.set ( offset + index, obj ) ;^1023^^^^^1020^1024^return parent.set ( index + offset, obj ) ;^[CLASS] LinkedSubList  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AbstractLinkedList  parent  boolean  E  obj  int  cSize  expectedModCount  fromIndex  index  offset  size  toIndex  
[buglab_swap_variables]^return parent.set ( index + obj, offset ) ;^1023^^^^^1020^1024^return parent.set ( index + offset, obj ) ;^[CLASS] LinkedSubList  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AbstractLinkedList  parent  boolean  E  obj  int  cSize  expectedModCount  fromIndex  index  offset  size  toIndex  
[buglab_swap_variables]^return parent.set ( index + offset ) ;^1023^^^^^1020^1024^return parent.set ( index + offset, obj ) ;^[CLASS] LinkedSubList  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AbstractLinkedList  parent  boolean  E  obj  int  cSize  expectedModCount  fromIndex  index  offset  size  toIndex  
[buglab_swap_variables]^return index.set ( parent + offset, obj ) ;^1023^^^^^1020^1024^return parent.set ( index + offset, obj ) ;^[CLASS] LinkedSubList  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AbstractLinkedList  parent  boolean  E  obj  int  cSize  expectedModCount  fromIndex  index  offset  size  toIndex  
[buglab_swap_variables]^return parent.set ( index +  obj ) ;^1023^^^^^1020^1024^return parent.set ( index + offset, obj ) ;^[CLASS] LinkedSubList  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AbstractLinkedList  parent  boolean  E  obj  int  cSize  expectedModCount  fromIndex  index  offset  size  toIndex  
[buglab_swap_variables]^return obj.set ( index + offset, parent ) ;^1023^^^^^1020^1024^return parent.set ( index + offset, obj ) ;^[CLASS] LinkedSubList  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AbstractLinkedList  parent  boolean  E  obj  int  cSize  expectedModCount  fromIndex  index  offset  size  toIndex  
[buglab_swap_variables]^return offset.set ( index + parent, obj ) ;^1023^^^^^1020^1024^return parent.set ( index + offset, obj ) ;^[CLASS] LinkedSubList  [METHOD] set [RETURN_TYPE] E   final int index final E obj [VARIABLES] AbstractLinkedList  parent  boolean  E  obj  int  cSize  expectedModCount  fromIndex  index  offset  size  toIndex  
[buglab_swap_variables]^rangeCheck ( size, index + 1 ) ;^1044^^^^^1043^1047^rangeCheck ( index, size + 1 ) ;^[CLASS] LinkedSubList  [METHOD] listIterator [RETURN_TYPE] ListIterator   final int index [VARIABLES] AbstractLinkedList  parent  int  cSize  expectedModCount  fromIndex  index  offset  size  toIndex  boolean  
[buglab_swap_variables]^rangeCheck (  size + 1 ) ;^1044^^^^^1043^1047^rangeCheck ( index, size + 1 ) ;^[CLASS] LinkedSubList  [METHOD] listIterator [RETURN_TYPE] ListIterator   final int index [VARIABLES] AbstractLinkedList  parent  int  cSize  expectedModCount  fromIndex  index  offset  size  toIndex  boolean  
[buglab_swap_variables]^rangeCheck ( index + 1 ) ;^1044^^^^^1043^1047^rangeCheck ( index, size + 1 ) ;^[CLASS] LinkedSubList  [METHOD] listIterator [RETURN_TYPE] ListIterator   final int index [VARIABLES] AbstractLinkedList  parent  int  cSize  expectedModCount  fromIndex  index  offset  size  toIndex  boolean  
[buglab_swap_variables]^return index.createSubListListIterator ( this, parent ) ;^1046^^^^^1043^1047^return parent.createSubListListIterator ( this, index ) ;^[CLASS] LinkedSubList  [METHOD] listIterator [RETURN_TYPE] ListIterator   final int index [VARIABLES] AbstractLinkedList  parent  int  cSize  expectedModCount  fromIndex  index  offset  size  toIndex  boolean  
[buglab_swap_variables]^return parent.createSubListListIterator ( this ) ;^1046^^^^^1043^1047^return parent.createSubListListIterator ( this, index ) ;^[CLASS] LinkedSubList  [METHOD] listIterator [RETURN_TYPE] ListIterator   final int index [VARIABLES] AbstractLinkedList  parent  int  cSize  expectedModCount  fromIndex  index  offset  size  toIndex  boolean  
[buglab_swap_variables]^return new LinkedSubList<E> ( parent, toIndexExclusive + offset, fromIndexInclusive + offset ) ;^1051^^^^^1050^1052^return new LinkedSubList<E> ( parent, fromIndexInclusive + offset, toIndexExclusive + offset ) ;^[CLASS] LinkedSubList  [METHOD] subList [RETURN_TYPE] List   final int fromIndexInclusive final int toIndexExclusive [VARIABLES] AbstractLinkedList  parent  int  cSize  expectedModCount  fromIndex  fromIndexInclusive  index  offset  size  toIndex  toIndexExclusive  boolean  
[buglab_swap_variables]^return new LinkedSubList<E> ( parent + offset, toIndexExclusive + offset ) ;^1051^^^^^1050^1052^return new LinkedSubList<E> ( parent, fromIndexInclusive + offset, toIndexExclusive + offset ) ;^[CLASS] LinkedSubList  [METHOD] subList [RETURN_TYPE] List   final int fromIndexInclusive final int toIndexExclusive [VARIABLES] AbstractLinkedList  parent  int  cSize  expectedModCount  fromIndex  fromIndexInclusive  index  offset  size  toIndex  toIndexExclusive  boolean  
[buglab_swap_variables]^return new LinkedSubList<E> ( parent, fromIndexInclusive + toIndexExclusive, offset + offset ) ;^1051^^^^^1050^1052^return new LinkedSubList<E> ( parent, fromIndexInclusive + offset, toIndexExclusive + offset ) ;^[CLASS] LinkedSubList  [METHOD] subList [RETURN_TYPE] List   final int fromIndexInclusive final int toIndexExclusive [VARIABLES] AbstractLinkedList  parent  int  cSize  expectedModCount  fromIndex  fromIndexInclusive  index  offset  size  toIndex  toIndexExclusive  boolean  
[buglab_swap_variables]^return new LinkedSubList<E> ( parent, fromIndexInclusive + offset + offset ) ;^1051^^^^^1050^1052^return new LinkedSubList<E> ( parent, fromIndexInclusive + offset, toIndexExclusive + offset ) ;^[CLASS] LinkedSubList  [METHOD] subList [RETURN_TYPE] List   final int fromIndexInclusive final int toIndexExclusive [VARIABLES] AbstractLinkedList  parent  int  cSize  expectedModCount  fromIndex  fromIndexInclusive  index  offset  size  toIndex  toIndexExclusive  boolean  
[buglab_swap_variables]^return new LinkedSubList<E> ( fromIndexInclusive, parent + offset, toIndexExclusive + offset ) ;^1051^^^^^1050^1052^return new LinkedSubList<E> ( parent, fromIndexInclusive + offset, toIndexExclusive + offset ) ;^[CLASS] LinkedSubList  [METHOD] subList [RETURN_TYPE] List   final int fromIndexInclusive final int toIndexExclusive [VARIABLES] AbstractLinkedList  parent  int  cSize  expectedModCount  fromIndex  fromIndexInclusive  index  offset  size  toIndex  toIndexExclusive  boolean  
[buglab_swap_variables]^return new LinkedSubList<E> (  fromIndexInclusive + offset, toIndexExclusive + offset ) ;^1051^^^^^1050^1052^return new LinkedSubList<E> ( parent, fromIndexInclusive + offset, toIndexExclusive + offset ) ;^[CLASS] LinkedSubList  [METHOD] subList [RETURN_TYPE] List   final int fromIndexInclusive final int toIndexExclusive [VARIABLES] AbstractLinkedList  parent  int  cSize  expectedModCount  fromIndex  fromIndexInclusive  index  offset  size  toIndex  toIndexExclusive  boolean  
[buglab_swap_variables]^return new LinkedSubList<E> ( parent, offset + fromIndexInclusive, toIndexExclusive + offset ) ;^1051^^^^^1050^1052^return new LinkedSubList<E> ( parent, fromIndexInclusive + offset, toIndexExclusive + offset ) ;^[CLASS] LinkedSubList  [METHOD] subList [RETURN_TYPE] List   final int fromIndexInclusive final int toIndexExclusive [VARIABLES] AbstractLinkedList  parent  int  cSize  expectedModCount  fromIndex  fromIndexInclusive  index  offset  size  toIndex  toIndexExclusive  boolean  
[buglab_swap_variables]^return new LinkedSubList<E> ( parent, fromIndexInclusive +  toIndexExclusive + offset ) ;^1051^^^^^1050^1052^return new LinkedSubList<E> ( parent, fromIndexInclusive + offset, toIndexExclusive + offset ) ;^[CLASS] LinkedSubList  [METHOD] subList [RETURN_TYPE] List   final int fromIndexInclusive final int toIndexExclusive [VARIABLES] AbstractLinkedList  parent  int  cSize  expectedModCount  fromIndex  fromIndexInclusive  index  offset  size  toIndex  toIndexExclusive  boolean  
[buglab_swap_variables]^return new LinkedSubList<E> ( offset, fromIndexInclusive + parent, toIndexExclusive + offset ) ;^1051^^^^^1050^1052^return new LinkedSubList<E> ( parent, fromIndexInclusive + offset, toIndexExclusive + offset ) ;^[CLASS] LinkedSubList  [METHOD] subList [RETURN_TYPE] List   final int fromIndexInclusive final int toIndexExclusive [VARIABLES] AbstractLinkedList  parent  int  cSize  expectedModCount  fromIndex  fromIndexInclusive  index  offset  size  toIndex  toIndexExclusive  boolean  
[buglab_swap_variables]^if  ( expectedModCount != parent.modCount )  {^1061^^^^^1060^1064^if  ( parent.modCount != expectedModCount )  {^[CLASS] LinkedSubList  [METHOD] checkModCount [RETURN_TYPE] void   [VARIABLES] AbstractLinkedList  parent  int  beyond  cSize  expectedModCount  fromIndex  fromIndexInclusive  index  offset  size  toIndex  toIndexExclusive  boolean  
[buglab_swap_variables]^if  ( expectedModCount.modCount != parent )  {^1061^^^^^1060^1064^if  ( parent.modCount != expectedModCount )  {^[CLASS] LinkedSubList  [METHOD] checkModCount [RETURN_TYPE] void   [VARIABLES] AbstractLinkedList  parent  int  beyond  cSize  expectedModCount  fromIndex  fromIndexInclusive  index  offset  size  toIndex  toIndexExclusive  boolean  
