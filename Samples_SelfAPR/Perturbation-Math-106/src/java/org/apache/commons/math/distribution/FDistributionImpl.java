[P1_Replace_Type]^private static final  short  serialVersionUID = -8516354193418641566L;^34^^^^^29^39^private static final long serialVersionUID = -8516354193418641566L;^[CLASS] FDistributionImpl   [VARIABLES] 
[P8_Replace_Mix]^private  final  short  serialVersionUID = -8516354193418641566;^34^^^^^29^39^private static final long serialVersionUID = -8516354193418641566L;^[CLASS] FDistributionImpl   [VARIABLES] 
[P1_Replace_Type]^private float numeratorDegreesOfFreedom;^37^^^^^32^42^private double numeratorDegreesOfFreedom;^[CLASS] FDistributionImpl   [VARIABLES] 
[P8_Replace_Mix]^private int numeratorDegreesOfFreedom;^37^^^^^32^42^private double numeratorDegreesOfFreedom;^[CLASS] FDistributionImpl   [VARIABLES] 
[P1_Replace_Type]^private int denominatorDegreesOfFreedom;^40^^^^^35^45^private double denominatorDegreesOfFreedom;^[CLASS] FDistributionImpl   [VARIABLES] 
[P14_Delete_Statement]^^49^50^^^^47^52^super (  ) ; setNumeratorDegreesOfFreedom ( numeratorDegreesOfFreedom ) ;^[CLASS] FDistributionImpl  [METHOD] <init> [RETURN_TYPE] FDistributionImpl(double,double)   double numeratorDegreesOfFreedom double denominatorDegreesOfFreedom [VARIABLES] double  denominatorDegreesOfFreedom  numeratorDegreesOfFreedom  long  serialVersionUID  boolean  
[P5_Replace_Variable]^setNumeratorDegreesOfFreedom ( denominatorDegreesOfFreedom ) ;^50^^^^^47^52^setNumeratorDegreesOfFreedom ( numeratorDegreesOfFreedom ) ;^[CLASS] FDistributionImpl  [METHOD] <init> [RETURN_TYPE] FDistributionImpl(double,double)   double numeratorDegreesOfFreedom double denominatorDegreesOfFreedom [VARIABLES] double  denominatorDegreesOfFreedom  numeratorDegreesOfFreedom  long  serialVersionUID  boolean  
[P7_Replace_Invocation]^setDenominatorDegreesOfFreedom ( numeratorDegreesOfFreedom ) ;^50^^^^^47^52^setNumeratorDegreesOfFreedom ( numeratorDegreesOfFreedom ) ;^[CLASS] FDistributionImpl  [METHOD] <init> [RETURN_TYPE] FDistributionImpl(double,double)   double numeratorDegreesOfFreedom double denominatorDegreesOfFreedom [VARIABLES] double  denominatorDegreesOfFreedom  numeratorDegreesOfFreedom  long  serialVersionUID  boolean  
[P14_Delete_Statement]^^50^51^^^^47^52^setNumeratorDegreesOfFreedom ( numeratorDegreesOfFreedom ) ; setDenominatorDegreesOfFreedom ( denominatorDegreesOfFreedom ) ;^[CLASS] FDistributionImpl  [METHOD] <init> [RETURN_TYPE] FDistributionImpl(double,double)   double numeratorDegreesOfFreedom double denominatorDegreesOfFreedom [VARIABLES] double  denominatorDegreesOfFreedom  numeratorDegreesOfFreedom  long  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^return getDenominatorDegreesOfFreedom (  )  / ( getDenominatorDegreesOfFreedom (  )  - 2.0 ) ;setNumeratorDegreesOfFreedom ( numeratorDegreesOfFreedom ) ;^50^^^^^47^52^setNumeratorDegreesOfFreedom ( numeratorDegreesOfFreedom ) ;^[CLASS] FDistributionImpl  [METHOD] <init> [RETURN_TYPE] FDistributionImpl(double,double)   double numeratorDegreesOfFreedom double denominatorDegreesOfFreedom [VARIABLES] double  denominatorDegreesOfFreedom  numeratorDegreesOfFreedom  long  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^setDenominatorDegreesOfFreedom ( denominatorDegreesOfFreedom ) ;setNumeratorDegreesOfFreedom ( numeratorDegreesOfFreedom ) ;^50^^^^^47^52^setNumeratorDegreesOfFreedom ( numeratorDegreesOfFreedom ) ;^[CLASS] FDistributionImpl  [METHOD] <init> [RETURN_TYPE] FDistributionImpl(double,double)   double numeratorDegreesOfFreedom double denominatorDegreesOfFreedom [VARIABLES] double  denominatorDegreesOfFreedom  numeratorDegreesOfFreedom  long  serialVersionUID  boolean  
[P5_Replace_Variable]^setDenominatorDegreesOfFreedom ( numeratorDegreesOfFreedom ) ;^51^^^^^47^52^setDenominatorDegreesOfFreedom ( denominatorDegreesOfFreedom ) ;^[CLASS] FDistributionImpl  [METHOD] <init> [RETURN_TYPE] FDistributionImpl(double,double)   double numeratorDegreesOfFreedom double denominatorDegreesOfFreedom [VARIABLES] double  denominatorDegreesOfFreedom  numeratorDegreesOfFreedom  long  serialVersionUID  boolean  
[P7_Replace_Invocation]^setNumeratorDegreesOfFreedom ( denominatorDegreesOfFreedom ) ;^51^^^^^47^52^setDenominatorDegreesOfFreedom ( denominatorDegreesOfFreedom ) ;^[CLASS] FDistributionImpl  [METHOD] <init> [RETURN_TYPE] FDistributionImpl(double,double)   double numeratorDegreesOfFreedom double denominatorDegreesOfFreedom [VARIABLES] double  denominatorDegreesOfFreedom  numeratorDegreesOfFreedom  long  serialVersionUID  boolean  
[P14_Delete_Statement]^^51^^^^^47^52^setDenominatorDegreesOfFreedom ( denominatorDegreesOfFreedom ) ;^[CLASS] FDistributionImpl  [METHOD] <init> [RETURN_TYPE] FDistributionImpl(double,double)   double numeratorDegreesOfFreedom double denominatorDegreesOfFreedom [VARIABLES] double  denominatorDegreesOfFreedom  numeratorDegreesOfFreedom  long  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^return getDenominatorDegreesOfFreedom (  )  / ( getDenominatorDegreesOfFreedom (  )  - 2.0 ) ;setDenominatorDegreesOfFreedom ( denominatorDegreesOfFreedom ) ;^51^^^^^47^52^setDenominatorDegreesOfFreedom ( denominatorDegreesOfFreedom ) ;^[CLASS] FDistributionImpl  [METHOD] <init> [RETURN_TYPE] FDistributionImpl(double,double)   double numeratorDegreesOfFreedom double denominatorDegreesOfFreedom [VARIABLES] double  denominatorDegreesOfFreedom  numeratorDegreesOfFreedom  long  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^setNumeratorDegreesOfFreedom ( numeratorDegreesOfFreedom ) ;setDenominatorDegreesOfFreedom ( denominatorDegreesOfFreedom ) ;^51^^^^^47^52^setDenominatorDegreesOfFreedom ( denominatorDegreesOfFreedom ) ;^[CLASS] FDistributionImpl  [METHOD] <init> [RETURN_TYPE] FDistributionImpl(double,double)   double numeratorDegreesOfFreedom double denominatorDegreesOfFreedom [VARIABLES] double  denominatorDegreesOfFreedom  numeratorDegreesOfFreedom  long  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^( getDenominatorDegreesOfFreedom (  )  - 2.0 ) ;setDenominatorDegreesOfFreedom ( denominatorDegreesOfFreedom ) ;^51^^^^^47^52^setDenominatorDegreesOfFreedom ( denominatorDegreesOfFreedom ) ;^[CLASS] FDistributionImpl  [METHOD] <init> [RETURN_TYPE] FDistributionImpl(double,double)   double numeratorDegreesOfFreedom double denominatorDegreesOfFreedom [VARIABLES] double  denominatorDegreesOfFreedom  numeratorDegreesOfFreedom  long  serialVersionUID  boolean  
[P1_Replace_Type]^int ret;^70^^^^^69^82^double ret;^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^if  ( x < 0.0 )  {^71^^^^^69^82^if  ( x <= 0.0 )  {^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^if  ( x <= NaN )  {^71^^^^^69^82^if  ( x <= 0.0 )  {^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^if  ( ret <= 0.0 )  {^71^^^^^69^82^if  ( x <= 0.0 )  {^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^if  ( n * x /  ( m + n * x ) )  {^71^^^^^69^82^if  ( x <= 0.0 )  {^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^if  ( n * x )  {^71^^^^^69^82^if  ( x <= 0.0 )  {^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^if  ( m + n * x )  {^71^^^^^69^82^if  ( x <= 0.0 )  {^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^if  ( 0.5 * n )  {^71^^^^^69^82^if  ( x <= 0.0 )  {^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^if  ( 0.5 * m )  {^71^^^^^69^82^if  ( x <= 0.0 )  {^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^if  ( x <= 0.0D )  {^71^^^^^69^82^if  ( x <= 0.0 )  {^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[P9_Replace_Statement]^if  ( p == 1 )  {^71^^^^^69^82^if  ( x <= 0.0 )  {^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[P9_Replace_Statement]^if  ( p == 0 )  {^71^^^^^69^82^if  ( x <= 0.0 )  {^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = Beta.regularizedBeta (  ( n * x )  +  ( m + n * x ) , 0.5 * n, 0.5 * m ) ;^77^78^79^^^69^82^ret = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 0.5 * n, 0.5 * m ) ;^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = Beta.regularizedBeta (  ( n - x )  /  ( m + n - x ) , 0.5 * n, 0.5 * m ) ;^77^78^79^^^69^82^ret = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 0.5 * n, 0.5 * m ) ;^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = Beta.regularizedBeta (  ( n * x )  /  ( m  &  n * x ) , 0.5 * n, 0.5 * m ) ;^77^78^79^^^69^82^ret = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 0.5 * n, 0.5 * m ) ;^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = Beta.regularizedBeta (  ( n + x )  /  ( m + n + x ) , 0.5 * n, 0.5 * m ) ;^77^78^79^^^69^82^ret = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 0.5 * n, 0.5 * m ) ;^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret + = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 0.5 * n, 0.5 * m ) ;^77^78^79^^^69^82^ret = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 0.5 * n, 0.5 * m ) ;^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 0.5 * n, 0.5 / m ) ;^77^78^79^^^69^82^ret = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 0.5 * n, 0.5 * m ) ;^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^ret = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 0.0 * n, 0.0 * m ) ;^77^78^79^^^69^82^ret = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 0.5 * n, 0.5 * m ) ;^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^ret = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 0.25 * n, 0.25 * m ) ;^77^78^79^^^69^82^ret = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 0.5 * n, 0.5 * m ) ;^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^ret = Beta.regularizedBeta (  ( n * ret )  /  ( m + n * x ) , 0.5 * n, 0.5 * m ) ;^77^78^79^^^69^82^ret = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 0.5 * n, 0.5 * m ) ;^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^ret = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 0.5 *  0.5 * m ) ;^77^78^79^^^69^82^ret = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 0.5 * n, 0.5 * m ) ;^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^ret = Beta.regularizedBeta (  ( m * x )  /  ( n + n * x ) , 0.5 * n, 0.5 * m ) ;^77^78^79^^^69^82^ret = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 0.5 * n, 0.5 * m ) ;^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^ret = Beta.regularizedBeta (  ( x * n )  /  ( m + n * x ) , 0.5 * n, 0.5 * m ) ;^77^78^79^^^69^82^ret = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 0.5 * n, 0.5 * m ) ;^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^ret = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 0.5D * n, 0.5D * m ) ;^77^78^79^^^69^82^ret = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 0.5 * n, 0.5 * m ) ;^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[P1_Replace_Type]^float n = getNumeratorDegreesOfFreedom (  ) ;^74^^^^^69^82^double n = getNumeratorDegreesOfFreedom (  ) ;^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[P7_Replace_Invocation]^double n = getDenominatorDegreesOfFreedom (  ) ;^74^^^^^69^82^double n = getNumeratorDegreesOfFreedom (  ) ;^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^double m = getDenominatorDegreesOfFreedom (  ) ;double n = getNumeratorDegreesOfFreedom (  ) ;^74^^^^^69^82^double n = getNumeratorDegreesOfFreedom (  ) ;^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[P1_Replace_Type]^int m = getDenominatorDegreesOfFreedom (  ) ;^75^^^^^69^82^double m = getDenominatorDegreesOfFreedom (  ) ;^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[P7_Replace_Invocation]^double m = getNumeratorDegreesOfFreedom (  ) ;^75^^^^^69^82^double m = getDenominatorDegreesOfFreedom (  ) ;^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^double n = getNumeratorDegreesOfFreedom (  ) ;double m = getDenominatorDegreesOfFreedom (  ) ;^75^^^^^69^82^double m = getDenominatorDegreesOfFreedom (  ) ;^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[P14_Delete_Statement]^^74^^^^^69^82^double n = getNumeratorDegreesOfFreedom (  ) ;^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[P14_Delete_Statement]^^75^^^^^69^82^double m = getDenominatorDegreesOfFreedom (  ) ;^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^( getDenominatorDegreesOfFreedom (  )  - 2.0 ) ;double m = getDenominatorDegreesOfFreedom (  ) ;^75^^^^^69^82^double m = getDenominatorDegreesOfFreedom (  ) ;^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = Beta.regularizedBeta (  ( n / x )  /  ( m + n / x ) , 0.5 * n, 0.5 * m ) ;^77^78^79^^^69^82^ret = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 0.5 * n, 0.5 * m ) ;^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = Beta.regularizedBeta (  ( n * x )  /  ( m  >=  n * x ) , 0.5 * n, 0.5 * m ) ;^77^78^79^^^69^82^ret = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 0.5 * n, 0.5 * m ) ;^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret - = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 0.5 * n, 0.5 * m ) ;^77^78^79^^^69^82^ret = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 0.5 * n, 0.5 * m ) ;^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 0.5 * n, 0.5 - m ) ;^77^78^79^^^69^82^ret = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 0.5 * n, 0.5 * m ) ;^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^ret = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 3.0 * n, 3.0 * m ) ;^77^78^79^^^69^82^ret = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 0.5 * n, 0.5 * m ) ;^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^ret = Beta.regularizedBeta (  ( ret * x )  /  ( m + n * x ) , 0.5 * n, 0.5 * m ) ;^77^78^79^^^69^82^ret = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 0.5 * n, 0.5 * m ) ;^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^ret = Beta.regularizedBeta (  ( n * x )  /  ( ret + n * x ) , 0.5 * n, 0.5 * m ) ;^77^78^79^^^69^82^ret = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 0.5 * n, 0.5 * m ) ;^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^ret = Beta.regularizedBeta (  ( n * x )  /  ( x + n * x ) , 0.5 * n, 0.5 * m ) ;^77^78^79^^^69^82^ret = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 0.5 * n, 0.5 * m ) ;^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[P14_Delete_Statement]^^77^78^79^^^69^82^ret = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 0.5 * n, 0.5 * m ) ;^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^ret = 4.0d;^72^^^^^69^82^ret = 0.0;^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = Beta.regularizedBeta (  ( n * x )  *  ( m + n * x ) , 0.5 * n, 0.5 * m ) ;^77^78^79^^^69^82^ret = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 0.5 * n, 0.5 * m ) ;^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = Beta.regularizedBeta (  ( n * x )  /  ( m  <=  n * x ) , 0.5 * n, 0.5 * m ) ;^77^78^79^^^69^82^ret = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 0.5 * n, 0.5 * m ) ;^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret / = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 0.5 * n, 0.5 * m ) ;^77^78^79^^^69^82^ret = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 0.5 * n, 0.5 * m ) ;^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^ret = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 0.125 * n, 0.125 * m ) ;^77^78^79^^^69^82^ret = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 0.5 * n, 0.5 * m ) ;^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^ret = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 2.5 * n, 2.5 * m ) ;^77^78^79^^^69^82^ret = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 0.5 * n, 0.5 * m ) ;^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^ret = Beta.regularizedBeta (  ( n * m )  /  ( x + n * x ) , 0.5 * n, 0.5 * m ) ;^77^78^79^^^69^82^ret = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 0.5 * n, 0.5 * m ) ;^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^ret = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 3.0d * n, 3.0d * m ) ;^77^78^79^^^69^82^ret = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 0.5 * n, 0.5 * m ) ;^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[P1_Replace_Type]^int n = getNumeratorDegreesOfFreedom (  ) ;^74^^^^^69^82^double n = getNumeratorDegreesOfFreedom (  ) ;^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[P1_Replace_Type]^float m = getDenominatorDegreesOfFreedom (  ) ;^75^^^^^69^82^double m = getDenominatorDegreesOfFreedom (  ) ;^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = Beta.regularizedBeta (  ( n * x )  /  ( m  |  n * x ) , 0.5 * n, 0.5 * m ) ;^77^78^79^^^69^82^ret = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 0.5 * n, 0.5 * m ) ;^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 0.5 * n, 0.5 + m ) ;^77^78^79^^^69^82^ret = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 0.5 * n, 0.5 * m ) ;^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^ret = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 0.07142857142857142 * n, 0.07142857142857142 * m ) ;^77^78^79^^^69^82^ret = Beta.regularizedBeta (  ( n * x )  /  ( m + n * x ) , 0.5 * n, 0.5 * m ) ;^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^return x;^81^^^^^69^82^return ret;^[CLASS] FDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^if  ( p != 0 )  {^99^^^^^97^106^if  ( p == 0 )  {^[CLASS] FDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^if  ( p == -3 )  {^99^^^^^97^106^if  ( p == 0 )  {^[CLASS] FDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^if  ( numeratorDegreesOfFreedom == 0 )  {^99^^^^^97^106^if  ( p == 0 )  {^[CLASS] FDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^if  ( p == 0 << 2 )  {^99^^^^^97^106^if  ( p == 0 )  {^[CLASS] FDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[P9_Replace_Statement]^if  ( p == 1 )  {^99^^^^^97^106^if  ( p == 0 )  {^[CLASS] FDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[P9_Replace_Statement]^if  ( x <= 0.0 )  {^99^^^^^97^106^if  ( p == 0 )  {^[CLASS] FDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[P15_Unwrap_Block]^return 0.0;^99^100^101^^^97^106^if  ( p == 0 )  { return 0d; }^[CLASS] FDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[P16_Remove_Block]^^99^100^101^^^97^106^if  ( p == 0 )  { return 0d; }^[CLASS] FDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^if  ( p != 1 )  {^102^^^^^97^106^if  ( p == 1 )  {^[CLASS] FDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^if  ( p == -1 )  {^102^^^^^97^106^if  ( p == 1 )  {^[CLASS] FDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^if  ( ret == 1 )  {^102^^^^^97^106^if  ( p == 1 )  {^[CLASS] FDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^if  ( p == 3 )  {^102^^^^^97^106^if  ( p == 1 )  {^[CLASS] FDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[P9_Replace_Statement]^if  ( x <= 0.0 )  {^102^^^^^97^106^if  ( p == 1 )  {^[CLASS] FDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[P9_Replace_Statement]^if  ( p == 0 )  {^102^^^^^97^106^if  ( p == 1 )  {^[CLASS] FDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[P15_Unwrap_Block]^return java.lang.Double.POSITIVE_INFINITY;^102^103^104^^^97^106^if  ( p == 1 )  { return Double.POSITIVE_INFINITY; }^[CLASS] FDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[P16_Remove_Block]^^102^103^104^^^97^106^if  ( p == 1 )  { return Double.POSITIVE_INFINITY; }^[CLASS] FDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[P13_Insert_Block]^if  ( p == 1 )  {     return POSITIVE_INFINITY; }^103^^^^^97^106^[Delete]^[CLASS] FDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^return super .cumulativeProbability ( p )  ;^105^^^^^97^106^return super.inverseCumulativeProbability ( p ) ;^[CLASS] FDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[P14_Delete_Statement]^^105^^^^^97^106^return super.inverseCumulativeProbability ( p ) ;^[CLASS] FDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^return NaN;^118^^^^^117^119^return 0.0;^[CLASS] FDistributionImpl  [METHOD] getDomainLowerBound [RETURN_TYPE] double   double p [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^return 0.0D;^118^^^^^117^119^return 0.0;^[CLASS] FDistributionImpl  [METHOD] getDomainLowerBound [RETURN_TYPE] double   double p [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^return getDenominatorDegreesOfFreedom (  )  + ( getDenominatorDegreesOfFreedom (  )  - 2.0 ) ;^143^144^^^^142^145^return getDenominatorDegreesOfFreedom (  )  / ( getDenominatorDegreesOfFreedom (  )  - 2.0 ) ;^[CLASS] FDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^return getDenominatorDegreesOfFreedom (  )  / ( getDenominatorDegreesOfFreedom (  )   !=  2.0 ) ;^143^144^^^^142^145^return getDenominatorDegreesOfFreedom (  )  / ( getDenominatorDegreesOfFreedom (  )  - 2.0 ) ;^[CLASS] FDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[P7_Replace_Invocation]^return getNumeratorDegreesOfFreedom (  )  / ( getDenominatorDegreesOfFreedom (  )  - 2.0 ) ;^143^144^^^^142^145^return getDenominatorDegreesOfFreedom (  )  / ( getDenominatorDegreesOfFreedom (  )  - 2.0 ) ;^[CLASS] FDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[P14_Delete_Statement]^^143^144^^^^142^145^return getDenominatorDegreesOfFreedom (  )  / ( getDenominatorDegreesOfFreedom (  )  - 2.0 ) ;^[CLASS] FDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[P7_Replace_Invocation]^( getNumeratorDegreesOfFreedom (  )  - 2.0 ) ;^144^^^^^142^145^( getDenominatorDegreesOfFreedom (  )  - 2.0 ) ;^[CLASS] FDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[P14_Delete_Statement]^^144^^^^^142^145^( getDenominatorDegreesOfFreedom (  )  - 2.0 ) ;^[CLASS] FDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^return getDenominatorDegreesOfFreedom (  )  / ( getDenominatorDegreesOfFreedom (  )  - 2.0 ) ;( getDenominatorDegreesOfFreedom (  )  - 2.0 ) ;^144^^^^^142^145^( getDenominatorDegreesOfFreedom (  )  - 2.0 ) ;^[CLASS] FDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^double m = getDenominatorDegreesOfFreedom (  ) ;( getDenominatorDegreesOfFreedom (  )  - 2.0 ) ;^144^^^^^142^145^( getDenominatorDegreesOfFreedom (  )  - 2.0 ) ;^[CLASS] FDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^setDenominatorDegreesOfFreedom ( denominatorDegreesOfFreedom ) ;( getDenominatorDegreesOfFreedom (  )  - 2.0 ) ;^144^^^^^142^145^( getDenominatorDegreesOfFreedom (  )  - 2.0 ) ;^[CLASS] FDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^if  ( degreesOfFreedom < 0.0 )  {^154^^^^^153^159^if  ( degreesOfFreedom <= 0.0 )  {^[CLASS] FDistributionImpl  [METHOD] setNumeratorDegreesOfFreedom [RETURN_TYPE] void   double degreesOfFreedom [VARIABLES] double  degreesOfFreedom  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^if  ( degreesOfFreedom <= 0.0D )  {^154^^^^^153^159^if  ( degreesOfFreedom <= 0.0 )  {^[CLASS] FDistributionImpl  [METHOD] setNumeratorDegreesOfFreedom [RETURN_TYPE] void   double degreesOfFreedom [VARIABLES] double  degreesOfFreedom  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("degrees of freedom must be positive.");^154^155^156^157^^153^159^if  ( degreesOfFreedom <= 0.0 )  { throw new IllegalArgumentException ( "degrees of freedom must be positive." ) ; }^[CLASS] FDistributionImpl  [METHOD] setNumeratorDegreesOfFreedom [RETURN_TYPE] void   double degreesOfFreedom [VARIABLES] double  degreesOfFreedom  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[P16_Remove_Block]^^154^155^156^157^^153^159^if  ( degreesOfFreedom <= 0.0 )  { throw new IllegalArgumentException ( "degrees of freedom must be positive." ) ; }^[CLASS] FDistributionImpl  [METHOD] setNumeratorDegreesOfFreedom [RETURN_TYPE] void   double degreesOfFreedom [VARIABLES] double  degreesOfFreedom  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "t be " ) ;^155^156^^^^153^159^throw new IllegalArgumentException ( "degrees of freedom must be positive." ) ;^[CLASS] FDistributionImpl  [METHOD] setNumeratorDegreesOfFreedom [RETURN_TYPE] void   double degreesOfFreedom [VARIABLES] double  degreesOfFreedom  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[P13_Insert_Block]^if  ( degreesOfFreedom <= 0.0 )  {     throw new IllegalArgumentException ( "degrees of freedom must be positive." ) ; }^155^^^^^153^159^[Delete]^[CLASS] FDistributionImpl  [METHOD] setNumeratorDegreesOfFreedom [RETURN_TYPE] void   double degreesOfFreedom [VARIABLES] double  degreesOfFreedom  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "degrees of freedom must be positive.gre" ) ;^155^156^^^^153^159^throw new IllegalArgumentException ( "degrees of freedom must be positive." ) ;^[CLASS] FDistributionImpl  [METHOD] setNumeratorDegreesOfFreedom [RETURN_TYPE] void   double degreesOfFreedom [VARIABLES] double  degreesOfFreedom  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "freedom must be posiegrees of freedom must be positive." ) ;^155^156^^^^153^159^throw new IllegalArgumentException ( "degrees of freedom must be positive." ) ;^[CLASS] FDistributionImpl  [METHOD] setNumeratorDegreesOfFreedom [RETURN_TYPE] void   double degreesOfFreedom [VARIABLES] double  degreesOfFreedom  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "g" ) ;^155^156^^^^153^159^throw new IllegalArgumentException ( "degrees of freedom must be positive." ) ;^[CLASS] FDistributionImpl  [METHOD] setNumeratorDegreesOfFreedom [RETURN_TYPE] void   double degreesOfFreedom [VARIABLES] double  degreesOfFreedom  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^this.numeratorDegreesOfFreedom = p;^158^^^^^153^159^this.numeratorDegreesOfFreedom = degreesOfFreedom;^[CLASS] FDistributionImpl  [METHOD] setNumeratorDegreesOfFreedom [RETURN_TYPE] void   double degreesOfFreedom [VARIABLES] double  degreesOfFreedom  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^this.numeratorDegreesOfFreedom =  x;^158^^^^^153^159^this.numeratorDegreesOfFreedom = degreesOfFreedom;^[CLASS] FDistributionImpl  [METHOD] setNumeratorDegreesOfFreedom [RETURN_TYPE] void   double degreesOfFreedom [VARIABLES] double  degreesOfFreedom  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^this.denominatorDegreesOfFreedom = degreesOfFreedom;this.numeratorDegreesOfFreedom = degreesOfFreedom;^158^^^^^153^159^this.numeratorDegreesOfFreedom = degreesOfFreedom;^[CLASS] FDistributionImpl  [METHOD] setNumeratorDegreesOfFreedom [RETURN_TYPE] void   double degreesOfFreedom [VARIABLES] double  degreesOfFreedom  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^return x;^166^^^^^165^167^return numeratorDegreesOfFreedom;^[CLASS] FDistributionImpl  [METHOD] getNumeratorDegreesOfFreedom [RETURN_TYPE] double   [VARIABLES] double  degreesOfFreedom  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^return ret;^166^^^^^165^167^return numeratorDegreesOfFreedom;^[CLASS] FDistributionImpl  [METHOD] getNumeratorDegreesOfFreedom [RETURN_TYPE] double   [VARIABLES] double  degreesOfFreedom  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^if  ( degreesOfFreedom > 0.0 )  {^176^^^^^175^181^if  ( degreesOfFreedom <= 0.0 )  {^[CLASS] FDistributionImpl  [METHOD] setDenominatorDegreesOfFreedom [RETURN_TYPE] void   double degreesOfFreedom [VARIABLES] double  degreesOfFreedom  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^if  ( degreesOfFreedom <= 0.0d )  {^176^^^^^175^181^if  ( degreesOfFreedom <= 0.0 )  {^[CLASS] FDistributionImpl  [METHOD] setDenominatorDegreesOfFreedom [RETURN_TYPE] void   double degreesOfFreedom [VARIABLES] double  degreesOfFreedom  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("degrees of freedom must be positive.");^176^177^178^179^^175^181^if  ( degreesOfFreedom <= 0.0 )  { throw new IllegalArgumentException ( "degrees of freedom must be positive." ) ; }^[CLASS] FDistributionImpl  [METHOD] setDenominatorDegreesOfFreedom [RETURN_TYPE] void   double degreesOfFreedom [VARIABLES] double  degreesOfFreedom  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[P16_Remove_Block]^^176^177^178^179^^175^181^if  ( degreesOfFreedom <= 0.0 )  { throw new IllegalArgumentException ( "degrees of freedom must be positive." ) ; }^[CLASS] FDistributionImpl  [METHOD] setDenominatorDegreesOfFreedom [RETURN_TYPE] void   double degreesOfFreedom [VARIABLES] double  degreesOfFreedom  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "degreesegrees of freedom must be positive." ) ;^177^178^^^^175^181^throw new IllegalArgumentException ( "degrees of freedom must be positive." ) ;^[CLASS] FDistributionImpl  [METHOD] setDenominatorDegreesOfFreedom [RETURN_TYPE] void   double degreesOfFreedom [VARIABLES] double  degreesOfFreedom  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[P13_Insert_Block]^if  ( degreesOfFreedom <= 0.0 )  {     throw new IllegalArgumentException ( "degrees of freedom must be positive." ) ; }^177^^^^^175^181^[Delete]^[CLASS] FDistributionImpl  [METHOD] setDenominatorDegreesOfFreedom [RETURN_TYPE] void   double degreesOfFreedom [VARIABLES] double  degreesOfFreedom  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "degrees of freedom must be positivegrees of freedom must be positive." ) ;^177^178^^^^175^181^throw new IllegalArgumentException ( "degrees of freedom must be positive." ) ;^[CLASS] FDistributionImpl  [METHOD] setDenominatorDegreesOfFreedom [RETURN_TYPE] void   double degreesOfFreedom [VARIABLES] double  degreesOfFreedom  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "degrees of freedom must be positive.f free" ) ;^177^178^^^^175^181^throw new IllegalArgumentException ( "degrees of freedom must be positive." ) ;^[CLASS] FDistributionImpl  [METHOD] setDenominatorDegreesOfFreedom [RETURN_TYPE] void   double degreesOfFreedom [VARIABLES] double  degreesOfFreedom  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "degrees of freedom must be positive.freedom must b" ) ;^177^178^^^^175^181^throw new IllegalArgumentException ( "degrees of freedom must be positive." ) ;^[CLASS] FDistributionImpl  [METHOD] setDenominatorDegreesOfFreedom [RETURN_TYPE] void   double degreesOfFreedom [VARIABLES] double  degreesOfFreedom  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^return ;^177^178^^^^175^181^throw new IllegalArgumentException ( "degrees of freedom must be positive." ) ;^[CLASS] FDistributionImpl  [METHOD] setDenominatorDegreesOfFreedom [RETURN_TYPE] void   double degreesOfFreedom [VARIABLES] double  degreesOfFreedom  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^this.denominatorDegreesOfFreedom = p;^180^^^^^175^181^this.denominatorDegreesOfFreedom = degreesOfFreedom;^[CLASS] FDistributionImpl  [METHOD] setDenominatorDegreesOfFreedom [RETURN_TYPE] void   double degreesOfFreedom [VARIABLES] double  degreesOfFreedom  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^this.denominatorDegreesOfFreedom =  null;^180^^^^^175^181^this.denominatorDegreesOfFreedom = degreesOfFreedom;^[CLASS] FDistributionImpl  [METHOD] setDenominatorDegreesOfFreedom [RETURN_TYPE] void   double degreesOfFreedom [VARIABLES] double  degreesOfFreedom  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^this.numeratorDegreesOfFreedom = degreesOfFreedom;this.denominatorDegreesOfFreedom = degreesOfFreedom;^180^^^^^175^181^this.denominatorDegreesOfFreedom = degreesOfFreedom;^[CLASS] FDistributionImpl  [METHOD] setDenominatorDegreesOfFreedom [RETURN_TYPE] void   double degreesOfFreedom [VARIABLES] double  degreesOfFreedom  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^return ret;^188^^^^^187^189^return denominatorDegreesOfFreedom;^[CLASS] FDistributionImpl  [METHOD] getDenominatorDegreesOfFreedom [RETURN_TYPE] double   [VARIABLES] double  degreesOfFreedom  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  
