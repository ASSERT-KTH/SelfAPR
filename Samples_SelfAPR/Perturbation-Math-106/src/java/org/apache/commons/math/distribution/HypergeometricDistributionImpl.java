[P1_Replace_Type]^private static final  short  serialVersionUID = -436928820673516179L;^33^^^^^28^38^private static final long serialVersionUID = -436928820673516179L;^[CLASS] HypergeometricDistributionImpl   [VARIABLES] 
[P8_Replace_Mix]^private static final long serialVersionUID = -436928820673516179;^33^^^^^28^38^private static final long serialVersionUID = -436928820673516179L;^[CLASS] HypergeometricDistributionImpl   [VARIABLES] 
[P1_Replace_Type]^private  short  numberOfSuccesses;^36^^^^^31^41^private int numberOfSuccesses;^[CLASS] HypergeometricDistributionImpl   [VARIABLES] 
[P1_Replace_Type]^private  short  populationSize;^39^^^^^34^44^private int populationSize;^[CLASS] HypergeometricDistributionImpl   [VARIABLES] 
[P1_Replace_Type]^private  long  sampleSize;^42^^^^^37^47^private int sampleSize;^[CLASS] HypergeometricDistributionImpl   [VARIABLES] 
[P8_Replace_Mix]^private  short  sampleSize;^42^^^^^37^47^private int sampleSize;^[CLASS] HypergeometricDistributionImpl   [VARIABLES] 
[P14_Delete_Statement]^^53^^^^^51^66^super (  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] <init> [RETURN_TYPE] HypergeometricDistributionImpl(int,int,int)   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  boolean  
[P2_Replace_Operator]^if  ( numberOfSuccesses >= populationSize )  {^54^^^^^51^66^if  ( numberOfSuccesses > populationSize )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] <init> [RETURN_TYPE] HypergeometricDistributionImpl(int,int,int)   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  boolean  
[P5_Replace_Variable]^if  ( sampleSize > populationSize )  {^54^^^^^51^66^if  ( numberOfSuccesses > populationSize )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] <init> [RETURN_TYPE] HypergeometricDistributionImpl(int,int,int)   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  boolean  
[P5_Replace_Variable]^if  ( numberOfSuccesses > sampleSize )  {^54^^^^^51^66^if  ( numberOfSuccesses > populationSize )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] <init> [RETURN_TYPE] HypergeometricDistributionImpl(int,int,int)   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  boolean  
[P5_Replace_Variable]^if  ( populationSize > numberOfSuccesses )  {^54^^^^^51^66^if  ( numberOfSuccesses > populationSize )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] <init> [RETURN_TYPE] HypergeometricDistributionImpl(int,int,int)   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  boolean  
[P6_Replace_Expression]^if  ( "number of successes must be less than or equal to " + "population size" )  {^54^^^^^51^66^if  ( numberOfSuccesses > populationSize )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] <init> [RETURN_TYPE] HypergeometricDistributionImpl(int,int,int)   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  boolean  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException(("number of successes must be less than or equal to " + "population size"));^54^55^56^57^58^51^66^if  ( numberOfSuccesses > populationSize )  { throw new IllegalArgumentException ( "number of successes must be less than or equal to " + "population size" ) ; }^[CLASS] HypergeometricDistributionImpl  [METHOD] <init> [RETURN_TYPE] HypergeometricDistributionImpl(int,int,int)   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  boolean  
[P16_Remove_Block]^^54^55^56^57^58^51^66^if  ( numberOfSuccesses > populationSize )  { throw new IllegalArgumentException ( "number of successes must be less than or equal to " + "population size" ) ; }^[CLASS] HypergeometricDistributionImpl  [METHOD] <init> [RETURN_TYPE] HypergeometricDistributionImpl(int,int,int)   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  boolean  
[P13_Insert_Block]^if  ( num < 0 )  {     throw new IllegalArgumentException ( "number of successes must be non-negative." ) ; }^54^^^^^51^66^[Delete]^[CLASS] HypergeometricDistributionImpl  [METHOD] <init> [RETURN_TYPE] HypergeometricDistributionImpl(int,int,int)   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  boolean  
[P13_Insert_Block]^if  ( size < 0 )  {     throw new IllegalArgumentException ( "sample size must be non-negative." ) ; }^54^^^^^51^66^[Delete]^[CLASS] HypergeometricDistributionImpl  [METHOD] <init> [RETURN_TYPE] HypergeometricDistributionImpl(int,int,int)   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  boolean  
[P13_Insert_Block]^if  ( sampleSize > populationSize )  {     throw new IllegalArgumentException ( "sample size must be less than or equal to population size" ) ; }^54^^^^^51^66^[Delete]^[CLASS] HypergeometricDistributionImpl  [METHOD] <init> [RETURN_TYPE] HypergeometricDistributionImpl(int,int,int)   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  boolean  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "number of successes must be less than or equal to "  >>  "population size" ) ;^55^56^57^^^51^66^throw new IllegalArgumentException ( "number of successes must be less than or equal to " + "population size" ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] <init> [RETURN_TYPE] HypergeometricDistributionImpl(int,int,int)   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  boolean  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "ber o" + "population size" ) ;^55^56^57^^^51^66^throw new IllegalArgumentException ( "number of successes must be less than or equal to " + "population size" ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] <init> [RETURN_TYPE] HypergeometricDistributionImpl(int,int,int)   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  boolean  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "sample size must be less than or equal to population size" )  ;^55^56^57^^^51^66^throw new IllegalArgumentException ( "number of successes must be less than or equal to " + "population size" ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] <init> [RETURN_TYPE] HypergeometricDistributionImpl(int,int,int)   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  boolean  
[P13_Insert_Block]^if  ( numberOfSuccesses > populationSize )  {     throw new IllegalArgumentException (  ( "number of successes must be less than or equal to " + "population size" )  ) ; }^55^^^^^51^66^[Delete]^[CLASS] HypergeometricDistributionImpl  [METHOD] <init> [RETURN_TYPE] HypergeometricDistributionImpl(int,int,int)   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  boolean  
[P13_Insert_Block]^if  ( sampleSize > populationSize )  {     throw new IllegalArgumentException ( "sample size must be less than or equal to population size" ) ; }^55^^^^^51^66^[Delete]^[CLASS] HypergeometricDistributionImpl  [METHOD] <init> [RETURN_TYPE] HypergeometricDistributionImpl(int,int,int)   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  boolean  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "number of successes must be less than or equal to "  ||  "population size" ) ;^55^56^57^^^51^66^throw new IllegalArgumentException ( "number of successes must be less than or equal to " + "population size" ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] <init> [RETURN_TYPE] HypergeometricDistributionImpl(int,int,int)   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  boolean  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "es must be less than or eq" + "population size" ) ;^55^56^57^^^51^66^throw new IllegalArgumentException ( "number of successes must be less than or equal to " + "population size" ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] <init> [RETURN_TYPE] HypergeometricDistributionImpl(int,int,int)   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  boolean  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "number of successes must be less than or equal to "  ^  "population size" ) ;^55^56^57^^^51^66^throw new IllegalArgumentException ( "number of successes must be less than or equal to " + "population size" ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] <init> [RETURN_TYPE] HypergeometricDistributionImpl(int,int,int)   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  boolean  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "number of successes must be less than or equal to nu" + "population size" ) ;^55^56^57^^^51^66^throw new IllegalArgumentException ( "number of successes must be less than or equal to " + "population size" ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] <init> [RETURN_TYPE] HypergeometricDistributionImpl(int,int,int)   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  boolean  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "number of successes must be less than or equal to " + "population sizepo" ) ;^55^56^57^^^51^66^throw new IllegalArgumentException ( "number of successes must be less than or equal to " + "population size" ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] <init> [RETURN_TYPE] HypergeometricDistributionImpl(int,int,int)   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  boolean  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "number of successes must be less than or equal to "  <=  "population size" ) ;^55^56^57^^^51^66^throw new IllegalArgumentException ( "number of successes must be less than or equal to " + "population size" ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] <init> [RETURN_TYPE] HypergeometricDistributionImpl(int,int,int)   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  boolean  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "ceumber of successes must be less than or equal to " + "population size" ) ;^55^56^57^^^51^66^throw new IllegalArgumentException ( "number of successes must be less than or equal to " + "population size" ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] <init> [RETURN_TYPE] HypergeometricDistributionImpl(int,int,int)   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  boolean  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "number of successes must be less than or equal to " + "population sizepopula" ) ;^55^56^57^^^51^66^throw new IllegalArgumentException ( "number of successes must be less than or equal to " + "population size" ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] <init> [RETURN_TYPE] HypergeometricDistributionImpl(int,int,int)   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  boolean  
[P2_Replace_Operator]^if  ( sampleSize >= populationSize )  {^59^^^^^51^66^if  ( sampleSize > populationSize )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] <init> [RETURN_TYPE] HypergeometricDistributionImpl(int,int,int)   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  boolean  
[P5_Replace_Variable]^if  ( numberOfSuccesses > populationSize )  {^59^^^^^51^66^if  ( sampleSize > populationSize )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] <init> [RETURN_TYPE] HypergeometricDistributionImpl(int,int,int)   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  boolean  
[P5_Replace_Variable]^if  ( sampleSize > numberOfSuccesses )  {^59^^^^^51^66^if  ( sampleSize > populationSize )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] <init> [RETURN_TYPE] HypergeometricDistributionImpl(int,int,int)   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  boolean  
[P5_Replace_Variable]^if  ( populationSize > sampleSize )  {^59^^^^^51^66^if  ( sampleSize > populationSize )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] <init> [RETURN_TYPE] HypergeometricDistributionImpl(int,int,int)   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  boolean  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("sample size must be less than or equal to population size");^59^60^61^62^^51^66^if  ( sampleSize > populationSize )  { throw new IllegalArgumentException ( "sample size must be less than or equal to population size" ) ; }^[CLASS] HypergeometricDistributionImpl  [METHOD] <init> [RETURN_TYPE] HypergeometricDistributionImpl(int,int,int)   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  boolean  
[P16_Remove_Block]^^59^60^61^62^^51^66^if  ( sampleSize > populationSize )  { throw new IllegalArgumentException ( "sample size must be less than or equal to population size" ) ; }^[CLASS] HypergeometricDistributionImpl  [METHOD] <init> [RETURN_TYPE] HypergeometricDistributionImpl(int,int,int)   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  boolean  
[P13_Insert_Block]^if  ( size <= 0 )  {     throw new IllegalArgumentException ( "population size must be positive." ) ; }^59^^^^^51^66^[Delete]^[CLASS] HypergeometricDistributionImpl  [METHOD] <init> [RETURN_TYPE] HypergeometricDistributionImpl(int,int,int)   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  boolean  
[P13_Insert_Block]^if  ( num < 0 )  {     throw new IllegalArgumentException ( "number of successes must be non-negative." ) ; }^59^^^^^51^66^[Delete]^[CLASS] HypergeometricDistributionImpl  [METHOD] <init> [RETURN_TYPE] HypergeometricDistributionImpl(int,int,int)   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  boolean  
[P13_Insert_Block]^if  ( size < 0 )  {     throw new IllegalArgumentException ( "sample size must be non-negative." ) ; }^59^^^^^51^66^[Delete]^[CLASS] HypergeometricDistributionImpl  [METHOD] <init> [RETURN_TYPE] HypergeometricDistributionImpl(int,int,int)   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  boolean  
[P13_Insert_Block]^if  ( numberOfSuccesses > populationSize )  {     throw new IllegalArgumentException (  ( "number of successes must be less than or equal to " + "population size" )  ) ; }^59^^^^^51^66^[Delete]^[CLASS] HypergeometricDistributionImpl  [METHOD] <init> [RETURN_TYPE] HypergeometricDistributionImpl(int,int,int)   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  boolean  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "sample size must be less than or equal to population sizeample size must be less than or equal to populati" ) ;^60^61^^^^51^66^throw new IllegalArgumentException ( "sample size must be less than or equal to population size" ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] <init> [RETURN_TYPE] HypergeometricDistributionImpl(int,int,int)   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  boolean  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException (  ( "number of successes must be less than or equal to " + "population size" )  )  ;^60^61^^^^51^66^throw new IllegalArgumentException ( "sample size must be less than or equal to population size" ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] <init> [RETURN_TYPE] HypergeometricDistributionImpl(int,int,int)   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  boolean  
[P13_Insert_Block]^if  ( numberOfSuccesses > populationSize )  {     throw new IllegalArgumentException (  ( "number of successes must be less than or equal to " + "population size" )  ) ; }^60^^^^^51^66^[Delete]^[CLASS] HypergeometricDistributionImpl  [METHOD] <init> [RETURN_TYPE] HypergeometricDistributionImpl(int,int,int)   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  boolean  
[P13_Insert_Block]^if  ( sampleSize > populationSize )  {     throw new IllegalArgumentException ( "sample size must be less than or equal to population size" ) ; }^60^^^^^51^66^[Delete]^[CLASS] HypergeometricDistributionImpl  [METHOD] <init> [RETURN_TYPE] HypergeometricDistributionImpl(int,int,int)   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  boolean  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "size muample size must be less than or equal to population size" ) ;^60^61^^^^51^66^throw new IllegalArgumentException ( "sample size must be less than or equal to population size" ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] <init> [RETURN_TYPE] HypergeometricDistributionImpl(int,int,int)   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  boolean  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "size must be less than or " ) ;^60^61^^^^51^66^throw new IllegalArgumentException ( "sample size must be less than or equal to population size" ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] <init> [RETURN_TYPE] HypergeometricDistributionImpl(int,int,int)   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  boolean  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "sam" ) ;^60^61^^^^51^66^throw new IllegalArgumentException ( "sample size must be less than or equal to population size" ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] <init> [RETURN_TYPE] HypergeometricDistributionImpl(int,int,int)   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  boolean  
[P7_Replace_Invocation]^setSampleSize ( populationSize ) ;^63^^^^^51^66^setPopulationSize ( populationSize ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] <init> [RETURN_TYPE] HypergeometricDistributionImpl(int,int,int)   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  boolean  
[P8_Replace_Mix]^setPopulationSize ( sampleSize ) ;^63^^^^^51^66^setPopulationSize ( populationSize ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] <init> [RETURN_TYPE] HypergeometricDistributionImpl(int,int,int)   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  boolean  
[P14_Delete_Statement]^^63^^^^^51^66^setPopulationSize ( populationSize ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] <init> [RETURN_TYPE] HypergeometricDistributionImpl(int,int,int)   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  boolean  
[P11_Insert_Donor_Statement]^setSampleSize ( sampleSize ) ;setPopulationSize ( populationSize ) ;^63^^^^^51^66^setPopulationSize ( populationSize ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] <init> [RETURN_TYPE] HypergeometricDistributionImpl(int,int,int)   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  boolean  
[P12_Insert_Condition]^if  ( numberOfSuccesses > populationSize )  { setPopulationSize ( populationSize ) ; }^63^^^^^51^66^setPopulationSize ( populationSize ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] <init> [RETURN_TYPE] HypergeometricDistributionImpl(int,int,int)   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  boolean  
[P12_Insert_Condition]^if  ( sampleSize > populationSize )  { setPopulationSize ( populationSize ) ; }^63^^^^^51^66^setPopulationSize ( populationSize ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] <init> [RETURN_TYPE] HypergeometricDistributionImpl(int,int,int)   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  boolean  
[P7_Replace_Invocation]^setPopulationSize ( sampleSize ) ;^64^^^^^51^66^setSampleSize ( sampleSize ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] <init> [RETURN_TYPE] HypergeometricDistributionImpl(int,int,int)   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  boolean  
[P8_Replace_Mix]^setPopulationSize ( populationSize ) ;^64^^^^^51^66^setSampleSize ( sampleSize ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] <init> [RETURN_TYPE] HypergeometricDistributionImpl(int,int,int)   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  boolean  
[P14_Delete_Statement]^^64^^^^^51^66^setSampleSize ( sampleSize ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] <init> [RETURN_TYPE] HypergeometricDistributionImpl(int,int,int)   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  boolean  
[P11_Insert_Donor_Statement]^getSampleSize (  )  ) ;setSampleSize ( sampleSize ) ;^64^^^^^51^66^setSampleSize ( sampleSize ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] <init> [RETURN_TYPE] HypergeometricDistributionImpl(int,int,int)   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  boolean  
[P11_Insert_Donor_Statement]^setPopulationSize ( populationSize ) ;setSampleSize ( sampleSize ) ;^64^^^^^51^66^setSampleSize ( sampleSize ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] <init> [RETURN_TYPE] HypergeometricDistributionImpl(int,int,int)   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  boolean  
[P5_Replace_Variable]^setNumberOfSuccesses ( sampleSize ) ;^65^^^^^51^66^setNumberOfSuccesses ( numberOfSuccesses ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] <init> [RETURN_TYPE] HypergeometricDistributionImpl(int,int,int)   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  boolean  
[P7_Replace_Invocation]^setSampleSize ( numberOfSuccesses ) ;^65^^^^^51^66^setNumberOfSuccesses ( numberOfSuccesses ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] <init> [RETURN_TYPE] HypergeometricDistributionImpl(int,int,int)   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  boolean  
[P14_Delete_Statement]^^65^^^^^51^66^setNumberOfSuccesses ( numberOfSuccesses ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] <init> [RETURN_TYPE] HypergeometricDistributionImpl(int,int,int)   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] long  serialVersionUID  int  numberOfSuccesses  populationSize  sampleSize  boolean  
[P1_Replace_Type]^float ret;^74^^^^^73^90^double ret;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P1_Replace_Type]^short  n = getPopulationSize (  ) ;^76^^^^^73^90^int n = getPopulationSize (  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P7_Replace_Invocation]^int n = getSampleSize (  ) ;^76^^^^^73^90^int n = getPopulationSize (  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P11_Insert_Donor_Statement]^int m = getNumberOfSuccesses (  ) ;int n = getPopulationSize (  ) ;^76^^^^^73^90^int n = getPopulationSize (  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P11_Insert_Donor_Statement]^int k = getSampleSize (  ) ;int n = getPopulationSize (  ) ;^76^^^^^73^90^int n = getPopulationSize (  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P14_Delete_Statement]^^76^^^^^73^90^int n = getPopulationSize (  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P1_Replace_Type]^long  m = getNumberOfSuccesses (  ) ;^77^^^^^73^90^int m = getNumberOfSuccesses (  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P7_Replace_Invocation]^int m = getSampleSize (  ) ;^77^^^^^73^90^int m = getNumberOfSuccesses (  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P11_Insert_Donor_Statement]^int n = getPopulationSize (  ) ;int m = getNumberOfSuccesses (  ) ;^77^^^^^73^90^int m = getNumberOfSuccesses (  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P11_Insert_Donor_Statement]^int k = getSampleSize (  ) ;int m = getNumberOfSuccesses (  ) ;^77^^^^^73^90^int m = getNumberOfSuccesses (  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P14_Delete_Statement]^^77^78^^^^73^90^int m = getNumberOfSuccesses (  ) ; int k = getSampleSize (  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P1_Replace_Type]^long  k = getSampleSize (  ) ;^78^^^^^73^90^int k = getSampleSize (  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P7_Replace_Invocation]^int k = getPopulationSize (  ) ;^78^^^^^73^90^int k = getSampleSize (  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P11_Insert_Donor_Statement]^int n = getPopulationSize (  ) ;int k = getSampleSize (  ) ;^78^^^^^73^90^int k = getSampleSize (  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P11_Insert_Donor_Statement]^int m = getNumberOfSuccesses (  ) ;int k = getSampleSize (  ) ;^78^^^^^73^90^int k = getSampleSize (  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P14_Delete_Statement]^^78^^^^^73^90^int k = getSampleSize (  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P11_Insert_Donor_Statement]^getSampleSize (  )  ) ;int k = getSampleSize (  ) ;^78^^^^^73^90^int k = getSampleSize (  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^int[] domain = getDomain ( x, m, k ) ;^80^^^^^73^90^int[] domain = getDomain ( n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^int[] domain = getDomain ( n, x, k ) ;^80^^^^^73^90^int[] domain = getDomain ( n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^int[] domain = getDomain ( n, m, x ) ;^80^^^^^73^90^int[] domain = getDomain ( n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^int[] domain = getDomain (  m, k ) ;^80^^^^^73^90^int[] domain = getDomain ( n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^int[] domain = getDomain ( n,  k ) ;^80^^^^^73^90^int[] domain = getDomain ( n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^int[] domain = getDomain ( n, m ) ;^80^^^^^73^90^int[] domain = getDomain ( n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^int[] domain = getDomain ( k, m, n ) ;^80^^^^^73^90^int[] domain = getDomain ( n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^int[] domain = getDomain ( n, k, m ) ;^80^^^^^73^90^int[] domain = getDomain ( n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P7_Replace_Invocation]^int[] domain = getLowerDomain ( n, m, k ) ;^80^^^^^73^90^int[] domain = getDomain ( n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P8_Replace_Mix]^int[] domain = getLowerDomain ( n, sampleSize, k ) ;^80^^^^^73^90^int[] domain = getDomain ( n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^int[] domain = getDomain ( n, sampleSize, k ) ;^80^^^^^73^90^int[] domain = getDomain ( n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P14_Delete_Statement]^^80^^^^^73^90^int[] domain = getDomain ( n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P2_Replace_Operator]^if  ( x <= domain[0] )  {^81^^^^^73^90^if  ( x < domain[0] )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P3_Replace_Literal]^if  ( x < domain[numberOfSuccesses] )  {^81^^^^^73^90^if  ( x < domain[0] )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^if  ( populationSize < domain[0] )  {^81^^^^^73^90^if  ( x < domain[0] )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P6_Replace_Expression]^if  ( x >= domain[1] )  {^81^^^^^73^90^if  ( x < domain[0] )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P8_Replace_Mix]^if  ( x < domain[3] )  {^81^^^^^73^90^if  ( x < domain[0] )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P13_Insert_Block]^if  ( x >=  ( domain[1] )  )  {     ret = 1.0; }else {     ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ; }^81^^^^^73^90^[Delete]^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P13_Insert_Block]^if  ( x <  ( domain[0] )  )  {     ret = 1.0; }else     if  ( x >  ( domain[1] )  )  {         ret = 0.0;     }else {         ret = innerCumulativeProbability ( domain[1], x,  ( -1 ) , n, m, k ) ;     }^81^^^^^73^90^[Delete]^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P13_Insert_Block]^if  (  ( x <  ( domain[0] )  )  ||  ( x >  ( domain[1] )  )  )  {     ret = 0.0; }else {     ret = probability ( n, m, k, x ) ; }^81^^^^^73^90^[Delete]^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P13_Insert_Block]^if  ( x >  ( domain[1] )  )  {     ret = 0.0; }else {     ret = innerCumulativeProbability ( domain[1], x,  ( -1 ) , n, m, k ) ; }^81^^^^^73^90^[Delete]^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P2_Replace_Operator]^} else if ( x > domain[1] )  {^83^^^^^73^90^} else if ( x >= domain[1] )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P3_Replace_Literal]^} else if ( x >= domain[n] )  {^83^^^^^73^90^} else if ( x >= domain[1] )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P3_Replace_Literal]^} else if ( x >= domain[-5] )  {^83^^^^^73^90^} else if ( x >= domain[1] )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^} else if ( populationSize >= domain[1] )  {^83^^^^^73^90^} else if ( x >= domain[1] )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^} else if ( domain >= x[1] )  {^83^^^^^73^90^} else if ( x >= domain[1] )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P6_Replace_Expression]^} else {^83^^^^^73^90^} else if ( x >= domain[1] )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P8_Replace_Mix]^}  if ( sampleSize >= domain[2] )  {^83^^^^^73^90^} else if ( x >= domain[1] )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P15_Unwrap_Block]^ret = 1.0;^83^84^85^86^87^73^90^} else if ( x >= domain[1] )  { ret = 1.0; } else { ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ; }^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P16_Remove_Block]^^83^84^85^86^87^73^90^} else if ( x >= domain[1] )  { ret = 1.0; } else { ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ; }^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P13_Insert_Block]^if  ( x <  ( domain[0] )  )  {     ret = 1.0; }else     if  ( x >  ( domain[1] )  )  {         ret = 0.0;     }else {         ret = innerCumulativeProbability ( domain[1], x,  ( -1 ) , n, m, k ) ;     }^83^^^^^73^90^[Delete]^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P13_Insert_Block]^if  ( x <  ( domain[0] )  )  {     ret = 0.0; }else     if  ( x >=  ( domain[1] )  )  {         ret = 1.0;     }else {         ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;     }^83^^^^^73^90^[Delete]^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P13_Insert_Block]^if  ( x >  ( domain[1] )  )  {     ret = 0.0; }else {     ret = innerCumulativeProbability ( domain[1], x,  ( -1 ) , n, m, k ) ; }^83^^^^^73^90^[Delete]^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P3_Replace_Literal]^ret = innerCumulativeProbability ( domain[sampleSize], x, 1, n, m, k ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P3_Replace_Literal]^ret = innerCumulativeProbability ( domain[0], x, 4, n, m, k ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^ret = innerCumulativeProbability ( domain[0], sampleSize, 1, n, m, k ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^ret = innerCumulativeProbability ( domain[0], x, 1, sampleSize, m, k ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^ret = innerCumulativeProbability ( domain[0], x, 1, n, x, k ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, populationSize ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^ret = innerCumulativeProbability ( domain[0],  1, n, m, k ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^ret = innerCumulativeProbability ( domain[0], x, 1,  m, k ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^ret = innerCumulativeProbability ( domain[0], x, 1, n,  k ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^ret = innerCumulativeProbability ( domain[0], x, 1, n, m ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^ret = innerCumulativeProbability ( k[0], x, 1, n, m, domain ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^ret = innerCumulativeProbability ( x[0], domain, 1, n, m, k ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^ret = innerCumulativeProbability ( domain[0], x, 1, k, m, n ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^ret = innerCumulativeProbability ( domain[0], m, 1, n, x, k ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^ret = innerCumulativeProbability ( domain[0], k, 1, n, m, x ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P8_Replace_Mix]^ret = innerCumulativeProbability ( domain[3], x, 1, n, m, k ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P11_Insert_Donor_Statement]^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P13_Insert_Block]^if  ( x >=  ( domain[1] )  )  {     ret = 1.0; }else {     ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ; }^86^^^^^73^90^[Delete]^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P3_Replace_Literal]^ret = innerCumulativeProbability ( domain[-9], x, 1, n, m, k ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P3_Replace_Literal]^ret = innerCumulativeProbability ( domain[0], x, n, n, m, k ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^ret = innerCumulativeProbability ( domain[0], x, 1, x, m, k ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, x ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^ret = innerCumulativeProbability ( m[0], x, 1, n, domain, k ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P14_Delete_Statement]^^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P3_Replace_Literal]^ret = 9.0;^84^^^^^73^90^ret = 1.0;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P8_Replace_Mix]^ret = 1.0d;^84^^^^^73^90^ret = 1.0;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P11_Insert_Donor_Statement]^ret = 0.0;ret = 1.0;^84^^^^^73^90^ret = 1.0;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P3_Replace_Literal]^ret = 0.16666666666666666;^84^^^^^73^90^ret = 1.0;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P8_Replace_Mix]^ret = 3.0d;^84^^^^^73^90^ret = 1.0;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P3_Replace_Literal]^ret = innerCumulativeProbability ( domain[5], x, 1, n, m, k ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P3_Replace_Literal]^ret = innerCumulativeProbability ( domain[0], x, k, n, m, k ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^ret = innerCumulativeProbability ( domain[0], numberOfSuccesses, 1, n, m, k ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^ret = innerCumulativeProbability ( n[0], x, 1, domain, m, k ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^ret = innerCumulativeProbability ( domain[0], n, 1, x, m, k ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^ret = innerCumulativeProbability ( domain[0], x, 1, n, k, m ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P3_Replace_Literal]^ret = innerCumulativeProbability ( domain[k], x, 1, n, m, k ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P3_Replace_Literal]^ret = innerCumulativeProbability ( domain[0], x, -2, n, m, k ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^ret = innerCumulativeProbability ( domain[0], x, 1, m, n, k ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P8_Replace_Mix]^ret = 2.0d;^82^^^^^73^90^ret = 0.0;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P11_Insert_Donor_Statement]^ret = 1.0;ret = 0.0;^82^^^^^73^90^ret = 0.0;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P3_Replace_Literal]^} else if ( x >= domain[] )  {^83^^^^^73^90^} else if ( x >= domain[1] )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P3_Replace_Literal]^} else if ( x >= domain[4] )  {^83^^^^^73^90^} else if ( x >= domain[1] )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^} else if ( sampleSize >= domain[1] )  {^83^^^^^73^90^} else if ( x >= domain[1] )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P3_Replace_Literal]^ret = innerCumulativeProbability ( domain[-5], x, 1, n, m, k ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P3_Replace_Literal]^ret = innerCumulativeProbability ( domain[0], x, -4, n, m, k ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^ret = innerCumulativeProbability ( domain[0], x, 1, populationSize, m, k ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^ret = innerCumulativeProbability ( domain[0], x, 1, n, sampleSize, k ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P8_Replace_Mix]^ret = innerCumulativeProbability ( domain[4], x, 1, n, m, k ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P3_Replace_Literal]^ret = innerCumulativeProbability ( domain[0], x, 6, n, m, k ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^ret = innerCumulativeProbability ( domain[0], x, 1, n, populationSize, k ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P8_Replace_Mix]^ret = 1.0D;^84^^^^^73^90^ret = 1.0;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P8_Replace_Mix]^ret = 0.0d;^82^^^^^73^90^ret = 0.0;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P3_Replace_Literal]^ret = 3.0;^84^^^^^73^90^ret = 1.0;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P3_Replace_Literal]^ret = innerCumulativeProbability ( domain[n], x, 1, n, m, k ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P3_Replace_Literal]^ret = innerCumulativeProbability ( domain[0], x, 5, n, m, k ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^ret = innerCumulativeProbability ( domain[0], populationSize, 1, n, m, k ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, sampleSize ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P8_Replace_Mix]^ret = innerCumulativeProbability ( domain[2], x, 1, n, m, k ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P3_Replace_Literal]^ret = innerCumulativeProbability ( domain[0], x, populationSize, n, m, k ) ;^86^^^^^73^90^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^return xew int[]{^101^^^^^100^105^return new int[]{^[CLASS] HypergeometricDistributionImpl  [METHOD] getDomain [RETURN_TYPE] int[]   int n int m int k [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P8_Replace_Mix]^return sampleSizeew int[]{^101^^^^^100^105^return new int[]{^[CLASS] HypergeometricDistributionImpl  [METHOD] getDomain [RETURN_TYPE] int[]   int n int m int k [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P5_Replace_Variable]^getLowerDomain ( x, m, k ) , getUpperDomain ( m, k ) };^102^103^104^^^100^105^getLowerDomain ( n, m, k ) , getUpperDomain ( m, k ) };^[CLASS] HypergeometricDistributionImpl  [METHOD] getDomain [RETURN_TYPE] int[]   int n int m int k [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P5_Replace_Variable]^getLowerDomain ( n, x, k ) , getUpperDomain ( m, k ) };^102^103^104^^^100^105^getLowerDomain ( n, m, k ) , getUpperDomain ( m, k ) };^[CLASS] HypergeometricDistributionImpl  [METHOD] getDomain [RETURN_TYPE] int[]   int n int m int k [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P5_Replace_Variable]^getLowerDomain ( n, m, x ) , getUpperDomain ( m, k ) };^102^103^104^^^100^105^getLowerDomain ( n, m, k ) , getUpperDomain ( m, k ) };^[CLASS] HypergeometricDistributionImpl  [METHOD] getDomain [RETURN_TYPE] int[]   int n int m int k [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P5_Replace_Variable]^getLowerDomain (  m, k ) , getUpperDomain ( m, k ) };^102^103^104^^^100^105^getLowerDomain ( n, m, k ) , getUpperDomain ( m, k ) };^[CLASS] HypergeometricDistributionImpl  [METHOD] getDomain [RETURN_TYPE] int[]   int n int m int k [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P5_Replace_Variable]^getLowerDomain ( n,  k ) , getUpperDomain ( m, k ) };^102^103^104^^^100^105^getLowerDomain ( n, m, k ) , getUpperDomain ( m, k ) };^[CLASS] HypergeometricDistributionImpl  [METHOD] getDomain [RETURN_TYPE] int[]   int n int m int k [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P5_Replace_Variable]^getLowerDomain ( n, m ) , getUpperDomain ( m, k ) };^102^103^104^^^100^105^getLowerDomain ( n, m, k ) , getUpperDomain ( m, k ) };^[CLASS] HypergeometricDistributionImpl  [METHOD] getDomain [RETURN_TYPE] int[]   int n int m int k [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P5_Replace_Variable]^getLowerDomain ( k, m, n ) , getUpperDomain ( m, k ) };^102^103^104^^^100^105^getLowerDomain ( n, m, k ) , getUpperDomain ( m, k ) };^[CLASS] HypergeometricDistributionImpl  [METHOD] getDomain [RETURN_TYPE] int[]   int n int m int k [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P5_Replace_Variable]^getLowerDomain ( m, n, k ) , getUpperDomain ( m, k ) };^102^103^104^^^100^105^getLowerDomain ( n, m, k ) , getUpperDomain ( m, k ) };^[CLASS] HypergeometricDistributionImpl  [METHOD] getDomain [RETURN_TYPE] int[]   int n int m int k [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P5_Replace_Variable]^getLowerDomain ( n, k, m ) , getUpperDomain ( m, k ) };^102^103^104^^^100^105^getLowerDomain ( n, m, k ) , getUpperDomain ( m, k ) };^[CLASS] HypergeometricDistributionImpl  [METHOD] getDomain [RETURN_TYPE] int[]   int n int m int k [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P7_Replace_Invocation]^getDomain ( n, m, k ) , getUpperDomain ( m, k ) };^102^103^104^^^100^105^getLowerDomain ( n, m, k ) , getUpperDomain ( m, k ) };^[CLASS] HypergeometricDistributionImpl  [METHOD] getDomain [RETURN_TYPE] int[]   int n int m int k [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P8_Replace_Mix]^getLowerDomain ( sampleSize, m, k ) , getUpperDomain ( m, k ) };^102^103^104^^^100^105^getLowerDomain ( n, m, k ) , getUpperDomain ( m, k ) };^[CLASS] HypergeometricDistributionImpl  [METHOD] getDomain [RETURN_TYPE] int[]   int n int m int k [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P14_Delete_Statement]^^102^103^104^^^100^105^getLowerDomain ( n, m, k ) , getUpperDomain ( m, k ) };^[CLASS] HypergeometricDistributionImpl  [METHOD] getDomain [RETURN_TYPE] int[]   int n int m int k [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P5_Replace_Variable]^getUpperDomain ( x, k ) };^103^104^^^^100^105^getUpperDomain ( m, k ) };^[CLASS] HypergeometricDistributionImpl  [METHOD] getDomain [RETURN_TYPE] int[]   int n int m int k [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P5_Replace_Variable]^getUpperDomain ( m, sampleSize ) };^103^104^^^^100^105^getUpperDomain ( m, k ) };^[CLASS] HypergeometricDistributionImpl  [METHOD] getDomain [RETURN_TYPE] int[]   int n int m int k [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P5_Replace_Variable]^getUpperDomain (  k ) };^103^104^^^^100^105^getUpperDomain ( m, k ) };^[CLASS] HypergeometricDistributionImpl  [METHOD] getDomain [RETURN_TYPE] int[]   int n int m int k [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P5_Replace_Variable]^getUpperDomain ( m ) };^103^104^^^^100^105^getUpperDomain ( m, k ) };^[CLASS] HypergeometricDistributionImpl  [METHOD] getDomain [RETURN_TYPE] int[]   int n int m int k [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P5_Replace_Variable]^getUpperDomain ( k, m ) };^103^104^^^^100^105^getUpperDomain ( m, k ) };^[CLASS] HypergeometricDistributionImpl  [METHOD] getDomain [RETURN_TYPE] int[]   int n int m int k [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P14_Delete_Statement]^^103^104^^^^100^105^getUpperDomain ( m, k ) };^[CLASS] HypergeometricDistributionImpl  [METHOD] getDomain [RETURN_TYPE] int[]   int n int m int k [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P7_Replace_Invocation]^return getPopulationSize ( getPopulationSize (  ) , getNumberOfSuccesses (  ) , getSampleSize (  )  ) ;^116^117^^^^115^118^return getLowerDomain ( getPopulationSize (  ) , getNumberOfSuccesses (  ) , getSampleSize (  )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] getDomainLowerBound [RETURN_TYPE] int   double p [VARIABLES] boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  p  
[P7_Replace_Invocation]^return getLowerDomain ( getSampleSize (  ) , getNumberOfSuccesses (  ) , getSampleSize (  )  ) ;^116^117^^^^115^118^return getLowerDomain ( getPopulationSize (  ) , getNumberOfSuccesses (  ) , getSampleSize (  )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] getDomainLowerBound [RETURN_TYPE] int   double p [VARIABLES] boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  p  
[P7_Replace_Invocation]^return getLowerDomain ( getPopulationSize (  ) , getSampleSize (  ) , getSampleSize (  )  ) ;^116^117^^^^115^118^return getLowerDomain ( getPopulationSize (  ) , getNumberOfSuccesses (  ) , getSampleSize (  )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] getDomainLowerBound [RETURN_TYPE] int   double p [VARIABLES] boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  p  
[P7_Replace_Invocation]^return getLowerDomain ( getPopulationSize (  ) , getNumberOfSuccesses (  ) , getPopulationSize (  )  ) ;^116^117^^^^115^118^return getLowerDomain ( getPopulationSize (  ) , getNumberOfSuccesses (  ) , getSampleSize (  )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] getDomainLowerBound [RETURN_TYPE] int   double p [VARIABLES] boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  p  
[P14_Delete_Statement]^^116^117^^^^115^118^return getLowerDomain ( getPopulationSize (  ) , getNumberOfSuccesses (  ) , getSampleSize (  )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] getDomainLowerBound [RETURN_TYPE] int   double p [VARIABLES] boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  p  
[P7_Replace_Invocation]^getPopulationSize (  )  ) ;^117^^^^^115^118^getSampleSize (  )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] getDomainLowerBound [RETURN_TYPE] int   double p [VARIABLES] boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  p  
[P14_Delete_Statement]^^117^^^^^115^118^getSampleSize (  )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] getDomainLowerBound [RETURN_TYPE] int   double p [VARIABLES] boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  p  
[P11_Insert_Donor_Statement]^setSampleSize ( sampleSize ) ;getSampleSize (  )  ) ;^117^^^^^115^118^getSampleSize (  )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] getDomainLowerBound [RETURN_TYPE] int   double p [VARIABLES] boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  p  
[P11_Insert_Donor_Statement]^int k = getSampleSize (  ) ;getSampleSize (  )  ) ;^117^^^^^115^118^getSampleSize (  )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] getDomainLowerBound [RETURN_TYPE] int   double p [VARIABLES] boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  p  
[P7_Replace_Invocation]^return getPopulationSize ( getSampleSize (  ) , getNumberOfSuccesses (  )  ) ;^129^^^^^128^130^return getUpperDomain ( getSampleSize (  ) , getNumberOfSuccesses (  )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] getDomainUpperBound [RETURN_TYPE] int   double p [VARIABLES] boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  p  
[P7_Replace_Invocation]^return getUpperDomain ( getPopulationSize (  ) , getNumberOfSuccesses (  )  ) ;^129^^^^^128^130^return getUpperDomain ( getSampleSize (  ) , getNumberOfSuccesses (  )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] getDomainUpperBound [RETURN_TYPE] int   double p [VARIABLES] boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  p  
[P7_Replace_Invocation]^return getUpperDomain ( getSampleSize (  ) , getSampleSize (  )  ) ;^129^^^^^128^130^return getUpperDomain ( getSampleSize (  ) , getNumberOfSuccesses (  )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] getDomainUpperBound [RETURN_TYPE] int   double p [VARIABLES] boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  p  
[P14_Delete_Statement]^^129^^^^^128^130^return getUpperDomain ( getSampleSize (  ) , getNumberOfSuccesses (  )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] getDomainUpperBound [RETURN_TYPE] int   double p [VARIABLES] boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  p  
[P2_Replace_Operator]^return Math.max ( 0, m  <<   ( n - k )  ) ;^141^^^^^140^142^return Math.max ( 0, m -  ( n - k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] getLowerDomain [RETURN_TYPE] int   int n int m int k [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P2_Replace_Operator]^return Math.max ( 0, m -  ( n  |  k )  ) ;^141^^^^^140^142^return Math.max ( 0, m -  ( n - k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] getLowerDomain [RETURN_TYPE] int   int n int m int k [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P3_Replace_Literal]^return Math.max ( m, m -  ( n - k )  ) ;^141^^^^^140^142^return Math.max ( 0, m -  ( n - k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] getLowerDomain [RETURN_TYPE] int   int n int m int k [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P5_Replace_Variable]^return Math.max ( 0, sampleSize -  ( n - k )  ) ;^141^^^^^140^142^return Math.max ( 0, m -  ( n - k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] getLowerDomain [RETURN_TYPE] int   int n int m int k [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P5_Replace_Variable]^return Math.max ( 0, m -  ( sampleSize - k )  ) ;^141^^^^^140^142^return Math.max ( 0, m -  ( n - k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] getLowerDomain [RETURN_TYPE] int   int n int m int k [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P5_Replace_Variable]^return Math.max ( 0, m -  ( n - x )  ) ;^141^^^^^140^142^return Math.max ( 0, m -  ( n - k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] getLowerDomain [RETURN_TYPE] int   int n int m int k [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P5_Replace_Variable]^return Math.max ( 0 -  ( n - k )  ) ;^141^^^^^140^142^return Math.max ( 0, m -  ( n - k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] getLowerDomain [RETURN_TYPE] int   int n int m int k [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P5_Replace_Variable]^return Math.max ( 0, n -  ( m - k )  ) ;^141^^^^^140^142^return Math.max ( 0, m -  ( n - k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] getLowerDomain [RETURN_TYPE] int   int n int m int k [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P5_Replace_Variable]^return Math.max ( 0, k -  ( n - m )  ) ;^141^^^^^140^142^return Math.max ( 0, m -  ( n - k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] getLowerDomain [RETURN_TYPE] int   int n int m int k [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P7_Replace_Invocation]^return Math .min ( n , x )  ;^141^^^^^140^142^return Math.max ( 0, m -  ( n - k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] getLowerDomain [RETURN_TYPE] int   int n int m int k [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P8_Replace_Mix]^return Math .min ( n , m )  ;^141^^^^^140^142^return Math.max ( 0, m -  ( n - k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] getLowerDomain [RETURN_TYPE] int   int n int m int k [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P2_Replace_Operator]^return Math.max ( 0, m  >>   ( n - k )  ) ;^141^^^^^140^142^return Math.max ( 0, m -  ( n - k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] getLowerDomain [RETURN_TYPE] int   int n int m int k [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P2_Replace_Operator]^return Math.max ( 0, m -  ( n  ==  k )  ) ;^141^^^^^140^142^return Math.max ( 0, m -  ( n - k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] getLowerDomain [RETURN_TYPE] int   int n int m int k [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P3_Replace_Literal]^return Math.max ( -9, m -  ( n - k )  ) ;^141^^^^^140^142^return Math.max ( 0, m -  ( n - k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] getLowerDomain [RETURN_TYPE] int   int n int m int k [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P5_Replace_Variable]^return Math.max ( 0, m -  ( k - n )  ) ;^141^^^^^140^142^return Math.max ( 0, m -  ( n - k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] getLowerDomain [RETURN_TYPE] int   int n int m int k [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P8_Replace_Mix]^return Math.max ( 0, x -  ( n - k )  ) ;^141^^^^^140^142^return Math.max ( 0, m -  ( n - k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] getLowerDomain [RETURN_TYPE] int   int n int m int k [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P14_Delete_Statement]^^141^^^^^140^142^return Math.max ( 0, m -  ( n - k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] getLowerDomain [RETURN_TYPE] int   int n int m int k [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P5_Replace_Variable]^return x;^149^^^^^148^150^return numberOfSuccesses;^[CLASS] HypergeometricDistributionImpl  [METHOD] getNumberOfSuccesses [RETURN_TYPE] int   [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P5_Replace_Variable]^return numberOfSuccesses;^157^^^^^156^158^return populationSize;^[CLASS] HypergeometricDistributionImpl  [METHOD] getPopulationSize [RETURN_TYPE] int   [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P5_Replace_Variable]^return x;^165^^^^^164^166^return sampleSize;^[CLASS] HypergeometricDistributionImpl  [METHOD] getSampleSize [RETURN_TYPE] int   [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P5_Replace_Variable]^return Math.min ( x, m ) ;^176^^^^^175^177^return Math.min ( k, m ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] getUpperDomain [RETURN_TYPE] int   int m int k [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P5_Replace_Variable]^return Math.min ( k, x ) ;^176^^^^^175^177^return Math.min ( k, m ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] getUpperDomain [RETURN_TYPE] int   int m int k [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P5_Replace_Variable]^return Math.min (  m ) ;^176^^^^^175^177^return Math.min ( k, m ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] getUpperDomain [RETURN_TYPE] int   int m int k [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P5_Replace_Variable]^return Math.min ( k ) ;^176^^^^^175^177^return Math.min ( k, m ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] getUpperDomain [RETURN_TYPE] int   int m int k [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P5_Replace_Variable]^return Math.min ( m, k ) ;^176^^^^^175^177^return Math.min ( k, m ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] getUpperDomain [RETURN_TYPE] int   int m int k [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P7_Replace_Invocation]^return Math.max ( k, m ) ;^176^^^^^175^177^return Math.min ( k, m ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] getUpperDomain [RETURN_TYPE] int   int m int k [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P5_Replace_Variable]^return Math.min ( sampleSize, m ) ;^176^^^^^175^177^return Math.min ( k, m ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] getUpperDomain [RETURN_TYPE] int   int m int k [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P14_Delete_Statement]^^176^^^^^175^177^return Math.min ( k, m ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] getUpperDomain [RETURN_TYPE] int   int m int k [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P1_Replace_Type]^int ret;^186^^^^^185^200^double ret;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P1_Replace_Type]^long  n = getPopulationSize (  ) ;^188^^^^^185^200^int n = getPopulationSize (  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P7_Replace_Invocation]^int n = getSampleSize (  ) ;^188^^^^^185^200^int n = getPopulationSize (  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P11_Insert_Donor_Statement]^int m = getNumberOfSuccesses (  ) ;int n = getPopulationSize (  ) ;^188^^^^^185^200^int n = getPopulationSize (  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P11_Insert_Donor_Statement]^int k = getSampleSize (  ) ;int n = getPopulationSize (  ) ;^188^^^^^185^200^int n = getPopulationSize (  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P14_Delete_Statement]^^188^^^^^185^200^int n = getPopulationSize (  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P1_Replace_Type]^short  m = getNumberOfSuccesses (  ) ;^189^^^^^185^200^int m = getNumberOfSuccesses (  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P7_Replace_Invocation]^int m = getSampleSize (  ) ;^189^^^^^185^200^int m = getNumberOfSuccesses (  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P11_Insert_Donor_Statement]^int n = getPopulationSize (  ) ;int m = getNumberOfSuccesses (  ) ;^189^^^^^185^200^int m = getNumberOfSuccesses (  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P11_Insert_Donor_Statement]^int k = getSampleSize (  ) ;int m = getNumberOfSuccesses (  ) ;^189^^^^^185^200^int m = getNumberOfSuccesses (  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P14_Delete_Statement]^^189^190^^^^185^200^int m = getNumberOfSuccesses (  ) ; int k = getSampleSize (  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P1_Replace_Type]^short  k = getSampleSize (  ) ;^190^^^^^185^200^int k = getSampleSize (  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P7_Replace_Invocation]^int k = getPopulationSize (  ) ;^190^^^^^185^200^int k = getSampleSize (  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P11_Insert_Donor_Statement]^int n = getPopulationSize (  ) ;int k = getSampleSize (  ) ;^190^^^^^185^200^int k = getSampleSize (  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P11_Insert_Donor_Statement]^int m = getNumberOfSuccesses (  ) ;int k = getSampleSize (  ) ;^190^^^^^185^200^int k = getSampleSize (  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P14_Delete_Statement]^^190^^^^^185^200^int k = getSampleSize (  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P11_Insert_Donor_Statement]^getSampleSize (  )  ) ;int k = getSampleSize (  ) ;^190^^^^^185^200^int k = getSampleSize (  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^int[] domain = getDomain ( populationSize, m, k ) ;^192^^^^^185^200^int[] domain = getDomain ( n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^int[] domain = getDomain ( n, sampleSize, k ) ;^192^^^^^185^200^int[] domain = getDomain ( n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^int[] domain = getDomain ( n, m, x ) ;^192^^^^^185^200^int[] domain = getDomain ( n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^int[] domain = getDomain (  m, k ) ;^192^^^^^185^200^int[] domain = getDomain ( n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^int[] domain = getDomain ( n,  k ) ;^192^^^^^185^200^int[] domain = getDomain ( n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^int[] domain = getDomain ( n, m ) ;^192^^^^^185^200^int[] domain = getDomain ( n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^int[] domain = getDomain ( k, m, n ) ;^192^^^^^185^200^int[] domain = getDomain ( n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^int[] domain = getDomain ( m, n, k ) ;^192^^^^^185^200^int[] domain = getDomain ( n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^int[] domain = getDomain ( n, k, m ) ;^192^^^^^185^200^int[] domain = getDomain ( n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P7_Replace_Invocation]^int[] domain = getLowerDomain ( n, m, k ) ;^192^^^^^185^200^int[] domain = getDomain ( n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P8_Replace_Mix]^int[] domain = getDomain ( x, m, k ) ;^192^^^^^185^200^int[] domain = getDomain ( n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P14_Delete_Statement]^^192^^^^^185^200^int[] domain = getDomain ( n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P2_Replace_Operator]^if ( x < domain[0] && x > domain[1] ) {^193^^^^^185^200^if ( x < domain[0] || x > domain[1] ) {^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P2_Replace_Operator]^if ( x <= domain[0] || x > domain[1] ) {^193^^^^^185^200^if ( x < domain[0] || x > domain[1] ) {^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P2_Replace_Operator]^if ( x < domain[0] || x >= domain[1] ) {^193^^^^^185^200^if ( x < domain[0] || x > domain[1] ) {^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P3_Replace_Literal]^if ( x < domain[sampleSize] || x > domain[1] ) {^193^^^^^185^200^if ( x < domain[0] || x > domain[1] ) {^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P3_Replace_Literal]^if ( x < domain[0] || x > domain[3] ) {^193^^^^^185^200^if ( x < domain[0] || x > domain[1] ) {^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^if ( populationSize < domain[0] || x > domain[1] ) {^193^^^^^185^200^if ( x < domain[0] || x > domain[1] ) {^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^if ( domain < x[0] || x > domain[1] ) {^193^^^^^185^200^if ( x < domain[0] || x > domain[1] ) {^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P6_Replace_Expression]^if ( x < domain[0] ) {^193^^^^^185^200^if ( x < domain[0] || x > domain[1] ) {^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P6_Replace_Expression]^if (  x > domain[1] ) {^193^^^^^185^200^if ( x < domain[0] || x > domain[1] ) {^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P15_Unwrap_Block]^ret = 0.0;^193^194^195^196^197^185^200^if ( x < domain[0] || x > domain[1] ) { ret = 0.0; } else { ret = probability ( n, m, k, x ) ; }^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P16_Remove_Block]^^193^194^195^196^197^185^200^if ( x < domain[0] || x > domain[1] ) { ret = 0.0; } else { ret = probability ( n, m, k, x ) ; }^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P13_Insert_Block]^if  ( x <  ( domain[0] )  )  {     ret = 1.0; }else     if  ( x >  ( domain[1] )  )  {         ret = 0.0;     }else {         ret = innerCumulativeProbability ( domain[1], x,  ( -1 ) , n, m, k ) ;     }^193^^^^^185^200^[Delete]^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P13_Insert_Block]^if  ( x <  ( domain[0] )  )  {     ret = 0.0; }else     if  ( x >=  ( domain[1] )  )  {         ret = 1.0;     }else {         ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;     }^193^^^^^185^200^[Delete]^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^ret = probability ( x, m, k, x ) ;^196^^^^^185^200^ret = probability ( n, m, k, x ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^ret = probability ( n, sampleSize, k, x ) ;^196^^^^^185^200^ret = probability ( n, m, k, x ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^ret = probability ( n, m, k, sampleSize ) ;^196^^^^^185^200^ret = probability ( n, m, k, x ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^ret = probability (  m, k, x ) ;^196^^^^^185^200^ret = probability ( n, m, k, x ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^ret = probability ( n,  k, x ) ;^196^^^^^185^200^ret = probability ( n, m, k, x ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^ret = probability ( n, m,  x ) ;^196^^^^^185^200^ret = probability ( n, m, k, x ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^ret = probability ( n, m, k ) ;^196^^^^^185^200^ret = probability ( n, m, k, x ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^ret = probability ( x, m, k, n ) ;^196^^^^^185^200^ret = probability ( n, m, k, x ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^ret = probability ( n, k, m, x ) ;^196^^^^^185^200^ret = probability ( n, m, k, x ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^ret = probability ( n, m, x, k ) ;^196^^^^^185^200^ret = probability ( n, m, k, x ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^ret = probability ( n, x, k, m ) ;^196^^^^^185^200^ret = probability ( n, m, k, x ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P11_Insert_Donor_Statement]^ret += probability ( n, m, k, x0 ) ;ret = probability ( n, m, k, x ) ;^196^^^^^185^200^ret = probability ( n, m, k, x ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^ret = probability ( n, x, k, x ) ;^196^^^^^185^200^ret = probability ( n, m, k, x ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^ret = probability ( n, m, x, x ) ;^196^^^^^185^200^ret = probability ( n, m, k, x ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^ret = probability ( n, m, k, populationSize ) ;^196^^^^^185^200^ret = probability ( n, m, k, x ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^ret = probability ( m, n, k, x ) ;^196^^^^^185^200^ret = probability ( n, m, k, x ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^ret = probability ( k, m, n, x ) ;^196^^^^^185^200^ret = probability ( n, m, k, x ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P14_Delete_Statement]^^196^^^^^185^200^ret = probability ( n, m, k, x ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P11_Insert_Donor_Statement]^double ret = probability ( n, m, k, x0 ) ;ret = probability ( n, m, k, x ) ;^196^^^^^185^200^ret = probability ( n, m, k, x ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P8_Replace_Mix]^ret = 3.0d;^194^^^^^185^200^ret = 0.0;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P11_Insert_Donor_Statement]^ret = 1.0;ret = 0.0;^194^^^^^185^200^ret = 0.0;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P8_Replace_Mix]^ret = 2.0d;^194^^^^^185^200^ret = 0.0;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^ret = probability ( n, m, sampleSize, x ) ;^196^^^^^185^200^ret = probability ( n, m, k, x ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^ret = probability ( sampleSize, m, k, x ) ;^196^^^^^185^200^ret = probability ( n, m, k, x ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P5_Replace_Variable]^ret = probability ( n, m, populationSize, x ) ;^196^^^^^185^200^ret = probability ( n, m, k, x ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  double  ret  
[P2_Replace_Operator]^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  + MathUtils.binomialCoefficientLog ( n  ==  m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^213^214^215^^^212^216^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  + MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P2_Replace_Operator]^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  !=  + MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^213^214^215^^^212^216^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  + MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P2_Replace_Operator]^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  + MathUtils.binomialCoefficientLog ( n  &&  m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^213^214^215^^^212^216^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  + MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P2_Replace_Operator]^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  + MathUtils.binomialCoefficientLog ( n - m, k  <=  x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^213^214^215^^^212^216^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  + MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P5_Replace_Variable]^return Math.exp ( MathUtils.binomialCoefficientLog ( x, x )  + MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^213^214^215^^^212^216^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  + MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P5_Replace_Variable]^return Math.exp ( MathUtils.binomialCoefficientLog ( m, sampleSize )  + MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^213^214^215^^^212^216^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  + MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P5_Replace_Variable]^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  + MathUtils.binomialCoefficientLog ( sampleSize - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^213^214^215^^^212^216^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  + MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P5_Replace_Variable]^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  + MathUtils.binomialCoefficientLog ( n - m, x - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^213^214^215^^^212^216^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  + MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P5_Replace_Variable]^return Math.exp ( MathUtils.binomialCoefficientLog (  x )  + MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^213^214^215^^^212^216^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  + MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P5_Replace_Variable]^return Math.exp ( MathUtils.binomialCoefficientLog ( m )  + MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^213^214^215^^^212^216^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  + MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P5_Replace_Variable]^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  + MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog (  k )  ) ;^213^214^215^^^212^216^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  + MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P5_Replace_Variable]^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  + MathUtils.binomialCoefficientLog ( n - m - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^213^214^215^^^212^216^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  + MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P5_Replace_Variable]^return Math.exp ( MathUtils.binomialCoefficientLog ( k, x )  + MathUtils.binomialCoefficientLog ( n - m, m - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^213^214^215^^^212^216^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  + MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P5_Replace_Variable]^return Math.exp ( MathUtils.binomialCoefficientLog ( m, k )  + MathUtils.binomialCoefficientLog ( n - m, x - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^213^214^215^^^212^216^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  + MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P5_Replace_Variable]^return Math.exp ( MathUtils.binomialCoefficientLog ( m, n )  + MathUtils.binomialCoefficientLog ( x - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^213^214^215^^^212^216^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  + MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P8_Replace_Mix]^return false ;^213^214^215^^^212^216^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  + MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P2_Replace_Operator]^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  + MathUtils.binomialCoefficientLog ( n  <=  m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^213^214^215^^^212^216^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  + MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P2_Replace_Operator]^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  ==  + MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^213^214^215^^^212^216^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  + MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P2_Replace_Operator]^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  + MathUtils.binomialCoefficientLog ( n  >=  m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^213^214^215^^^212^216^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  + MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P2_Replace_Operator]^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  + MathUtils.binomialCoefficientLog ( n - m, k  ==  x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^213^214^215^^^212^216^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  + MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P5_Replace_Variable]^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  + MathUtils.binomialCoefficientLog ( x - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^213^214^215^^^212^216^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  + MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P5_Replace_Variable]^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  + MathUtils.binomialCoefficientLog ( n - m, sampleSize - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^213^214^215^^^212^216^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  + MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P5_Replace_Variable]^return Math.exp ( MathUtils.binomialCoefficientLog ( x, m )  + MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^213^214^215^^^212^216^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  + MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P5_Replace_Variable]^return Math.exp ( MathUtils.binomialCoefficientLog ( n, x )  + MathUtils.binomialCoefficientLog ( m - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^213^214^215^^^212^216^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  + MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P8_Replace_Mix]^return Math.exp ( MathUtils.binomialCoefficientLog ( m, populationSize )  + MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^213^214^215^^^212^216^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  + MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P14_Delete_Statement]^^213^214^215^^^212^216^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  + MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P5_Replace_Variable]^return Math.exp ( MathUtils.binomialCoefficientLog ( populationSize, x )  + MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^213^214^215^^^212^216^return Math.exp ( MathUtils.binomialCoefficientLog ( m, x )  + MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P2_Replace_Operator]^MathUtils.binomialCoefficientLog ( n  |  m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^214^215^^^^212^216^MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P2_Replace_Operator]^MathUtils.binomialCoefficientLog ( n - m, k  <  x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^214^215^^^^212^216^MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P5_Replace_Variable]^MathUtils.binomialCoefficientLog ( x - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^214^215^^^^212^216^MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P5_Replace_Variable]^MathUtils.binomialCoefficientLog ( n - sampleSize, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^214^215^^^^212^216^MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P5_Replace_Variable]^MathUtils.binomialCoefficientLog ( n - m, sampleSize - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^214^215^^^^212^216^MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P5_Replace_Variable]^MathUtils.binomialCoefficientLog ( n - m, k - sampleSize )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^214^215^^^^212^216^MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P5_Replace_Variable]^MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog (  k )  ) ;^214^215^^^^212^216^MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P5_Replace_Variable]^MathUtils.binomialCoefficientLog ( n -  k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^214^215^^^^212^216^MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P5_Replace_Variable]^MathUtils.binomialCoefficientLog ( n - m - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^214^215^^^^212^216^MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P5_Replace_Variable]^MathUtils.binomialCoefficientLog ( m - n, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^214^215^^^^212^216^MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P5_Replace_Variable]^MathUtils.binomialCoefficientLog ( n - k, m - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^214^215^^^^212^216^MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P5_Replace_Variable]^MathUtils.binomialCoefficientLog ( n - m, x - k )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^214^215^^^^212^216^MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P8_Replace_Mix]^MathUtils.binomialCoefficientLog ( sampleSize - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^214^215^^^^212^216^MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P14_Delete_Statement]^^214^215^^^^212^216^MathUtils.binomialCoefficientLog ( n - m, k - x )  - MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P5_Replace_Variable]^MathUtils.binomialCoefficientLog ( x, k )  ) ;^215^^^^^212^216^MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P5_Replace_Variable]^MathUtils.binomialCoefficientLog ( n, x )  ) ;^215^^^^^212^216^MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P5_Replace_Variable]^MathUtils.binomialCoefficientLog (  k )  ) ;^215^^^^^212^216^MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P5_Replace_Variable]^MathUtils.binomialCoefficientLog ( n )  ) ;^215^^^^^212^216^MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P5_Replace_Variable]^MathUtils.binomialCoefficientLog ( k, n )  ) ;^215^^^^^212^216^MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P14_Delete_Statement]^^215^^^^^212^216^MathUtils.binomialCoefficientLog ( n, k )  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int n int m int k int x [VARIABLES] long  serialVersionUID  int  k  m  n  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P2_Replace_Operator]^if ( num > 0 ) {^224^^^^^223^229^if ( num < 0 ) {^[CLASS] HypergeometricDistributionImpl  [METHOD] setNumberOfSuccesses [RETURN_TYPE] void   int num [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P3_Replace_Literal]^if ( num < 2 ) {^224^^^^^223^229^if ( num < 0 ) {^[CLASS] HypergeometricDistributionImpl  [METHOD] setNumberOfSuccesses [RETURN_TYPE] void   int num [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P8_Replace_Mix]^if ( populationSize < 0 / 2 ) {^224^^^^^223^229^if ( num < 0 ) {^[CLASS] HypergeometricDistributionImpl  [METHOD] setNumberOfSuccesses [RETURN_TYPE] void   int num [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P9_Replace_Statement]^if  ( size < 0 )  {^224^^^^^223^229^if ( num < 0 ) {^[CLASS] HypergeometricDistributionImpl  [METHOD] setNumberOfSuccesses [RETURN_TYPE] void   int num [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P9_Replace_Statement]^if ( size <= 0 ) {^224^^^^^223^229^if ( num < 0 ) {^[CLASS] HypergeometricDistributionImpl  [METHOD] setNumberOfSuccesses [RETURN_TYPE] void   int num [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("number of successes must be non-negative.");^224^225^226^227^^223^229^if ( num < 0 ) { throw new IllegalArgumentException ( "number of successes must be non-negative." ) ; }^[CLASS] HypergeometricDistributionImpl  [METHOD] setNumberOfSuccesses [RETURN_TYPE] void   int num [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P16_Remove_Block]^^224^225^226^227^^223^229^if ( num < 0 ) { throw new IllegalArgumentException ( "number of successes must be non-negative." ) ; }^[CLASS] HypergeometricDistributionImpl  [METHOD] setNumberOfSuccesses [RETURN_TYPE] void   int num [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P13_Insert_Block]^if  ( size <= 0 )  {     throw new IllegalArgumentException ( "population size must be positive." ) ; }^224^^^^^223^229^[Delete]^[CLASS] HypergeometricDistributionImpl  [METHOD] setNumberOfSuccesses [RETURN_TYPE] void   int num [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P13_Insert_Block]^if  ( size < 0 )  {     throw new IllegalArgumentException ( "sample size must be non-negative." ) ; }^224^^^^^223^229^[Delete]^[CLASS] HypergeometricDistributionImpl  [METHOD] setNumberOfSuccesses [RETURN_TYPE] void   int num [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P13_Insert_Block]^if  ( numberOfSuccesses > populationSize )  {     throw new IllegalArgumentException (  ( "number of successes must be less than or equal to " + "population size" )  ) ; }^224^^^^^223^229^[Delete]^[CLASS] HypergeometricDistributionImpl  [METHOD] setNumberOfSuccesses [RETURN_TYPE] void   int num [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P13_Insert_Block]^if  ( sampleSize > populationSize )  {     throw new IllegalArgumentException ( "sample size must be less than or equal to population size" ) ; }^224^^^^^223^229^[Delete]^[CLASS] HypergeometricDistributionImpl  [METHOD] setNumberOfSuccesses [RETURN_TYPE] void   int num [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "number of successes must be no" ) ;^225^226^^^^223^229^throw new IllegalArgumentException ( "number of successes must be non-negative." ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] setNumberOfSuccesses [RETURN_TYPE] void   int num [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "population size must be positive." )  ;^225^226^^^^223^229^throw new IllegalArgumentException ( "number of successes must be non-negative." ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] setNumberOfSuccesses [RETURN_TYPE] void   int num [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P13_Insert_Block]^if  ( num < 0 )  {     throw new IllegalArgumentException ( "number of successes must be non-negative." ) ; }^225^^^^^223^229^[Delete]^[CLASS] HypergeometricDistributionImpl  [METHOD] setNumberOfSuccesses [RETURN_TYPE] void   int num [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P13_Insert_Block]^if  ( size < 0 )  {     throw new IllegalArgumentException ( "sample size must be non-negative." ) ; }^225^^^^^223^229^[Delete]^[CLASS] HypergeometricDistributionImpl  [METHOD] setNumberOfSuccesses [RETURN_TYPE] void   int num [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "sses muumber of successes must be non-negative." ) ;^225^226^^^^223^229^throw new IllegalArgumentException ( "number of successes must be non-negative." ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] setNumberOfSuccesses [RETURN_TYPE] void   int num [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P13_Insert_Block]^if  ( size <= 0 )  {     throw new IllegalArgumentException ( "population size must be positive." ) ; }^225^^^^^223^229^[Delete]^[CLASS] HypergeometricDistributionImpl  [METHOD] setNumberOfSuccesses [RETURN_TYPE] void   int num [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "n-negaumber of successes must be non-negative." ) ;^225^226^^^^223^229^throw new IllegalArgumentException ( "number of successes must be non-negative." ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] setNumberOfSuccesses [RETURN_TYPE] void   int num [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "be non-number of successes must be non-negative." ) ;^225^226^^^^223^229^throw new IllegalArgumentException ( "number of successes must be non-negative." ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] setNumberOfSuccesses [RETURN_TYPE] void   int num [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P5_Replace_Variable]^numberOfSuccesses = sampleSize;^228^^^^^223^229^numberOfSuccesses = num;^[CLASS] HypergeometricDistributionImpl  [METHOD] setNumberOfSuccesses [RETURN_TYPE] void   int num [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P8_Replace_Mix]^numberOfSuccesses =  x;^228^^^^^223^229^numberOfSuccesses = num;^[CLASS] HypergeometricDistributionImpl  [METHOD] setNumberOfSuccesses [RETURN_TYPE] void   int num [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  x  boolean  
[P2_Replace_Operator]^if ( size > 0 ) {^237^^^^^236^242^if ( size <= 0 ) {^[CLASS] HypergeometricDistributionImpl  [METHOD] setPopulationSize [RETURN_TYPE] void   int size [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  boolean  
[P3_Replace_Literal]^if ( size <= m ) {^237^^^^^236^242^if ( size <= 0 ) {^[CLASS] HypergeometricDistributionImpl  [METHOD] setPopulationSize [RETURN_TYPE] void   int size [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  boolean  
[P5_Replace_Variable]^if ( populationSize <= 0 ) {^237^^^^^236^242^if ( size <= 0 ) {^[CLASS] HypergeometricDistributionImpl  [METHOD] setPopulationSize [RETURN_TYPE] void   int size [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  boolean  
[P8_Replace_Mix]^if ( size <= 0  ) {^237^^^^^236^242^if ( size <= 0 ) {^[CLASS] HypergeometricDistributionImpl  [METHOD] setPopulationSize [RETURN_TYPE] void   int size [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  boolean  
[P9_Replace_Statement]^if ( num < 0 ) {^237^^^^^236^242^if ( size <= 0 ) {^[CLASS] HypergeometricDistributionImpl  [METHOD] setPopulationSize [RETURN_TYPE] void   int size [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  boolean  
[P9_Replace_Statement]^if  ( size < 0 )  {^237^^^^^236^242^if ( size <= 0 ) {^[CLASS] HypergeometricDistributionImpl  [METHOD] setPopulationSize [RETURN_TYPE] void   int size [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  boolean  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("population size must be positive.");^237^238^239^240^^236^242^if ( size <= 0 ) { throw new IllegalArgumentException ( "population size must be positive." ) ; }^[CLASS] HypergeometricDistributionImpl  [METHOD] setPopulationSize [RETURN_TYPE] void   int size [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  boolean  
[P16_Remove_Block]^^237^238^239^240^^236^242^if ( size <= 0 ) { throw new IllegalArgumentException ( "population size must be positive." ) ; }^[CLASS] HypergeometricDistributionImpl  [METHOD] setPopulationSize [RETURN_TYPE] void   int size [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  boolean  
[P13_Insert_Block]^if  ( num < 0 )  {     throw new IllegalArgumentException ( "number of successes must be non-negative." ) ; }^237^^^^^236^242^[Delete]^[CLASS] HypergeometricDistributionImpl  [METHOD] setPopulationSize [RETURN_TYPE] void   int size [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  boolean  
[P13_Insert_Block]^if  ( size < 0 )  {     throw new IllegalArgumentException ( "sample size must be non-negative." ) ; }^237^^^^^236^242^[Delete]^[CLASS] HypergeometricDistributionImpl  [METHOD] setPopulationSize [RETURN_TYPE] void   int size [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  boolean  
[P13_Insert_Block]^if  ( sampleSize > populationSize )  {     throw new IllegalArgumentException ( "sample size must be less than or equal to population size" ) ; }^237^^^^^236^242^[Delete]^[CLASS] HypergeometricDistributionImpl  [METHOD] setPopulationSize [RETURN_TYPE] void   int size [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  boolean  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "ion size must be positopulation size must be positive." ) ;^238^239^^^^236^242^throw new IllegalArgumentException ( "population size must be positive." ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] setPopulationSize [RETURN_TYPE] void   int size [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  boolean  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "number of successes must be non-negative." )  ;^238^239^^^^236^242^throw new IllegalArgumentException ( "population size must be positive." ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] setPopulationSize [RETURN_TYPE] void   int size [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  boolean  
[P13_Insert_Block]^if  ( size <= 0 )  {     throw new IllegalArgumentException ( "population size must be positive." ) ; }^238^^^^^236^242^[Delete]^[CLASS] HypergeometricDistributionImpl  [METHOD] setPopulationSize [RETURN_TYPE] void   int size [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  boolean  
[P13_Insert_Block]^if  ( num < 0 )  {     throw new IllegalArgumentException ( "number of successes must be non-negative." ) ; }^238^^^^^236^242^[Delete]^[CLASS] HypergeometricDistributionImpl  [METHOD] setPopulationSize [RETURN_TYPE] void   int size [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  boolean  
[P13_Insert_Block]^if  ( size < 0 )  {     throw new IllegalArgumentException ( "sample size must be non-negative." ) ; }^238^^^^^236^242^[Delete]^[CLASS] HypergeometricDistributionImpl  [METHOD] setPopulationSize [RETURN_TYPE] void   int size [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  boolean  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "population size must be positive. must be posit" ) ;^238^239^^^^236^242^throw new IllegalArgumentException ( "population size must be positive." ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] setPopulationSize [RETURN_TYPE] void   int size [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  boolean  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "population size must be positive.ze must be" ) ;^238^239^^^^236^242^throw new IllegalArgumentException ( "population size must be positive." ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] setPopulationSize [RETURN_TYPE] void   int size [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  boolean  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "population size must be positive.ion size m" ) ;^238^239^^^^236^242^throw new IllegalArgumentException ( "population size must be positive." ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] setPopulationSize [RETURN_TYPE] void   int size [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  boolean  
[P5_Replace_Variable]^populationSize = sampleSize;^241^^^^^236^242^populationSize = size;^[CLASS] HypergeometricDistributionImpl  [METHOD] setPopulationSize [RETURN_TYPE] void   int size [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  boolean  
[P8_Replace_Mix]^populationSize =  numberOfSuccesses;^241^^^^^236^242^populationSize = size;^[CLASS] HypergeometricDistributionImpl  [METHOD] setPopulationSize [RETURN_TYPE] void   int size [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  boolean  
[P11_Insert_Donor_Statement]^sampleSize = size;populationSize = size;^241^^^^^236^242^populationSize = size;^[CLASS] HypergeometricDistributionImpl  [METHOD] setPopulationSize [RETURN_TYPE] void   int size [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  boolean  
[P2_Replace_Operator]^if  ( size <= 0 )  {^250^^^^^249^255^if  ( size < 0 )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] setSampleSize [RETURN_TYPE] void   int size [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  boolean  
[P3_Replace_Literal]^if  ( size < populationSize )  {^250^^^^^249^255^if  ( size < 0 )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] setSampleSize [RETURN_TYPE] void   int size [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  boolean  
[P5_Replace_Variable]^if  ( numberOfSuccesses < 0 )  {^250^^^^^249^255^if  ( size < 0 )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] setSampleSize [RETURN_TYPE] void   int size [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  boolean  
[P8_Replace_Mix]^if  ( size < 0  )  {^250^^^^^249^255^if  ( size < 0 )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] setSampleSize [RETURN_TYPE] void   int size [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  boolean  
[P9_Replace_Statement]^if ( num < 0 ) {^250^^^^^249^255^if  ( size < 0 )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] setSampleSize [RETURN_TYPE] void   int size [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  boolean  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("sample size must be non-negative.");^250^251^252^253^^249^255^if  ( size < 0 )  { throw new IllegalArgumentException ( "sample size must be non-negative." ) ; }^[CLASS] HypergeometricDistributionImpl  [METHOD] setSampleSize [RETURN_TYPE] void   int size [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  boolean  
[P16_Remove_Block]^^250^251^252^253^^249^255^if  ( size < 0 )  { throw new IllegalArgumentException ( "sample size must be non-negative." ) ; }^[CLASS] HypergeometricDistributionImpl  [METHOD] setSampleSize [RETURN_TYPE] void   int size [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  boolean  
[P13_Insert_Block]^if  ( size <= 0 )  {     throw new IllegalArgumentException ( "population size must be positive." ) ; }^250^^^^^249^255^[Delete]^[CLASS] HypergeometricDistributionImpl  [METHOD] setSampleSize [RETURN_TYPE] void   int size [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  boolean  
[P13_Insert_Block]^if  ( num < 0 )  {     throw new IllegalArgumentException ( "number of successes must be non-negative." ) ; }^250^^^^^249^255^[Delete]^[CLASS] HypergeometricDistributionImpl  [METHOD] setSampleSize [RETURN_TYPE] void   int size [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  boolean  
[P13_Insert_Block]^if  ( numberOfSuccesses > populationSize )  {     throw new IllegalArgumentException (  ( "number of successes must be less than or equal to " + "population size" )  ) ; }^250^^^^^249^255^[Delete]^[CLASS] HypergeometricDistributionImpl  [METHOD] setSampleSize [RETURN_TYPE] void   int size [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  boolean  
[P13_Insert_Block]^if  ( sampleSize > populationSize )  {     throw new IllegalArgumentException ( "sample size must be less than or equal to population size" ) ; }^250^^^^^249^255^[Delete]^[CLASS] HypergeometricDistributionImpl  [METHOD] setSampleSize [RETURN_TYPE] void   int size [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  boolean  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "sample size must be non-negative.t be non-ne" ) ;^251^252^^^^249^255^throw new IllegalArgumentException ( "sample size must be non-negative." ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] setSampleSize [RETURN_TYPE] void   int size [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  boolean  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "population size must be positive." )  ;^251^252^^^^249^255^throw new IllegalArgumentException ( "sample size must be non-negative." ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] setSampleSize [RETURN_TYPE] void   int size [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  boolean  
[P13_Insert_Block]^if  ( size <= 0 )  {     throw new IllegalArgumentException ( "population size must be positive." ) ; }^251^^^^^249^255^[Delete]^[CLASS] HypergeometricDistributionImpl  [METHOD] setSampleSize [RETURN_TYPE] void   int size [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  boolean  
[P13_Insert_Block]^if  ( num < 0 )  {     throw new IllegalArgumentException ( "number of successes must be non-negative." ) ; }^251^^^^^249^255^[Delete]^[CLASS] HypergeometricDistributionImpl  [METHOD] setSampleSize [RETURN_TYPE] void   int size [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  boolean  
[P13_Insert_Block]^if  ( size < 0 )  {     throw new IllegalArgumentException ( "sample size must be non-negative." ) ; }^251^^^^^249^255^[Delete]^[CLASS] HypergeometricDistributionImpl  [METHOD] setSampleSize [RETURN_TYPE] void   int size [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  boolean  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "e must be non-negatample size must be non-negative." ) ;^251^252^^^^249^255^throw new IllegalArgumentException ( "sample size must be non-negative." ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] setSampleSize [RETURN_TYPE] void   int size [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  boolean  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "sample size must be non-negative.mp" ) ;^251^252^^^^249^255^throw new IllegalArgumentException ( "sample size must be non-negative." ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] setSampleSize [RETURN_TYPE] void   int size [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  boolean  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "e non-negativeample size must be non-negative." ) ;^251^252^^^^249^255^throw new IllegalArgumentException ( "sample size must be non-negative." ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] setSampleSize [RETURN_TYPE] void   int size [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  boolean  
[P8_Replace_Mix]^throw new IllegalArgumentException ( "number of successes must be less than or equal to " + ;^251^252^^^^249^255^throw new IllegalArgumentException ( "sample size must be non-negative." ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] setSampleSize [RETURN_TYPE] void   int size [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  boolean  
[P8_Replace_Mix]^sampleSize =  x;^254^^^^^249^255^sampleSize = size;^[CLASS] HypergeometricDistributionImpl  [METHOD] setSampleSize [RETURN_TYPE] void   int size [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  boolean  
[P11_Insert_Donor_Statement]^populationSize = size;sampleSize = size;^254^^^^^249^255^sampleSize = size;^[CLASS] HypergeometricDistributionImpl  [METHOD] setSampleSize [RETURN_TYPE] void   int size [VARIABLES] long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  boolean  
[P1_Replace_Type]^int ret;^264^^^^^263^280^double ret;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P1_Replace_Type]^short  n = getPopulationSize (  ) ;^266^^^^^263^280^int n = getPopulationSize (  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P7_Replace_Invocation]^int n = getSampleSize (  ) ;^266^^^^^263^280^int n = getPopulationSize (  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P11_Insert_Donor_Statement]^int m = getNumberOfSuccesses (  ) ;int n = getPopulationSize (  ) ;^266^^^^^263^280^int n = getPopulationSize (  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P11_Insert_Donor_Statement]^int k = getSampleSize (  ) ;int n = getPopulationSize (  ) ;^266^^^^^263^280^int n = getPopulationSize (  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P14_Delete_Statement]^^266^267^^^^263^280^int n = getPopulationSize (  ) ; int m = getNumberOfSuccesses (  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P1_Replace_Type]^long  m = getNumberOfSuccesses (  ) ;^267^^^^^263^280^int m = getNumberOfSuccesses (  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P7_Replace_Invocation]^int m = getSampleSize (  ) ;^267^^^^^263^280^int m = getNumberOfSuccesses (  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P11_Insert_Donor_Statement]^int n = getPopulationSize (  ) ;int m = getNumberOfSuccesses (  ) ;^267^^^^^263^280^int m = getNumberOfSuccesses (  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P11_Insert_Donor_Statement]^int k = getSampleSize (  ) ;int m = getNumberOfSuccesses (  ) ;^267^^^^^263^280^int m = getNumberOfSuccesses (  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P14_Delete_Statement]^^267^^^^^263^280^int m = getNumberOfSuccesses (  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P1_Replace_Type]^long  k = getSampleSize (  ) ;^268^^^^^263^280^int k = getSampleSize (  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P7_Replace_Invocation]^int k = getPopulationSize (  ) ;^268^^^^^263^280^int k = getSampleSize (  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P11_Insert_Donor_Statement]^int n = getPopulationSize (  ) ;int k = getSampleSize (  ) ;^268^^^^^263^280^int k = getSampleSize (  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P11_Insert_Donor_Statement]^int m = getNumberOfSuccesses (  ) ;int k = getSampleSize (  ) ;^268^^^^^263^280^int k = getSampleSize (  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P14_Delete_Statement]^^268^^^^^263^280^int k = getSampleSize (  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P11_Insert_Donor_Statement]^getSampleSize (  )  ) ;int k = getSampleSize (  ) ;^268^^^^^263^280^int k = getSampleSize (  ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P5_Replace_Variable]^int[] domain = getDomain ( sampleSize, m, k ) ;^270^^^^^263^280^int[] domain = getDomain ( n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P5_Replace_Variable]^int[] domain = getDomain ( n, populationSize, k ) ;^270^^^^^263^280^int[] domain = getDomain ( n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P5_Replace_Variable]^int[] domain = getDomain ( n, m, x ) ;^270^^^^^263^280^int[] domain = getDomain ( n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P5_Replace_Variable]^int[] domain = getDomain (  m, k ) ;^270^^^^^263^280^int[] domain = getDomain ( n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P5_Replace_Variable]^int[] domain = getDomain ( n,  k ) ;^270^^^^^263^280^int[] domain = getDomain ( n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P5_Replace_Variable]^int[] domain = getDomain ( n, m ) ;^270^^^^^263^280^int[] domain = getDomain ( n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P5_Replace_Variable]^int[] domain = getDomain ( k, m, n ) ;^270^^^^^263^280^int[] domain = getDomain ( n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P5_Replace_Variable]^int[] domain = getDomain ( m, n, k ) ;^270^^^^^263^280^int[] domain = getDomain ( n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P5_Replace_Variable]^int[] domain = getDomain ( n, k, m ) ;^270^^^^^263^280^int[] domain = getDomain ( n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P7_Replace_Invocation]^int[] domain = getLowerDomain ( n, m, k ) ;^270^^^^^263^280^int[] domain = getDomain ( n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P8_Replace_Mix]^int[] domain = getDomain ( populationSize, m, k ) ;^270^^^^^263^280^int[] domain = getDomain ( n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P5_Replace_Variable]^int[] domain = getDomain ( size, m, k ) ;^270^^^^^263^280^int[] domain = getDomain ( n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P5_Replace_Variable]^int[] domain = getDomain ( n, m, size ) ;^270^^^^^263^280^int[] domain = getDomain ( n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P14_Delete_Statement]^^270^^^^^263^280^int[] domain = getDomain ( n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P2_Replace_Operator]^if  ( x == domain[0] )  {^271^^^^^263^280^if  ( x < domain[0] )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P3_Replace_Literal]^if  ( x < domain[num] )  {^271^^^^^263^280^if  ( x < domain[0] )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P5_Replace_Variable]^if  ( size < domain[0] )  {^271^^^^^263^280^if  ( x < domain[0] )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P6_Replace_Expression]^if  ( x > domain[1] )  {^271^^^^^263^280^if  ( x < domain[0] )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P8_Replace_Mix]^if  ( size < domain[0 >>> 2] )  {^271^^^^^263^280^if  ( x < domain[0] )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P13_Insert_Block]^if  ( x >=  ( domain[1] )  )  {     ret = 1.0; }else {     ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ; }^271^^^^^263^280^[Delete]^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P13_Insert_Block]^if  (  ( x <  ( domain[0] )  )  ||  ( x >  ( domain[1] )  )  )  {     ret = 0.0; }else {     ret = probability ( n, m, k, x ) ; }^271^^^^^263^280^[Delete]^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P13_Insert_Block]^if  ( x <  ( domain[0] )  )  {     ret = 0.0; }else     if  ( x >=  ( domain[1] )  )  {         ret = 1.0;     }else {         ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;     }^271^^^^^263^280^[Delete]^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P13_Insert_Block]^if  ( x >  ( domain[1] )  )  {     ret = 0.0; }else {     ret = innerCumulativeProbability ( domain[1], x,  ( -1 ) , n, m, k ) ; }^271^^^^^263^280^[Delete]^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P2_Replace_Operator]^} else if ( x >= domain[1] )  {^273^^^^^263^280^} else if ( x > domain[1] )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P3_Replace_Literal]^} else if ( x > domain[-8] )  {^273^^^^^263^280^} else if ( x > domain[1] )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P3_Replace_Literal]^} else if ( x > domain[-4] )  {^273^^^^^263^280^} else if ( x > domain[1] )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P3_Replace_Literal]^} else if ( x > domain[n] )  {^273^^^^^263^280^} else if ( x > domain[1] )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P6_Replace_Expression]^} else {^273^^^^^263^280^} else if ( x > domain[1] )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P8_Replace_Mix]^}  if ( x > domain[4] )  {^273^^^^^263^280^} else if ( x > domain[1] )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P15_Unwrap_Block]^ret = 0.0;^273^274^275^276^277^263^280^} else if ( x > domain[1] )  { ret = 0.0; } else { ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ; }^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P16_Remove_Block]^^273^274^275^276^277^263^280^} else if ( x > domain[1] )  { ret = 0.0; } else { ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ; }^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P3_Replace_Literal]^ret = innerCumulativeProbability ( domain[sampleSize], x, -sampleSize, n, m, k ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P3_Replace_Literal]^ret = innerCumulativeProbability ( domain[k], x, -k, n, m, k ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P5_Replace_Variable]^ret = innerCumulativeProbability ( domain[1], size, -1, n, m, k ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P5_Replace_Variable]^ret = innerCumulativeProbability ( domain[1], x, -1, size, m, k ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P5_Replace_Variable]^ret = innerCumulativeProbability ( domain[1], x, -1, n, size, k ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P5_Replace_Variable]^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, sampleSize ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P5_Replace_Variable]^ret = innerCumulativeProbability ( domain[1],  -1, n, m, k ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P5_Replace_Variable]^ret = innerCumulativeProbability ( domain[1], x, -1,  m, k ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P5_Replace_Variable]^ret = innerCumulativeProbability ( domain[1], x, -1, n,  k ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P5_Replace_Variable]^ret = innerCumulativeProbability ( domain[1], x, -1, n, m ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P5_Replace_Variable]^ret = innerCumulativeProbability ( k[1], x, -1, n, m, domain ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P5_Replace_Variable]^ret = innerCumulativeProbability ( domain[1], m, -1, n, x, k ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P5_Replace_Variable]^ret = innerCumulativeProbability ( domain[1], x, -1, m, n, k ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P5_Replace_Variable]^ret = innerCumulativeProbability ( domain[1], x, -1, n, k, m ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P8_Replace_Mix]^ret = innerCumulativeProbability ( domain[0], x, -0, n, m, k ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P11_Insert_Donor_Statement]^ret = innerCumulativeProbability ( domain[0], x, 1, n, m, k ) ;ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P13_Insert_Block]^if  ( x >  ( domain[1] )  )  {     ret = 0.0; }else {     ret = innerCumulativeProbability ( domain[1], x,  ( -1 ) , n, m, k ) ; }^276^^^^^263^280^[Delete]^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P3_Replace_Literal]^ret = innerCumulativeProbability ( domain[m], x, -m, n, m, k ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P5_Replace_Variable]^ret = innerCumulativeProbability ( domain[1], populationSize, -1, n, m, k ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P5_Replace_Variable]^ret = innerCumulativeProbability ( domain[1], x, -1, sampleSize, m, k ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P5_Replace_Variable]^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, populationSize ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P5_Replace_Variable]^ret = innerCumulativeProbability ( domain[1], n, -1, x, m, k ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P5_Replace_Variable]^ret = innerCumulativeProbability ( domain[1], x, -1, k, m, n ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P14_Delete_Statement]^^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P8_Replace_Mix]^ret = 2.0d;^274^^^^^263^280^ret = 0.0;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P11_Insert_Donor_Statement]^ret = 1.0;ret = 0.0;^274^^^^^263^280^ret = 0.0;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P8_Replace_Mix]^ret = 0.0D;^274^^^^^263^280^ret = 0.0;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P3_Replace_Literal]^ret = innerCumulativeProbability ( domain[-8], x, --8, n, m, k ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P3_Replace_Literal]^ret = innerCumulativeProbability ( domain[7], x, -7, n, m, k ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P5_Replace_Variable]^ret = innerCumulativeProbability ( domain[1], x, -1, n, x, k ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P5_Replace_Variable]^ret = innerCumulativeProbability ( m[1], x, -1, n, domain, k ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P5_Replace_Variable]^ret = innerCumulativeProbability ( domain[1], k, -1, n, m, x ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P8_Replace_Mix]^ret = innerCumulativeProbability ( domain[1 >>> 1], x, -1 >>> 1, n, m, k ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P3_Replace_Literal]^ret = innerCumulativeProbability ( domain[populationSize], x, -populationSize, n, m, k ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P3_Replace_Literal]^ret = innerCumulativeProbability ( domain[2], x, -2, n, m, k ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P5_Replace_Variable]^ret = innerCumulativeProbability ( domain[1], x, -1, x, m, k ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P5_Replace_Variable]^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, size ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P5_Replace_Variable]^ret = innerCumulativeProbability ( n[1], x, -1, domain, m, k ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P8_Replace_Mix]^ret = innerCumulativeProbability ( domain[1], sampleSize, -1, n, m, k ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P3_Replace_Literal]^ret = 0.5;^272^^^^^263^280^ret = 1.0;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P8_Replace_Mix]^ret = 1.0d;^272^^^^^263^280^ret = 1.0;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P11_Insert_Donor_Statement]^ret = 0.0;ret = 1.0;^272^^^^^263^280^ret = 1.0;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P3_Replace_Literal]^} else if ( x > domain[m] )  {^273^^^^^263^280^} else if ( x > domain[1] )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P3_Replace_Literal]^} else if ( x > domain[-3] )  {^273^^^^^263^280^} else if ( x > domain[1] )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P3_Replace_Literal]^} else if ( x > domain[k] )  {^273^^^^^263^280^} else if ( x > domain[1] )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P5_Replace_Variable]^} else if ( sampleSize > domain[1] )  {^273^^^^^263^280^} else if ( x > domain[1] )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P8_Replace_Mix]^}  if ( x > domain[0] )  {^273^^^^^263^280^} else if ( x > domain[1] )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P3_Replace_Literal]^ret = innerCumulativeProbability ( domain[9], x, -9, n, m, k ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P5_Replace_Variable]^ret = innerCumulativeProbability ( domain[1], x, -1, n, sampleSize, k ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P5_Replace_Variable]^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, x ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P8_Replace_Mix]^ret = innerCumulativeProbability ( domain[1L], x, -1L, n, m, k ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P8_Replace_Mix]^ret = innerCumulativeProbability ( domain[1], x, -1, n, populationSize, k ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P3_Replace_Literal]^ret = 0.25;^272^^^^^263^280^ret = 1.0;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P8_Replace_Mix]^ret = 0.0d;^272^^^^^263^280^ret = 1.0;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P8_Replace_Mix]^ret = 4.0d;^274^^^^^263^280^ret = 0.0;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P3_Replace_Literal]^ret = innerCumulativeProbability ( domain[-2], x, --2, n, m, k ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P5_Replace_Variable]^ret = innerCumulativeProbability ( domain[1], x, -1, populationSize, m, k ) ;^276^^^^^263^280^ret = innerCumulativeProbability ( domain[1], x, -1, n, m, k ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] upperCumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] int[]  domain  boolean  long  serialVersionUID  int  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  double  ret  
[P1_Replace_Type]^float ret = probability ( n, m, k, x0 ) ;^298^^^^^295^304^double ret = probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[P5_Replace_Variable]^double ret = probability ( size, m, k, x0 ) ;^298^^^^^295^304^double ret = probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[P5_Replace_Variable]^double ret = probability ( n, sampleSize, k, x0 ) ;^298^^^^^295^304^double ret = probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[P5_Replace_Variable]^double ret = probability ( n, m, sampleSize, x0 ) ;^298^^^^^295^304^double ret = probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[P5_Replace_Variable]^double ret = probability (  m, k, x0 ) ;^298^^^^^295^304^double ret = probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[P5_Replace_Variable]^double ret = probability ( n,  k, x0 ) ;^298^^^^^295^304^double ret = probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[P5_Replace_Variable]^double ret = probability ( n, m,  x0 ) ;^298^^^^^295^304^double ret = probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[P5_Replace_Variable]^double ret = probability ( n, m, k ) ;^298^^^^^295^304^double ret = probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[P5_Replace_Variable]^double ret = probability ( m, n, k, x0 ) ;^298^^^^^295^304^double ret = probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[P5_Replace_Variable]^double ret = probability ( n, x0, k, m ) ;^298^^^^^295^304^double ret = probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[P5_Replace_Variable]^double ret = probability ( n, k, m, x0 ) ;^298^^^^^295^304^double ret = probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[P5_Replace_Variable]^double ret = probability ( n, m, x0, k ) ;^298^^^^^295^304^double ret = probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[P8_Replace_Mix]^double ret = probability ( n, m, k, populationSize ) ;^298^^^^^295^304^double ret = probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[P5_Replace_Variable]^double ret = probability ( x1, m, k, x0 ) ;^298^^^^^295^304^double ret = probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[P5_Replace_Variable]^double ret = probability ( n, x1, k, x0 ) ;^298^^^^^295^304^double ret = probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[P5_Replace_Variable]^double ret = probability ( n, m, x1, x0 ) ;^298^^^^^295^304^double ret = probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[P5_Replace_Variable]^double ret = probability ( n, m, k, size ) ;^298^^^^^295^304^double ret = probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[P5_Replace_Variable]^double ret = probability ( x0, m, k, n ) ;^298^^^^^295^304^double ret = probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[P14_Delete_Statement]^^298^^^^^295^304^double ret = probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[P11_Insert_Donor_Statement]^ret += probability ( n, m, k, x0 ) ;double ret = probability ( n, m, k, x0 ) ;^298^^^^^295^304^double ret = probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[P11_Insert_Donor_Statement]^ret = probability ( n, m, k, x ) ;double ret = probability ( n, m, k, x0 ) ;^298^^^^^295^304^double ret = probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[P2_Replace_Operator]^while  ( x0 >= x1 )  {^299^^^^^295^304^while  ( x0 != x1 )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[P5_Replace_Variable]^while  ( x1 != x1 )  {^299^^^^^295^304^while  ( x0 != x1 )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[P5_Replace_Variable]^while  ( x0 != size )  {^299^^^^^295^304^while  ( x0 != x1 )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[P8_Replace_Mix]^while  ( x0 != sampleSize )  {^299^^^^^295^304^while  ( x0 != x1 )  {^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[P5_Replace_Variable]^x0 += x;^300^^^^^295^304^x0 += dx;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[P8_Replace_Mix]^x0 +=  x1;^300^^^^^295^304^x0 += dx;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[P5_Replace_Variable]^ret += probability ( x1, m, k, x0 ) ;^301^^^^^295^304^ret += probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[P5_Replace_Variable]^ret += probability ( n, x, k, x0 ) ;^301^^^^^295^304^ret += probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[P5_Replace_Variable]^ret += probability ( n, m, x1, x0 ) ;^301^^^^^295^304^ret += probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[P5_Replace_Variable]^ret += probability ( n, m, k, x1 ) ;^301^^^^^295^304^ret += probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[P5_Replace_Variable]^ret += probability (  m, k, x0 ) ;^301^^^^^295^304^ret += probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[P5_Replace_Variable]^ret += probability ( n,  k, x0 ) ;^301^^^^^295^304^ret += probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[P5_Replace_Variable]^ret += probability ( n, m,  x0 ) ;^301^^^^^295^304^ret += probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[P5_Replace_Variable]^ret += probability ( n, m, k ) ;^301^^^^^295^304^ret += probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[P5_Replace_Variable]^ret += probability ( m, n, k, x0 ) ;^301^^^^^295^304^ret += probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[P5_Replace_Variable]^ret += probability ( n, x0, k, m ) ;^301^^^^^295^304^ret += probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[P5_Replace_Variable]^ret += probability ( k, m, n, x0 ) ;^301^^^^^295^304^ret += probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[P5_Replace_Variable]^ret += probability ( n, m, x0, k ) ;^301^^^^^295^304^ret += probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[P8_Replace_Mix]^ret +=  probability ( x0, m, k, x0 ) ;^301^^^^^295^304^ret += probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[P11_Insert_Donor_Statement]^ret = probability ( n, m, k, x ) ;ret += probability ( n, m, k, x0 ) ;^301^^^^^295^304^ret += probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[P5_Replace_Variable]^ret += probability ( n, size, k, x0 ) ;^301^^^^^295^304^ret += probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[P5_Replace_Variable]^ret += probability ( n, m, size, x0 ) ;^301^^^^^295^304^ret += probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[P5_Replace_Variable]^ret += probability ( n, k, m, x0 ) ;^301^^^^^295^304^ret += probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[P5_Replace_Variable]^ret += probability ( x0, m, k, n ) ;^301^^^^^295^304^ret += probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[P8_Replace_Mix]^ret += probability ( n, x1, k, x0 ) ;^301^^^^^295^304^ret += probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[P14_Delete_Statement]^^301^^^^^295^304^ret += probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[P11_Insert_Donor_Statement]^double ret = probability ( n, m, k, x0 ) ;ret += probability ( n, m, k, x0 ) ;^301^^^^^295^304^ret += probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[P8_Replace_Mix]^x0 +=  sampleSize;^300^^^^^295^304^x0 += dx;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[P5_Replace_Variable]^ret += probability ( n, m, x0, x0 ) ;^301^^^^^295^304^ret += probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[P5_Replace_Variable]^ret += probability ( n, m, k, size ) ;^301^^^^^295^304^ret += probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[P8_Replace_Mix]^ret +=  probability ( sampleSize, m, k, x0 ) ;^301^^^^^295^304^ret += probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
[P5_Replace_Variable]^ret += probability ( size, m, k, x0 ) ;^301^^^^^295^304^ret += probability ( n, m, k, x0 ) ;^[CLASS] HypergeometricDistributionImpl  [METHOD] innerCumulativeProbability [RETURN_TYPE] double   int x0 int x1 int dx int n int m int k [VARIABLES] boolean  long  serialVersionUID  int  dx  k  m  n  num  numberOfSuccesses  populationSize  sampleSize  size  x  x0  x1  double  ret  
