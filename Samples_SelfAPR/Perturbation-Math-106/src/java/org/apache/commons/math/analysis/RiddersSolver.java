[P1_Replace_Type]^static final  short  serialVersionUID = -4703139035737911735L;^36^^^^^31^41^static final long serialVersionUID = -4703139035737911735L;^[CLASS] RiddersSolver   [VARIABLES] 
[P8_Replace_Mix]^static final long serialVersionUID = -4703139035737911735;^36^^^^^31^41^static final long serialVersionUID = -4703139035737911735L;^[CLASS] RiddersSolver   [VARIABLES] 
[P3_Replace_Literal]^super ( f, 109, 1E-6 ) ;^44^^^^^43^45^super ( f, 100, 1E-6 ) ;^[CLASS] RiddersSolver  [METHOD] <init> [RETURN_TYPE] UnivariateRealFunction)   UnivariateRealFunction f [VARIABLES] long  serialVersionUID  UnivariateRealFunction  f  boolean  
[P14_Delete_Statement]^^44^^^^^43^45^super ( f, 100, 1E-6 ) ;^[CLASS] RiddersSolver  [METHOD] <init> [RETURN_TYPE] UnivariateRealFunction)   UnivariateRealFunction f [VARIABLES] long  serialVersionUID  UnivariateRealFunction  f  boolean  
[P2_Replace_Operator]^if  ( f.value ( min )  >= 0.0 )  { return min; }^66^^^^^62^77^if  ( f.value ( min )  == 0.0 )  { return min; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P5_Replace_Variable]^if  ( f.value ( max )  == 0.0 )  { return min; }^66^^^^^62^77^if  ( f.value ( min )  == 0.0 )  { return min; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P5_Replace_Variable]^if  ( min.value ( f )  == 0.0 )  { return min; }^66^^^^^62^77^if  ( f.value ( min )  == 0.0 )  { return min; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P8_Replace_Mix]^if  ( f.value ( min )  == 2.0d )  { return min; }^66^^^^^62^77^if  ( f.value ( min )  == 0.0 )  { return min; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P15_Unwrap_Block]^return min;^66^67^^^^62^77^if  ( f.value ( min )  == 0.0 )  { return min; } if  ( f.value ( max )  == 0.0 )  { return max; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P16_Remove_Block]^^66^67^^^^62^77^if  ( f.value ( min )  == 0.0 )  { return min; } if  ( f.value ( max )  == 0.0 )  { return max; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P13_Insert_Block]^if  (  ( f.value ( max )  )  == 0.0 )  {     return max; }^66^^^^^62^77^[Delete]^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P13_Insert_Block]^if  (  ( f.value ( initial )  )  == 0.0 )  {     return initial; }^66^^^^^62^77^[Delete]^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P13_Insert_Block]^if  ( y2 == 0.0 )  {     return max; }^66^^^^^62^77^[Delete]^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P13_Insert_Block]^if  ( y1 == 0.0 )  {     return min; }^66^^^^^62^77^[Delete]^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P2_Replace_Operator]^if  ( f.value ( max )  != 0.0 )  { return max; }^67^^^^^62^77^if  ( f.value ( max )  == 0.0 )  { return max; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P5_Replace_Variable]^if  ( f.value ( min )  == 0.0 )  { return max; }^67^^^^^62^77^if  ( f.value ( max )  == 0.0 )  { return max; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P5_Replace_Variable]^if  ( max.value ( f )  == 0.0 )  { return max; }^67^^^^^62^77^if  ( f.value ( max )  == 0.0 )  { return max; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P8_Replace_Mix]^if  ( f.value ( max )  == 0.0D )  { return max; }^67^^^^^62^77^if  ( f.value ( max )  == 0.0 )  { return max; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P15_Unwrap_Block]^return max;^67^68^^^^62^77^if  ( f.value ( max )  == 0.0 )  { return max; } if  ( f.value ( initial )  == 0.0 )  { return initial; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P16_Remove_Block]^^67^68^^^^62^77^if  ( f.value ( max )  == 0.0 )  { return max; } if  ( f.value ( initial )  == 0.0 )  { return initial; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P13_Insert_Block]^if  (  ( f.value ( initial )  )  == 0.0 )  {     return initial; }^67^^^^^62^77^[Delete]^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P13_Insert_Block]^if  ( y2 == 0.0 )  {     return max; }^67^^^^^62^77^[Delete]^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P13_Insert_Block]^if  (  ( f.value ( min )  )  == 0.0 )  {     return min; }^67^^^^^62^77^[Delete]^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P13_Insert_Block]^if  ( y1 == 0.0 )  {     return min; }^67^^^^^62^77^[Delete]^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P2_Replace_Operator]^if  ( f.value ( initial )  >= 0.0 )  { return initial; }^68^^^^^62^77^if  ( f.value ( initial )  == 0.0 )  { return initial; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P3_Replace_Literal]^if  ( f.value ( initial )  == NaN )  { return initial; }^68^^^^^62^77^if  ( f.value ( initial )  == 0.0 )  { return initial; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P5_Replace_Variable]^if  ( f.value ( min )  == 0.0 )  { return initial; }^68^^^^^62^77^if  ( f.value ( initial )  == 0.0 )  { return initial; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P5_Replace_Variable]^if  ( initial.value ( f )  == 0.0 )  { return initial; }^68^^^^^62^77^if  ( f.value ( initial )  == 0.0 )  { return initial; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P8_Replace_Mix]^if  ( f.value ( initial )  == 2.0d )  { return initial; }^68^^^^^62^77^if  ( f.value ( initial )  == 0.0 )  { return initial; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P13_Insert_Block]^if  (  ( f.value ( max )  )  == 0.0 )  {     return max; }^68^^^^^62^77^[Delete]^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P13_Insert_Block]^if  ( y2 == 0.0 )  {     return max; }^68^^^^^62^77^[Delete]^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P13_Insert_Block]^if  (  ( f.value ( min )  )  == 0.0 )  {     return min; }^68^^^^^62^77^[Delete]^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P13_Insert_Block]^if  ( y1 == 0.0 )  {     return min; }^68^^^^^62^77^[Delete]^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P5_Replace_Variable]^verifyBracketing ( initial, max, f ) ;^70^^^^^62^77^verifyBracketing ( min, max, f ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P5_Replace_Variable]^verifyBracketing ( min, initial, f ) ;^70^^^^^62^77^verifyBracketing ( min, max, f ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P5_Replace_Variable]^verifyBracketing (  max, f ) ;^70^^^^^62^77^verifyBracketing ( min, max, f ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P5_Replace_Variable]^verifyBracketing ( min,  f ) ;^70^^^^^62^77^verifyBracketing ( min, max, f ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P5_Replace_Variable]^verifyBracketing ( min, max ) ;^70^^^^^62^77^verifyBracketing ( min, max, f ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P5_Replace_Variable]^verifyBracketing ( f, max, min ) ;^70^^^^^62^77^verifyBracketing ( min, max, f ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P5_Replace_Variable]^verifyBracketing ( max, min, f ) ;^70^^^^^62^77^verifyBracketing ( min, max, f ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P7_Replace_Invocation]^setResult ( min, max, f ) ;^70^^^^^62^77^verifyBracketing ( min, max, f ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P8_Replace_Mix]^verifyBracketing ( min, min, f ) ;^70^^^^^62^77^verifyBracketing ( min, max, f ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P12_Insert_Condition]^if  ( isBracketing ( min, initial, f )  )  { verifyBracketing ( min, max, f ) ; }^70^^^^^62^77^verifyBracketing ( min, max, f ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P5_Replace_Variable]^verifySequence ( max, initial, max ) ;^71^^^^^62^77^verifySequence ( min, initial, max ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P5_Replace_Variable]^verifySequence ( min, min, max ) ;^71^^^^^62^77^verifySequence ( min, initial, max ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P5_Replace_Variable]^verifySequence ( min, initial, initial ) ;^71^^^^^62^77^verifySequence ( min, initial, max ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P5_Replace_Variable]^verifySequence (  initial, max ) ;^71^^^^^62^77^verifySequence ( min, initial, max ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P5_Replace_Variable]^verifySequence ( min,  max ) ;^71^^^^^62^77^verifySequence ( min, initial, max ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P5_Replace_Variable]^verifySequence ( min, initial ) ;^71^^^^^62^77^verifySequence ( min, initial, max ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P5_Replace_Variable]^verifySequence ( max, initial, min ) ;^71^^^^^62^77^verifySequence ( min, initial, max ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P5_Replace_Variable]^verifySequence ( min, max, initial ) ;^71^^^^^62^77^verifySequence ( min, initial, max ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P7_Replace_Invocation]^verifyBracketing ( min, initial, max ) ;^71^^^^^62^77^verifySequence ( min, initial, max ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P8_Replace_Mix]^verifySequence ( initial, initial, max ) ;^71^^^^^62^77^verifySequence ( min, initial, max ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P14_Delete_Statement]^^71^72^73^74^75^62^77^verifySequence ( min, initial, max ) ; if  ( isBracketing ( min, initial, f )  )  { return solve ( min, initial ) ; } else { return solve ( initial, max ) ; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P5_Replace_Variable]^if  ( isBracketing ( initial, initial, f )  )  {^72^^^^^62^77^if  ( isBracketing ( min, initial, f )  )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P5_Replace_Variable]^if  ( isBracketing ( min, min, f )  )  {^72^^^^^62^77^if  ( isBracketing ( min, initial, f )  )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P5_Replace_Variable]^if  ( isBracketing ( min, initial, null )  )  {^72^^^^^62^77^if  ( isBracketing ( min, initial, f )  )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P5_Replace_Variable]^if  ( isBracketing (  initial, f )  )  {^72^^^^^62^77^if  ( isBracketing ( min, initial, f )  )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P5_Replace_Variable]^if  ( isBracketing ( min,  f )  )  {^72^^^^^62^77^if  ( isBracketing ( min, initial, f )  )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P5_Replace_Variable]^if  ( isBracketing ( min, initial )  )  {^72^^^^^62^77^if  ( isBracketing ( min, initial, f )  )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P5_Replace_Variable]^if  ( isBracketing ( initial, min, f )  )  {^72^^^^^62^77^if  ( isBracketing ( min, initial, f )  )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P7_Replace_Invocation]^if  ( setResult ( min, initial, f )  )  {^72^^^^^62^77^if  ( isBracketing ( min, initial, f )  )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P15_Unwrap_Block]^return solve(min, initial);^72^73^74^75^76^62^77^if  ( isBracketing ( min, initial, f )  )  { return solve ( min, initial ) ; } else { return solve ( initial, max ) ; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P16_Remove_Block]^^72^73^74^75^76^62^77^if  ( isBracketing ( min, initial, f )  )  { return solve ( min, initial ) ; } else { return solve ( initial, max ) ; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P5_Replace_Variable]^return solve ( min, max ) ;^75^^^^^62^77^return solve ( initial, max ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P5_Replace_Variable]^return solve ( initial, min ) ;^75^^^^^62^77^return solve ( initial, max ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P5_Replace_Variable]^return solve (  max ) ;^75^^^^^62^77^return solve ( initial, max ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P5_Replace_Variable]^return solve ( initial ) ;^75^^^^^62^77^return solve ( initial, max ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P5_Replace_Variable]^return solve ( max, initial ) ;^75^^^^^62^77^return solve ( initial, max ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P14_Delete_Statement]^^75^^^^^62^77^return solve ( initial, max ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P5_Replace_Variable]^return solve ( max, initial ) ;^73^^^^^62^77^return solve ( min, initial ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P5_Replace_Variable]^return solve ( min, max ) ;^73^^^^^62^77^return solve ( min, initial ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P5_Replace_Variable]^return solve (  initial ) ;^73^^^^^62^77^return solve ( min, initial ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P5_Replace_Variable]^return solve ( min ) ;^73^^^^^62^77^return solve ( min, initial ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P5_Replace_Variable]^return solve ( initial, min ) ;^73^^^^^62^77^return solve ( min, initial ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P14_Delete_Statement]^^73^^^^^62^77^return solve ( min, initial ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P5_Replace_Variable]^if  ( isBracketing ( max, initial, f )  )  {^72^^^^^62^77^if  ( isBracketing ( min, initial, f )  )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P5_Replace_Variable]^if  ( isBracketing ( min, max, f )  )  {^72^^^^^62^77^if  ( isBracketing ( min, initial, f )  )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P5_Replace_Variable]^if  ( isBracketing ( f, initial, min )  )  {^72^^^^^62^77^if  ( isBracketing ( min, initial, f )  )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P5_Replace_Variable]^if  ( isBracketing ( min, f, initial )  )  {^72^^^^^62^77^if  ( isBracketing ( min, initial, f )  )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P1_Replace_Type]^int x1, x2, x3, x, oldx, y1, y2, y3, y, delta, correction, tolerance;^99^^^^^84^114^double x1, x2, x3, x, oldx, y1, y2, y3, y, delta, correction, tolerance;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P1_Replace_Type]^float x1, x2, x3, x, oldx, y1, y2, y3, y, delta, correction, tolerance;^99^^^^^84^114^double x1, x2, x3, x, oldx, y1, y2, y3, y, delta, correction, tolerance;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^x1 =  y3; y1^101^^^^^86^116^x1 = min; y1 = f.value ( x1 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^x2 = max; y2 = f.value ( x2 ) ;x1 = min; y1 = f.value ( x1 ) ;^101^^^^^86^116^x1 = min; y1 = f.value ( x1 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^y = f.value ( x ) ;x1 = min; y1 = f.value ( x1 ) ;^101^^^^^86^116^x1 = min; y1 = f.value ( x1 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^y3 = f.value ( x3 ) ;x1 = min; y1 = f.value ( x1 ) ;^101^^^^^86^116^x1 = min; y1 = f.value ( x1 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^x1 = min; y1 = f.value ( y1 ) ;^101^^^^^86^116^x1 = min; y1 = f.value ( x1 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^x1 = min; y1 = x1.value ( f ) ;^101^^^^^86^116^x1 = min; y1 = f.value ( x1 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^x1 =  min; y1^101^^^^^86^116^x1 = min; y1 = f.value ( x1 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^x1 = min; y1 = f.value ( y3 ) ;^101^^^^^86^116^x1 = min; y1 = f.value ( x1 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^x1 = min; y1 = f.value ( x3 ) ;^101^^^^^86^116^x1 = min; y1 = f.value ( x1 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P14_Delete_Statement]^^101^102^^^^86^116^x1 = min; y1 = f.value ( x1 ) ; x2 = max; y2 = f.value ( x2 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^x2 = x3; y2 = f.value ( x2 ) ;^102^^^^^87^117^x2 = max; y2 = f.value ( x2 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^x2 =  y; y2^102^^^^^87^117^x2 = max; y2 = f.value ( x2 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^x1 = min; y1 = f.value ( x1 ) ;x2 = max; y2 = f.value ( x2 ) ;^102^^^^^87^117^x2 = max; y2 = f.value ( x2 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^y = f.value ( x ) ;x2 = max; y2 = f.value ( x2 ) ;^102^^^^^87^117^x2 = max; y2 = f.value ( x2 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^y3 = f.value ( x3 ) ;x2 = max; y2 = f.value ( x2 ) ;^102^^^^^87^117^x2 = max; y2 = f.value ( x2 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^x2 = max; y2 = f.value ( y1 ) ;^102^^^^^87^117^x2 = max; y2 = f.value ( x2 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^x2 = max; y2 = x2.value ( f ) ;^102^^^^^87^117^x2 = max; y2 = f.value ( x2 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^x2 =  max; y2^102^^^^^87^117^x2 = max; y2 = f.value ( x2 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^x2 = max; y2 = f.value ( y3 ) ;^102^^^^^87^117^x2 = max; y2 = f.value ( x2 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^x2 = max; y2 = f.value ( x1 ) ;^102^^^^^87^117^x2 = max; y2 = f.value ( x2 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P14_Delete_Statement]^^102^^^^^87^117^x2 = max; y2 = f.value ( x2 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P2_Replace_Operator]^if  ( y1 != 0.0 )  { return min; }^105^^^^^90^120^if  ( y1 == 0.0 )  { return min; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P3_Replace_Literal]^if  ( y1 == NaN )  { return min; }^105^^^^^90^120^if  ( y1 == 0.0 )  { return min; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^if  ( y1 == 0.0 )  { return y3; }^105^^^^^90^120^if  ( y1 == 0.0 )  { return min; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^if  ( min == 0.0 )  { return y1; }^105^^^^^90^120^if  ( y1 == 0.0 )  { return min; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^if  ( y1 == 0.0D )  { return min; }^105^^^^^90^120^if  ( y1 == 0.0 )  { return min; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P15_Unwrap_Block]^return min;^105^106^^^^90^120^if  ( y1 == 0.0 )  { return min; } if  ( y2 == 0.0 )  { return max; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P16_Remove_Block]^^105^106^^^^90^120^if  ( y1 == 0.0 )  { return min; } if  ( y2 == 0.0 )  { return max; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P13_Insert_Block]^if  (  ( f.value ( max )  )  == 0.0 )  {     return max; }^105^^^^^90^120^[Delete]^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P13_Insert_Block]^if  (  ( f.value ( initial )  )  == 0.0 )  {     return initial; }^105^^^^^90^120^[Delete]^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P13_Insert_Block]^if  ( y2 == 0.0 )  {     return max; }^105^^^^^90^120^[Delete]^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P13_Insert_Block]^if  (  ( f.value ( min )  )  == 0.0 )  {     return min; }^105^^^^^90^120^[Delete]^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^if  ( y1 == 0.0 )  { return x2; }^105^^^^^90^120^if  ( y1 == 0.0 )  { return min; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P2_Replace_Operator]^if  ( y2 != 0.0 )  { return max; }^106^^^^^91^121^if  ( y2 == 0.0 )  { return max; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^if  ( x2 == 0.0 )  { return max; }^106^^^^^91^121^if  ( y2 == 0.0 )  { return max; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^if  ( y2 == 0.0 )  { return y3; }^106^^^^^91^121^if  ( y2 == 0.0 )  { return max; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^if  ( max == 0.0 )  { return y2; }^106^^^^^91^121^if  ( y2 == 0.0 )  { return max; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^if  ( y2 == 0.0D )  { return max; }^106^^^^^91^121^if  ( y2 == 0.0 )  { return max; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P13_Insert_Block]^if  (  ( f.value ( max )  )  == 0.0 )  {     return max; }^106^^^^^91^121^[Delete]^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P13_Insert_Block]^if  (  ( f.value ( initial )  )  == 0.0 )  {     return initial; }^106^^^^^91^121^[Delete]^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P13_Insert_Block]^if  (  ( f.value ( min )  )  == 0.0 )  {     return min; }^106^^^^^91^121^[Delete]^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P13_Insert_Block]^if  ( y1 == 0.0 )  {     return min; }^106^^^^^91^121^[Delete]^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^if  ( y2 == 0.0 )  { return x2; }^106^^^^^91^121^if  ( y2 == 0.0 )  { return max; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^if  ( y2 == 0.0 )  { return x3; }^106^^^^^91^121^if  ( y2 == 0.0 )  { return max; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^if  ( y2 == 0.0 )  { return y1; }^106^^^^^91^121^if  ( y2 == 0.0 )  { return max; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^verifyBracketing ( x3, max, f ) ;^107^^^^^92^122^verifyBracketing ( min, max, f ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^verifyBracketing ( min, y, f ) ;^107^^^^^92^122^verifyBracketing ( min, max, f ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^verifyBracketing (  max, f ) ;^107^^^^^92^122^verifyBracketing ( min, max, f ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^verifyBracketing ( min,  f ) ;^107^^^^^92^122^verifyBracketing ( min, max, f ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^verifyBracketing ( min, max ) ;^107^^^^^92^122^verifyBracketing ( min, max, f ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^verifyBracketing ( max, min, f ) ;^107^^^^^92^122^verifyBracketing ( min, max, f ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^verifyBracketing ( f, max, min ) ;^107^^^^^92^122^verifyBracketing ( min, max, f ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P7_Replace_Invocation]^setResult ( min, max, f ) ;^107^^^^^92^122^verifyBracketing ( min, max, f ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P12_Insert_Condition]^if  ( isBracketing ( min, initial, f )  )  { verifyBracketing ( min, max, f ) ; }^107^^^^^92^122^verifyBracketing ( min, max, f ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P1_Replace_Type]^short  i = 1;^109^^^^^94^124^int i = 1;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P3_Replace_Literal]^int i = ;^109^^^^^94^124^int i = 1;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^oldx ;^110^^^^^95^125^oldx = Double.POSITIVE_INFINITY;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P2_Replace_Operator]^while  ( i > maximalIterationCount )  {^111^^^^^96^126^while  ( i <= maximalIterationCount )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P2_Replace_Operator]^while  ( i < maximalIterationCount )  {^111^^^^^96^126^while  ( i <= maximalIterationCount )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P7_Replace_Invocation]^while  ( i <= absimalIterationCount )  {^111^^^^^96^126^while  ( i <= maximalIterationCount )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P2_Replace_Operator]^if  ( Math.abs ( y3 )  < functionValueAccuracy )  {^115^^^^^100^130^if  ( Math.abs ( y3 )  <= functionValueAccuracy )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P7_Replace_Invocation]^if  ( Math.sqrt ( y3 )  <= functionValueAccuracy )  {^115^^^^^100^130^if  ( Math.abs ( y3 )  <= functionValueAccuracy )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P9_Replace_Statement]^if  ( Math.abs ( y )  <= functionValueAccuracy )  {^115^^^^^100^130^if  ( Math.abs ( y3 )  <= functionValueAccuracy )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P15_Unwrap_Block]^setResult(x3, i); return result;^115^116^117^118^^100^130^if  ( Math.abs ( y3 )  <= functionValueAccuracy )  { setResult ( x3, i ) ; return result; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P16_Remove_Block]^^115^116^117^118^^100^130^if  ( Math.abs ( y3 )  <= functionValueAccuracy )  { setResult ( x3, i ) ; return result; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P13_Insert_Block]^if  (  ( abs (  ( x - oldx )  )  )  <= tolerance )  {     setResult ( x, i ) ;     return result; }^115^^^^^100^130^[Delete]^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P13_Insert_Block]^if  (  ( abs ( y )  )  <=  ( functionValueAccuracy )  )  {     setResult ( x, i ) ;     return result; }^115^^^^^100^130^[Delete]^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^setResult ( y2, i ) ;^116^^^^^101^131^setResult ( x3, i ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^setResult (  i ) ;^116^^^^^101^131^setResult ( x3, i ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^setResult ( x3 ) ;^116^^^^^101^131^setResult ( x3, i ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^setResult ( i, x3 ) ;^116^^^^^101^131^setResult ( x3, i ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^setResult ( x1, i ) ;^116^^^^^101^131^setResult ( x3, i ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P14_Delete_Statement]^^116^117^^^^101^131^setResult ( x3, i ) ; return result;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^setResult ( x, i ) ;setResult ( x3, i ) ;^116^^^^^101^131^setResult ( x3, i ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P2_Replace_Operator]^if  ( Math.abs ( x - oldx )  > tolerance )  {^127^^^^^112^142^if  ( Math.abs ( x - oldx )  <= tolerance )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P2_Replace_Operator]^if  ( Math.abs ( x  <<  oldx )  <= tolerance )  {^127^^^^^112^142^if  ( Math.abs ( x - oldx )  <= tolerance )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^if  ( Math.abs ( y - oldx )  <= tolerance )  {^127^^^^^112^142^if  ( Math.abs ( x - oldx )  <= tolerance )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^if  ( Math.abs ( x - y3 )  <= tolerance )  {^127^^^^^112^142^if  ( Math.abs ( x - oldx )  <= tolerance )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^if  ( Math.abs ( oldx - x )  <= tolerance )  {^127^^^^^112^142^if  ( Math.abs ( x - oldx )  <= tolerance )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^if  ( Math.abs ( x - tolerance )  <= oldx )  {^127^^^^^112^142^if  ( Math.abs ( x - oldx )  <= tolerance )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^if  ( Math.abs ( tolerance - oldx )  <= x )  {^127^^^^^112^142^if  ( Math.abs ( x - oldx )  <= tolerance )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P6_Replace_Expression]^if  ( x - oldx )  {^127^^^^^112^142^if  ( Math.abs ( x - oldx )  <= tolerance )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P7_Replace_Invocation]^if  ( Math.max ( x - oldx )  <= tolerance )  {^127^^^^^112^142^if  ( Math.abs ( x - oldx )  <= tolerance )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^if  ( Math.abs ( x2 - oldx )  <= tolerance )  {^127^^^^^112^142^if  ( Math.abs ( x - oldx )  <= tolerance )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P15_Unwrap_Block]^setResult(x, i); return result;^127^128^129^130^^112^142^if  ( Math.abs ( x - oldx )  <= tolerance )  { setResult ( x, i ) ; return result; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P16_Remove_Block]^^127^128^129^130^^112^142^if  ( Math.abs ( x - oldx )  <= tolerance )  { setResult ( x, i ) ; return result; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P13_Insert_Block]^if  (  ( abs ( y )  )  <=  ( functionValueAccuracy )  )  {     setResult ( x, i ) ;     return result; }^127^^^^^112^142^[Delete]^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P13_Insert_Block]^if  (  ( abs ( y3 )  )  <=  ( functionValueAccuracy )  )  {     setResult ( x3, i ) ;     return result; }^127^^^^^112^142^[Delete]^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^setResult ( x2, i ) ;^128^^^^^113^143^setResult ( x, i ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^setResult (  i ) ;^128^^^^^113^143^setResult ( x, i ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^setResult ( x ) ;^128^^^^^113^143^setResult ( x, i ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^setResult ( i, x ) ;^128^^^^^113^143^setResult ( x, i ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^setResult ( x3, i ) ;^128^^^^^113^143^setResult ( x, i ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P14_Delete_Statement]^^128^^^^^113^143^setResult ( x, i ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^setResult ( x3, i ) ;setResult ( x, i ) ;^128^^^^^113^143^setResult ( x, i ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P2_Replace_Operator]^if  ( Math.abs ( y )  < functionValueAccuracy )  {^131^^^^^116^146^if  ( Math.abs ( y )  <= functionValueAccuracy )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^if  ( Math.abs ( y3 )  <= functionValueAccuracy )  {^131^^^^^116^146^if  ( Math.abs ( y )  <= functionValueAccuracy )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P7_Replace_Invocation]^if  ( Math.sqrt ( y )  <= functionValueAccuracy )  {^131^^^^^116^146^if  ( Math.abs ( y )  <= functionValueAccuracy )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^if  ( Math.abs ( x3 )  <= functionValueAccuracy )  {^131^^^^^116^146^if  ( Math.abs ( y )  <= functionValueAccuracy )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P15_Unwrap_Block]^setResult(x, i); return result;^131^132^133^134^^116^146^if  ( Math.abs ( y )  <= functionValueAccuracy )  { setResult ( x, i ) ; return result; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P16_Remove_Block]^^131^132^133^134^^116^146^if  ( Math.abs ( y )  <= functionValueAccuracy )  { setResult ( x, i ) ; return result; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P13_Insert_Block]^if  (  ( abs (  ( x - oldx )  )  )  <= tolerance )  {     setResult ( x, i ) ;     return result; }^131^^^^^116^146^[Delete]^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P13_Insert_Block]^if  (  ( abs ( y3 )  )  <=  ( functionValueAccuracy )  )  {     setResult ( x3, i ) ;     return result; }^131^^^^^116^146^[Delete]^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^setResult (  i ) ;^132^^^^^117^147^setResult ( x, i ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^setResult ( x ) ;^132^^^^^117^147^setResult ( x, i ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^setResult ( i, x ) ;^132^^^^^117^147^setResult ( x, i ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^setResult ( y1, i ) ;^132^^^^^117^147^setResult ( x, i ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P14_Delete_Statement]^^132^133^^^^117^147^setResult ( x, i ) ; return result;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^setResult ( x3, i ) ;setResult ( x, i ) ;^132^^^^^117^147^setResult ( x, i ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P2_Replace_Operator]^if  ( correction == 0.0 )  {^138^^^^^123^153^if  ( correction > 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P3_Replace_Literal]^if  ( correction > NaN )  {^138^^^^^123^153^if  ( correction > 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P6_Replace_Expression]^if  ( sign(y1) + sign(y) == 0.0 )  {^138^^^^^123^153^if  ( correction > 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P6_Replace_Expression]^if  ( sign ( y1 )  + sign ( y ) )  {^138^^^^^123^153^if  ( correction > 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P6_Replace_Expression]^if  ( sign(y2) + sign(y) == 0.0 )  {^138^^^^^123^153^if  ( correction > 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P6_Replace_Expression]^if  ( sign ( y2 )  + sign ( y ) )  {^138^^^^^123^153^if  ( correction > 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^if  ( correction > 0.0D )  {^138^^^^^123^153^if  ( correction > 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P2_Replace_Operator]^if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  != 0.0 )  {^146^^^^^138^152^if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P2_Replace_Operator]^if  <  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0 )  {^146^^^^^138^152^if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^if  ( MathUtils.sign ( x3 )  + MathUtils.sign ( y )  == 0.0 )  {^146^^^^^138^152^if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^if  ( MathUtils.sign ( y32 )  + MathUtils.sign ( y )  == 0.0 )  {^146^^^^^138^152^if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P6_Replace_Expression]^if  ( sign ( y2 )  + sign ( y ) )  {^146^^^^^138^152^if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 2.0d )  {^146^^^^^138^152^if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P9_Replace_Statement]^if  ( MathUtils.sign ( y1 )  + MathUtils.sign ( y )  == 0.0 )  {^146^^^^^138^152^if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P15_Unwrap_Block]^x1 = x; y1 = y;^146^147^148^149^150^138^152^if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0 )  { x1 = x; y1 = y; } else { x1 = x3; x2 = x; y1 = y3; y2 = y; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P16_Remove_Block]^^146^147^148^149^150^138^152^if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0 )  { x1 = x; y1 = y; } else { x1 = x3; x2 = x; y1 = y3; y2 = y; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P13_Insert_Block]^if  (  (  ( sign ( y1 )  )  +  ( sign ( y )  )  )  == 0.0 )  {     x2 = x;     y2 = y; }else {     x1 = x;     x2 = x3;     y1 = y;     y2 = y3; }^146^^^^^138^152^[Delete]^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^x1 = x2; x2 = x;^149^^^^^138^152^x1 = x3; x2 = x;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^x1 =  y1; x2^149^^^^^138^152^x1 = x3; x2 = x;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^y1 = y3; y2 = y;x1 = x3; x2 = x;^149^^^^^138^152^x1 = x3; x2 = x;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^x1 = x; y1 = y;x1 = x3; x2 = x;^149^^^^^138^152^x1 = x3; x2 = x;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^x1 = x; x2 = x3;x1 = x3; x2 = x;^149^^^^^138^152^x1 = x3; x2 = x;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^x2 = x; y2 = y;x1 = x3; x2 = x;^149^^^^^138^152^x1 = x3; x2 = x;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^y1 = y; y2 = y3;x1 = x3; x2 = x;^149^^^^^138^152^x1 = x3; x2 = x;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^x1 = x33; x2 = x;^149^^^^^138^152^x1 = x3; x2 = x;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^x1 =  x33; x32^149^^^^^138^152^x1 = x3; x2 = x;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^y1 = y2; y2 = y;^150^^^^^138^152^y1 = y3; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^y1 =  x1; y2^150^^^^^138^152^y1 = y3; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^x1 = x3; x2 = x;y1 = y3; y2 = y;^150^^^^^138^152^y1 = y3; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^x1 = x; y1 = y;y1 = y3; y2 = y;^150^^^^^138^152^y1 = y3; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^x1 = x; x2 = x3;y1 = y3; y2 = y;^150^^^^^138^152^y1 = y3; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^x2 = x; y2 = y;y1 = y3; y2 = y;^150^^^^^138^152^y1 = y3; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^y1 = y; y2 = y3;y1 = y3; y2 = y;^150^^^^^138^152^y1 = y3; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^y1 = y23; y2 = y;^150^^^^^138^152^y1 = y3; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^y1 =  null3; null2^150^^^^^138^152^y1 = y3; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^x1 = x3; y1 = y;^147^^^^^138^152^x1 = x; y1 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^x1 =  y; y1^147^^^^^138^152^x1 = x; y1 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^x1 = x3; x2 = x;x1 = x; y1 = y;^147^^^^^138^152^x1 = x; y1 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^y1 = y3; y2 = y;x1 = x; y1 = y;^147^^^^^138^152^x1 = x; y1 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^x1 = x; x2 = x3;x1 = x; y1 = y;^147^^^^^138^152^x1 = x; y1 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^x2 = x; y2 = y;x1 = x; y1 = y;^147^^^^^138^152^x1 = x; y1 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^y1 = y; y2 = y3;x1 = x; y1 = y;^147^^^^^138^152^x1 = x; y1 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^x1 = x; x31 = y;^147^^^^^138^152^x1 = x; y1 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^x1 =  x; x21^147^^^^^138^152^x1 = x; y1 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^x1 = x2; y1 = y;^147^^^^^138^152^x1 = x; y1 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^x1 =  y1; y1^147^^^^^138^152^x1 = x; y1 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^x1 = x; y11 = y;^147^^^^^138^152^x1 = x; y1 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^x1 =  x; y31^147^^^^^138^152^x1 = x; y1 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^x1 = y; x2 = x;^149^^^^^138^152^x1 = x3; x2 = x;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^x1 =  y3; x2^149^^^^^138^152^x1 = x3; x2 = x;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^x1 = y33; x2 = x;^149^^^^^138^152^x1 = x3; x2 = x;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^y1 = x2; y2 = y;^150^^^^^138^152^y1 = y3; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^y1 =  y13; y12^150^^^^^138^152^y1 = y3; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^if  ( MathUtils.sign ( x1 )  + MathUtils.sign ( y )  == 0.0 )  {^146^^^^^138^152^if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^if  ( MathUtils.sign ( x22 )  + MathUtils.sign ( y )  == 0.0 )  {^146^^^^^138^152^if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^if  ( MathUtils.sign ( x12 )  + MathUtils.sign ( y )  == 0.0 )  {^146^^^^^138^152^if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P2_Replace_Operator]^if  ( MathUtils.sign ( y1 )  + MathUtils.sign ( y )  != 0.0 )  {^139^^^^^124^154^if  ( MathUtils.sign ( y1 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P2_Replace_Operator]^if  |  ( MathUtils.sign ( y1 )  + MathUtils.sign ( y )  == 0.0 )  {^139^^^^^124^154^if  ( MathUtils.sign ( y1 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^if  ( MathUtils.sign ( y3 )  + MathUtils.sign ( y )  == 0.0 )  {^139^^^^^124^154^if  ( MathUtils.sign ( y1 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^if  ( MathUtils.sign ( x11 )  + MathUtils.sign ( y )  == 0.0 )  {^139^^^^^124^154^if  ( MathUtils.sign ( y1 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P6_Replace_Expression]^if  ( sign ( y1 )  + sign ( y ) )  {^139^^^^^124^154^if  ( MathUtils.sign ( y1 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^if  ( MathUtils.sign ( y31 )  + MathUtils.sign ( y )  == 2.0d )  {^139^^^^^124^154^if  ( MathUtils.sign ( y1 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P9_Replace_Statement]^if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0 )  {^139^^^^^124^154^if  ( MathUtils.sign ( y1 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P15_Unwrap_Block]^x2 = x; y2 = y;^139^140^141^142^143^124^154^if  ( MathUtils.sign ( y1 )  + MathUtils.sign ( y )  == 0.0 )  { x2 = x; y2 = y; } else { x1 = x; x2 = x3; y1 = y; y2 = y3; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P16_Remove_Block]^^139^140^141^142^143^124^154^if  ( MathUtils.sign ( y1 )  + MathUtils.sign ( y )  == 0.0 )  { x2 = x; y2 = y; } else { x1 = x; x2 = x3; y1 = y; y2 = y3; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P13_Insert_Block]^if  (  (  ( sign ( y2 )  )  +  ( sign ( y )  )  )  == 0.0 )  {     x1 = x;     y1 = y; }else {     x1 = x3;     x2 = x;     y1 = y3;     y2 = y; }^139^^^^^124^154^[Delete]^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^x1 = y3; x2 = x3;^142^^^^^139^144^x1 = x; x2 = x3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^x1 =  null; null2^142^^^^^139^144^x1 = x; x2 = x3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^x1 = x3; x2 = x;x1 = x; x2 = x3;^142^^^^^139^144^x1 = x; x2 = x3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^y1 = y3; y2 = y;x1 = x; x2 = x3;^142^^^^^139^144^x1 = x; x2 = x3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^x1 = x; y1 = y;x1 = x; x2 = x3;^142^^^^^139^144^x1 = x; x2 = x3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^x2 = x; y2 = y;x1 = x; x2 = x3;^142^^^^^139^144^x1 = x; x2 = x3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^y1 = y; y2 = y3;x1 = x; x2 = x3;^142^^^^^139^144^x1 = x; x2 = x3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^x1 = x; x2 = y3;^142^^^^^139^144^x1 = x; x2 = x3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^x1 =  x; x2^142^^^^^139^144^x1 = x; x2 = x3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^y1 = x2; y2 = y3;^143^^^^^139^144^y1 = y; y2 = y3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^y1 =  y3; y32^143^^^^^139^144^y1 = y; y2 = y3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^x1 = x3; x2 = x;y1 = y; y2 = y3;^143^^^^^139^144^y1 = y; y2 = y3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^y1 = y3; y2 = y;y1 = y; y2 = y3;^143^^^^^139^144^y1 = y; y2 = y3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^x1 = x; y1 = y;y1 = y; y2 = y3;^143^^^^^139^144^y1 = y; y2 = y3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^x1 = x; x2 = x3;y1 = y; y2 = y3;^143^^^^^139^144^y1 = y; y2 = y3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^x2 = x; y2 = y;y1 = y; y2 = y3;^143^^^^^139^144^y1 = y; y2 = y3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^y1 = y; y2 = x1;^143^^^^^139^144^y1 = y; y2 = y3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^y1 =  y; y2^143^^^^^139^144^y1 = y; y2 = y3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^x2 = y1; y2 = y;^140^^^^^125^155^x2 = x; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^x2 =  y2; y2^140^^^^^125^155^x2 = x; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^x1 = x3; x2 = x;x2 = x; y2 = y;^140^^^^^125^155^x2 = x; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^y1 = y3; y2 = y;x2 = x; y2 = y;^140^^^^^125^155^x2 = x; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^x1 = x; y1 = y;x2 = x; y2 = y;^140^^^^^125^155^x2 = x; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^x1 = x; x2 = x3;x2 = x; y2 = y;^140^^^^^125^155^x2 = x; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^y1 = y; y2 = y3;x2 = x; y2 = y;^140^^^^^125^155^x2 = x; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^x2 = x; y32 = y;^140^^^^^125^155^x2 = x; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^x2 =  x; x12^140^^^^^125^155^x2 = x; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^x2 = x2; y2 = y;^140^^^^^125^155^x2 = x; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^x2 =  null; y2^140^^^^^125^155^x2 = x; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^x2 = x; x22 = y;^140^^^^^125^155^x2 = x; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^x2 =  x; null2^140^^^^^125^155^x2 = x; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^x1 = x2; x2 = x3;^142^^^^^127^157^x1 = x; x2 = x3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^x1 =  null; null2^142^^^^^127^157^x1 = x; x2 = x3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^x1 = x3; x2 = x;x1 = x; x2 = x3;^142^^^^^127^157^x1 = x; x2 = x3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^y1 = y3; y2 = y;x1 = x; x2 = x3;^142^^^^^127^157^x1 = x; x2 = x3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^x1 = x; y1 = y;x1 = x; x2 = x3;^142^^^^^127^157^x1 = x; x2 = x3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^x2 = x; y2 = y;x1 = x; x2 = x3;^142^^^^^127^157^x1 = x; x2 = x3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^y1 = y; y2 = y3;x1 = x; x2 = x3;^142^^^^^127^157^x1 = x; x2 = x3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^x1 = x; x2 = x1;^142^^^^^127^157^x1 = x; x2 = x3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^x1 =  x; x2^142^^^^^127^157^x1 = x; x2 = x3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^y1 = x1; y2 = y3;^143^^^^^128^158^y1 = y; y2 = y3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^y1 =  x3; x32^143^^^^^128^158^y1 = y; y2 = y3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^x1 = x3; x2 = x;y1 = y; y2 = y3;^143^^^^^128^158^y1 = y; y2 = y3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^y1 = y3; y2 = y;y1 = y; y2 = y3;^143^^^^^128^158^y1 = y; y2 = y3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^x1 = x; y1 = y;y1 = y; y2 = y3;^143^^^^^128^158^y1 = y; y2 = y3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^x1 = x; x2 = x3;y1 = y; y2 = y3;^143^^^^^128^158^y1 = y; y2 = y3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^x2 = x; y2 = y;y1 = y; y2 = y3;^143^^^^^128^158^y1 = y; y2 = y3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^y1 = y; y2 = y1;^143^^^^^128^158^y1 = y; y2 = y3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^y1 =  y; y2^143^^^^^128^158^y1 = y; y2 = y3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^if  ( MathUtils.sign ( x3 )  + MathUtils.sign ( y )  == 0.0 )  {^139^^^^^124^154^if  ( MathUtils.sign ( y1 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P2_Replace_Operator]^if  >=  ( MathUtils.sign ( y1 )  + MathUtils.sign ( y )  == 0.0 )  {^139^^^^^124^154^if  ( MathUtils.sign ( y1 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^if  ( MathUtils.sign ( x31 )  + MathUtils.sign ( y )  == 0.0 )  {^139^^^^^124^154^if  ( MathUtils.sign ( y1 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^if  ( MathUtils.sign ( y11 )  + MathUtils.sign ( y )  == 0.0 )  {^139^^^^^124^154^if  ( MathUtils.sign ( y1 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^if  ( MathUtils.sign ( y1 )  + MathUtils.sign ( y )  == 0.0D )  {^139^^^^^124^154^if  ( MathUtils.sign ( y1 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^x1 = y; x2 = x3;^142^^^^^139^144^x1 = x; x2 = x3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^x1 =  y3; y32^142^^^^^139^144^x1 = x; x2 = x3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^x1 = x; x2 = y;^142^^^^^139^144^x1 = x; x2 = x3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^y1 = y2; y2 = y3;^143^^^^^139^144^y1 = y; y2 = y3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^y1 =  x3; x32^143^^^^^139^144^y1 = y; y2 = y3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^y1 = y; y2 = x2;^143^^^^^139^144^y1 = y; y2 = y3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^x2 = y2; y2 = y;^140^^^^^125^155^x2 = x; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^x2 =  y3; y2^140^^^^^125^155^x2 = x; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^x2 =  x; y12^140^^^^^125^155^x2 = x; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P2_Replace_Operator]^if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  > 0.0 )  {^146^^^^^131^161^if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P2_Replace_Operator]^if  >=  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0 )  {^146^^^^^131^161^if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^if  ( MathUtils.sign ( x1 )  + MathUtils.sign ( y )  == 0.0 )  {^146^^^^^131^161^if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^if  ( MathUtils.sign ( y22 )  + MathUtils.sign ( y )  == 0.0 )  {^146^^^^^131^161^if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P6_Replace_Expression]^if  ( sign ( y2 )  + sign ( y ) )  {^146^^^^^131^161^if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0D )  {^146^^^^^131^161^if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P9_Replace_Statement]^if  ( MathUtils.sign ( y1 )  + MathUtils.sign ( y )  == 0.0 )  {^146^^^^^131^161^if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P15_Unwrap_Block]^x1 = x; y1 = y;^146^147^148^149^150^131^161^if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0 )  { x1 = x; y1 = y; } else { x1 = x3; x2 = x; y1 = y3; y2 = y; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P16_Remove_Block]^^146^147^148^149^150^131^161^if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0 )  { x1 = x; y1 = y; } else { x1 = x3; x2 = x; y1 = y3; y2 = y; }^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P13_Insert_Block]^if  (  (  ( sign ( y1 )  )  +  ( sign ( y )  )  )  == 0.0 )  {     x2 = x;     y2 = y; }else {     x1 = x;     x2 = x3;     y1 = y;     y2 = y3; }^146^^^^^131^161^[Delete]^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^x1 = y3; x2 = x;^149^^^^^146^151^x1 = x3; x2 = x;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^x1 =  x2; x2^149^^^^^146^151^x1 = x3; x2 = x;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^y1 = y3; y2 = y;x1 = x3; x2 = x;^149^^^^^146^151^x1 = x3; x2 = x;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^x1 = x; y1 = y;x1 = x3; x2 = x;^149^^^^^146^151^x1 = x3; x2 = x;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^x1 = x; x2 = x3;x1 = x3; x2 = x;^149^^^^^146^151^x1 = x3; x2 = x;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^x2 = x; y2 = y;x1 = x3; x2 = x;^149^^^^^146^151^x1 = x3; x2 = x;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^y1 = y; y2 = y3;x1 = x3; x2 = x;^149^^^^^146^151^x1 = x3; x2 = x;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^x1 = x23; x2 = x;^149^^^^^146^151^x1 = x3; x2 = x;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^x1 =  x33; x32^149^^^^^146^151^x1 = x3; x2 = x;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^y1 = x3; y2 = y;^150^^^^^146^151^y1 = y3; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^y1 =  y; y2^150^^^^^146^151^y1 = y3; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^x1 = x3; x2 = x;y1 = y3; y2 = y;^150^^^^^146^151^y1 = y3; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^x1 = x; y1 = y;y1 = y3; y2 = y;^150^^^^^146^151^y1 = y3; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^x1 = x; x2 = x3;y1 = y3; y2 = y;^150^^^^^146^151^y1 = y3; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^x2 = x; y2 = y;y1 = y3; y2 = y;^150^^^^^146^151^y1 = y3; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^y1 = y; y2 = y3;y1 = y3; y2 = y;^150^^^^^146^151^y1 = y3; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^y1 = y33; y2 = y;^150^^^^^146^151^y1 = y3; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^y1 =  y13; y12^150^^^^^146^151^y1 = y3; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^x1 = x3; y1 = y;^147^^^^^132^162^x1 = x; y1 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^x1 =  y3; y1^147^^^^^132^162^x1 = x; y1 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^x1 = x3; x2 = x;x1 = x; y1 = y;^147^^^^^132^162^x1 = x; y1 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^y1 = y3; y2 = y;x1 = x; y1 = y;^147^^^^^132^162^x1 = x; y1 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^x1 = x; x2 = x3;x1 = x; y1 = y;^147^^^^^132^162^x1 = x; y1 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^x2 = x; y2 = y;x1 = x; y1 = y;^147^^^^^132^162^x1 = x; y1 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^y1 = y; y2 = y3;x1 = x; y1 = y;^147^^^^^132^162^x1 = x; y1 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^x1 = x; x21 = y;^147^^^^^132^162^x1 = x; y1 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^x1 =  x; y21^147^^^^^132^162^x1 = x; y1 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P2_Replace_Operator]^x3 / = 0.5 *  ( x1 + x2 ) ;^113^^^^^98^128^x3 = 0.5 *  ( x1 + x2 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P2_Replace_Operator]^x3 = 0.5 *  ( x1  ||  x2 ) ;^113^^^^^98^128^x3 = 0.5 *  ( x1 + x2 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P3_Replace_Literal]^x3 = 0.05555555555555555 *  ( x1 + x2 ) ;^113^^^^^98^128^x3 = 0.5 *  ( x1 + x2 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^x3 = 0.5 *  ( x3 + x2 ) ;^113^^^^^98^128^x3 = 0.5 *  ( x1 + x2 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^x3 = 0.5 *  ( x1 + y3 ) ;^113^^^^^98^128^x3 = 0.5 *  ( x1 + x2 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^x3 = 0.5 *  ( x2 + x1 ) ;^113^^^^^98^128^x3 = 0.5 *  ( x1 + x2 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^x3 = 0.5D *  ( x1 + x2 ) ;^113^^^^^98^128^x3 = 0.5 *  ( x1 + x2 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^y3 = f.value ( y1 ) ;^114^^^^^99^129^y3 = f.value ( x3 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^y3 = x3.value ( f ) ;^114^^^^^99^129^y3 = f.value ( x3 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^y3 =  f.value ( y ) ;^114^^^^^99^129^y3 = f.value ( x3 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^x1 = min; y1 = f.value ( x1 ) ;y3 = f.value ( x3 ) ;^114^^^^^99^129^y3 = f.value ( x3 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^x2 = max; y2 = f.value ( x2 ) ;y3 = f.value ( x3 ) ;^114^^^^^99^129^y3 = f.value ( x3 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^y = f.value ( x ) ;y3 = f.value ( x3 ) ;^114^^^^^99^129^y3 = f.value ( x3 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P2_Replace_Operator]^delta = 1  <   ( y1 * y2 )  /  ( y3 * y3 ) ;^119^^^^^104^134^delta = 1 -  ( y1 * y2 )  /  ( y3 * y3 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P2_Replace_Operator]^delta = 1 -  ( y1 * y2 )  *  ( y3 * y3 ) ;^119^^^^^104^134^delta = 1 -  ( y1 * y2 )  /  ( y3 * y3 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P2_Replace_Operator]^delta = 1 -  ( y1 / y2 )  /  ( y3 * y3 ) ;^119^^^^^104^134^delta = 1 -  ( y1 * y2 )  /  ( y3 * y3 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P2_Replace_Operator]^delta = 1 -  ( y1 * y2 )  /  ( y3 / y3 ) ;^119^^^^^104^134^delta = 1 -  ( y1 * y2 )  /  ( y3 * y3 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P3_Replace_Literal]^delta = i -  ( yi * y2 )  /  ( y3 * y3 ) ;^119^^^^^104^134^delta = 1 -  ( y1 * y2 )  /  ( y3 * y3 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^delta = 1 -  ( x2 * y2 )  /  ( y3 * y3 ) ;^119^^^^^104^134^delta = 1 -  ( y1 * y2 )  /  ( y3 * y3 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^delta = 1 -  ( y1 * x2 )  /  ( y3 * y3 ) ;^119^^^^^104^134^delta = 1 -  ( y1 * y2 )  /  ( y3 * y3 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^delta = 1 -  ( y1 * y2 )  /  ( x2 * y3 ) ;^119^^^^^104^134^delta = 1 -  ( y1 * y2 )  /  ( y3 * y3 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^delta = 1 -  ( y3 * y2 )  /  ( y1 * y3 ) ;^119^^^^^104^134^delta = 1 -  ( y1 * y2 )  /  ( y3 * y3 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^delta = 1 -  ( y1 * y3 )  /  ( y2 * y3 ) ;^119^^^^^104^134^delta = 1 -  ( y1 * y2 )  /  ( y3 * y3 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^delta = 3 -  ( y3 * y2 )  /  ( y3 * y3 ) ;^119^^^^^104^134^delta = 1 -  ( y1 * y2 )  /  ( y3 * y3 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P2_Replace_Operator]^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  - Math.sqrt ( delta ) ;^120^121^^^^105^135^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P2_Replace_Operator]^correction + =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^120^121^^^^105^135^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P2_Replace_Operator]^correction - =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^120^121^^^^105^135^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P2_Replace_Operator]^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3  ^  x1 )  / Math.sqrt ( delta ) ;^120^121^^^^105^135^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^correction =  ( MathUtils.sign ( x3 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^120^121^^^^105^135^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y1 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^120^121^^^^105^135^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x2 - x1 )  / Math.sqrt ( delta ) ;^120^121^^^^105^135^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - y )  / Math.sqrt ( delta ) ;^120^121^^^^105^135^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( x2 ) ;^120^121^^^^105^135^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^correction =  ( MathUtils.sign ( y3 )  * MathUtils.sign ( y2 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^120^121^^^^105^135^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( x3 )  )  * ( y3 - x1 )  / Math.sqrt ( delta ) ;^120^121^^^^105^135^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( delta - x1 )  / Math.sqrt ( x3 ) ;^120^121^^^^105^135^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( x1 )  )  * ( x3 - y3 )  / Math.sqrt ( delta ) ;^120^121^^^^105^135^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^correction =  ( MathUtils.sign ( delta )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( y2 ) ;^120^121^^^^105^135^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P7_Replace_Invocation]^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.abs ( delta ) ;^120^121^^^^105^135^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^correction =   ( MathUtils.sign ( y )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^120^121^^^^105^135^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P2_Replace_Operator]^x = x3  &&  correction;^122^^^^^107^137^x = x3 - correction;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^x = y - correction;^122^^^^^107^137^x = x3 - correction;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^x = x3 - y3;^122^^^^^107^137^x = x3 - correction;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^x = correction - x3;^122^^^^^107^137^x = x3 - correction;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^x =  y2 - correction;^122^^^^^107^137^x = x3 - correction;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^y = f.value ( x2 ) ;^123^^^^^108^138^y = f.value ( x ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^y = x.value ( f ) ;^123^^^^^108^138^y = f.value ( x ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^y =  f.value ( x3 ) ;^123^^^^^108^138^y = f.value ( x ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^x1 = min; y1 = f.value ( x1 ) ;y = f.value ( x ) ;^123^^^^^108^138^y = f.value ( x ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^x2 = max; y2 = f.value ( x2 ) ;y = f.value ( x ) ;^123^^^^^108^138^y = f.value ( x ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^y3 = f.value ( x3 ) ;y = f.value ( x ) ;^123^^^^^108^138^y = f.value ( x ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P2_Replace_Operator]^tolerance / = Math.max ( relativeAccuracy * Math.abs ( x ) , absoluteAccuracy ) ;^126^^^^^111^141^tolerance = Math.max ( relativeAccuracy * Math.abs ( x ) , absoluteAccuracy ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^tolerance = Math.max ( relativeAccuracy * Math.abs ( y3 ) , absoluteAccuracy ) ;^126^^^^^111^141^tolerance = Math.max ( relativeAccuracy * Math.abs ( x ) , absoluteAccuracy ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^tolerance = Math.max ( relativeAccuracy * Math.abs ( x )  ) ;^126^^^^^111^141^tolerance = Math.max ( relativeAccuracy * Math.abs ( x ) , absoluteAccuracy ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^tolerance = Math.max ( relativeAccuracy * Math.abs ( absoluteAccuracy ) , x ) ;^126^^^^^111^141^tolerance = Math.max ( relativeAccuracy * Math.abs ( x ) , absoluteAccuracy ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^tolerance = Math.max ( x * Math.abs ( relativeAccuracy ) , absoluteAccuracy ) ;^126^^^^^111^141^tolerance = Math.max ( relativeAccuracy * Math.abs ( x ) , absoluteAccuracy ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^tolerance = Math.max ( absoluteAccuracy * Math.abs ( x ) , relativeAccuracy ) ;^126^^^^^111^141^tolerance = Math.max ( relativeAccuracy * Math.abs ( x ) , absoluteAccuracy ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P7_Replace_Invocation]^tolerance = Math.abs ( relativeAccuracy * Math.abs ( x ) , absoluteAccuracy ) ;^126^^^^^111^141^tolerance = Math.max ( relativeAccuracy * Math.abs ( x ) , absoluteAccuracy ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P7_Replace_Invocation]^tolerance = Math.max ( relativeAccuracy * Math.sqrt ( x ) , absoluteAccuracy ) ;^126^^^^^111^141^tolerance = Math.max ( relativeAccuracy * Math.abs ( x ) , absoluteAccuracy ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^tolerance =  Math.max3 ( relativeAccuracy * Math.abs ( x3 ) , absoluteAccuracy ) ;^126^^^^^111^141^tolerance = Math.max ( relativeAccuracy * Math.abs ( x ) , absoluteAccuracy ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^x2 = y; y2 = y;^140^^^^^125^155^x2 = x; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^x2 = x; x12 = y;^140^^^^^125^155^x2 = x; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^x1 = y; x2 = x3;^142^^^^^127^157^x1 = x; x2 = x3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^y1 = y1; y2 = y3;^143^^^^^128^158^y1 = y; y2 = y3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^y1 =  x2; x22^143^^^^^128^158^y1 = y; y2 = y3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^y1 = y; y2 = y;^143^^^^^128^158^y1 = y; y2 = y3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^x1 = x2; y1 = y;^147^^^^^132^162^x1 = x; y1 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^x1 =  y; y1^147^^^^^132^162^x1 = x; y1 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^x1 = x; x11 = y;^147^^^^^132^162^x1 = x; y1 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^x1 =  x; x11^147^^^^^132^162^x1 = x; y1 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^x1 = x1; x2 = x;^149^^^^^134^164^x1 = x3; x2 = x;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^x1 =  x2; x2^149^^^^^134^164^x1 = x3; x2 = x;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^y1 = y3; y2 = y;x1 = x3; x2 = x;^149^^^^^134^164^x1 = x3; x2 = x;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^x1 = x; y1 = y;x1 = x3; x2 = x;^149^^^^^134^164^x1 = x3; x2 = x;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^x1 = x; x2 = x3;x1 = x3; x2 = x;^149^^^^^134^164^x1 = x3; x2 = x;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^x2 = x; y2 = y;x1 = x3; x2 = x;^149^^^^^134^164^x1 = x3; x2 = x;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^y1 = y; y2 = y3;x1 = x3; x2 = x;^149^^^^^134^164^x1 = x3; x2 = x;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^x1 = y3; x2 = x;^149^^^^^134^164^x1 = x3; x2 = x;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^x1 =  y33; y32^149^^^^^134^164^x1 = x3; x2 = x;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^y1 = y2; y2 = y;^150^^^^^135^165^y1 = y3; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^y1 =  x2; y2^150^^^^^135^165^y1 = y3; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^x1 = x3; x2 = x;y1 = y3; y2 = y;^150^^^^^135^165^y1 = y3; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^x1 = x; y1 = y;y1 = y3; y2 = y;^150^^^^^135^165^y1 = y3; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^x1 = x; x2 = x3;y1 = y3; y2 = y;^150^^^^^135^165^y1 = y3; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^x2 = x; y2 = y;y1 = y3; y2 = y;^150^^^^^135^165^y1 = y3; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P11_Insert_Donor_Statement]^y1 = y; y2 = y3;y1 = y3; y2 = y;^150^^^^^135^165^y1 = y3; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^y1 = x13; y2 = y;^150^^^^^135^165^y1 = y3; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^y1 =  null3; null2^150^^^^^135^165^y1 = y3; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^oldx = y3;^153^^^^^138^168^oldx = x;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^oldx =  y1;^153^^^^^138^168^oldx = x;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^y3 = f.value ( y3 ) ;^114^^^^^99^129^y3 = f.value ( x3 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^y3 = f.value ( x2 ) ;^114^^^^^99^129^y3 = f.value ( x3 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P14_Delete_Statement]^^114^^^^^99^129^y3 = f.value ( x3 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^if  ( Math.abs ( x1 )  <= functionValueAccuracy )  {^115^^^^^100^130^if  ( Math.abs ( y3 )  <= functionValueAccuracy )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^if  ( Math.abs ( x3 )  <= functionValueAccuracy )  {^115^^^^^100^130^if  ( Math.abs ( y3 )  <= functionValueAccuracy )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^correction =  ( MathUtils.sign ( y1 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^120^121^^^^105^135^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P14_Delete_Statement]^^120^121^^^^105^135^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( x2 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^120^121^^^^105^135^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( x1 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^120^121^^^^105^135^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^( x3 - x1 )  / Math.sqrt ( y3 ) ;^121^^^^^106^136^( x3 - x1 )  / Math.sqrt ( delta ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P7_Replace_Invocation]^( x3 - x1 )  / Math.abs ( delta ) ;^121^^^^^106^136^( x3 - x1 )  / Math.sqrt ( delta ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^( x3 - x1 )  / Math.sqrt ( y1 ) ;^121^^^^^106^136^( x3 - x1 )  / Math.sqrt ( delta ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P14_Delete_Statement]^^121^^^^^106^136^( x3 - x1 )  / Math.sqrt ( delta ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P14_Delete_Statement]^^123^^^^^108^138^y = f.value ( x ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P2_Replace_Operator]^tolerance - = Math.max ( relativeAccuracy * Math.abs ( x ) , absoluteAccuracy ) ;^126^^^^^111^141^tolerance = Math.max ( relativeAccuracy * Math.abs ( x ) , absoluteAccuracy ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^tolerance = Math.max ( relativeAccuracy * Math.abs ( y2 ) , absoluteAccuracy ) ;^126^^^^^111^141^tolerance = Math.max ( relativeAccuracy * Math.abs ( x ) , absoluteAccuracy ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^tolerance = Math.max ( relativeAccuracy * Math.abs ( x3 ) , absoluteAccuracy ) ;^126^^^^^111^141^tolerance = Math.max ( relativeAccuracy * Math.abs ( x ) , absoluteAccuracy ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P14_Delete_Statement]^^126^^^^^111^141^tolerance = Math.max ( relativeAccuracy * Math.abs ( x ) , absoluteAccuracy ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^tolerance = Math.max ( relativeAccuracy * Math.abs ( x2 ) , absoluteAccuracy ) ;^126^^^^^111^141^tolerance = Math.max ( relativeAccuracy * Math.abs ( x ) , absoluteAccuracy ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P2_Replace_Operator]^if  ( Math.abs ( x  >  oldx )  <= tolerance )  {^127^^^^^112^142^if  ( Math.abs ( x - oldx )  <= tolerance )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^if  ( Math.abs ( x - y1 )  <= tolerance )  {^127^^^^^112^142^if  ( Math.abs ( x - oldx )  <= tolerance )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^if  ( Math.max ( y - oldx )  <= tolerance )  {^127^^^^^112^142^if  ( Math.abs ( x - oldx )  <= tolerance )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^setResult ( y, i ) ;^128^^^^^113^143^setResult ( x, i ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^if  ( Math.abs ( x1 )  <= functionValueAccuracy )  {^131^^^^^116^146^if  ( Math.abs ( y )  <= functionValueAccuracy )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^if  ( Math.sqrt ( x1 )  <= functionValueAccuracy )  {^131^^^^^116^146^if  ( Math.abs ( y )  <= functionValueAccuracy )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^setResult ( x2, i ) ;^132^^^^^117^147^setResult ( x, i ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^setResult ( x3, i ) ;^132^^^^^117^147^setResult ( x, i ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P14_Delete_Statement]^^132^^^^^117^147^setResult ( x, i ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^if  ( MathUtils.sign ( y )  + MathUtils.sign ( y )  == 0.0 )  {^139^^^^^124^154^if  ( MathUtils.sign ( y1 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^if  ( MathUtils.sign ( x21 )  + MathUtils.sign ( y )  == 0.0 )  {^139^^^^^124^154^if  ( MathUtils.sign ( y1 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^if  ( MathUtils.sign ( y )  + MathUtils.sign ( y )  == 0.0 )  {^146^^^^^131^161^if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^if  ( MathUtils.sign ( y32 )  + MathUtils.sign ( y )  == 0.0 )  {^146^^^^^131^161^if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^if  ( MathUtils.sign ( x12 )  + MathUtils.sign ( y )  == 0.0 )  {^146^^^^^131^161^if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P2_Replace_Operator]^if  ( Math.abs ( y3 )  == functionValueAccuracy )  {^115^^^^^100^130^if  ( Math.abs ( y3 )  <= functionValueAccuracy )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^if  ( Math.abs ( y1 )  <= functionValueAccuracy )  {^115^^^^^100^130^if  ( Math.abs ( y3 )  <= functionValueAccuracy )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^setResult ( y, i ) ;^116^^^^^101^131^setResult ( x3, i ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^setResult ( x2, i ) ;^116^^^^^101^131^setResult ( x3, i ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P14_Delete_Statement]^^116^^^^^101^131^setResult ( x3, i ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P2_Replace_Operator]^if  ( Math.abs ( x  >=  oldx )  <= tolerance )  {^127^^^^^112^142^if  ( Math.abs ( x - oldx )  <= tolerance )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^if  ( Math.abs ( y3 - oldx )  <= tolerance )  {^127^^^^^112^142^if  ( Math.abs ( x - oldx )  <= tolerance )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^if  ( Math.abs ( x - y )  <= tolerance )  {^127^^^^^112^142^if  ( Math.abs ( x - oldx )  <= tolerance )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^if  ( Math.abs ( x - oldx )  <= y3 )  {^127^^^^^112^142^if  ( Math.abs ( x - oldx )  <= tolerance )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^return 0;^129^^^^^114^144^return result;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^setResult ( y1, i ) ;^128^^^^^113^143^setResult ( x, i ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^setResult ( y3, i ) ;^128^^^^^113^143^setResult ( x, i ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P2_Replace_Operator]^if  ( Math.abs ( y )  == functionValueAccuracy )  {^131^^^^^116^146^if  ( Math.abs ( y )  <= functionValueAccuracy )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^if  ( Math.abs ( functionValueAccuracy )  <= y )  {^131^^^^^116^146^if  ( Math.abs ( y )  <= functionValueAccuracy )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^if  ( Math.abs ( y1 )  <= functionValueAccuracy )  {^131^^^^^116^146^if  ( Math.abs ( y )  <= functionValueAccuracy )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^setResult ( y3, i ) ;^132^^^^^117^147^setResult ( x, i ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P2_Replace_Operator]^if  ( correction >= 0.0 )  {^138^^^^^123^153^if  ( correction > 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^if  ( x2 > 0.0 )  {^138^^^^^123^153^if  ( correction > 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^if  ( correction > 0.0d )  {^138^^^^^123^153^if  ( correction > 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P2_Replace_Operator]^if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  >= 0.0 )  {^146^^^^^138^152^if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P2_Replace_Operator]^if  &  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0 )  {^146^^^^^138^152^if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0D )  {^146^^^^^138^152^if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^x1 = y1; x2 = x;^149^^^^^138^152^x1 = x3; x2 = x;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^x1 =  y; x2^149^^^^^138^152^x1 = x3; x2 = x;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^x1 =  y33; y32^149^^^^^138^152^x1 = x3; x2 = x;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^y1 = y; y2 = y;^150^^^^^138^152^y1 = y3; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^y1 = y33; y2 = y;^150^^^^^138^152^y1 = y3; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^y1 =  y33; y32^150^^^^^138^152^y1 = y3; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^x1 =  x3; y1^147^^^^^138^152^x1 = x; y1 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^x1 = x; x11 = y;^147^^^^^138^152^x1 = x; y1 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^x1 =  x; x11^147^^^^^138^152^x1 = x; y1 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^x1 = y1; y1 = y;^147^^^^^138^152^x1 = x; y1 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^x1 = x1; x2 = x;^149^^^^^138^152^x1 = x3; x2 = x;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^x1 =  x2; x2^149^^^^^138^152^x1 = x3; x2 = x;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^x1 = x23; x2 = x;^149^^^^^138^152^x1 = x3; x2 = x;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^x1 =  y3; y2^149^^^^^138^152^x1 = x3; x2 = x;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^y1 = x1; y2 = y;^150^^^^^138^152^y1 = y3; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^y1 =  x2; y2^150^^^^^138^152^y1 = y3; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^y1 =  x23; x22^150^^^^^138^152^y1 = y3; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^if  ( MathUtils.sign ( x32 )  + MathUtils.sign ( y )  == 0.0 )  {^146^^^^^138^152^if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P2_Replace_Operator]^if  <  ( MathUtils.sign ( y1 )  + MathUtils.sign ( y )  == 0.0 )  {^139^^^^^124^154^if  ( MathUtils.sign ( y1 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^if  ( MathUtils.sign ( y )  + MathUtils.sign ( y1 )  == 0.0 )  {^139^^^^^124^154^if  ( MathUtils.sign ( y1 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^if  ( MathUtils.sign ( y1 )  + MathUtils.sign ( y )  == 2.0d )  {^139^^^^^124^154^if  ( MathUtils.sign ( y1 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^x1 =  y; y2^142^^^^^139^144^x1 = x; x2 = x3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^x1 = x; x2 = x1;^142^^^^^139^144^x1 = x; x2 = x3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^y1 = y; y2 = y2;^143^^^^^139^144^y1 = y; y2 = y3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^x2 = x3; y2 = y;^140^^^^^125^155^x2 = x; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^x1 = x3; x2 = x3;^142^^^^^127^157^x1 = x; x2 = x3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^x1 =  y3; y32^142^^^^^127^157^x1 = x; x2 = x3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^y1 = x3; y2 = y3;^143^^^^^128^158^y1 = y; y2 = y3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^y1 =  y3; y32^143^^^^^128^158^y1 = y; y2 = y3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^if  ( MathUtils.sign ( x1 )  + MathUtils.sign ( y )  == 0.0 )  {^139^^^^^124^154^if  ( MathUtils.sign ( y1 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P2_Replace_Operator]^if  ( MathUtils.sign ( y1 )  + MathUtils.sign ( y )  >= 0.0 )  {^139^^^^^124^154^if  ( MathUtils.sign ( y1 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P2_Replace_Operator]^if  >>  ( MathUtils.sign ( y1 )  + MathUtils.sign ( y )  == 0.0 )  {^139^^^^^124^154^if  ( MathUtils.sign ( y1 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^if  ( MathUtils.sign ( x2 )  + MathUtils.sign ( y )  == 0.0 )  {^139^^^^^124^154^if  ( MathUtils.sign ( y1 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^if  ( MathUtils.sign ( y31 )  + MathUtils.sign ( y )  == 0.0 )  {^139^^^^^124^154^if  ( MathUtils.sign ( y1 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^x1 = x3; x2 = x3;^142^^^^^139^144^x1 = x; x2 = x3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^y1 =  x2; x22^143^^^^^139^144^y1 = y; y2 = y3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^y1 = y; y2 = x3;^143^^^^^139^144^y1 = y; y2 = y3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^x2 =  x; x22^140^^^^^125^155^x2 = x; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P2_Replace_Operator]^if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  >= 0.0 )  {^146^^^^^131^161^if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P2_Replace_Operator]^if  &&  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0 )  {^146^^^^^131^161^if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^if  ( MathUtils.sign ( y3 )  + MathUtils.sign ( y )  == 0.0 )  {^146^^^^^131^161^if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^x1 = x2; x2 = x;^149^^^^^146^151^x1 = x3; x2 = x;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^y1 = x2; y2 = y;^150^^^^^146^151^y1 = y3; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^y1 =  x1; y2^150^^^^^146^151^y1 = y3; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^y1 =  y33; y32^150^^^^^146^151^y1 = y3; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^x1 =  x; x21^147^^^^^132^162^x1 = x; y1 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P2_Replace_Operator]^x3 + = 0.5 *  ( x1 + x2 ) ;^113^^^^^98^128^x3 = 0.5 *  ( x1 + x2 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P2_Replace_Operator]^x3 = 0.5 *  ( x1  >>  x2 ) ;^113^^^^^98^128^x3 = 0.5 *  ( x1 + x2 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^x3 = 0.5 *  ( x1 + y ) ;^113^^^^^98^128^x3 = 0.5 *  ( x1 + x2 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^x3 = 0.0d *  ( x1 + x2 ) ;^113^^^^^98^128^x3 = 0.5 *  ( x1 + x2 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^y3 = null.value ( x3 ) ;^114^^^^^99^129^y3 = f.value ( x3 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^y3 =  f.value ( x1 ) ;^114^^^^^99^129^y3 = f.value ( x3 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P2_Replace_Operator]^delta = 1  ==   ( y1 * y2 )  /  ( y3 * y3 ) ;^119^^^^^104^134^delta = 1 -  ( y1 * y2 )  /  ( y3 * y3 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P2_Replace_Operator]^delta = 1 -  ( y1 - y2 )  /  ( y3 * y3 ) ;^119^^^^^104^134^delta = 1 -  ( y1 * y2 )  /  ( y3 * y3 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P2_Replace_Operator]^delta = 1 -  ( y1 * y2 )  /  ( y3 + y3 ) ;^119^^^^^104^134^delta = 1 -  ( y1 * y2 )  /  ( y3 * y3 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^delta = 1 -  ( y1 * y3 )  /  ( y3 * y3 ) ;^119^^^^^104^134^delta = 1 -  ( y1 * y2 )  /  ( y3 * y3 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^delta = 1 -  ( y2 * y1 )  /  ( y3 * y3 ) ;^119^^^^^104^134^delta = 1 -  ( y1 * y2 )  /  ( y3 * y3 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^delta = 0 -  ( y0 * y2 )  /  ( y3 * y3 ) ;^119^^^^^104^134^delta = 1 -  ( y1 * y2 )  /  ( y3 * y3 ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P2_Replace_Operator]^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  + Math.sqrt ( delta ) ;^120^121^^^^105^135^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P2_Replace_Operator]^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3  &  x1 )  / Math.sqrt ( delta ) ;^120^121^^^^105^135^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( y - x1 )  / Math.sqrt ( delta ) ;^120^121^^^^105^135^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x1 - x3 )  / Math.sqrt ( delta ) ;^120^121^^^^105^135^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P2_Replace_Operator]^x = x3  &  correction;^122^^^^^107^137^x = x3 - correction;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^x =  x2 - correction;^122^^^^^107^137^x = x3 - correction;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P2_Replace_Operator]^tolerance + = Math.max ( relativeAccuracy * Math.abs ( x ) , absoluteAccuracy ) ;^126^^^^^111^141^tolerance = Math.max ( relativeAccuracy * Math.abs ( x ) , absoluteAccuracy ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^x1 =  y1; y12^142^^^^^127^157^x1 = x; x2 = x3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^y1 = y3; y2 = y3;^143^^^^^128^158^y1 = y; y2 = y3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^y1 = y; y2 = x1;^143^^^^^128^158^y1 = y; y2 = y3;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^x1 = y3; y1 = y;^147^^^^^132^162^x1 = x; y1 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^x1 = y1; x2 = x;^149^^^^^134^164^x1 = x3; x2 = x;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^x1 = x23; x2 = x;^149^^^^^134^164^x1 = x3; x2 = x;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^y1 = x1; y2 = y;^150^^^^^135^165^y1 = y3; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^y1 =  y2; y2^150^^^^^135^165^y1 = y3; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^y1 = y23; y2 = y;^150^^^^^135^165^y1 = y3; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^y1 =  x23; x22^150^^^^^135^165^y1 = y3; y2 = y;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^oldx = y;^153^^^^^138^168^oldx = x;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^return 1;^117^^^^^102^132^return result;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^return null;^133^^^^^118^148^return result;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^correction =  ( MathUtils.sign ( x1 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^120^121^^^^105^135^correction =  ( MathUtils.sign ( y2 )  * MathUtils.sign ( y3 )  )  * ( x3 - x1 )  / Math.sqrt ( delta ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^( x3 - x1 )  / Math.sqrt ( x2 ) ;^121^^^^^106^136^( x3 - x1 )  / Math.sqrt ( delta ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P14_Delete_Statement]^^121^122^^^^106^136^( x3 - x1 )  / Math.sqrt ( delta ) ; x = x3 - correction;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^y = f.value ( y3 ) ;^123^^^^^108^138^y = f.value ( x ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^y = 1.value ( x ) ;^123^^^^^108^138^y = f.value ( x ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^tolerance = Math.max ( relativeAccuracy * Math.abs ( y ) , absoluteAccuracy ) ;^126^^^^^111^141^tolerance = Math.max ( relativeAccuracy * Math.abs ( x ) , absoluteAccuracy ) ;^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P2_Replace_Operator]^if  ( Math.abs ( x  <  oldx )  <= tolerance )  {^127^^^^^112^142^if  ( Math.abs ( x - oldx )  <= tolerance )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^if  ( Math.max ( y3 - oldx )  <= tolerance )  {^127^^^^^112^142^if  ( Math.abs ( x - oldx )  <= tolerance )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P8_Replace_Mix]^if  ( MathUtils.sign ( x2 )  + MathUtils.sign ( y )  == 0.0 )  {^146^^^^^131^161^if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
[P5_Replace_Variable]^if  ( MathUtils.sign ( x22 )  + MathUtils.sign ( y )  == 0.0 )  {^146^^^^^131^161^if  ( MathUtils.sign ( y2 )  + MathUtils.sign ( y )  == 0.0 )  {^[CLASS] RiddersSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  correction  delta  max  min  oldx  tolerance  x  x1  x2  x3  y  y1  y2  y3  int  i  
