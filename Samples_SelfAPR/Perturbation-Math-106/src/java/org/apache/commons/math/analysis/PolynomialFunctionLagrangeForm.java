[P1_Replace_Type]^static final  short  serialVersionUID = -3965199246151093920L;^36^^^^^31^41^static final long serialVersionUID = -3965199246151093920L;^[CLASS] PolynomialFunctionLagrangeForm   [VARIABLES] 
[P8_Replace_Mix]^static final  int  serialVersionUID = -3965199246151093920;^36^^^^^31^41^static final long serialVersionUID = -3965199246151093920L;^[CLASS] PolynomialFunctionLagrangeForm   [VARIABLES] 
[P5_Replace_Variable]^verifyInterpolationArray ( coefficients, y ) ;^68^^^^^65^74^verifyInterpolationArray ( x, y ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[P5_Replace_Variable]^verifyInterpolationArray ( x, coefficients ) ;^68^^^^^65^74^verifyInterpolationArray ( x, y ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[P5_Replace_Variable]^verifyInterpolationArray (  y ) ;^68^^^^^65^74^verifyInterpolationArray ( x, y ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[P5_Replace_Variable]^verifyInterpolationArray ( x ) ;^68^^^^^65^74^verifyInterpolationArray ( x, y ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[P5_Replace_Variable]^verifyInterpolationArray ( y, x ) ;^68^^^^^65^74^verifyInterpolationArray ( x, y ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[P7_Replace_Invocation]^PolynomialFunctionLagrangeForm ( x, y ) ;^68^^^^^65^74^verifyInterpolationArray ( x, y ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[P5_Replace_Variable]^this.y = new double[x.length];^69^^^^^65^74^this.x = new double[x.length];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[P8_Replace_Mix]^this.x =  new double[null.length];^69^^^^^65^74^this.x = new double[x.length];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[P11_Insert_Donor_Statement]^c = new double[n+1];this.x = new double[x.length];^69^^^^^65^74^this.x = new double[x.length];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[P11_Insert_Donor_Statement]^tc = new double[n];this.x = new double[x.length];^69^^^^^65^74^this.x = new double[x.length];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[P11_Insert_Donor_Statement]^c = new double[n];this.x = new double[x.length];^69^^^^^65^74^this.x = new double[x.length];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[P11_Insert_Donor_Statement]^d = new double[n];this.x = new double[x.length];^69^^^^^65^74^this.x = new double[x.length];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[P11_Insert_Donor_Statement]^this.y = new double[y.length];this.x = new double[x.length];^69^^^^^65^74^this.x = new double[x.length];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[P5_Replace_Variable]^this.x = new double[y.length];^70^^^^^65^74^this.y = new double[y.length];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[P8_Replace_Mix]^this.y =  new double[x.length];^70^^^^^65^74^this.y = new double[y.length];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[P11_Insert_Donor_Statement]^c = new double[n+1];this.y = new double[y.length];^70^^^^^65^74^this.y = new double[y.length];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[P11_Insert_Donor_Statement]^this.x = new double[x.length];this.y = new double[y.length];^70^^^^^65^74^this.y = new double[y.length];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[P11_Insert_Donor_Statement]^tc = new double[n];this.y = new double[y.length];^70^^^^^65^74^this.y = new double[y.length];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[P11_Insert_Donor_Statement]^c = new double[n];this.y = new double[y.length];^70^^^^^65^74^this.y = new double[y.length];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[P11_Insert_Donor_Statement]^d = new double[n];this.y = new double[y.length];^70^^^^^65^74^this.y = new double[y.length];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[P3_Replace_Literal]^System.arraycopy ( x, 6, this.x, 6, x.length ) ;^71^^^^^65^74^System.arraycopy ( x, 0, this.x, 0, x.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy ( y, 0, this.x, 0, x.length ) ;^71^^^^^65^74^System.arraycopy ( x, 0, this.x, 0, x.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy ( x, 0, y, 0, x.length ) ;^71^^^^^65^74^System.arraycopy ( x, 0, this.x, 0, x.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy (  0, this.x, 0, x.length ) ;^71^^^^^65^74^System.arraycopy ( x, 0, this.x, 0, x.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy ( x, 0,  0, x.length ) ;^71^^^^^65^74^System.arraycopy ( x, 0, this.x, 0, x.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy ( x, 0, this.x, 0 ) ;^71^^^^^65^74^System.arraycopy ( x, 0, this.x, 0, x.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy ( this.x, 0, x, 0, x.length ) ;^71^^^^^65^74^System.arraycopy ( x, 0, this.x, 0, x.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy ( x, 0, x.length, 0, this.x ) ;^71^^^^^65^74^System.arraycopy ( x, 0, this.x, 0, x.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[P14_Delete_Statement]^^71^^^^^65^74^System.arraycopy ( x, 0, this.x, 0, x.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[P11_Insert_Donor_Statement]^System.arraycopy ( y, 0, out, 0, y.length ) ;System.arraycopy ( x, 0, this.x, 0, x.length ) ;^71^^^^^65^74^System.arraycopy ( x, 0, this.x, 0, x.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[P11_Insert_Donor_Statement]^System.arraycopy ( y, 0, this.y, 0, y.length ) ;System.arraycopy ( x, 0, this.x, 0, x.length ) ;^71^^^^^65^74^System.arraycopy ( x, 0, this.x, 0, x.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[P11_Insert_Donor_Statement]^System.arraycopy ( x, 0, out, 0, x.length ) ;System.arraycopy ( x, 0, this.x, 0, x.length ) ;^71^^^^^65^74^System.arraycopy ( x, 0, this.x, 0, x.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[P11_Insert_Donor_Statement]^System.arraycopy ( coefficients, 0, out, 0, coefficients.length ) ;System.arraycopy ( x, 0, this.x, 0, x.length ) ;^71^^^^^65^74^System.arraycopy ( x, 0, this.x, 0, x.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[P3_Replace_Literal]^System.arraycopy ( y, 6, this.y, 6, y.length ) ;^72^^^^^65^74^System.arraycopy ( y, 0, this.y, 0, y.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[P3_Replace_Literal]^System.arraycopy ( y, 1, this.y, 1, y.length ) ;^72^^^^^65^74^System.arraycopy ( y, 0, this.y, 0, y.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy ( x, 0, this.y, 0, y.length ) ;^72^^^^^65^74^System.arraycopy ( y, 0, this.y, 0, y.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy ( y, 0, x, 0, y.length ) ;^72^^^^^65^74^System.arraycopy ( y, 0, this.y, 0, y.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy ( y, 0, this.y, 0, 0 ) ;^72^^^^^65^74^System.arraycopy ( y, 0, this.y, 0, y.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy (  0, this.y, 0, y.length ) ;^72^^^^^65^74^System.arraycopy ( y, 0, this.y, 0, y.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy ( y, 0,  0, y.length ) ;^72^^^^^65^74^System.arraycopy ( y, 0, this.y, 0, y.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy ( y, 0, this.y, 0 ) ;^72^^^^^65^74^System.arraycopy ( y, 0, this.y, 0, y.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy ( this.y, 0, y, 0, y.length ) ;^72^^^^^65^74^System.arraycopy ( y, 0, this.y, 0, y.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy ( y.length, 0, this.y, 0, y ) ;^72^^^^^65^74^System.arraycopy ( y, 0, this.y, 0, y.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[P14_Delete_Statement]^^72^73^^^^65^74^System.arraycopy ( y, 0, this.y, 0, y.length ) ; coefficientsComputed = false;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[P11_Insert_Donor_Statement]^System.arraycopy ( y, 0, out, 0, y.length ) ;System.arraycopy ( y, 0, this.y, 0, y.length ) ;^72^^^^^65^74^System.arraycopy ( y, 0, this.y, 0, y.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[P11_Insert_Donor_Statement]^System.arraycopy ( x, 0, this.x, 0, x.length ) ;System.arraycopy ( y, 0, this.y, 0, y.length ) ;^72^^^^^65^74^System.arraycopy ( y, 0, this.y, 0, y.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[P11_Insert_Donor_Statement]^System.arraycopy ( x, 0, out, 0, x.length ) ;System.arraycopy ( y, 0, this.y, 0, y.length ) ;^72^^^^^65^74^System.arraycopy ( y, 0, this.y, 0, y.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[P11_Insert_Donor_Statement]^System.arraycopy ( coefficients, 0, out, 0, coefficients.length ) ;System.arraycopy ( y, 0, this.y, 0, y.length ) ;^72^^^^^65^74^System.arraycopy ( y, 0, this.y, 0, y.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[P3_Replace_Literal]^coefficientsComputed = true;^73^^^^^65^74^coefficientsComputed = false;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[P11_Insert_Donor_Statement]^coefficients[j] += t * tc[j];coefficientsComputed = false;^73^^^^^65^74^coefficientsComputed = false;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[P11_Insert_Donor_Statement]^coefficientsComputed = true;coefficientsComputed = false;^73^^^^^65^74^coefficientsComputed = false;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[P11_Insert_Donor_Statement]^coefficients[i] = 0.0;coefficientsComputed = false;^73^^^^^65^74^coefficientsComputed = false;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[P12_Insert_Condition]^if  ( !coefficientsComputed )  { coefficientsComputed = false; }^73^^^^^65^74^coefficientsComputed = false;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionLagrangeForm(double[],double[])   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[P5_Replace_Variable]^return evaluate ( y, y, z ) ;^85^^^^^84^86^return evaluate ( x, y, z ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] value [RETURN_TYPE] double   double z [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  double  z  
[P5_Replace_Variable]^return evaluate ( x, x, z ) ;^85^^^^^84^86^return evaluate ( x, y, z ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] value [RETURN_TYPE] double   double z [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  double  z  
[P5_Replace_Variable]^return evaluate ( x, y ) ;^85^^^^^84^86^return evaluate ( x, y, z ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] value [RETURN_TYPE] double   double z [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  double  z  
[P5_Replace_Variable]^return evaluate (  y, z ) ;^85^^^^^84^86^return evaluate ( x, y, z ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] value [RETURN_TYPE] double   double z [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  double  z  
[P5_Replace_Variable]^return evaluate ( x,  z ) ;^85^^^^^84^86^return evaluate ( x, y, z ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] value [RETURN_TYPE] double   double z [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  double  z  
[P5_Replace_Variable]^return evaluate ( z, y, x ) ;^85^^^^^84^86^return evaluate ( x, y, z ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] value [RETURN_TYPE] double   double z [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  double  z  
[P5_Replace_Variable]^return evaluate ( y, x, z ) ;^85^^^^^84^86^return evaluate ( x, y, z ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] value [RETURN_TYPE] double   double z [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  double  z  
[P5_Replace_Variable]^return evaluate ( x, z, y ) ;^85^^^^^84^86^return evaluate ( x, y, z ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] value [RETURN_TYPE] double   double z [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  double  z  
[P14_Delete_Statement]^^85^^^^^84^86^return evaluate ( x, y, z ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] value [RETURN_TYPE] double   double z [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  double  z  
[P2_Replace_Operator]^return x.length  &  1;^94^^^^^93^95^return x.length - 1;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] degree [RETURN_TYPE] int   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[P3_Replace_Literal]^return x.length ;^94^^^^^93^95^return x.length - 1;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] degree [RETURN_TYPE] int   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[P5_Replace_Variable]^return y.length - 1;^94^^^^^93^95^return x.length - 1;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] degree [RETURN_TYPE] int   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[P5_Replace_Variable]^return x - 1;^94^^^^^93^95^return x.length - 1;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] degree [RETURN_TYPE] int   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[P5_Replace_Variable]^return x.length.length - 1;^94^^^^^93^95^return x.length - 1;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] degree [RETURN_TYPE] int   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[P8_Replace_Mix]^return x.length - 1 - 1;^94^^^^^93^95^return x.length - 1;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] degree [RETURN_TYPE] int   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  x  y  long  serialVersionUID  
[P11_Insert_Donor_Statement]^double[] out = new double[coefficients.length];double[] out = new double[x.length];^105^^^^^104^108^double[] out = new double[x.length];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getInterpolatingPoints [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[P11_Insert_Donor_Statement]^double[] out = new double[y.length];double[] out = new double[x.length];^105^^^^^104^108^double[] out = new double[x.length];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getInterpolatingPoints [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[P3_Replace_Literal]^System.arraycopy ( x, 7, out, 7, x.length ) ;^106^^^^^104^108^System.arraycopy ( x, 0, out, 0, x.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getInterpolatingPoints [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[P3_Replace_Literal]^System.arraycopy ( x, -1, out, -1, x.length ) ;^106^^^^^104^108^System.arraycopy ( x, 0, out, 0, x.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getInterpolatingPoints [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy ( x, 0, y, 0, x.length ) ;^106^^^^^104^108^System.arraycopy ( x, 0, out, 0, x.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getInterpolatingPoints [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy ( y, 0, out, 0, x.length ) ;^106^^^^^104^108^System.arraycopy ( x, 0, out, 0, x.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getInterpolatingPoints [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy ( x, 0,  0, x.length ) ;^106^^^^^104^108^System.arraycopy ( x, 0, out, 0, x.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getInterpolatingPoints [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy (  0, out, 0, x.length ) ;^106^^^^^104^108^System.arraycopy ( x, 0, out, 0, x.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getInterpolatingPoints [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy ( x, 0, out, 0 ) ;^106^^^^^104^108^System.arraycopy ( x, 0, out, 0, x.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getInterpolatingPoints [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy ( out, 0, x, 0, x.length ) ;^106^^^^^104^108^System.arraycopy ( x, 0, out, 0, x.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getInterpolatingPoints [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy ( x.length, 0, out, 0, x ) ;^106^^^^^104^108^System.arraycopy ( x, 0, out, 0, x.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getInterpolatingPoints [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[P14_Delete_Statement]^^106^107^^^^104^108^System.arraycopy ( x, 0, out, 0, x.length ) ; return out;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getInterpolatingPoints [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[P11_Insert_Donor_Statement]^System.arraycopy ( y, 0, out, 0, y.length ) ;System.arraycopy ( x, 0, out, 0, x.length ) ;^106^^^^^104^108^System.arraycopy ( x, 0, out, 0, x.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getInterpolatingPoints [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[P11_Insert_Donor_Statement]^System.arraycopy ( y, 0, this.y, 0, y.length ) ;System.arraycopy ( x, 0, out, 0, x.length ) ;^106^^^^^104^108^System.arraycopy ( x, 0, out, 0, x.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getInterpolatingPoints [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[P11_Insert_Donor_Statement]^System.arraycopy ( x, 0, this.x, 0, x.length ) ;System.arraycopy ( x, 0, out, 0, x.length ) ;^106^^^^^104^108^System.arraycopy ( x, 0, out, 0, x.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getInterpolatingPoints [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[P11_Insert_Donor_Statement]^System.arraycopy ( coefficients, 0, out, 0, coefficients.length ) ;System.arraycopy ( x, 0, out, 0, x.length ) ;^106^^^^^104^108^System.arraycopy ( x, 0, out, 0, x.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getInterpolatingPoints [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[P5_Replace_Variable]^return y;^107^^^^^104^108^return out;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getInterpolatingPoints [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[P11_Insert_Donor_Statement]^double[] out = new double[x.length];double[] out = new double[y.length];^118^^^^^117^121^double[] out = new double[y.length];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getInterpolatingValues [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[P11_Insert_Donor_Statement]^double[] out = new double[coefficients.length];double[] out = new double[y.length];^118^^^^^117^121^double[] out = new double[y.length];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getInterpolatingValues [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[P3_Replace_Literal]^System.arraycopy ( y, -1, out, -1, y.length ) ;^119^^^^^117^121^System.arraycopy ( y, 0, out, 0, y.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getInterpolatingValues [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy ( y, 0, x, 0, y.length ) ;^119^^^^^117^121^System.arraycopy ( y, 0, out, 0, y.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getInterpolatingValues [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy ( x, 0, out, 0, y.length ) ;^119^^^^^117^121^System.arraycopy ( y, 0, out, 0, y.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getInterpolatingValues [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy ( y, 0,  0, y.length ) ;^119^^^^^117^121^System.arraycopy ( y, 0, out, 0, y.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getInterpolatingValues [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy (  0, out, 0, y.length ) ;^119^^^^^117^121^System.arraycopy ( y, 0, out, 0, y.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getInterpolatingValues [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy ( y, 0, out, 0 ) ;^119^^^^^117^121^System.arraycopy ( y, 0, out, 0, y.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getInterpolatingValues [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy ( y, 0, y.length, 0, out ) ;^119^^^^^117^121^System.arraycopy ( y, 0, out, 0, y.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getInterpolatingValues [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy ( out, 0, y, 0, y.length ) ;^119^^^^^117^121^System.arraycopy ( y, 0, out, 0, y.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getInterpolatingValues [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[P14_Delete_Statement]^^119^^^^^117^121^System.arraycopy ( y, 0, out, 0, y.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getInterpolatingValues [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[P11_Insert_Donor_Statement]^System.arraycopy ( y, 0, this.y, 0, y.length ) ;System.arraycopy ( y, 0, out, 0, y.length ) ;^119^^^^^117^121^System.arraycopy ( y, 0, out, 0, y.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getInterpolatingValues [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[P11_Insert_Donor_Statement]^System.arraycopy ( x, 0, this.x, 0, x.length ) ;System.arraycopy ( y, 0, out, 0, y.length ) ;^119^^^^^117^121^System.arraycopy ( y, 0, out, 0, y.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getInterpolatingValues [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[P11_Insert_Donor_Statement]^System.arraycopy ( x, 0, out, 0, x.length ) ;System.arraycopy ( y, 0, out, 0, y.length ) ;^119^^^^^117^121^System.arraycopy ( y, 0, out, 0, y.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getInterpolatingValues [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[P11_Insert_Donor_Statement]^System.arraycopy ( coefficients, 0, out, 0, coefficients.length ) ;System.arraycopy ( y, 0, out, 0, y.length ) ;^119^^^^^117^121^System.arraycopy ( y, 0, out, 0, y.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getInterpolatingValues [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[P5_Replace_Variable]^return y;^120^^^^^117^121^return out;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getInterpolatingValues [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[P15_Unwrap_Block]^computeCoefficients();^131^132^133^^^130^137^if  ( !coefficientsComputed )  { computeCoefficients (  ) ; }^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[P16_Remove_Block]^^131^132^133^^^130^137^if  ( !coefficientsComputed )  { computeCoefficients (  ) ; }^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[P7_Replace_Invocation]^degree (  ) ;^132^^^^^130^137^computeCoefficients (  ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[P14_Delete_Statement]^^132^^^^^130^137^computeCoefficients (  ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[P11_Insert_Donor_Statement]^double[] out = new double[x.length];double[] out = new double[coefficients.length];^134^^^^^130^137^double[] out = new double[coefficients.length];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[P11_Insert_Donor_Statement]^double[] out = new double[y.length];double[] out = new double[coefficients.length];^134^^^^^130^137^double[] out = new double[coefficients.length];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[P3_Replace_Literal]^System.arraycopy ( coefficients, -5, out, -5, coefficients.length ) ;^135^^^^^130^137^System.arraycopy ( coefficients, 0, out, 0, coefficients.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[P3_Replace_Literal]^System.arraycopy ( coefficients, -6, out, -6, coefficients.length ) ;^135^^^^^130^137^System.arraycopy ( coefficients, 0, out, 0, coefficients.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy ( coefficients, 0, y, 0, coefficients.length ) ;^135^^^^^130^137^System.arraycopy ( coefficients, 0, out, 0, coefficients.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy ( y, 0, out, 0, coefficients.length ) ;^135^^^^^130^137^System.arraycopy ( coefficients, 0, out, 0, coefficients.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy ( coefficients, 0, out, 0, 1 ) ;^135^^^^^130^137^System.arraycopy ( coefficients, 0, out, 0, coefficients.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy ( coefficients, 0,  0, coefficients.length ) ;^135^^^^^130^137^System.arraycopy ( coefficients, 0, out, 0, coefficients.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy (  0, out, 0, coefficients.length ) ;^135^^^^^130^137^System.arraycopy ( coefficients, 0, out, 0, coefficients.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy ( coefficients, 0, out, 0 ) ;^135^^^^^130^137^System.arraycopy ( coefficients, 0, out, 0, coefficients.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy ( out, 0, coefficients, 0, coefficients.length ) ;^135^^^^^130^137^System.arraycopy ( coefficients, 0, out, 0, coefficients.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy ( coefficients.length, 0, out, 0, coefficients ) ;^135^^^^^130^137^System.arraycopy ( coefficients, 0, out, 0, coefficients.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy ( coefficients, 0, coefficients.length, 0, out ) ;^135^^^^^130^137^System.arraycopy ( coefficients, 0, out, 0, coefficients.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[P14_Delete_Statement]^^135^^^^^130^137^System.arraycopy ( coefficients, 0, out, 0, coefficients.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[P11_Insert_Donor_Statement]^System.arraycopy ( y, 0, out, 0, y.length ) ;System.arraycopy ( coefficients, 0, out, 0, coefficients.length ) ;^135^^^^^130^137^System.arraycopy ( coefficients, 0, out, 0, coefficients.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[P11_Insert_Donor_Statement]^System.arraycopy ( y, 0, this.y, 0, y.length ) ;System.arraycopy ( coefficients, 0, out, 0, coefficients.length ) ;^135^^^^^130^137^System.arraycopy ( coefficients, 0, out, 0, coefficients.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[P11_Insert_Donor_Statement]^System.arraycopy ( x, 0, this.x, 0, x.length ) ;System.arraycopy ( coefficients, 0, out, 0, coefficients.length ) ;^135^^^^^130^137^System.arraycopy ( coefficients, 0, out, 0, coefficients.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[P11_Insert_Donor_Statement]^System.arraycopy ( x, 0, out, 0, x.length ) ;System.arraycopy ( coefficients, 0, out, 0, coefficients.length ) ;^135^^^^^130^137^System.arraycopy ( coefficients, 0, out, 0, coefficients.length ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[P5_Replace_Variable]^return y;^136^^^^^130^137^return out;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  coefficients  out  x  y  long  serialVersionUID  
[P1_Replace_Type]^short  i, j, n, nearest = 0;^157^^^^^142^172^int i, j, n, nearest = 0;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P3_Replace_Literal]^int i, j, n, nearest = i;^157^^^^^142^172^int i, j, n, nearest = 0;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P1_Replace_Type]^int value, c[], d[], tc, td, divider, w, dist, min_dist;^158^^^^^143^173^double value, c[], d[], tc, td, divider, w, dist, min_dist;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P1_Replace_Type]^float value, c[], d[], tc, td, divider, w, dist, min_dist;^158^^^^^143^173^double value, c[], d[], tc, td, divider, w, dist, min_dist;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^verifyInterpolationArray ( x, out ) ;^160^^^^^145^175^verifyInterpolationArray ( x, y ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^verifyInterpolationArray (  y ) ;^160^^^^^145^175^verifyInterpolationArray ( x, y ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^verifyInterpolationArray ( x ) ;^160^^^^^145^175^verifyInterpolationArray ( x, y ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^verifyInterpolationArray ( y, x ) ;^160^^^^^145^175^verifyInterpolationArray ( x, y ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P7_Replace_Invocation]^PolynomialFunctionLagrangeForm ( x, y ) ;^160^^^^^145^175^verifyInterpolationArray ( x, y ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P8_Replace_Mix]^verifyInterpolationArray ( out, y ) ;^160^^^^^145^175^verifyInterpolationArray ( x, y ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^n = out.length;^162^^^^^147^177^n = x.length;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^n = n;^162^^^^^147^177^n = x.length;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^n = x.length.length;^162^^^^^147^177^n = x.length;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^n = x;^162^^^^^147^177^n = x.length;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P8_Replace_Mix]^c =  nullew double[null];^163^^^^^148^178^c = new double[n];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P11_Insert_Donor_Statement]^c = new double[n+1];c = new double[n];^163^^^^^148^178^c = new double[n];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P11_Insert_Donor_Statement]^coefficients = new double[n];c = new double[n];^163^^^^^148^178^c = new double[n];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P11_Insert_Donor_Statement]^this.x = new double[x.length];c = new double[n];^163^^^^^148^178^c = new double[n];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P11_Insert_Donor_Statement]^tc = new double[n];c = new double[n];^163^^^^^148^178^c = new double[n];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P11_Insert_Donor_Statement]^d = new double[n];c = new double[n];^163^^^^^148^178^c = new double[n];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P11_Insert_Donor_Statement]^this.y = new double[y.length];c = new double[n];^163^^^^^148^178^c = new double[n];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P8_Replace_Mix]^d =  nearestew double[nearest];^164^^^^^149^179^d = new double[n];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P11_Insert_Donor_Statement]^c = new double[n+1];d = new double[n];^164^^^^^149^179^d = new double[n];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P11_Insert_Donor_Statement]^coefficients = new double[n];d = new double[n];^164^^^^^149^179^d = new double[n];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P11_Insert_Donor_Statement]^this.x = new double[x.length];d = new double[n];^164^^^^^149^179^d = new double[n];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P11_Insert_Donor_Statement]^tc = new double[n];d = new double[n];^164^^^^^149^179^d = new double[n];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P11_Insert_Donor_Statement]^c = new double[n];d = new double[n];^164^^^^^149^179^d = new double[n];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P11_Insert_Donor_Statement]^this.y = new double[y.length];d = new double[n];^164^^^^^149^179^d = new double[n];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P8_Replace_Mix]^min_dist ;^165^^^^^150^180^min_dist = Double.POSITIVE_INFINITY;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^if  ( dist > min_dist )  {^172^^^^^157^187^if  ( dist < min_dist )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^if  ( z < min_dist )  {^172^^^^^157^187^if  ( dist < min_dist )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^if  ( dist < z )  {^172^^^^^157^187^if  ( dist < min_dist )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^if  ( min_dist < dist )  {^172^^^^^157^187^if  ( dist < min_dist )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P15_Unwrap_Block]^nearest = i; min_dist = dist;^172^173^174^175^^157^187^if  ( dist < min_dist )  { nearest = i; min_dist = dist; }^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P16_Remove_Block]^^172^173^174^175^^157^187^if  ( dist < min_dist )  { nearest = i; min_dist = dist; }^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^nearest = nearest;^173^^^^^158^188^nearest = i;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P8_Replace_Mix]^nearest =  null;^173^^^^^158^188^nearest = i;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^min_dist = z;^174^^^^^159^189^min_dist = dist;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^for  ( i = 0; i > n; i++ )  {^166^^^^^151^181^for  ( i = 0; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^for  ( i = 0; i <= n; i++ )  {^166^^^^^151^181^for  ( i = 0; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P3_Replace_Literal]^for  ( i = n; i < n; i++ )  {^166^^^^^151^181^for  ( i = 0; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^for  ( nearest = 0; i < n; i++ )  {^166^^^^^151^181^for  ( i = 0; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^for  ( i = 0; i < nearest; i++ )  {^166^^^^^151^181^for  ( i = 0; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P8_Replace_Mix]^if  ( dist < w )  {^172^^^^^157^187^if  ( dist < min_dist )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P8_Replace_Mix]^nearest =  n;^173^^^^^158^188^nearest = i;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^min_dist = value;^174^^^^^159^189^min_dist = dist;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^c[i] = x[i];^168^^^^^153^183^c[i] = y[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P8_Replace_Mix]^c[i]  =  c[i] ;^168^^^^^153^183^c[i] = y[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P11_Insert_Donor_Statement]^c[0] = 1.0;c[i] = y[i];^168^^^^^153^183^c[i] = y[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P11_Insert_Donor_Statement]^d[i] = y[i];c[i] = y[i];^168^^^^^153^183^c[i] = y[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P11_Insert_Donor_Statement]^tc[n-1] = c[n];c[i] = y[i];^168^^^^^153^183^c[i] = y[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^d[i] = x[i];^169^^^^^154^184^d[i] = y[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P8_Replace_Mix]^d[i] ;^169^^^^^154^184^d[i] = y[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P11_Insert_Donor_Statement]^c[i] = y[i];d[i] = y[i];^169^^^^^154^184^d[i] = y[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P11_Insert_Donor_Statement]^tc[n-1] = c[n];d[i] = y[i];^169^^^^^154^184^d[i] = y[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^dist = Math.abs ( z  <<  x[i] ) ;^171^^^^^156^186^dist = Math.abs ( z - x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^dist = Math.abs ( w - x[i] ) ;^171^^^^^156^186^dist = Math.abs ( z - x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^dist = Math.abs ( x - z[i] ) ;^171^^^^^156^186^dist = Math.abs ( z - x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P8_Replace_Mix]^dist =  Math.abs ( null - x[i] ) ;^171^^^^^156^186^dist = Math.abs ( z - x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^min_dist = w;^174^^^^^159^189^min_dist = dist;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^dist = Math.abs ( z  >>  x[i] ) ;^171^^^^^156^186^dist = Math.abs ( z - x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^dist = Math.abs ( z - y[i] ) ;^171^^^^^156^186^dist = Math.abs ( z - x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P14_Delete_Statement]^^171^^^^^156^186^dist = Math.abs ( z - x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P3_Replace_Literal]^for  ( i = i; i < n; i++ )  {^166^^^^^151^181^for  ( i = 0; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P8_Replace_Mix]^for  ( i = 0 >> 0; i < n; i++ )  {^166^^^^^151^181^for  ( i = 0; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P8_Replace_Mix]^d[i]  =  d[i] ;^169^^^^^154^184^d[i] = y[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^dist = Math.abs ( z   instanceof   x[i] ) ;^171^^^^^156^186^dist = Math.abs ( z - x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^dist = Math.abs ( z - out[i] ) ;^171^^^^^156^186^dist = Math.abs ( z - x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^dist = Math.abs ( z  ^  x[i] ) ;^171^^^^^156^186^dist = Math.abs ( z - x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^dist = Math.abs ( td - x[i] ) ;^171^^^^^156^186^dist = Math.abs ( z - x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^value = x[nearest];^179^^^^^164^194^value = y[nearest];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P8_Replace_Mix]^value =  out[nearest];^179^^^^^164^194^value = y[nearest];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P11_Insert_Donor_Statement]^value += d[nearest];value = y[nearest];^179^^^^^164^194^value = y[nearest];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P11_Insert_Donor_Statement]^value += c[nearest];value = y[nearest];^179^^^^^164^194^value = y[nearest];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^if  ( divider != 0.0 )  {^186^^^^^171^201^if  ( divider == 0.0 )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^if  ( w == 0.0 )  {^186^^^^^171^201^if  ( divider == 0.0 )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P6_Replace_Expression]^if  (  (  (  ( "Identical abscissas cause division by zero: x[" + i )  + "] = x[" )  +  ( i + j )  )  + "] = " + x[i] )  {^186^^^^^171^201^if  ( divider == 0.0 )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P6_Replace_Expression]^if  (  (  ( "Identical abscissas cause division by zero: x[" + i )  + "] = x[" )  +  ( i + j )  + "] = " )  {^186^^^^^171^201^if  ( divider == 0.0 )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P6_Replace_Expression]^if  (  ( "Identical abscissas cause division by zero: x[" + i )  + "] = x[" + i + j )  {^186^^^^^171^201^if  ( divider == 0.0 )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P6_Replace_Expression]^if  ( "Identical abscissas cause division by zero: x[" + i + "] = x[" )  {^186^^^^^171^201^if  ( divider == 0.0 )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P6_Replace_Expression]^if  ( "Identical abscissas cause division by zero: x[" + i )  {^186^^^^^171^201^if  ( divider == 0.0 )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P6_Replace_Expression]^if  ( i + j )  {^186^^^^^171^201^if  ( divider == 0.0 )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P8_Replace_Mix]^if  ( divider == 4.0d )  {^186^^^^^171^201^if  ( divider == 0.0 )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P9_Replace_Statement]^if  ( d == 0.0 )  {^186^^^^^171^201^if  ( divider == 0.0 )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P15_Unwrap_Block]^throw new org.apache.commons.math.FunctionEvaluationException(z, ((((("Identical abscissas cause division by zero: x[" + i) + "] = x[") + (i + j)) + "] = ") + (x[i])));^186^187^188^189^190^171^201^if  ( divider == 0.0 )  {  throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ; }^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P16_Remove_Block]^^186^187^188^189^190^171^201^if  ( divider == 0.0 )  {  throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ; }^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  >=  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  >  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  !=  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x["  &  i  &  "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x["  <  i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P3_Replace_Literal]^throw new FunctionEvaluationException ( z, "absciss" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P3_Replace_Literal]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "]  = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P4_Replace_Constructor]^throw new FunctionEvaluationException (  "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^throw new FunctionEvaluationException ( w, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + nearest + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+nearest )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: y[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^throw new FunctionEvaluationException ( i, "Identical abscissas cause division by zero: x[" + z + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: i[" + x + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ||  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  <=  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  >>  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x["  >=  i  >=  "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x["  !=  i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +   instanceof   ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P3_Replace_Literal]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[use division by zero:" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P3_Replace_Literal]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = ]" + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: out[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P8_Replace_Mix]^throw new ArithmeticException ( "Identical abscissas cause division by zero." ) ; ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^if  ( nearest > 0.5* ( n-i+1 )  )  {^198^^^^^183^213^if  ( nearest < 0.5* ( n-i+1 )  )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^if / ( nearest < 0.5* ( n-i+1 )  )  {^198^^^^^183^213^if  ( nearest < 0.5* ( n-i+1 )  )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^if  <  ( nearest < 0.5* ( n-i+1 )  )  {^198^^^^^183^213^if  ( nearest < 0.5* ( n-i+1 )  )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^if  ||  ( nearest < 0.5* ( n-i+1 )  )  {^198^^^^^183^213^if  ( nearest < 0.5* ( n-i+1 )  )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^if  &&  ( nearest < 0.5* ( n-i+1 )  )  {^198^^^^^183^213^if  ( nearest < 0.5* ( n-i+1 )  )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P3_Replace_Literal]^if  ( nearest < 0.07142857142857142* ( n-i+1 )  )  {^198^^^^^183^213^if  ( nearest < 0.5* ( n-i+1 )  )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P3_Replace_Literal]^if  ( nearest < 0.5* ( n-i+nearest )  )  {^198^^^^^183^213^if  ( nearest < 0.5* ( n-i+1 )  )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^if  ( j < 0.5* ( n-i+1 )  )  {^198^^^^^183^213^if  ( nearest < 0.5* ( n-i+1 )  )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^if  ( jearest < 0.5* ( n-i+1 )  )  {^198^^^^^183^213^if  ( nearest < 0.5* ( n-i+1 )  )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P6_Replace_Expression]^if  ( 0.5 *  ( n - i )  + 1 )  {^198^^^^^183^213^if  ( nearest < 0.5* ( n-i+1 )  )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P6_Replace_Expression]^if  ( n - i + 1 )  {^198^^^^^183^213^if  ( nearest < 0.5* ( n-i+1 )  )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P6_Replace_Expression]^if  ( n - i )  {^198^^^^^183^213^if  ( nearest < 0.5* ( n-i+1 )  )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P8_Replace_Mix]^if  ( nearest < 0.5D* ( n-i+1 )  )  {^198^^^^^183^213^if  ( nearest < 0.5* ( n-i+1 )  )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P15_Unwrap_Block]^value += c[nearest];^198^199^200^201^202^183^213^if  ( nearest < 0.5* ( n-i+1 )  )  { value += c[nearest]; } else { nearest--; value += d[nearest]; }^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P16_Remove_Block]^^198^199^200^201^202^183^213^if  ( nearest < 0.5* ( n-i+1 )  )  { value += c[nearest]; } else { nearest--; value += d[nearest]; }^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^value += y[nearest];^202^^^^^198^203^value += d[nearest];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P8_Replace_Mix]^value +=  x[nearest];^202^^^^^198^203^value += d[nearest];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P11_Insert_Donor_Statement]^value += c[nearest];value += d[nearest];^202^^^^^198^203^value += d[nearest];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P11_Insert_Donor_Statement]^value = y[nearest];value += d[nearest];^202^^^^^198^203^value += d[nearest];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^value += y[nearest];^199^^^^^184^214^value += c[nearest];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P11_Insert_Donor_Statement]^value += d[nearest];value += c[nearest];^199^^^^^184^214^value += c[nearest];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P11_Insert_Donor_Statement]^value = y[nearest];value += c[nearest];^199^^^^^184^214^value += c[nearest];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^for  ( i = 1; i == n; i++ )  {^181^^^^^166^196^for  ( i = 1; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^for  ( i = 1; i > n; i++ )  {^181^^^^^166^196^for  ( i = 1; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^for  <  ( i = 1; i < n; i++ )  {^181^^^^^166^196^for  ( i = 1; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^for  <=  ( i = 1; i < n; i++ )  {^181^^^^^166^196^for  ( i = 1; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^for  &&  ( i = 1; i < n; i++ )  {^181^^^^^166^196^for  ( i = 1; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^for  ||  ( i = 1; i < n; i++ )  {^181^^^^^166^196^for  ( i = 1; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^for  >=  ( i = 1; i < n; i++ )  {^181^^^^^166^196^for  ( i = 1; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^for  !=  ( i = 1; i < n; i++ )  {^181^^^^^166^196^for  ( i = 1; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^for  ( i = 1; i <= n; i++ )  {^181^^^^^166^196^for  ( i = 1; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P3_Replace_Literal]^for  ( i = 4; i < n; i++ )  {^181^^^^^166^196^for  ( i = 1; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P3_Replace_Literal]^for  ( i = n; i < n; i++ )  {^181^^^^^166^196^for  ( i = 1; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P3_Replace_Literal]^for  ( i = -4; i < n; i++ )  {^181^^^^^166^196^for  ( i = 1; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^for  ( n = 1; i < n; i++ )  {^181^^^^^166^196^for  ( i = 1; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P8_Replace_Mix]^for  ( nearest = 1; i < n; i++ )  {^181^^^^^166^196^for  ( i = 1; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^if  ( value == 0.0 )  {^186^^^^^171^201^if  ( divider == 0.0 )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P8_Replace_Mix]^if  ( divider == 0.0D )  {^186^^^^^171^201^if  ( divider == 0.0 )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  &  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x["  ^  i  ^  "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x["  |  i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P3_Replace_Literal]^throw new FunctionEvaluationException ( z, "ticadentical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P3_Replace_Literal]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "]" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P3_Replace_Literal]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "]" + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^throw new FunctionEvaluationException ( td, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  <<  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x["  ==  i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P3_Replace_Literal]^throw new FunctionEvaluationException ( z, "Identical abscissas cause divis" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P3_Replace_Literal]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + " x = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^if + ( nearest < 0.5* ( n-i+1 )  )  {^198^^^^^183^213^if  ( nearest < 0.5* ( n-i+1 )  )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^if   instanceof   ( nearest < 0.5* ( n-i+1 )  )  {^198^^^^^183^213^if  ( nearest < 0.5* ( n-i+1 )  )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^if  &  ( nearest < 0.5* ( n-i+1 )  )  {^198^^^^^183^213^if  ( nearest < 0.5* ( n-i+1 )  )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P3_Replace_Literal]^if  ( nearest < 0.05555555555555555* ( n-i+1 )  )  {^198^^^^^183^213^if  ( nearest < 0.5* ( n-i+1 )  )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P3_Replace_Literal]^if  ( nearest < 0.5* ( n-i+i )  )  {^198^^^^^183^213^if  ( nearest < 0.5* ( n-i+1 )  )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^if  ( n < 0.5* ( nearest-i+1 )  )  {^198^^^^^183^213^if  ( nearest < 0.5* ( n-i+1 )  )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P8_Replace_Mix]^if  ( nearest < 1.0d* ( n-i+1 )  )  {^198^^^^^183^213^if  ( nearest < 0.5* ( n-i+1 )  )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^for  ( j = 0; j <= n-i; j++ )  {^182^^^^^167^197^for  ( j = 0; j < n-i; j++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^for  <  ( j = 0; j < n-i; j++ )  {^182^^^^^167^197^for  ( j = 0; j < n-i; j++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^for  ^  ( j = 0; j < n-i; j++ )  {^182^^^^^167^197^for  ( j = 0; j < n-i; j++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^for  ==  ( j = 0; j < n-i; j++ )  {^182^^^^^167^197^for  ( j = 0; j < n-i; j++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^for  |  ( j = 0; j < n-i; j++ )  {^182^^^^^167^197^for  ( j = 0; j < n-i; j++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^for   instanceof   ( j = 0; j < n-i; j++ )  {^182^^^^^167^197^for  ( j = 0; j < n-i; j++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^for  >  ( j = 0; j < n-i; j++ )  {^182^^^^^167^197^for  ( j = 0; j < n-i; j++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^for  >>  ( j = 0; j < n-i; j++ )  {^182^^^^^167^197^for  ( j = 0; j < n-i; j++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^for  &  ( j = 0; j < n-i; j++ )  {^182^^^^^167^197^for  ( j = 0; j < n-i; j++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P3_Replace_Literal]^for  ( j = -9; j < n-i; j++ )  {^182^^^^^167^197^for  ( j = 0; j < n-i; j++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^for  ( nearest = 0; j < n-i; j++ )  {^182^^^^^167^197^for  ( j = 0; j < n-i; j++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^for  ( j = 0; j < nearest-i; j++ )  {^182^^^^^167^197^for  ( j = 0; j < n-i; j++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^for  ( n = 0; j < j-i; j++ )  {^182^^^^^167^197^for  ( j = 0; j < n-i; j++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  <  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  &&  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x["  <<  i  <<  "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x["  >=  i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P3_Replace_Literal]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[ical abscissas c" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P3_Replace_Literal]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[] " +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^throw new FunctionEvaluationException ( x, "Identical abscissas cause division by zero: z[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ==  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x["  ==  i  ==  "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P3_Replace_Literal]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[ca" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P3_Replace_Literal]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "  = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^tc = x[j]  &  z;^183^^^^^168^198^tc = x[j] - z;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^tc = y[j] - z;^183^^^^^168^198^tc = x[j] - z;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P11_Insert_Donor_Statement]^t = y[i] / d;tc = x[j] - z;^183^^^^^168^198^tc = x[j] - z;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P11_Insert_Donor_Statement]^td = x[i+j] - z;tc = x[j] - z;^183^^^^^168^198^tc = x[j] - z;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^td = x[i+j]  !=  z;^184^^^^^169^199^td = x[i+j] - z;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^td = x[i+j] - w;^184^^^^^169^199^td = x[i+j] - z;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^td = z[i+j] - x;^184^^^^^169^199^td = x[i+j] - z;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P8_Replace_Mix]^td =  out[i+j] - z;^184^^^^^169^199^td = x[i+j] - z;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P11_Insert_Donor_Statement]^tc = x[j] - z;td = x[i+j] - z;^184^^^^^169^199^td = x[i+j] - z;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P11_Insert_Donor_Statement]^t = y[i] / d;td = x[i+j] - z;^184^^^^^169^199^td = x[i+j] - z;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^divider = x[j]  &&  x[i+j];^185^^^^^170^200^divider = x[j] - x[i+j];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^divider = y[j] - x[i+j];^185^^^^^170^200^divider = x[j] - x[i+j];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P8_Replace_Mix]^divider =  y[j] - y[i+j];^185^^^^^170^200^divider = x[j] - x[i+j];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^w =  ( c[j+1] - d[j] )  - divider;^193^^^^^178^208^w =  ( c[j+1] - d[j] )  / divider;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^w =  ( c[j+1]  |  d[j] )  / divider;^193^^^^^178^208^w =  ( c[j+1] - d[j] )  / divider;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^w =  &  ( c[j+1] - d[j] )  / divider;^193^^^^^178^208^w =  ( c[j+1] - d[j] )  / divider;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P3_Replace_Literal]^w =  ( c[j+-8] - d[j] )  / divider;^193^^^^^178^208^w =  ( c[j+1] - d[j] )  / divider;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^w =  ( y[j+1] - d[j] )  / divider;^193^^^^^178^208^w =  ( c[j+1] - d[j] )  / divider;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^w =  ( c[j+1] - y[j] )  / divider;^193^^^^^178^208^w =  ( c[j+1] - d[j] )  / divider;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^w =  ( d[j+1] - c[j] )  / divider;^193^^^^^178^208^w =  ( c[j+1] - d[j] )  / divider;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P8_Replace_Mix]^w =  ( c[j+3] - d[j] )  / divider;^193^^^^^178^208^w =  ( c[j+1] - d[j] )  / divider;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^c[j] + = tc * w;^194^^^^^179^209^c[j] = tc * w;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^c[j] = ty * w;^194^^^^^179^209^c[j] = tc * w;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^c[j] = z * w;^194^^^^^179^209^c[j] = tc * w;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^c[j] = w * tc;^194^^^^^179^209^c[j] = tc * w;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P8_Replace_Mix]^c[j]  =  c[j] ;^194^^^^^179^209^c[j] = tc * w;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P11_Insert_Donor_Statement]^d[j] = td * w;c[j] = tc * w;^194^^^^^179^209^c[j] = tc * w;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^d[j] + = td * w;^195^^^^^180^210^d[j] = td * w;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^d[j] = value * w;^195^^^^^180^210^d[j] = td * w;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^d[j] = td * td;^195^^^^^180^210^d[j] = td * w;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^d[j] = w * td;^195^^^^^180^210^d[j] = td * w;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P8_Replace_Mix]^d[j] ;^195^^^^^180^210^d[j] = td * w;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P11_Insert_Donor_Statement]^c[j] = tc * w;d[j] = td * w;^195^^^^^180^210^d[j] = td * w;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x["  ||  i  ||  "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x["  ||  i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P3_Replace_Literal]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[Identical abscissas cause divisio" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P3_Replace_Literal]^throw new FunctionEvaluationException ( z, " cau" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P3_Replace_Literal]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + " = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P3_Replace_Literal]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = ] =" + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P3_Replace_Literal]^for  ( j = i; j < n-i; j++ )  {^182^^^^^167^197^for  ( j = 0; j < n-i; j++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P8_Replace_Mix]^for  ( j = 0 << 4; j < n-i; j++ )  {^182^^^^^167^197^for  ( j = 0; j < n-i; j++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^tc = x[j]  ^  z;^183^^^^^168^198^tc = x[j] - z;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^tc = x[j] - value;^183^^^^^168^198^tc = x[j] - z;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^td = x[i+j]  ==  z;^184^^^^^169^199^td = x[i+j] - z;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^td = y[i+j] - z;^184^^^^^169^199^td = x[i+j] - z;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^divider = x[j]  >=  x[i+j];^185^^^^^170^200^divider = x[j] - x[i+j];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^w =  ( c[j+1] - d[j] )  + divider;^193^^^^^178^208^w =  ( c[j+1] - d[j] )  / divider;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^w =  ( c[j+1]   instanceof   d[j] )  / divider;^193^^^^^178^208^w =  ( c[j+1] - d[j] )  / divider;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^w =  |  ( c[j+1] - d[j] )  / divider;^193^^^^^178^208^w =  ( c[j+1] - d[j] )  / divider;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P3_Replace_Literal]^w =  ( c[j+] - d[j] )  / divider;^193^^^^^178^208^w =  ( c[j+1] - d[j] )  / divider;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^w =  ( x[j+1] - d[j] )  / divider;^193^^^^^178^208^w =  ( c[j+1] - d[j] )  / divider;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^w =  ( c[j+1] - d[j] )  / z;^193^^^^^178^208^w =  ( c[j+1] - d[j] )  / divider;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^w =  ( divider[j+1] - d[j] )  / c;^193^^^^^178^208^w =  ( c[j+1] - d[j] )  / divider;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P8_Replace_Mix]^w =  ( c[j+2] - d[j] )  / divider;^193^^^^^178^208^w =  ( c[j+1] - d[j] )  / divider;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^c[j] = tc * z;^194^^^^^179^209^c[j] = tc * w;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^d[j] = tx * w;^195^^^^^180^210^d[j] = td * w;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P8_Replace_Mix]^d[j]  =  d[j] ;^195^^^^^180^210^d[j] = td * w;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^value += x[nearest];^199^^^^^184^214^value += c[nearest];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^value += x[nearest];^202^^^^^187^217^value += d[nearest];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P11_Insert_Donor_Statement]^value += c[nearest];value += d[nearest];^202^^^^^187^217^value += d[nearest];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P11_Insert_Donor_Statement]^value = y[nearest];value += d[nearest];^202^^^^^187^217^value += d[nearest];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x["  &&  i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P3_Replace_Literal]^throw new FunctionEvaluationException ( z, "entical abscissas cause division" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x["  <  i  <  "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ^  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P3_Replace_Literal]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[ero:" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P3_Replace_Literal]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] =  =" + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^for  ||  ( j = 0; j < n-i; j++ )  {^182^^^^^167^197^for  ( j = 0; j < n-i; j++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^for  &&  ( j = 0; j < n-i; j++ )  {^182^^^^^167^197^for  ( j = 0; j < n-i; j++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^if  ( divider <= 0.0 )  {^186^^^^^171^201^if  ( divider == 0.0 )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P8_Replace_Mix]^if  ( divider == 3.0d )  {^186^^^^^171^201^if  ( divider == 0.0 )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P3_Replace_Literal]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[bscissas cause div" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P3_Replace_Literal]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[] =" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x["  |  i  |  "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x["   instanceof   i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P3_Replace_Literal]^throw new FunctionEvaluationException ( z, "tical abscissas" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^throw new FunctionEvaluationException ( value, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P8_Replace_Mix]^return false;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^tc = x[j]  &&  z;^183^^^^^168^198^tc = x[j] - z;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^tc = x[j] - td;^183^^^^^168^198^tc = x[j] - z;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^tc = z[j] - x;^183^^^^^168^198^tc = x[j] - z;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^td = x[i+j]  |  z;^184^^^^^169^199^td = x[i+j] - z;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^td = x[i+j] - value;^184^^^^^169^199^td = x[i+j] - z;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^divider = x[j]  <=  x[i+j];^185^^^^^170^200^divider = x[j] - x[i+j];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^divider = out[j] - x[i+j];^185^^^^^170^200^divider = x[j] - x[i+j];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^w =  ( c[j+1]  >=  d[j] )  / divider;^193^^^^^178^208^w =  ( c[j+1] - d[j] )  / divider;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^w =  <<  ( c[j+1] - d[j] )  / divider;^193^^^^^178^208^w =  ( c[j+1] - d[j] )  / divider;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P3_Replace_Literal]^w =  ( c[j+7] - d[j] )  / divider;^193^^^^^178^208^w =  ( c[j+1] - d[j] )  / divider;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^w =  ( c[j+1] - d[j] )  / w;^193^^^^^178^208^w =  ( c[j+1] - d[j] )  / divider;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^w =  ( c[j+1] - divider[j] )  / d;^193^^^^^178^208^w =  ( c[j+1] - d[j] )  / divider;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P8_Replace_Mix]^w =  ( c[j+1L] - d[j] )  / divider;^193^^^^^178^208^w =  ( c[j+1] - d[j] )  / divider;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^d[j] / = td * w;^195^^^^^180^210^d[j] = td * w;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^d[j] = ty * w;^195^^^^^180^210^d[j] = td * w;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^d[j] = z * w;^195^^^^^180^210^d[j] = td * w;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^d[j] = td * z;^195^^^^^180^210^d[j] = td * w;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P3_Replace_Literal]^throw new FunctionEvaluationException ( z, "as cause division by dentical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x["  ^  i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P3_Replace_Literal]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[ abscissas cause div" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P3_Replace_Literal]^for  ( i = 3; i < n; i++ )  {^181^^^^^166^196^for  ( i = 1; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P3_Replace_Literal]^for  ( j = n; j < n-i; j++ )  {^182^^^^^167^197^for  ( j = 0; j < n-i; j++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P8_Replace_Mix]^for  ( j = 3; j < n-i; j++ )  {^182^^^^^167^197^for  ( j = 0; j < n-i; j++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^tc = x[j]  ==  z;^183^^^^^168^198^tc = x[j] - z;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P8_Replace_Mix]^tc =  out[j] - z;^183^^^^^168^198^tc = x[j] - z;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^divider = x[j]  <  x[i+j];^185^^^^^170^200^divider = x[j] - x[i+j];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^w =  ( c[j+1]  >>  d[j] )  / divider;^193^^^^^178^208^w =  ( c[j+1] - d[j] )  / divider;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P3_Replace_Literal]^w =  ( c[j+10] - d[j] )  / divider;^193^^^^^178^208^w =  ( c[j+1] - d[j] )  / divider;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^w =  ( c[j+1] - x[j] )  / divider;^193^^^^^178^208^w =  ( c[j+1] - d[j] )  / divider;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P8_Replace_Mix]^w =  ( c[j+4] - d[j] )  / divider;^193^^^^^178^208^w =  ( c[j+1] - d[j] )  / divider;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^c[j] = tx * w;^194^^^^^179^209^c[j] = tc * w;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^d[j] - = td * w;^195^^^^^180^210^d[j] = td * w;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P8_Replace_Mix]^value +=  y[nearest];^202^^^^^187^217^value += d[nearest];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  |  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x["  >>  i  >>  "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x["  &  i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P3_Replace_Literal]^throw new FunctionEvaluationException ( z, "issas cause division " + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P3_Replace_Literal]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = " +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P2_Replace_Operator]^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x["  >  i  >  "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P3_Replace_Literal]^throw new FunctionEvaluationException ( z, "use divisi" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P8_Replace_Mix]^return true;^188^189^190^^^173^203^throw new FunctionEvaluationException ( z, "Identical abscissas cause division by zero: x[" + i + "] = x[" +  ( i+j )  + "] = " + x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P5_Replace_Variable]^return td;^206^^^^^191^221^return value;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] evaluate [RETURN_TYPE] double   double[] x double[] y double z [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  x  y  long  serialVersionUID  double  dist  divider  min_dist  tc  td  value  w  z  int  i  j  n  nearest  
[P1_Replace_Type]^short  i, j, n;^219^^^^^204^234^int i, j, n;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P1_Replace_Type]^long  i, j, n;^219^^^^^204^234^int i, j, n;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P1_Replace_Type]^int c[], tc[], d, t;^220^^^^^205^235^double c[], tc[], d, t;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P2_Replace_Operator]^n = degree (  &&  )  + 1;^222^^^^^207^237^n = degree (  )  + 1;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P3_Replace_Literal]^n = degree (  )  + n;^222^^^^^207^237^n = degree (  )  + 1;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P7_Replace_Invocation]^n = computeCoefficients (  )  + 1;^222^^^^^207^237^n = degree (  )  + 1;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P8_Replace_Mix]^n = degree (  )  + 0;^222^^^^^207^237^n = degree (  )  + 1;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P14_Delete_Statement]^^222^^^^^207^237^n = degree (  )  + 1;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P5_Replace_Variable]^coefficients = jew double[n];^223^^^^^208^238^coefficients = new double[n];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P8_Replace_Mix]^coefficients =  jew double[j];^223^^^^^208^238^coefficients = new double[n];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P11_Insert_Donor_Statement]^coefficients[n-1] += t * tc[n-1];coefficients = new double[n];^223^^^^^208^238^coefficients = new double[n];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P11_Insert_Donor_Statement]^c = new double[n+1];coefficients = new double[n];^223^^^^^208^238^coefficients = new double[n];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P11_Insert_Donor_Statement]^tc = new double[n];coefficients = new double[n];^223^^^^^208^238^coefficients = new double[n];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P11_Insert_Donor_Statement]^c = new double[n];coefficients = new double[n];^223^^^^^208^238^coefficients = new double[n];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P11_Insert_Donor_Statement]^coefficients[j] += t * tc[j];coefficients = new double[n];^223^^^^^208^238^coefficients = new double[n];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P11_Insert_Donor_Statement]^d = new double[n];coefficients = new double[n];^223^^^^^208^238^coefficients = new double[n];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P2_Replace_Operator]^for  ( i = 0; i <= n; i++ )  {^224^^^^^209^239^for  ( i = 0; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P3_Replace_Literal]^for  ( i = j; i < n; i++ )  {^224^^^^^209^239^for  ( i = 0; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P5_Replace_Variable]^for  ( n = 0; i < n; i++ )  {^224^^^^^209^239^for  ( i = 0; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P5_Replace_Variable]^for  ( i = 0; i < j; i++ )  {^224^^^^^209^239^for  ( i = 0; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P5_Replace_Variable]^for  ( n = 0; i < i; i++ )  {^224^^^^^209^239^for  ( i = 0; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P8_Replace_Mix]^coefficients[i] = 1.0d;^225^^^^^210^240^coefficients[i] = 0.0;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P11_Insert_Donor_Statement]^coefficients[n-1] += t * tc[n-1];coefficients[i] = 0.0;^225^^^^^210^240^coefficients[i] = 0.0;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P11_Insert_Donor_Statement]^coefficients[j] += t * tc[j];coefficients[i] = 0.0;^225^^^^^210^240^coefficients[i] = 0.0;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P11_Insert_Donor_Statement]^coefficientsComputed = true;coefficients[i] = 0.0;^225^^^^^210^240^coefficients[i] = 0.0;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P11_Insert_Donor_Statement]^coefficientsComputed = false;coefficients[i] = 0.0;^225^^^^^210^240^coefficients[i] = 0.0;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P3_Replace_Literal]^for  ( i = -8; i < n; i++ )  {^224^^^^^209^239^for  ( i = 0; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P8_Replace_Mix]^for  ( i = 1; i < n; i++ )  {^224^^^^^209^239^for  ( i = 0; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P8_Replace_Mix]^coefficients[i] = 4.0d;^225^^^^^210^240^coefficients[i] = 0.0;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P3_Replace_Literal]^c = new double[n+-6];^229^^^^^214^244^c = new double[n+1];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P5_Replace_Variable]^c = jew double[n+1];^229^^^^^214^244^c = new double[n+1];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P8_Replace_Mix]^c = new double[n+1L];^229^^^^^214^244^c = new double[n+1];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P11_Insert_Donor_Statement]^coefficients = new double[n];c = new double[n+1];^229^^^^^214^244^c = new double[n+1];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P11_Insert_Donor_Statement]^this.x = new double[x.length];c = new double[n+1];^229^^^^^214^244^c = new double[n+1];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P11_Insert_Donor_Statement]^tc = new double[n];c = new double[n+1];^229^^^^^214^244^c = new double[n+1];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P11_Insert_Donor_Statement]^c = new double[n];c = new double[n+1];^229^^^^^214^244^c = new double[n+1];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P11_Insert_Donor_Statement]^d = new double[n];c = new double[n+1];^229^^^^^214^244^c = new double[n+1];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P11_Insert_Donor_Statement]^this.y = new double[y.length];c = new double[n+1];^229^^^^^214^244^c = new double[n+1];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P3_Replace_Literal]^c[j] = 1.j;^230^^^^^215^245^c[0] = 1.0;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P3_Replace_Literal]^c[0] = 0.25;^230^^^^^215^245^c[0] = 1.0;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P8_Replace_Mix]^c[0 << 4] = 1.0 << 4;^230^^^^^215^245^c[0] = 1.0;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P11_Insert_Donor_Statement]^c[i+1] = 1;c[0] = 1.0;^230^^^^^215^245^c[0] = 1.0;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P11_Insert_Donor_Statement]^c[i] = y[i];c[0] = 1.0;^230^^^^^215^245^c[0] = 1.0;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P2_Replace_Operator]^for  ( i = 0; i == n; i++ )  {^231^^^^^216^246^for  ( i = 0; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P2_Replace_Operator]^for  |  ( i = 0; i < n; i++ )  {^231^^^^^216^246^for  ( i = 0; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P3_Replace_Literal]^for  ( i = i; i < n; i++ )  {^231^^^^^216^246^for  ( i = 0; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P3_Replace_Literal]^for  ( i = -7; i < n; i++ )  {^231^^^^^216^246^for  ( i = 0; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P3_Replace_Literal]^for  ( i = n; i < n; i++ )  {^231^^^^^216^246^for  ( i = 0; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P5_Replace_Variable]^for  ( i = 0; i < j; i++ )  {^231^^^^^216^246^for  ( i = 0; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P5_Replace_Variable]^for  ( n = 0; i < i; i++ )  {^231^^^^^216^246^for  ( i = 0; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P8_Replace_Mix]^for  ( n = 0; i < n; i++ )  {^231^^^^^216^246^for  ( i = 0; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P2_Replace_Operator]^for  ( j = i; j >= 0; j-- )  {^232^^^^^217^247^for  ( j = i; j > 0; j-- )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P3_Replace_Literal]^for  ( j = i; j > n; j-- )  {^232^^^^^217^247^for  ( j = i; j > 0; j-- )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P5_Replace_Variable]^for  ( j = n; j > 0; j-- )  {^232^^^^^217^247^for  ( j = i; j > 0; j-- )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P5_Replace_Variable]^for  ( n = i; j > 0; j-- )  {^232^^^^^217^247^for  ( j = i; j > 0; j-- )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P2_Replace_Operator]^c[j] = c[j-1]  ==  c[j] * x[i];^233^^^^^218^248^c[j] = c[j-1] - c[j] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P2_Replace_Operator]^c[j] = c[j-1]  >  c[j] * x[i];^233^^^^^218^248^c[j] = c[j-1] - c[j] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P2_Replace_Operator]^c[j] + = c[j-1] - c[j] * x[i];^233^^^^^218^248^c[j] = c[j-1] - c[j] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P5_Replace_Variable]^c[j] = y[j-1] - c[j] * x[i];^233^^^^^218^248^c[j] = c[j-1] - c[j] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P5_Replace_Variable]^c[j] = x[j-1] - c[j] * c[i];^233^^^^^218^248^c[j] = c[j-1] - c[j] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P8_Replace_Mix]^c[j] = c[j-1 * 1] - c[j] * x[i];^233^^^^^218^248^c[j] = c[j-1] - c[j] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P11_Insert_Donor_Statement]^tc[j] = c[j+1] + tc[j+1] * x[i];c[j] = c[j-1] - c[j] * x[i];^233^^^^^218^248^c[j] = c[j-1] - c[j] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P2_Replace_Operator]^c[j] = c[j-1]  &&  c[j] * x[i];^233^^^^^218^248^c[j] = c[j-1] - c[j] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P2_Replace_Operator]^c[j] = c[j-1]  <=  c[j] * x[i];^233^^^^^218^248^c[j] = c[j-1] - c[j] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P2_Replace_Operator]^c[j] - = c[j-1] - c[j] * x[i];^233^^^^^218^248^c[j] = c[j-1] - c[j] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P3_Replace_Literal]^c[j] = c[j-i] - c[j] * x[i];^233^^^^^218^248^c[j] = c[j-1] - c[j] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P5_Replace_Variable]^c[j] = c[j-1] - c[j] * y[i];^233^^^^^218^248^c[j] = c[j-1] - c[j] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P8_Replace_Mix]^c[j] = c[j-0] - c[j] * x[i];^233^^^^^218^248^c[j] = c[j-1] - c[j] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P3_Replace_Literal]^c[6] *=  ( -x[i] ) ;^235^^^^^220^250^c[0] *=  ( -x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P8_Replace_Mix]^c[0 + 4] *=  ( -x[i] ) ;^235^^^^^220^250^c[0] *=  ( -x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P11_Insert_Donor_Statement]^d *=  ( x[i] - x[j] ) ;c[0] *=  ( -x[i] ) ;^235^^^^^220^250^c[0] *=  ( -x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P3_Replace_Literal]^c[i+j] = j;^236^^^^^221^251^c[i+1] = 1;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P3_Replace_Literal]^c[i+7] = 7;^236^^^^^221^251^c[i+1] = 1;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P8_Replace_Mix]^c[i+1 << 2] = 1 << 2;^236^^^^^221^251^c[i+1] = 1;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P11_Insert_Donor_Statement]^c[0] = 1.0;c[i+1] = 1;^236^^^^^221^251^c[i+1] = 1;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P11_Insert_Donor_Statement]^tc[n-1] = c[n];c[i+1] = 1;^236^^^^^221^251^c[i+1] = 1;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P2_Replace_Operator]^for  ( j = i; j < 0; j-- )  {^232^^^^^217^247^for  ( j = i; j > 0; j-- )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P3_Replace_Literal]^for  ( j = i; j > i; j-- )  {^232^^^^^217^247^for  ( j = i; j > 0; j-- )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P2_Replace_Operator]^c[j] = c[j-1]  |  c[j] * x[i];^233^^^^^218^248^c[j] = c[j-1] - c[j] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P2_Replace_Operator]^c[j] = c[j-1]  ^  c[j] * x[i];^233^^^^^218^248^c[j] = c[j-1] - c[j] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P2_Replace_Operator]^c[j] / = c[j-1] - c[j] * x[i];^233^^^^^218^248^c[j] = c[j-1] - c[j] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P5_Replace_Variable]^c[j] = c[j-1] - c[j] * out[i];^233^^^^^218^248^c[j] = c[j-1] - c[j] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P3_Replace_Literal]^for  ( i = 3; i < n; i++ )  {^231^^^^^216^246^for  ( i = 0; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P8_Replace_Mix]^for  ( i = 4; i < n; i++ )  {^231^^^^^216^246^for  ( i = 0; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P2_Replace_Operator]^c[j] = c[j-1]  <<  c[j] * x[i];^233^^^^^218^248^c[j] = c[j-1] - c[j] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P3_Replace_Literal]^c[j] = c[j-9] - c[j] * x[i];^233^^^^^218^248^c[j] = c[j-1] - c[j] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P3_Replace_Literal]^c[j] *=  ( -x[i] ) ;^235^^^^^220^250^c[0] *=  ( -x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P8_Replace_Mix]^c[0 >> 1] *=  ( -x[i] ) ;^235^^^^^220^250^c[0] *=  ( -x[i] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P3_Replace_Literal]^c[i+-8] = -8;^236^^^^^221^251^c[i+1] = 1;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P8_Replace_Mix]^c[i+0] = 0;^236^^^^^221^251^c[i+1] = 1;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P5_Replace_Variable]^tc = jew double[n];^239^^^^^224^254^tc = new double[n];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P8_Replace_Mix]^tc =  jew double[j];^239^^^^^224^254^tc = new double[n];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P11_Insert_Donor_Statement]^c = new double[n+1];tc = new double[n];^239^^^^^224^254^tc = new double[n];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P11_Insert_Donor_Statement]^coefficients = new double[n];tc = new double[n];^239^^^^^224^254^tc = new double[n];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P11_Insert_Donor_Statement]^this.x = new double[x.length];tc = new double[n];^239^^^^^224^254^tc = new double[n];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P11_Insert_Donor_Statement]^c = new double[n];tc = new double[n];^239^^^^^224^254^tc = new double[n];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P11_Insert_Donor_Statement]^d = new double[n];tc = new double[n];^239^^^^^224^254^tc = new double[n];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P11_Insert_Donor_Statement]^this.y = new double[y.length];tc = new double[n];^239^^^^^224^254^tc = new double[n];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P2_Replace_Operator]^if  ( i == j )  {^244^^^^^229^259^if  ( i != j )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P5_Replace_Variable]^if  ( n != j )  {^244^^^^^229^259^if  ( i != j )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P5_Replace_Variable]^if  ( j != i )  {^244^^^^^229^259^if  ( i != j )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P6_Replace_Expression]^if  ( x[i] - x[j] )  {^244^^^^^229^259^if  ( i != j )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P9_Replace_Statement]^if  ( d == 0.0 )  {^244^^^^^229^259^if  ( i != j )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P15_Unwrap_Block]^d *= (x[i]) - (x[j]);^244^245^246^^^229^259^if  ( i != j )  { d *=  ( x[i] - x[j] ) ; }^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P16_Remove_Block]^^244^245^246^^^229^259^if  ( i != j )  { d *=  ( x[i] - x[j] ) ; }^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P2_Replace_Operator]^d *=  ( x[i]  <=  x[j] ) ;^245^^^^^230^260^d *=  ( x[i] - x[j] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P5_Replace_Variable]^d *=  ( y[i] - x[j] ) ;^245^^^^^230^260^d *=  ( x[i] - x[j] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P8_Replace_Mix]^d *=   ( x[n] - x[j] ) ;^245^^^^^230^260^d *=  ( x[i] - x[j] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P11_Insert_Donor_Statement]^c[0] *=  ( -x[i] ) ;d *=  ( x[i] - x[j] ) ;^245^^^^^230^260^d *=  ( x[i] - x[j] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P2_Replace_Operator]^if  ( d != 0.0 )  {^248^^^^^233^263^if  ( d == 0.0 )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P3_Replace_Literal]^if  ( d == NaN )  {^248^^^^^233^263^if  ( d == 0.0 )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P5_Replace_Variable]^if  ( t == 0.0 )  {^248^^^^^233^263^if  ( d == 0.0 )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P8_Replace_Mix]^if  ( d == 1.0d )  {^248^^^^^233^263^if  ( d == 0.0 )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P9_Replace_Statement]^if  ( divider == 0.0 )  {^248^^^^^233^263^if  ( d == 0.0 )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P9_Replace_Statement]^if  ( i != j )  {^248^^^^^233^263^if  ( d == 0.0 )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P15_Unwrap_Block]^throw new java.lang.ArithmeticException("Identical abscissas cause division by zero.");^248^249^250^251^252^233^263^if  ( d == 0.0 )  {  throw new ArithmeticException ( "Identical abscissas cause division by zero." ) ; }^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P16_Remove_Block]^^248^249^250^251^252^233^263^if  ( d == 0.0 )  {  throw new ArithmeticException ( "Identical abscissas cause division by zero." ) ; }^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P3_Replace_Literal]^throw new ArithmeticException ( "ntic" ) ;^250^251^^^^235^265^throw new ArithmeticException ( "Identical abscissas cause division by zero." ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P2_Replace_Operator]^for  ( i = 0; i <= n; i++ )  {^240^^^^^225^255^for  ( i = 0; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P2_Replace_Operator]^for  ( i = 0; i > n; i++ )  {^240^^^^^225^255^for  ( i = 0; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P2_Replace_Operator]^for  ||  ( i = 0; i < n; i++ )  {^240^^^^^225^255^for  ( i = 0; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P2_Replace_Operator]^for  |  ( i = 0; i < n; i++ )  {^240^^^^^225^255^for  ( i = 0; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P2_Replace_Operator]^for  <=  ( i = 0; i < n; i++ )  {^240^^^^^225^255^for  ( i = 0; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P2_Replace_Operator]^for  >=  ( i = 0; i < n; i++ )  {^240^^^^^225^255^for  ( i = 0; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P3_Replace_Literal]^for  ( i = n; i < n; i++ )  {^240^^^^^225^255^for  ( i = 0; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P3_Replace_Literal]^for  ( i = -7; i < n; i++ )  {^240^^^^^225^255^for  ( i = 0; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P5_Replace_Variable]^for  ( j = 0; i < n; i++ )  {^240^^^^^225^255^for  ( i = 0; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P5_Replace_Variable]^for  ( i = 0; i < i; i++ )  {^240^^^^^225^255^for  ( i = 0; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P5_Replace_Variable]^for  ( n = 0; i < i; i++ )  {^240^^^^^225^255^for  ( i = 0; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P5_Replace_Variable]^if  ( i != n )  {^244^^^^^229^259^if  ( i != j )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P2_Replace_Operator]^d *=  ( x[i]  &  x[j] ) ;^245^^^^^230^260^d *=  ( x[i] - x[j] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P8_Replace_Mix]^if  ( d == 0.0D )  {^248^^^^^233^263^if  ( d == 0.0 )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P3_Replace_Literal]^throw new ArithmeticException ( "Identical abscissas cause division by zero.Identica" ) ;^250^251^^^^235^265^throw new ArithmeticException ( "Identical abscissas cause division by zero." ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P3_Replace_Literal]^throw new ArithmeticException ( "adentical abscissas cause division by zero." ) ;^250^251^^^^235^265^throw new ArithmeticException ( "Identical abscissas cause division by zero." ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P2_Replace_Operator]^for  ( j = 0; j <= n; j++ )  {^243^^^^^228^258^for  ( j = 0; j < n; j++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P3_Replace_Literal]^for  ( j = 4; j < n; j++ )  {^243^^^^^228^258^for  ( j = 0; j < n; j++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P5_Replace_Variable]^for  ( i = 0; j < n; j++ )  {^243^^^^^228^258^for  ( j = 0; j < n; j++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P5_Replace_Variable]^for  ( j = 0; j < j; j++ )  {^243^^^^^228^258^for  ( j = 0; j < n; j++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P2_Replace_Operator]^d *=  ( x[i]  ^  x[j] ) ;^245^^^^^230^260^d *=  ( x[i] - x[j] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P2_Replace_Operator]^d *=  ( x[i]  <  x[j] ) ;^245^^^^^230^260^d *=  ( x[i] - x[j] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P5_Replace_Variable]^d *=  ( out[i] - x[j] ) ;^245^^^^^230^260^d *=  ( x[i] - x[j] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P2_Replace_Operator]^for  ( j = n-2; j < 0; j-- )  {^259^^^^^244^274^for  ( j = n-2; j >= 0; j-- )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P3_Replace_Literal]^for  ( j = n-7; j >= 0; j-- )  {^259^^^^^244^274^for  ( j = n-2; j >= 0; j-- )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P3_Replace_Literal]^for  ( j = n-2; j >= i; j-- )  {^259^^^^^244^274^for  ( j = n-2; j >= 0; j-- )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P5_Replace_Variable]^for  ( j = j-2; j >= 0; j-- )  {^259^^^^^244^274^for  ( j = n-2; j >= 0; j-- )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P5_Replace_Variable]^for  ( i = n-2; j >= 0; j-- )  {^259^^^^^244^274^for  ( j = n-2; j >= 0; j-- )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P5_Replace_Variable]^for  ( n = j-2; j >= 0; j-- )  {^259^^^^^244^274^for  ( j = n-2; j >= 0; j-- )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P2_Replace_Operator]^tc[j] + = c[j+1] + tc[j+1] * x[i];^260^^^^^245^275^tc[j] = c[j+1] + tc[j+1] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P3_Replace_Literal]^tc[j] = c[j+2] + tc[j+2] * x[i];^260^^^^^245^275^tc[j] = c[j+1] + tc[j+1] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P3_Replace_Literal]^tc[j] = c[j+n] + tc[j+n] * x[i];^260^^^^^245^275^tc[j] = c[j+1] + tc[j+1] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P5_Replace_Variable]^tc[j] = c[j+1] + y[j+1] * x[i];^260^^^^^245^275^tc[j] = c[j+1] + tc[j+1] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P5_Replace_Variable]^tc[j] = y[j+1] + tc[j+1] * x[i];^260^^^^^245^275^tc[j] = c[j+1] + tc[j+1] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P5_Replace_Variable]^tc[j] = c[j+1] + tc[j+1] * y[i];^260^^^^^245^275^tc[j] = c[j+1] + tc[j+1] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P5_Replace_Variable]^tc[j] = tc[j+1] + c[j+1] * x[i];^260^^^^^245^275^tc[j] = c[j+1] + tc[j+1] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P5_Replace_Variable]^tc[j] = x[j+1] + tc[j+1] * c[i];^260^^^^^245^275^tc[j] = c[j+1] + tc[j+1] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P8_Replace_Mix]^tc[j] = c[j+1 * 1] + tc[j+1 * 1] * x[i];^260^^^^^245^275^tc[j] = c[j+1] + tc[j+1] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P11_Insert_Donor_Statement]^c[j] = c[j-1] - c[j] * x[i];tc[j] = c[j+1] + tc[j+1] * x[i];^260^^^^^245^275^tc[j] = c[j+1] + tc[j+1] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P2_Replace_Operator]^coefficients[j] / += t * tc[j];^261^^^^^246^276^coefficients[j] += t * tc[j];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P5_Replace_Variable]^coefficients[j] += d * tc[j];^261^^^^^246^276^coefficients[j] += t * tc[j];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P5_Replace_Variable]^coefficients[j] += t * y[j];^261^^^^^246^276^coefficients[j] += t * tc[j];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P8_Replace_Mix]^coefficients[j] + =  coefficients[j] +;^261^^^^^246^276^coefficients[j] += t * tc[j];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P11_Insert_Donor_Statement]^coefficients[n-1] += t * tc[n-1];coefficients[j] += t * tc[j];^261^^^^^246^276^coefficients[j] += t * tc[j];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P11_Insert_Donor_Statement]^coefficients = new double[n];coefficients[j] += t * tc[j];^261^^^^^246^276^coefficients[j] += t * tc[j];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P11_Insert_Donor_Statement]^coefficientsComputed = true;coefficients[j] += t * tc[j];^261^^^^^246^276^coefficients[j] += t * tc[j];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P11_Insert_Donor_Statement]^coefficientsComputed = false;coefficients[j] += t * tc[j];^261^^^^^246^276^coefficients[j] += t * tc[j];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P11_Insert_Donor_Statement]^coefficients[i] = 0.0;coefficients[j] += t * tc[j];^261^^^^^246^276^coefficients[j] += t * tc[j];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P3_Replace_Literal]^d = 10;^242^^^^^227^257^d = 1;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P8_Replace_Mix]^d = 1 % 2;^242^^^^^227^257^d = 1;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P3_Replace_Literal]^for  ( j = i; j < n; j++ )  {^243^^^^^228^258^for  ( j = 0; j < n; j++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P5_Replace_Variable]^d *=  ( tc[i] - x[j] ) ;^245^^^^^230^260^d *=  ( x[i] - x[j] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P2_Replace_Operator]^t = y[i] + d;^253^^^^^238^268^t = y[i] / d;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P5_Replace_Variable]^t = y[i] / t;^253^^^^^238^268^t = y[i] / d;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P5_Replace_Variable]^t = x[i] / d;^253^^^^^238^268^t = y[i] / d;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P5_Replace_Variable]^t = d[i] / y;^253^^^^^238^268^t = y[i] / d;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P8_Replace_Mix]^t =  y[n] / d;^253^^^^^238^268^t = y[i] / d;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P11_Insert_Donor_Statement]^tc = x[j] - z;t = y[i] / d;^253^^^^^238^268^t = y[i] / d;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P11_Insert_Donor_Statement]^td = x[i+j] - z;t = y[i] / d;^253^^^^^238^268^t = y[i] / d;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P5_Replace_Variable]^tc[n-1] = tc[n];^257^^^^^242^272^tc[n-1] = c[n];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P8_Replace_Mix]^tc[n-1 << 3] = c[n];^257^^^^^242^272^tc[n-1] = c[n];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P11_Insert_Donor_Statement]^d[i] = y[i];tc[n-1] = c[n];^257^^^^^242^272^tc[n-1] = c[n];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P11_Insert_Donor_Statement]^c[i+1] = 1;tc[n-1] = c[n];^257^^^^^242^272^tc[n-1] = c[n];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P11_Insert_Donor_Statement]^c[i] = y[i];tc[n-1] = c[n];^257^^^^^242^272^tc[n-1] = c[n];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P2_Replace_Operator]^coefficients[n-1] - += t * tc[n-1];^258^^^^^243^273^coefficients[n-1] += t * tc[n-1];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P3_Replace_Literal]^coefficients[n-n] += t * tc[n-n];^258^^^^^243^273^coefficients[n-1] += t * tc[n-1];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P3_Replace_Literal]^coefficients[n--5] += t * tc[n--5];^258^^^^^243^273^coefficients[n-1] += t * tc[n-1];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P5_Replace_Variable]^coefficients[n-1] += d * tc[n-1];^258^^^^^243^273^coefficients[n-1] += t * tc[n-1];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P5_Replace_Variable]^coefficients[n-1] += t * y[n-1];^258^^^^^243^273^coefficients[n-1] += t * tc[n-1];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P8_Replace_Mix]^coefficients[n-2] += t * tc[n-2];^258^^^^^243^273^coefficients[n-1] += t * tc[n-1];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P11_Insert_Donor_Statement]^coefficients = new double[n];coefficients[n-1] += t * tc[n-1];^258^^^^^243^273^coefficients[n-1] += t * tc[n-1];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P11_Insert_Donor_Statement]^coefficients[j] += t * tc[j];coefficients[n-1] += t * tc[n-1];^258^^^^^243^273^coefficients[n-1] += t * tc[n-1];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P11_Insert_Donor_Statement]^coefficients[i] = 0.0;coefficients[n-1] += t * tc[n-1];^258^^^^^243^273^coefficients[n-1] += t * tc[n-1];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P3_Replace_Literal]^for  ( j = n--3; j >= 0; j-- )  {^259^^^^^244^274^for  ( j = n-2; j >= 0; j-- )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P8_Replace_Mix]^for  ( j = n-2 % 3; j >= 0; j-- )  {^259^^^^^244^274^for  ( j = n-2; j >= 0; j-- )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P2_Replace_Operator]^tc[j] - = c[j+1] + tc[j+1] * x[i];^260^^^^^245^275^tc[j] = c[j+1] + tc[j+1] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P3_Replace_Literal]^tc[j] = c[j+j] + tc[j+j] * x[i];^260^^^^^245^275^tc[j] = c[j+1] + tc[j+1] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P3_Replace_Literal]^tc[j] = c[j+i] + tc[j+i] * x[i];^260^^^^^245^275^tc[j] = c[j+1] + tc[j+1] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P5_Replace_Variable]^tc[j] = c[j+1] + x[j+1] * tc[i];^260^^^^^245^275^tc[j] = c[j+1] + tc[j+1] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P8_Replace_Mix]^tc[j] = c[j+1 << 4] + tc[j+1 << 4] * x[i];^260^^^^^245^275^tc[j] = c[j+1] + tc[j+1] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P5_Replace_Variable]^coefficients[j] += t * out[j];^261^^^^^246^276^coefficients[j] += t * tc[j];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P5_Replace_Variable]^coefficients[j] += tc * t[j];^261^^^^^246^276^coefficients[j] += t * tc[j];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P8_Replace_Mix]^coefficients[j] +;^261^^^^^246^276^coefficients[j] += t * tc[j];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P3_Replace_Literal]^throw new ArithmeticException ( "Identical abscissas cause division by zero.n" ) ;^250^251^^^^235^265^throw new ArithmeticException ( "Identical abscissas cause division by zero." ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P3_Replace_Literal]^throw new ArithmeticException ( "Identical abscissas cause division by zero.cause " ) ;^250^251^^^^235^265^throw new ArithmeticException ( "Identical abscissas cause division by zero." ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P3_Replace_Literal]^for  ( j = j; j < n; j++ )  {^243^^^^^228^258^for  ( j = 0; j < n; j++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P5_Replace_Variable]^for  ( n = 0; j < n; j++ )  {^243^^^^^228^258^for  ( j = 0; j < n; j++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P2_Replace_Operator]^if  ( i <= j )  {^244^^^^^229^259^if  ( i != j )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P2_Replace_Operator]^d *=  ( x[i]  >  x[j] ) ;^245^^^^^230^260^d *=  ( x[i] - x[j] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P2_Replace_Operator]^d *=  ( x[i]  &&  x[j] ) ;^245^^^^^230^260^d *=  ( x[i] - x[j] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P2_Replace_Operator]^for  ( j = n-2; j > 0; j-- )  {^259^^^^^244^274^for  ( j = n-2; j >= 0; j-- )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P3_Replace_Literal]^for  ( j = n-1; j >= 0; j-- )  {^259^^^^^244^274^for  ( j = n-2; j >= 0; j-- )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P3_Replace_Literal]^for  ( j = n-2; j >= 2; j-- )  {^259^^^^^244^274^for  ( j = n-2; j >= 0; j-- )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P8_Replace_Mix]^for  ( n = n-2; j >= 0; j-- )  {^259^^^^^244^274^for  ( j = n-2; j >= 0; j-- )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P3_Replace_Literal]^tc[j] = c[j+-8] + tc[j+-8] * x[i];^260^^^^^245^275^tc[j] = c[j+1] + tc[j+1] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P5_Replace_Variable]^tc[j] = c[j+1] + out[j+1] * x[i];^260^^^^^245^275^tc[j] = c[j+1] + tc[j+1] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P5_Replace_Variable]^tc[j] = tc[j+1] + tc[j+1] * x[i];^260^^^^^245^275^tc[j] = c[j+1] + tc[j+1] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P8_Replace_Mix]^tc[j] = c[j+1L] + tc[j+1L] * x[i];^260^^^^^245^275^tc[j] = c[j+1] + tc[j+1] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P2_Replace_Operator]^coefficients[j] - += t * tc[j];^261^^^^^246^276^coefficients[j] += t * tc[j];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P3_Replace_Literal]^for  ( i = i; i < n; i++ )  {^240^^^^^225^255^for  ( i = 0; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P8_Replace_Mix]^for  ( i = 3; i < n; i++ )  {^240^^^^^225^255^for  ( i = 0; i < n; i++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P3_Replace_Literal]^d = i;^242^^^^^227^257^d = 1;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P8_Replace_Mix]^d = 3;^242^^^^^227^257^d = 1;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P8_Replace_Mix]^for  ( j = 0 % 1; j < n; j++ )  {^243^^^^^228^258^for  ( j = 0; j < n; j++ )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P2_Replace_Operator]^d *=  ( x[i]  >>  x[j] ) ;^245^^^^^230^260^d *=  ( x[i] - x[j] ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P2_Replace_Operator]^t = y[i] * d;^253^^^^^238^268^t = y[i] / d;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P5_Replace_Variable]^t = tc[i] / d;^253^^^^^238^268^t = y[i] / d;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P8_Replace_Mix]^t =  y[null] / d;^253^^^^^238^268^t = y[i] / d;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P5_Replace_Variable]^tc[n-1] = y[n];^257^^^^^242^272^tc[n-1] = c[n];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P8_Replace_Mix]^tc[n-1 - 3] = c[n];^257^^^^^242^272^tc[n-1] = c[n];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P2_Replace_Operator]^coefficients[n-1] / += t * tc[n-1];^258^^^^^243^273^coefficients[n-1] += t * tc[n-1];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P3_Replace_Literal]^coefficients[n-j] += t * tc[n-j];^258^^^^^243^273^coefficients[n-1] += t * tc[n-1];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P3_Replace_Literal]^coefficients[n-9] += t * tc[n-9];^258^^^^^243^273^coefficients[n-1] += t * tc[n-1];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P8_Replace_Mix]^coefficients[n-1 % 1] += t * tc[n-1 % 1];^258^^^^^243^273^coefficients[n-1] += t * tc[n-1];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P3_Replace_Literal]^for  ( j = n--5; j >= 0; j-- )  {^259^^^^^244^274^for  ( j = n-2; j >= 0; j-- )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P8_Replace_Mix]^for  ( j = n-2 - 2; j >= 0; j-- )  {^259^^^^^244^274^for  ( j = n-2; j >= 0; j-- )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P3_Replace_Literal]^tc[j] = c[j+-5] + tc[j+-5] * x[i];^260^^^^^245^275^tc[j] = c[j+1] + tc[j+1] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P5_Replace_Variable]^tc[j] = c[j+1] + tc[j+1] * out[i];^260^^^^^245^275^tc[j] = c[j+1] + tc[j+1] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P8_Replace_Mix]^tc[j] = c[j+4] + tc[j+4] * x[i];^260^^^^^245^275^tc[j] = c[j+1] + tc[j+1] * x[i];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P2_Replace_Operator]^coefficients[j] + += t * tc[j];^261^^^^^246^276^coefficients[j] += t * tc[j];^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P3_Replace_Literal]^throw new ArithmeticException ( "ssas cau" ) ;^250^251^^^^235^265^throw new ArithmeticException ( "Identical abscissas cause division by zero." ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P3_Replace_Literal]^throw new ArithmeticException ( "dentical abscissas cause divisi" ) ;^250^251^^^^235^265^throw new ArithmeticException ( "Identical abscissas cause division by zero." ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P8_Replace_Mix]^throw new IllegalArgumentException ( "Abscissa and value arrays must have the same length." ) ; ;^250^251^^^^235^265^throw new ArithmeticException ( "Identical abscissas cause division by zero." ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P3_Replace_Literal]^coefficientsComputed = false;^265^^^^^250^280^coefficientsComputed = true;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P11_Insert_Donor_Statement]^coefficients[j] += t * tc[j];coefficientsComputed = true;^265^^^^^250^280^coefficientsComputed = true;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P11_Insert_Donor_Statement]^coefficientsComputed = false;coefficientsComputed = true;^265^^^^^250^280^coefficientsComputed = true;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P11_Insert_Donor_Statement]^coefficients[i] = 0.0;coefficientsComputed = true;^265^^^^^250^280^coefficientsComputed = true;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P12_Insert_Condition]^if  ( !coefficientsComputed )  { coefficientsComputed = true; }^265^^^^^250^280^coefficientsComputed = true;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  int  i  j  n  double  d  t  
[P2_Replace_Operator]^if  ( x.length < 2 && y.length < 2 )  {^281^^^^^278^289^if  ( x.length < 2 || y.length < 2 )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] verifyInterpolationArray [RETURN_TYPE] void   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  
[P2_Replace_Operator]^if  ( x.length <= 2 || y.length < 2 )  {^281^^^^^278^289^if  ( x.length < 2 || y.length < 2 )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] verifyInterpolationArray [RETURN_TYPE] void   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  
[P2_Replace_Operator]^if  ( x.length < 2 || y.length <= 2 )  {^281^^^^^278^289^if  ( x.length < 2 || y.length < 2 )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] verifyInterpolationArray [RETURN_TYPE] void   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  
[P3_Replace_Literal]^if  ( x.length < -3 || y.length < -3 )  {^281^^^^^278^289^if  ( x.length < 2 || y.length < 2 )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] verifyInterpolationArray [RETURN_TYPE] void   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  
[P3_Replace_Literal]^if  ( x.length < 9 || y.length < 9 )  {^281^^^^^278^289^if  ( x.length < 2 || y.length < 2 )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] verifyInterpolationArray [RETURN_TYPE] void   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  
[P5_Replace_Variable]^if  ( tc.length < 2 || y.length < 2 )  {^281^^^^^278^289^if  ( x.length < 2 || y.length < 2 )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] verifyInterpolationArray [RETURN_TYPE] void   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  
[P5_Replace_Variable]^if  ( x.length < 2 || out.length < 2 )  {^281^^^^^278^289^if  ( x.length < 2 || y.length < 2 )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] verifyInterpolationArray [RETURN_TYPE] void   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  
[P5_Replace_Variable]^if  ( y.length < 2 || x.length < 2 )  {^281^^^^^278^289^if  ( x.length < 2 || y.length < 2 )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] verifyInterpolationArray [RETURN_TYPE] void   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  
[P6_Replace_Expression]^if  ( x.length < 2 ) {^281^^^^^278^289^if  ( x.length < 2 || y.length < 2 )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] verifyInterpolationArray [RETURN_TYPE] void   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  
[P6_Replace_Expression]^if  (  y.length < 2 )  {^281^^^^^278^289^if  ( x.length < 2 || y.length < 2 )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] verifyInterpolationArray [RETURN_TYPE] void   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  
[P8_Replace_Mix]^if  ( x.length < 0  ) {^281^^^^^278^289^if  ( x.length < 2 || y.length < 2 )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] verifyInterpolationArray [RETURN_TYPE] void   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  
[P9_Replace_Statement]^if  ( x.length != y.length )  {^281^^^^^278^289^if  ( x.length < 2 || y.length < 2 )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] verifyInterpolationArray [RETURN_TYPE] void   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("Interpolation requires at least two points.");^281^282^283^284^^278^289^if  ( x.length < 2 || y.length < 2 )  { throw new IllegalArgumentException ( "Interpolation requires at least two points." ) ; }^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] verifyInterpolationArray [RETURN_TYPE] void   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  
[P16_Remove_Block]^^281^282^283^284^^278^289^if  ( x.length < 2 || y.length < 2 )  { throw new IllegalArgumentException ( "Interpolation requires at least two points." ) ; }^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] verifyInterpolationArray [RETURN_TYPE] void   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  
[P13_Insert_Block]^if  (  ( x.length )  !=  ( y.length )  )  {     throw new IllegalArgumentException ( "Abscissa and value arrays must have the same length." ) ; }^281^^^^^278^289^[Delete]^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] verifyInterpolationArray [RETURN_TYPE] void   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "terpolation requires at least two po" ) ;^282^283^^^^278^289^throw new IllegalArgumentException ( "Interpolation requires at least two points." ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] verifyInterpolationArray [RETURN_TYPE] void   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  
[P13_Insert_Block]^if  (  (  ( x.length )  < 2 )  ||  (  ( y.length )  < 2 )  )  {     throw new IllegalArgumentException ( "Interpolation requires at least two points." ) ; }^282^^^^^278^289^[Delete]^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] verifyInterpolationArray [RETURN_TYPE] void   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "equires at lnterpolation requires at least two points." ) ;^282^283^^^^278^289^throw new IllegalArgumentException ( "Interpolation requires at least two points." ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] verifyInterpolationArray [RETURN_TYPE] void   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Abscissa and value arrays must have the same length." ) ;throw new IllegalArgumentException ( "Interpolation requires at least two points." ) ;^282^283^^^^278^289^throw new IllegalArgumentException ( "Interpolation requires at least two points." ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] verifyInterpolationArray [RETURN_TYPE] void   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "es at least two pointerpolation requires at least two points." ) ;^282^283^^^^278^289^throw new IllegalArgumentException ( "Interpolation requires at least two points." ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] verifyInterpolationArray [RETURN_TYPE] void   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "erp" ) ;^282^283^^^^278^289^throw new IllegalArgumentException ( "Interpolation requires at least two points." ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] verifyInterpolationArray [RETURN_TYPE] void   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  
[P2_Replace_Operator]^if  ( x.length < y.length )  {^285^^^^^278^289^if  ( x.length != y.length )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] verifyInterpolationArray [RETURN_TYPE] void   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  
[P5_Replace_Variable]^if  ( x.length != x.length )  {^285^^^^^278^289^if  ( x.length != y.length )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] verifyInterpolationArray [RETURN_TYPE] void   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  
[P5_Replace_Variable]^if  ( y.length != x.length )  {^285^^^^^278^289^if  ( x.length != y.length )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] verifyInterpolationArray [RETURN_TYPE] void   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  
[P5_Replace_Variable]^if  ( x != y.length )  {^285^^^^^278^289^if  ( x.length != y.length )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] verifyInterpolationArray [RETURN_TYPE] void   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  
[P8_Replace_Mix]^if  ( x.length != out.length )  {^285^^^^^278^289^if  ( x.length != y.length )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] verifyInterpolationArray [RETURN_TYPE] void   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  
[P9_Replace_Statement]^if  ( x.length < 2 || y.length < 2 )  {^285^^^^^278^289^if  ( x.length != y.length )  {^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] verifyInterpolationArray [RETURN_TYPE] void   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("Abscissa and value arrays must have the same length.");^285^286^287^288^^278^289^if  ( x.length != y.length )  { throw new IllegalArgumentException ( "Abscissa and value arrays must have the same length." ) ; }^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] verifyInterpolationArray [RETURN_TYPE] void   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  
[P16_Remove_Block]^^285^286^287^288^^278^289^if  ( x.length != y.length )  { throw new IllegalArgumentException ( "Abscissa and value arrays must have the same length." ) ; }^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] verifyInterpolationArray [RETURN_TYPE] void   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  
[P13_Insert_Block]^if  (  (  ( x.length )  < 2 )  ||  (  ( y.length )  < 2 )  )  {     throw new IllegalArgumentException ( "Interpolation requires at least two points." ) ; }^285^^^^^278^289^[Delete]^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] verifyInterpolationArray [RETURN_TYPE] void   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  
[P13_Insert_Block]^if  (  ( x.length )  !=  ( y.length )  )  {     throw new IllegalArgumentException ( "Abscissa and value arrays must have the same length." ) ; }^286^^^^^278^289^[Delete]^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] verifyInterpolationArray [RETURN_TYPE] void   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Abscissa and value arrays must have the same length.bs" ) ;^286^287^^^^278^289^throw new IllegalArgumentException ( "Abscissa and value arrays must have the same length." ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] verifyInterpolationArray [RETURN_TYPE] void   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Interpolation requires at least two points." ) ;throw new IllegalArgumentException ( "Abscissa and value arrays must have the same length." ) ;^286^287^^^^278^289^throw new IllegalArgumentException ( "Abscissa and value arrays must have the same length." ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] verifyInterpolationArray [RETURN_TYPE] void   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "value arrays must hbscissa and value arrays must have the same length." ) ;^286^287^^^^278^289^throw new IllegalArgumentException ( "Abscissa and value arrays must have the same length." ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] verifyInterpolationArray [RETURN_TYPE] void   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "abscissa and value arrays must have the same length." ) ;^286^287^^^^278^289^throw new IllegalArgumentException ( "Abscissa and value arrays must have the same length." ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] verifyInterpolationArray [RETURN_TYPE] void   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  
[P8_Replace_Mix]^throw new ArithmeticException ( "Identical abscissas cause division by zero." ) ; ;^286^287^^^^278^289^throw new IllegalArgumentException ( "Abscissa and value arrays must have the same length." ) ;^[CLASS] PolynomialFunctionLagrangeForm  [METHOD] verifyInterpolationArray [RETURN_TYPE] void   double[] x double[] y [VARIABLES] boolean  coefficientsComputed  double[]  c  coefficients  d  out  tc  x  y  long  serialVersionUID  
