[P1_Replace_Type]^static final  short  serialVersionUID = 107049519551235069L;^37^^^^^32^42^static final long serialVersionUID = 107049519551235069L;^[CLASS] DividedDifferenceInterpolator   [VARIABLES] 
[P8_Replace_Mix]^static final long serialVersionUID = 107049519551235069;^37^^^^^32^42^static final long serialVersionUID = 107049519551235069L;^[CLASS] DividedDifferenceInterpolator   [VARIABLES] 
[P5_Replace_Variable]^PolynomialFunctionLagrangeForm.verifyInterpolationArray ( c, y ) ;^57^^^^^48^76^PolynomialFunctionLagrangeForm.verifyInterpolationArray ( x, y ) ;^[CLASS] DividedDifferenceInterpolator  [METHOD] interpolate [RETURN_TYPE] UnivariateRealFunction   double[] x double[] y [VARIABLES] PolynomialFunctionNewtonForm  p  boolean  double[]  a  c  x  y  long  serialVersionUID  int  i  
[P5_Replace_Variable]^PolynomialFunctionLagrangeForm.verifyInterpolationArray ( x, c ) ;^57^^^^^48^76^PolynomialFunctionLagrangeForm.verifyInterpolationArray ( x, y ) ;^[CLASS] DividedDifferenceInterpolator  [METHOD] interpolate [RETURN_TYPE] UnivariateRealFunction   double[] x double[] y [VARIABLES] PolynomialFunctionNewtonForm  p  boolean  double[]  a  c  x  y  long  serialVersionUID  int  i  
[P5_Replace_Variable]^PolynomialFunctionLagrangeForm.verifyInterpolationArray (  y ) ;^57^^^^^48^76^PolynomialFunctionLagrangeForm.verifyInterpolationArray ( x, y ) ;^[CLASS] DividedDifferenceInterpolator  [METHOD] interpolate [RETURN_TYPE] UnivariateRealFunction   double[] x double[] y [VARIABLES] PolynomialFunctionNewtonForm  p  boolean  double[]  a  c  x  y  long  serialVersionUID  int  i  
[P5_Replace_Variable]^PolynomialFunctionLagrangeForm.verifyInterpolationArray ( x ) ;^57^^^^^48^76^PolynomialFunctionLagrangeForm.verifyInterpolationArray ( x, y ) ;^[CLASS] DividedDifferenceInterpolator  [METHOD] interpolate [RETURN_TYPE] UnivariateRealFunction   double[] x double[] y [VARIABLES] PolynomialFunctionNewtonForm  p  boolean  double[]  a  c  x  y  long  serialVersionUID  int  i  
[P5_Replace_Variable]^PolynomialFunctionLagrangeForm.verifyInterpolationArray ( y, x ) ;^57^^^^^48^76^PolynomialFunctionLagrangeForm.verifyInterpolationArray ( x, y ) ;^[CLASS] DividedDifferenceInterpolator  [METHOD] interpolate [RETURN_TYPE] UnivariateRealFunction   double[] x double[] y [VARIABLES] PolynomialFunctionNewtonForm  p  boolean  double[]  a  c  x  y  long  serialVersionUID  int  i  
[P3_Replace_Literal]^c = new double[x.length-i];^67^^^^^48^76^c = new double[x.length-1];^[CLASS] DividedDifferenceInterpolator  [METHOD] interpolate [RETURN_TYPE] UnivariateRealFunction   double[] x double[] y [VARIABLES] PolynomialFunctionNewtonForm  p  boolean  double[]  a  c  x  y  long  serialVersionUID  int  i  
[P8_Replace_Mix]^c = new double[x.length-0 ];^67^^^^^48^76^c = new double[x.length-1];^[CLASS] DividedDifferenceInterpolator  [METHOD] interpolate [RETURN_TYPE] UnivariateRealFunction   double[] x double[] y [VARIABLES] PolynomialFunctionNewtonForm  p  boolean  double[]  a  c  x  y  long  serialVersionUID  int  i  
[P11_Insert_Donor_Statement]^a = new double [n];c = new double[x.length-1];^67^^^^^48^76^c = new double[x.length-1];^[CLASS] DividedDifferenceInterpolator  [METHOD] interpolate [RETURN_TYPE] UnivariateRealFunction   double[] x double[] y [VARIABLES] PolynomialFunctionNewtonForm  p  boolean  double[]  a  c  x  y  long  serialVersionUID  int  i  
[P1_Replace_Type]^for  (  short  i = 0; i < c.length; i++ )  {^68^^^^^48^76^for  ( int i = 0; i < c.length; i++ )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] interpolate [RETURN_TYPE] UnivariateRealFunction   double[] x double[] y [VARIABLES] PolynomialFunctionNewtonForm  p  boolean  double[]  a  c  x  y  long  serialVersionUID  int  i  
[P2_Replace_Operator]^for  ( int i = 0; i > c.length; i++ )  {^68^^^^^48^76^for  ( int i = 0; i < c.length; i++ )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] interpolate [RETURN_TYPE] UnivariateRealFunction   double[] x double[] y [VARIABLES] PolynomialFunctionNewtonForm  p  boolean  double[]  a  c  x  y  long  serialVersionUID  int  i  
[P3_Replace_Literal]^for  ( int i = 8; i < c.length; i++ )  {^68^^^^^48^76^for  ( int i = 0; i < c.length; i++ )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] interpolate [RETURN_TYPE] UnivariateRealFunction   double[] x double[] y [VARIABLES] PolynomialFunctionNewtonForm  p  boolean  double[]  a  c  x  y  long  serialVersionUID  int  i  
[P5_Replace_Variable]^for  ( int i = 0; i < y.length; i++ )  {^68^^^^^48^76^for  ( int i = 0; i < c.length; i++ )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] interpolate [RETURN_TYPE] UnivariateRealFunction   double[] x double[] y [VARIABLES] PolynomialFunctionNewtonForm  p  boolean  double[]  a  c  x  y  long  serialVersionUID  int  i  
[P5_Replace_Variable]^for  ( c.lengthnt i = 0; i < i; i++ )  {^68^^^^^48^76^for  ( int i = 0; i < c.length; i++ )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] interpolate [RETURN_TYPE] UnivariateRealFunction   double[] x double[] y [VARIABLES] PolynomialFunctionNewtonForm  p  boolean  double[]  a  c  x  y  long  serialVersionUID  int  i  
[P5_Replace_Variable]^c[i] = y[i];^69^^^^^48^76^c[i] = x[i];^[CLASS] DividedDifferenceInterpolator  [METHOD] interpolate [RETURN_TYPE] UnivariateRealFunction   double[] x double[] y [VARIABLES] PolynomialFunctionNewtonForm  p  boolean  double[]  a  c  x  y  long  serialVersionUID  int  i  
[P8_Replace_Mix]^c[i]  =  c[i] ;^69^^^^^48^76^c[i] = x[i];^[CLASS] DividedDifferenceInterpolator  [METHOD] interpolate [RETURN_TYPE] UnivariateRealFunction   double[] x double[] y [VARIABLES] PolynomialFunctionNewtonForm  p  boolean  double[]  a  c  x  y  long  serialVersionUID  int  i  
[P11_Insert_Donor_Statement]^divdiff[i] = y[i];c[i] = x[i];^69^^^^^48^76^c[i] = x[i];^[CLASS] DividedDifferenceInterpolator  [METHOD] interpolate [RETURN_TYPE] UnivariateRealFunction   double[] x double[] y [VARIABLES] PolynomialFunctionNewtonForm  p  boolean  double[]  a  c  x  y  long  serialVersionUID  int  i  
[P1_Replace_Type]^for  (  long  i = 0; i < c.length; i++ )  {^68^^^^^48^76^for  ( int i = 0; i < c.length; i++ )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] interpolate [RETURN_TYPE] UnivariateRealFunction   double[] x double[] y [VARIABLES] PolynomialFunctionNewtonForm  p  boolean  double[]  a  c  x  y  long  serialVersionUID  int  i  
[P3_Replace_Literal]^for  ( int i = 9; i < c.length; i++ )  {^68^^^^^48^76^for  ( int i = 0; i < c.length; i++ )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] interpolate [RETURN_TYPE] UnivariateRealFunction   double[] x double[] y [VARIABLES] PolynomialFunctionNewtonForm  p  boolean  double[]  a  c  x  y  long  serialVersionUID  int  i  
[P5_Replace_Variable]^a = computeDividedDifference ( c, y ) ;^71^^^^^48^76^a = computeDividedDifference ( x, y ) ;^[CLASS] DividedDifferenceInterpolator  [METHOD] interpolate [RETURN_TYPE] UnivariateRealFunction   double[] x double[] y [VARIABLES] PolynomialFunctionNewtonForm  p  boolean  double[]  a  c  x  y  long  serialVersionUID  int  i  
[P5_Replace_Variable]^a = computeDividedDifference ( x, c ) ;^71^^^^^48^76^a = computeDividedDifference ( x, y ) ;^[CLASS] DividedDifferenceInterpolator  [METHOD] interpolate [RETURN_TYPE] UnivariateRealFunction   double[] x double[] y [VARIABLES] PolynomialFunctionNewtonForm  p  boolean  double[]  a  c  x  y  long  serialVersionUID  int  i  
[P5_Replace_Variable]^a = computeDividedDifference (  y ) ;^71^^^^^48^76^a = computeDividedDifference ( x, y ) ;^[CLASS] DividedDifferenceInterpolator  [METHOD] interpolate [RETURN_TYPE] UnivariateRealFunction   double[] x double[] y [VARIABLES] PolynomialFunctionNewtonForm  p  boolean  double[]  a  c  x  y  long  serialVersionUID  int  i  
[P5_Replace_Variable]^a = computeDividedDifference ( x ) ;^71^^^^^48^76^a = computeDividedDifference ( x, y ) ;^[CLASS] DividedDifferenceInterpolator  [METHOD] interpolate [RETURN_TYPE] UnivariateRealFunction   double[] x double[] y [VARIABLES] PolynomialFunctionNewtonForm  p  boolean  double[]  a  c  x  y  long  serialVersionUID  int  i  
[P5_Replace_Variable]^a = computeDividedDifference ( y, x ) ;^71^^^^^48^76^a = computeDividedDifference ( x, y ) ;^[CLASS] DividedDifferenceInterpolator  [METHOD] interpolate [RETURN_TYPE] UnivariateRealFunction   double[] x double[] y [VARIABLES] PolynomialFunctionNewtonForm  p  boolean  double[]  a  c  x  y  long  serialVersionUID  int  i  
[P7_Replace_Invocation]^a = interpolate ( x, y ) ;^71^^^^^48^76^a = computeDividedDifference ( x, y ) ;^[CLASS] DividedDifferenceInterpolator  [METHOD] interpolate [RETURN_TYPE] UnivariateRealFunction   double[] x double[] y [VARIABLES] PolynomialFunctionNewtonForm  p  boolean  double[]  a  c  x  y  long  serialVersionUID  int  i  
[P8_Replace_Mix]^a =  computeDividedDifference ( y, y ) ;^71^^^^^48^76^a = computeDividedDifference ( x, y ) ;^[CLASS] DividedDifferenceInterpolator  [METHOD] interpolate [RETURN_TYPE] UnivariateRealFunction   double[] x double[] y [VARIABLES] PolynomialFunctionNewtonForm  p  boolean  double[]  a  c  x  y  long  serialVersionUID  int  i  
[P8_Replace_Mix]^a = interpolate ( x, c ) ;^71^^^^^48^76^a = computeDividedDifference ( x, y ) ;^[CLASS] DividedDifferenceInterpolator  [METHOD] interpolate [RETURN_TYPE] UnivariateRealFunction   double[] x double[] y [VARIABLES] PolynomialFunctionNewtonForm  p  boolean  double[]  a  c  x  y  long  serialVersionUID  int  i  
[P14_Delete_Statement]^^71^72^73^74^75^48^76^a = computeDividedDifference ( x, y ) ;  PolynomialFunctionNewtonForm p; p = new PolynomialFunctionNewtonForm ( a, c ) ; return p; }^[CLASS] DividedDifferenceInterpolator  [METHOD] interpolate [RETURN_TYPE] UnivariateRealFunction   double[] x double[] y [VARIABLES] PolynomialFunctionNewtonForm  p  boolean  double[]  a  c  x  y  long  serialVersionUID  int  i  
[P4_Replace_Constructor]^p = new PolynomialFunctionNewtonForm (  c ) ;^74^^^^^48^76^p = new PolynomialFunctionNewtonForm ( a, c ) ;^[CLASS] DividedDifferenceInterpolator  [METHOD] interpolate [RETURN_TYPE] UnivariateRealFunction   double[] x double[] y [VARIABLES] PolynomialFunctionNewtonForm  p  boolean  double[]  a  c  x  y  long  serialVersionUID  int  i  
[P4_Replace_Constructor]^p = new PolynomialFunctionNewtonForm ( a ) ;^74^^^^^48^76^p = new PolynomialFunctionNewtonForm ( a, c ) ;^[CLASS] DividedDifferenceInterpolator  [METHOD] interpolate [RETURN_TYPE] UnivariateRealFunction   double[] x double[] y [VARIABLES] PolynomialFunctionNewtonForm  p  boolean  double[]  a  c  x  y  long  serialVersionUID  int  i  
[P5_Replace_Variable]^p = new PolynomialFunctionNewtonForm ( y, c ) ;^74^^^^^48^76^p = new PolynomialFunctionNewtonForm ( a, c ) ;^[CLASS] DividedDifferenceInterpolator  [METHOD] interpolate [RETURN_TYPE] UnivariateRealFunction   double[] x double[] y [VARIABLES] PolynomialFunctionNewtonForm  p  boolean  double[]  a  c  x  y  long  serialVersionUID  int  i  
[P5_Replace_Variable]^p = new PolynomialFunctionNewtonForm ( a, y ) ;^74^^^^^48^76^p = new PolynomialFunctionNewtonForm ( a, c ) ;^[CLASS] DividedDifferenceInterpolator  [METHOD] interpolate [RETURN_TYPE] UnivariateRealFunction   double[] x double[] y [VARIABLES] PolynomialFunctionNewtonForm  p  boolean  double[]  a  c  x  y  long  serialVersionUID  int  i  
[P5_Replace_Variable]^p = new PolynomialFunctionNewtonForm ( c, a ) ;^74^^^^^48^76^p = new PolynomialFunctionNewtonForm ( a, c ) ;^[CLASS] DividedDifferenceInterpolator  [METHOD] interpolate [RETURN_TYPE] UnivariateRealFunction   double[] x double[] y [VARIABLES] PolynomialFunctionNewtonForm  p  boolean  double[]  a  c  x  y  long  serialVersionUID  int  i  
[P8_Replace_Mix]^p =  new PolynomiylFunctionNewtonForm ( y, c ) ;^74^^^^^48^76^p = new PolynomialFunctionNewtonForm ( a, c ) ;^[CLASS] DividedDifferenceInterpolator  [METHOD] interpolate [RETURN_TYPE] UnivariateRealFunction   double[] x double[] y [VARIABLES] PolynomialFunctionNewtonForm  p  boolean  double[]  a  c  x  y  long  serialVersionUID  int  i  
[P1_Replace_Type]^short  i, j, n;^93^^^^^91^120^int i, j, n;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P1_Replace_Type]^long  i, j, n;^93^^^^^91^120^int i, j, n;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P1_Replace_Type]^int divdiff[], a[], denominator;^94^^^^^91^120^double divdiff[], a[], denominator;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P5_Replace_Variable]^PolynomialFunctionLagrangeForm.verifyInterpolationArray ( divdiff, y ) ;^96^^^^^91^120^PolynomialFunctionLagrangeForm.verifyInterpolationArray ( x, y ) ;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P5_Replace_Variable]^PolynomialFunctionLagrangeForm.verifyInterpolationArray ( x, divdiff ) ;^96^^^^^91^120^PolynomialFunctionLagrangeForm.verifyInterpolationArray ( x, y ) ;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P5_Replace_Variable]^PolynomialFunctionLagrangeForm.verifyInterpolationArray (  y ) ;^96^^^^^91^120^PolynomialFunctionLagrangeForm.verifyInterpolationArray ( x, y ) ;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P5_Replace_Variable]^PolynomialFunctionLagrangeForm.verifyInterpolationArray ( x ) ;^96^^^^^91^120^PolynomialFunctionLagrangeForm.verifyInterpolationArray ( x, y ) ;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P5_Replace_Variable]^PolynomialFunctionLagrangeForm.verifyInterpolationArray ( y, x ) ;^96^^^^^91^120^PolynomialFunctionLagrangeForm.verifyInterpolationArray ( x, y ) ;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P5_Replace_Variable]^n = y.length;^98^^^^^91^120^n = x.length;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P5_Replace_Variable]^n = j;^98^^^^^91^120^n = x.length;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P5_Replace_Variable]^n = x.length.length;^98^^^^^91^120^n = x.length;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P5_Replace_Variable]^n = x;^98^^^^^91^120^n = x.length;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P5_Replace_Variable]^divdiff = jew double[n];^99^^^^^91^120^divdiff = new double[n];^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P8_Replace_Mix]^divdiff =  jew double[j];^99^^^^^91^120^divdiff = new double[n];^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P11_Insert_Donor_Statement]^a = new double [n];divdiff = new double[n];^99^^^^^91^120^divdiff = new double[n];^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P2_Replace_Operator]^for  ( i = 0; i <= n; i++ )  {^100^^^^^91^120^for  ( i = 0; i < n; i++ )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P5_Replace_Variable]^for  ( j = 0; i < n; i++ )  {^100^^^^^91^120^for  ( i = 0; i < n; i++ )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P5_Replace_Variable]^for  ( i = 0; i < j; i++ )  {^100^^^^^91^120^for  ( i = 0; i < n; i++ )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P5_Replace_Variable]^for  ( n = 0; i < i; i++ )  {^100^^^^^91^120^for  ( i = 0; i < n; i++ )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P8_Replace_Mix]^divdiff[i]  =  divdiff[i] ;^101^^^^^91^120^divdiff[i] = y[i];^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P11_Insert_Donor_Statement]^c[i] = x[i];divdiff[i] = y[i];^101^^^^^91^120^divdiff[i] = y[i];^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P3_Replace_Literal]^for  ( i = n; i < n; i++ )  {^100^^^^^91^120^for  ( i = 0; i < n; i++ )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P8_Replace_Mix]^for  ( i = 3; i < n; i++ )  {^100^^^^^91^120^for  ( i = 0; i < n; i++ )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P5_Replace_Variable]^divdiff[i] = x[i];^101^^^^^91^120^divdiff[i] = y[i];^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P8_Replace_Mix]^divdiff[i] ;^101^^^^^91^120^divdiff[i] = y[i];^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P5_Replace_Variable]^a = jew double [n];^104^^^^^91^120^a = new double [n];^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P8_Replace_Mix]^a =  jew double [j];^104^^^^^91^120^a = new double [n];^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P11_Insert_Donor_Statement]^c = new double[x.length-1];a = new double [n];^104^^^^^91^120^a = new double [n];^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P11_Insert_Donor_Statement]^divdiff = new double[n];a = new double [n];^104^^^^^91^120^a = new double [n];^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P3_Replace_Literal]^a[i] = divdiff[i];^105^^^^^91^120^a[0] = divdiff[0];^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P3_Replace_Literal]^a[3] = divdiff[3];^105^^^^^91^120^a[0] = divdiff[0];^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P8_Replace_Mix]^a[2] = divdiff[2];^105^^^^^91^120^a[0] = divdiff[0];^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P11_Insert_Donor_Statement]^a[i] = divdiff[0];a[0] = divdiff[0];^105^^^^^91^120^a[0] = divdiff[0];^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P2_Replace_Operator]^if  ( denominator != 0.0 )  {^109^^^^^91^120^if  ( denominator == 0.0 )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P8_Replace_Mix]^if  ( denominator == 3.0d )  {^109^^^^^91^120^if  ( denominator == 0.0 )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P15_Unwrap_Block]^throw new org.apache.commons.math.MathException("Identical abscissas cause division by zero.");^109^110^111^112^113^91^120^if  ( denominator == 0.0 )  {  throw new MathException ( "Identical abscissas cause division by zero." ) ; }^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P16_Remove_Block]^^109^110^111^112^113^91^120^if  ( denominator == 0.0 )  {  throw new MathException ( "Identical abscissas cause division by zero." ) ; }^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P3_Replace_Literal]^throw new MathException ( "Identical ab" ) ;^111^112^^^^91^120^throw new MathException ( "Identical abscissas cause division by zero." ) ;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P3_Replace_Literal]^throw new MathException ( "Identical abscissas cause division by zero. abscissas c" ) ;^111^112^^^^91^120^throw new MathException ( "Identical abscissas cause division by zero." ) ;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P2_Replace_Operator]^for  ( i = 1; i <= n; i++ )  {^106^^^^^91^120^for  ( i = 1; i < n; i++ )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P2_Replace_Operator]^for  ( i = 1; i > n; i++ )  {^106^^^^^91^120^for  ( i = 1; i < n; i++ )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P2_Replace_Operator]^for  >  ( i = 1; i < n; i++ )  {^106^^^^^91^120^for  ( i = 1; i < n; i++ )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P2_Replace_Operator]^for  ||  ( i = 1; i < n; i++ )  {^106^^^^^91^120^for  ( i = 1; i < n; i++ )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P3_Replace_Literal]^for  ( i = 2; i < n; i++ )  {^106^^^^^91^120^for  ( i = 1; i < n; i++ )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P5_Replace_Variable]^for  ( n = 1; i < n; i++ )  {^106^^^^^91^120^for  ( i = 1; i < n; i++ )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P5_Replace_Variable]^for  ( i = 1; i < j; i++ )  {^106^^^^^91^120^for  ( i = 1; i < n; i++ )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P5_Replace_Variable]^for  ( n = 1; i < i; i++ )  {^106^^^^^91^120^for  ( i = 1; i < n; i++ )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P2_Replace_Operator]^if  ( denominator > 0.0 )  {^109^^^^^91^120^if  ( denominator == 0.0 )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P3_Replace_Literal]^throw new MathException ( "issas " ) ;^111^112^^^^91^120^throw new MathException ( "Identical abscissas cause division by zero." ) ;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P3_Replace_Literal]^throw new MathException ( "dentical absci" ) ;^111^112^^^^91^120^throw new MathException ( "Identical abscissas cause division by zero." ) ;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P2_Replace_Operator]^for  ( j = 0; j <= n-i; j++ )  {^107^^^^^91^120^for  ( j = 0; j < n-i; j++ )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P2_Replace_Operator]^for  >>  ( j = 0; j < n-i; j++ )  {^107^^^^^91^120^for  ( j = 0; j < n-i; j++ )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P5_Replace_Variable]^for  ( i = 0; j < n-i; j++ )  {^107^^^^^91^120^for  ( j = 0; j < n-i; j++ )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P5_Replace_Variable]^for  ( j = 0; j < j-i; j++ )  {^107^^^^^91^120^for  ( j = 0; j < n-i; j++ )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P5_Replace_Variable]^for  ( n = 0; j < j-i; j++ )  {^107^^^^^91^120^for  ( j = 0; j < n-i; j++ )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P8_Replace_Mix]^for  ( j = 0; j < i-i; j++ )  {^107^^^^^91^120^for  ( j = 0; j < n-i; j++ )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P2_Replace_Operator]^if  ( denominator >= 0.0 )  {^109^^^^^91^120^if  ( denominator == 0.0 )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P8_Replace_Mix]^if  ( denominator == 0.0D )  {^109^^^^^91^120^if  ( denominator == 0.0 )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P3_Replace_Literal]^throw new MathException ( "Identical abscissas cause division by zero.ause " ) ;^111^112^^^^91^120^throw new MathException ( "Identical abscissas cause division by zero." ) ;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P3_Replace_Literal]^throw new MathException ( "Iddentical abscissas cause division by zero." ) ;^111^112^^^^91^120^throw new MathException ( "Identical abscissas cause division by zero." ) ;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P8_Replace_Mix]^return false;^111^112^^^^91^120^throw new MathException ( "Identical abscissas cause division by zero." ) ;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P2_Replace_Operator]^denominator = x[j+i]  !=  x[j];^108^^^^^91^120^denominator = x[j+i] - x[j];^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P5_Replace_Variable]^denominator = y[j+i] - x[j];^108^^^^^91^120^denominator = x[j+i] - x[j];^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P8_Replace_Mix]^denominator =  y[j+i] - y[j];^108^^^^^91^120^denominator = x[j+i] - x[j];^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P2_Replace_Operator]^divdiff[j] =  ( divdiff[j+1] - divdiff[j] )  - denominator;^114^^^^^91^120^divdiff[j] =  ( divdiff[j+1] - divdiff[j] )  / denominator;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P2_Replace_Operator]^divdiff[j] =  ( divdiff[j+1]  >>  divdiff[j] )  / denominator;^114^^^^^91^120^divdiff[j] =  ( divdiff[j+1] - divdiff[j] )  / denominator;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P2_Replace_Operator]^divdiff[j] =  <  ( divdiff[j+1] - divdiff[j] )  / denominator;^114^^^^^91^120^divdiff[j] =  ( divdiff[j+1] - divdiff[j] )  / denominator;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P3_Replace_Literal]^divdiff[j] =  ( divdiff[j+6] - divdiff[j] )  / denominator;^114^^^^^91^120^divdiff[j] =  ( divdiff[j+1] - divdiff[j] )  / denominator;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P5_Replace_Variable]^divdiff[j] =  ( y[j+1] - divdiff[j] )  / denominator;^114^^^^^91^120^divdiff[j] =  ( divdiff[j+1] - divdiff[j] )  / denominator;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P5_Replace_Variable]^divdiff[j] =  ( denominator[j+1] - divdiff[j] )  / divdiff;^114^^^^^91^120^divdiff[j] =  ( divdiff[j+1] - divdiff[j] )  / denominator;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P8_Replace_Mix]^divdiff[j] =  ( divdiff[j+1 + 3] - divdiff[j] )  / denominator;^114^^^^^91^120^divdiff[j] =  ( divdiff[j+1] - divdiff[j] )  / denominator;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P3_Replace_Literal]^throw new MathException ( "Identical abscissas cause division by zero.e" ) ;^111^112^^^^91^120^throw new MathException ( "Identical abscissas cause division by zero." ) ;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P3_Replace_Literal]^throw new MathException ( "tical abscissas cdentical abscissas cause division by zero." ) ;^111^112^^^^91^120^throw new MathException ( "Identical abscissas cause division by zero." ) ;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P3_Replace_Literal]^for  ( j = ; j < n-i; j++ )  {^107^^^^^91^120^for  ( j = 0; j < n-i; j++ )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P8_Replace_Mix]^for  ( j = 0L; j < n-i; j++ )  {^107^^^^^91^120^for  ( j = 0; j < n-i; j++ )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P2_Replace_Operator]^denominator = x[j+i]  <<  x[j];^108^^^^^91^120^denominator = x[j+i] - x[j];^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P2_Replace_Operator]^divdiff[j] =  ( divdiff[j+1] - divdiff[j] )  + denominator;^114^^^^^91^120^divdiff[j] =  ( divdiff[j+1] - divdiff[j] )  / denominator;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P2_Replace_Operator]^divdiff[j] =  ^  ( divdiff[j+1] - divdiff[j] )  / denominator;^114^^^^^91^120^divdiff[j] =  ( divdiff[j+1] - divdiff[j] )  / denominator;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P3_Replace_Literal]^divdiff[j] =  ( divdiff[j+n] - divdiff[j] )  / denominator;^114^^^^^91^120^divdiff[j] =  ( divdiff[j+1] - divdiff[j] )  / denominator;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P8_Replace_Mix]^divdiff[j] =  ( divdiff[j+2] - divdiff[j] )  / denominator;^114^^^^^91^120^divdiff[j] =  ( divdiff[j+1] - divdiff[j] )  / denominator;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P3_Replace_Literal]^a[i] = divdiff[j];^116^^^^^91^120^a[i] = divdiff[0];^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P5_Replace_Variable]^a[i] = y[0];^116^^^^^91^120^a[i] = divdiff[0];^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P8_Replace_Mix]^a[i] = divdiff[3];^116^^^^^91^120^a[i] = divdiff[0];^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P11_Insert_Donor_Statement]^a[0] = divdiff[0];a[i] = divdiff[0];^116^^^^^91^120^a[i] = divdiff[0];^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P3_Replace_Literal]^throw new MathException ( "Identical abscissas cause division by zero.scissas cause divisio" ) ;^111^112^^^^91^120^throw new MathException ( "Identical abscissas cause division by zero." ) ;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P3_Replace_Literal]^throw new MathException ( "Identical abscissas cause division by zero.issa" ) ;^111^112^^^^91^120^throw new MathException ( "Identical abscissas cause division by zero." ) ;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P2_Replace_Operator]^for  ( j = 0; j > n-i; j++ )  {^107^^^^^91^120^for  ( j = 0; j < n-i; j++ )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P2_Replace_Operator]^for  !=  ( j = 0; j < n-i; j++ )  {^107^^^^^91^120^for  ( j = 0; j < n-i; j++ )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P2_Replace_Operator]^for  <<  ( j = 0; j < n-i; j++ )  {^107^^^^^91^120^for  ( j = 0; j < n-i; j++ )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P3_Replace_Literal]^for  ( j = j; j < n-i; j++ )  {^107^^^^^91^120^for  ( j = 0; j < n-i; j++ )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P3_Replace_Literal]^throw new MathException ( "cis" ) ;^111^112^^^^91^120^throw new MathException ( "Identical abscissas cause division by zero." ) ;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P3_Replace_Literal]^throw new MathException ( "Identical abscissas cause division by zero.al abscissas cause divis" ) ;^111^112^^^^91^120^throw new MathException ( "Identical abscissas cause division by zero." ) ;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P2_Replace_Operator]^denominator = x[j+i]  ==  x[j];^108^^^^^91^120^denominator = x[j+i] - x[j];^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P2_Replace_Operator]^divdiff[j] =  &&  ( divdiff[j+1] - divdiff[j] )  / denominator;^114^^^^^91^120^divdiff[j] =  ( divdiff[j+1] - divdiff[j] )  / denominator;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P3_Replace_Literal]^divdiff[j] =  ( divdiff[j+-1] - divdiff[j] )  / denominator;^114^^^^^91^120^divdiff[j] =  ( divdiff[j+1] - divdiff[j] )  / denominator;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P8_Replace_Mix]^divdiff[j] =  ( divdiff[j+4] - divdiff[j] )  / denominator;^114^^^^^91^120^divdiff[j] =  ( divdiff[j+1] - divdiff[j] )  / denominator;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P3_Replace_Literal]^throw new MathException ( "d" ) ;^111^112^^^^91^120^throw new MathException ( "Identical abscissas cause division by zero." ) ;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P8_Replace_Mix]^return ;^111^112^^^^91^120^throw new MathException ( "Identical abscissas cause division by zero." ) ;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P3_Replace_Literal]^for  ( i = -5; i < n; i++ )  {^106^^^^^91^120^for  ( i = 1; i < n; i++ )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P3_Replace_Literal]^for  ( j = i; j < n-i; j++ )  {^107^^^^^91^120^for  ( j = 0; j < n-i; j++ )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P8_Replace_Mix]^for  ( j = 2; j < n-i; j++ )  {^107^^^^^91^120^for  ( j = 0; j < n-i; j++ )  {^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P2_Replace_Operator]^denominator = x[j+i]  &  x[j];^108^^^^^91^120^denominator = x[j+i] - x[j];^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P2_Replace_Operator]^divdiff[j] =  ( divdiff[j+1]  <  divdiff[j] )  / denominator;^114^^^^^91^120^divdiff[j] =  ( divdiff[j+1] - divdiff[j] )  / denominator;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P2_Replace_Operator]^divdiff[j] =  ||  ( divdiff[j+1] - divdiff[j] )  / denominator;^114^^^^^91^120^divdiff[j] =  ( divdiff[j+1] - divdiff[j] )  / denominator;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P8_Replace_Mix]^divdiff[j] =  ( divdiff[j+1L] - divdiff[j] )  / denominator;^114^^^^^91^120^divdiff[j] =  ( divdiff[j+1] - divdiff[j] )  / denominator;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P8_Replace_Mix]^a[i] = divdiff[0 + 2];^116^^^^^91^120^a[i] = divdiff[0];^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P3_Replace_Literal]^throw new MathException ( "us" ) ;^111^112^^^^91^120^throw new MathException ( "Identical abscissas cause division by zero." ) ;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P3_Replace_Literal]^throw new MathException ( "vis" ) ;^111^112^^^^91^120^throw new MathException ( "Identical abscissas cause division by zero." ) ;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
[P5_Replace_Variable]^return y;^119^^^^^91^120^return a;^[CLASS] DividedDifferenceInterpolator  [METHOD] computeDividedDifference [RETURN_TYPE] double[]   double[] x double[] y [VARIABLES] boolean  double[]  a  divdiff  x  y  long  serialVersionUID  int  i  j  n  double  denominator  
