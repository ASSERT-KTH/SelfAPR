[P1_Replace_Type]^private static final  int   NB =  (  int  ) -1;^28^^^^^23^33^private static final byte  NB =  ( byte ) -1;^[CLASS] MathUtils   [VARIABLES] 
[P3_Replace_Literal]^private static final byte  NB =  ( byte ) -6;^28^^^^^23^33^private static final byte  NB =  ( byte ) -1;^[CLASS] MathUtils   [VARIABLES] 
[P8_Replace_Mix]^private static final byte  NB ;^28^^^^^23^33^private static final byte  NB =  ( byte ) -1;^[CLASS] MathUtils   [VARIABLES] 
[P1_Replace_Type]^private static final  int  NS =  (  int  ) -1;^31^^^^^26^36^private static final short NS =  ( short ) -1;^[CLASS] MathUtils   [VARIABLES] 
[P3_Replace_Literal]^private static final short NS =  ( short ) -;^31^^^^^26^36^private static final short NS =  ( short ) -1;^[CLASS] MathUtils   [VARIABLES] 
[P8_Replace_Mix]^private static  short NS =  ( short ) -4;^31^^^^^26^36^private static final short NS =  ( short ) -1;^[CLASS] MathUtils   [VARIABLES] 
[P1_Replace_Type]^private static final  int   PB =  (  int  ) 1;^34^^^^^29^39^private static final byte  PB =  ( byte ) 1;^[CLASS] MathUtils   [VARIABLES] 
[P8_Replace_Mix]^private static final byte  PB  = null ;^34^^^^^29^39^private static final byte  PB =  ( byte ) 1;^[CLASS] MathUtils   [VARIABLES] 
[P1_Replace_Type]^private static final  long  PS =  (  long  ) 1;^37^^^^^32^42^private static final short PS =  ( short ) 1;^[CLASS] MathUtils   [VARIABLES] 
[P8_Replace_Mix]^private static  short PS =  ( short ) 1;^37^^^^^32^42^private static final short PS =  ( short ) 1;^[CLASS] MathUtils   [VARIABLES] 
[P1_Replace_Type]^private static final  long   ZB =  (  long  ) 0;^40^^^^^35^45^private static final byte  ZB =  ( byte ) 0;^[CLASS] MathUtils   [VARIABLES] 
[P8_Replace_Mix]^private static final byte  ZB  = null ;^40^^^^^35^45^private static final byte  ZB =  ( byte ) 0;^[CLASS] MathUtils   [VARIABLES] 
[P1_Replace_Type]^private static final  int  ZS =  (  int  ) 0;^43^^^^^38^48^private static final short ZS =  ( short ) 0;^[CLASS] MathUtils   [VARIABLES] 
[P14_Delete_Statement]^^49^^^^^48^50^super (  ) ;^[CLASS] MathUtils  [METHOD] <init> [RETURN_TYPE] MathUtils()   [VARIABLES] short  NS  PS  ZS  byte  NB  PB  ZB  boolean  
[P1_Replace_Type]^int  s =  (  int  ) x +  (  int  ) y;^63^^^^^62^68^long s =  ( long ) x +  ( long ) y;^[CLASS] MathUtils  [METHOD] addAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  x  y  long  s  
[P2_Replace_Operator]^long s =  ^  ( long ) x +  ( long ) y;^63^^^^^62^68^long s =  ( long ) x +  ( long ) y;^[CLASS] MathUtils  [METHOD] addAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  x  y  long  s  
[P11_Insert_Donor_Statement]^long m =  (  ( long ) x )  *  (  ( long ) y ) ;long s =  ( long ) x +  ( long ) y;^63^^^^^62^68^long s =  ( long ) x +  ( long ) y;^[CLASS] MathUtils  [METHOD] addAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  x  y  long  s  
[P11_Insert_Donor_Statement]^long s =  ( long ) x -  ( long ) y;long s =  ( long ) x +  ( long ) y;^63^^^^^62^68^long s =  ( long ) x +  ( long ) y;^[CLASS] MathUtils  [METHOD] addAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  x  y  long  s  
[P2_Replace_Operator]^if  ( s < Integer.MIN_VALUE && s > Integer.MAX_VALUE )  {^64^^^^^62^68^if  ( s < Integer.MIN_VALUE || s > Integer.MAX_VALUE )  {^[CLASS] MathUtils  [METHOD] addAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  x  y  long  s  
[P2_Replace_Operator]^if  ( s <= Integer.MIN_VALUE || s > Integer.MAX_VALUE )  {^64^^^^^62^68^if  ( s < Integer.MIN_VALUE || s > Integer.MAX_VALUE )  {^[CLASS] MathUtils  [METHOD] addAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  x  y  long  s  
[P2_Replace_Operator]^if  ( s < Integer.MIN_VALUE || s >= Integer.MAX_VALUE )  {^64^^^^^62^68^if  ( s < Integer.MIN_VALUE || s > Integer.MAX_VALUE )  {^[CLASS] MathUtils  [METHOD] addAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  x  y  long  s  
[P5_Replace_Variable]^if  ( s < Integer.y || s > Integer.MAX_VALUE )  {^64^^^^^62^68^if  ( s < Integer.MIN_VALUE || s > Integer.MAX_VALUE )  {^[CLASS] MathUtils  [METHOD] addAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  x  y  long  s  
[P5_Replace_Variable]^if  ( s < Integer.MIN_VALUE || s > Integer.y )  {^64^^^^^62^68^if  ( s < Integer.MIN_VALUE || s > Integer.MAX_VALUE )  {^[CLASS] MathUtils  [METHOD] addAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  x  y  long  s  
[P6_Replace_Expression]^if  ( s < Integer.MIN_VALUE ) {^64^^^^^62^68^if  ( s < Integer.MIN_VALUE || s > Integer.MAX_VALUE )  {^[CLASS] MathUtils  [METHOD] addAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  x  y  long  s  
[P6_Replace_Expression]^if  (  s > Integer.MAX_VALUE )  {^64^^^^^62^68^if  ( s < Integer.MIN_VALUE || s > Integer.MAX_VALUE )  {^[CLASS] MathUtils  [METHOD] addAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  x  y  long  s  
[P6_Replace_Expression]^if  ( s < MIN_VALUE )  {^64^^^^^62^68^if  ( s < Integer.MIN_VALUE || s > Integer.MAX_VALUE )  {^[CLASS] MathUtils  [METHOD] addAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  x  y  long  s  
[P6_Replace_Expression]^if  ( s > MAX_VALUE )  {^64^^^^^62^68^if  ( s < Integer.MIN_VALUE || s > Integer.MAX_VALUE )  {^[CLASS] MathUtils  [METHOD] addAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  x  y  long  s  
[P9_Replace_Statement]^if  ( m < Integer.MIN_VALUE || m > Integer.MAX_VALUE )  {^64^^^^^62^68^if  ( s < Integer.MIN_VALUE || s > Integer.MAX_VALUE )  {^[CLASS] MathUtils  [METHOD] addAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  x  y  long  s  
[P15_Unwrap_Block]^throw new java.lang.ArithmeticException("overflow: add");^64^65^66^^^62^68^if  ( s < Integer.MIN_VALUE || s > Integer.MAX_VALUE )  { throw new ArithmeticException  (" ")  ; }^[CLASS] MathUtils  [METHOD] addAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  x  y  long  s  
[P16_Remove_Block]^^64^65^66^^^62^68^if  ( s < Integer.MIN_VALUE || s > Integer.MAX_VALUE )  { throw new ArithmeticException  (" ")  ; }^[CLASS] MathUtils  [METHOD] addAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  x  y  long  s  
[P13_Insert_Block]^if  (  ( s <  ( MIN_VALUE )  )  ||  ( s >  ( MAX_VALUE )  )  )  {     throw new ArithmeticException ( "overflow: subtract" ) ; }^64^^^^^62^68^[Delete]^[CLASS] MathUtils  [METHOD] addAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  x  y  long  s  
[P13_Insert_Block]^if  (  ( m <  ( MIN_VALUE )  )  ||  ( m >  ( MAX_VALUE )  )  )  {     throw new ArithmeticException ( "overflow: mul" ) ; }^64^^^^^62^68^[Delete]^[CLASS] MathUtils  [METHOD] addAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  x  y  long  s  
[P4_Replace_Constructor]^throw throw  new ArithmeticException ( "overflow: mul" )   ;^65^^^^^62^68^throw new ArithmeticException  (" ")  ;^[CLASS] MathUtils  [METHOD] addAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  x  y  long  s  
[P13_Insert_Block]^if  ( k == 31 )  {     throw new ArithmeticException ( "overflow: gcd is 2^31" ) ; }^65^^^^^62^68^[Delete]^[CLASS] MathUtils  [METHOD] addAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  x  y  long  s  
[P8_Replace_Mix]^return 0;^65^^^^^62^68^throw new ArithmeticException  (" ")  ;^[CLASS] MathUtils  [METHOD] addAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  x  y  long  s  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException  (" ")  ;throw new ArithmeticException  (" ")  ;^65^^^^^62^68^throw new ArithmeticException  (" ")  ;^[CLASS] MathUtils  [METHOD] addAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  x  y  long  s  
[P1_Replace_Type]^return  (  short  ) s;^67^^^^^62^68^return  ( int ) s;^[CLASS] MathUtils  [METHOD] addAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  x  y  long  s  
[P2_Replace_Operator]^if  ( n <= k )  {^97^^^^^96^118^if  ( n < k )  {^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P5_Replace_Variable]^if  ( k < n )  {^97^^^^^96^118^if  ( n < k )  {^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P9_Replace_Statement]^if  ( t > 0 )  {^97^^^^^96^118^if  ( n < k )  {^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P9_Replace_Statement]^if  ( u > 0 )  {^97^^^^^96^118^if  ( n < k )  {^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P9_Replace_Statement]^if  ( n < 0 )  {^97^^^^^96^118^if  ( n < k )  {^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P9_Replace_Statement]^if  ( v > 0 )  {^97^^^^^96^118^if  ( n < k )  {^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P9_Replace_Statement]^if  ( sign == -1 )  {^97^^^^^96^118^if  ( n < k )  {^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P9_Replace_Statement]^if  ( k == 31 )  {^97^^^^^96^118^if  ( n < k )  {^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("must have n >= k for binomial coefficient (n,k)");^97^98^99^100^^96^118^if  ( n < k )  { throw new IllegalArgumentException ( "must have n >= k for binomial coefficient  ( n,k ) " ) ; }^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P16_Remove_Block]^^97^98^99^100^^96^118^if  ( n < k )  { throw new IllegalArgumentException ( "must have n >= k for binomial coefficient  ( n,k ) " ) ; }^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P13_Insert_Block]^if  ( n < 0 )  {     throw new IllegalArgumentException ( "must have n > 0 for n!" ) ; }^97^^^^^96^118^[Delete]^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P13_Insert_Block]^if  ( n < 0 )  {     throw new IllegalArgumentException ( "must have n >= 0 for binomial coefficient  ( n,k ) " ) ; }^97^^^^^96^118^[Delete]^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P13_Insert_Block]^if  ( n < 0 )  {     throw new IllegalArgumentException ( "must have n >= 0 for n!" ) ; }^97^^^^^96^118^[Delete]^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "must have n >= 0 for binomial coefficient  ( n,k ) " )  " ) ;^98^99^^^^96^118^throw new IllegalArgumentException ( "must have n >= k for binomial coefficient  ( n,k ) " ) ;^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P13_Insert_Block]^if  ( n < k )  {     throw new IllegalArgumentException ( "must have n >= k for binomial coefficient  ( n,k ) " ) ; }^98^^^^^96^118^[Delete]^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P13_Insert_Block]^if  ( n < 0 )  {     throw new IllegalArgumentException ( "must have n >= 0 for binomial coefficient  ( n,k ) " ) ; }^98^^^^^96^118^[Delete]^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "must have n >= 0 for binomial coefficient  ( n,k ) " ) ;throw new IllegalArgumentException ( "must have n >= k for binomial coefficient  ( n,k ) " ) ;^98^99^^^^96^118^throw new IllegalArgumentException ( "must have n >= k for binomial coefficient  ( n,k ) " ) ;^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P13_Insert_Block]^if  ( n < 0 )  {     throw new IllegalArgumentException ( "must have n > 0 for n!" ) ; }^98^^^^^96^118^[Delete]^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P13_Insert_Block]^if  ( n < 0 )  {     throw new IllegalArgumentException ( "must have n >= 0 for n!" ) ; }^98^^^^^96^118^[Delete]^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P2_Replace_Operator]^if  ( n > 0 )  {^101^^^^^96^118^if  ( n < 0 )  {^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P3_Replace_Literal]^if  ( n < n )  {^101^^^^^96^118^if  ( n < 0 )  {^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P5_Replace_Variable]^if  ( k < 0 )  {^101^^^^^96^118^if  ( n < 0 )  {^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P8_Replace_Mix]^if  ( n < 4 )  {^101^^^^^96^118^if  ( n < 0 )  {^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P9_Replace_Statement]^if  ( u * v == 0 )  {^101^^^^^96^118^if  ( n < 0 )  {^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P9_Replace_Statement]^if  ( t > 0 )  {^101^^^^^96^118^if  ( n < 0 )  {^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P9_Replace_Statement]^if  ( u > 0 )  {^101^^^^^96^118^if  ( n < 0 )  {^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P9_Replace_Statement]^if  ( v > 0 )  {^101^^^^^96^118^if  ( n < 0 )  {^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P9_Replace_Statement]^if  ( n < k )  {^101^^^^^96^118^if  ( n < 0 )  {^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P9_Replace_Statement]^if  ( sign == -1 )  {^101^^^^^96^118^if  ( n < 0 )  {^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P9_Replace_Statement]^if  ( k == 31 )  {^101^^^^^96^118^if  ( n < 0 )  {^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("must have n >= 0 for binomial coefficient (n,k)");^101^102^103^104^^96^118^if  ( n < 0 )  { throw new IllegalArgumentException ( "must have n >= 0 for binomial coefficient  ( n,k ) " ) ; }^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P16_Remove_Block]^^101^102^103^104^^96^118^if  ( n < 0 )  { throw new IllegalArgumentException ( "must have n >= 0 for binomial coefficient  ( n,k ) " ) ; }^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "must have n > 0 for n!" )  " ) ;^102^103^^^^96^118^throw new IllegalArgumentException ( "must have n >= 0 for binomial coefficient  ( n,k ) " ) ;^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P13_Insert_Block]^if  ( n < k )  {     throw new IllegalArgumentException ( "must have n >= k for binomial coefficient  ( n,k ) " ) ; }^102^^^^^96^118^[Delete]^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P13_Insert_Block]^if  ( n < 0 )  {     throw new IllegalArgumentException ( "must have n >= 0 for binomial coefficient  ( n,k ) " ) ; }^102^^^^^96^118^[Delete]^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P8_Replace_Mix]^throw new ArithmeticException ( "result too large to represent in a long integer" ) ; ;^102^103^^^^96^118^throw new IllegalArgumentException ( "must have n >= 0 for binomial coefficient  ( n,k ) " ) ;^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "must have n >= k for binomial coefficient  ( n,k ) " ) ;throw new IllegalArgumentException ( "must have n >= 0 for binomial coefficient  ( n,k ) " ) ;^102^103^^^^96^118^throw new IllegalArgumentException ( "must have n >= 0 for binomial coefficient  ( n,k ) " ) ;^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P13_Insert_Block]^if  ( n < 0 )  {     throw new IllegalArgumentException ( "must have n > 0 for n!" ) ; }^102^^^^^96^118^[Delete]^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P13_Insert_Block]^if  ( n < 0 )  {     throw new IllegalArgumentException ( "must have n >= 0 for n!" ) ; }^102^^^^^96^118^[Delete]^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P2_Replace_Operator]^if  (  ( n == k )  &&  ( k == 0 )  )  {^105^^^^^96^118^if  (  ( n == k )  ||  ( k == 0 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P2_Replace_Operator]^if  (  ( n >= k )  ||  ( k == 0 )  )  {^105^^^^^96^118^if  (  ( n == k )  ||  ( k == 0 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P2_Replace_Operator]^if  (  ( n == k )  ||  ( k != 0 )  )  {^105^^^^^96^118^if  (  ( n == k )  ||  ( k == 0 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P3_Replace_Literal]^if  (  ( n == k )  ||  ( k == 8 )  )  {^105^^^^^96^118^if  (  ( n == k )  ||  ( k == 0 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P5_Replace_Variable]^if  (  ( k == n )  ||  ( k == 0 )  )  {^105^^^^^96^118^if  (  ( n == k )  ||  ( k == 0 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P6_Replace_Expression]^if  (  ( n == k )  ) {^105^^^^^96^118^if  (  ( n == k )  ||  ( k == 0 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P6_Replace_Expression]^if  (   ( k == 0 )  )  {^105^^^^^96^118^if  (  ( n == k )  ||  ( k == 0 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P6_Replace_Expression]^if  ( n == k )  {^105^^^^^96^118^if  (  ( n == k )  ||  ( k == 0 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P6_Replace_Expression]^if  ( k == 0 )  {^105^^^^^96^118^if  (  ( n == k )  ||  ( k == 0 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P8_Replace_Mix]^if  (   ( k == 2 )  )  {^105^^^^^96^118^if  (  ( n == k )  ||  ( k == 0 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P9_Replace_Statement]^if  (  ( k == 1 )  ||  ( k == n - 1 )  )  {^105^^^^^96^118^if  (  ( n == k )  ||  ( k == 0 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P15_Unwrap_Block]^return 1;^105^106^107^^^96^118^if  (  ( n == k )  ||  ( k == 0 )  )  { return 1; }^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P16_Remove_Block]^^105^106^107^^^96^118^if  (  ( n == k )  ||  ( k == 0 )  )  { return 1; }^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P13_Insert_Block]^if  (  ( k == 1 )  ||  ( k ==  ( n - 1 )  )  )  {     return n; }^105^^^^^96^118^[Delete]^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P13_Insert_Block]^if  (  ( n == k )  ||  ( k == 0 )  )  {     return 0; }^105^^^^^96^118^[Delete]^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P3_Replace_Literal]^return ;^106^^^^^96^118^return 1;^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P8_Replace_Mix]^return 1 / 4;^106^^^^^96^118^return 1;^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P3_Replace_Literal]^return 5;^106^^^^^96^118^return 1;^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P8_Replace_Mix]^return 2;^106^^^^^96^118^return 1;^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P2_Replace_Operator]^if  (  ( k == 1 )  &&  ( k == n - 1 )  )  {^108^^^^^96^118^if  (  ( k == 1 )  ||  ( k == n - 1 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P2_Replace_Operator]^if  (  ( k != 1 )  ||  ( k == n - 1 )  )  {^108^^^^^96^118^if  (  ( k == 1 )  ||  ( k == n - 1 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P2_Replace_Operator]^if  (  ( k == 1 )  ||  ( k <= n - 1 )  )  {^108^^^^^96^118^if  (  ( k == 1 )  ||  ( k == n - 1 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P2_Replace_Operator]^if  (  ( k == 1 )  ||  ( k == n  ||  1 )  )  {^108^^^^^96^118^if  (  ( k == 1 )  ||  ( k == n - 1 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P3_Replace_Literal]^if  (  ( k == 1 )  ||  ( k == n  )  )  {^108^^^^^96^118^if  (  ( k == 1 )  ||  ( k == n - 1 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P3_Replace_Literal]^if  (  ( k ==  )  ||  ( k == n -  )  )  {^108^^^^^96^118^if  (  ( k == 1 )  ||  ( k == n - 1 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P5_Replace_Variable]^if  (  ( n == 1 )  ||  ( k == k - 1 )  )  {^108^^^^^96^118^if  (  ( k == 1 )  ||  ( k == n - 1 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P6_Replace_Expression]^if  (  ( k == 1 )  ) {^108^^^^^96^118^if  (  ( k == 1 )  ||  ( k == n - 1 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P6_Replace_Expression]^if  (   ( k == n - 1 )  )  {^108^^^^^96^118^if  (  ( k == 1 )  ||  ( k == n - 1 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P6_Replace_Expression]^if  ( k == 1 )  {^108^^^^^96^118^if  (  ( k == 1 )  ||  ( k == n - 1 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P6_Replace_Expression]^if  ( k == n - 1 )  {^108^^^^^96^118^if  (  ( k == 1 )  ||  ( k == n - 1 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P6_Replace_Expression]^if  ( n - 1 )  {^108^^^^^96^118^if  (  ( k == 1 )  ||  ( k == n - 1 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P8_Replace_Mix]^if  (  ( k == 0 )  ) {^108^^^^^96^118^if  (  ( k == 1 )  ||  ( k == n - 1 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P9_Replace_Statement]^if  (  ( n == k )  ||  ( k == 0 )  )  {^108^^^^^96^118^if  (  ( k == 1 )  ||  ( k == n - 1 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P15_Unwrap_Block]^return n;^108^109^110^^^96^118^if  (  ( k == 1 )  ||  ( k == n - 1 )  )  { return n; }^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P16_Remove_Block]^^108^109^110^^^96^118^if  (  ( k == 1 )  ||  ( k == n - 1 )  )  { return n; }^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P13_Insert_Block]^if  (  ( n == k )  ||  ( k == 0 )  )  {     return 0; }^108^^^^^96^118^[Delete]^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P13_Insert_Block]^if  (  ( n == k )  ||  ( k == 0 )  )  {     return 1; }^108^^^^^96^118^[Delete]^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P13_Insert_Block]^if  (  ( k == 1 )  ||  ( k ==  ( n - 1 )  )  )  {     return log (  (  ( double )   ( n )  )  ) ; }^108^^^^^96^118^[Delete]^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P5_Replace_Variable]^return k;^109^^^^^96^118^return n;^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P1_Replace_Type]^short  result = Math.round ( binomialCoefficientDouble ( n, k )  ) ;^112^^^^^96^118^long result = Math.round ( binomialCoefficientDouble ( n, k )  ) ;^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P5_Replace_Variable]^long result = Math.round ( binomialCoefficientDouble ( k, k )  ) ;^112^^^^^96^118^long result = Math.round ( binomialCoefficientDouble ( n, k )  ) ;^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P5_Replace_Variable]^long result = Math.round ( binomialCoefficientDouble ( n, n )  ) ;^112^^^^^96^118^long result = Math.round ( binomialCoefficientDouble ( n, k )  ) ;^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P5_Replace_Variable]^long result = Math.round ( binomialCoefficientDouble (  k )  ) ;^112^^^^^96^118^long result = Math.round ( binomialCoefficientDouble ( n, k )  ) ;^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P5_Replace_Variable]^long result = Math.round ( binomialCoefficientDouble ( n )  ) ;^112^^^^^96^118^long result = Math.round ( binomialCoefficientDouble ( n, k )  ) ;^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P5_Replace_Variable]^long result = Math.round ( binomialCoefficientDouble ( k, n )  ) ;^112^^^^^96^118^long result = Math.round ( binomialCoefficientDouble ( n, k )  ) ;^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P7_Replace_Invocation]^long result = Math.pow ( binomialCoefficientDouble ( n, k )  ) ;^112^^^^^96^118^long result = Math.round ( binomialCoefficientDouble ( n, k )  ) ;^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P7_Replace_Invocation]^long result = Math.round ( binomialCoefficientLog ( n, k )  ) ;^112^^^^^96^118^long result = Math.round ( binomialCoefficientDouble ( n, k )  ) ;^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P8_Replace_Mix]^long result = Math.pow ( binomialCoefficientDouble ( k, k )  ) ;^112^^^^^96^118^long result = Math.round ( binomialCoefficientDouble ( n, k )  ) ;^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P11_Insert_Donor_Statement]^long result = Math.round ( factorialDouble ( n )  ) ;long result = Math.round ( binomialCoefficientDouble ( n, k )  ) ;^112^^^^^96^118^long result = Math.round ( binomialCoefficientDouble ( n, k )  ) ;^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P14_Delete_Statement]^^112^^^^^96^118^long result = Math.round ( binomialCoefficientDouble ( n, k )  ) ;^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P11_Insert_Donor_Statement]^return Math.floor ( Math.exp ( binomialCoefficientLog ( n, k )  )  + 0.5 ) ;long result = Math.round ( binomialCoefficientDouble ( n, k )  ) ;^112^^^^^96^118^long result = Math.round ( binomialCoefficientDouble ( n, k )  ) ;^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P2_Replace_Operator]^if  ( result > Long.MAX_VALUE )  {^113^^^^^96^118^if  ( result == Long.MAX_VALUE )  {^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P15_Unwrap_Block]^throw new java.lang.ArithmeticException("result too large to represent in a long integer");^113^114^115^116^^96^118^if  ( result == Long.MAX_VALUE )  { throw new ArithmeticException ( "result too large to represent in a long integer" ) ; }^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P16_Remove_Block]^^113^114^115^116^^96^118^if  ( result == Long.MAX_VALUE )  { throw new ArithmeticException ( "result too large to represent in a long integer" ) ; }^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P13_Insert_Block]^if  ( unscaled !=  ( floor ( unscaled )  )  )  {     throw new ArithmeticException ( "Inexact result from rounding" ) ; }^113^^^^^96^118^[Delete]^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P3_Replace_Literal]^throw new ArithmeticException ( "result too large to represent in a long integer a long integ" ) ;^114^115^^^^96^118^throw new ArithmeticException ( "result too large to represent in a long integer" ) ;^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P13_Insert_Block]^if  ( result ==  ( MAX_VALUE )  )  {     throw new ArithmeticException ( "result too large to represent in a long integer" ) ; }^114^^^^^96^118^[Delete]^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P3_Replace_Literal]^throw new ArithmeticException ( "result too large to represent in a long integer too la" ) ;^114^115^^^^96^118^throw new ArithmeticException ( "result too large to represent in a long integer" ) ;^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P3_Replace_Literal]^throw new ArithmeticException ( "reesult too large to represent in a long integer" ) ;^114^115^^^^96^118^throw new ArithmeticException ( "result too large to represent in a long integer" ) ;^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P3_Replace_Literal]^throw new ArithmeticException ( "o represult too large to represent in a long integer" ) ;^114^115^^^^96^118^throw new ArithmeticException ( "result too large to represent in a long integer" ) ;^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P8_Replace_Mix]^throw new IllegalArgumentException ( "must have n >= 0 for binomial coefficient  ( n,k ) " ) ; ;^114^115^^^^96^118^throw new ArithmeticException ( "result too large to represent in a long integer" ) ;^[CLASS] MathUtils  [METHOD] binomialCoefficient [RETURN_TYPE] long   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  long  result  
[P2_Replace_Operator]^return Math.floor ( Math.exp ( binomialCoefficientLog ( n, k )  )   >  0.5 ) ;^143^^^^^142^144^return Math.floor ( Math.exp ( binomialCoefficientLog ( n, k )  )  + 0.5 ) ;^[CLASS] MathUtils  [METHOD] binomialCoefficientDouble [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  
[P5_Replace_Variable]^return Math.floor ( Math.exp ( binomialCoefficientLog (  k )  )  + 0.5 ) ;^143^^^^^142^144^return Math.floor ( Math.exp ( binomialCoefficientLog ( n, k )  )  + 0.5 ) ;^[CLASS] MathUtils  [METHOD] binomialCoefficientDouble [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  
[P5_Replace_Variable]^return Math.floor ( Math.exp ( binomialCoefficientLog ( n )  )  + 0.5 ) ;^143^^^^^142^144^return Math.floor ( Math.exp ( binomialCoefficientLog ( n, k )  )  + 0.5 ) ;^[CLASS] MathUtils  [METHOD] binomialCoefficientDouble [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  
[P5_Replace_Variable]^return Math.floor ( Math.exp ( binomialCoefficientLog ( k, n )  )  + 0.5 ) ;^143^^^^^142^144^return Math.floor ( Math.exp ( binomialCoefficientLog ( n, k )  )  + 0.5 ) ;^[CLASS] MathUtils  [METHOD] binomialCoefficientDouble [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  
[P7_Replace_Invocation]^return Math.floor ( Math.pow ( binomialCoefficientLog ( n, k )  )  + 0.5 ) ;^143^^^^^142^144^return Math.floor ( Math.exp ( binomialCoefficientLog ( n, k )  )  + 0.5 ) ;^[CLASS] MathUtils  [METHOD] binomialCoefficientDouble [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  
[P7_Replace_Invocation]^return Math.floor ( Math.exp ( binomialCoefficient ( n, k )  )  + 0.5 ) ;^143^^^^^142^144^return Math.floor ( Math.exp ( binomialCoefficientLog ( n, k )  )  + 0.5 ) ;^[CLASS] MathUtils  [METHOD] binomialCoefficientDouble [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  
[P2_Replace_Operator]^return Math.floor ( Math.exp ( binomialCoefficientLog ( n, k )  )   ||  0.5 ) ;^143^^^^^142^144^return Math.floor ( Math.exp ( binomialCoefficientLog ( n, k )  )  + 0.5 ) ;^[CLASS] MathUtils  [METHOD] binomialCoefficientDouble [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  
[P3_Replace_Literal]^return Math.floor ( Math.exp ( binomialCoefficientLog ( n, k )  )  + 1.5 ) ;^143^^^^^142^144^return Math.floor ( Math.exp ( binomialCoefficientLog ( n, k )  )  + 0.5 ) ;^[CLASS] MathUtils  [METHOD] binomialCoefficientDouble [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  
[P14_Delete_Statement]^^143^^^^^142^144^return Math.floor ( Math.exp ( binomialCoefficientLog ( n, k )  )  + 0.5 ) ;^[CLASS] MathUtils  [METHOD] binomialCoefficientDouble [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  n  
[P2_Replace_Operator]^if  ( n <= k )  {^165^^^^^164^192^if  ( n < k )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P5_Replace_Variable]^if  ( i < k )  {^165^^^^^164^192^if  ( n < k )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P5_Replace_Variable]^if  ( n < i )  {^165^^^^^164^192^if  ( n < k )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P5_Replace_Variable]^if  ( k < n )  {^165^^^^^164^192^if  ( n < k )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P9_Replace_Statement]^if  ( t > 0 )  {^165^^^^^164^192^if  ( n < k )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P9_Replace_Statement]^if  ( u > 0 )  {^165^^^^^164^192^if  ( n < k )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P9_Replace_Statement]^if  ( n < 0 )  {^165^^^^^164^192^if  ( n < k )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P9_Replace_Statement]^if  ( v > 0 )  {^165^^^^^164^192^if  ( n < k )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P9_Replace_Statement]^if  ( sign == -1 )  {^165^^^^^164^192^if  ( n < k )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P9_Replace_Statement]^if  ( k == 31 )  {^165^^^^^164^192^if  ( n < k )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("must have n >= k for binomial coefficient (n,k)");^165^166^167^168^^164^192^if  ( n < k )  { throw new IllegalArgumentException ( "must have n >= k for binomial coefficient  ( n,k ) " ) ; }^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P16_Remove_Block]^^165^166^167^168^^164^192^if  ( n < k )  { throw new IllegalArgumentException ( "must have n >= k for binomial coefficient  ( n,k ) " ) ; }^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P13_Insert_Block]^if  ( n < 0 )  {     throw new IllegalArgumentException ( "must have n > 0 for n!" ) ; }^165^^^^^164^192^[Delete]^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P13_Insert_Block]^if  ( n < 0 )  {     throw new IllegalArgumentException ( "must have n >= 0 for binomial coefficient  ( n,k ) " ) ; }^165^^^^^164^192^[Delete]^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P13_Insert_Block]^if  ( n < 0 )  {     throw new IllegalArgumentException ( "must have n >= 0 for n!" ) ; }^165^^^^^164^192^[Delete]^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "must have n >= 0 for binomial coefficient  ( n,k ) " )  " ) ;^166^167^^^^164^192^throw new IllegalArgumentException ( "must have n >= k for binomial coefficient  ( n,k ) " ) ;^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P13_Insert_Block]^if  ( n < k )  {     throw new IllegalArgumentException ( "must have n >= k for binomial coefficient  ( n,k ) " ) ; }^166^^^^^164^192^[Delete]^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P13_Insert_Block]^if  ( n < 0 )  {     throw new IllegalArgumentException ( "must have n >= 0 for binomial coefficient  ( n,k ) " ) ; }^166^^^^^164^192^[Delete]^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P8_Replace_Mix]^return 0;^166^167^^^^164^192^throw new IllegalArgumentException ( "must have n >= k for binomial coefficient  ( n,k ) " ) ;^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "must have n >= 0 for binomial coefficient  ( n,k ) " ) ;throw new IllegalArgumentException ( "must have n >= k for binomial coefficient  ( n,k ) " ) ;^166^167^^^^164^192^throw new IllegalArgumentException ( "must have n >= k for binomial coefficient  ( n,k ) " ) ;^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P13_Insert_Block]^if  ( n < 0 )  {     throw new IllegalArgumentException ( "must have n > 0 for n!" ) ; }^166^^^^^164^192^[Delete]^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P13_Insert_Block]^if  ( n < 0 )  {     throw new IllegalArgumentException ( "must have n >= 0 for n!" ) ; }^166^^^^^164^192^[Delete]^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P2_Replace_Operator]^if  ( n <= 0 )  {^169^^^^^164^192^if  ( n < 0 )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P3_Replace_Literal]^if  ( n < i )  {^169^^^^^164^192^if  ( n < 0 )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P5_Replace_Variable]^if  ( k < 0 )  {^169^^^^^164^192^if  ( n < 0 )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P8_Replace_Mix]^if  ( k < 0 / 2 )  {^169^^^^^164^192^if  ( n < 0 )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P9_Replace_Statement]^if  ( u * v == 0 )  {^169^^^^^164^192^if  ( n < 0 )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P9_Replace_Statement]^if  ( t > 0 )  {^169^^^^^164^192^if  ( n < 0 )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P9_Replace_Statement]^if  ( u > 0 )  {^169^^^^^164^192^if  ( n < 0 )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P9_Replace_Statement]^if  ( v > 0 )  {^169^^^^^164^192^if  ( n < 0 )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P9_Replace_Statement]^if  ( n < k )  {^169^^^^^164^192^if  ( n < 0 )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P9_Replace_Statement]^if  ( sign == -1 )  {^169^^^^^164^192^if  ( n < 0 )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P9_Replace_Statement]^if  ( k == 31 )  {^169^^^^^164^192^if  ( n < 0 )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("must have n >= 0 for binomial coefficient (n,k)");^169^170^171^172^^164^192^if  ( n < 0 )  { throw new IllegalArgumentException ( "must have n >= 0 for binomial coefficient  ( n,k ) " ) ; }^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P16_Remove_Block]^^169^170^171^172^^164^192^if  ( n < 0 )  { throw new IllegalArgumentException ( "must have n >= 0 for binomial coefficient  ( n,k ) " ) ; }^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "must have n > 0 for n!" )  " ) ;^170^171^^^^164^192^throw new IllegalArgumentException ( "must have n >= 0 for binomial coefficient  ( n,k ) " ) ;^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P13_Insert_Block]^if  ( n < k )  {     throw new IllegalArgumentException ( "must have n >= k for binomial coefficient  ( n,k ) " ) ; }^170^^^^^164^192^[Delete]^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P13_Insert_Block]^if  ( n < 0 )  {     throw new IllegalArgumentException ( "must have n >= 0 for binomial coefficient  ( n,k ) " ) ; }^170^^^^^164^192^[Delete]^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "must have n >= k for binomial coefficient  ( n,k ) " ) ;throw new IllegalArgumentException ( "must have n >= 0 for binomial coefficient  ( n,k ) " ) ;^170^171^^^^164^192^throw new IllegalArgumentException ( "must have n >= 0 for binomial coefficient  ( n,k ) " ) ;^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P13_Insert_Block]^if  ( n < 0 )  {     throw new IllegalArgumentException ( "must have n > 0 for n!" ) ; }^170^^^^^164^192^[Delete]^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P13_Insert_Block]^if  ( n < 0 )  {     throw new IllegalArgumentException ( "must have n >= 0 for n!" ) ; }^170^^^^^164^192^[Delete]^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P2_Replace_Operator]^if  (  ( n == k )  &&  ( k == 0 )  )  {^173^^^^^164^192^if  (  ( n == k )  ||  ( k == 0 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P2_Replace_Operator]^if  (  ( n < k )  ||  ( k == 0 )  )  {^173^^^^^164^192^if  (  ( n == k )  ||  ( k == 0 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P2_Replace_Operator]^if  (  ( n == k )  ||  ( k > 0 )  )  {^173^^^^^164^192^if  (  ( n == k )  ||  ( k == 0 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P3_Replace_Literal]^if  (  ( n == k )  ||  ( k == 7 )  )  {^173^^^^^164^192^if  (  ( n == k )  ||  ( k == 0 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P5_Replace_Variable]^if  (  ( i == k )  ||  ( k == 0 )  )  {^173^^^^^164^192^if  (  ( n == k )  ||  ( k == 0 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P5_Replace_Variable]^if  (  ( n == i )  ||  ( k == 0 )  )  {^173^^^^^164^192^if  (  ( n == k )  ||  ( k == 0 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P5_Replace_Variable]^if  (  ( k == n )  ||  ( k == 0 )  )  {^173^^^^^164^192^if  (  ( n == k )  ||  ( k == 0 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P6_Replace_Expression]^if  (  ( n == k )  ) {^173^^^^^164^192^if  (  ( n == k )  ||  ( k == 0 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P6_Replace_Expression]^if  (   ( k == 0 )  )  {^173^^^^^164^192^if  (  ( n == k )  ||  ( k == 0 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P6_Replace_Expression]^if  ( n == k )  {^173^^^^^164^192^if  (  ( n == k )  ||  ( k == 0 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P6_Replace_Expression]^if  ( k == 0 )  {^173^^^^^164^192^if  (  ( n == k )  ||  ( k == 0 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P9_Replace_Statement]^if  (  ( k == 1 )  ||  ( k == n - 1 )  )  {^173^^^^^164^192^if  (  ( n == k )  ||  ( k == 0 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P15_Unwrap_Block]^return 0;^173^174^175^^^164^192^if  (  ( n == k )  ||  ( k == 0 )  )  { return 0; }^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P16_Remove_Block]^^173^174^175^^^164^192^if  (  ( n == k )  ||  ( k == 0 )  )  { return 0; }^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P13_Insert_Block]^if  (  ( k == 1 )  ||  ( k ==  ( n - 1 )  )  )  {     return n; }^173^^^^^164^192^[Delete]^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P13_Insert_Block]^if  (  ( n == k )  ||  ( k == 0 )  )  {     return 1; }^173^^^^^164^192^[Delete]^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P3_Replace_Literal]^return 1;^174^^^^^164^192^return 0;^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P8_Replace_Mix]^return 0L;^174^^^^^164^192^return 0;^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P3_Replace_Literal]^return k;^174^^^^^164^192^return 0;^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P8_Replace_Mix]^return 4;^174^^^^^164^192^return 0;^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P2_Replace_Operator]^if  (  ( k == 1 )  &&  ( k == n - 1 )  )  {^176^^^^^164^192^if  (  ( k == 1 )  ||  ( k == n - 1 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P2_Replace_Operator]^if  (  ( k != 1 )  ||  ( k == n - 1 )  )  {^176^^^^^164^192^if  (  ( k == 1 )  ||  ( k == n - 1 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P2_Replace_Operator]^if  (  ( k == 1 )  ||  ( k != n - 1 )  )  {^176^^^^^164^192^if  (  ( k == 1 )  ||  ( k == n - 1 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P2_Replace_Operator]^if  (  ( k == 1 )  ||  ( k == n  <=  1 )  )  {^176^^^^^164^192^if  (  ( k == 1 )  ||  ( k == n - 1 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P3_Replace_Literal]^if  (  ( k == n )  ||  ( k == n - n )  )  {^176^^^^^164^192^if  (  ( k == 1 )  ||  ( k == n - 1 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P3_Replace_Literal]^if  (  ( k == 1 )  ||  ( k == n  )  )  {^176^^^^^164^192^if  (  ( k == 1 )  ||  ( k == n - 1 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P5_Replace_Variable]^if  (  ( n == 1 )  ||  ( k == n - 1 )  )  {^176^^^^^164^192^if  (  ( k == 1 )  ||  ( k == n - 1 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P5_Replace_Variable]^if  (  ( k == 1 )  ||  ( k == k - 1 )  )  {^176^^^^^164^192^if  (  ( k == 1 )  ||  ( k == n - 1 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P6_Replace_Expression]^if  (  ( k == 1 )  ) {^176^^^^^164^192^if  (  ( k == 1 )  ||  ( k == n - 1 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P6_Replace_Expression]^if  (   ( k == n - 1 )  )  {^176^^^^^164^192^if  (  ( k == 1 )  ||  ( k == n - 1 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P6_Replace_Expression]^if  ( k == 1 )  {^176^^^^^164^192^if  (  ( k == 1 )  ||  ( k == n - 1 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P6_Replace_Expression]^if  ( k == n - 1 )  {^176^^^^^164^192^if  (  ( k == 1 )  ||  ( k == n - 1 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P6_Replace_Expression]^if  ( n - 1 )  {^176^^^^^164^192^if  (  ( k == 1 )  ||  ( k == n - 1 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P8_Replace_Mix]^if  (   ( k == n - 4 )  )  {^176^^^^^164^192^if  (  ( k == 1 )  ||  ( k == n - 1 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P9_Replace_Statement]^if  (  ( n == k )  ||  ( k == 0 )  )  {^176^^^^^164^192^if  (  ( k == 1 )  ||  ( k == n - 1 )  )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P15_Unwrap_Block]^return java.lang.Math.log(((double) (n)));^176^177^178^^^164^192^if  (  ( k == 1 )  ||  ( k == n - 1 )  )  { return Math.log (  ( double ) n ) ; }^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P16_Remove_Block]^^176^177^178^^^164^192^if  (  ( k == 1 )  ||  ( k == n - 1 )  )  { return Math.log (  ( double ) n ) ; }^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P13_Insert_Block]^if  (  ( k == 1 )  ||  ( k ==  ( n - 1 )  )  )  {     return n; }^176^^^^^164^192^[Delete]^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P7_Replace_Invocation]^return Math.floor (  ( double ) n ) ;^177^^^^^164^192^return Math.log (  ( double ) n ) ;^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P7_Replace_Invocation]^return Math .floor ( logSum )  ;^177^^^^^164^192^return Math.log (  ( double ) n ) ;^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P14_Delete_Statement]^^177^^^^^164^192^return Math.log (  ( double ) n ) ;^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P1_Replace_Type]^int logSum = 0;^179^^^^^164^192^double logSum = 0;^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P3_Replace_Literal]^double logSum = -6;^179^^^^^164^192^double logSum = 0;^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P1_Replace_Type]^for  (  short  i = k + 1; i <= n; i++ )  {^182^^^^^164^192^for  ( int i = k + 1; i <= n; i++ )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P2_Replace_Operator]^for  ||  ( int i = k + 1; i <= n; i++ )  {^182^^^^^164^192^for  ( int i = k + 1; i <= n; i++ )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P2_Replace_Operator]^for  ( int i = k + 1; i < n; i++ )  {^182^^^^^164^192^for  ( int i = k + 1; i <= n; i++ )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P2_Replace_Operator]^for  |  ( int i = k + 1; i <= n; i++ )  {^182^^^^^164^192^for  ( int i = k + 1; i <= n; i++ )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P3_Replace_Literal]^for  ( int i = k + i; i <= n; i++ )  {^182^^^^^164^192^for  ( int i = k + 1; i <= n; i++ )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P5_Replace_Variable]^for  ( nnt i = k + 1; i <= n; i++ )  {^182^^^^^164^192^for  ( int i = k + 1; i <= n; i++ )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P5_Replace_Variable]^for  ( int i = k + 1; i <= k; i++ )  {^182^^^^^164^192^for  ( int i = k + 1; i <= n; i++ )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P5_Replace_Variable]^for  ( int i = n + 1; i <= k; i++ )  {^182^^^^^164^192^for  ( int i = k + 1; i <= n; i++ )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P1_Replace_Type]^logSum += Math.log (  ( float ) i ) ;^183^^^^^164^192^logSum += Math.log (  ( double ) i ) ;^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P7_Replace_Invocation]^logSum += Math.floor (  ( double ) i ) ;^183^^^^^164^192^logSum += Math.log (  ( double ) i ) ;^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P7_Replace_Invocation]^logSum += Math .floor ( logSum )  ;^183^^^^^164^192^logSum += Math.log (  ( double ) i ) ;^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P8_Replace_Mix]^logSum +=  Math.log (  ( double ) i ) ;^183^^^^^164^192^logSum += Math.log (  ( double ) i ) ;^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P11_Insert_Donor_Statement]^logSum -= Math.log (  ( double ) i ) ;logSum += Math.log (  ( double ) i ) ;^183^^^^^164^192^logSum += Math.log (  ( double ) i ) ;^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P14_Delete_Statement]^^183^^^^^164^192^logSum += Math.log (  ( double ) i ) ;^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P11_Insert_Donor_Statement]^long result = Math.round ( factorialDouble ( n )  ) ;logSum += Math.log (  ( double ) i ) ;^183^^^^^164^192^logSum += Math.log (  ( double ) i ) ;^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P11_Insert_Donor_Statement]^return Math.log (  ( double ) n ) ;logSum += Math.log (  ( double ) i ) ;^183^^^^^164^192^logSum += Math.log (  ( double ) i ) ;^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P2_Replace_Operator]^for  &  ( int i = k + 1; i <= n; i++ )  {^182^^^^^164^192^for  ( int i = k + 1; i <= n; i++ )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P3_Replace_Literal]^for  ( int i = k ; i <= n; i++ )  {^182^^^^^164^192^for  ( int i = k + 1; i <= n; i++ )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P5_Replace_Variable]^for  ( int i = n + 1; i <= n; i++ )  {^182^^^^^164^192^for  ( int i = k + 1; i <= n; i++ )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P1_Replace_Type]^for  (  long  i = 2; i <= n - k; i++ )  {^187^^^^^164^192^for  ( int i = 2; i <= n - k; i++ )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P2_Replace_Operator]^for  ( int i = 2; i < n - k; i++ )  {^187^^^^^164^192^for  ( int i = 2; i <= n - k; i++ )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P2_Replace_Operator]^for  ( int i = 2; i <= n  ||  k; i++ )  {^187^^^^^164^192^for  ( int i = 2; i <= n - k; i++ )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P2_Replace_Operator]^for  ( int i = 2; i <= n  >=  k; i++ )  {^187^^^^^164^192^for  ( int i = 2; i <= n - k; i++ )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P3_Replace_Literal]^for  ( int i = ; i <= n - k; i++ )  {^187^^^^^164^192^for  ( int i = 2; i <= n - k; i++ )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P5_Replace_Variable]^for  ( nnt i = 2; i <= n - k; i++ )  {^187^^^^^164^192^for  ( int i = 2; i <= n - k; i++ )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P5_Replace_Variable]^for  ( int i = 2; i <= k - k; i++ )  {^187^^^^^164^192^for  ( int i = 2; i <= n - k; i++ )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P5_Replace_Variable]^for  ( int i = 2; i <= n - n; i++ )  {^187^^^^^164^192^for  ( int i = 2; i <= n - k; i++ )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P5_Replace_Variable]^for  ( knt i = 2; i <= n - i; i++ )  {^187^^^^^164^192^for  ( int i = 2; i <= n - k; i++ )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P5_Replace_Variable]^for  ( nnt i = 2; i <= i - k; i++ )  {^187^^^^^164^192^for  ( int i = 2; i <= n - k; i++ )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P5_Replace_Variable]^for  ( int i = 2; i <= k - n; i++ )  {^187^^^^^164^192^for  ( int i = 2; i <= n - k; i++ )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P1_Replace_Type]^logSum -= Math.log (  ( float ) i ) ;^188^^^^^164^192^logSum -= Math.log (  ( double ) i ) ;^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P2_Replace_Operator]^logSum = Math.log (  ( double ) i ) ;^188^^^^^164^192^logSum -= Math.log (  ( double ) i ) ;^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P7_Replace_Invocation]^logSum -= Math.floor (  ( double ) i ) ;^188^^^^^164^192^logSum -= Math.log (  ( double ) i ) ;^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P8_Replace_Mix]^logSum -=  Math.log (  ( double ) i ) ;^188^^^^^164^192^logSum -= Math.log (  ( double ) i ) ;^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P11_Insert_Donor_Statement]^logSum += Math.log (  ( double ) i ) ;logSum -= Math.log (  ( double ) i ) ;^188^^^^^164^192^logSum -= Math.log (  ( double ) i ) ;^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P8_Replace_Mix]^logSum -= Math .floor ( logSum )  ;^188^^^^^164^192^logSum -= Math.log (  ( double ) i ) ;^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P14_Delete_Statement]^^188^^^^^164^192^logSum -= Math.log (  ( double ) i ) ;^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P11_Insert_Donor_Statement]^long result = Math.round ( factorialDouble ( n )  ) ;logSum -= Math.log (  ( double ) i ) ;^188^^^^^164^192^logSum -= Math.log (  ( double ) i ) ;^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P11_Insert_Donor_Statement]^return Math.log (  ( double ) n ) ;logSum -= Math.log (  ( double ) i ) ;^188^^^^^164^192^logSum -= Math.log (  ( double ) i ) ;^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P1_Replace_Type]^logSum -= Math.log (  ( int ) i ) ;^188^^^^^164^192^logSum -= Math.log (  ( double ) i ) ;^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P1_Replace_Type]^for  (  short  i = 2; i <= n - k; i++ )  {^187^^^^^164^192^for  ( int i = 2; i <= n - k; i++ )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P3_Replace_Literal]^for  ( int i = i; i <= n - k; i++ )  {^187^^^^^164^192^for  ( int i = 2; i <= n - k; i++ )  {^[CLASS] MathUtils  [METHOD] binomialCoefficientLog [RETURN_TYPE] double   final int n final int k [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  k  n  double  logSum  
[P2_Replace_Operator]^return  ( Math.exp ( x )  + Math.exp ( -x )  )  + 2.0;^202^^^^^201^203^return  ( Math.exp ( x )  + Math.exp ( -x )  )  / 2.0;^[CLASS] MathUtils  [METHOD] cosh [RETURN_TYPE] double   double x [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  double  x  
[P2_Replace_Operator]^return   instanceof   ( Math.exp ( x )  + Math.exp ( -x )  )  / 2.0;^202^^^^^201^203^return  ( Math.exp ( x )  + Math.exp ( -x )  )  / 2.0;^[CLASS] MathUtils  [METHOD] cosh [RETURN_TYPE] double   double x [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  double  x  
[P3_Replace_Literal]^return  ( Math.exp ( x )  + Math.exp ( -x )  )  / 14.0;^202^^^^^201^203^return  ( Math.exp ( x )  + Math.exp ( -x )  )  / 2.0;^[CLASS] MathUtils  [METHOD] cosh [RETURN_TYPE] double   double x [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  double  x  
[P7_Replace_Invocation]^return  ( Math.ceil ( x )  + Math.exp ( -x )  )  / 2.0;^202^^^^^201^203^return  ( Math.exp ( x )  + Math.exp ( -x )  )  / 2.0;^[CLASS] MathUtils  [METHOD] cosh [RETURN_TYPE] double   double x [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  double  x  
[P7_Replace_Invocation]^return  ( Math .ceil ( x )   + Math^202^^^^^201^203^return  ( Math.exp ( x )  + Math.exp ( -x )  )  / 2.0;^[CLASS] MathUtils  [METHOD] cosh [RETURN_TYPE] double   double x [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  double  x  
[P14_Delete_Statement]^^202^^^^^201^203^return  ( Math.exp ( x )  + Math.exp ( -x )  )  / 2.0;^[CLASS] MathUtils  [METHOD] cosh [RETURN_TYPE] double   double x [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  double  x  
[P2_Replace_Operator]^return  (  ( Double.isNaN ( x )  && Double.isNaN ( y )  )  && x == y ) ;^214^^^^^213^215^return  (  ( Double.isNaN ( x )  && Double.isNaN ( y )  )  || x == y ) ;^[CLASS] MathUtils  [METHOD] equals [RETURN_TYPE] boolean   double x double y [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  double  x  y  
[P2_Replace_Operator]^return  (  ( Double.isNaN ( x )  || Double.isNaN ( y )  )  || x == y ) ;^214^^^^^213^215^return  (  ( Double.isNaN ( x )  && Double.isNaN ( y )  )  || x == y ) ;^[CLASS] MathUtils  [METHOD] equals [RETURN_TYPE] boolean   double x double y [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  double  x  y  
[P2_Replace_Operator]^return  (  ( Double.isNaN ( x )  && Double.isNaN ( y )  )  || x <= y ) ;^214^^^^^213^215^return  (  ( Double.isNaN ( x )  && Double.isNaN ( y )  )  || x == y ) ;^[CLASS] MathUtils  [METHOD] equals [RETURN_TYPE] boolean   double x double y [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  double  x  y  
[P5_Replace_Variable]^return  (  ( Double.isNaN ( y )  && Double.isNaN ( x )  )  || x == y ) ;^214^^^^^213^215^return  (  ( Double.isNaN ( x )  && Double.isNaN ( y )  )  || x == y ) ;^[CLASS] MathUtils  [METHOD] equals [RETURN_TYPE] boolean   double x double y [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  double  x  y  
[P7_Replace_Invocation]^return  (  ( Double.doubleToLongBits ( x )  && Double.isNaN ( y )  )  || x == y ) ;^214^^^^^213^215^return  (  ( Double.isNaN ( x )  && Double.isNaN ( y )  )  || x == y ) ;^[CLASS] MathUtils  [METHOD] equals [RETURN_TYPE] boolean   double x double y [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  double  x  y  
[P7_Replace_Invocation]^return  (  ( Double .doubleToLongBits ( x )   && Double^214^^^^^213^215^return  (  ( Double.isNaN ( x )  && Double.isNaN ( y )  )  || x == y ) ;^[CLASS] MathUtils  [METHOD] equals [RETURN_TYPE] boolean   double x double y [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  double  x  y  
[P5_Replace_Variable]^return  (  ( Double.isNaN ( y )  && Double.isNaN ( y )  )  || x == y ) ;^214^^^^^213^215^return  (  ( Double.isNaN ( x )  && Double.isNaN ( y )  )  || x == y ) ;^[CLASS] MathUtils  [METHOD] equals [RETURN_TYPE] boolean   double x double y [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  double  x  y  
[P14_Delete_Statement]^^214^^^^^213^215^return  (  ( Double.isNaN ( x )  && Double.isNaN ( y )  )  || x == y ) ;^[CLASS] MathUtils  [METHOD] equals [RETURN_TYPE] boolean   double x double y [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  double  x  y  
[P5_Replace_Variable]^return  (  ( Double.isNaN ( x )  && Double.isNaN ( x )  )  || x == y ) ;^214^^^^^213^215^return  (  ( Double.isNaN ( x )  && Double.isNaN ( y )  )  || x == y ) ;^[CLASS] MathUtils  [METHOD] equals [RETURN_TYPE] boolean   double x double y [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  double  x  y  
[P8_Replace_Mix]^return  (  ( Double.doubleToLongBits ( x )  && Double.isNaN ( x )  )  || x == y ) ;^214^^^^^213^215^return  (  ( Double.isNaN ( x )  && Double.isNaN ( y )  )  || x == y ) ;^[CLASS] MathUtils  [METHOD] equals [RETURN_TYPE] boolean   double x double y [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  double  x  y  
[P1_Replace_Type]^int  result = Math.round ( factorialDouble ( n )  ) ;^240^^^^^239^246^long result = Math.round ( factorialDouble ( n )  ) ;^[CLASS] MathUtils  [METHOD] factorial [RETURN_TYPE] long   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  n  long  result  
[P7_Replace_Invocation]^long result = Math.log ( factorialDouble ( n )  ) ;^240^^^^^239^246^long result = Math.round ( factorialDouble ( n )  ) ;^[CLASS] MathUtils  [METHOD] factorial [RETURN_TYPE] long   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  n  long  result  
[P7_Replace_Invocation]^long result = Math.round ( factorialLog ( n )  ) ;^240^^^^^239^246^long result = Math.round ( factorialDouble ( n )  ) ;^[CLASS] MathUtils  [METHOD] factorial [RETURN_TYPE] long   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  n  long  result  
[P11_Insert_Donor_Statement]^long result = Math.round ( binomialCoefficientDouble ( n, k )  ) ;long result = Math.round ( factorialDouble ( n )  ) ;^240^^^^^239^246^long result = Math.round ( factorialDouble ( n )  ) ;^[CLASS] MathUtils  [METHOD] factorial [RETURN_TYPE] long   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  n  long  result  
[P14_Delete_Statement]^^240^^^^^239^246^long result = Math.round ( factorialDouble ( n )  ) ;^[CLASS] MathUtils  [METHOD] factorial [RETURN_TYPE] long   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  n  long  result  
[P11_Insert_Donor_Statement]^logSum -= Math.log (  ( double ) i ) ;long result = Math.round ( factorialDouble ( n )  ) ;^240^^^^^239^246^long result = Math.round ( factorialDouble ( n )  ) ;^[CLASS] MathUtils  [METHOD] factorial [RETURN_TYPE] long   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  n  long  result  
[P11_Insert_Donor_Statement]^logSum += Math.log (  ( double ) i ) ;long result = Math.round ( factorialDouble ( n )  ) ;^240^^^^^239^246^long result = Math.round ( factorialDouble ( n )  ) ;^[CLASS] MathUtils  [METHOD] factorial [RETURN_TYPE] long   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  n  long  result  
[P2_Replace_Operator]^if  ( result <= Long.MAX_VALUE )  {^241^^^^^239^246^if  ( result == Long.MAX_VALUE )  {^[CLASS] MathUtils  [METHOD] factorial [RETURN_TYPE] long   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  n  long  result  
[P15_Unwrap_Block]^throw new java.lang.ArithmeticException("result too large to represent in a long integer");^241^242^243^244^^239^246^if  ( result == Long.MAX_VALUE )  { throw new ArithmeticException ( "result too large to represent in a long integer" ) ; }^[CLASS] MathUtils  [METHOD] factorial [RETURN_TYPE] long   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  n  long  result  
[P16_Remove_Block]^^241^242^243^244^^239^246^if  ( result == Long.MAX_VALUE )  { throw new ArithmeticException ( "result too large to represent in a long integer" ) ; }^[CLASS] MathUtils  [METHOD] factorial [RETURN_TYPE] long   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  n  long  result  
[P13_Insert_Block]^if  ( unscaled !=  ( floor ( unscaled )  )  )  {     throw new ArithmeticException ( "Inexact result from rounding" ) ; }^241^^^^^239^246^[Delete]^[CLASS] MathUtils  [METHOD] factorial [RETURN_TYPE] long   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  n  long  result  
[P3_Replace_Literal]^throw new ArithmeticException ( " long iesult too large to represent in a long integer" ) ;^242^243^^^^239^246^throw new ArithmeticException ( "result too large to represent in a long integer" ) ;^[CLASS] MathUtils  [METHOD] factorial [RETURN_TYPE] long   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  n  long  result  
[P13_Insert_Block]^if  ( result ==  ( MAX_VALUE )  )  {     throw new ArithmeticException ( "result too large to represent in a long integer" ) ; }^242^^^^^239^246^[Delete]^[CLASS] MathUtils  [METHOD] factorial [RETURN_TYPE] long   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  n  long  result  
[P3_Replace_Literal]^throw new ArithmeticException ( "o" ) ;^242^243^^^^239^246^throw new ArithmeticException ( "result too large to represent in a long integer" ) ;^[CLASS] MathUtils  [METHOD] factorial [RETURN_TYPE] long   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  n  long  result  
[P3_Replace_Literal]^throw new ArithmeticException ( "t toesult too large to represent in a long integer" ) ;^242^243^^^^239^246^throw new ArithmeticException ( "result too large to represent in a long integer" ) ;^[CLASS] MathUtils  [METHOD] factorial [RETURN_TYPE] long   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  n  long  result  
[P3_Replace_Literal]^throw new ArithmeticException ( "esult too large to represent in a long integer" ) ;^242^243^^^^239^246^throw new ArithmeticException ( "result too large to represent in a long integer" ) ;^[CLASS] MathUtils  [METHOD] factorial [RETURN_TYPE] long   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  n  long  result  
[P2_Replace_Operator]^if  ( n > 0 )  {^269^^^^^268^273^if  ( n < 0 )  {^[CLASS] MathUtils  [METHOD] factorialDouble [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  n  
[P3_Replace_Literal]^if  ( n < n )  {^269^^^^^268^273^if  ( n < 0 )  {^[CLASS] MathUtils  [METHOD] factorialDouble [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  n  
[P8_Replace_Mix]^if  ( n < 3 )  {^269^^^^^268^273^if  ( n < 0 )  {^[CLASS] MathUtils  [METHOD] factorialDouble [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  n  
[P9_Replace_Statement]^if  ( u * v == 0 )  {^269^^^^^268^273^if  ( n < 0 )  {^[CLASS] MathUtils  [METHOD] factorialDouble [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  n  
[P9_Replace_Statement]^if  ( t > 0 )  {^269^^^^^268^273^if  ( n < 0 )  {^[CLASS] MathUtils  [METHOD] factorialDouble [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  n  
[P9_Replace_Statement]^if  ( u > 0 )  {^269^^^^^268^273^if  ( n < 0 )  {^[CLASS] MathUtils  [METHOD] factorialDouble [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  n  
[P9_Replace_Statement]^if  ( v > 0 )  {^269^^^^^268^273^if  ( n < 0 )  {^[CLASS] MathUtils  [METHOD] factorialDouble [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  n  
[P9_Replace_Statement]^if  ( n < k )  {^269^^^^^268^273^if  ( n < 0 )  {^[CLASS] MathUtils  [METHOD] factorialDouble [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  n  
[P9_Replace_Statement]^if  ( sign == -1 )  {^269^^^^^268^273^if  ( n < 0 )  {^[CLASS] MathUtils  [METHOD] factorialDouble [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  n  
[P9_Replace_Statement]^if  ( k == 31 )  {^269^^^^^268^273^if  ( n < 0 )  {^[CLASS] MathUtils  [METHOD] factorialDouble [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  n  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("must have n >= 0 for n!");^269^270^271^^^268^273^if  ( n < 0 )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] MathUtils  [METHOD] factorialDouble [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  n  
[P16_Remove_Block]^^269^270^271^^^268^273^if  ( n < 0 )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] MathUtils  [METHOD] factorialDouble [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  n  
[P13_Insert_Block]^if  ( k == 31 )  {     throw new ArithmeticException ( "overflow: gcd is 2^31" ) ; }^269^^^^^268^273^[Delete]^[CLASS] MathUtils  [METHOD] factorialDouble [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  n  
[P13_Insert_Block]^if  ( n < 0 )  {     throw new IllegalArgumentException ( "must have n > 0 for n!" ) ; }^269^^^^^268^273^[Delete]^[CLASS] MathUtils  [METHOD] factorialDouble [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  n  
[P13_Insert_Block]^if  ( n < k )  {     throw new IllegalArgumentException ( "must have n >= k for binomial coefficient  ( n,k ) " ) ; }^269^^^^^268^273^[Delete]^[CLASS] MathUtils  [METHOD] factorialDouble [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  n  
[P13_Insert_Block]^if  ( n < 0 )  {     throw new IllegalArgumentException ( "must have n >= 0 for binomial coefficient  ( n,k ) " ) ; }^269^^^^^268^273^[Delete]^[CLASS] MathUtils  [METHOD] factorialDouble [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  n  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "must have n > 0 for n!" )   ;^270^^^^^268^273^throw new IllegalArgumentException  (" ")  ;^[CLASS] MathUtils  [METHOD] factorialDouble [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  n  
[P13_Insert_Block]^if  ( n < 0 )  {     throw new IllegalArgumentException ( "must have n > 0 for n!" ) ; }^270^^^^^268^273^[Delete]^[CLASS] MathUtils  [METHOD] factorialDouble [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  n  
[P13_Insert_Block]^if  ( n < k )  {     throw new IllegalArgumentException ( "must have n >= k for binomial coefficient  ( n,k ) " ) ; }^270^^^^^268^273^[Delete]^[CLASS] MathUtils  [METHOD] factorialDouble [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  n  
[P13_Insert_Block]^if  ( n < 0 )  {     throw new IllegalArgumentException ( "must have n >= 0 for binomial coefficient  ( n,k ) " ) ; }^270^^^^^268^273^[Delete]^[CLASS] MathUtils  [METHOD] factorialDouble [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  n  
[P13_Insert_Block]^if  ( n < 0 )  {     throw new IllegalArgumentException ( "must have n >= 0 for n!" ) ; }^270^^^^^268^273^[Delete]^[CLASS] MathUtils  [METHOD] factorialDouble [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  n  
[P11_Insert_Donor_Statement]^throw new ArithmeticException  (" ")  ;throw new IllegalArgumentException  (" ")  ;^270^^^^^268^273^throw new IllegalArgumentException  (" ")  ;^[CLASS] MathUtils  [METHOD] factorialDouble [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  n  
[P8_Replace_Mix]^throw new IllegalArgumentException ( "must have n >= 0 for binomial coefficient  ( n,k ) " ) ; ;^270^^^^^268^273^throw new IllegalArgumentException  (" ")  ;^[CLASS] MathUtils  [METHOD] factorialDouble [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  n  
[P2_Replace_Operator]^return Math.floor ( Math.exp ( factorialLog ( n )  )    instanceof   0.5 ) ;^272^^^^^268^273^return Math.floor ( Math.exp ( factorialLog ( n )  )  + 0.5 ) ;^[CLASS] MathUtils  [METHOD] factorialDouble [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  n  
[P3_Replace_Literal]^return Math.floor ( Math.exp ( factorialLog ( n )  )  + 0.05555555555555555 ) ;^272^^^^^268^273^return Math.floor ( Math.exp ( factorialLog ( n )  )  + 0.5 ) ;^[CLASS] MathUtils  [METHOD] factorialDouble [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  n  
[P7_Replace_Invocation]^return Math.pow ( Math.exp ( factorialLog ( n )  )  + 0.5 ) ;^272^^^^^268^273^return Math.floor ( Math.exp ( factorialLog ( n )  )  + 0.5 ) ;^[CLASS] MathUtils  [METHOD] factorialDouble [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  n  
[P7_Replace_Invocation]^return Math.floor ( Math.ceil ( factorialLog ( n )  )  + 0.5 ) ;^272^^^^^268^273^return Math.floor ( Math.exp ( factorialLog ( n )  )  + 0.5 ) ;^[CLASS] MathUtils  [METHOD] factorialDouble [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  n  
[P7_Replace_Invocation]^return Math.floor ( Math.exp ( factorial ( n )  )  + 0.5 ) ;^272^^^^^268^273^return Math.floor ( Math.exp ( factorialLog ( n )  )  + 0.5 ) ;^[CLASS] MathUtils  [METHOD] factorialDouble [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  n  
[P8_Replace_Mix]^return Math.floor ( Math.ceil ( factorialLog ( n )  )   |  0.5 ) ;^272^^^^^268^273^return Math.floor ( Math.exp ( factorialLog ( n )  )  + 0.5 ) ;^[CLASS] MathUtils  [METHOD] factorialDouble [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  n  
[P2_Replace_Operator]^return Math.floor ( Math.exp ( factorialLog ( n )  )   |  0.5 ) ;^272^^^^^268^273^return Math.floor ( Math.exp ( factorialLog ( n )  )  + 0.5 ) ;^[CLASS] MathUtils  [METHOD] factorialDouble [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  n  
[P3_Replace_Literal]^return Math.floor ( Math.exp ( factorialLog ( n )  )  + 3.0 ) ;^272^^^^^268^273^return Math.floor ( Math.exp ( factorialLog ( n )  )  + 0.5 ) ;^[CLASS] MathUtils  [METHOD] factorialDouble [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  n  
[P14_Delete_Statement]^^272^^^^^268^273^return Math.floor ( Math.exp ( factorialLog ( n )  )  + 0.5 ) ;^[CLASS] MathUtils  [METHOD] factorialDouble [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  n  
[P2_Replace_Operator]^if  ( n <= 0 )  {^289^^^^^288^297^if  ( n < 0 )  {^[CLASS] MathUtils  [METHOD] factorialLog [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  n  double  logSum  
[P3_Replace_Literal]^if  ( n < i )  {^289^^^^^288^297^if  ( n < 0 )  {^[CLASS] MathUtils  [METHOD] factorialLog [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  n  double  logSum  
[P5_Replace_Variable]^if  ( i < 0 )  {^289^^^^^288^297^if  ( n < 0 )  {^[CLASS] MathUtils  [METHOD] factorialLog [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  n  double  logSum  
[P8_Replace_Mix]^if  ( n < 3 )  {^289^^^^^288^297^if  ( n < 0 )  {^[CLASS] MathUtils  [METHOD] factorialLog [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  n  double  logSum  
[P9_Replace_Statement]^if  ( u * v == 0 )  {^289^^^^^288^297^if  ( n < 0 )  {^[CLASS] MathUtils  [METHOD] factorialLog [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  n  double  logSum  
[P9_Replace_Statement]^if  ( t > 0 )  {^289^^^^^288^297^if  ( n < 0 )  {^[CLASS] MathUtils  [METHOD] factorialLog [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  n  double  logSum  
[P9_Replace_Statement]^if  ( u > 0 )  {^289^^^^^288^297^if  ( n < 0 )  {^[CLASS] MathUtils  [METHOD] factorialLog [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  n  double  logSum  
[P9_Replace_Statement]^if  ( v > 0 )  {^289^^^^^288^297^if  ( n < 0 )  {^[CLASS] MathUtils  [METHOD] factorialLog [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  n  double  logSum  
[P9_Replace_Statement]^if  ( n < k )  {^289^^^^^288^297^if  ( n < 0 )  {^[CLASS] MathUtils  [METHOD] factorialLog [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  n  double  logSum  
[P9_Replace_Statement]^if  ( sign == -1 )  {^289^^^^^288^297^if  ( n < 0 )  {^[CLASS] MathUtils  [METHOD] factorialLog [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  n  double  logSum  
[P9_Replace_Statement]^if  ( k == 31 )  {^289^^^^^288^297^if  ( n < 0 )  {^[CLASS] MathUtils  [METHOD] factorialLog [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  n  double  logSum  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("must have n > 0 for n!");^289^290^291^^^288^297^if  ( n < 0 )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] MathUtils  [METHOD] factorialLog [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  n  double  logSum  
[P16_Remove_Block]^^289^290^291^^^288^297^if  ( n < 0 )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] MathUtils  [METHOD] factorialLog [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  n  double  logSum  
[P13_Insert_Block]^if  ( k == 31 )  {     throw new ArithmeticException ( "overflow: gcd is 2^31" ) ; }^289^^^^^288^297^[Delete]^[CLASS] MathUtils  [METHOD] factorialLog [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  n  double  logSum  
[P13_Insert_Block]^if  ( n < k )  {     throw new IllegalArgumentException ( "must have n >= k for binomial coefficient  ( n,k ) " ) ; }^289^^^^^288^297^[Delete]^[CLASS] MathUtils  [METHOD] factorialLog [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  n  double  logSum  
[P13_Insert_Block]^if  ( n < 0 )  {     throw new IllegalArgumentException ( "must have n >= 0 for binomial coefficient  ( n,k ) " ) ; }^289^^^^^288^297^[Delete]^[CLASS] MathUtils  [METHOD] factorialLog [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  n  double  logSum  
[P13_Insert_Block]^if  ( n < 0 )  {     throw new IllegalArgumentException ( "must have n >= 0 for n!" ) ; }^289^^^^^288^297^[Delete]^[CLASS] MathUtils  [METHOD] factorialLog [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  n  double  logSum  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "must have n >= 0 for binomial coefficient  ( n,k ) " )   ;^290^^^^^288^297^throw new IllegalArgumentException  (" ")  ;^[CLASS] MathUtils  [METHOD] factorialLog [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  n  double  logSum  
[P13_Insert_Block]^if  ( n < 0 )  {     throw new IllegalArgumentException ( "must have n > 0 for n!" ) ; }^290^^^^^288^297^[Delete]^[CLASS] MathUtils  [METHOD] factorialLog [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  n  double  logSum  
[P13_Insert_Block]^if  ( n < k )  {     throw new IllegalArgumentException ( "must have n >= k for binomial coefficient  ( n,k ) " ) ; }^290^^^^^288^297^[Delete]^[CLASS] MathUtils  [METHOD] factorialLog [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  n  double  logSum  
[P13_Insert_Block]^if  ( n < 0 )  {     throw new IllegalArgumentException ( "must have n >= 0 for binomial coefficient  ( n,k ) " ) ; }^290^^^^^288^297^[Delete]^[CLASS] MathUtils  [METHOD] factorialLog [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  n  double  logSum  
[P13_Insert_Block]^if  ( n < 0 )  {     throw new IllegalArgumentException ( "must have n >= 0 for n!" ) ; }^290^^^^^288^297^[Delete]^[CLASS] MathUtils  [METHOD] factorialLog [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  n  double  logSum  
[P11_Insert_Donor_Statement]^throw new ArithmeticException  (" ")  ;throw new IllegalArgumentException  (" ")  ;^290^^^^^288^297^throw new IllegalArgumentException  (" ")  ;^[CLASS] MathUtils  [METHOD] factorialLog [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  n  double  logSum  
[P1_Replace_Type]^int logSum = 0;^292^^^^^288^297^double logSum = 0;^[CLASS] MathUtils  [METHOD] factorialLog [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  n  double  logSum  
[P3_Replace_Literal]^double logSum = 3;^292^^^^^288^297^double logSum = 0;^[CLASS] MathUtils  [METHOD] factorialLog [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  n  double  logSum  
[P1_Replace_Type]^for  (  short  i = 2; i <= n; i++ )  {^293^^^^^288^297^for  ( int i = 2; i <= n; i++ )  {^[CLASS] MathUtils  [METHOD] factorialLog [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  n  double  logSum  
[P2_Replace_Operator]^for  ( int i = 2; i < n; i++ )  {^293^^^^^288^297^for  ( int i = 2; i <= n; i++ )  {^[CLASS] MathUtils  [METHOD] factorialLog [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  n  double  logSum  
[P2_Replace_Operator]^for  ||  ( int i = 2; i <= n; i++ )  {^293^^^^^288^297^for  ( int i = 2; i <= n; i++ )  {^[CLASS] MathUtils  [METHOD] factorialLog [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  n  double  logSum  
[P3_Replace_Literal]^for  ( int i = -1; i <= n; i++ )  {^293^^^^^288^297^for  ( int i = 2; i <= n; i++ )  {^[CLASS] MathUtils  [METHOD] factorialLog [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  n  double  logSum  
[P5_Replace_Variable]^for  ( nnt i = 2; i <= n; i++ )  {^293^^^^^288^297^for  ( int i = 2; i <= n; i++ )  {^[CLASS] MathUtils  [METHOD] factorialLog [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  n  double  logSum  
[P5_Replace_Variable]^for  ( nnt i = 2; i <= i; i++ )  {^293^^^^^288^297^for  ( int i = 2; i <= n; i++ )  {^[CLASS] MathUtils  [METHOD] factorialLog [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  n  double  logSum  
[P1_Replace_Type]^logSum += Math.log (  ( int ) i ) ;^294^^^^^288^297^logSum += Math.log (  ( double ) i ) ;^[CLASS] MathUtils  [METHOD] factorialLog [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  n  double  logSum  
[P7_Replace_Invocation]^logSum += Math.floor (  ( double ) i ) ;^294^^^^^288^297^logSum += Math.log (  ( double ) i ) ;^[CLASS] MathUtils  [METHOD] factorialLog [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  n  double  logSum  
[P8_Replace_Mix]^logSum +=  Math.log (  ( double ) i ) ;^294^^^^^288^297^logSum += Math.log (  ( double ) i ) ;^[CLASS] MathUtils  [METHOD] factorialLog [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  n  double  logSum  
[P11_Insert_Donor_Statement]^logSum -= Math.log (  ( double ) i ) ;logSum += Math.log (  ( double ) i ) ;^294^^^^^288^297^logSum += Math.log (  ( double ) i ) ;^[CLASS] MathUtils  [METHOD] factorialLog [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  n  double  logSum  
[P8_Replace_Mix]^logSum += Math .floor ( logSum )  ;^294^^^^^288^297^logSum += Math.log (  ( double ) i ) ;^[CLASS] MathUtils  [METHOD] factorialLog [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  n  double  logSum  
[P14_Delete_Statement]^^294^^^^^288^297^logSum += Math.log (  ( double ) i ) ;^[CLASS] MathUtils  [METHOD] factorialLog [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  n  double  logSum  
[P11_Insert_Donor_Statement]^long result = Math.round ( factorialDouble ( n )  ) ;logSum += Math.log (  ( double ) i ) ;^294^^^^^288^297^logSum += Math.log (  ( double ) i ) ;^[CLASS] MathUtils  [METHOD] factorialLog [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  n  double  logSum  
[P11_Insert_Donor_Statement]^return Math.log (  ( double ) n ) ;logSum += Math.log (  ( double ) i ) ;^294^^^^^288^297^logSum += Math.log (  ( double ) i ) ;^[CLASS] MathUtils  [METHOD] factorialLog [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  n  double  logSum  
[P3_Replace_Literal]^for  ( int i = 8; i <= n; i++ )  {^293^^^^^288^297^for  ( int i = 2; i <= n; i++ )  {^[CLASS] MathUtils  [METHOD] factorialLog [RETURN_TYPE] double   final int n [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  i  n  double  logSum  
[P2_Replace_Operator]^if  ( u * v <= 0 )  {^313^^^^^298^328^if  ( u * v == 0 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P2_Replace_Operator]^if  ( u + v == 0 )  {^313^^^^^298^328^if  ( u * v == 0 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P3_Replace_Literal]^if  ( u * v == 9 )  {^313^^^^^298^328^if  ( u * v == 0 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P5_Replace_Variable]^if  ( t * v == 0 )  {^313^^^^^298^328^if  ( u * v == 0 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P5_Replace_Variable]^if  ( u * t == 0 )  {^313^^^^^298^328^if  ( u * v == 0 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P5_Replace_Variable]^if  ( v * u == 0 )  {^313^^^^^298^328^if  ( u * v == 0 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P6_Replace_Expression]^if  ( u * v )  {^313^^^^^298^328^if  ( u * v == 0 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P2_Replace_Operator]^if  ( u == 0 && v == 0 )  {^313^^^^^298^328^if  ( u * v == 0 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v 
[P2_Replace_Operator]^if  ( u == 0 || v == 0 )  {^313^^^^^298^328^if  ( u * v == 0 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v 
[P6_Replace_Expression]^if  ( abs(u) * abs(v) == 0)  {^313^^^^^298^328^if  ( u * v == 0 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P6_Replace_Expression]^if  ( abs(u) == 0 || abs(v) == 0)  {^313^^^^^298^328^if  ( u * v == 0 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P8_Replace_Mix]^if  ( u * v == 2 )  {^313^^^^^298^328^if  ( u * v == 0 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P9_Replace_Statement]^if  ( t > 0 )  {^313^^^^^298^328^if  ( u * v == 0 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P9_Replace_Statement]^if  ( u > 0 )  {^313^^^^^298^328^if  ( u * v == 0 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P9_Replace_Statement]^if  ( n < 0 )  {^313^^^^^298^328^if  ( u * v == 0 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P9_Replace_Statement]^if  ( v > 0 )  {^313^^^^^298^328^if  ( u * v == 0 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P9_Replace_Statement]^if  ( sign == -1 )  {^313^^^^^298^328^if  ( u * v == 0 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P9_Replace_Statement]^if  ( k == 31 )  {^313^^^^^298^328^if  ( u * v == 0 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P15_Unwrap_Block]^return (java.lang.Math.abs(u)) + (java.lang.Math.abs(v));^313^314^315^^^298^328^if  ( u * v == 0 )  { return  ( Math.abs ( u )  + Math.abs ( v )  ) ; }^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P16_Remove_Block]^^313^314^315^^^298^328^if  ( u * v == 0 )  { return  ( Math.abs ( u )  + Math.abs ( v )  ) ; }^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P2_Replace_Operator]^return  <=  ( Math.abs ( u )  + Math.abs ( v )  ) ;^314^^^^^299^329^return  ( Math.abs ( u )  + Math.abs ( v )  ) ;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P5_Replace_Variable]^return  ( Math.abs ( t )  + Math.abs ( v )  ) ;^314^^^^^299^329^return  ( Math.abs ( u )  + Math.abs ( v )  ) ;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P5_Replace_Variable]^return  ( Math.abs ( u )  + Math.abs ( t )  ) ;^314^^^^^299^329^return  ( Math.abs ( u )  + Math.abs ( v )  ) ;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P5_Replace_Variable]^return  ( Math.abs ( v )  + Math.abs ( u )  ) ;^314^^^^^299^329^return  ( Math.abs ( u )  + Math.abs ( v )  ) ;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P13_Insert_Block]^if  (  ( u * v )  == 0 )  {     return  ( abs ( u )  )  +  ( abs ( v )  ) ; }^314^^^^^299^329^[Delete]^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P5_Replace_Variable]^return  ( Math.abs ( v )  + Math.abs ( v )  ) ;^314^^^^^299^329^return  ( Math.abs ( u )  + Math.abs ( v )  ) ;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P14_Delete_Statement]^^314^^^^^299^329^return  ( Math.abs ( u )  + Math.abs ( v )  ) ;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P5_Replace_Variable]^return  ( Math.abs ( u )  + Math.abs ( u )  ) ;^314^^^^^299^329^return  ( Math.abs ( u )  + Math.abs ( v )  ) ;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P2_Replace_Operator]^return  !=  ( Math.abs ( u )  + Math.abs ( v )  ) ;^314^^^^^299^329^return  ( Math.abs ( u )  + Math.abs ( v )  ) ;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P2_Replace_Operator]^if  ( u >= 0 )  {^321^^^^^306^336^if  ( u > 0 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P3_Replace_Literal]^if  ( u > k )  {^321^^^^^306^336^if  ( u > 0 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P5_Replace_Variable]^if  ( v > 0 )  {^321^^^^^306^336^if  ( u > 0 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P8_Replace_Mix]^if  ( u > 0 - 2 )  {^321^^^^^306^336^if  ( u > 0 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P9_Replace_Statement]^if  ( u * v == 0 )  {^321^^^^^306^336^if  ( u > 0 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P9_Replace_Statement]^if  ( t > 0 )  {^321^^^^^306^336^if  ( u > 0 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P9_Replace_Statement]^if  ( n < 0 )  {^321^^^^^306^336^if  ( u > 0 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P9_Replace_Statement]^if  ( n < k )  {^321^^^^^306^336^if  ( u > 0 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P9_Replace_Statement]^if  ( k == 31 )  {^321^^^^^306^336^if  ( u > 0 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P15_Unwrap_Block]^u = -u;^321^322^323^^^306^336^if  ( u > 0 )  { u = -u; }^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P16_Remove_Block]^^321^322^323^^^306^336^if  ( u > 0 )  { u = -u; }^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P13_Insert_Block]^if  ( t > 0 )  {     u = -t; }else {     v = t; }^321^^^^^306^336^[Delete]^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P13_Insert_Block]^if  ( v > 0 )  {     v = -v; }^321^^^^^306^336^[Delete]^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P5_Replace_Variable]^v = -u;^322^^^^^307^337^u = -u;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P8_Replace_Mix]^u =  -v;^322^^^^^307^337^u = -u;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P11_Insert_Donor_Statement]^v = -v;u = -u;^322^^^^^307^337^u = -u;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P11_Insert_Donor_Statement]^u /= 2;u = -u;^322^^^^^307^337^u = -u;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P11_Insert_Donor_Statement]^u = -t;u = -u;^322^^^^^307^337^u = -u;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P11_Insert_Donor_Statement]^v = t;u = -u;^322^^^^^307^337^u = -u;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P2_Replace_Operator]^if  ( v >= 0 )  {^324^^^^^309^339^if  ( v > 0 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P3_Replace_Literal]^if  ( v > k )  {^324^^^^^309^339^if  ( v > 0 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P5_Replace_Variable]^if  ( u > 0 )  {^324^^^^^309^339^if  ( v > 0 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P8_Replace_Mix]^if  ( v > 2 )  {^324^^^^^309^339^if  ( v > 0 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P9_Replace_Statement]^if  ( u * v == 0 )  {^324^^^^^309^339^if  ( v > 0 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P9_Replace_Statement]^if  ( t > 0 )  {^324^^^^^309^339^if  ( v > 0 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P9_Replace_Statement]^if  ( n < 0 )  {^324^^^^^309^339^if  ( v > 0 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P9_Replace_Statement]^if  ( n < k )  {^324^^^^^309^339^if  ( v > 0 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P9_Replace_Statement]^if  ( k == 31 )  {^324^^^^^309^339^if  ( v > 0 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P15_Unwrap_Block]^v = -v;^324^325^326^^^309^339^if  ( v > 0 )  { v = -v; }^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P16_Remove_Block]^^324^325^326^^^309^339^if  ( v > 0 )  { v = -v; }^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P13_Insert_Block]^if  ( u > 0 )  {     u = -u; }^324^^^^^309^339^[Delete]^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P13_Insert_Block]^if  ( t > 0 )  {     u = -t; }else {     v = t; }^324^^^^^309^339^[Delete]^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P5_Replace_Variable]^u = -v;^325^^^^^310^340^v = -v;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P8_Replace_Mix]^v =  -u;^325^^^^^310^340^v = -v;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P11_Insert_Donor_Statement]^u = -t;v = -v;^325^^^^^310^340^v = -v;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P11_Insert_Donor_Statement]^u = -u;v = -v;^325^^^^^310^340^v = -v;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P11_Insert_Donor_Statement]^v /= 2;v = -v;^325^^^^^310^340^v = -v;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P11_Insert_Donor_Statement]^v = t;v = -v;^325^^^^^310^340^v = -v;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P1_Replace_Type]^short  k = 0;^328^^^^^313^343^int k = 0;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P3_Replace_Literal]^int k = u;^328^^^^^313^343^int k = 0;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P2_Replace_Operator]^while  (  ( u & 1 )  == 0 ||  ( v & 1 )  == 0 && k < 31 )  {^329^^^^^314^344^while  (  ( u & 1 )  == 0 &&  ( v & 1 )  == 0 && k < 31 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P2_Replace_Operator]^while  (  ( u & 1 )  != 0 &&  ( v & 1 )  == 0 && k < 31 )  {^329^^^^^314^344^while  (  ( u & 1 )  == 0 &&  ( v & 1 )  == 0 && k < 31 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P2_Replace_Operator]^while  (  ( u   instanceof   1 )  == 0 &&  ( v & 1 )  == 0 && k < 31 )  {^329^^^^^314^344^while  (  ( u & 1 )  == 0 &&  ( v & 1 )  == 0 && k < 31 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P2_Replace_Operator]^while  (  ( u  ^  1 )  == 0 &&  ( v & 1 )  == 0 && k < 31 )  {^329^^^^^314^344^while  (  ( u & 1 )  == 0 &&  ( v & 1 )  == 0 && k < 31 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P2_Replace_Operator]^while  (  ( u & 1 )  == 0 &&  ( v & 1 )  == 0 && k <= 31 )  {^329^^^^^314^344^while  (  ( u & 1 )  == 0 &&  ( v & 1 )  == 0 && k < 31 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P3_Replace_Literal]^while  (  ( u & -6 )  == 0 &&  ( v & -6 )  == 0 && k < 3-6 )  {^329^^^^^314^344^while  (  ( u & 1 )  == 0 &&  ( v & 1 )  == 0 && k < 31 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P3_Replace_Literal]^while  (  ( u & -4 )  == 0 &&  ( v & -4 )  == 0 && k < 3-4 )  {^329^^^^^314^344^while  (  ( u & 1 )  == 0 &&  ( v & 1 )  == 0 && k < 31 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P3_Replace_Literal]^while  (  ( u & 1 )  == k &&  ( v & 1 )  == k && k < 31 )  {^329^^^^^314^344^while  (  ( u & 1 )  == 0 &&  ( v & 1 )  == 0 && k < 31 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P3_Replace_Literal]^while  (  ( u & 1 )  == 0 &&  ( v & 1 )  == 0 && k < 38 )  {^329^^^^^314^344^while  (  ( u & 1 )  == 0 &&  ( v & 1 )  == 0 && k < 31 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P5_Replace_Variable]^while  (  ( v & 1 )  == 0 &&  ( v & 1 )  == 0 && k < 31 )  {^329^^^^^314^344^while  (  ( u & 1 )  == 0 &&  ( v & 1 )  == 0 && k < 31 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P5_Replace_Variable]^while  (  ( v & 1 )  == 0 &&  ( u & 1 )  == 0 && k < 31 )  {^329^^^^^314^344^while  (  ( u & 1 )  == 0 &&  ( v & 1 )  == 0 && k < 31 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P5_Replace_Variable]^while  (  ( u & 1 )  == 0 &&  ( k & 1 )  == 0 && v < 31 )  {^329^^^^^314^344^while  (  ( u & 1 )  == 0 &&  ( v & 1 )  == 0 && k < 31 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P3_Replace_Literal]^u /= -3;^331^^^^^316^346^u /= 2;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P8_Replace_Mix]^u /= 1;^331^^^^^316^346^u /= 2;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P11_Insert_Donor_Statement]^u = -t;u /= 2;^331^^^^^316^346^u /= 2;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P11_Insert_Donor_Statement]^u = -u;u /= 2;^331^^^^^316^346^u /= 2;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P11_Insert_Donor_Statement]^v /= 2;u /= 2;^331^^^^^316^346^u /= 2;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P11_Insert_Donor_Statement]^v = t;u /= 2;^331^^^^^316^346^u /= 2;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P11_Insert_Donor_Statement]^t /= 2;u /= 2;^331^^^^^316^346^u /= 2;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P3_Replace_Literal]^v /= k;^332^^^^^317^347^v /= 2;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P8_Replace_Mix]^v /= 0;^332^^^^^317^347^v /= 2;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P11_Insert_Donor_Statement]^v = -v;v /= 2;^332^^^^^317^347^v /= 2;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P11_Insert_Donor_Statement]^u /= 2;v /= 2;^332^^^^^317^347^v /= 2;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P11_Insert_Donor_Statement]^v = t;v /= 2;^332^^^^^317^347^v /= 2;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P11_Insert_Donor_Statement]^t /= 2;v /= 2;^332^^^^^317^347^v /= 2;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P3_Replace_Literal]^u /= v;^331^^^^^316^346^u /= 2;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P8_Replace_Mix]^u /= 2L;^331^^^^^316^346^u /= 2;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P3_Replace_Literal]^v /= 6;^332^^^^^317^347^v /= 2;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P8_Replace_Mix]^v /= 2 >> 1;^332^^^^^317^347^v /= 2;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P2_Replace_Operator]^if  ( k >= 31 )  {^335^^^^^320^350^if  ( k == 31 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P5_Replace_Variable]^if  ( v == 31 )  {^335^^^^^320^350^if  ( k == 31 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P8_Replace_Mix]^if  ( k == 0 )  {^335^^^^^320^350^if  ( k == 31 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P9_Replace_Statement]^if  ( u * v == 0 )  {^335^^^^^320^350^if  ( k == 31 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P9_Replace_Statement]^if  ( t > 0 )  {^335^^^^^320^350^if  ( k == 31 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P9_Replace_Statement]^if  ( u > 0 )  {^335^^^^^320^350^if  ( k == 31 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P9_Replace_Statement]^if  ( n < 0 )  {^335^^^^^320^350^if  ( k == 31 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P9_Replace_Statement]^if  ( v > 0 )  {^335^^^^^320^350^if  ( k == 31 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P9_Replace_Statement]^if  ( n < k )  {^335^^^^^320^350^if  ( k == 31 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P9_Replace_Statement]^if  ( sign == -1 )  {^335^^^^^320^350^if  ( k == 31 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P15_Unwrap_Block]^throw new java.lang.ArithmeticException("overflow: gcd is 2^31");^335^336^337^^^320^350^if  ( k == 31 )  { throw new ArithmeticException  (" ")  ; }^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P16_Remove_Block]^^335^336^337^^^320^350^if  ( k == 31 )  { throw new ArithmeticException  (" ")  ; }^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P13_Insert_Block]^if  ( n < 0 )  {     throw new IllegalArgumentException ( "must have n > 0 for n!" ) ; }^335^^^^^320^350^[Delete]^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P13_Insert_Block]^if  ( n < 0 )  {     throw new IllegalArgumentException ( "must have n >= 0 for n!" ) ; }^335^^^^^320^350^[Delete]^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P4_Replace_Constructor]^throw throw  new ArithmeticException ( "overflow: mul" )   ;^336^^^^^321^351^throw new ArithmeticException  (" ")  ;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P13_Insert_Block]^if  ( k == 31 )  {     throw new ArithmeticException ( "overflow: gcd is 2^31" ) ; }^336^^^^^321^351^[Delete]^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException  (" ")  ;throw new ArithmeticException  (" ")  ;^336^^^^^321^351^throw new ArithmeticException  (" ")  ;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P2_Replace_Operator]^while  (  ( t & 1 )  >= 0 )  {^346^^^^^331^361^while  (  ( t & 1 )  == 0 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P2_Replace_Operator]^while  (  ( t  ^  1 )  == 0 )  {^346^^^^^331^361^while  (  ( t & 1 )  == 0 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P3_Replace_Literal]^while  (  ( t & 1 )  == v )  {^346^^^^^331^361^while  (  ( t & 1 )  == 0 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P5_Replace_Variable]^while  (  ( v & 1 )  == 0 )  {^346^^^^^331^361^while  (  ( t & 1 )  == 0 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P3_Replace_Literal]^t /= -4;^347^^^^^332^362^t /= 2;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P8_Replace_Mix]^t /= 1;^347^^^^^332^362^t /= 2;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P11_Insert_Donor_Statement]^u /= 2;t /= 2;^347^^^^^332^362^t /= 2;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P11_Insert_Donor_Statement]^v /= 2;t /= 2;^347^^^^^332^362^t /= 2;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P11_Insert_Donor_Statement]^v = t;t /= 2;^347^^^^^332^362^t /= 2;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P2_Replace_Operator]^if  ( t >= 0 )  {^350^^^^^335^365^if  ( t > 0 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P5_Replace_Variable]^if  ( v > 0 )  {^350^^^^^335^365^if  ( t > 0 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P8_Replace_Mix]^if  ( t > 4 )  {^350^^^^^335^365^if  ( t > 0 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P9_Replace_Statement]^if  ( u * v == 0 )  {^350^^^^^335^365^if  ( t > 0 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P9_Replace_Statement]^if  ( u > 0 )  {^350^^^^^335^365^if  ( t > 0 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P9_Replace_Statement]^if  ( n < 0 )  {^350^^^^^335^365^if  ( t > 0 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P9_Replace_Statement]^if  ( n < k )  {^350^^^^^335^365^if  ( t > 0 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P9_Replace_Statement]^if  ( k == 31 )  {^350^^^^^335^365^if  ( t > 0 )  {^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P15_Unwrap_Block]^u = -t;^350^351^352^353^354^335^365^if  ( t > 0 )  { u = -t; } else { v = t; }^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P16_Remove_Block]^^350^351^352^353^354^335^365^if  ( t > 0 )  { u = -t; } else { v = t; }^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P13_Insert_Block]^if  ( u > 0 )  {     u = -u; }^350^^^^^335^365^[Delete]^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P13_Insert_Block]^if  ( v > 0 )  {     v = -v; }^350^^^^^335^365^[Delete]^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P5_Replace_Variable]^v = v;^353^^^^^350^354^v = t;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P8_Replace_Mix]^v =  u;^353^^^^^350^354^v = t;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P11_Insert_Donor_Statement]^v = -v;v = t;^353^^^^^350^354^v = t;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P11_Insert_Donor_Statement]^u /= 2;v = t;^353^^^^^350^354^v = t;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P11_Insert_Donor_Statement]^u = -t;v = t;^353^^^^^350^354^v = t;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P11_Insert_Donor_Statement]^u = -u;v = t;^353^^^^^350^354^v = t;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P11_Insert_Donor_Statement]^v /= 2;v = t;^353^^^^^350^354^v = t;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P11_Insert_Donor_Statement]^t /= 2;v = t;^353^^^^^350^354^v = t;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P8_Replace_Mix]^u =  -v;^351^^^^^336^366^u = -t;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P11_Insert_Donor_Statement]^v = -v;u = -t;^351^^^^^336^366^u = -t;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P11_Insert_Donor_Statement]^u /= 2;u = -t;^351^^^^^336^366^u = -t;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P11_Insert_Donor_Statement]^u = -u;u = -t;^351^^^^^336^366^u = -t;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P11_Insert_Donor_Statement]^v = t;u = -t;^351^^^^^336^366^u = -t;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P3_Replace_Literal]^t /= 7;^347^^^^^332^362^t /= 2;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P8_Replace_Mix]^t /= 2 + 4;^347^^^^^332^362^t /= 2;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P5_Replace_Variable]^v = v;^353^^^^^338^368^v = t;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P8_Replace_Mix]^v =  u;^353^^^^^338^368^v = t;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P11_Insert_Donor_Statement]^v = -v;v = t;^353^^^^^338^368^v = t;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P11_Insert_Donor_Statement]^u /= 2;v = t;^353^^^^^338^368^v = t;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P11_Insert_Donor_Statement]^u = -t;v = t;^353^^^^^338^368^v = t;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P11_Insert_Donor_Statement]^u = -u;v = t;^353^^^^^338^368^v = t;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P11_Insert_Donor_Statement]^v /= 2;v = t;^353^^^^^338^368^v = t;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P11_Insert_Donor_Statement]^t /= 2;v = t;^353^^^^^338^368^v = t;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P2_Replace_Operator]^t =  ( v - u )  - 2;^356^^^^^341^371^t =  ( v - u )  / 2;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P2_Replace_Operator]^t =  ( v   instanceof   u )  / 2;^356^^^^^341^371^t =  ( v - u )  / 2;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P3_Replace_Literal]^t =  ( v - u )  / 0;^356^^^^^341^371^t =  ( v - u )  / 2;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P5_Replace_Variable]^t =  ( t - u )  / 2;^356^^^^^341^371^t =  ( v - u )  / 2;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P5_Replace_Variable]^t =  ( v - t )  / 2;^356^^^^^341^371^t =  ( v - u )  / 2;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P5_Replace_Variable]^t =  ( u - v )  / 2;^356^^^^^341^371^t =  ( v - u )  / 2;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P8_Replace_Mix]^t =  ( v - u )  / 4;^356^^^^^341^371^t =  ( v - u )  / 2;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P12_Insert_Condition]^if  ( v > 0 )  { t =  ( v - u )  / 2; }^356^^^^^341^371^t =  ( v - u )  / 2;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P2_Replace_Operator]^return + -u *  ( 1 << k ) ;^360^^^^^345^375^return -u *  ( 1 << k ) ;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P2_Replace_Operator]^return -u *  ( 1  |  k ) ;^360^^^^^345^375^return -u *  ( 1 << k ) ;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P3_Replace_Literal]^return -u *  ( k << k ) ;^360^^^^^345^375^return -u *  ( 1 << k ) ;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P8_Replace_Mix]^return -u  ;^360^^^^^345^375^return -u *  ( 1 << k ) ;^[CLASS] MathUtils  [METHOD] gcd [RETURN_TYPE] int   int u int v [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  int  k  t  u  v  
[P1_Replace_Type]^short  bits = Double.doubleToLongBits ( value ) ;^370^^^^^369^372^long bits = Double.doubleToLongBits ( value ) ;^[CLASS] MathUtils  [METHOD] hash [RETURN_TYPE] int   double value [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  double  value  long  bits  
[P7_Replace_Invocation]^long bits = Double.isNaN ( value ) ;^370^^^^^369^372^long bits = Double.doubleToLongBits ( value ) ;^[CLASS] MathUtils  [METHOD] hash [RETURN_TYPE] int   double value [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  double  value  long  bits  
[P14_Delete_Statement]^^370^^^^^369^372^long bits = Double.doubleToLongBits ( value ) ;^[CLASS] MathUtils  [METHOD] hash [RETURN_TYPE] int   double value [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  double  value  long  bits  
[P2_Replace_Operator]^return  ( int )  ( bits ^  ( bits  >=  32 )  ) ;^371^^^^^369^372^return  ( int )  ( bits ^  ( bits >>> 32 )  ) ;^[CLASS] MathUtils  [METHOD] hash [RETURN_TYPE] int   double value [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  double  value  long  bits  
[P3_Replace_Literal]^return  ( int )  ( bits ^  ( bits >>> 25 )  ) ;^371^^^^^369^372^return  ( int )  ( bits ^  ( bits >>> 32 )  ) ;^[CLASS] MathUtils  [METHOD] hash [RETURN_TYPE] int   double value [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  double  value  long  bits  
[P8_Replace_Mix]^return  ( int )  ( bits &  ( bits ;^371^^^^^369^372^return  ( int )  ( bits ^  ( bits >>> 32 )  ) ;^[CLASS] MathUtils  [METHOD] hash [RETURN_TYPE] int   double value [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  double  value  long  bits  
[P2_Replace_Operator]^return  ( x < ZB )  ? PB : NB;^382^^^^^381^383^return  ( x >= ZB )  ? PB : NB;^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] byte   final byte x [VARIABLES] short  NS  PS  ZS  byte  NB  PB  ZB  x  boolean  
[P5_Replace_Variable]^return  ( ZB >= ZB )  ? PB : NB;^382^^^^^381^383^return  ( x >= ZB )  ? PB : NB;^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] byte   final byte x [VARIABLES] short  NS  PS  ZS  byte  NB  PB  ZB  x  boolean  
[P5_Replace_Variable]^return  ( x >= PB )  ? PB : NB;^382^^^^^381^383^return  ( x >= ZB )  ? PB : NB;^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] byte   final byte x [VARIABLES] short  NS  PS  ZS  byte  NB  PB  ZB  x  boolean  
[P5_Replace_Variable]^return  ( x >= ZB )  ? ZB : NB;^382^^^^^381^383^return  ( x >= ZB )  ? PB : NB;^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] byte   final byte x [VARIABLES] short  NS  PS  ZS  byte  NB  PB  ZB  x  boolean  
[P5_Replace_Variable]^return  ( x >= ZB )  ? PB : x;^382^^^^^381^383^return  ( x >= ZB )  ? PB : NB;^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] byte   final byte x [VARIABLES] short  NS  PS  ZS  byte  NB  PB  ZB  x  boolean  
[P5_Replace_Variable]^return  ( NB >= ZB )  ? PB : x;^382^^^^^381^383^return  ( x >= ZB )  ? PB : NB;^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] byte   final byte x [VARIABLES] short  NS  PS  ZS  byte  NB  PB  ZB  x  boolean  
[P5_Replace_Variable]^return  ( x >= NB )  ? PB : ZB;^382^^^^^381^383^return  ( x >= ZB )  ? PB : NB;^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] byte   final byte x [VARIABLES] short  NS  PS  ZS  byte  NB  PB  ZB  x  boolean  
[P5_Replace_Variable]^return  ( PB >= ZB )  ? x : NB;^382^^^^^381^383^return  ( x >= ZB )  ? PB : NB;^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] byte   final byte x [VARIABLES] short  NS  PS  ZS  byte  NB  PB  ZB  x  boolean  
[P6_Replace_Expression]^return  ( x > =  NB;^382^^^^^381^383^return  ( x >= ZB )  ? PB : NB;^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] byte   final byte x [VARIABLES] short  NS  PS  ZS  byte  NB  PB  ZB  x  boolean  
[P6_Replace_Expression]^return  ( x > =  PB ;^382^^^^^381^383^return  ( x >= ZB )  ? PB : NB;^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] byte   final byte x [VARIABLES] short  NS  PS  ZS  byte  NB  PB  ZB  x  boolean  
[P8_Replace_Mix]^return false ;^382^^^^^381^383^return  ( x >= ZB )  ? PB : NB;^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] byte   final byte x [VARIABLES] short  NS  PS  ZS  byte  NB  PB  ZB  x  boolean  
[P7_Replace_Invocation]^if  ( Double.doubleToLongBits ( x )  )  {^394^^^^^393^398^if  ( Double.isNaN ( x )  )  {^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] double   final double x [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  x  double  x  
[P9_Replace_Statement]^if  ( Float.isNaN ( x )  )  {^394^^^^^393^398^if  ( Double.isNaN ( x )  )  {^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] double   final double x [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  x  double  x  
[P15_Unwrap_Block]^return java.lang.Double.NaN;^394^395^396^^^393^398^if  ( Double.isNaN ( x )  )  { return Double.NaN; }^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] double   final double x [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  x  double  x  
[P16_Remove_Block]^^394^395^396^^^393^398^if  ( Double.isNaN ( x )  )  { return Double.NaN; }^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] double   final double x [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  x  double  x  
[P13_Insert_Block]^if  ( isNaN ( x )  )  {     return NaN; }^394^^^^^393^398^[Delete]^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] double   final double x [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  x  double  x  
[P2_Replace_Operator]^return  ( x == 0.0 )  ? 1.0 : -1.0;^397^^^^^393^398^return  ( x >= 0.0 )  ? 1.0 : -1.0;^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] double   final double x [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  x  double  x  
[P6_Replace_Expression]^return  ( x > =  -1.0;^397^^^^^393^398^return  ( x >= 0.0 )  ? 1.0 : -1.0;^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] double   final double x [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  x  double  x  
[P6_Replace_Expression]^return  ( x > =  1.0 ;^397^^^^^393^398^return  ( x >= 0.0 )  ? 1.0 : -1.0;^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] double   final double x [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  x  double  x  
[P8_Replace_Mix]^return  ( x ;^397^^^^^393^398^return  ( x >= 0.0 )  ? 1.0 : -1.0;^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] double   final double x [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  x  double  x  
[P9_Replace_Statement]^if  ( Double.isNaN ( x )  )  {^408^^^^^407^412^if  ( Float.isNaN ( x )  )  {^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] float   final float x [VARIABLES] short  NS  PS  ZS  boolean  float  x  byte  NB  PB  ZB  x  
[P15_Unwrap_Block]^return java.lang.Float.NaN;^408^409^410^^^407^412^if  ( Float.isNaN ( x )  )  { return Float.NaN; }^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] float   final float x [VARIABLES] short  NS  PS  ZS  boolean  float  x  byte  NB  PB  ZB  x  
[P16_Remove_Block]^^408^409^410^^^407^412^if  ( Float.isNaN ( x )  )  { return Float.NaN; }^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] float   final float x [VARIABLES] short  NS  PS  ZS  boolean  float  x  byte  NB  PB  ZB  x  
[P13_Insert_Block]^if  ( isNaN ( x )  )  {     return NaN; }^408^^^^^407^412^[Delete]^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] float   final float x [VARIABLES] short  NS  PS  ZS  boolean  float  x  byte  NB  PB  ZB  x  
[P2_Replace_Operator]^return  ( x > 0.0F )  ? 1.0F : -1.0F;^411^^^^^407^412^return  ( x >= 0.0F )  ? 1.0F : -1.0F;^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] float   final float x [VARIABLES] short  NS  PS  ZS  boolean  float  x  byte  NB  PB  ZB  x  
[P6_Replace_Expression]^return  ( x > =  -1.0F;^411^^^^^407^412^return  ( x >= 0.0F )  ? 1.0F : -1.0F;^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] float   final float x [VARIABLES] short  NS  PS  ZS  boolean  float  x  byte  NB  PB  ZB  x  
[P6_Replace_Expression]^return  ( x > =  1.0F ;^411^^^^^407^412^return  ( x >= 0.0F )  ? 1.0F : -1.0F;^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] float   final float x [VARIABLES] short  NS  PS  ZS  boolean  float  x  byte  NB  PB  ZB  x  
[P8_Replace_Mix]^return false ;^411^^^^^407^412^return  ( x >= 0.0F )  ? 1.0F : -1.0F;^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] float   final float x [VARIABLES] short  NS  PS  ZS  boolean  float  x  byte  NB  PB  ZB  x  
[P2_Replace_Operator]^return  ( x > 0 )  ? 1 : -1;^421^^^^^420^422^return  ( x >= 0 )  ? 1 : -1;^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] int   final int x [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  x  int  x  
[P3_Replace_Literal]^return  ( x >= x )  ? 1 : -1;^421^^^^^420^422^return  ( x >= 0 )  ? 1 : -1;^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] int   final int x [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  x  int  x  
[P3_Replace_Literal]^return  ( x >= 0 )  ? 0 : -0;^421^^^^^420^422^return  ( x >= 0 )  ? 1 : -1;^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] int   final int x [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  x  int  x  
[P3_Replace_Literal]^return  ( x >= 0 )  ? x : -x;^421^^^^^420^422^return  ( x >= 0 )  ? 1 : -1;^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] int   final int x [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  x  int  x  
[P6_Replace_Expression]^return  ( x > =  -1;^421^^^^^420^422^return  ( x >= 0 )  ? 1 : -1;^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] int   final int x [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  x  int  x  
[P6_Replace_Expression]^return  ( x > =  1 ;^421^^^^^420^422^return  ( x >= 0 )  ? 1 : -1;^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] int   final int x [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  x  int  x  
[P8_Replace_Mix]^return  ( x ;^421^^^^^420^422^return  ( x >= 0 )  ? 1 : -1;^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] int   final int x [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  x  int  x  
[P2_Replace_Operator]^return  ( x < 0L )  ? 1L : -1L;^431^^^^^430^432^return  ( x >= 0L )  ? 1L : -1L;^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] long   final long x [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  x  long  x  
[P6_Replace_Expression]^return  ( x > =  -1L;^431^^^^^430^432^return  ( x >= 0L )  ? 1L : -1L;^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] long   final long x [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  x  long  x  
[P6_Replace_Expression]^return  ( x > =  1L ;^431^^^^^430^432^return  ( x >= 0L )  ? 1L : -1L;^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] long   final long x [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  x  long  x  
[P8_Replace_Mix]^return  ( x ;^431^^^^^430^432^return  ( x >= 0L )  ? 1L : -1L;^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] long   final long x [VARIABLES] short  NS  PS  ZS  boolean  byte  NB  PB  ZB  x  long  x  
[P2_Replace_Operator]^return  ( x == ZS )  ? PS : NS;^442^^^^^441^443^return  ( x >= ZS )  ? PS : NS;^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] short   final short x [VARIABLES] short  NS  PS  ZS  x  byte  NB  PB  ZB  x  boolean  
[P5_Replace_Variable]^return  ( x >= x )  ? PS : NS;^442^^^^^441^443^return  ( x >= ZS )  ? PS : NS;^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] short   final short x [VARIABLES] short  NS  PS  ZS  x  byte  NB  PB  ZB  x  boolean  
[P5_Replace_Variable]^return  ( x >= ZS )  ? x : NS;^442^^^^^441^443^return  ( x >= ZS )  ? PS : NS;^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] short   final short x [VARIABLES] short  NS  PS  ZS  x  byte  NB  PB  ZB  x  boolean  
[P5_Replace_Variable]^return  ( x >= ZS )  ? PS : ZS;^442^^^^^441^443^return  ( x >= ZS )  ? PS : NS;^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] short   final short x [VARIABLES] short  NS  PS  ZS  x  byte  NB  PB  ZB  x  boolean  
[P5_Replace_Variable]^return  ( NS >= ZS )  ? PS : x;^442^^^^^441^443^return  ( x >= ZS )  ? PS : NS;^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] short   final short x [VARIABLES] short  NS  PS  ZS  x  byte  NB  PB  ZB  x  boolean  
[P5_Replace_Variable]^return  ( ZS >= x )  ? PS : NS;^442^^^^^441^443^return  ( x >= ZS )  ? PS : NS;^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] short   final short x [VARIABLES] short  NS  PS  ZS  x  byte  NB  PB  ZB  x  boolean  
[P5_Replace_Variable]^return  ( PS >= ZS )  ? x : NS;^442^^^^^441^443^return  ( x >= ZS )  ? PS : NS;^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] short   final short x [VARIABLES] short  NS  PS  ZS  x  byte  NB  PB  ZB  x  boolean  
[P5_Replace_Variable]^return  ( x >= NS )  ? PS : ZS;^442^^^^^441^443^return  ( x >= ZS )  ? PS : NS;^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] short   final short x [VARIABLES] short  NS  PS  ZS  x  byte  NB  PB  ZB  x  boolean  
[P6_Replace_Expression]^return  ( x > =  NS;^442^^^^^441^443^return  ( x >= ZS )  ? PS : NS;^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] short   final short x [VARIABLES] short  NS  PS  ZS  x  byte  NB  PB  ZB  x  boolean  
[P6_Replace_Expression]^return  ( x > =  PS ;^442^^^^^441^443^return  ( x >= ZS )  ? PS : NS;^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] short   final short x [VARIABLES] short  NS  PS  ZS  x  byte  NB  PB  ZB  x  boolean  
[P8_Replace_Mix]^return false ;^442^^^^^441^443^return  ( x >= ZS )  ? PS : NS;^[CLASS] MathUtils  [METHOD] indicator [RETURN_TYPE] short   final short x [VARIABLES] short  NS  PS  ZS  x  byte  NB  PB  ZB  x  boolean  
[P2_Replace_Operator]^return Math.abs ( mulAndCheck ( a * gcd ( a, b ) , b )  ) ;^455^^^^^454^456^return Math.abs ( mulAndCheck ( a / gcd ( a, b ) , b )  ) ;^[CLASS] MathUtils  [METHOD] lcm [RETURN_TYPE] int   int a int b [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  a  b  
[P5_Replace_Variable]^return Math.abs ( mulAndCheck ( a / gcd (  b ) , b )  ) ;^455^^^^^454^456^return Math.abs ( mulAndCheck ( a / gcd ( a, b ) , b )  ) ;^[CLASS] MathUtils  [METHOD] lcm [RETURN_TYPE] int   int a int b [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  a  b  
[P5_Replace_Variable]^return Math.abs ( mulAndCheck ( a / gcd ( a ) , b )  ) ;^455^^^^^454^456^return Math.abs ( mulAndCheck ( a / gcd ( a, b ) , b )  ) ;^[CLASS] MathUtils  [METHOD] lcm [RETURN_TYPE] int   int a int b [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  a  b  
[P5_Replace_Variable]^return Math.abs ( mulAndCheck ( b / gcd ( a, a ) , b )  ) ;^455^^^^^454^456^return Math.abs ( mulAndCheck ( a / gcd ( a, b ) , b )  ) ;^[CLASS] MathUtils  [METHOD] lcm [RETURN_TYPE] int   int a int b [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  a  b  
[P7_Replace_Invocation]^return Math.abs ( mulAndCheck ( a / lcm ( a, b ) , b )  ) ;^455^^^^^454^456^return Math.abs ( mulAndCheck ( a / gcd ( a, b ) , b )  ) ;^[CLASS] MathUtils  [METHOD] lcm [RETURN_TYPE] int   int a int b [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  a  b  
[P8_Replace_Mix]^return Math .abs ( a )   ) ;^455^^^^^454^456^return Math.abs ( mulAndCheck ( a / gcd ( a, b ) , b )  ) ;^[CLASS] MathUtils  [METHOD] lcm [RETURN_TYPE] int   int a int b [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  a  b  
[P2_Replace_Operator]^return Math.abs ( mulAndCheck ( a + gcd ( a, b ) , b )  ) ;^455^^^^^454^456^return Math.abs ( mulAndCheck ( a / gcd ( a, b ) , b )  ) ;^[CLASS] MathUtils  [METHOD] lcm [RETURN_TYPE] int   int a int b [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  a  b  
[P14_Delete_Statement]^^455^^^^^454^456^return Math.abs ( mulAndCheck ( a / gcd ( a, b ) , b )  ) ;^[CLASS] MathUtils  [METHOD] lcm [RETURN_TYPE] int   int a int b [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  a  b  
[P1_Replace_Type]^short  m =  (  (  short  ) x )  *  (  (  short  ) y ) ;^469^^^^^468^474^long m =  (  ( long ) x )  *  (  ( long ) y ) ;^[CLASS] MathUtils  [METHOD] mulAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  y  long  m  
[P2_Replace_Operator]^long + m =  (  ( long ) x )  *  (  ( long ) y ) ;^469^^^^^468^474^long m =  (  ( long ) x )  *  (  ( long ) y ) ;^[CLASS] MathUtils  [METHOD] mulAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  y  long  m  
[P11_Insert_Donor_Statement]^long s =  ( long ) x +  ( long ) y;long m =  (  ( long ) x )  *  (  ( long ) y ) ;^469^^^^^468^474^long m =  (  ( long ) x )  *  (  ( long ) y ) ;^[CLASS] MathUtils  [METHOD] mulAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  y  long  m  
[P11_Insert_Donor_Statement]^long s =  ( long ) x -  ( long ) y;long m =  (  ( long ) x )  *  (  ( long ) y ) ;^469^^^^^468^474^long m =  (  ( long ) x )  *  (  ( long ) y ) ;^[CLASS] MathUtils  [METHOD] mulAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  y  long  m  
[P2_Replace_Operator]^if  ( m < Integer.MIN_VALUE && m > Integer.MAX_VALUE )  {^470^^^^^468^474^if  ( m < Integer.MIN_VALUE || m > Integer.MAX_VALUE )  {^[CLASS] MathUtils  [METHOD] mulAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  y  long  m  
[P2_Replace_Operator]^if  ( m <= Integer.MIN_VALUE || m > Integer.MAX_VALUE )  {^470^^^^^468^474^if  ( m < Integer.MIN_VALUE || m > Integer.MAX_VALUE )  {^[CLASS] MathUtils  [METHOD] mulAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  y  long  m  
[P2_Replace_Operator]^if  ( m < Integer.MIN_VALUE || m >= Integer.MAX_VALUE )  {^470^^^^^468^474^if  ( m < Integer.MIN_VALUE || m > Integer.MAX_VALUE )  {^[CLASS] MathUtils  [METHOD] mulAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  y  long  m  
[P5_Replace_Variable]^if  ( m < Integer.y || m > Integer.MAX_VALUE )  {^470^^^^^468^474^if  ( m < Integer.MIN_VALUE || m > Integer.MAX_VALUE )  {^[CLASS] MathUtils  [METHOD] mulAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  y  long  m  
[P5_Replace_Variable]^if  ( m < Integer.MIN_VALUE || m > Integer.y )  {^470^^^^^468^474^if  ( m < Integer.MIN_VALUE || m > Integer.MAX_VALUE )  {^[CLASS] MathUtils  [METHOD] mulAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  y  long  m  
[P6_Replace_Expression]^if  ( m < Integer.MIN_VALUE ) {^470^^^^^468^474^if  ( m < Integer.MIN_VALUE || m > Integer.MAX_VALUE )  {^[CLASS] MathUtils  [METHOD] mulAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  y  long  m  
[P6_Replace_Expression]^if  (  m > Integer.MAX_VALUE )  {^470^^^^^468^474^if  ( m < Integer.MIN_VALUE || m > Integer.MAX_VALUE )  {^[CLASS] MathUtils  [METHOD] mulAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  y  long  m  
[P6_Replace_Expression]^if  ( m < MIN_VALUE )  {^470^^^^^468^474^if  ( m < Integer.MIN_VALUE || m > Integer.MAX_VALUE )  {^[CLASS] MathUtils  [METHOD] mulAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  y  long  m  
[P6_Replace_Expression]^if  ( m > MAX_VALUE )  {^470^^^^^468^474^if  ( m < Integer.MIN_VALUE || m > Integer.MAX_VALUE )  {^[CLASS] MathUtils  [METHOD] mulAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  y  long  m  
[P9_Replace_Statement]^if  ( s < Integer.MIN_VALUE || s > Integer.MAX_VALUE )  {^470^^^^^468^474^if  ( m < Integer.MIN_VALUE || m > Integer.MAX_VALUE )  {^[CLASS] MathUtils  [METHOD] mulAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  y  long  m  
[P15_Unwrap_Block]^throw new java.lang.ArithmeticException("overflow: mul");^470^471^472^^^468^474^if  ( m < Integer.MIN_VALUE || m > Integer.MAX_VALUE )  { throw new ArithmeticException  (" ")  ; }^[CLASS] MathUtils  [METHOD] mulAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  y  long  m  
[P16_Remove_Block]^^470^471^472^^^468^474^if  ( m < Integer.MIN_VALUE || m > Integer.MAX_VALUE )  { throw new ArithmeticException  (" ")  ; }^[CLASS] MathUtils  [METHOD] mulAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  y  long  m  
[P13_Insert_Block]^if  (  ( s <  ( MIN_VALUE )  )  ||  ( s >  ( MAX_VALUE )  )  )  {     throw new ArithmeticException ( "overflow: subtract" ) ; }^470^^^^^468^474^[Delete]^[CLASS] MathUtils  [METHOD] mulAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  y  long  m  
[P13_Insert_Block]^if  (  ( s <  ( MIN_VALUE )  )  ||  ( s >  ( MAX_VALUE )  )  )  {     throw new ArithmeticException ( "overflow: add" ) ; }^470^^^^^468^474^[Delete]^[CLASS] MathUtils  [METHOD] mulAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  y  long  m  
[P4_Replace_Constructor]^throw throw  new ArithmeticException ( "overflow: add" )   ;^471^^^^^468^474^throw new ArithmeticException  (" ")  ;^[CLASS] MathUtils  [METHOD] mulAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  y  long  m  
[P13_Insert_Block]^if  ( k == 31 )  {     throw new ArithmeticException ( "overflow: gcd is 2^31" ) ; }^471^^^^^468^474^[Delete]^[CLASS] MathUtils  [METHOD] mulAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  y  long  m  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException  (" ")  ;throw new ArithmeticException  (" ")  ;^471^^^^^468^474^throw new ArithmeticException  (" ")  ;^[CLASS] MathUtils  [METHOD] mulAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  y  long  m  
[P1_Replace_Type]^return  (  short  ) m;^473^^^^^468^474^return  ( int ) m;^[CLASS] MathUtils  [METHOD] mulAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  y  long  m  
[P5_Replace_Variable]^return round (  scale, BigDecimal.ROUND_HALF_UP ) ;^486^^^^^485^487^return round ( x, scale, BigDecimal.ROUND_HALF_UP ) ;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] double   double x int scale [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  x  int  scale  
[P5_Replace_Variable]^return round ( x,  BigDecimal.ROUND_HALF_UP ) ;^486^^^^^485^487^return round ( x, scale, BigDecimal.ROUND_HALF_UP ) ;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] double   double x int scale [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  x  int  scale  
[P5_Replace_Variable]^return round ( scale, x, BigDecimal.ROUND_HALF_UP ) ;^486^^^^^485^487^return round ( x, scale, BigDecimal.ROUND_HALF_UP ) ;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] double   double x int scale [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  x  int  scale  
[P8_Replace_Mix]^return round ( x, scale, BigDecimal.scale ) ;^486^^^^^485^487^return round ( x, scale, BigDecimal.ROUND_HALF_UP ) ;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] double   double x int scale [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  x  int  scale  
[P14_Delete_Statement]^^486^^^^^485^487^return round ( x, scale, BigDecimal.ROUND_HALF_UP ) ;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] double   double x int scale [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  x  int  scale  
[P1_Replace_Type]^int sign = indicator ( x ) ;^502^^^^^501^505^double sign = indicator ( x ) ;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] double   double x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  factor  sign  x  int  roundingMethod  scale  
[P5_Replace_Variable]^double sign = indicator ( factor ) ;^502^^^^^501^505^double sign = indicator ( x ) ;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] double   double x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  factor  sign  x  int  roundingMethod  scale  
[P11_Insert_Donor_Statement]^float sign = indicator ( x ) ;double sign = indicator ( x ) ;^502^^^^^501^505^double sign = indicator ( x ) ;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] double   double x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  factor  sign  x  int  roundingMethod  scale  
[P5_Replace_Variable]^double sign = indicator ( sign ) ;^502^^^^^501^505^double sign = indicator ( x ) ;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] double   double x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  factor  sign  x  int  roundingMethod  scale  
[P14_Delete_Statement]^^502^503^^^^501^505^double sign = indicator ( x ) ; double factor = Math.pow ( 10.0, scale )  * sign;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] double   double x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  factor  sign  x  int  roundingMethod  scale  
[P1_Replace_Type]^int factor = Math.pow ( 10.0, scale )  * sign;^503^^^^^501^505^double factor = Math.pow ( 10.0, scale )  * sign;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] double   double x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  factor  sign  x  int  roundingMethod  scale  
[P2_Replace_Operator]^double / factor = Math.pow ( 10.0, scale )  * sign;^503^^^^^501^505^double factor = Math.pow ( 10.0, scale )  * sign;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] double   double x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  factor  sign  x  int  roundingMethod  scale  
[P3_Replace_Literal]^double factor = Math.pow ( 90.0, scale )  * sign;^503^^^^^501^505^double factor = Math.pow ( 10.0, scale )  * sign;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] double   double x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  factor  sign  x  int  roundingMethod  scale  
[P5_Replace_Variable]^double factor = Math.pow ( 10.0, roundingMethod )  * sign;^503^^^^^501^505^double factor = Math.pow ( 10.0, scale )  * sign;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] double   double x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  factor  sign  x  int  roundingMethod  scale  
[P5_Replace_Variable]^double factor = Math.pow ( 10.0, scale )  * x;^503^^^^^501^505^double factor = Math.pow ( 10.0, scale )  * sign;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] double   double x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  factor  sign  x  int  roundingMethod  scale  
[P5_Replace_Variable]^double factor = Math.pow ( 10.0 )  * sign;^503^^^^^501^505^double factor = Math.pow ( 10.0, scale )  * sign;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] double   double x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  factor  sign  x  int  roundingMethod  scale  
[P5_Replace_Variable]^double factor = Math.pow ( 10.0, sign )  * scale;^503^^^^^501^505^double factor = Math.pow ( 10.0, scale )  * sign;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] double   double x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  factor  sign  x  int  roundingMethod  scale  
[P11_Insert_Donor_Statement]^float factor =  ( float ) Math.pow ( 10.0f, scale )  * sign;double factor = Math.pow ( 10.0, scale )  * sign;^503^^^^^501^505^double factor = Math.pow ( 10.0, scale )  * sign;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] double   double x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  factor  sign  x  int  roundingMethod  scale  
[P3_Replace_Literal]^double factor = Math.pow ( 1.25, scale )  * sign;^503^^^^^501^505^double factor = Math.pow ( 10.0, scale )  * sign;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] double   double x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  factor  sign  x  int  roundingMethod  scale  
[P14_Delete_Statement]^^503^^^^^501^505^double factor = Math.pow ( 10.0, scale )  * sign;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] double   double x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  factor  sign  x  int  roundingMethod  scale  
[P2_Replace_Operator]^return roundUnscaled ( x * factor, sign, roundingMethod )  + factor;^504^^^^^501^505^return roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] double   double x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  factor  sign  x  int  roundingMethod  scale  
[P2_Replace_Operator]^return + roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^504^^^^^501^505^return roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] double   double x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  factor  sign  x  int  roundingMethod  scale  
[P5_Replace_Variable]^return roundUnscaled ( factor * factor, sign, roundingMethod )  / factor;^504^^^^^501^505^return roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] double   double x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  factor  sign  x  int  roundingMethod  scale  
[P5_Replace_Variable]^return roundUnscaled ( x * factor, x, roundingMethod )  / factor;^504^^^^^501^505^return roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] double   double x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  factor  sign  x  int  roundingMethod  scale  
[P5_Replace_Variable]^return roundUnscaled ( x * factor, sign, scale )  / factor;^504^^^^^501^505^return roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] double   double x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  factor  sign  x  int  roundingMethod  scale  
[P5_Replace_Variable]^return roundUnscaled ( x *  sign, roundingMethod )  / factor;^504^^^^^501^505^return roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] double   double x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  factor  sign  x  int  roundingMethod  scale  
[P5_Replace_Variable]^return roundUnscaled ( x * factor,  roundingMethod )  / factor;^504^^^^^501^505^return roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] double   double x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  factor  sign  x  int  roundingMethod  scale  
[P5_Replace_Variable]^return roundUnscaled ( x * factor, sign )  / factor;^504^^^^^501^505^return roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] double   double x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  factor  sign  x  int  roundingMethod  scale  
[P5_Replace_Variable]^return roundUnscaled ( factor * x, sign, roundingMethod )  / factor;^504^^^^^501^505^return roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] double   double x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  factor  sign  x  int  roundingMethod  scale  
[P5_Replace_Variable]^return roundUnscaled ( x * sign, factor, roundingMethod )  / factor;^504^^^^^501^505^return roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] double   double x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  factor  sign  x  int  roundingMethod  scale  
[P5_Replace_Variable]^return roundUnscaled ( x * factor, roundingMethod, sign )  / factor;^504^^^^^501^505^return roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] double   double x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  factor  sign  x  int  roundingMethod  scale  
[P8_Replace_Mix]^return roundUnscaled ( x * factor, sign, roundingMethod )   ;^504^^^^^501^505^return roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] double   double x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  factor  sign  x  int  roundingMethod  scale  
[P2_Replace_Operator]^return / roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^504^^^^^501^505^return roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] double   double x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  factor  sign  x  int  roundingMethod  scale  
[P5_Replace_Variable]^return roundUnscaled ( sign * factor, sign, roundingMethod )  / factor;^504^^^^^501^505^return roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] double   double x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  factor  sign  x  int  roundingMethod  scale  
[P5_Replace_Variable]^return roundUnscaled ( x * sign, sign, roundingMethod )  / factor;^504^^^^^501^505^return roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] double   double x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  factor  sign  x  int  roundingMethod  scale  
[P5_Replace_Variable]^return roundUnscaled ( roundingMethod * factor, sign, x )  / factor;^504^^^^^501^505^return roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] double   double x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  factor  sign  x  int  roundingMethod  scale  
[P14_Delete_Statement]^^504^^^^^501^505^return roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] double   double x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  factor  sign  x  int  roundingMethod  scale  
[P5_Replace_Variable]^return round (  scale, BigDecimal.ROUND_HALF_UP ) ;^517^^^^^516^518^return round ( x, scale, BigDecimal.ROUND_HALF_UP ) ;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] float   float x int scale [VARIABLES] short  NS  PS  ZS  x  boolean  float  x  byte  NB  PB  ZB  x  int  scale  
[P5_Replace_Variable]^return round ( x,  BigDecimal.ROUND_HALF_UP ) ;^517^^^^^516^518^return round ( x, scale, BigDecimal.ROUND_HALF_UP ) ;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] float   float x int scale [VARIABLES] short  NS  PS  ZS  x  boolean  float  x  byte  NB  PB  ZB  x  int  scale  
[P5_Replace_Variable]^return round ( scale, x, BigDecimal.ROUND_HALF_UP ) ;^517^^^^^516^518^return round ( x, scale, BigDecimal.ROUND_HALF_UP ) ;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] float   float x int scale [VARIABLES] short  NS  PS  ZS  x  boolean  float  x  byte  NB  PB  ZB  x  int  scale  
[P14_Delete_Statement]^^517^^^^^516^518^return round ( x, scale, BigDecimal.ROUND_HALF_UP ) ;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] float   float x int scale [VARIABLES] short  NS  PS  ZS  x  boolean  float  x  byte  NB  PB  ZB  x  int  scale  
[P1_Replace_Type]^int sign = indicator ( x ) ;^533^^^^^532^536^float sign = indicator ( x ) ;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] float   float x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  float  factor  sign  x  byte  NB  PB  ZB  x  int  roundingMethod  scale  
[P5_Replace_Variable]^float sign = indicator ( factor ) ;^533^^^^^532^536^float sign = indicator ( x ) ;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] float   float x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  float  factor  sign  x  byte  NB  PB  ZB  x  int  roundingMethod  scale  
[P11_Insert_Donor_Statement]^double sign = indicator ( x ) ;float sign = indicator ( x ) ;^533^^^^^532^536^float sign = indicator ( x ) ;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] float   float x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  float  factor  sign  x  byte  NB  PB  ZB  x  int  roundingMethod  scale  
[P5_Replace_Variable]^float sign = indicator ( sign ) ;^533^^^^^532^536^float sign = indicator ( x ) ;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] float   float x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  float  factor  sign  x  byte  NB  PB  ZB  x  int  roundingMethod  scale  
[P14_Delete_Statement]^^533^534^^^^532^536^float sign = indicator ( x ) ; float factor =  ( float ) Math.pow ( 10.0f, scale )  * sign;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] float   float x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  float  factor  sign  x  byte  NB  PB  ZB  x  int  roundingMethod  scale  
[P1_Replace_Type]^int factor =  ( int ) Math.pow ( 10.0f, scale )  * sign;^534^^^^^532^536^float factor =  ( float ) Math.pow ( 10.0f, scale )  * sign;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] float   float x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  float  factor  sign  x  byte  NB  PB  ZB  x  int  roundingMethod  scale  
[P2_Replace_Operator]^float + factor =  ( float ) Math.pow ( 10.0f, scale )  * sign;^534^^^^^532^536^float factor =  ( float ) Math.pow ( 10.0f, scale )  * sign;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] float   float x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  float  factor  sign  x  byte  NB  PB  ZB  x  int  roundingMethod  scale  
[P5_Replace_Variable]^float factor =  ( float ) Math.pow ( 10.0f, roundingMethod )  * sign;^534^^^^^532^536^float factor =  ( float ) Math.pow ( 10.0f, scale )  * sign;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] float   float x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  float  factor  sign  x  byte  NB  PB  ZB  x  int  roundingMethod  scale  
[P5_Replace_Variable]^float factor =  ( float ) Math.pow ( 10.0f, scale )  * x;^534^^^^^532^536^float factor =  ( float ) Math.pow ( 10.0f, scale )  * sign;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] float   float x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  float  factor  sign  x  byte  NB  PB  ZB  x  int  roundingMethod  scale  
[P5_Replace_Variable]^float factor =  ( float ) Math.pow ( 10.0f )  * sign;^534^^^^^532^536^float factor =  ( float ) Math.pow ( 10.0f, scale )  * sign;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] float   float x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  float  factor  sign  x  byte  NB  PB  ZB  x  int  roundingMethod  scale  
[P5_Replace_Variable]^float factor =  ( float ) Math.pow ( 10.0f, sign )  * scale;^534^^^^^532^536^float factor =  ( float ) Math.pow ( 10.0f, scale )  * sign;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] float   float x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  float  factor  sign  x  byte  NB  PB  ZB  x  int  roundingMethod  scale  
[P11_Insert_Donor_Statement]^double factor = Math.pow ( 10.0, scale )  * sign;float factor =  ( float ) Math.pow ( 10.0f, scale )  * sign;^534^^^^^532^536^float factor =  ( float ) Math.pow ( 10.0f, scale )  * sign;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] float   float x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  float  factor  sign  x  byte  NB  PB  ZB  x  int  roundingMethod  scale  
[P14_Delete_Statement]^^534^535^^^^532^536^float factor =  ( float ) Math.pow ( 10.0f, scale )  * sign; return  ( float ) roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] float   float x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  float  factor  sign  x  byte  NB  PB  ZB  x  int  roundingMethod  scale  
[P1_Replace_Type]^return  ( int ) roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^535^^^^^532^536^return  ( float ) roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] float   float x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  float  factor  sign  x  byte  NB  PB  ZB  x  int  roundingMethod  scale  
[P2_Replace_Operator]^return  ( float ) roundUnscaled ( x * factor, sign, roundingMethod )  + factor;^535^^^^^532^536^return  ( float ) roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] float   float x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  float  factor  sign  x  byte  NB  PB  ZB  x  int  roundingMethod  scale  
[P2_Replace_Operator]^return - ( float ) roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^535^^^^^532^536^return  ( float ) roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] float   float x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  float  factor  sign  x  byte  NB  PB  ZB  x  int  roundingMethod  scale  
[P5_Replace_Variable]^return  ( float ) roundUnscaled ( sign * factor, sign, roundingMethod )  / factor;^535^^^^^532^536^return  ( float ) roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] float   float x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  float  factor  sign  x  byte  NB  PB  ZB  x  int  roundingMethod  scale  
[P5_Replace_Variable]^return  ( float ) roundUnscaled ( x * sign, sign, roundingMethod )  / factor;^535^^^^^532^536^return  ( float ) roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] float   float x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  float  factor  sign  x  byte  NB  PB  ZB  x  int  roundingMethod  scale  
[P5_Replace_Variable]^return  ( float ) roundUnscaled ( x * factor, x, roundingMethod )  / factor;^535^^^^^532^536^return  ( float ) roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] float   float x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  float  factor  sign  x  byte  NB  PB  ZB  x  int  roundingMethod  scale  
[P5_Replace_Variable]^return  ( float ) roundUnscaled ( x * factor, sign, scale )  / factor;^535^^^^^532^536^return  ( float ) roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] float   float x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  float  factor  sign  x  byte  NB  PB  ZB  x  int  roundingMethod  scale  
[P5_Replace_Variable]^return  ( float ) roundUnscaled ( x *  sign, roundingMethod )  / factor;^535^^^^^532^536^return  ( float ) roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] float   float x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  float  factor  sign  x  byte  NB  PB  ZB  x  int  roundingMethod  scale  
[P5_Replace_Variable]^return  ( float ) roundUnscaled ( x * factor,  roundingMethod )  / factor;^535^^^^^532^536^return  ( float ) roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] float   float x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  float  factor  sign  x  byte  NB  PB  ZB  x  int  roundingMethod  scale  
[P5_Replace_Variable]^return  ( float ) roundUnscaled ( x * factor, sign )  / factor;^535^^^^^532^536^return  ( float ) roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] float   float x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  float  factor  sign  x  byte  NB  PB  ZB  x  int  roundingMethod  scale  
[P5_Replace_Variable]^return  ( float ) roundUnscaled ( sign * factor, x, roundingMethod )  / factor;^535^^^^^532^536^return  ( float ) roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] float   float x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  float  factor  sign  x  byte  NB  PB  ZB  x  int  roundingMethod  scale  
[P5_Replace_Variable]^return  ( float ) roundUnscaled ( factor * x, sign, roundingMethod )  / factor;^535^^^^^532^536^return  ( float ) roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] float   float x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  float  factor  sign  x  byte  NB  PB  ZB  x  int  roundingMethod  scale  
[P5_Replace_Variable]^return  ( float ) roundUnscaled ( roundingMethod * factor, sign, x )  / factor;^535^^^^^532^536^return  ( float ) roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] float   float x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  float  factor  sign  x  byte  NB  PB  ZB  x  int  roundingMethod  scale  
[P8_Replace_Mix]^return  ( float ) roundUnscaled ( x * factor, sign, roundingMethod )   ;^535^^^^^532^536^return  ( float ) roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] float   float x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  float  factor  sign  x  byte  NB  PB  ZB  x  int  roundingMethod  scale  
[P2_Replace_Operator]^return + ( float ) roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^535^^^^^532^536^return  ( float ) roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] float   float x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  float  factor  sign  x  byte  NB  PB  ZB  x  int  roundingMethod  scale  
[P5_Replace_Variable]^return  ( float ) roundUnscaled ( factor * factor, sign, roundingMethod )  / factor;^535^^^^^532^536^return  ( float ) roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] float   float x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  float  factor  sign  x  byte  NB  PB  ZB  x  int  roundingMethod  scale  
[P5_Replace_Variable]^return  ( float ) roundUnscaled ( x * x, sign, roundingMethod )  / factor;^535^^^^^532^536^return  ( float ) roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] float   float x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  float  factor  sign  x  byte  NB  PB  ZB  x  int  roundingMethod  scale  
[P5_Replace_Variable]^return  ( float ) roundUnscaled ( x * factor, factor, roundingMethod )  / factor;^535^^^^^532^536^return  ( float ) roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] float   float x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  float  factor  sign  x  byte  NB  PB  ZB  x  int  roundingMethod  scale  
[P5_Replace_Variable]^return  ( float ) roundUnscaled ( x * sign, factor, roundingMethod )  / factor;^535^^^^^532^536^return  ( float ) roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] float   float x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  float  factor  sign  x  byte  NB  PB  ZB  x  int  roundingMethod  scale  
[P5_Replace_Variable]^return  ( float ) roundUnscaled ( x * roundingMethod, sign, factor )  / factor;^535^^^^^532^536^return  ( float ) roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] float   float x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  float  factor  sign  x  byte  NB  PB  ZB  x  int  roundingMethod  scale  
[P14_Delete_Statement]^^535^^^^^532^536^return  ( float ) roundUnscaled ( x * factor, sign, roundingMethod )  / factor;^[CLASS] MathUtils  [METHOD] round [RETURN_TYPE] float   float x int scale int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  float  factor  sign  x  byte  NB  PB  ZB  x  int  roundingMethod  scale  
[P2_Replace_Operator]^if  ( sign >= -1 )  {^554^^^^^539^569^if  ( sign == -1 )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P5_Replace_Variable]^if  ( fraction == -1 )  {^554^^^^^539^569^if  ( sign == -1 )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P8_Replace_Mix]^if  ( sign == -1 % 4 )  {^554^^^^^539^569^if  ( sign == -1 )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P9_Replace_Statement]^if  ( u * v == 0 )  {^554^^^^^539^569^if  ( sign == -1 )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P9_Replace_Statement]^if  ( n < 0 )  {^554^^^^^539^569^if  ( sign == -1 )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P9_Replace_Statement]^if  ( n < k )  {^554^^^^^539^569^if  ( sign == -1 )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P9_Replace_Statement]^if  ( k == 31 )  {^554^^^^^539^569^if  ( sign == -1 )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P15_Unwrap_Block]^unscaled = java.lang.Math.floor(unscaled);^554^555^556^557^558^539^569^if  ( sign == -1 )  { unscaled = Math.floor ( unscaled ) ; } else { unscaled = Math.ceil ( unscaled ) ; }^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P16_Remove_Block]^^554^555^556^557^558^539^569^if  ( sign == -1 )  { unscaled = Math.floor ( unscaled ) ; } else { unscaled = Math.ceil ( unscaled ) ; }^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P13_Insert_Block]^if  ( fraction >= 0.5 )  {     unscaled = ceil ( unscaled ) ; }else {     unscaled = floor ( unscaled ) ; }^554^^^^^539^569^[Delete]^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P13_Insert_Block]^if  (  (  ( floor ( unscaled )  )  / 2.0 )  ==  ( floor (  (  ( floor ( unscaled )  )  / 2.0 )  )  )  )  {     unscaled = floor ( unscaled ) ; }else {     unscaled = ceil ( unscaled ) ; }^554^^^^^539^569^[Delete]^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P13_Insert_Block]^if  ( sign ==  ( -1 )  )  {     unscaled = ceil ( unscaled ) ; }else {     unscaled = floor ( unscaled ) ; }^554^^^^^539^569^[Delete]^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P13_Insert_Block]^if  ( fraction > 0.5 )  {     unscaled = ceil ( unscaled ) ; }else {     unscaled = floor ( unscaled ) ; }^554^^^^^539^569^[Delete]^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P5_Replace_Variable]^unscaled = Math.ceil ( sign ) ;^557^^^^^554^558^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P7_Replace_Invocation]^unscaled = Math.exp ( unscaled ) ;^557^^^^^554^558^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P7_Replace_Invocation]^unscaled = Math .exp ( fraction )  ;^557^^^^^554^558^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P8_Replace_Mix]^unscaled =  Math.ceil ( null ) ;^557^^^^^554^558^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P11_Insert_Donor_Statement]^unscaled = Math.floor ( unscaled ) ;unscaled = Math.ceil ( unscaled ) ;^557^^^^^554^558^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P12_Insert_Condition]^if  ( unscaled != Math.floor ( unscaled )  )  { unscaled = Math.ceil ( unscaled ) ; }^557^^^^^554^558^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P14_Delete_Statement]^^557^^^^^554^558^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P5_Replace_Variable]^unscaled = Math.floor ( sign ) ;^555^^^^^540^570^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P7_Replace_Invocation]^unscaled = Math.log ( unscaled ) ;^555^^^^^540^570^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P11_Insert_Donor_Statement]^unscaled = Math.ceil ( unscaled ) ;unscaled = Math.floor ( unscaled ) ;^555^^^^^540^570^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P12_Insert_Condition]^if  ( unscaled != Math.floor ( unscaled )  )  { unscaled = Math.floor ( unscaled ) ; }^555^^^^^540^570^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P14_Delete_Statement]^^555^^^^^540^570^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P11_Insert_Donor_Statement]^double fraction = Math.abs ( unscaled - Math.floor ( unscaled )  ) ;unscaled = Math.floor ( unscaled ) ;^555^^^^^540^570^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P2_Replace_Operator]^if  ( sign <= -1 )  {^564^^^^^549^579^if  ( sign == -1 )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P3_Replace_Literal]^if  ( sign == -roundingMethod )  {^564^^^^^549^579^if  ( sign == -1 )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P5_Replace_Variable]^if  ( fraction == -1 )  {^564^^^^^549^579^if  ( sign == -1 )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P8_Replace_Mix]^if  ( sign == -0 )  {^564^^^^^549^579^if  ( sign == -1 )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P9_Replace_Statement]^if  ( u * v == 0 )  {^564^^^^^549^579^if  ( sign == -1 )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P9_Replace_Statement]^if  ( n < 0 )  {^564^^^^^549^579^if  ( sign == -1 )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P9_Replace_Statement]^if  ( n < k )  {^564^^^^^549^579^if  ( sign == -1 )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P9_Replace_Statement]^if  ( k == 31 )  {^564^^^^^549^579^if  ( sign == -1 )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P15_Unwrap_Block]^unscaled = java.lang.Math.ceil(unscaled);^564^565^566^567^568^549^579^if  ( sign == -1 )  { unscaled = Math.ceil ( unscaled ) ; } else { unscaled = Math.floor ( unscaled ) ; }^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P16_Remove_Block]^^564^565^566^567^568^549^579^if  ( sign == -1 )  { unscaled = Math.ceil ( unscaled ) ; } else { unscaled = Math.floor ( unscaled ) ; }^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P13_Insert_Block]^if  ( fraction >= 0.5 )  {     unscaled = ceil ( unscaled ) ; }else {     unscaled = floor ( unscaled ) ; }^564^^^^^549^579^[Delete]^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P13_Insert_Block]^if  ( sign ==  ( -1 )  )  {     unscaled = floor ( unscaled ) ; }else {     unscaled = ceil ( unscaled ) ; }^564^^^^^549^579^[Delete]^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P13_Insert_Block]^if  ( fraction > 0.5 )  {     unscaled = ceil ( unscaled ) ; }else {     unscaled = floor ( unscaled ) ; }^564^^^^^549^579^[Delete]^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P5_Replace_Variable]^unscaled = Math.floor ( sign ) ;^567^^^^^564^568^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P7_Replace_Invocation]^unscaled = Math.log ( unscaled ) ;^567^^^^^564^568^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P11_Insert_Donor_Statement]^unscaled = Math.ceil ( unscaled ) ;unscaled = Math.floor ( unscaled ) ;^567^^^^^564^568^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P12_Insert_Condition]^if  ( unscaled != Math.floor ( unscaled )  )  { unscaled = Math.floor ( unscaled ) ; }^567^^^^^564^568^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P7_Replace_Invocation]^unscaled = Math .log ( fraction )  ;^567^^^^^564^568^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P14_Delete_Statement]^^567^^^^^564^568^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P11_Insert_Donor_Statement]^double fraction = Math.abs ( unscaled - Math.floor ( unscaled )  ) ;unscaled = Math.floor ( unscaled ) ;^567^^^^^564^568^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P5_Replace_Variable]^unscaled = Math.ceil ( sign ) ;^565^^^^^550^580^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P7_Replace_Invocation]^unscaled = Math.exp ( unscaled ) ;^565^^^^^550^580^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P11_Insert_Donor_Statement]^unscaled = Math.floor ( unscaled ) ;unscaled = Math.ceil ( unscaled ) ;^565^^^^^550^580^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P12_Insert_Condition]^if  ( unscaled != Math.floor ( unscaled )  )  { unscaled = Math.ceil ( unscaled ) ; }^565^^^^^550^580^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P7_Replace_Invocation]^unscaled = Math .exp ( sign )  ;^565^^^^^550^580^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P14_Delete_Statement]^^565^^^^^550^580^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P2_Replace_Operator]^if  ( fraction >= 0.5 )  {^572^^^^^557^587^if  ( fraction > 0.5 )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P3_Replace_Literal]^if  ( fraction > 0.125 )  {^572^^^^^557^587^if  ( fraction > 0.5 )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P5_Replace_Variable]^if  ( sign > 0.5 )  {^572^^^^^557^587^if  ( fraction > 0.5 )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P8_Replace_Mix]^if  ( fraction > 0.0d )  {^572^^^^^557^587^if  ( fraction > 0.5 )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P15_Unwrap_Block]^unscaled = java.lang.Math.ceil(unscaled);^572^573^574^575^576^557^587^if  ( fraction > 0.5 )  { unscaled = Math.ceil ( unscaled ) ; } else { unscaled = Math.floor ( unscaled ) ; }^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P16_Remove_Block]^^572^573^574^575^576^557^587^if  ( fraction > 0.5 )  { unscaled = Math.ceil ( unscaled ) ; } else { unscaled = Math.floor ( unscaled ) ; }^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P13_Insert_Block]^if  ( fraction >= 0.5 )  {     unscaled = ceil ( unscaled ) ; }else {     unscaled = floor ( unscaled ) ; }^572^^^^^557^587^[Delete]^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P13_Insert_Block]^if  ( sign ==  ( -1 )  )  {     unscaled = ceil ( unscaled ) ; }else {     unscaled = floor ( unscaled ) ; }^572^^^^^557^587^[Delete]^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P13_Insert_Block]^if  ( sign ==  ( -1 )  )  {     unscaled = floor ( unscaled ) ; }else {     unscaled = ceil ( unscaled ) ; }^572^^^^^557^587^[Delete]^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P5_Replace_Variable]^unscaled = Math.floor ( sign ) ;^575^^^^^572^576^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P7_Replace_Invocation]^unscaled = Math.log ( unscaled ) ;^575^^^^^572^576^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P11_Insert_Donor_Statement]^unscaled = Math.ceil ( unscaled ) ;unscaled = Math.floor ( unscaled ) ;^575^^^^^572^576^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P12_Insert_Condition]^if  ( unscaled != Math.floor ( unscaled )  )  { unscaled = Math.floor ( unscaled ) ; }^575^^^^^572^576^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P8_Replace_Mix]^unscaled = Math.log ( sign ) ;^575^^^^^572^576^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P14_Delete_Statement]^^575^^^^^572^576^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P11_Insert_Donor_Statement]^double fraction = Math.abs ( unscaled - Math.floor ( unscaled )  ) ;unscaled = Math.floor ( unscaled ) ;^575^^^^^572^576^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P5_Replace_Variable]^unscaled = Math.ceil ( sign ) ;^573^^^^^558^588^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P7_Replace_Invocation]^unscaled = Math.exp ( unscaled ) ;^573^^^^^558^588^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P11_Insert_Donor_Statement]^unscaled = Math.floor ( unscaled ) ;unscaled = Math.ceil ( unscaled ) ;^573^^^^^558^588^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P12_Insert_Condition]^if  ( unscaled != Math.floor ( unscaled )  )  { unscaled = Math.ceil ( unscaled ) ; }^573^^^^^558^588^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P7_Replace_Invocation]^unscaled = Math .exp ( fraction )  ;^573^^^^^558^588^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P14_Delete_Statement]^^573^^^^^558^588^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P2_Replace_Operator]^if  ( fraction < 0.5 )  {^581^^^^^566^596^if  ( fraction > 0.5 )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P3_Replace_Literal]^if  ( fraction > 0.16666666666666666 )  {^581^^^^^566^596^if  ( fraction > 0.5 )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P5_Replace_Variable]^if  ( sign > 0.5 )  {^581^^^^^566^596^if  ( fraction > 0.5 )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P6_Replace_Expression]^if  ( floor ( unscaled )  )  / 2.0 ==  ( floor (  ( floor ( unscaled )  )  / 2.0 ) )  {^581^^^^^566^596^if  ( fraction > 0.5 )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P6_Replace_Expression]^if  ( floor ( unscaled )  / 2.0 )  {^581^^^^^566^596^if  ( fraction > 0.5 )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P8_Replace_Mix]^if  ( fraction > 3.0d )  {^581^^^^^566^596^if  ( fraction > 0.5 )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P13_Insert_Block]^if  (  (  ( floor ( unscaled )  )  / 2.0 )  ==  ( floor (  (  ( floor ( unscaled )  )  / 2.0 )  )  )  )  {     unscaled = floor ( unscaled ) ; }else {     unscaled = ceil ( unscaled ) ; }^581^^^^^566^596^[Delete]^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P13_Insert_Block]^if  ( fraction < 0.5 )  {     unscaled = floor ( unscaled ) ; }else {     if  (  (  ( floor ( unscaled )  )  / 2.0 )  ==  ( floor (  (  ( floor ( unscaled )  )  / 2.0 )  )  )  )  {         unscaled = floor ( unscaled ) ;     }else {         unscaled = ceil ( unscaled ) ;     } }^581^^^^^566^596^[Delete]^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P2_Replace_Operator]^} else if  ( fraction <= 0.5 )  {^583^^^^^568^598^} else if  ( fraction < 0.5 )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P5_Replace_Variable]^} else if  ( sign < 0.5 )  {^583^^^^^568^598^} else if  ( fraction < 0.5 )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P6_Replace_Expression]^} else if  ( floor ( unscaled )  )  / 2.0 ==  ( floor (  ( floor ( unscaled )  )  / 2.0 ) )  {^583^^^^^568^598^} else if  ( fraction < 0.5 )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P6_Replace_Expression]^} else if  ( floor ( unscaled )  / 2.0 )  {^583^^^^^568^598^} else if  ( fraction < 0.5 )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P6_Replace_Expression]^} else {^583^^^^^568^598^} else if  ( fraction < 0.5 )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P8_Replace_Mix]^}  if  ( fraction < 1.0d )  {^583^^^^^568^598^} else if  ( fraction < 0.5 )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P2_Replace_Operator]^if  ( Math.floor ( unscaled )  / 2.0 > Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  {^586^587^^^^583^592^if  ( Math.floor ( unscaled )  / 2.0 == Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P2_Replace_Operator]^if  ( Math.floor ( unscaled )  * 2.0 == Math.floor ( Math .floor ( unscaled )  * 2.0 )  )  {^586^587^^^^583^592^if  ( Math.floor ( unscaled )  / 2.0 == Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P3_Replace_Literal]^if  ( Math.floor ( unscaled )  / 0.3333333333333333 == Math.floor ( Math .floor ( unscaled )  / 0.3333333333333333 )  )  {^586^587^^^^583^592^if  ( Math.floor ( unscaled )  / 2.0 == Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P3_Replace_Literal]^if  ( Math.floor ( unscaled )  / 8.0 == Math.floor ( Math .floor ( unscaled )  / 8.0 )  )  {^586^587^^^^583^592^if  ( Math.floor ( unscaled )  / 2.0 == Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P5_Replace_Variable]^if  ( Math.floor ( sign )  / 2.0 == Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  {^586^587^^^^583^592^if  ( Math.floor ( unscaled )  / 2.0 == Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P6_Replace_Expression]^if  ( floor ( unscaled )  / 2.0 )  {^586^587^^^^583^592^if  ( Math.floor ( unscaled )  / 2.0 == Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P7_Replace_Invocation]^if  ( Math.log ( unscaled )  / 2.0 == Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  {^586^587^^^^583^592^if  ( Math.floor ( unscaled )  / 2.0 == Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P7_Replace_Invocation]^if  ( Math.pow ( unscaled )  / 2.0 == Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  {^586^587^^^^583^592^if  ( Math.floor ( unscaled )  / 2.0 == Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P7_Replace_Invocation]^if  ( Math .log ( unscaled )   / 2.0 == Math^586^587^^^^583^592^if  ( Math.floor ( unscaled )  / 2.0 == Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P8_Replace_Mix]^if  ( Math.floor ( sign )  / 2.0D == Math.floor ( Math .floor ( unscaled )  / 2.0D )  )  {^586^587^^^^583^592^if  ( Math.floor ( unscaled )  / 2.0 == Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P15_Unwrap_Block]^unscaled = java.lang.Math.floor(unscaled);^586^587^588^589^590^583^592^if  ( Math.floor ( unscaled )  / 2.0 == Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  { unscaled = Math.floor ( unscaled ) ; } else { unscaled = Math.ceil ( unscaled ) ; }^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P16_Remove_Block]^^586^587^588^589^590^583^592^if  ( Math.floor ( unscaled )  / 2.0 == Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  { unscaled = Math.floor ( unscaled ) ; } else { unscaled = Math.ceil ( unscaled ) ; }^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P5_Replace_Variable]^unscaled = Math.ceil ( sign ) ;^590^^^^^583^592^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P7_Replace_Invocation]^unscaled = Math.exp ( unscaled ) ;^590^^^^^583^592^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P7_Replace_Invocation]^unscaled = Math .exp ( fraction )  ;^590^^^^^583^592^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P11_Insert_Donor_Statement]^unscaled = Math.floor ( unscaled ) ;unscaled = Math.ceil ( unscaled ) ;^590^^^^^583^592^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P12_Insert_Condition]^if  ( unscaled != Math.floor ( unscaled )  )  { unscaled = Math.ceil ( unscaled ) ; }^590^^^^^583^592^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P14_Delete_Statement]^^590^^^^^583^592^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P5_Replace_Variable]^unscaled = Math.floor ( sign ) ;^588^^^^^583^592^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P7_Replace_Invocation]^unscaled = Math.log ( unscaled ) ;^588^^^^^583^592^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P11_Insert_Donor_Statement]^unscaled = Math.ceil ( unscaled ) ;unscaled = Math.floor ( unscaled ) ;^588^^^^^583^592^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P12_Insert_Condition]^if  ( unscaled != Math.floor ( unscaled )  )  { unscaled = Math.floor ( unscaled ) ; }^588^^^^^583^592^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P14_Delete_Statement]^^588^^^^^583^592^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P11_Insert_Donor_Statement]^double fraction = Math.abs ( unscaled - Math.floor ( unscaled )  ) ;unscaled = Math.floor ( unscaled ) ;^588^^^^^583^592^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P8_Replace_Mix]^unscaled =  Math.floor ( null ) ;^588^^^^^583^592^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P7_Replace_Invocation]^unscaled = Math .exp ( sign )  ;^590^^^^^583^592^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P7_Replace_Invocation]^if  ( Math .log ( sign )   / 2.0 == Math^586^587^^^^583^592^if  ( Math.floor ( unscaled )  / 2.0 == Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P2_Replace_Operator]^if  ( Math.floor ( unscaled )  + 2.0 == Math.floor ( Math .floor ( unscaled )  + 2.0 )  )  {^586^587^^^^583^592^if  ( Math.floor ( unscaled )  / 2.0 == Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P3_Replace_Literal]^if  ( Math.floor ( unscaled )  / 0.2222222222222222 == Math.floor ( Math .floor ( unscaled )  / 0.2222222222222222 )  )  {^586^587^^^^583^592^if  ( Math.floor ( unscaled )  / 2.0 == Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P8_Replace_Mix]^if  ( Math.log ( sign )  / 2.0 == Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  {^586^587^^^^583^592^if  ( Math.floor ( unscaled )  / 2.0 == Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P5_Replace_Variable]^unscaled = Math.floor ( sign ) ;^584^^^^^569^599^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P7_Replace_Invocation]^unscaled = Math.log ( unscaled ) ;^584^^^^^569^599^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P11_Insert_Donor_Statement]^unscaled = Math.ceil ( unscaled ) ;unscaled = Math.floor ( unscaled ) ;^584^^^^^569^599^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P12_Insert_Condition]^if  ( unscaled != Math.floor ( unscaled )  )  { unscaled = Math.floor ( unscaled ) ; }^584^^^^^569^599^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P14_Delete_Statement]^^584^^^^^569^599^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P11_Insert_Donor_Statement]^double fraction = Math.abs ( unscaled - Math.floor ( unscaled )  ) ;unscaled = Math.floor ( unscaled ) ;^584^^^^^569^599^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P2_Replace_Operator]^if  ( Math.floor ( unscaled )  / 2.0 <= Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  {^586^587^^^^571^601^if  ( Math.floor ( unscaled )  / 2.0 == Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P2_Replace_Operator]^if  ( Math.floor ( unscaled )  + 2.0 == Math.floor ( Math .floor ( unscaled )  + 2.0 )  )  {^586^587^^^^571^601^if  ( Math.floor ( unscaled )  / 2.0 == Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P2_Replace_Operator]^if  ( Math.floor ( unscaled )  * 2.0 == Math.floor ( Math .floor ( unscaled )  * 2.0 )  )  {^586^587^^^^571^601^if  ( Math.floor ( unscaled )  / 2.0 == Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P3_Replace_Literal]^if  ( Math.floor ( unscaled )  / 12.0 == Math.floor ( Math .floor ( unscaled )  / 12.0 )  )  {^586^587^^^^571^601^if  ( Math.floor ( unscaled )  / 2.0 == Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P3_Replace_Literal]^if  ( Math.floor ( unscaled )  / 10.0 == Math.floor ( Math .floor ( unscaled )  / 10.0 )  )  {^586^587^^^^571^601^if  ( Math.floor ( unscaled )  / 2.0 == Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P5_Replace_Variable]^if  ( Math.floor ( sign )  / 2.0 == Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  {^586^587^^^^571^601^if  ( Math.floor ( unscaled )  / 2.0 == Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P6_Replace_Expression]^if  ( floor ( unscaled )  / 2.0 )  {^586^587^^^^571^601^if  ( Math.floor ( unscaled )  / 2.0 == Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P7_Replace_Invocation]^if  ( Math.log ( unscaled )  / 2.0 == Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  {^586^587^^^^571^601^if  ( Math.floor ( unscaled )  / 2.0 == Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P7_Replace_Invocation]^if  ( Math.pow ( unscaled )  / 2.0 == Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  {^586^587^^^^571^601^if  ( Math.floor ( unscaled )  / 2.0 == Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P7_Replace_Invocation]^if  ( Math .log ( fraction )   / 2.0 == Math^586^587^^^^571^601^if  ( Math.floor ( unscaled )  / 2.0 == Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P7_Replace_Invocation]^if  ( Math .log ( unscaled )   / 2.0 == Math^586^587^^^^571^601^if  ( Math.floor ( unscaled )  / 2.0 == Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P8_Replace_Mix]^if  ( Math.log ( unscaled )  / 2.0D == Math.floor ( Math .floor ( unscaled )  / 2.0D )  )  {^586^587^^^^571^601^if  ( Math.floor ( unscaled )  / 2.0 == Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P15_Unwrap_Block]^unscaled = java.lang.Math.floor(unscaled);^586^587^588^589^590^571^601^if  ( Math.floor ( unscaled )  / 2.0 == Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  { unscaled = Math.floor ( unscaled ) ; } else { unscaled = Math.ceil ( unscaled ) ; }^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P16_Remove_Block]^^586^587^588^589^590^571^601^if  ( Math.floor ( unscaled )  / 2.0 == Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  { unscaled = Math.floor ( unscaled ) ; } else { unscaled = Math.ceil ( unscaled ) ; }^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P5_Replace_Variable]^unscaled = Math.ceil ( sign ) ;^590^^^^^586^591^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P7_Replace_Invocation]^unscaled = Math.exp ( unscaled ) ;^590^^^^^586^591^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P11_Insert_Donor_Statement]^unscaled = Math.floor ( unscaled ) ;unscaled = Math.ceil ( unscaled ) ;^590^^^^^586^591^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P12_Insert_Condition]^if  ( unscaled != Math.floor ( unscaled )  )  { unscaled = Math.ceil ( unscaled ) ; }^590^^^^^586^591^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P14_Delete_Statement]^^590^^^^^586^591^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P5_Replace_Variable]^unscaled = Math.floor ( sign ) ;^588^^^^^586^591^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P7_Replace_Invocation]^unscaled = Math.log ( unscaled ) ;^588^^^^^586^591^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P11_Insert_Donor_Statement]^unscaled = Math.ceil ( unscaled ) ;unscaled = Math.floor ( unscaled ) ;^588^^^^^586^591^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P12_Insert_Condition]^if  ( unscaled != Math.floor ( unscaled )  )  { unscaled = Math.floor ( unscaled ) ; }^588^^^^^586^591^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P14_Delete_Statement]^^588^^^^^586^591^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P11_Insert_Donor_Statement]^double fraction = Math.abs ( unscaled - Math.floor ( unscaled )  ) ;unscaled = Math.floor ( unscaled ) ;^588^^^^^586^591^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P5_Replace_Variable]^unscaled = Math.floor ( sign ) ;^588^^^^^573^603^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P7_Replace_Invocation]^unscaled = Math.log ( unscaled ) ;^588^^^^^573^603^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P11_Insert_Donor_Statement]^unscaled = Math.ceil ( unscaled ) ;unscaled = Math.floor ( unscaled ) ;^588^^^^^573^603^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P12_Insert_Condition]^if  ( unscaled != Math.floor ( unscaled )  )  { unscaled = Math.floor ( unscaled ) ; }^588^^^^^573^603^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P5_Replace_Variable]^unscaled = Math.ceil ( sign ) ;^590^^^^^575^605^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P7_Replace_Invocation]^unscaled = Math.exp ( unscaled ) ;^590^^^^^575^605^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P11_Insert_Donor_Statement]^unscaled = Math.floor ( unscaled ) ;unscaled = Math.ceil ( unscaled ) ;^590^^^^^575^605^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P12_Insert_Condition]^if  ( unscaled != Math.floor ( unscaled )  )  { unscaled = Math.ceil ( unscaled ) ; }^590^^^^^575^605^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P7_Replace_Invocation]^unscaled = Math .log ( sign )  ;^584^^^^^569^599^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P8_Replace_Mix]^unscaled = Math .log ( fraction )  ;^584^^^^^569^599^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P7_Replace_Invocation]^if  ( Math .log ( sign )   / 2.0 == Math^586^587^^^^571^601^if  ( Math.floor ( unscaled )  / 2.0 == Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P8_Replace_Mix]^if  ( Math.log ( sign )  / 2.0 == Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  {^586^587^^^^571^601^if  ( Math.floor ( unscaled )  / 2.0 == Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P3_Replace_Literal]^if  ( Math.floor ( unscaled )  / 0.2222222222222222 == Math.floor ( Math .floor ( unscaled )  / 0.2222222222222222 )  )  {^586^587^^^^571^601^if  ( Math.floor ( unscaled )  / 2.0 == Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P14_Delete_Statement]^^588^^^^^573^603^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P11_Insert_Donor_Statement]^double fraction = Math.abs ( unscaled - Math.floor ( unscaled )  ) ;unscaled = Math.floor ( unscaled ) ;^588^^^^^573^603^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P14_Delete_Statement]^^590^^^^^575^605^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P5_Replace_Variable]^unscaled = Math.ceil ( sign ) ;^582^^^^^567^597^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P7_Replace_Invocation]^unscaled = Math.exp ( unscaled ) ;^582^^^^^567^597^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P11_Insert_Donor_Statement]^unscaled = Math.floor ( unscaled ) ;unscaled = Math.ceil ( unscaled ) ;^582^^^^^567^597^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P12_Insert_Condition]^if  ( unscaled != Math.floor ( unscaled )  )  { unscaled = Math.ceil ( unscaled ) ; }^582^^^^^567^597^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P14_Delete_Statement]^^582^^^^^567^597^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P2_Replace_Operator]^} else if  ( fraction == 0.5 )  {^583^^^^^568^598^} else if  ( fraction < 0.5 )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P3_Replace_Literal]^} else if  ( fraction < 0.25 )  {^583^^^^^568^598^} else if  ( fraction < 0.5 )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P2_Replace_Operator]^if  ( Math.floor ( unscaled )  / 2.0 != Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  {^586^587^^^^583^592^if  ( Math.floor ( unscaled )  / 2.0 == Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P2_Replace_Operator]^if  ( Math.floor ( unscaled )  - 2.0 == Math.floor ( Math .floor ( unscaled )  - 2.0 )  )  {^586^587^^^^583^592^if  ( Math.floor ( unscaled )  / 2.0 == Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P3_Replace_Literal]^if  ( Math.floor ( unscaled )  / 0.25 == Math.floor ( Math .floor ( unscaled )  / 0.25 )  )  {^586^587^^^^583^592^if  ( Math.floor ( unscaled )  / 2.0 == Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P8_Replace_Mix]^if  ( Math.floor ( unscaled )  / 2.0d == Math.floor ( Math .floor ( unscaled )  / 2.0d )  )  {^586^587^^^^583^592^if  ( Math.floor ( unscaled )  / 2.0 == Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P8_Replace_Mix]^unscaled = Math.log ( sign ) ;^588^^^^^583^592^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P3_Replace_Literal]^if  ( Math.floor ( unscaled )  / 14.0 == Math.floor ( Math .floor ( unscaled )  / 14.0 )  )  {^586^587^^^^583^592^if  ( Math.floor ( unscaled )  / 2.0 == Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P8_Replace_Mix]^if  ( Math .log ( fraction )   / 2.0 == Math^586^587^^^^583^592^if  ( Math.floor ( unscaled )  / 2.0 == Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P8_Replace_Mix]^unscaled = Math .log ( fraction )  ;^588^^^^^583^592^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P2_Replace_Operator]^if  ( Math.floor ( unscaled )  / 2.0 != Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  {^586^587^^^^571^601^if  ( Math.floor ( unscaled )  / 2.0 == Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P2_Replace_Operator]^if  ( Math.floor ( unscaled )  - 2.0 == Math.floor ( Math .floor ( unscaled )  - 2.0 )  )  {^586^587^^^^571^601^if  ( Math.floor ( unscaled )  / 2.0 == Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P3_Replace_Literal]^if  ( Math.floor ( unscaled )  / 0.25 == Math.floor ( Math .floor ( unscaled )  / 0.25 )  )  {^586^587^^^^571^601^if  ( Math.floor ( unscaled )  / 2.0 == Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P3_Replace_Literal]^if  ( Math.floor ( unscaled )  / 0.6666666666666666 == Math.floor ( Math .floor ( unscaled )  / 0.6666666666666666 )  )  {^586^587^^^^571^601^if  ( Math.floor ( unscaled )  / 2.0 == Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P8_Replace_Mix]^if  ( Math.floor ( unscaled )  / 2.0D == Math.floor ( Math .floor ( unscaled )  / 2.0D )  )  {^586^587^^^^571^601^if  ( Math.floor ( unscaled )  / 2.0 == Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P7_Replace_Invocation]^unscaled = Math .exp ( fraction )  ;^590^^^^^586^591^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P7_Replace_Invocation]^unscaled = Math .log ( fraction )  ;^588^^^^^586^591^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P2_Replace_Operator]^if  ( fraction > 0.5 )  {^597^^^^^582^612^if  ( fraction >= 0.5 )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P3_Replace_Literal]^if  ( fraction >= 0.16666666666666666 )  {^597^^^^^582^612^if  ( fraction >= 0.5 )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P5_Replace_Variable]^if  ( sign >= 0.5 )  {^597^^^^^582^612^if  ( fraction >= 0.5 )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P8_Replace_Mix]^if  ( fraction >= 2.0d )  {^597^^^^^582^612^if  ( fraction >= 0.5 )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P15_Unwrap_Block]^unscaled = java.lang.Math.ceil(unscaled);^597^598^599^600^601^582^612^if  ( fraction >= 0.5 )  { unscaled = Math.ceil ( unscaled ) ; } else { unscaled = Math.floor ( unscaled ) ; }^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P16_Remove_Block]^^597^598^599^600^601^582^612^if  ( fraction >= 0.5 )  { unscaled = Math.ceil ( unscaled ) ; } else { unscaled = Math.floor ( unscaled ) ; }^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P13_Insert_Block]^if  ( sign ==  ( -1 )  )  {     unscaled = ceil ( unscaled ) ; }else {     unscaled = floor ( unscaled ) ; }^597^^^^^582^612^[Delete]^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P13_Insert_Block]^if  ( sign ==  ( -1 )  )  {     unscaled = floor ( unscaled ) ; }else {     unscaled = ceil ( unscaled ) ; }^597^^^^^582^612^[Delete]^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P13_Insert_Block]^if  ( fraction > 0.5 )  {     unscaled = ceil ( unscaled ) ; }else {     unscaled = floor ( unscaled ) ; }^597^^^^^582^612^[Delete]^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P5_Replace_Variable]^unscaled = Math.floor ( sign ) ;^600^^^^^597^601^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P7_Replace_Invocation]^unscaled = Math.log ( unscaled ) ;^600^^^^^597^601^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P11_Insert_Donor_Statement]^unscaled = Math.ceil ( unscaled ) ;unscaled = Math.floor ( unscaled ) ;^600^^^^^597^601^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P12_Insert_Condition]^if  ( unscaled != Math.floor ( unscaled )  )  { unscaled = Math.floor ( unscaled ) ; }^600^^^^^597^601^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P14_Delete_Statement]^^600^^^^^597^601^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P11_Insert_Donor_Statement]^double fraction = Math.abs ( unscaled - Math.floor ( unscaled )  ) ;unscaled = Math.floor ( unscaled ) ;^600^^^^^597^601^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P5_Replace_Variable]^unscaled = Math.ceil ( sign ) ;^598^^^^^583^613^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P7_Replace_Invocation]^unscaled = Math.exp ( unscaled ) ;^598^^^^^583^613^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P11_Insert_Donor_Statement]^unscaled = Math.floor ( unscaled ) ;unscaled = Math.ceil ( unscaled ) ;^598^^^^^583^613^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P12_Insert_Condition]^if  ( unscaled != Math.floor ( unscaled )  )  { unscaled = Math.ceil ( unscaled ) ; }^598^^^^^583^613^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P7_Replace_Invocation]^unscaled = Math .exp ( sign )  ;^598^^^^^583^613^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P14_Delete_Statement]^^598^^^^^583^613^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P2_Replace_Operator]^if  ( unscaled <= Math.floor ( unscaled )  )  {^605^^^^^590^620^if  ( unscaled != Math.floor ( unscaled )  )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P5_Replace_Variable]^if  ( sign != Math.floor ( unscaled )  )  {^605^^^^^590^620^if  ( unscaled != Math.floor ( unscaled )  )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P7_Replace_Invocation]^if  ( unscaled != Math.log ( unscaled )  )  {^605^^^^^590^620^if  ( unscaled != Math.floor ( unscaled )  )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P8_Replace_Mix]^if  ( sign != Math.log ( unscaled )  )  {^605^^^^^590^620^if  ( unscaled != Math.floor ( unscaled )  )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P15_Unwrap_Block]^throw new java.lang.ArithmeticException("Inexact result from rounding");^605^606^607^^^590^620^if  ( unscaled != Math.floor ( unscaled )  )  { throw new ArithmeticException  (" ")  ; }^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P16_Remove_Block]^^605^606^607^^^590^620^if  ( unscaled != Math.floor ( unscaled )  )  { throw new ArithmeticException  (" ")  ; }^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P13_Insert_Block]^if  ( result ==  ( MAX_VALUE )  )  {     throw new ArithmeticException ( "result too large to represent in a long integer" ) ; }^605^^^^^590^620^[Delete]^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P8_Replace_Mix]^return false;^606^^^^^591^621^throw new ArithmeticException  (" ")  ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException  (" ")  ;throw new ArithmeticException  (" ")  ;^606^^^^^591^621^throw new ArithmeticException  (" ")  ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P13_Insert_Block]^if  ( unscaled !=  ( floor ( unscaled )  )  )  {     throw new ArithmeticException ( "Inexact result from rounding" ) ; }^606^^^^^591^621^[Delete]^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P5_Replace_Variable]^unscaled = Math.ceil ( sign ) ;^557^^^^^542^572^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P7_Replace_Invocation]^unscaled = Math.exp ( unscaled ) ;^557^^^^^542^572^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P11_Insert_Donor_Statement]^unscaled = Math.floor ( unscaled ) ;unscaled = Math.ceil ( unscaled ) ;^557^^^^^542^572^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P12_Insert_Condition]^if  ( unscaled != Math.floor ( unscaled )  )  { unscaled = Math.ceil ( unscaled ) ; }^557^^^^^542^572^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P5_Replace_Variable]^unscaled = Math.floor ( sign ) ;^561^^^^^546^576^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P7_Replace_Invocation]^unscaled = Math.log ( unscaled ) ;^561^^^^^546^576^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P11_Insert_Donor_Statement]^unscaled = Math.ceil ( unscaled ) ;unscaled = Math.floor ( unscaled ) ;^561^^^^^546^576^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P12_Insert_Condition]^if  ( unscaled != Math.floor ( unscaled )  )  { unscaled = Math.floor ( unscaled ) ; break; }^561^562^^^^546^576^unscaled = Math.floor ( unscaled ) ; break;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P5_Replace_Variable]^unscaled = Math.floor ( sign ) ;^567^^^^^552^582^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P7_Replace_Invocation]^unscaled = Math.log ( unscaled ) ;^567^^^^^552^582^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P7_Replace_Invocation]^unscaled = Math .log ( sign )  ;^567^^^^^552^582^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P11_Insert_Donor_Statement]^unscaled = Math.ceil ( unscaled ) ;unscaled = Math.floor ( unscaled ) ;^567^^^^^552^582^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P12_Insert_Condition]^if  ( unscaled != Math.floor ( unscaled )  )  { unscaled = Math.floor ( unscaled ) ; }^567^^^^^552^582^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P7_Replace_Invocation]^unscaled = Math .exp ( sign )  ;^573^^^^^558^588^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P5_Replace_Variable]^unscaled = Math.floor ( sign ) ;^575^^^^^560^590^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P7_Replace_Invocation]^unscaled = Math.log ( unscaled ) ;^575^^^^^560^590^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P11_Insert_Donor_Statement]^unscaled = Math.ceil ( unscaled ) ;unscaled = Math.floor ( unscaled ) ;^575^^^^^560^590^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P12_Insert_Condition]^if  ( unscaled != Math.floor ( unscaled )  )  { unscaled = Math.floor ( unscaled ) ; }^575^^^^^560^590^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P5_Replace_Variable]^unscaled = Math.floor ( sign ) ;^600^^^^^585^615^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P7_Replace_Invocation]^unscaled = Math.log ( unscaled ) ;^600^^^^^585^615^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P11_Insert_Donor_Statement]^unscaled = Math.ceil ( unscaled ) ;unscaled = Math.floor ( unscaled ) ;^600^^^^^585^615^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P12_Insert_Condition]^if  ( unscaled != Math.floor ( unscaled )  )  { unscaled = Math.floor ( unscaled ) ; }^600^^^^^585^615^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P5_Replace_Variable]^unscaled = Math.ceil ( sign ) ;^610^^^^^595^625^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P7_Replace_Invocation]^unscaled = Math.exp ( unscaled ) ;^610^^^^^595^625^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P11_Insert_Donor_Statement]^unscaled = Math.floor ( unscaled ) ;unscaled = Math.ceil ( unscaled ) ;^610^^^^^595^625^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P12_Insert_Condition]^if  ( unscaled != Math.floor ( unscaled )  )  { unscaled = Math.ceil ( unscaled ) ; break; }^610^611^^^^595^625^unscaled = Math.ceil ( unscaled ) ; break;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P1_Replace_Type]^int fraction = Math.abs ( unscaled - Math.floor ( unscaled )  ) ;^571^^^^^556^586^double fraction = Math.abs ( unscaled - Math.floor ( unscaled )  ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P2_Replace_Operator]^double fraction = Math.abs ( unscaled  ^  Math.floor ( unscaled )  ) ;^571^^^^^556^586^double fraction = Math.abs ( unscaled - Math.floor ( unscaled )  ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P7_Replace_Invocation]^double fraction = Math.pow ( unscaled - Math.floor ( unscaled )  ) ;^571^^^^^556^586^double fraction = Math.abs ( unscaled - Math.floor ( unscaled )  ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P7_Replace_Invocation]^double fraction = Math.abs ( unscaled - Math.log ( unscaled )  ) ;^571^^^^^556^586^double fraction = Math.abs ( unscaled - Math.floor ( unscaled )  ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P8_Replace_Mix]^double fraction = Math.abs ( sign - Math.floor ( unscaled )  ) ;^571^^^^^556^586^double fraction = Math.abs ( unscaled - Math.floor ( unscaled )  ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P12_Insert_Condition]^if  ( unscaled != Math.floor ( unscaled )  )  { double fraction = Math.abs ( unscaled - Math.floor ( unscaled )  ) ; }^571^^^^^556^586^double fraction = Math.abs ( unscaled - Math.floor ( unscaled )  ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P1_Replace_Type]^int fraction = Math.abs ( unscaled - Math.floor ( unscaled )  ) ;^580^^^^^565^595^double fraction = Math.abs ( unscaled - Math.floor ( unscaled )  ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P2_Replace_Operator]^double fraction = Math.abs ( unscaled  <=  Math.floor ( unscaled )  ) ;^580^^^^^565^595^double fraction = Math.abs ( unscaled - Math.floor ( unscaled )  ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P5_Replace_Variable]^double fraction = Math.abs ( sign - Math.floor ( unscaled )  ) ;^580^^^^^565^595^double fraction = Math.abs ( unscaled - Math.floor ( unscaled )  ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P7_Replace_Invocation]^double fraction = Math.pow ( unscaled - Math.floor ( unscaled )  ) ;^580^^^^^565^595^double fraction = Math.abs ( unscaled - Math.floor ( unscaled )  ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P7_Replace_Invocation]^double fraction = Math .abs ( roundingMethod )  ;^580^^^^^565^595^double fraction = Math.abs ( unscaled - Math.floor ( unscaled )  ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P7_Replace_Invocation]^double fraction = Math.abs ( unscaled - Math.log ( unscaled )  ) ;^580^^^^^565^595^double fraction = Math.abs ( unscaled - Math.floor ( unscaled )  ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P8_Replace_Mix]^double fraction = Math.abs ( sign - Math.log ( unscaled )  ) ;^580^^^^^565^595^double fraction = Math.abs ( unscaled - Math.floor ( unscaled )  ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P12_Insert_Condition]^if  ( unscaled != Math.floor ( unscaled )  )  { double fraction = Math.abs ( unscaled - Math.floor ( unscaled )  ) ; }^580^^^^^565^595^double fraction = Math.abs ( unscaled - Math.floor ( unscaled )  ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P1_Replace_Type]^int fraction = Math.abs ( unscaled - Math.floor ( unscaled )  ) ;^596^^^^^581^611^double fraction = Math.abs ( unscaled - Math.floor ( unscaled )  ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P2_Replace_Operator]^double fraction = Math.abs ( unscaled  >  Math.floor ( unscaled )  ) ;^596^^^^^581^611^double fraction = Math.abs ( unscaled - Math.floor ( unscaled )  ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P5_Replace_Variable]^double fraction = Math.abs ( sign - Math.floor ( unscaled )  ) ;^596^^^^^581^611^double fraction = Math.abs ( unscaled - Math.floor ( unscaled )  ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P7_Replace_Invocation]^double fraction = Math.pow ( unscaled - Math.floor ( unscaled )  ) ;^596^^^^^581^611^double fraction = Math.abs ( unscaled - Math.floor ( unscaled )  ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P7_Replace_Invocation]^double fraction = Math .abs ( roundingMethod )  ;^596^^^^^581^611^double fraction = Math.abs ( unscaled - Math.floor ( unscaled )  ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P7_Replace_Invocation]^double fraction = Math.abs ( unscaled - Math.log ( unscaled )  ) ;^596^^^^^581^611^double fraction = Math.abs ( unscaled - Math.floor ( unscaled )  ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P12_Insert_Condition]^if  ( unscaled != Math.floor ( unscaled )  )  { double fraction = Math.abs ( unscaled - Math.floor ( unscaled )  ) ; }^596^^^^^581^611^double fraction = Math.abs ( unscaled - Math.floor ( unscaled )  ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P11_Insert_Donor_Statement]^throw new ArithmeticException  (" ")  ;throw new IllegalArgumentException  (" ")  ;^613^^^^^598^628^throw new IllegalArgumentException  (" ")  ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P7_Replace_Invocation]^unscaled = Math .exp ( sign )  ;^557^^^^^542^572^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P14_Delete_Statement]^^557^^^^^542^572^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P14_Delete_Statement]^^561^^^^^546^576^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P11_Insert_Donor_Statement]^double fraction = Math.abs ( unscaled - Math.floor ( unscaled )  ) ;unscaled = Math.floor ( unscaled ) ;^561^^^^^546^576^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P12_Insert_Condition]^if  ( unscaled != Math.floor ( unscaled )  )  { unscaled = Math.floor ( unscaled ) ; }^561^^^^^546^576^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P14_Delete_Statement]^^567^^^^^552^582^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P11_Insert_Donor_Statement]^double fraction = Math.abs ( unscaled - Math.floor ( unscaled )  ) ;unscaled = Math.floor ( unscaled ) ;^567^^^^^552^582^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P2_Replace_Operator]^double fraction = Math.abs ( unscaled  <  Math.floor ( unscaled )  ) ;^571^^^^^556^586^double fraction = Math.abs ( unscaled - Math.floor ( unscaled )  ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P7_Replace_Invocation]^double fraction = Math .abs ( roundingMethod )  ;^571^^^^^556^586^double fraction = Math.abs ( unscaled - Math.floor ( unscaled )  ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P14_Delete_Statement]^^571^^^^^556^586^double fraction = Math.abs ( unscaled - Math.floor ( unscaled )  ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P11_Insert_Donor_Statement]^unscaled = Math.floor ( unscaled ) ;double fraction = Math.abs ( unscaled - Math.floor ( unscaled )  ) ;^571^^^^^556^586^double fraction = Math.abs ( unscaled - Math.floor ( unscaled )  ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P14_Delete_Statement]^^575^^^^^560^590^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P11_Insert_Donor_Statement]^double fraction = Math.abs ( unscaled - Math.floor ( unscaled )  ) ;unscaled = Math.floor ( unscaled ) ;^575^^^^^560^590^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P2_Replace_Operator]^double fraction = Math.abs ( unscaled  >  Math.floor ( unscaled )  ) ;^580^^^^^565^595^double fraction = Math.abs ( unscaled - Math.floor ( unscaled )  ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P14_Delete_Statement]^^580^^^^^565^595^double fraction = Math.abs ( unscaled - Math.floor ( unscaled )  ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P11_Insert_Donor_Statement]^unscaled = Math.floor ( unscaled ) ;double fraction = Math.abs ( unscaled - Math.floor ( unscaled )  ) ;^580^^^^^565^595^double fraction = Math.abs ( unscaled - Math.floor ( unscaled )  ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P8_Replace_Mix]^unscaled = Math.exp ( sign ) ;^582^^^^^567^597^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P3_Replace_Literal]^if  ( Math.floor ( unscaled )  / 0.2857142857142857 == Math.floor ( Math .floor ( unscaled )  / 0.2857142857142857 )  )  {^586^587^^^^571^601^if  ( Math.floor ( unscaled )  / 2.0 == Math.floor ( Math .floor ( unscaled )  / 2.0 )  )  {^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P8_Replace_Mix]^unscaled = Math.log ( sign ) ;^588^^^^^573^603^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P8_Replace_Mix]^unscaled = Math.exp ( sign ) ;^590^^^^^575^605^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P2_Replace_Operator]^double fraction = Math.abs ( unscaled  |  Math.floor ( unscaled )  ) ;^596^^^^^581^611^double fraction = Math.abs ( unscaled - Math.floor ( unscaled )  ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P7_Replace_Invocation]^double fraction = Math.abs ( unscaled - Math .log ( sign )   ) ;^596^^^^^581^611^double fraction = Math.abs ( unscaled - Math.floor ( unscaled )  ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P8_Replace_Mix]^double fraction = Math.abs ( sign - Math .log ( fraction )   ) ;^596^^^^^581^611^double fraction = Math.abs ( unscaled - Math.floor ( unscaled )  ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P14_Delete_Statement]^^596^^^^^581^611^double fraction = Math.abs ( unscaled - Math.floor ( unscaled )  ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P11_Insert_Donor_Statement]^unscaled = Math.floor ( unscaled ) ;double fraction = Math.abs ( unscaled - Math.floor ( unscaled )  ) ;^596^^^^^581^611^double fraction = Math.abs ( unscaled - Math.floor ( unscaled )  ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P8_Replace_Mix]^double fraction = Math.abs ( sign - Math.log ( unscaled )  ) ;^596^^^^^581^611^double fraction = Math.abs ( unscaled - Math.floor ( unscaled )  ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P8_Replace_Mix]^unscaled = Math .exp ( fraction )  ;^598^^^^^583^613^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P7_Replace_Invocation]^unscaled = Math .log ( sign )  ;^600^^^^^585^615^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P14_Delete_Statement]^^600^^^^^585^615^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P11_Insert_Donor_Statement]^double fraction = Math.abs ( unscaled - Math.floor ( unscaled )  ) ;unscaled = Math.floor ( unscaled ) ;^600^^^^^585^615^unscaled = Math.floor ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P7_Replace_Invocation]^unscaled = Math .exp ( sign )  ;^610^^^^^595^625^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P14_Delete_Statement]^^610^^^^^595^625^unscaled = Math.ceil ( unscaled ) ;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P5_Replace_Variable]^return sign;^615^^^^^600^630^return unscaled;^[CLASS] MathUtils  [METHOD] roundUnscaled [RETURN_TYPE] double   double unscaled double sign int roundingMethod [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  fraction  sign  unscaled  int  roundingMethod  
[P2_Replace_Operator]^return  ( x > ZB )  ? ZB :  ( x > ZB )  ? PB : NB;^629^^^^^628^630^return  ( x == ZB )  ? ZB :  ( x > ZB )  ? PB : NB;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] byte   final byte x [VARIABLES] short  NS  PS  ZS  x  byte  NB  PB  ZB  x  boolean  
[P2_Replace_Operator]^return  ( x == ZB )  ? ZB :  ( x >= ZB )  ? PB : NB;^629^^^^^628^630^return  ( x == ZB )  ? ZB :  ( x > ZB )  ? PB : NB;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] byte   final byte x [VARIABLES] short  NS  PS  ZS  x  byte  NB  PB  ZB  x  boolean  
[P5_Replace_Variable]^return  ( ZB == ZB )  ? ZB :  ( x > ZB )  ? PB : NB;^629^^^^^628^630^return  ( x == ZB )  ? ZB :  ( x > ZB )  ? PB : NB;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] byte   final byte x [VARIABLES] short  NS  PS  ZS  x  byte  NB  PB  ZB  x  boolean  
[P5_Replace_Variable]^return  ( x == x )  ? ZB :  ( x > ZB )  ? PB : NB;^629^^^^^628^630^return  ( x == ZB )  ? ZB :  ( x > ZB )  ? PB : NB;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] byte   final byte x [VARIABLES] short  NS  PS  ZS  x  byte  NB  PB  ZB  x  boolean  
[P5_Replace_Variable]^return  ( x == ZB )  ? ZB :  ( x > ZB )  ? x : NB;^629^^^^^628^630^return  ( x == ZB )  ? ZB :  ( x > ZB )  ? PB : NB;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] byte   final byte x [VARIABLES] short  NS  PS  ZS  x  byte  NB  PB  ZB  x  boolean  
[P5_Replace_Variable]^return  ( x == ZB )  ? ZB :  ( x > ZB )  ? PB : x;^629^^^^^628^630^return  ( x == ZB )  ? ZB :  ( x > ZB )  ? PB : NB;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] byte   final byte x [VARIABLES] short  NS  PS  ZS  x  byte  NB  PB  ZB  x  boolean  
[P5_Replace_Variable]^return  ( NB == ZB )  ? ZB :  ( x > ZB )  ? PB : x;^629^^^^^628^630^return  ( x == ZB )  ? ZB :  ( x > ZB )  ? PB : NB;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] byte   final byte x [VARIABLES] short  NS  PS  ZS  x  byte  NB  PB  ZB  x  boolean  
[P5_Replace_Variable]^return  ( x == NB )  ? ZB :  ( x > ZB )  ? PB : ZB;^629^^^^^628^630^return  ( x == ZB )  ? ZB :  ( x > ZB )  ? PB : NB;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] byte   final byte x [VARIABLES] short  NS  PS  ZS  x  byte  NB  PB  ZB  x  boolean  
[P5_Replace_Variable]^return  ( x == ZB )  ? ZB :  ( x > ZB )  ? NB : PB;^629^^^^^628^630^return  ( x == ZB )  ? ZB :  ( x > ZB )  ? PB : NB;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] byte   final byte x [VARIABLES] short  NS  PS  ZS  x  byte  NB  PB  ZB  x  boolean  
[P6_Replace_Expression]^return  (  ( x > ZB )  ? PB^629^^^^^628^630^return  ( x == ZB )  ? ZB :  ( x > ZB )  ? PB : NB;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] byte   final byte x [VARIABLES] short  NS  PS  ZS  x  byte  NB  PB  ZB  x  boolean  
[P8_Replace_Mix]^return  ( ZB ;^629^^^^^628^630^return  ( x == ZB )  ? ZB :  ( x > ZB )  ? PB : NB;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] byte   final byte x [VARIABLES] short  NS  PS  ZS  x  byte  NB  PB  ZB  x  boolean  
[P7_Replace_Invocation]^if  ( Double.doubleToLongBits ( x )  )  {^645^^^^^644^649^if  ( Double.isNaN ( x )  )  {^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] double   final double x [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  x  
[P9_Replace_Statement]^if  ( Float.isNaN ( x )  )  {^645^^^^^644^649^if  ( Double.isNaN ( x )  )  {^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] double   final double x [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  x  
[P15_Unwrap_Block]^return java.lang.Double.NaN;^645^646^647^^^644^649^if  ( Double.isNaN ( x )  )  { return Double.NaN; }^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] double   final double x [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  x  
[P16_Remove_Block]^^645^646^647^^^644^649^if  ( Double.isNaN ( x )  )  { return Double.NaN; }^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] double   final double x [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  x  
[P13_Insert_Block]^if  ( isNaN ( x )  )  {     return NaN; }^645^^^^^644^649^[Delete]^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] double   final double x [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  x  
[P2_Replace_Operator]^return  ( x != 0.0 )  ? 0.0 :  ( x > 0.0 )  ? 1.0 : -1.0;^648^^^^^644^649^return  ( x == 0.0 )  ? 0.0 :  ( x > 0.0 )  ? 1.0 : -1.0;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] double   final double x [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  x  
[P2_Replace_Operator]^return  ( x == 0.0 )  ? 0.0 :  ( x >= 0.0 )  ? 1.0 : -1.0;^648^^^^^644^649^return  ( x == 0.0 )  ? 0.0 :  ( x > 0.0 )  ? 1.0 : -1.0;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] double   final double x [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  x  
[P3_Replace_Literal]^return  ( x == NaN )  ? NaN :  ( x > NaN )  ? 1.0 : -1.0;^648^^^^^644^649^return  ( x == 0.0 )  ? 0.0 :  ( x > 0.0 )  ? 1.0 : -1.0;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] double   final double x [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  x  
[P3_Replace_Literal]^return  ( x == 0.0 )  ? 0.0 :  ( x > 0.0 )  ? 7.0 : -7.0;^648^^^^^644^649^return  ( x == 0.0 )  ? 0.0 :  ( x > 0.0 )  ? 1.0 : -1.0;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] double   final double x [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  x  
[P3_Replace_Literal]^return  ( x == 0.0 )  ? 0.0 :  ( x > 0.0 )  ? Infinity : -Infinity;^648^^^^^644^649^return  ( x == 0.0 )  ? 0.0 :  ( x > 0.0 )  ? 1.0 : -1.0;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] double   final double x [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  x  
[P6_Replace_Expression]^return  (  ( x > 0.0 )  ? 1.0^648^^^^^644^649^return  ( x == 0.0 )  ? 0.0 :  ( x > 0.0 )  ? 1.0 : -1.0;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] double   final double x [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  x  
[P8_Replace_Mix]^return  ( x ;^648^^^^^644^649^return  ( x == 0.0 )  ? 0.0 :  ( x > 0.0 )  ? 1.0 : -1.0;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] double   final double x [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  x  
[P9_Replace_Statement]^if  ( Double.isNaN ( x )  )  {^663^^^^^662^667^if  ( Float.isNaN ( x )  )  {^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] float   final float x [VARIABLES] short  NS  PS  ZS  x  boolean  float  x  byte  NB  PB  ZB  x  
[P15_Unwrap_Block]^return java.lang.Float.NaN;^663^664^665^^^662^667^if  ( Float.isNaN ( x )  )  { return Float.NaN; }^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] float   final float x [VARIABLES] short  NS  PS  ZS  x  boolean  float  x  byte  NB  PB  ZB  x  
[P16_Remove_Block]^^663^664^665^^^662^667^if  ( Float.isNaN ( x )  )  { return Float.NaN; }^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] float   final float x [VARIABLES] short  NS  PS  ZS  x  boolean  float  x  byte  NB  PB  ZB  x  
[P13_Insert_Block]^if  ( isNaN ( x )  )  {     return NaN; }^663^^^^^662^667^[Delete]^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] float   final float x [VARIABLES] short  NS  PS  ZS  x  boolean  float  x  byte  NB  PB  ZB  x  
[P7_Replace_Invocation]^if  ( Float .doubleToLongBits ( this )   )  {^663^^^^^662^667^if  ( Float.isNaN ( x )  )  {^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] float   final float x [VARIABLES] short  NS  PS  ZS  x  boolean  float  x  byte  NB  PB  ZB  x  
[P2_Replace_Operator]^return  ( x != 0.0F )  ? 0.0F :  ( x > 0.0F )  ? 1.0F : -1.0F;^666^^^^^662^667^return  ( x == 0.0F )  ? 0.0F :  ( x > 0.0F )  ? 1.0F : -1.0F;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] float   final float x [VARIABLES] short  NS  PS  ZS  x  boolean  float  x  byte  NB  PB  ZB  x  
[P2_Replace_Operator]^return  ( x == 0.0F )  ? 0.0F :  ( x == 0.0F )  ? 1.0F : -1.0F;^666^^^^^662^667^return  ( x == 0.0F )  ? 0.0F :  ( x > 0.0F )  ? 1.0F : -1.0F;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] float   final float x [VARIABLES] short  NS  PS  ZS  x  boolean  float  x  byte  NB  PB  ZB  x  
[P6_Replace_Expression]^return  (  ( x > 0.0F )  ? 1.0F^666^^^^^662^667^return  ( x == 0.0F )  ? 0.0F :  ( x > 0.0F )  ? 1.0F : -1.0F;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] float   final float x [VARIABLES] short  NS  PS  ZS  x  boolean  float  x  byte  NB  PB  ZB  x  
[P8_Replace_Mix]^return   0.0F ;^666^^^^^662^667^return  ( x == 0.0F )  ? 0.0F :  ( x > 0.0F )  ? 1.0F : -1.0F;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] float   final float x [VARIABLES] short  NS  PS  ZS  x  boolean  float  x  byte  NB  PB  ZB  x  
[P2_Replace_Operator]^return  ( x >= 0 )  ? 0 :  ( x > 0 )  ? 1 : -1;^680^^^^^679^681^return  ( x == 0 )  ? 0 :  ( x > 0 )  ? 1 : -1;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] int   final int x [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  
[P2_Replace_Operator]^return  ( x == 0 )  ? 0 :  ( x >= 0 )  ? 1 : -1;^680^^^^^679^681^return  ( x == 0 )  ? 0 :  ( x > 0 )  ? 1 : -1;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] int   final int x [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  
[P3_Replace_Literal]^return  ( x == 5 )  ? 5 :  ( x > 5 )  ? 1 : -1;^680^^^^^679^681^return  ( x == 0 )  ? 0 :  ( x > 0 )  ? 1 : -1;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] int   final int x [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  
[P3_Replace_Literal]^return  ( x == -9 )  ? -9 :  ( x > -9 )  ? 1 : -1;^680^^^^^679^681^return  ( x == 0 )  ? 0 :  ( x > 0 )  ? 1 : -1;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] int   final int x [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  
[P3_Replace_Literal]^return  ( x == 9 )  ? 9 :  ( x > 9 )  ? 1 : -1;^680^^^^^679^681^return  ( x == 0 )  ? 0 :  ( x > 0 )  ? 1 : -1;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] int   final int x [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  
[P3_Replace_Literal]^return  ( x == 0 )  ? 0 :  ( x > 0 )  ? x : -x;^680^^^^^679^681^return  ( x == 0 )  ? 0 :  ( x > 0 )  ? 1 : -1;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] int   final int x [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  
[P3_Replace_Literal]^return  ( x == 0 )  ? 0 :  ( x > 0 )  ? -8 : --8;^680^^^^^679^681^return  ( x == 0 )  ? 0 :  ( x > 0 )  ? 1 : -1;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] int   final int x [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  
[P6_Replace_Expression]^return  (  ( x > 0 )  ? 1^680^^^^^679^681^return  ( x == 0 )  ? 0 :  ( x > 0 )  ? 1 : -1;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] int   final int x [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  
[P8_Replace_Mix]^return   0 ;^680^^^^^679^681^return  ( x == 0 )  ? 0 :  ( x > 0 )  ? 1 : -1;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] int   final int x [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  
[P12_Insert_Condition]^if  (  ( n == k )  ||  ( k == 0 )  )  { return  ( x == 0 )  ? 0 :  ( x > 0 )  ? 1 : -1; }^680^^^^^679^681^return  ( x == 0 )  ? 0 :  ( x > 0 )  ? 1 : -1;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] int   final int x [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  
[P2_Replace_Operator]^return  ( x > 0L )  ? 0L :  ( x > 0L )  ? 1L : -1L;^694^^^^^693^695^return  ( x == 0L )  ? 0L :  ( x > 0L )  ? 1L : -1L;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] long   final long x [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  long  x  
[P2_Replace_Operator]^return  ( x == 0L )  ? 0L :  ( x == 0L )  ? 1L : -1L;^694^^^^^693^695^return  ( x == 0L )  ? 0L :  ( x > 0L )  ? 1L : -1L;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] long   final long x [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  long  x  
[P6_Replace_Expression]^return  (  ( x > 0L )  ? 1L^694^^^^^693^695^return  ( x == 0L )  ? 0L :  ( x > 0L )  ? 1L : -1L;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] long   final long x [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  long  x  
[P8_Replace_Mix]^return   0L ;^694^^^^^693^695^return  ( x == 0L )  ? 0L :  ( x > 0L )  ? 1L : -1L;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] long   final long x [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  long  x  
[P2_Replace_Operator]^return  ( x != ZS )  ? ZS :  ( x > ZS )  ? PS : NS;^709^^^^^708^710^return  ( x == ZS )  ? ZS :  ( x > ZS )  ? PS : NS;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] short   final short x [VARIABLES] short  NS  PS  ZS  x  byte  NB  PB  ZB  x  boolean  
[P2_Replace_Operator]^return  ( x == ZS )  ? ZS :  ( x >= ZS )  ? PS : NS;^709^^^^^708^710^return  ( x == ZS )  ? ZS :  ( x > ZS )  ? PS : NS;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] short   final short x [VARIABLES] short  NS  PS  ZS  x  byte  NB  PB  ZB  x  boolean  
[P5_Replace_Variable]^return  ( PS == ZS )  ? ZS :  ( x > ZS )  ? PS : NS;^709^^^^^708^710^return  ( x == ZS )  ? ZS :  ( x > ZS )  ? PS : NS;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] short   final short x [VARIABLES] short  NS  PS  ZS  x  byte  NB  PB  ZB  x  boolean  
[P5_Replace_Variable]^return  ( x == x )  ? ZS :  ( x > ZS )  ? PS : NS;^709^^^^^708^710^return  ( x == ZS )  ? ZS :  ( x > ZS )  ? PS : NS;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] short   final short x [VARIABLES] short  NS  PS  ZS  x  byte  NB  PB  ZB  x  boolean  
[P5_Replace_Variable]^return  ( x == ZS )  ? ZS :  ( x > ZS )  ? ZS : NS;^709^^^^^708^710^return  ( x == ZS )  ? ZS :  ( x > ZS )  ? PS : NS;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] short   final short x [VARIABLES] short  NS  PS  ZS  x  byte  NB  PB  ZB  x  boolean  
[P5_Replace_Variable]^return  ( x == ZS )  ? ZS :  ( x > ZS )  ? PS : x;^709^^^^^708^710^return  ( x == ZS )  ? ZS :  ( x > ZS )  ? PS : NS;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] short   final short x [VARIABLES] short  NS  PS  ZS  x  byte  NB  PB  ZB  x  boolean  
[P5_Replace_Variable]^return  ( PS == ZS )  ? ZS :  ( x > ZS )  ? x : NS;^709^^^^^708^710^return  ( x == ZS )  ? ZS :  ( x > ZS )  ? PS : NS;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] short   final short x [VARIABLES] short  NS  PS  ZS  x  byte  NB  PB  ZB  x  boolean  
[P5_Replace_Variable]^return  ( x == PS )  ? ZS :  ( x > ZS )  ? ZS : NS;^709^^^^^708^710^return  ( x == ZS )  ? ZS :  ( x > ZS )  ? PS : NS;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] short   final short x [VARIABLES] short  NS  PS  ZS  x  byte  NB  PB  ZB  x  boolean  
[P5_Replace_Variable]^return  ( x == NS )  ? ZS :  ( x > ZS )  ? PS : ZS;^709^^^^^708^710^return  ( x == ZS )  ? ZS :  ( x > ZS )  ? PS : NS;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] short   final short x [VARIABLES] short  NS  PS  ZS  x  byte  NB  PB  ZB  x  boolean  
[P6_Replace_Expression]^return  (  ( x > ZS )  ? PS^709^^^^^708^710^return  ( x == ZS )  ? ZS :  ( x > ZS )  ? PS : NS;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] short   final short x [VARIABLES] short  NS  PS  ZS  x  byte  NB  PB  ZB  x  boolean  
[P8_Replace_Mix]^return  ( x ;^709^^^^^708^710^return  ( x == ZS )  ? ZS :  ( x > ZS )  ? PS : NS;^[CLASS] MathUtils  [METHOD] sign [RETURN_TYPE] short   final short x [VARIABLES] short  NS  PS  ZS  x  byte  NB  PB  ZB  x  boolean  
[P2_Replace_Operator]^return  ( Math.exp ( x )  - Math.exp ( -x )  )  * 2.0;^720^^^^^719^721^return  ( Math.exp ( x )  - Math.exp ( -x )  )  / 2.0;^[CLASS] MathUtils  [METHOD] sinh [RETURN_TYPE] double   double x [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  x  
[P2_Replace_Operator]^return  ( Math.exp ( x )   |  Math.exp ( -x )  )  / 2.0;^720^^^^^719^721^return  ( Math.exp ( x )  - Math.exp ( -x )  )  / 2.0;^[CLASS] MathUtils  [METHOD] sinh [RETURN_TYPE] double   double x [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  x  
[P3_Replace_Literal]^return  ( Math.exp ( x )  - Math.exp ( -x )  )  / Infinity;^720^^^^^719^721^return  ( Math.exp ( x )  - Math.exp ( -x )  )  / 2.0;^[CLASS] MathUtils  [METHOD] sinh [RETURN_TYPE] double   double x [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  x  
[P7_Replace_Invocation]^return  ( Math.ceil ( x )  - Math.exp ( -x )  )  / 2.0;^720^^^^^719^721^return  ( Math.exp ( x )  - Math.exp ( -x )  )  / 2.0;^[CLASS] MathUtils  [METHOD] sinh [RETURN_TYPE] double   double x [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  x  
[P7_Replace_Invocation]^return  ( Math .ceil ( x )   - Math^720^^^^^719^721^return  ( Math.exp ( x )  - Math.exp ( -x )  )  / 2.0;^[CLASS] MathUtils  [METHOD] sinh [RETURN_TYPE] double   double x [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  x  
[P8_Replace_Mix]^return  ( Math.ceil ( x )  - Math.exp ( -x )  )  / 2.0D;^720^^^^^719^721^return  ( Math.exp ( x )  - Math.exp ( -x )  )  / 2.0;^[CLASS] MathUtils  [METHOD] sinh [RETURN_TYPE] double   double x [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  x  
[P14_Delete_Statement]^^720^^^^^719^721^return  ( Math.exp ( x )  - Math.exp ( -x )  )  / 2.0;^[CLASS] MathUtils  [METHOD] sinh [RETURN_TYPE] double   double x [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  double  x  
[P1_Replace_Type]^short  s =  (  short  ) x -  (  short  ) y;^734^^^^^733^739^long s =  ( long ) x -  ( long ) y;^[CLASS] MathUtils  [METHOD] subAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  y  long  s  
[P2_Replace_Operator]^long s =  ( long ) x  ==   ( long ) y;^734^^^^^733^739^long s =  ( long ) x -  ( long ) y;^[CLASS] MathUtils  [METHOD] subAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  y  long  s  
[P11_Insert_Donor_Statement]^long m =  (  ( long ) x )  *  (  ( long ) y ) ;long s =  ( long ) x -  ( long ) y;^734^^^^^733^739^long s =  ( long ) x -  ( long ) y;^[CLASS] MathUtils  [METHOD] subAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  y  long  s  
[P11_Insert_Donor_Statement]^long s =  ( long ) x +  ( long ) y;long s =  ( long ) x -  ( long ) y;^734^^^^^733^739^long s =  ( long ) x -  ( long ) y;^[CLASS] MathUtils  [METHOD] subAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  y  long  s  
[P2_Replace_Operator]^if  ( s < Integer.MIN_VALUE && s > Integer.MAX_VALUE )  {^735^^^^^733^739^if  ( s < Integer.MIN_VALUE || s > Integer.MAX_VALUE )  {^[CLASS] MathUtils  [METHOD] subAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  y  long  s  
[P2_Replace_Operator]^if  ( s <= Integer.MIN_VALUE || s > Integer.MAX_VALUE )  {^735^^^^^733^739^if  ( s < Integer.MIN_VALUE || s > Integer.MAX_VALUE )  {^[CLASS] MathUtils  [METHOD] subAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  y  long  s  
[P2_Replace_Operator]^if  ( s < Integer.MIN_VALUE || s >= Integer.MAX_VALUE )  {^735^^^^^733^739^if  ( s < Integer.MIN_VALUE || s > Integer.MAX_VALUE )  {^[CLASS] MathUtils  [METHOD] subAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  y  long  s  
[P5_Replace_Variable]^if  ( s < Integer.y || s > Integer.MAX_VALUE )  {^735^^^^^733^739^if  ( s < Integer.MIN_VALUE || s > Integer.MAX_VALUE )  {^[CLASS] MathUtils  [METHOD] subAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  y  long  s  
[P5_Replace_Variable]^if  ( s < Integer.MIN_VALUE || s > Integer.y )  {^735^^^^^733^739^if  ( s < Integer.MIN_VALUE || s > Integer.MAX_VALUE )  {^[CLASS] MathUtils  [METHOD] subAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  y  long  s  
[P6_Replace_Expression]^if  ( s < Integer.MIN_VALUE ) {^735^^^^^733^739^if  ( s < Integer.MIN_VALUE || s > Integer.MAX_VALUE )  {^[CLASS] MathUtils  [METHOD] subAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  y  long  s  
[P6_Replace_Expression]^if  (  s > Integer.MAX_VALUE )  {^735^^^^^733^739^if  ( s < Integer.MIN_VALUE || s > Integer.MAX_VALUE )  {^[CLASS] MathUtils  [METHOD] subAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  y  long  s  
[P6_Replace_Expression]^if  ( s < MIN_VALUE )  {^735^^^^^733^739^if  ( s < Integer.MIN_VALUE || s > Integer.MAX_VALUE )  {^[CLASS] MathUtils  [METHOD] subAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  y  long  s  
[P6_Replace_Expression]^if  ( s > MAX_VALUE )  {^735^^^^^733^739^if  ( s < Integer.MIN_VALUE || s > Integer.MAX_VALUE )  {^[CLASS] MathUtils  [METHOD] subAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  y  long  s  
[P8_Replace_Mix]^if  ( s < Integer.y ) {^735^^^^^733^739^if  ( s < Integer.MIN_VALUE || s > Integer.MAX_VALUE )  {^[CLASS] MathUtils  [METHOD] subAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  y  long  s  
[P9_Replace_Statement]^if  ( m < Integer.MIN_VALUE || m > Integer.MAX_VALUE )  {^735^^^^^733^739^if  ( s < Integer.MIN_VALUE || s > Integer.MAX_VALUE )  {^[CLASS] MathUtils  [METHOD] subAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  y  long  s  
[P15_Unwrap_Block]^throw new java.lang.ArithmeticException("overflow: subtract");^735^736^737^^^733^739^if  ( s < Integer.MIN_VALUE || s > Integer.MAX_VALUE )  { throw new ArithmeticException  (" ")  ; }^[CLASS] MathUtils  [METHOD] subAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  y  long  s  
[P16_Remove_Block]^^735^736^737^^^733^739^if  ( s < Integer.MIN_VALUE || s > Integer.MAX_VALUE )  { throw new ArithmeticException  (" ")  ; }^[CLASS] MathUtils  [METHOD] subAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  y  long  s  
[P13_Insert_Block]^if  (  ( s <  ( MIN_VALUE )  )  ||  ( s >  ( MAX_VALUE )  )  )  {     throw new ArithmeticException ( "overflow: add" ) ; }^735^^^^^733^739^[Delete]^[CLASS] MathUtils  [METHOD] subAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  y  long  s  
[P13_Insert_Block]^if  (  ( m <  ( MIN_VALUE )  )  ||  ( m >  ( MAX_VALUE )  )  )  {     throw new ArithmeticException ( "overflow: mul" ) ; }^735^^^^^733^739^[Delete]^[CLASS] MathUtils  [METHOD] subAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  y  long  s  
[P4_Replace_Constructor]^throw throw  new ArithmeticException ( "overflow: mul" )   ;^736^^^^^733^739^throw new ArithmeticException  (" ")  ;^[CLASS] MathUtils  [METHOD] subAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  y  long  s  
[P13_Insert_Block]^if  ( k == 31 )  {     throw new ArithmeticException ( "overflow: gcd is 2^31" ) ; }^736^^^^^733^739^[Delete]^[CLASS] MathUtils  [METHOD] subAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  y  long  s  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException  (" ")  ;throw new ArithmeticException  (" ")  ;^736^^^^^733^739^throw new ArithmeticException  (" ")  ;^[CLASS] MathUtils  [METHOD] subAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  y  long  s  
[P8_Replace_Mix]^throw new ArithmeticException ( "result too large to represent in a long integer" ) ; ;^736^^^^^733^739^throw new ArithmeticException  (" ")  ;^[CLASS] MathUtils  [METHOD] subAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  y  long  s  
[P1_Replace_Type]^return  (  long  ) s;^738^^^^^733^739^return  ( int ) s;^[CLASS] MathUtils  [METHOD] subAndCheck [RETURN_TYPE] int   int x int y [VARIABLES] short  NS  PS  ZS  x  boolean  byte  NB  PB  ZB  x  int  x  y  long  s  
