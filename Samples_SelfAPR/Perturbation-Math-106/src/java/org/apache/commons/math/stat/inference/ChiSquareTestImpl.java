[P8_Replace_Mix]^private DistributionFactory distributionFactory  = null ;^30^^^^^25^35^private DistributionFactory distributionFactory = null;^[CLASS] ChiSquareTestImpl   [VARIABLES] 
[P14_Delete_Statement]^^36^^^^^35^37^super (  ) ;^[CLASS] ChiSquareTestImpl  [METHOD] <init> [RETURN_TYPE] ChiSquareTestImpl()   [VARIABLES] DistributionFactory  distributionFactory  boolean  
[P1_Replace_Type]^float sumSq = 0.0d;^48^^^^^46^63^double sumSq = 0.0d;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[P11_Insert_Donor_Statement]^double total = 0.0d;double sumSq = 0.0d;^48^^^^^46^63^double sumSq = 0.0d;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[P11_Insert_Donor_Statement]^double dev = 0.0d;double sumSq = 0.0d;^48^^^^^46^63^double sumSq = 0.0d;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[P11_Insert_Donor_Statement]^double expected = 0.0d;double sumSq = 0.0d;^48^^^^^46^63^double sumSq = 0.0d;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[P1_Replace_Type]^int dev = 0.0d;^49^^^^^46^63^double dev = 0.0d;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[P11_Insert_Donor_Statement]^double total = 0.0d;double dev = 0.0d;^49^^^^^46^63^double dev = 0.0d;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[P11_Insert_Donor_Statement]^double sumSq = 0.0d;double dev = 0.0d;^49^^^^^46^63^double dev = 0.0d;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[P11_Insert_Donor_Statement]^double expected = 0.0d;double dev = 0.0d;^49^^^^^46^63^double dev = 0.0d;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[P2_Replace_Operator]^if  (  ( expected.length < 2 )  &&  ( expected.length != observed.length )  )  {^50^^^^^46^63^if  (  ( expected.length < 2 )  ||  ( expected.length != observed.length )  )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[P2_Replace_Operator]^if  (  ( expected.length <= 2 )  ||  ( expected.length != observed.length )  )  {^50^^^^^46^63^if  (  ( expected.length < 2 )  ||  ( expected.length != observed.length )  )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[P2_Replace_Operator]^if  (  ( expected.length < 2 )  ||  ( expected.length <= observed.length )  )  {^50^^^^^46^63^if  (  ( expected.length < 2 )  ||  ( expected.length != observed.length )  )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[P5_Replace_Variable]^if  (  ( i < 2 )  ||  ( expected.length != observed.length )  )  {^50^^^^^46^63^if  (  ( expected.length < 2 )  ||  ( expected.length != observed.length )  )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[P5_Replace_Variable]^if  (  ( expected.length < 2 )  ||  ( expected.length != i )  )  {^50^^^^^46^63^if  (  ( expected.length < 2 )  ||  ( expected.length != observed.length )  )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[P5_Replace_Variable]^if  (  ( observed.length < 2 )  ||  ( expected.length != expected.length )  )  {^50^^^^^46^63^if  (  ( expected.length < 2 )  ||  ( expected.length != observed.length )  )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[P5_Replace_Variable]^if  (  ( observed < 2 )  ||  ( expected.length != expected.length.length )  )  {^50^^^^^46^63^if  (  ( expected.length < 2 )  ||  ( expected.length != observed.length )  )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[P5_Replace_Variable]^if  (  ( observed.length.length < 2 )  ||  ( expected.length != expected )  )  {^50^^^^^46^63^if  (  ( expected.length < 2 )  ||  ( expected.length != observed.length )  )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[P6_Replace_Expression]^if  (  ( expected.length < 2 )  ) {^50^^^^^46^63^if  (  ( expected.length < 2 )  ||  ( expected.length != observed.length )  )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[P6_Replace_Expression]^if  (   ( expected.length != observed.length )  )  {^50^^^^^46^63^if  (  ( expected.length < 2 )  ||  ( expected.length != observed.length )  )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[P6_Replace_Expression]^if  ( expected.length < 2 )  {^50^^^^^46^63^if  (  ( expected.length < 2 )  ||  ( expected.length != observed.length )  )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[P6_Replace_Expression]^if  ( expected.length != observed.length )  {^50^^^^^46^63^if  (  ( expected.length < 2 )  ||  ( expected.length != observed.length )  )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[P8_Replace_Mix]^if  (  ( expected.length < 0  )  ) {^50^^^^^46^63^if  (  ( expected.length < 2 )  ||  ( expected.length != observed.length )  )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("observed, expected array lengths incorrect");^50^51^52^53^^46^63^if  (  ( expected.length < 2 )  ||  ( expected.length != observed.length )  )  { throw new IllegalArgumentException ( "observed, expected array lengths incorrect" ) ; }^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[P16_Remove_Block]^^50^51^52^53^^46^63^if  (  ( expected.length < 2 )  ||  ( expected.length != observed.length )  )  { throw new IllegalArgumentException ( "observed, expected array lengths incorrect" ) ; }^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "observed counts must be non-negative and expected counts must be postive" ) ;throw new IllegalArgumentException ( "observed, expected array lengths incorrect" ) ;^51^52^^^^46^63^throw new IllegalArgumentException ( "observed, expected array lengths incorrect" ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "bad significance level: " + alpha ) ;throw new IllegalArgumentException ( "observed, expected array lengths incorrect" ) ;^51^52^^^^46^63^throw new IllegalArgumentException ( "observed, expected array lengths incorrect" ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[P13_Insert_Block]^if  (  (  ( expected.length )  < 2 )  ||  (  ( expected.length )  !=  ( observed.length )  )  )  {     throw new IllegalArgumentException ( "observed, expected array lengths incorrect" ) ; }^51^^^^^46^63^[Delete]^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "rved" ) ;^51^52^^^^46^63^throw new IllegalArgumentException ( "observed, expected array lengths incorrect" ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[P3_Replace_Literal]^throw new IllegalArgumentException ( ", expbserved, expected array lengths incorrect" ) ;^51^52^^^^46^63^throw new IllegalArgumentException ( "observed, expected array lengths incorrect" ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[P8_Replace_Mix]^throw new IllegalArgumentException ( "observed counts must be non-negative and expected counts must be postive" ) ; ;^51^52^^^^46^63^throw new IllegalArgumentException ( "observed, expected array lengths incorrect" ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[P2_Replace_Operator]^if  ( !isPositive ( expected )  && !isNonNegative ( observed )  )  {^54^^^^^46^63^if  ( !isPositive ( expected )  || !isNonNegative ( observed )  )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[P5_Replace_Variable]^if  ( !isPositive ( observed )  || !isNonNegative ( expected )  )  {^54^^^^^46^63^if  ( !isPositive ( expected )  || !isNonNegative ( observed )  )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[P6_Replace_Expression]^if  ( !isPositive ( expected )  ) {^54^^^^^46^63^if  ( !isPositive ( expected )  || !isNonNegative ( observed )  )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[P6_Replace_Expression]^if  (  !isNonNegative ( observed )  )  {^54^^^^^46^63^if  ( !isPositive ( expected )  || !isNonNegative ( observed )  )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[P7_Replace_Invocation]^if  ( !isNonNegative ( expected )  || !isNonNegative ( observed )  )  {^54^^^^^46^63^if  ( !isPositive ( expected )  || !isNonNegative ( observed )  )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("observed counts must be non-negative and expected counts must be postive");^54^55^56^57^^46^63^if  ( !isPositive ( expected )  || !isNonNegative ( observed )  )  { throw new IllegalArgumentException ( "observed counts must be non-negative and expected counts must be postive" ) ; }^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[P16_Remove_Block]^^54^55^56^57^^46^63^if  ( !isPositive ( expected )  || !isNonNegative ( observed )  )  { throw new IllegalArgumentException ( "observed counts must be non-negative and expected counts must be postive" ) ; }^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[P13_Insert_Block]^if  ( ! ( isNonNegative ( in )  )  )  {     throw new IllegalArgumentException ( "All entries in input 2-way table must be non-negative" ) ; }^54^^^^^46^63^[Delete]^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "erved cou" ) ;^55^56^^^^46^63^throw new IllegalArgumentException ( "observed counts must be non-negative and expected counts must be postive" ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[P13_Insert_Block]^if  (  ( ! ( isPositive ( expected )  )  )  ||  ( ! ( isNonNegative ( observed )  )  )  )  {     throw new IllegalArgumentException ( "observed counts must be non-negative and expected counts must be postive" ) ; }^55^^^^^46^63^[Delete]^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "bse" ) ;^55^56^^^^46^63^throw new IllegalArgumentException ( "observed counts must be non-negative and expected counts must be postive" ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "observed, expected array lengths incorrect" ) ;throw new IllegalArgumentException ( "observed counts must be non-negative and expected counts must be postive" ) ;^55^56^^^^46^63^throw new IllegalArgumentException ( "observed counts must be non-negative and expected counts must be postive" ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "s must b" ) ;^55^56^^^^46^63^throw new IllegalArgumentException ( "observed counts must be non-negative and expected counts must be postive" ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "e non-negative and expectedbserved counts must be non-negative and expected counts must be postive" ) ;^55^56^^^^46^63^throw new IllegalArgumentException ( "observed counts must be non-negative and expected counts must be postive" ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[P1_Replace_Type]^for  (  short  i = 0; i < observed.length; i++ )  {^58^^^^^46^63^for  ( int i = 0; i < observed.length; i++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[P2_Replace_Operator]^for  ( int i = 0; i <= observed.length; i++ )  {^58^^^^^46^63^for  ( int i = 0; i < observed.length; i++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[P2_Replace_Operator]^for  &&  ( int i = 0; i < observed.length; i++ )  {^58^^^^^46^63^for  ( int i = 0; i < observed.length; i++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[P3_Replace_Literal]^for  ( int i = -4; i < observed.length; i++ )  {^58^^^^^46^63^for  ( int i = 0; i < observed.length; i++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[P5_Replace_Variable]^for  ( int i = 0; i < observed.length.length; i++ )  {^58^^^^^46^63^for  ( int i = 0; i < observed.length; i++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[P5_Replace_Variable]^for  ( observed.lengthnt i = 0; i < i; i++ )  {^58^^^^^46^63^for  ( int i = 0; i < observed.length; i++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[P1_Replace_Type]^dev =  (  ( int )  observed[i] - expected[i] ) ;^59^^^^^46^63^dev =  (  ( double )  observed[i] - expected[i] ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[P2_Replace_Operator]^dev =  (  ( double )  observed[i]  ==  expected[i] ) ;^59^^^^^46^63^dev =  (  ( double )  observed[i] - expected[i] ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[P5_Replace_Variable]^dev =  (  ( double )  expected[i] - observed[i] ) ;^59^^^^^46^63^dev =  (  ( double )  observed[i] - expected[i] ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[P8_Replace_Mix]^dev =   (  ( double )  null[i] - expected[i] ) ;^59^^^^^46^63^dev =  (  ( double )  observed[i] - expected[i] ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[P2_Replace_Operator]^sumSq += dev * dev - expected[i];^60^^^^^46^63^sumSq += dev * dev / expected[i];^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[P2_Replace_Operator]^sumSq += dev / dev / expected[i];^60^^^^^46^63^sumSq += dev * dev / expected[i];^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[P5_Replace_Variable]^sumSq += sumSq * dev / expected[i];^60^^^^^46^63^sumSq += dev * dev / expected[i];^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[P5_Replace_Variable]^sumSq += expected * dev / dev[i];^60^^^^^46^63^sumSq += dev * dev / expected[i];^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[P8_Replace_Mix]^sumSq +=  null * null / expected[i];^60^^^^^46^63^sumSq += dev * dev / expected[i];^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[P2_Replace_Operator]^dev =  (  ( double )  observed[i]  >  expected[i] ) ;^59^^^^^46^63^dev =  (  ( double )  observed[i] - expected[i] ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[P2_Replace_Operator]^sumSq += dev * dev * expected[i];^60^^^^^46^63^sumSq += dev * dev / expected[i];^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[P2_Replace_Operator]^sumSq += dev + dev / expected[i];^60^^^^^46^63^sumSq += dev * dev / expected[i];^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[P3_Replace_Literal]^for  ( int i = 7; i < observed.length; i++ )  {^58^^^^^46^63^for  ( int i = 0; i < observed.length; i++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[P5_Replace_Variable]^return dev;^62^^^^^46^63^return sumSq;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  dev  sumSq  int  i  
[P2_Replace_Operator]^ChiSquaredDistribution chiSquaredDistribution = getDistributionFactory (  ) .createChiSquareDistribution ( ( double )  expected.length  <=  1 ) ;^74^75^76^^^72^79^ChiSquaredDistribution chiSquaredDistribution = getDistributionFactory (  ) .createChiSquareDistribution ( ( double )  expected.length - 1 ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  ChiSquaredDistribution  chiSquaredDistribution  boolean  double[]  expected  long[]  observed  
[P3_Replace_Literal]^ChiSquaredDistribution chiSquaredDistribution = getDistributionFactory (  ) .createChiSquareDistribution ( ( double )  expected.length  ) ;^74^75^76^^^72^79^ChiSquaredDistribution chiSquaredDistribution = getDistributionFactory (  ) .createChiSquareDistribution ( ( double )  expected.length - 1 ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  ChiSquaredDistribution  chiSquaredDistribution  boolean  double[]  expected  long[]  observed  
[P8_Replace_Mix]^ChiSquaredDistribution chiSquaredDistribution = getDistributionFactory (  )  .newInstance (  )  ;^74^75^76^^^72^79^ChiSquaredDistribution chiSquaredDistribution = getDistributionFactory (  ) .createChiSquareDistribution ( ( double )  expected.length - 1 ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  ChiSquaredDistribution  chiSquaredDistribution  boolean  double[]  expected  long[]  observed  
[P2_Replace_Operator]^getDistributionFactory (  ) .createChiSquareDistribution ( ( double )  expected.length  ^  1 ) ;^75^76^^^^72^79^getDistributionFactory (  ) .createChiSquareDistribution ( ( double )  expected.length - 1 ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  ChiSquaredDistribution  chiSquaredDistribution  boolean  double[]  expected  long[]  observed  
[P3_Replace_Literal]^getDistributionFactory (  ) .createChiSquareDistribution ( ( double )  expected.length -  ) ;^75^76^^^^72^79^getDistributionFactory (  ) .createChiSquareDistribution ( ( double )  expected.length - 1 ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  ChiSquaredDistribution  chiSquaredDistribution  boolean  double[]  expected  long[]  observed  
[P7_Replace_Invocation]^getDistributionFactory (  )  .newInstance (  )  ;^75^76^^^^72^79^getDistributionFactory (  ) .createChiSquareDistribution ( ( double )  expected.length - 1 ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  ChiSquaredDistribution  chiSquaredDistribution  boolean  double[]  expected  long[]  observed  
[P14_Delete_Statement]^^75^76^^^^72^79^getDistributionFactory (  ) .createChiSquareDistribution ( ( double )  expected.length - 1 ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  ChiSquaredDistribution  chiSquaredDistribution  boolean  double[]  expected  long[]  observed  
[P11_Insert_Donor_Statement]^getDistributionFactory (  ) .createChiSquareDistribution ( df ) ;getDistributionFactory (  ) .createChiSquareDistribution ( ( double )  expected.length - 1 ) ;^75^76^^^^72^79^getDistributionFactory (  ) .createChiSquareDistribution ( ( double )  expected.length - 1 ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  ChiSquaredDistribution  chiSquaredDistribution  boolean  double[]  expected  long[]  observed  
[P2_Replace_Operator]^return 1  >=  chiSquaredDistribution.cumulativeProbability ( chiSquare ( expected, observed )  ) ;^77^78^^^^72^79^return 1 - chiSquaredDistribution.cumulativeProbability ( chiSquare ( expected, observed )  ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  ChiSquaredDistribution  chiSquaredDistribution  boolean  double[]  expected  long[]  observed  
[P5_Replace_Variable]^return 1 - chiSquaredDistribution.cumulativeProbability ( chiSquare (  observed )  ) ;^77^78^^^^72^79^return 1 - chiSquaredDistribution.cumulativeProbability ( chiSquare ( expected, observed )  ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  ChiSquaredDistribution  chiSquaredDistribution  boolean  double[]  expected  long[]  observed  
[P5_Replace_Variable]^return 1 - chiSquaredDistribution.cumulativeProbability ( chiSquare ( expected )  ) ;^77^78^^^^72^79^return 1 - chiSquaredDistribution.cumulativeProbability ( chiSquare ( expected, observed )  ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  ChiSquaredDistribution  chiSquaredDistribution  boolean  double[]  expected  long[]  observed  
[P5_Replace_Variable]^return 1 - expected.cumulativeProbability ( chiSquare ( chiSquaredDistribution, observed )  ) ;^77^78^^^^72^79^return 1 - chiSquaredDistribution.cumulativeProbability ( chiSquare ( expected, observed )  ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  ChiSquaredDistribution  chiSquaredDistribution  boolean  double[]  expected  long[]  observed  
[P5_Replace_Variable]^return 1 - chiSquaredDistribution.cumulativeProbability ( chiSquare ( observed, expected )  ) ;^77^78^^^^72^79^return 1 - chiSquaredDistribution.cumulativeProbability ( chiSquare ( expected, observed )  ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  ChiSquaredDistribution  chiSquaredDistribution  boolean  double[]  expected  long[]  observed  
[P5_Replace_Variable]^return 1 - observed.cumulativeProbability ( chiSquare ( expected, chiSquaredDistribution )  ) ;^77^78^^^^72^79^return 1 - chiSquaredDistribution.cumulativeProbability ( chiSquare ( expected, observed )  ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  ChiSquaredDistribution  chiSquaredDistribution  boolean  double[]  expected  long[]  observed  
[P7_Replace_Invocation]^return 1 - chiSquareTestdDistribution.cumulativeProbability ( chiSquare ( expected, observed )  ) ;^77^78^^^^72^79^return 1 - chiSquaredDistribution.cumulativeProbability ( chiSquare ( expected, observed )  ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  ChiSquaredDistribution  chiSquaredDistribution  boolean  double[]  expected  long[]  observed  
[P8_Replace_Mix]^return 1  |  chiSquareTestdDistribution.cumulativeProbability ( chiSquare ( expected, observed )  ) ;^77^78^^^^72^79^return 1 - chiSquaredDistribution.cumulativeProbability ( chiSquare ( expected, observed )  ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  ChiSquaredDistribution  chiSquaredDistribution  boolean  double[]  expected  long[]  observed  
[P14_Delete_Statement]^^77^78^^^^72^79^return 1 - chiSquaredDistribution.cumulativeProbability ( chiSquare ( expected, observed )  ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  ChiSquaredDistribution  chiSquaredDistribution  boolean  double[]  expected  long[]  observed  
[P5_Replace_Variable]^chiSquare (  observed )  ) ;^78^^^^^72^79^chiSquare ( expected, observed )  ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  ChiSquaredDistribution  chiSquaredDistribution  boolean  double[]  expected  long[]  observed  
[P5_Replace_Variable]^chiSquare ( expected )  ) ;^78^^^^^72^79^chiSquare ( expected, observed )  ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  ChiSquaredDistribution  chiSquaredDistribution  boolean  double[]  expected  long[]  observed  
[P5_Replace_Variable]^chiSquare ( observed, expected )  ) ;^78^^^^^72^79^chiSquare ( expected, observed )  ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  ChiSquaredDistribution  chiSquaredDistribution  boolean  double[]  expected  long[]  observed  
[P7_Replace_Invocation]^chiSquareTest ( expected, observed )  ) ;^78^^^^^72^79^chiSquare ( expected, observed )  ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  ChiSquaredDistribution  chiSquaredDistribution  boolean  double[]  expected  long[]  observed  
[P14_Delete_Statement]^^78^^^^^72^79^chiSquare ( expected, observed )  ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  ChiSquaredDistribution  chiSquaredDistribution  boolean  double[]  expected  long[]  observed  
[P11_Insert_Donor_Statement]^return  ( chiSquareTest ( expected, observed )  < alpha ) ;chiSquare ( expected, observed )  ) ;^78^^^^^72^79^chiSquare ( expected, observed )  ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] double   double[] expected long[] observed [VARIABLES] DistributionFactory  distributionFactory  ChiSquaredDistribution  chiSquaredDistribution  boolean  double[]  expected  long[]  observed  
[P2_Replace_Operator]^if  (  ( alpha <= 0 )  &&  ( alpha > 0.5 )  )  {^92^^^^^90^97^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   double[] expected long[] observed double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  alpha  
[P2_Replace_Operator]^if  (  ( alpha < 0 )  ||  ( alpha > 0.5 )  )  {^92^^^^^90^97^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   double[] expected long[] observed double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  alpha  
[P2_Replace_Operator]^if  (  ( alpha <= 0 )  ||  ( alpha >= 0.5 )  )  {^92^^^^^90^97^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   double[] expected long[] observed double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  alpha  
[P3_Replace_Literal]^if  (  ( alpha <= 4 )  ||  ( alpha > 4.5 )  )  {^92^^^^^90^97^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   double[] expected long[] observed double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  alpha  
[P3_Replace_Literal]^if  (  ( alpha <= 0 )  ||  ( alpha > Infinity )  )  {^92^^^^^90^97^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   double[] expected long[] observed double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  alpha  
[P6_Replace_Expression]^if  (  ( alpha <= 0 )  ) {^92^^^^^90^97^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   double[] expected long[] observed double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  alpha  
[P6_Replace_Expression]^if  (   ( alpha > 0.5 )  )  {^92^^^^^90^97^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   double[] expected long[] observed double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  alpha  
[P6_Replace_Expression]^if  ( alpha <= 0 )  {^92^^^^^90^97^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   double[] expected long[] observed double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  alpha  
[P6_Replace_Expression]^if  ( alpha > 0.5 )  {^92^^^^^90^97^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   double[] expected long[] observed double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  alpha  
[P6_Replace_Expression]^if  ( "bad significance level: " + alpha )  {^92^^^^^90^97^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   double[] expected long[] observed double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  alpha  
[P8_Replace_Mix]^if  (  ( alpha <= 3 )  ||  ( alpha > 3.5 )  )  {^92^^^^^90^97^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   double[] expected long[] observed double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  alpha  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException(("bad significance level: " + alpha));^92^93^94^95^^90^97^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  { throw new IllegalArgumentException ( "bad significance level: " + alpha ) ; }^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   double[] expected long[] observed double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  alpha  
[P16_Remove_Block]^^92^93^94^95^^90^97^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  { throw new IllegalArgumentException ( "bad significance level: " + alpha ) ; }^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   double[] expected long[] observed double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  alpha  
[P13_Insert_Block]^if  (  ( in[0].length )  < 2 )  {     throw new IllegalArgumentException ( "Input table must have at least two columns" ) ; }^92^^^^^90^97^[Delete]^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   double[] expected long[] observed double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  alpha  
[P13_Insert_Block]^if  ( ! ( isRectangular ( in )  )  )  {     throw new IllegalArgumentException ( "Input table must be rectangular" ) ; }^92^^^^^90^97^[Delete]^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   double[] expected long[] observed double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  alpha  
[P13_Insert_Block]^if  (  ( in.length )  < 2 )  {     throw new IllegalArgumentException ( "Input table must have at least two rows" ) ; }^92^^^^^90^97^[Delete]^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   double[] expected long[] observed double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  alpha  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "bad significance level: "  &  alpha ) ;^93^94^^^^90^97^throw new IllegalArgumentException ( "bad significance level: " + alpha ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   double[] expected long[] observed double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  alpha  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "baad significance level: " + alpha ) ;^93^94^^^^90^97^throw new IllegalArgumentException ( "bad significance level: " + alpha ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   double[] expected long[] observed double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  alpha  
[P13_Insert_Block]^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {     throw new IllegalArgumentException (  ( "bad significance level: " + alpha )  ) ; }^93^^^^^90^97^[Delete]^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   double[] expected long[] observed double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  alpha  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "bad significance level: "  <  alpha ) ;^93^94^^^^90^97^throw new IllegalArgumentException ( "bad significance level: " + alpha ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   double[] expected long[] observed double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  alpha  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "ificanad significance level: " + alpha ) ;^93^94^^^^90^97^throw new IllegalArgumentException ( "bad significance level: " + alpha ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   double[] expected long[] observed double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  alpha  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "bad significance level: "  >  alpha ) ;^93^94^^^^90^97^throw new IllegalArgumentException ( "bad significance level: " + alpha ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   double[] expected long[] observed double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  alpha  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "bad significance levad significance level: " + alpha ) ;^93^94^^^^90^97^throw new IllegalArgumentException ( "bad significance level: " + alpha ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   double[] expected long[] observed double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  alpha  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "bad significance level: "   instanceof   alpha ) ;^93^94^^^^90^97^throw new IllegalArgumentException ( "bad significance level: " + alpha ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   double[] expected long[] observed double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  alpha  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "bad significance level: significan" + alpha ) ;^93^94^^^^90^97^throw new IllegalArgumentException ( "bad significance level: " + alpha ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   double[] expected long[] observed double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  alpha  
[P8_Replace_Mix]^throw new IllegalArgumentException ( "observed counts must be non-negative and expected counts must be postive" ) ; ;^93^94^^^^90^97^throw new IllegalArgumentException ( "bad significance level: " + alpha ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   double[] expected long[] observed double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  alpha  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException  (" ")  ;throw new IllegalArgumentException ( "bad significance level: " + alpha ) ;^93^94^^^^90^97^throw new IllegalArgumentException ( "bad significance level: " + alpha ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   double[] expected long[] observed double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  alpha  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "observed, expected array lengths incorrect" ) ;throw new IllegalArgumentException ( "bad significance level: " + alpha ) ;^93^94^^^^90^97^throw new IllegalArgumentException ( "bad significance level: " + alpha ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   double[] expected long[] observed double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  alpha  
[P2_Replace_Operator]^return  ( chiSquareTest ( expected, observed )  <= alpha ) ;^96^^^^^90^97^return  ( chiSquareTest ( expected, observed )  < alpha ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   double[] expected long[] observed double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  alpha  
[P5_Replace_Variable]^return  ( chiSquareTest (  observed )  < alpha ) ;^96^^^^^90^97^return  ( chiSquareTest ( expected, observed )  < alpha ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   double[] expected long[] observed double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  alpha  
[P5_Replace_Variable]^return  ( chiSquareTest ( expected )  < alpha ) ;^96^^^^^90^97^return  ( chiSquareTest ( expected, observed )  < alpha ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   double[] expected long[] observed double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  alpha  
[P5_Replace_Variable]^return  ( chiSquareTest ( alpha, observed )  < expected ) ;^96^^^^^90^97^return  ( chiSquareTest ( expected, observed )  < alpha ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   double[] expected long[] observed double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  alpha  
[P5_Replace_Variable]^return  ( chiSquareTest ( observed, expected )  < alpha ) ;^96^^^^^90^97^return  ( chiSquareTest ( expected, observed )  < alpha ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   double[] expected long[] observed double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  alpha  
[P7_Replace_Invocation]^return  ( chiSquare ( expected, observed )  < alpha ) ;^96^^^^^90^97^return  ( chiSquareTest ( expected, observed )  < alpha ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   double[] expected long[] observed double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  alpha  
[P14_Delete_Statement]^^96^^^^^90^97^return  ( chiSquareTest ( expected, observed )  < alpha ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   double[] expected long[] observed double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  expected  long[]  observed  double  alpha  
[P7_Replace_Invocation]^chiSquare ( counts ) ;^106^^^^^104^133^checkArray ( counts ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P14_Delete_Statement]^^106^^^^^104^133^checkArray ( counts ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P1_Replace_Type]^short  nRows = counts.length;^107^^^^^104^133^int nRows = counts.length;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P5_Replace_Variable]^int nRows = row;^107^^^^^104^133^int nRows = counts.length;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P5_Replace_Variable]^int nRows = counts.length.length;^107^^^^^104^133^int nRows = counts.length;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P5_Replace_Variable]^int nRows = counts;^107^^^^^104^133^int nRows = counts.length;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P11_Insert_Donor_Statement]^int nCols = counts[0].length;int nRows = counts.length;^107^^^^^104^133^int nRows = counts.length;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P1_Replace_Type]^short  nCols = counts[0].length;^108^^^^^104^133^int nCols = counts[0].length;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P3_Replace_Literal]^int nCols = counts[row].length;^108^^^^^104^133^int nCols = counts[0].length;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P5_Replace_Variable]^int nCols = counts[0].length[0].length;^108^^^^^104^133^int nCols = counts[0].length;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P11_Insert_Donor_Statement]^int nRows = counts.length;int nCols = counts[0].length;^108^^^^^104^133^int nCols = counts[0].length;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P11_Insert_Donor_Statement]^double[] colSum = new double[nCols];double[] rowSum = new double[nRows];^111^^^^^104^133^double[] rowSum = new double[nRows];^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P11_Insert_Donor_Statement]^double[] rowSum = new double[nRows];double[] colSum = new double[nCols];^112^^^^^104^133^double[] colSum = new double[nCols];^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P1_Replace_Type]^int total = 0.0d;^113^^^^^104^133^double total = 0.0d;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P11_Insert_Donor_Statement]^double sumSq = 0.0d;double total = 0.0d;^113^^^^^104^133^double total = 0.0d;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P11_Insert_Donor_Statement]^double dev = 0.0d;double total = 0.0d;^113^^^^^104^133^double total = 0.0d;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P11_Insert_Donor_Statement]^double expected = 0.0d;double total = 0.0d;^113^^^^^104^133^double total = 0.0d;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P1_Replace_Type]^for  (  short  row = 0; row < nRows; row++ )  {^114^^^^^104^133^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P2_Replace_Operator]^for  ( int row = 0; row <= nRows; row++ )  {^114^^^^^104^133^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P2_Replace_Operator]^for  ||  ( int row = 0; row < nRows; row++ )  {^114^^^^^104^133^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P2_Replace_Operator]^for  &  ( int row = 0; row < nRows; row++ )  {^114^^^^^104^133^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P3_Replace_Literal]^for  ( int row = 6; row < nRows; row++ )  {^114^^^^^104^133^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P5_Replace_Variable]^for  ( int nRows = 0; row < nRows; row++ )  {^114^^^^^104^133^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P8_Replace_Mix]^for  ( int row = 0; row < nCols; row++ )  {^114^^^^^104^133^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P1_Replace_Type]^for  (  short  col = 0; col < nCols; col++ )  {^115^^^^^104^133^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P2_Replace_Operator]^for  ( int col = 0; col > nCols; col++ )  {^115^^^^^104^133^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P2_Replace_Operator]^for   instanceof   ( int col = 0; col < nCols; col++ )  {^115^^^^^104^133^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P2_Replace_Operator]^for  <  ( int col = 0; col < nCols; col++ )  {^115^^^^^104^133^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P2_Replace_Operator]^for  >>  ( int col = 0; col < nCols; col++ )  {^115^^^^^104^133^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P3_Replace_Literal]^for  ( int col = row; col < nCols; col++ )  {^115^^^^^104^133^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P5_Replace_Variable]^for  ( int row = 0; col < nCols; col++ )  {^115^^^^^104^133^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P5_Replace_Variable]^for  ( int col = 0; col < row; col++ )  {^115^^^^^104^133^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P1_Replace_Type]^rowSum[row] +=  ( int )  counts[row][col];^116^^^^^104^133^rowSum[row] +=  ( double )  counts[row][col];^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P11_Insert_Donor_Statement]^colSum[col] +=  ( double )  counts[row][col];rowSum[row] +=  ( double )  counts[row][col];^116^^^^^104^133^rowSum[row] +=  ( double )  counts[row][col];^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P11_Insert_Donor_Statement]^total +=  ( double )  counts[row][col];rowSum[row] +=  ( double )  counts[row][col];^116^^^^^104^133^rowSum[row] +=  ( double )  counts[row][col];^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P1_Replace_Type]^colSum[col] +=  ( int )  counts[row][col];^117^^^^^104^133^colSum[col] +=  ( double )  counts[row][col];^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P11_Insert_Donor_Statement]^rowSum[row] +=  ( double )  counts[row][col];colSum[col] +=  ( double )  counts[row][col];^117^^^^^104^133^colSum[col] +=  ( double )  counts[row][col];^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P11_Insert_Donor_Statement]^total +=  ( double )  counts[row][col];colSum[col] +=  ( double )  counts[row][col];^117^^^^^104^133^colSum[col] +=  ( double )  counts[row][col];^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P1_Replace_Type]^total +=  ( float )  counts[row][col];^118^^^^^104^133^total +=  ( double )  counts[row][col];^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P8_Replace_Mix]^total +=   ( double )  null[row][col];^118^^^^^104^133^total +=  ( double )  counts[row][col];^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P11_Insert_Donor_Statement]^colSum[col] +=  ( double )  counts[row][col];total +=  ( double )  counts[row][col];^118^^^^^104^133^total +=  ( double )  counts[row][col];^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P11_Insert_Donor_Statement]^rowSum[row] +=  ( double )  counts[row][col];total +=  ( double )  counts[row][col];^118^^^^^104^133^total +=  ( double )  counts[row][col];^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P3_Replace_Literal]^for  ( int col = ; col < nCols; col++ )  {^115^^^^^104^133^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P1_Replace_Type]^for  (  long  col = 0; col < nCols; col++ )  {^115^^^^^104^133^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P2_Replace_Operator]^for  ( int col = 0; col == nCols; col++ )  {^115^^^^^104^133^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P2_Replace_Operator]^for  <=  ( int col = 0; col < nCols; col++ )  {^115^^^^^104^133^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P3_Replace_Literal]^for  ( int col = nRows; col < nCols; col++ )  {^115^^^^^104^133^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P1_Replace_Type]^total +=  ( int )  counts[row][col];^118^^^^^104^133^total +=  ( double )  counts[row][col];^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P1_Replace_Type]^colSum[col] +=  ( float )  counts[row][col];^117^^^^^104^133^colSum[col] +=  ( double )  counts[row][col];^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P1_Replace_Type]^for  (  long  row = 0; row < nRows; row++ )  {^114^^^^^104^133^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P3_Replace_Literal]^for  ( int row = nRows; row < nRows; row++ )  {^114^^^^^104^133^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P1_Replace_Type]^int sumSq = 0.0d;^123^^^^^104^133^double sumSq = 0.0d;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P11_Insert_Donor_Statement]^double total = 0.0d;double sumSq = 0.0d;^123^^^^^104^133^double sumSq = 0.0d;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P11_Insert_Donor_Statement]^double dev = 0.0d;double sumSq = 0.0d;^123^^^^^104^133^double sumSq = 0.0d;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P11_Insert_Donor_Statement]^double expected = 0.0d;double sumSq = 0.0d;^123^^^^^104^133^double sumSq = 0.0d;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P1_Replace_Type]^int expected = 0.0d;^124^^^^^104^133^double expected = 0.0d;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P11_Insert_Donor_Statement]^double total = 0.0d;double expected = 0.0d;^124^^^^^104^133^double expected = 0.0d;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P11_Insert_Donor_Statement]^double sumSq = 0.0d;double expected = 0.0d;^124^^^^^104^133^double expected = 0.0d;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P11_Insert_Donor_Statement]^double dev = 0.0d;double expected = 0.0d;^124^^^^^104^133^double expected = 0.0d;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P1_Replace_Type]^for  (  short  row = 0; row < nRows; row++ )  {^125^^^^^104^133^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P2_Replace_Operator]^for  ( int row = 0; row > nRows; row++ )  {^125^^^^^104^133^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P2_Replace_Operator]^for  ==  ( int row = 0; row < nRows; row++ )  {^125^^^^^104^133^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P3_Replace_Literal]^for  ( int row = 1; row < nRows; row++ )  {^125^^^^^104^133^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P3_Replace_Literal]^for  ( int row = nRows; row < nRows; row++ )  {^125^^^^^104^133^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P5_Replace_Variable]^for  ( int nRows = 0; row < nRows; row++ )  {^125^^^^^104^133^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P5_Replace_Variable]^for  ( int row = 0; row < nCols; row++ )  {^125^^^^^104^133^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P1_Replace_Type]^for  (  short  col = 0; col < nCols; col++ )  {^126^^^^^104^133^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P2_Replace_Operator]^for  ( int col = 0; col <= nCols; col++ )  {^126^^^^^104^133^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P2_Replace_Operator]^for  <=  ( int col = 0; col < nCols; col++ )  {^126^^^^^104^133^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P3_Replace_Literal]^for  ( int col = -1; col < nCols; col++ )  {^126^^^^^104^133^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P5_Replace_Variable]^for  ( int row = 0; col < nCols; col++ )  {^126^^^^^104^133^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P5_Replace_Variable]^for  ( int nCols = 0; col < col; col++ )  {^126^^^^^104^133^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P2_Replace_Operator]^expected =  ( rowSum[row] * colSum[col] )  - total;^127^^^^^104^133^expected =  ( rowSum[row] * colSum[col] )  / total;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P2_Replace_Operator]^expected =  ( rowSum[row] + colSum[col] )  / total;^127^^^^^104^133^expected =  ( rowSum[row] * colSum[col] )  / total;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P5_Replace_Variable]^expected =  ( nRowsSum[row] * colSum[col] )  / total;^127^^^^^104^133^expected =  ( rowSum[row] * colSum[col] )  / total;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P5_Replace_Variable]^expected =  ( rowSum[row] * rowSum[col] )  / total;^127^^^^^104^133^expected =  ( rowSum[row] * colSum[col] )  / total;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P5_Replace_Variable]^expected =  ( rowSum[row] * colSum[col] )  / sumSq;^127^^^^^104^133^expected =  ( rowSum[row] * colSum[col] )  / total;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P5_Replace_Variable]^expected =  ( colSum[row] * rowSum[col] )  / total;^127^^^^^104^133^expected =  ( rowSum[row] * colSum[col] )  / total;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P5_Replace_Variable]^expected =  ( total[row] * colSum[col] )  / rowSum;^127^^^^^104^133^expected =  ( rowSum[row] * colSum[col] )  / total;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P8_Replace_Mix]^expected =   ( colSum[row] * colSum[col] )  / total;^127^^^^^104^133^expected =  ( rowSum[row] * colSum[col] )  / total;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P1_Replace_Type]^sumSq +=  (  (  ( int )  counts[row][col] - expected )  * (  ( int )  counts[row][col] - expected )  )  / expected;^128^129^^^^104^133^sumSq +=  (  (  ( double )  counts[row][col] - expected )  * (  ( double )  counts[row][col] - expected )  )  / expected;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P2_Replace_Operator]^sumSq +=  (  (  ( double )  counts[row][col] - expected )  * (  ( double )  counts[row][col] - expected )  )  - expected;^128^129^^^^104^133^sumSq +=  (  (  ( double )  counts[row][col] - expected )  * (  ( double )  counts[row][col] - expected )  )  / expected;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P2_Replace_Operator]^sumSq / +=  (  (  ( double )  counts[row][col] - expected )  * (  ( double )  counts[row][col] - expected )  )  / expected;^128^129^^^^104^133^sumSq +=  (  (  ( double )  counts[row][col] - expected )  * (  ( double )  counts[row][col] - expected )  )  / expected;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P2_Replace_Operator]^sumSq +=  (  (  ( double )  counts[row][col]  <  expected )  * (  ( double )  counts[row][col] - expected )  )  / expected;^128^129^^^^104^133^sumSq +=  (  (  ( double )  counts[row][col] - expected )  * (  ( double )  counts[row][col] - expected )  )  / expected;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P2_Replace_Operator]^sumSq +=  (  (  ( double )  counts[row][col]  ||  expected )  * (  ( double )  counts[row][col] - expected )  )  / expected;^128^129^^^^104^133^sumSq +=  (  (  ( double )  counts[row][col] - expected )  * (  ( double )  counts[row][col] - expected )  )  / expected;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P8_Replace_Mix]^sumSq +=   (  (  ( double )  null[row][col] - expected )  * (  ( double )  null[row][col] - expected )  )  / expected;^128^129^^^^104^133^sumSq +=  (  (  ( double )  counts[row][col] - expected )  * (  ( double )  counts[row][col] - expected )  )  / expected;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P2_Replace_Operator]^expected =  ( rowSum[row] - colSum[col] )  / total;^127^^^^^104^133^expected =  ( rowSum[row] * colSum[col] )  / total;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P5_Replace_Variable]^expected =  ( rowSum[row] * col[col] )  / total;^127^^^^^104^133^expected =  ( rowSum[row] * colSum[col] )  / total;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P5_Replace_Variable]^expected =  ( col[row] * rowSumSum[col] )  / total;^127^^^^^104^133^expected =  ( rowSum[row] * colSum[col] )  / total;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P5_Replace_Variable]^expected =  ( rowSum[row] * totalSum[col] )  / col;^127^^^^^104^133^expected =  ( rowSum[row] * colSum[col] )  / total;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P2_Replace_Operator]^sumSq +=  (  (  ( double )  counts[row][col]  &&  expected )  * (  ( double )  counts[row][col] - expected )  )  / expected;^128^129^^^^104^133^sumSq +=  (  (  ( double )  counts[row][col] - expected )  * (  ( double )  counts[row][col] - expected )  )  / expected;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P2_Replace_Operator]^sumSq +=  (  (  ( double )  counts[row][col]  ==  expected )  * (  ( double )  counts[row][col] - expected )  )  / expected;^128^129^^^^104^133^sumSq +=  (  (  ( double )  counts[row][col] - expected )  * (  ( double )  counts[row][col] - expected )  )  / expected;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P5_Replace_Variable]^sumSq +=  (  (  ( double )  counts[row][col] - total )  * (  ( double )  counts[row][col] - expected )  )  / expected;^128^129^^^^104^133^sumSq +=  (  (  ( double )  counts[row][col] - expected )  * (  ( double )  counts[row][col] - expected )  )  / expected;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P5_Replace_Variable]^sumSq +=  (  (  ( double )  expected[row][col] - counts )  * (  ( double )  counts[row][col] - expected )  )  / expected;^128^129^^^^104^133^sumSq +=  (  (  ( double )  counts[row][col] - expected )  * (  ( double )  counts[row][col] - expected )  )  / expected;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P1_Replace_Type]^for  (  long  col = 0; col < nCols; col++ )  {^126^^^^^104^133^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P3_Replace_Literal]^for  ( int col = row; col < nCols; col++ )  {^126^^^^^104^133^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P2_Replace_Operator]^for  <<  ( int col = 0; col < nCols; col++ )  {^126^^^^^104^133^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P3_Replace_Literal]^for  ( int col = 6; col < nCols; col++ )  {^126^^^^^104^133^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P5_Replace_Variable]^for  ( int col = 0; col < row; col++ )  {^126^^^^^104^133^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P2_Replace_Operator]^expected =  ( rowSum[row] * colSum[col] )  + total;^127^^^^^104^133^expected =  ( rowSum[row] * colSum[col] )  / total;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P5_Replace_Variable]^expected =  ( rowSum[row] * total[col] )  / colSum;^127^^^^^104^133^expected =  ( rowSum[row] * colSum[col] )  / total;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P5_Replace_Variable]^expected =  ( totalSum[row] * colSum[col] )  / row;^127^^^^^104^133^expected =  ( rowSum[row] * colSum[col] )  / total;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P2_Replace_Operator]^sumSq - +=  (  (  ( double )  counts[row][col] - expected )  * (  ( double )  counts[row][col] - expected )  )  / expected;^128^129^^^^104^133^sumSq +=  (  (  ( double )  counts[row][col] - expected )  * (  ( double )  counts[row][col] - expected )  )  / expected;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P2_Replace_Operator]^sumSq +=  (  (  ( double )  counts[row][col]  |  expected )  * (  ( double )  counts[row][col] - expected )  )  / expected;^128^129^^^^104^133^sumSq +=  (  (  ( double )  counts[row][col] - expected )  * (  ( double )  counts[row][col] - expected )  )  / expected;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P2_Replace_Operator]^sumSq +=  (  (  ( double )  counts[row][col]  ^  expected )  * (  ( double )  counts[row][col] - expected )  )  / expected;^128^129^^^^104^133^sumSq +=  (  (  ( double )  counts[row][col] - expected )  * (  ( double )  counts[row][col] - expected )  )  / expected;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P8_Replace_Mix]^expected =   ( null[row] * colSum[col] )  / total;^127^^^^^104^133^expected =  ( rowSum[row] * colSum[col] )  / total;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P1_Replace_Type]^sumSq +=  (  (  ( float )  counts[row][col] - expected )  * (  ( float )  counts[row][col] - expected )  )  / expected;^128^129^^^^104^133^sumSq +=  (  (  ( double )  counts[row][col] - expected )  * (  ( double )  counts[row][col] - expected )  )  / expected;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P2_Replace_Operator]^sumSq +=  (  (  ( double )  counts[row][col] - expected )  * (  ( double )  counts[row][col] - expected )  )  * expected;^128^129^^^^104^133^sumSq +=  (  (  ( double )  counts[row][col] - expected )  * (  ( double )  counts[row][col] - expected )  )  / expected;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P2_Replace_Operator]^sumSq + +=  (  (  ( double )  counts[row][col] - expected )  * (  ( double )  counts[row][col] - expected )  )  / expected;^128^129^^^^104^133^sumSq +=  (  (  ( double )  counts[row][col] - expected )  * (  ( double )  counts[row][col] - expected )  )  / expected;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P2_Replace_Operator]^sumSq +=  (  (  ( double )  counts[row][col]  <<  expected )  * (  ( double )  counts[row][col] - expected )  )  / expected;^128^129^^^^104^133^sumSq +=  (  (  ( double )  counts[row][col] - expected )  * (  ( double )  counts[row][col] - expected )  )  / expected;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P1_Replace_Type]^for  (  long  row = 0; row < nRows; row++ )  {^125^^^^^104^133^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P3_Replace_Literal]^for  ( int row = 3; row < nRows; row++ )  {^125^^^^^104^133^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P8_Replace_Mix]^return total;^132^^^^^104^133^return sumSq;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquare [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  colSum  rowSum  long[][]  counts  int  col  nCols  nRows  row  double  expected  sumSq  total  
[P7_Replace_Invocation]^chiSquare ( counts ) ;^143^^^^^141^148^checkArray ( counts ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  ChiSquaredDistribution  chiSquaredDistribution  boolean  long[][]  counts  double  df  
[P14_Delete_Statement]^^143^144^^^^141^148^checkArray ( counts ) ; double df =  (  ( double )  counts.length -1 )  *  (  ( double )  counts[0].length - 1 ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  ChiSquaredDistribution  chiSquaredDistribution  boolean  long[][]  counts  double  df  
[P1_Replace_Type]^int df =  (  ( int )  counts.length -1 )  *  (  ( int )  counts[0].length - 1 ) ;^144^^^^^141^148^double df =  (  ( double )  counts.length -1 )  *  (  ( double )  counts[0].length - 1 ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  ChiSquaredDistribution  chiSquaredDistribution  boolean  long[][]  counts  double  df  
[P2_Replace_Operator]^double + df =  (  ( double )  counts.length -1 )  *  (  ( double )  counts[0].length - 1 ) ;^144^^^^^141^148^double df =  (  ( double )  counts.length -1 )  *  (  ( double )  counts[0].length - 1 ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  ChiSquaredDistribution  chiSquaredDistribution  boolean  long[][]  counts  double  df  
[P2_Replace_Operator]^double df =  (  ( double )  counts.length -1 )  *  (  ( double )  counts[0].length  &&  1 ) ;^144^^^^^141^148^double df =  (  ( double )  counts.length -1 )  *  (  ( double )  counts[0].length - 1 ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  ChiSquaredDistribution  chiSquaredDistribution  boolean  long[][]  counts  double  df  
[P2_Replace_Operator]^double df =  (  ( double )  counts.length -1 )  *  (  ( double )  counts[0].length   instanceof   1 ) ;^144^^^^^141^148^double df =  (  ( double )  counts.length -1 )  *  (  ( double )  counts[0].length - 1 ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  ChiSquaredDistribution  chiSquaredDistribution  boolean  long[][]  counts  double  df  
[P3_Replace_Literal]^double df =  (  ( double )  counts.length - )  *  (  ( double )  counts[0].length -  ) ;^144^^^^^141^148^double df =  (  ( double )  counts.length -1 )  *  (  ( double )  counts[0].length - 1 ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  ChiSquaredDistribution  chiSquaredDistribution  boolean  long[][]  counts  double  df  
[P3_Replace_Literal]^double df =  (  ( double )  counts.length -1 )  *  (  ( double )  counts[-9].length - 1 ) ;^144^^^^^141^148^double df =  (  ( double )  counts.length -1 )  *  (  ( double )  counts[0].length - 1 ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  ChiSquaredDistribution  chiSquaredDistribution  boolean  long[][]  counts  double  df  
[P3_Replace_Literal]^double df =  (  ( double )  counts.length -1 )  *  (  ( double )  counts[0].length  ) ;^144^^^^^141^148^double df =  (  ( double )  counts.length -1 )  *  (  ( double )  counts[0].length - 1 ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  ChiSquaredDistribution  chiSquaredDistribution  boolean  long[][]  counts  double  df  
[P8_Replace_Mix]^ChiSquaredDistribution chiSquaredDistribution = getDistributionFactory (  )  .newInstance (  )  ;^145^146^^^^141^148^ChiSquaredDistribution chiSquaredDistribution = getDistributionFactory (  ) .createChiSquareDistribution ( df ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  ChiSquaredDistribution  chiSquaredDistribution  boolean  long[][]  counts  double  df  
[P8_Replace_Mix]^getDistributionFactory (  )  .newInstance (  )  ;^146^^^^^141^148^getDistributionFactory (  ) .createChiSquareDistribution ( df ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  ChiSquaredDistribution  chiSquaredDistribution  boolean  long[][]  counts  double  df  
[P14_Delete_Statement]^^146^147^^^^141^148^getDistributionFactory (  ) .createChiSquareDistribution ( df ) ; return 1 - chiSquaredDistribution.cumulativeProbability ( chiSquare ( counts )  ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  ChiSquaredDistribution  chiSquaredDistribution  boolean  long[][]  counts  double  df  
[P11_Insert_Donor_Statement]^getDistributionFactory (  ) .createChiSquareDistribution ( ( double )  expected.length - 1 ) ;getDistributionFactory (  ) .createChiSquareDistribution ( df ) ;^146^^^^^141^148^getDistributionFactory (  ) .createChiSquareDistribution ( df ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  ChiSquaredDistribution  chiSquaredDistribution  boolean  long[][]  counts  double  df  
[P14_Delete_Statement]^^146^^^^^141^148^getDistributionFactory (  ) .createChiSquareDistribution ( df ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  ChiSquaredDistribution  chiSquaredDistribution  boolean  long[][]  counts  double  df  
[P2_Replace_Operator]^return 1  &  chiSquaredDistribution.cumulativeProbability ( chiSquare ( counts )  ) ;^147^^^^^141^148^return 1 - chiSquaredDistribution.cumulativeProbability ( chiSquare ( counts )  ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  ChiSquaredDistribution  chiSquaredDistribution  boolean  long[][]  counts  double  df  
[P3_Replace_Literal]^return -6 - chiSquaredDistribution.cumulativeProbability ( chiSquare ( counts )  ) ;^147^^^^^141^148^return 1 - chiSquaredDistribution.cumulativeProbability ( chiSquare ( counts )  ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  ChiSquaredDistribution  chiSquaredDistribution  boolean  long[][]  counts  double  df  
[P5_Replace_Variable]^return 1 - counts.cumulativeProbability ( chiSquare ( chiSquaredDistribution )  ) ;^147^^^^^141^148^return 1 - chiSquaredDistribution.cumulativeProbability ( chiSquare ( counts )  ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  ChiSquaredDistribution  chiSquaredDistribution  boolean  long[][]  counts  double  df  
[P7_Replace_Invocation]^return 1 - chiSquareTestdDistribution.cumulativeProbability ( chiSquare ( counts )  ) ;^147^^^^^141^148^return 1 - chiSquaredDistribution.cumulativeProbability ( chiSquare ( counts )  ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  ChiSquaredDistribution  chiSquaredDistribution  boolean  long[][]  counts  double  df  
[P8_Replace_Mix]^return 1  &  chiSquareTestdDistribution.cumulativeProbability ( chiSquare ( counts )  ) ;^147^^^^^141^148^return 1 - chiSquaredDistribution.cumulativeProbability ( chiSquare ( counts )  ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  ChiSquaredDistribution  chiSquaredDistribution  boolean  long[][]  counts  double  df  
[P14_Delete_Statement]^^147^^^^^141^148^return 1 - chiSquaredDistribution.cumulativeProbability ( chiSquare ( counts )  ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] double   long[][] counts [VARIABLES] DistributionFactory  distributionFactory  ChiSquaredDistribution  chiSquaredDistribution  boolean  long[][]  counts  double  df  
[P2_Replace_Operator]^if  (  ( alpha <= 0 )  &&  ( alpha > 0.5 )  )  {^160^^^^^158^164^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   long[][] counts double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  counts  double  alpha  
[P2_Replace_Operator]^if  (  ( alpha < 0 )  ||  ( alpha > 0.5 )  )  {^160^^^^^158^164^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   long[][] counts double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  counts  double  alpha  
[P2_Replace_Operator]^if  (  ( alpha <= 0 )  ||  ( alpha >= 0.5 )  )  {^160^^^^^158^164^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   long[][] counts double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  counts  double  alpha  
[P3_Replace_Literal]^if  (  ( alpha <= 2 )  ||  ( alpha > 2.5 )  )  {^160^^^^^158^164^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   long[][] counts double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  counts  double  alpha  
[P3_Replace_Literal]^if  (  ( alpha <= 0 )  ||  ( alpha > 4.0 )  )  {^160^^^^^158^164^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   long[][] counts double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  counts  double  alpha  
[P6_Replace_Expression]^if  (  ( alpha <= 0 )  ) {^160^^^^^158^164^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   long[][] counts double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  counts  double  alpha  
[P6_Replace_Expression]^if  (   ( alpha > 0.5 )  )  {^160^^^^^158^164^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   long[][] counts double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  counts  double  alpha  
[P6_Replace_Expression]^if  ( alpha <= 0 )  {^160^^^^^158^164^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   long[][] counts double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  counts  double  alpha  
[P6_Replace_Expression]^if  ( alpha > 0.5 )  {^160^^^^^158^164^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   long[][] counts double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  counts  double  alpha  
[P6_Replace_Expression]^if  ( "bad significance level: " + alpha )  {^160^^^^^158^164^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   long[][] counts double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  counts  double  alpha  
[P8_Replace_Mix]^if  (  ( alpha <= 0 >> 2 )  ) {^160^^^^^158^164^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   long[][] counts double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  counts  double  alpha  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException(("bad significance level: " + alpha));^160^161^162^^^158^164^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   long[][] counts double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  counts  double  alpha  
[P16_Remove_Block]^^160^161^162^^^158^164^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   long[][] counts double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  counts  double  alpha  
[P13_Insert_Block]^if  (  ( in[0].length )  < 2 )  {     throw new IllegalArgumentException ( "Input table must have at least two columns" ) ; }^160^^^^^158^164^[Delete]^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   long[][] counts double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  counts  double  alpha  
[P13_Insert_Block]^if  ( ! ( isRectangular ( in )  )  )  {     throw new IllegalArgumentException ( "Input table must be rectangular" ) ; }^160^^^^^158^164^[Delete]^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   long[][] counts double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  counts  double  alpha  
[P13_Insert_Block]^if  (  ( in.length )  < 2 )  {     throw new IllegalArgumentException ( "Input table must have at least two rows" ) ; }^160^^^^^158^164^[Delete]^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   long[][] counts double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  counts  double  alpha  
[P13_Insert_Block]^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {     throw new IllegalArgumentException (  ( "bad significance level: " + alpha )  ) ; }^161^^^^^158^164^[Delete]^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   long[][] counts double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  counts  double  alpha  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "bad significance level: " + alpha ) ;throw new IllegalArgumentException  (" ")  ;^161^^^^^158^164^throw new IllegalArgumentException  (" ")  ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   long[][] counts double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  counts  double  alpha  
[P2_Replace_Operator]^return  ( chiSquareTest ( counts )  <= alpha ) ;^163^^^^^158^164^return  ( chiSquareTest ( counts )  < alpha ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   long[][] counts double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  counts  double  alpha  
[P5_Replace_Variable]^return  ( chiSquareTest ( alpha )  < counts ) ;^163^^^^^158^164^return  ( chiSquareTest ( counts )  < alpha ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   long[][] counts double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  counts  double  alpha  
[P7_Replace_Invocation]^return  ( chiSquare ( counts )  < alpha ) ;^163^^^^^158^164^return  ( chiSquareTest ( counts )  < alpha ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   long[][] counts double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  counts  double  alpha  
[P8_Replace_Mix]^return  ( chiSquare ( counts )   ;^163^^^^^158^164^return  ( chiSquareTest ( counts )  < alpha ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   long[][] counts double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  counts  double  alpha  
[P14_Delete_Statement]^^163^^^^^158^164^return  ( chiSquareTest ( counts )  < alpha ) ;^[CLASS] ChiSquareTestImpl  [METHOD] chiSquareTest [RETURN_TYPE] boolean   long[][] counts double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  counts  double  alpha  
[P2_Replace_Operator]^if  ( in.length <= 2 )  {^176^^^^^174^192^if  ( in.length < 2 )  {^[CLASS] ChiSquareTestImpl  [METHOD] checkArray [RETURN_TYPE] void   long[][] in [VARIABLES] DistributionFactory  distributionFactory  long[][]  in  boolean  
[P3_Replace_Literal]^if  ( in.length < -1 )  {^176^^^^^174^192^if  ( in.length < 2 )  {^[CLASS] ChiSquareTestImpl  [METHOD] checkArray [RETURN_TYPE] void   long[][] in [VARIABLES] DistributionFactory  distributionFactory  long[][]  in  boolean  
[P5_Replace_Variable]^if  ( in.length.length < 2 )  {^176^^^^^174^192^if  ( in.length < 2 )  {^[CLASS] ChiSquareTestImpl  [METHOD] checkArray [RETURN_TYPE] void   long[][] in [VARIABLES] DistributionFactory  distributionFactory  long[][]  in  boolean  
[P5_Replace_Variable]^if  ( in < 2 )  {^176^^^^^174^192^if  ( in.length < 2 )  {^[CLASS] ChiSquareTestImpl  [METHOD] checkArray [RETURN_TYPE] void   long[][] in [VARIABLES] DistributionFactory  distributionFactory  long[][]  in  boolean  
[P8_Replace_Mix]^if  ( in.length < 0  )  {^176^^^^^174^192^if  ( in.length < 2 )  {^[CLASS] ChiSquareTestImpl  [METHOD] checkArray [RETURN_TYPE] void   long[][] in [VARIABLES] DistributionFactory  distributionFactory  long[][]  in  boolean  
[P9_Replace_Statement]^if  ( in[i][j] < 0 )  {^176^^^^^174^192^if  ( in.length < 2 )  {^[CLASS] ChiSquareTestImpl  [METHOD] checkArray [RETURN_TYPE] void   long[][] in [VARIABLES] DistributionFactory  distributionFactory  long[][]  in  boolean  
[P9_Replace_Statement]^if  ( in[0].length < 2 )  {^176^^^^^174^192^if  ( in.length < 2 )  {^[CLASS] ChiSquareTestImpl  [METHOD] checkArray [RETURN_TYPE] void   long[][] in [VARIABLES] DistributionFactory  distributionFactory  long[][]  in  boolean  
[P9_Replace_Statement]^if  ( in[i] < 0 )  {^176^^^^^174^192^if  ( in.length < 2 )  {^[CLASS] ChiSquareTestImpl  [METHOD] checkArray [RETURN_TYPE] void   long[][] in [VARIABLES] DistributionFactory  distributionFactory  long[][]  in  boolean  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("Input table must have at least two rows");^176^177^178^^^174^192^if  ( in.length < 2 )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] ChiSquareTestImpl  [METHOD] checkArray [RETURN_TYPE] void   long[][] in [VARIABLES] DistributionFactory  distributionFactory  long[][]  in  boolean  
[P16_Remove_Block]^^176^177^178^^^174^192^if  ( in.length < 2 )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] ChiSquareTestImpl  [METHOD] checkArray [RETURN_TYPE] void   long[][] in [VARIABLES] DistributionFactory  distributionFactory  long[][]  in  boolean  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "Input table must be rectangular" )   ;^177^^^^^174^192^throw new IllegalArgumentException  (" ")  ;^[CLASS] ChiSquareTestImpl  [METHOD] checkArray [RETURN_TYPE] void   long[][] in [VARIABLES] DistributionFactory  distributionFactory  long[][]  in  boolean  
[P13_Insert_Block]^if  (  ( in[0].length )  < 2 )  {     throw new IllegalArgumentException ( "Input table must have at least two columns" ) ; }^177^^^^^174^192^[Delete]^[CLASS] ChiSquareTestImpl  [METHOD] checkArray [RETURN_TYPE] void   long[][] in [VARIABLES] DistributionFactory  distributionFactory  long[][]  in  boolean  
[P13_Insert_Block]^if  (  ( in.length )  < 2 )  {     throw new IllegalArgumentException ( "Input table must have at least two rows" ) ; }^177^^^^^174^192^[Delete]^[CLASS] ChiSquareTestImpl  [METHOD] checkArray [RETURN_TYPE] void   long[][] in [VARIABLES] DistributionFactory  distributionFactory  long[][]  in  boolean  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "bad significance level: " + alpha ) ;throw new IllegalArgumentException  (" ")  ;^177^^^^^174^192^throw new IllegalArgumentException  (" ")  ;^[CLASS] ChiSquareTestImpl  [METHOD] checkArray [RETURN_TYPE] void   long[][] in [VARIABLES] DistributionFactory  distributionFactory  long[][]  in  boolean  
[P13_Insert_Block]^if  ( ! ( isRectangular ( in )  )  )  {     throw new IllegalArgumentException ( "Input table must be rectangular" ) ; }^177^^^^^174^192^[Delete]^[CLASS] ChiSquareTestImpl  [METHOD] checkArray [RETURN_TYPE] void   long[][] in [VARIABLES] DistributionFactory  distributionFactory  long[][]  in  boolean  
[P2_Replace_Operator]^if  ( in[0].length > 2 )  {^180^^^^^174^192^if  ( in[0].length < 2 )  {^[CLASS] ChiSquareTestImpl  [METHOD] checkArray [RETURN_TYPE] void   long[][] in [VARIABLES] DistributionFactory  distributionFactory  long[][]  in  boolean  
[P3_Replace_Literal]^if  ( in[8].length < 2 )  {^180^^^^^174^192^if  ( in[0].length < 2 )  {^[CLASS] ChiSquareTestImpl  [METHOD] checkArray [RETURN_TYPE] void   long[][] in [VARIABLES] DistributionFactory  distributionFactory  long[][]  in  boolean  
[P3_Replace_Literal]^if  ( in[0].length < 1 )  {^180^^^^^174^192^if  ( in[0].length < 2 )  {^[CLASS] ChiSquareTestImpl  [METHOD] checkArray [RETURN_TYPE] void   long[][] in [VARIABLES] DistributionFactory  distributionFactory  long[][]  in  boolean  
[P5_Replace_Variable]^if  ( in[0].length[0].length < 2 )  {^180^^^^^174^192^if  ( in[0].length < 2 )  {^[CLASS] ChiSquareTestImpl  [METHOD] checkArray [RETURN_TYPE] void   long[][] in [VARIABLES] DistributionFactory  distributionFactory  long[][]  in  boolean  
[P8_Replace_Mix]^if  ( in[0 ].length < 2 )  {^180^^^^^174^192^if  ( in[0].length < 2 )  {^[CLASS] ChiSquareTestImpl  [METHOD] checkArray [RETURN_TYPE] void   long[][] in [VARIABLES] DistributionFactory  distributionFactory  long[][]  in  boolean  
[P9_Replace_Statement]^if  ( in[i][j] < 0 )  {^180^^^^^174^192^if  ( in[0].length < 2 )  {^[CLASS] ChiSquareTestImpl  [METHOD] checkArray [RETURN_TYPE] void   long[][] in [VARIABLES] DistributionFactory  distributionFactory  long[][]  in  boolean  
[P9_Replace_Statement]^if  ( in.length < 2 )  {^180^^^^^174^192^if  ( in[0].length < 2 )  {^[CLASS] ChiSquareTestImpl  [METHOD] checkArray [RETURN_TYPE] void   long[][] in [VARIABLES] DistributionFactory  distributionFactory  long[][]  in  boolean  
[P9_Replace_Statement]^if  ( in[i] < 0 )  {^180^^^^^174^192^if  ( in[0].length < 2 )  {^[CLASS] ChiSquareTestImpl  [METHOD] checkArray [RETURN_TYPE] void   long[][] in [VARIABLES] DistributionFactory  distributionFactory  long[][]  in  boolean  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("Input table must have at least two columns");^180^181^182^^^174^192^if  ( in[0].length < 2 )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] ChiSquareTestImpl  [METHOD] checkArray [RETURN_TYPE] void   long[][] in [VARIABLES] DistributionFactory  distributionFactory  long[][]  in  boolean  
[P16_Remove_Block]^^180^181^182^^^174^192^if  ( in[0].length < 2 )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] ChiSquareTestImpl  [METHOD] checkArray [RETURN_TYPE] void   long[][] in [VARIABLES] DistributionFactory  distributionFactory  long[][]  in  boolean  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "Input table must be rectangular" )   ;^181^^^^^174^192^throw new IllegalArgumentException  (" ")  ;^[CLASS] ChiSquareTestImpl  [METHOD] checkArray [RETURN_TYPE] void   long[][] in [VARIABLES] DistributionFactory  distributionFactory  long[][]  in  boolean  
[P13_Insert_Block]^if  (  ( in[0].length )  < 2 )  {     throw new IllegalArgumentException ( "Input table must have at least two columns" ) ; }^181^^^^^174^192^[Delete]^[CLASS] ChiSquareTestImpl  [METHOD] checkArray [RETURN_TYPE] void   long[][] in [VARIABLES] DistributionFactory  distributionFactory  long[][]  in  boolean  
[P13_Insert_Block]^if  (  ( in.length )  < 2 )  {     throw new IllegalArgumentException ( "Input table must have at least two rows" ) ; }^181^^^^^174^192^[Delete]^[CLASS] ChiSquareTestImpl  [METHOD] checkArray [RETURN_TYPE] void   long[][] in [VARIABLES] DistributionFactory  distributionFactory  long[][]  in  boolean  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "bad significance level: " + alpha ) ;throw new IllegalArgumentException  (" ")  ;^181^^^^^174^192^throw new IllegalArgumentException  (" ")  ;^[CLASS] ChiSquareTestImpl  [METHOD] checkArray [RETURN_TYPE] void   long[][] in [VARIABLES] DistributionFactory  distributionFactory  long[][]  in  boolean  
[P13_Insert_Block]^if  ( ! ( isRectangular ( in )  )  )  {     throw new IllegalArgumentException ( "Input table must be rectangular" ) ; }^181^^^^^174^192^[Delete]^[CLASS] ChiSquareTestImpl  [METHOD] checkArray [RETURN_TYPE] void   long[][] in [VARIABLES] DistributionFactory  distributionFactory  long[][]  in  boolean  
[P7_Replace_Invocation]^if  ( !checkArray ( in )  )  {^184^^^^^174^192^if  ( !isRectangular ( in )  )  {^[CLASS] ChiSquareTestImpl  [METHOD] checkArray [RETURN_TYPE] void   long[][] in [VARIABLES] DistributionFactory  distributionFactory  long[][]  in  boolean  
[P9_Replace_Statement]^if  ( !isNonNegative ( in )  )  {^184^^^^^174^192^if  ( !isRectangular ( in )  )  {^[CLASS] ChiSquareTestImpl  [METHOD] checkArray [RETURN_TYPE] void   long[][] in [VARIABLES] DistributionFactory  distributionFactory  long[][]  in  boolean  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("Input table must be rectangular");^184^185^186^^^174^192^if  ( !isRectangular ( in )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] ChiSquareTestImpl  [METHOD] checkArray [RETURN_TYPE] void   long[][] in [VARIABLES] DistributionFactory  distributionFactory  long[][]  in  boolean  
[P16_Remove_Block]^^184^185^186^^^174^192^if  ( !isRectangular ( in )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] ChiSquareTestImpl  [METHOD] checkArray [RETURN_TYPE] void   long[][] in [VARIABLES] DistributionFactory  distributionFactory  long[][]  in  boolean  
[P13_Insert_Block]^if  ( ! ( isNonNegative ( in )  )  )  {     throw new IllegalArgumentException ( "All entries in input 2-way table must be non-negative" ) ; }^184^^^^^174^192^[Delete]^[CLASS] ChiSquareTestImpl  [METHOD] checkArray [RETURN_TYPE] void   long[][] in [VARIABLES] DistributionFactory  distributionFactory  long[][]  in  boolean  
[P13_Insert_Block]^if  (  ( in[0].length )  < 2 )  {     throw new IllegalArgumentException ( "Input table must have at least two columns" ) ; }^184^^^^^174^192^[Delete]^[CLASS] ChiSquareTestImpl  [METHOD] checkArray [RETURN_TYPE] void   long[][] in [VARIABLES] DistributionFactory  distributionFactory  long[][]  in  boolean  
[P13_Insert_Block]^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {     throw new IllegalArgumentException (  ( "bad significance level: " + alpha )  ) ; }^184^^^^^174^192^[Delete]^[CLASS] ChiSquareTestImpl  [METHOD] checkArray [RETURN_TYPE] void   long[][] in [VARIABLES] DistributionFactory  distributionFactory  long[][]  in  boolean  
[P13_Insert_Block]^if  (  ( in.length )  < 2 )  {     throw new IllegalArgumentException ( "Input table must have at least two rows" ) ; }^184^^^^^174^192^[Delete]^[CLASS] ChiSquareTestImpl  [METHOD] checkArray [RETURN_TYPE] void   long[][] in [VARIABLES] DistributionFactory  distributionFactory  long[][]  in  boolean  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "Input table must have at least two rows" )   ;^185^^^^^174^192^throw new IllegalArgumentException  (" ")  ;^[CLASS] ChiSquareTestImpl  [METHOD] checkArray [RETURN_TYPE] void   long[][] in [VARIABLES] DistributionFactory  distributionFactory  long[][]  in  boolean  
[P13_Insert_Block]^if  (  ( in[0].length )  < 2 )  {     throw new IllegalArgumentException ( "Input table must have at least two columns" ) ; }^185^^^^^174^192^[Delete]^[CLASS] ChiSquareTestImpl  [METHOD] checkArray [RETURN_TYPE] void   long[][] in [VARIABLES] DistributionFactory  distributionFactory  long[][]  in  boolean  
[P13_Insert_Block]^if  ( ! ( isRectangular ( in )  )  )  {     throw new IllegalArgumentException ( "Input table must be rectangular" ) ; }^185^^^^^174^192^[Delete]^[CLASS] ChiSquareTestImpl  [METHOD] checkArray [RETURN_TYPE] void   long[][] in [VARIABLES] DistributionFactory  distributionFactory  long[][]  in  boolean  
[P13_Insert_Block]^if  (  ( in.length )  < 2 )  {     throw new IllegalArgumentException ( "Input table must have at least two rows" ) ; }^185^^^^^174^192^[Delete]^[CLASS] ChiSquareTestImpl  [METHOD] checkArray [RETURN_TYPE] void   long[][] in [VARIABLES] DistributionFactory  distributionFactory  long[][]  in  boolean  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "bad significance level: " + alpha ) ;throw new IllegalArgumentException  (" ")  ;^185^^^^^174^192^throw new IllegalArgumentException  (" ")  ;^[CLASS] ChiSquareTestImpl  [METHOD] checkArray [RETURN_TYPE] void   long[][] in [VARIABLES] DistributionFactory  distributionFactory  long[][]  in  boolean  
[P13_Insert_Block]^if  ( ! ( isNonNegative ( in )  )  )  {     throw new IllegalArgumentException ( "All entries in input 2-way table must be non-negative" ) ; }^185^^^^^174^192^[Delete]^[CLASS] ChiSquareTestImpl  [METHOD] checkArray [RETURN_TYPE] void   long[][] in [VARIABLES] DistributionFactory  distributionFactory  long[][]  in  boolean  
[P8_Replace_Mix]^if  ( isNonNegative ( in )  )  {^188^^^^^174^192^if  ( !isNonNegative ( in )  )  {^[CLASS] ChiSquareTestImpl  [METHOD] checkArray [RETURN_TYPE] void   long[][] in [VARIABLES] DistributionFactory  distributionFactory  long[][]  in  boolean  
[P9_Replace_Statement]^if  ( !isRectangular ( in )  )  {^188^^^^^174^192^if  ( !isNonNegative ( in )  )  {^[CLASS] ChiSquareTestImpl  [METHOD] checkArray [RETURN_TYPE] void   long[][] in [VARIABLES] DistributionFactory  distributionFactory  long[][]  in  boolean  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("All entries in input 2-way table must be non-negative");^188^189^190^^^174^192^if  ( !isNonNegative ( in )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] ChiSquareTestImpl  [METHOD] checkArray [RETURN_TYPE] void   long[][] in [VARIABLES] DistributionFactory  distributionFactory  long[][]  in  boolean  
[P16_Remove_Block]^^188^189^190^^^174^192^if  ( !isNonNegative ( in )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] ChiSquareTestImpl  [METHOD] checkArray [RETURN_TYPE] void   long[][] in [VARIABLES] DistributionFactory  distributionFactory  long[][]  in  boolean  
[P13_Insert_Block]^if  ( ! ( isNonNegative ( in )  )  )  {     throw new IllegalArgumentException ( "All entries in input 2-way table must be non-negative" ) ; }^189^^^^^174^192^[Delete]^[CLASS] ChiSquareTestImpl  [METHOD] checkArray [RETURN_TYPE] void   long[][] in [VARIABLES] DistributionFactory  distributionFactory  long[][]  in  boolean  
[P8_Replace_Mix]^throw new IllegalArgumentException ( "observed, expected array lengths incorrect" ) ; ;^189^^^^^174^192^throw new IllegalArgumentException  (" ")  ;^[CLASS] ChiSquareTestImpl  [METHOD] checkArray [RETURN_TYPE] void   long[][] in [VARIABLES] DistributionFactory  distributionFactory  long[][]  in  boolean  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "bad significance level: " + alpha ) ;throw new IllegalArgumentException  (" ")  ;^189^^^^^174^192^throw new IllegalArgumentException  (" ")  ;^[CLASS] ChiSquareTestImpl  [METHOD] checkArray [RETURN_TYPE] void   long[][] in [VARIABLES] DistributionFactory  distributionFactory  long[][]  in  boolean  
[P2_Replace_Operator]^if  ( distributionFactory != null )  {^201^^^^^200^205^if  ( distributionFactory == null )  {^[CLASS] ChiSquareTestImpl  [METHOD] getDistributionFactory [RETURN_TYPE] DistributionFactory   [VARIABLES] DistributionFactory  distributionFactory  boolean  
[P8_Replace_Mix]^if  ( distributionFactory == this )  {^201^^^^^200^205^if  ( distributionFactory == null )  {^[CLASS] ChiSquareTestImpl  [METHOD] getDistributionFactory [RETURN_TYPE] DistributionFactory   [VARIABLES] DistributionFactory  distributionFactory  boolean  
[P15_Unwrap_Block]^distributionFactory = org.apache.commons.math.distribution.DistributionFactory.newInstance();^201^202^203^^^200^205^if  ( distributionFactory == null )  { distributionFactory = DistributionFactory.newInstance (  ) ; }^[CLASS] ChiSquareTestImpl  [METHOD] getDistributionFactory [RETURN_TYPE] DistributionFactory   [VARIABLES] DistributionFactory  distributionFactory  boolean  
[P16_Remove_Block]^^201^202^203^^^200^205^if  ( distributionFactory == null )  { distributionFactory = DistributionFactory.newInstance (  ) ; }^[CLASS] ChiSquareTestImpl  [METHOD] getDistributionFactory [RETURN_TYPE] DistributionFactory   [VARIABLES] DistributionFactory  distributionFactory  boolean  
[P8_Replace_Mix]^distributionFactory ;^202^^^^^200^205^distributionFactory = DistributionFactory.newInstance (  ) ;^[CLASS] ChiSquareTestImpl  [METHOD] getDistributionFactory [RETURN_TYPE] DistributionFactory   [VARIABLES] DistributionFactory  distributionFactory  boolean  
[P13_Insert_Block]^if  (  ( distributionFactory )  == null )  {     distributionFactory = newInstance (  ) ; }^202^^^^^200^205^[Delete]^[CLASS] ChiSquareTestImpl  [METHOD] getDistributionFactory [RETURN_TYPE] DistributionFactory   [VARIABLES] DistributionFactory  distributionFactory  boolean  
[P14_Delete_Statement]^^202^^^^^200^205^distributionFactory = DistributionFactory.newInstance (  ) ;^[CLASS] ChiSquareTestImpl  [METHOD] getDistributionFactory [RETURN_TYPE] DistributionFactory   [VARIABLES] DistributionFactory  distributionFactory  boolean  
[P8_Replace_Mix]^distributionFactory  =  distributionFactory ;^202^^^^^200^205^distributionFactory = DistributionFactory.newInstance (  ) ;^[CLASS] ChiSquareTestImpl  [METHOD] getDistributionFactory [RETURN_TYPE] DistributionFactory   [VARIABLES] DistributionFactory  distributionFactory  boolean  
[P2_Replace_Operator]^if  ( in[i].length > in[0].length )  {^219^^^^^217^224^if  ( in[i].length != in[0].length )  {^[CLASS] ChiSquareTestImpl  [METHOD] isRectangular [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  
[P3_Replace_Literal]^if  ( in[i].length != in[].length )  {^219^^^^^217^224^if  ( in[i].length != in[0].length )  {^[CLASS] ChiSquareTestImpl  [METHOD] isRectangular [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  
[P5_Replace_Variable]^if  ( i[i].length != inn[0].length )  {^219^^^^^217^224^if  ( in[i].length != in[0].length )  {^[CLASS] ChiSquareTestImpl  [METHOD] isRectangular [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  
[P5_Replace_Variable]^if  ( inn[i].length != i[0].length )  {^219^^^^^217^224^if  ( in[i].length != in[0].length )  {^[CLASS] ChiSquareTestImpl  [METHOD] isRectangular [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  
[P5_Replace_Variable]^if  ( in[i].length[i].length != in[0].length )  {^219^^^^^217^224^if  ( in[i].length != in[0].length )  {^[CLASS] ChiSquareTestImpl  [METHOD] isRectangular [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  
[P5_Replace_Variable]^if  ( in[0].length[i].length != in[0].length )  {^219^^^^^217^224^if  ( in[i].length != in[0].length )  {^[CLASS] ChiSquareTestImpl  [METHOD] isRectangular [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  
[P8_Replace_Mix]^if  ( in[i].length != in[0 ].length )  {^219^^^^^217^224^if  ( in[i].length != in[0].length )  {^[CLASS] ChiSquareTestImpl  [METHOD] isRectangular [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  
[P15_Unwrap_Block]^return false;^219^220^221^^^217^224^if  ( in[i].length != in[0].length )  { return false; }^[CLASS] ChiSquareTestImpl  [METHOD] isRectangular [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  
[P16_Remove_Block]^^219^220^221^^^217^224^if  ( in[i].length != in[0].length )  { return false; }^[CLASS] ChiSquareTestImpl  [METHOD] isRectangular [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  
[P13_Insert_Block]^if  (  ( in[i][j] )  < 0 )  {     return false; }^219^^^^^217^224^[Delete]^[CLASS] ChiSquareTestImpl  [METHOD] isRectangular [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  
[P13_Insert_Block]^if  (  ( in[i] )  <= 0 )  {     return false; }^219^^^^^217^224^[Delete]^[CLASS] ChiSquareTestImpl  [METHOD] isRectangular [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  
[P13_Insert_Block]^if  (  ( in[i] )  < 0 )  {     return false; }^219^^^^^217^224^[Delete]^[CLASS] ChiSquareTestImpl  [METHOD] isRectangular [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  
[P3_Replace_Literal]^return true;^220^^^^^217^224^return false;^[CLASS] ChiSquareTestImpl  [METHOD] isRectangular [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  
[P1_Replace_Type]^for  (  long  i = 1; i < in.length; i++ )  {^218^^^^^217^224^for  ( int i = 1; i < in.length; i++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isRectangular [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  
[P2_Replace_Operator]^for  ( int i = 1; i > in.length; i++ )  {^218^^^^^217^224^for  ( int i = 1; i < in.length; i++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isRectangular [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  
[P3_Replace_Literal]^for  ( int i = i; i < in.length; i++ )  {^218^^^^^217^224^for  ( int i = 1; i < in.length; i++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isRectangular [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  
[P5_Replace_Variable]^for  ( in.lengtht i = 1; i < in; i++ )  {^218^^^^^217^224^for  ( int i = 1; i < in.length; i++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isRectangular [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  
[P2_Replace_Operator]^if  ( in[i].length >= in[0].length )  {^219^^^^^217^224^if  ( in[i].length != in[0].length )  {^[CLASS] ChiSquareTestImpl  [METHOD] isRectangular [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  
[P3_Replace_Literal]^if  ( in[i].length != in[i].length )  {^219^^^^^217^224^if  ( in[i].length != in[0].length )  {^[CLASS] ChiSquareTestImpl  [METHOD] isRectangular [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  
[P5_Replace_Variable]^if  ( in[0].lengthn[i].length != in[0].length )  {^219^^^^^217^224^if  ( in[i].length != in[0].length )  {^[CLASS] ChiSquareTestImpl  [METHOD] isRectangular [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  
[P5_Replace_Variable]^if  ( in[i].lengthn[i].length != in[0].length )  {^219^^^^^217^224^if  ( in[i].length != in[0].length )  {^[CLASS] ChiSquareTestImpl  [METHOD] isRectangular [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  
[P1_Replace_Type]^for  (  short  i = 1; i < in.length; i++ )  {^218^^^^^217^224^for  ( int i = 1; i < in.length; i++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isRectangular [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  
[P3_Replace_Literal]^for  ( int i = ; i < in.length; i++ )  {^218^^^^^217^224^for  ( int i = 1; i < in.length; i++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isRectangular [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  
[P3_Replace_Literal]^return false;^223^^^^^217^224^return true;^[CLASS] ChiSquareTestImpl  [METHOD] isRectangular [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  
[P2_Replace_Operator]^if  ( in[i] > 0 )  {^236^^^^^234^241^if  ( in[i] <= 0 )  {^[CLASS] ChiSquareTestImpl  [METHOD] isPositive [RETURN_TYPE] boolean   double[] in [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  in  int  i  
[P3_Replace_Literal]^if  ( in[i] <= i )  {^236^^^^^234^241^if  ( in[i] <= 0 )  {^[CLASS] ChiSquareTestImpl  [METHOD] isPositive [RETURN_TYPE] boolean   double[] in [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  in  int  i  
[P5_Replace_Variable]^if  ( i[i] <= 0 )  {^236^^^^^234^241^if  ( in[i] <= 0 )  {^[CLASS] ChiSquareTestImpl  [METHOD] isPositive [RETURN_TYPE] boolean   double[] in [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  in  int  i  
[P5_Replace_Variable]^if  ( inn[i] <= 0 )  {^236^^^^^234^241^if  ( in[i] <= 0 )  {^[CLASS] ChiSquareTestImpl  [METHOD] isPositive [RETURN_TYPE] boolean   double[] in [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  in  int  i  
[P8_Replace_Mix]^if  ( in[i] <= 1 )  {^236^^^^^234^241^if  ( in[i] <= 0 )  {^[CLASS] ChiSquareTestImpl  [METHOD] isPositive [RETURN_TYPE] boolean   double[] in [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  in  int  i  
[P9_Replace_Statement]^if  ( in[i][j] < 0 )  {^236^^^^^234^241^if  ( in[i] <= 0 )  {^[CLASS] ChiSquareTestImpl  [METHOD] isPositive [RETURN_TYPE] boolean   double[] in [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  in  int  i  
[P9_Replace_Statement]^if  ( in[i] < 0 )  {^236^^^^^234^241^if  ( in[i] <= 0 )  {^[CLASS] ChiSquareTestImpl  [METHOD] isPositive [RETURN_TYPE] boolean   double[] in [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  in  int  i  
[P15_Unwrap_Block]^return false;^236^237^238^^^234^241^if  ( in[i] <= 0 )  { return false; }^[CLASS] ChiSquareTestImpl  [METHOD] isPositive [RETURN_TYPE] boolean   double[] in [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  in  int  i  
[P16_Remove_Block]^^236^237^238^^^234^241^if  ( in[i] <= 0 )  { return false; }^[CLASS] ChiSquareTestImpl  [METHOD] isPositive [RETURN_TYPE] boolean   double[] in [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  in  int  i  
[P13_Insert_Block]^if  (  ( in[i][j] )  < 0 )  {     return false; }^236^^^^^234^241^[Delete]^[CLASS] ChiSquareTestImpl  [METHOD] isPositive [RETURN_TYPE] boolean   double[] in [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  in  int  i  
[P13_Insert_Block]^if  (  ( in[i].length )  !=  ( in[0].length )  )  {     return false; }^236^^^^^234^241^[Delete]^[CLASS] ChiSquareTestImpl  [METHOD] isPositive [RETURN_TYPE] boolean   double[] in [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  in  int  i  
[P13_Insert_Block]^if  (  ( in[i] )  < 0 )  {     return false; }^236^^^^^234^241^[Delete]^[CLASS] ChiSquareTestImpl  [METHOD] isPositive [RETURN_TYPE] boolean   double[] in [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  in  int  i  
[P3_Replace_Literal]^return true;^237^^^^^234^241^return false;^[CLASS] ChiSquareTestImpl  [METHOD] isPositive [RETURN_TYPE] boolean   double[] in [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  in  int  i  
[P1_Replace_Type]^for  (  short  i = 0; i < in.length; i ++ )  {^235^^^^^234^241^for  ( int i = 0; i < in.length; i ++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isPositive [RETURN_TYPE] boolean   double[] in [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  in  int  i  
[P2_Replace_Operator]^for  ( int i = 0; i <= in.length; i ++ )  {^235^^^^^234^241^for  ( int i = 0; i < in.length; i ++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isPositive [RETURN_TYPE] boolean   double[] in [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  in  int  i  
[P3_Replace_Literal]^for  ( int i = 3; i < in.length; i ++ )  {^235^^^^^234^241^for  ( int i = 0; i < in.length; i ++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isPositive [RETURN_TYPE] boolean   double[] in [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  in  int  i  
[P5_Replace_Variable]^for  ( in.lengthnt i = 0; i < i; i ++ )  {^235^^^^^234^241^for  ( int i = 0; i < in.length; i ++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isPositive [RETURN_TYPE] boolean   double[] in [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  in  int  i  
[P5_Replace_Variable]^for  ( it in = 0; i < in.length; i ++ )  {^235^^^^^234^241^for  ( int i = 0; i < in.length; i ++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isPositive [RETURN_TYPE] boolean   double[] in [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  in  int  i  
[P8_Replace_Mix]^if  ( in[i] <= 4 )  {^236^^^^^234^241^if  ( in[i] <= 0 )  {^[CLASS] ChiSquareTestImpl  [METHOD] isPositive [RETURN_TYPE] boolean   double[] in [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  in  int  i  
[P1_Replace_Type]^for  (  long  i = 0; i < in.length; i ++ )  {^235^^^^^234^241^for  ( int i = 0; i < in.length; i ++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isPositive [RETURN_TYPE] boolean   double[] in [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  in  int  i  
[P3_Replace_Literal]^for  ( int i = i; i < in.length; i ++ )  {^235^^^^^234^241^for  ( int i = 0; i < in.length; i ++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isPositive [RETURN_TYPE] boolean   double[] in [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  in  int  i  
[P3_Replace_Literal]^return false;^240^^^^^234^241^return true;^[CLASS] ChiSquareTestImpl  [METHOD] isPositive [RETURN_TYPE] boolean   double[] in [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  in  int  i  
[P2_Replace_Operator]^if  ( in[i] <= 0 )  {^253^^^^^251^258^if  ( in[i] < 0 )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[]  in  int  i  
[P3_Replace_Literal]^if  ( in[i] < i )  {^253^^^^^251^258^if  ( in[i] < 0 )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[]  in  int  i  
[P5_Replace_Variable]^if  ( i[i] < 0 )  {^253^^^^^251^258^if  ( in[i] < 0 )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[]  in  int  i  
[P5_Replace_Variable]^if  ( inn[i] < 0 )  {^253^^^^^251^258^if  ( in[i] < 0 )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[]  in  int  i  
[P8_Replace_Mix]^if  ( in[i] < 2 )  {^253^^^^^251^258^if  ( in[i] < 0 )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[]  in  int  i  
[P9_Replace_Statement]^if  ( in[i][j] < 0 )  {^253^^^^^251^258^if  ( in[i] < 0 )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[]  in  int  i  
[P9_Replace_Statement]^if  ( in.length < 2 )  {^253^^^^^251^258^if  ( in[i] < 0 )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[]  in  int  i  
[P9_Replace_Statement]^if  ( in[0].length < 2 )  {^253^^^^^251^258^if  ( in[i] < 0 )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[]  in  int  i  
[P15_Unwrap_Block]^return false;^253^254^255^^^251^258^if  ( in[i] < 0 )  { return false; }^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[]  in  int  i  
[P16_Remove_Block]^^253^254^255^^^251^258^if  ( in[i] < 0 )  { return false; }^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[]  in  int  i  
[P13_Insert_Block]^if  (  ( in[i][j] )  < 0 )  {     return false; }^253^^^^^251^258^[Delete]^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[]  in  int  i  
[P13_Insert_Block]^if  (  ( in[i].length )  !=  ( in[0].length )  )  {     return false; }^253^^^^^251^258^[Delete]^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[]  in  int  i  
[P13_Insert_Block]^if  (  ( in[i] )  <= 0 )  {     return false; }^253^^^^^251^258^[Delete]^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[]  in  int  i  
[P3_Replace_Literal]^return true;^254^^^^^251^258^return false;^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[]  in  int  i  
[P1_Replace_Type]^for  (  long  i = 0; i < in.length; i ++ )  {^252^^^^^251^258^for  ( int i = 0; i < in.length; i ++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[]  in  int  i  
[P2_Replace_Operator]^for  ( int i = 0; i <= in.length; i ++ )  {^252^^^^^251^258^for  ( int i = 0; i < in.length; i ++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[]  in  int  i  
[P3_Replace_Literal]^for  ( int i = -5; i < in.length; i ++ )  {^252^^^^^251^258^for  ( int i = 0; i < in.length; i ++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[]  in  int  i  
[P5_Replace_Variable]^for  ( in.lengthnt i = 0; i < i; i ++ )  {^252^^^^^251^258^for  ( int i = 0; i < in.length; i ++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[]  in  int  i  
[P5_Replace_Variable]^for  ( it in = 0; i < in.length; i ++ )  {^252^^^^^251^258^for  ( int i = 0; i < in.length; i ++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[]  in  int  i  
[P8_Replace_Mix]^if  ( in[i] < 3 )  {^253^^^^^251^258^if  ( in[i] < 0 )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[]  in  int  i  
[P1_Replace_Type]^for  (  short  i = 0; i < in.length; i ++ )  {^252^^^^^251^258^for  ( int i = 0; i < in.length; i ++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[]  in  int  i  
[P3_Replace_Literal]^for  ( int i = -9; i < in.length; i ++ )  {^252^^^^^251^258^for  ( int i = 0; i < in.length; i ++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[]  in  int  i  
[P3_Replace_Literal]^return false;^257^^^^^251^258^return true;^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[]  in  int  i  
[P2_Replace_Operator]^if  ( in[i][j] <= 0 )  {^271^^^^^268^277^if  ( in[i][j] < 0 )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[P3_Replace_Literal]^if  ( in[i][j] < -3 )  {^271^^^^^268^277^if  ( in[i][j] < 0 )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[P8_Replace_Mix]^if  ( in[i][j] < 1 )  {^271^^^^^268^277^if  ( in[i][j] < 0 )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[P9_Replace_Statement]^if  ( in.length < 2 )  {^271^^^^^268^277^if  ( in[i][j] < 0 )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[P9_Replace_Statement]^if  ( in[0].length < 2 )  {^271^^^^^268^277^if  ( in[i][j] < 0 )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[P9_Replace_Statement]^if  ( in[i] < 0 )  {^271^^^^^268^277^if  ( in[i][j] < 0 )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[P9_Replace_Statement]^if  ( in[i] <= 0 )  {^271^^^^^268^277^if  ( in[i][j] < 0 )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[P15_Unwrap_Block]^return false;^271^272^273^^^268^277^if  ( in[i][j] < 0 )  { return false; }^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[P16_Remove_Block]^^271^272^273^^^268^277^if  ( in[i][j] < 0 )  { return false; }^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[P13_Insert_Block]^if  (  ( in[i].length )  !=  ( in[0].length )  )  {     return false; }^271^^^^^268^277^[Delete]^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[P13_Insert_Block]^if  (  ( in[i] )  <= 0 )  {     return false; }^271^^^^^268^277^[Delete]^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[P13_Insert_Block]^if  (  ( in[i] )  < 0 )  {     return false; }^271^^^^^268^277^[Delete]^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[P3_Replace_Literal]^return true;^272^^^^^268^277^return false;^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[P1_Replace_Type]^for  (  long  i = 0; i < in.length; i ++ )  {^269^^^^^268^277^for  ( int i = 0; i < in.length; i ++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[P2_Replace_Operator]^for  ( int i = 0; i <= in.length; i ++ )  {^269^^^^^268^277^for  ( int i = 0; i < in.length; i ++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[P2_Replace_Operator]^for  ( int i = 0; i == in.length; i ++ )  {^269^^^^^268^277^for  ( int i = 0; i < in.length; i ++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[P3_Replace_Literal]^for  ( int i = i; i < in.length; i ++ )  {^269^^^^^268^277^for  ( int i = 0; i < in.length; i ++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[P3_Replace_Literal]^for  ( int i = 5; i < in.length; i ++ )  {^269^^^^^268^277^for  ( int i = 0; i < in.length; i ++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[P3_Replace_Literal]^for  ( int i = ; i < in.length; i ++ )  {^269^^^^^268^277^for  ( int i = 0; i < in.length; i ++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[P5_Replace_Variable]^for  ( jnt i = 0; i < in.length; i ++ )  {^269^^^^^268^277^for  ( int i = 0; i < in.length; i ++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[P8_Replace_Mix]^for  ( int i = 0; i < j; i ++ )  {^269^^^^^268^277^for  ( int i = 0; i < in.length; i ++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[P2_Replace_Operator]^if  ( in[i][j] == 0 )  {^271^^^^^268^277^if  ( in[i][j] < 0 )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[P3_Replace_Literal]^if  ( in[i][j] < -6 )  {^271^^^^^268^277^if  ( in[i][j] < 0 )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[P8_Replace_Mix]^if  ( in[i][j] < 4 )  {^271^^^^^268^277^if  ( in[i][j] < 0 )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[P1_Replace_Type]^for  (  short  j = 0; j < in[i].length; j++ )  {^270^^^^^268^277^for  ( int j = 0; j < in[i].length; j++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[P2_Replace_Operator]^for  ( int j = 0; j <= in[i].length; j++ )  {^270^^^^^268^277^for  ( int j = 0; j < in[i].length; j++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[P3_Replace_Literal]^for  ( int j = -6; j < in[i].length; j++ )  {^270^^^^^268^277^for  ( int j = 0; j < in[i].length; j++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[P3_Replace_Literal]^for  ( int j = ; j < in[i].length; j++ )  {^270^^^^^268^277^for  ( int j = 0; j < in[i].length; j++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[P5_Replace_Variable]^for  ( int i = 0; j < in[i].length; j++ )  {^270^^^^^268^277^for  ( int j = 0; j < in[i].length; j++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[P5_Replace_Variable]^for  ( jnt i = 0; j < in[i].length; j++ )  {^270^^^^^268^277^for  ( int j = 0; j < in[i].length; j++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[P5_Replace_Variable]^for  ( in[i].lengtht j = 0; j < in[i].length; j++ )  {^270^^^^^268^277^for  ( int j = 0; j < in[i].length; j++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[P5_Replace_Variable]^for  ( in[i].lengthnt j = 0; j < in[i].length; j++ )  {^270^^^^^268^277^for  ( int j = 0; j < in[i].length; j++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[P5_Replace_Variable]^for  ( int in[i].length = 0; j < in[i].length; j++ )  {^270^^^^^268^277^for  ( int j = 0; j < in[i].length; j++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[P3_Replace_Literal]^if  ( in[i][j] < -1 )  {^271^^^^^268^277^if  ( in[i][j] < 0 )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[P5_Replace_Variable]^if  ( jn[i][j] < 0 )  {^271^^^^^268^277^if  ( in[i][j] < 0 )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[P5_Replace_Variable]^if  ( i[i][j] < 0 )  {^271^^^^^268^277^if  ( in[i][j] < 0 )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[P8_Replace_Mix]^if  ( in[i][j] < 0 - 4 )  {^271^^^^^268^277^if  ( in[i][j] < 0 )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[P3_Replace_Literal]^for  ( int j = 6; j < in[i].length; j++ )  {^270^^^^^268^277^for  ( int j = 0; j < in[i].length; j++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[P1_Replace_Type]^for  (  long  j = 0; j < in[i].length; j++ )  {^270^^^^^268^277^for  ( int j = 0; j < in[i].length; j++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[P2_Replace_Operator]^for  ( int j = 0; j == in[i].length; j++ )  {^270^^^^^268^277^for  ( int j = 0; j < in[i].length; j++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[P3_Replace_Literal]^for  ( int j = i; j < in[i].length; j++ )  {^270^^^^^268^277^for  ( int j = 0; j < in[i].length; j++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[P5_Replace_Variable]^for  ( it j = 0; j < inn[i].length; j++ )  {^270^^^^^268^277^for  ( int j = 0; j < in[i].length; j++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[P3_Replace_Literal]^if  ( in[i][j] < -5 )  {^271^^^^^268^277^if  ( in[i][j] < 0 )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[P8_Replace_Mix]^if  ( in[i][j] < 3 )  {^271^^^^^268^277^if  ( in[i][j] < 0 )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[P1_Replace_Type]^for  (  short  i = 0; i < in.length; i ++ )  {^269^^^^^268^277^for  ( int i = 0; i < in.length; i ++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[P3_Replace_Literal]^for  ( int i = -9; i < in.length; i ++ )  {^269^^^^^268^277^for  ( int i = 0; i < in.length; i ++ )  {^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
[P3_Replace_Literal]^return false;^276^^^^^268^277^return true;^[CLASS] ChiSquareTestImpl  [METHOD] isNonNegative [RETURN_TYPE] boolean   long[][] in [VARIABLES] DistributionFactory  distributionFactory  boolean  long[][]  in  int  i  j  
