[P1_Replace_Type]^private static final  int  serialVersionUID = 2401296428283614780L;^31^^^^^26^36^private static final long serialVersionUID = 2401296428283614780L;^[CLASS] ExponentialDistributionImpl   [VARIABLES] 
[P8_Replace_Mix]^private static final long serialVersionUID = 2401296428283614780;^31^^^^^26^36^private static final long serialVersionUID = 2401296428283614780L;^[CLASS] ExponentialDistributionImpl   [VARIABLES] 
[P1_Replace_Type]^private float mean;^34^^^^^29^39^private double mean;^[CLASS] ExponentialDistributionImpl   [VARIABLES] 
[P8_Replace_Mix]^private int mean;^34^^^^^29^39^private double mean;^[CLASS] ExponentialDistributionImpl   [VARIABLES] 
[P14_Delete_Statement]^^41^^^^^40^43^super (  ) ;^[CLASS] ExponentialDistributionImpl  [METHOD] <init> [RETURN_TYPE] ExponentialDistributionImpl(double)   double mean [VARIABLES] double  mean  long  serialVersionUID  boolean  
[P7_Replace_Invocation]^getInitialDomain ( mean ) ;^42^^^^^40^43^setMean ( mean ) ;^[CLASS] ExponentialDistributionImpl  [METHOD] <init> [RETURN_TYPE] ExponentialDistributionImpl(double)   double mean [VARIABLES] double  mean  long  serialVersionUID  boolean  
[P14_Delete_Statement]^^42^^^^^40^43^setMean ( mean ) ;^[CLASS] ExponentialDistributionImpl  [METHOD] <init> [RETURN_TYPE] ExponentialDistributionImpl(double)   double mean [VARIABLES] double  mean  long  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^return getMean (  ) ;setMean ( mean ) ;^42^^^^^40^43^setMean ( mean ) ;^[CLASS] ExponentialDistributionImpl  [METHOD] <init> [RETURN_TYPE] ExponentialDistributionImpl(double)   double mean [VARIABLES] double  mean  long  serialVersionUID  boolean  
[P2_Replace_Operator]^if  ( mean < 0.0 )  {^51^^^^^50^55^if  ( mean <= 0.0 )  {^[CLASS] ExponentialDistributionImpl  [METHOD] setMean [RETURN_TYPE] void   double mean [VARIABLES] double  mean  long  serialVersionUID  boolean  
[P8_Replace_Mix]^if  ( mean <= 1.0d )  {^51^^^^^50^55^if  ( mean <= 0.0 )  {^[CLASS] ExponentialDistributionImpl  [METHOD] setMean [RETURN_TYPE] void   double mean [VARIABLES] double  mean  long  serialVersionUID  boolean  
[P9_Replace_Statement]^if  ( p < .5 )  {^51^^^^^50^55^if  ( mean <= 0.0 )  {^[CLASS] ExponentialDistributionImpl  [METHOD] setMean [RETURN_TYPE] void   double mean [VARIABLES] double  mean  long  serialVersionUID  boolean  
[P9_Replace_Statement]^if  ( x <= 0.0 )  {^51^^^^^50^55^if  ( mean <= 0.0 )  {^[CLASS] ExponentialDistributionImpl  [METHOD] setMean [RETURN_TYPE] void   double mean [VARIABLES] double  mean  long  serialVersionUID  boolean  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("mean must be positive.");^51^52^53^^^50^55^if  ( mean <= 0.0 )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] ExponentialDistributionImpl  [METHOD] setMean [RETURN_TYPE] void   double mean [VARIABLES] double  mean  long  serialVersionUID  boolean  
[P16_Remove_Block]^^51^52^53^^^50^55^if  ( mean <= 0.0 )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] ExponentialDistributionImpl  [METHOD] setMean [RETURN_TYPE] void   double mean [VARIABLES] double  mean  long  serialVersionUID  boolean  
[P13_Insert_Block]^if  ( mean <= 0.0 )  {     throw new IllegalArgumentException ( "mean must be positive." ) ; }^52^^^^^50^55^[Delete]^[CLASS] ExponentialDistributionImpl  [METHOD] setMean [RETURN_TYPE] void   double mean [VARIABLES] double  mean  long  serialVersionUID  boolean  
[P8_Replace_Mix]^return ;^52^^^^^50^55^throw new IllegalArgumentException  (" ")  ;^[CLASS] ExponentialDistributionImpl  [METHOD] setMean [RETURN_TYPE] void   double mean [VARIABLES] double  mean  long  serialVersionUID  boolean  
[P8_Replace_Mix]^this.mean =  null;^54^^^^^50^55^this.mean = mean;^[CLASS] ExponentialDistributionImpl  [METHOD] setMean [RETURN_TYPE] void   double mean [VARIABLES] double  mean  long  serialVersionUID  boolean  
[P1_Replace_Type]^int ret;^81^^^^^80^88^double ret;^[CLASS] ExponentialDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  mean  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^if  ( x < 0.0 )  {^82^^^^^80^88^if  ( x <= 0.0 )  {^[CLASS] ExponentialDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  mean  ret  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^if  ( ret <= 0.0 )  {^82^^^^^80^88^if  ( x <= 0.0 )  {^[CLASS] ExponentialDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  mean  ret  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^if  ( 1.0 - exp(((-x) / getMean())) )  {^82^^^^^80^88^if  ( x <= 0.0 )  {^[CLASS] ExponentialDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  mean  ret  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^if  ( -x / getMean (  ) )  {^82^^^^^80^88^if  ( x <= 0.0 )  {^[CLASS] ExponentialDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  mean  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^if  ( x <= 0.0D )  {^82^^^^^80^88^if  ( x <= 0.0 )  {^[CLASS] ExponentialDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  mean  ret  x  long  serialVersionUID  boolean  
[P9_Replace_Statement]^if  ( p < .5 )  {^82^^^^^80^88^if  ( x <= 0.0 )  {^[CLASS] ExponentialDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  mean  ret  x  long  serialVersionUID  boolean  
[P9_Replace_Statement]^if  ( mean <= 0.0 )  {^82^^^^^80^88^if  ( x <= 0.0 )  {^[CLASS] ExponentialDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  mean  ret  x  long  serialVersionUID  boolean  
[P15_Unwrap_Block]^ret = 0.0;^82^83^84^85^86^80^88^if  ( x <= 0.0 )  { ret = 0.0; } else { ret = 1.0 - Math.exp ( -x / getMean (  )  ) ; }^[CLASS] ExponentialDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  mean  ret  x  long  serialVersionUID  boolean  
[P16_Remove_Block]^^82^83^84^85^86^80^88^if  ( x <= 0.0 )  { ret = 0.0; } else { ret = 1.0 - Math.exp ( -x / getMean (  )  ) ; }^[CLASS] ExponentialDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  mean  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = 1.0  <<  Math.exp ( -x / getMean (  )  ) ;^85^^^^^80^88^ret = 1.0 - Math.exp ( -x / getMean (  )  ) ;^[CLASS] ExponentialDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  mean  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = 1.0 - Math.exp ( -x + getMean (  )  ) ;^85^^^^^80^88^ret = 1.0 - Math.exp ( -x / getMean (  )  ) ;^[CLASS] ExponentialDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  mean  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^ret = 8.0 - Math.exp ( -x / getMean (  )  ) ;^85^^^^^80^88^ret = 1.0 - Math.exp ( -x / getMean (  )  ) ;^[CLASS] ExponentialDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  mean  ret  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^ret = 1.0 - Math.exp ( -ret / getMean (  )  ) ;^85^^^^^80^88^ret = 1.0 - Math.exp ( -x / getMean (  )  ) ;^[CLASS] ExponentialDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  mean  ret  x  long  serialVersionUID  boolean  
[P7_Replace_Invocation]^ret = 1.0 - Math.log ( -x / getMean (  )  ) ;^85^^^^^80^88^ret = 1.0 - Math.exp ( -x / getMean (  )  ) ;^[CLASS] ExponentialDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  mean  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^ret = 1.0D - Math.exp ( -x / getMean (  )  ) ;^85^^^^^80^88^ret = 1.0 - Math.exp ( -x / getMean (  )  ) ;^[CLASS] ExponentialDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  mean  ret  x  long  serialVersionUID  boolean  
[P13_Insert_Block]^if  ( x <= 0.0 )  {     ret = 0.0; }else {     ret = 1.0 -  ( exp (  (  ( -x )  /  ( getMean (  )  )  )  )  ) ; }^85^^^^^80^88^[Delete]^[CLASS] ExponentialDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  mean  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = 1.0 - Math.exp ( -x - getMean (  )  ) ;^85^^^^^80^88^ret = 1.0 - Math.exp ( -x / getMean (  )  ) ;^[CLASS] ExponentialDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  mean  ret  x  long  serialVersionUID  boolean  
[P14_Delete_Statement]^^85^^^^^80^88^ret = 1.0 - Math.exp ( -x / getMean (  )  ) ;^[CLASS] ExponentialDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  mean  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^ret = 0.0D;^83^^^^^80^88^ret = 0.0;^[CLASS] ExponentialDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  mean  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = 1.0  ||  Math.exp ( -x / getMean (  )  ) ;^85^^^^^80^88^ret = 1.0 - Math.exp ( -x / getMean (  )  ) ;^[CLASS] ExponentialDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  mean  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^ret = 4.0 - Math.exp ( -x / getMean (  )  ) ;^85^^^^^80^88^ret = 1.0 - Math.exp ( -x / getMean (  )  ) ;^[CLASS] ExponentialDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  mean  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = 1.0 - Math.exp ( -x * getMean (  )  ) ;^85^^^^^80^88^ret = 1.0 - Math.exp ( -x / getMean (  )  ) ;^[CLASS] ExponentialDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  mean  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^ret = 1.0 - Math.log ( -ret / getMean (  )  ) ;^85^^^^^80^88^ret = 1.0 - Math.exp ( -x / getMean (  )  ) ;^[CLASS] ExponentialDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  mean  ret  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^return x;^87^^^^^80^88^return ret;^[CLASS] ExponentialDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  mean  ret  x  long  serialVersionUID  boolean  
[P1_Replace_Type]^int ret;^103^^^^^102^115^double ret;^[CLASS] ExponentialDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  mean  p  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^if  ( p < 0.0 && p > 1.0 )  {^105^^^^^102^115^if  ( p < 0.0 || p > 1.0 )  {^[CLASS] ExponentialDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  mean  p  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^if  ( p <= 0.0 || p > 1.0 )  {^105^^^^^102^115^if  ( p < 0.0 || p > 1.0 )  {^[CLASS] ExponentialDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  mean  p  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^if  ( p < 0.0 || p >= 1.0 )  {^105^^^^^102^115^if  ( p < 0.0 || p > 1.0 )  {^[CLASS] ExponentialDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  mean  p  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^if  ( p < 0.0 || p > 2.0 )  {^105^^^^^102^115^if  ( p < 0.0 || p > 1.0 )  {^[CLASS] ExponentialDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  mean  p  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^if  ( p < 0.0 || p > 0.3333333333333333 )  {^105^^^^^102^115^if  ( p < 0.0 || p > 1.0 )  {^[CLASS] ExponentialDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  mean  p  ret  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^if  ( x < 0.0 || p > 1.0 )  {^105^^^^^102^115^if  ( p < 0.0 || p > 1.0 )  {^[CLASS] ExponentialDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  mean  p  ret  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^if  ( p < 0.0 ) {^105^^^^^102^115^if  ( p < 0.0 || p > 1.0 )  {^[CLASS] ExponentialDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  mean  p  ret  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^if  (  p > 1.0 )  {^105^^^^^102^115^if  ( p < 0.0 || p > 1.0 )  {^[CLASS] ExponentialDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  mean  p  ret  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^if  ( p == 1.0 )  {^105^^^^^102^115^if  ( p < 0.0 || p > 1.0 )  {^[CLASS] ExponentialDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  mean  p  ret  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^if  ( -(getMean()) * 0 - p)) )  {^105^^^^^102^115^if  ( p < 0.0 || p > 1.0 )  {^[CLASS] ExponentialDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  mean  p  ret  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^if  ( 1.0 - p )  {^105^^^^^102^115^if  ( p < 0.0 || p > 1.0 )  {^[CLASS] ExponentialDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  mean  p  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^} else if  ( p != 1.0 )  {^108^^^^^102^115^} else if  ( p == 1.0 )  {^[CLASS] ExponentialDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  mean  p  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^} else if  ( p == 5.0 )  {^108^^^^^102^115^} else if  ( p == 1.0 )  {^[CLASS] ExponentialDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  mean  p  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^} else if  ( p == 0.2 )  {^108^^^^^102^115^} else if  ( p == 1.0 )  {^[CLASS] ExponentialDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  mean  p  ret  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^} else if  ( x == 1.0 )  {^108^^^^^102^115^} else if  ( p == 1.0 )  {^[CLASS] ExponentialDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  mean  p  ret  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^} else if  ( -(getMean()) * 0 - p)) )  {^108^^^^^102^115^} else if  ( p == 1.0 )  {^[CLASS] ExponentialDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  mean  p  ret  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^} else if  ( 1.0 - p )  {^108^^^^^102^115^} else if  ( p == 1.0 )  {^[CLASS] ExponentialDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  mean  p  ret  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^} else {^108^^^^^102^115^} else if  ( p == 1.0 )  {^[CLASS] ExponentialDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  mean  p  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^}  if  ( x == 1.0D )  {^108^^^^^102^115^} else if  ( p == 1.0 )  {^[CLASS] ExponentialDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  mean  p  ret  x  long  serialVersionUID  boolean  
[P15_Unwrap_Block]^ret = java.lang.Double.POSITIVE_INFINITY;^108^109^110^111^112^102^115^} else if  ( p == 1.0 )  { ret = Double.POSITIVE_INFINITY; } else { ret = -getMean (  )  * Math.log ( 1.0 - p ) ; }^[CLASS] ExponentialDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  mean  p  ret  x  long  serialVersionUID  boolean  
[P16_Remove_Block]^^108^109^110^111^112^102^115^} else if  ( p == 1.0 )  { ret = Double.POSITIVE_INFINITY; } else { ret = -getMean (  )  * Math.log ( 1.0 - p ) ; }^[CLASS] ExponentialDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  mean  p  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret / = -getMean (  )  * Math.log ( 1.0 - p ) ;^111^^^^^102^115^ret = -getMean (  )  * Math.log ( 1.0 - p ) ;^[CLASS] ExponentialDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  mean  p  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = -getMean (  )  * Math.log ( 1.0  ^  p ) ;^111^^^^^102^115^ret = -getMean (  )  * Math.log ( 1.0 - p ) ;^[CLASS] ExponentialDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  mean  p  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^ret = -getMean (  )  * Math.log ( 2.0 - p ) ;^111^^^^^102^115^ret = -getMean (  )  * Math.log ( 1.0 - p ) ;^[CLASS] ExponentialDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  mean  p  ret  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^ret = -getMean (  )  * Math.log ( 1.0 - x ) ;^111^^^^^102^115^ret = -getMean (  )  * Math.log ( 1.0 - p ) ;^[CLASS] ExponentialDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  mean  p  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^ret = -getMean (  )  * Math.log ( 4.0d - p ) ;^111^^^^^102^115^ret = -getMean (  )  * Math.log ( 1.0 - p ) ;^[CLASS] ExponentialDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  mean  p  ret  x  long  serialVersionUID  boolean  
[P14_Delete_Statement]^^111^^^^^102^115^ret = -getMean (  )  * Math.log ( 1.0 - p ) ;^[CLASS] ExponentialDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  mean  p  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = -getMean (  )  * Math.log ( 1.0  <=  p ) ;^111^^^^^102^115^ret = -getMean (  )  * Math.log ( 1.0 - p ) ;^[CLASS] ExponentialDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  mean  p  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^ret = -getMean (  )  * Math.log ( 8.0 - p ) ;^111^^^^^102^115^ret = -getMean (  )  * Math.log ( 1.0 - p ) ;^[CLASS] ExponentialDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  mean  p  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^ret  =  ret ;^109^^^^^102^115^ret = Double.POSITIVE_INFINITY;^[CLASS] ExponentialDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  mean  p  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = -getMean (  )  * Math.log ( 1.0  ||  p ) ;^111^^^^^102^115^ret = -getMean (  )  * Math.log ( 1.0 - p ) ;^[CLASS] ExponentialDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  mean  p  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^ret = -getMean (  )  * Math.log ( 1.0D - p ) ;^111^^^^^102^115^ret = -getMean (  )  * Math.log ( 1.0 - p ) ;^[CLASS] ExponentialDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  mean  p  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = -getMean (  )  * Math.log ( 1.0  &&  p ) ;^111^^^^^102^115^ret = -getMean (  )  * Math.log ( 1.0 - p ) ;^[CLASS] ExponentialDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  mean  p  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^ret = -getMean (  )  * Math.log ( 9.0 - p ) ;^111^^^^^102^115^ret = -getMean (  )  * Math.log ( 1.0 - p ) ;^[CLASS] ExponentialDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  mean  p  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^return ;^106^107^^^^102^115^throw new IllegalArgumentException ( "probability argument must be between 0 and 1  ( inclusive ) " ) ;^[CLASS] ExponentialDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  mean  p  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^} else if  ( p == 9.0 )  {^108^^^^^102^115^} else if  ( p == 1.0 )  {^[CLASS] ExponentialDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  mean  p  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^} else if  ( p == Infinity )  {^108^^^^^102^115^} else if  ( p == 1.0 )  {^[CLASS] ExponentialDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  mean  p  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret + = -getMean (  )  * Math.log ( 1.0 - p ) ;^111^^^^^102^115^ret = -getMean (  )  * Math.log ( 1.0 - p ) ;^[CLASS] ExponentialDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  mean  p  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = -getMean (  )  * Math.log ( 1.0  <  p ) ;^111^^^^^102^115^ret = -getMean (  )  * Math.log ( 1.0 - p ) ;^[CLASS] ExponentialDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  mean  p  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^ret = -getMean (  )  * Math.log ( 7.0 - p ) ;^111^^^^^102^115^ret = -getMean (  )  * Math.log ( 1.0 - p ) ;^[CLASS] ExponentialDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  mean  p  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = -getMean (  )  * Math.log ( 1.0  >  p ) ;^111^^^^^102^115^ret = -getMean (  )  * Math.log ( 1.0 - p ) ;^[CLASS] ExponentialDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  mean  p  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^ret = -getMean (  )  * Math.log ( 3.0 - p ) ;^111^^^^^102^115^ret = -getMean (  )  * Math.log ( 1.0 - p ) ;^[CLASS] ExponentialDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  mean  p  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^ret  = null ;^109^^^^^102^115^ret = Double.POSITIVE_INFINITY;^[CLASS] ExponentialDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  mean  p  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = -getMean (  )  * Math.log ( 1.0  ==  p ) ;^111^^^^^102^115^ret = -getMean (  )  * Math.log ( 1.0 - p ) ;^[CLASS] ExponentialDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  mean  p  ret  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^return x;^114^^^^^102^115^return ret;^[CLASS] ExponentialDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  mean  p  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^return ;^126^^^^^125^127^return 0;^[CLASS] ExponentialDistributionImpl  [METHOD] getDomainLowerBound [RETURN_TYPE] double   double p [VARIABLES] double  mean  p  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^return 4;^126^^^^^125^127^return 0;^[CLASS] ExponentialDistributionImpl  [METHOD] getDomainLowerBound [RETURN_TYPE] double   double p [VARIABLES] double  mean  p  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^if  ( p <= .5 )  {^141^^^^^137^148^if  ( p < .5 )  {^[CLASS] ExponentialDistributionImpl  [METHOD] getDomainUpperBound [RETURN_TYPE] double   double p [VARIABLES] double  mean  p  ret  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^if  ( x < .5 )  {^141^^^^^137^148^if  ( p < .5 )  {^[CLASS] ExponentialDistributionImpl  [METHOD] getDomainUpperBound [RETURN_TYPE] double   double p [VARIABLES] double  mean  p  ret  x  long  serialVersionUID  boolean  
[P9_Replace_Statement]^if  ( mean <= 0.0 )  {^141^^^^^137^148^if  ( p < .5 )  {^[CLASS] ExponentialDistributionImpl  [METHOD] getDomainUpperBound [RETURN_TYPE] double   double p [VARIABLES] double  mean  p  ret  x  long  serialVersionUID  boolean  
[P9_Replace_Statement]^if  ( x <= 0.0 )  {^141^^^^^137^148^if  ( p < .5 )  {^[CLASS] ExponentialDistributionImpl  [METHOD] getDomainUpperBound [RETURN_TYPE] double   double p [VARIABLES] double  mean  p  ret  x  long  serialVersionUID  boolean  
[P14_Delete_Statement]^^143^^^^^137^148^return getMean (  ) ;^[CLASS] ExponentialDistributionImpl  [METHOD] getDomainUpperBound [RETURN_TYPE] double   double p [VARIABLES] double  mean  p  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^if  ( p <= .5 )  {^160^^^^^157^167^if  ( p < .5 )  {^[CLASS] ExponentialDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  mean  p  ret  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^if  ( x < .5 )  {^160^^^^^157^167^if  ( p < .5 )  {^[CLASS] ExponentialDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  mean  p  ret  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^if  ( getMean() * 0.5 )  {^160^^^^^157^167^if  ( p < .5 )  {^[CLASS] ExponentialDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  mean  p  ret  x  long  serialVersionUID  boolean  
[P9_Replace_Statement]^if  ( mean <= 0.0 )  {^160^^^^^157^167^if  ( p < .5 )  {^[CLASS] ExponentialDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  mean  p  ret  x  long  serialVersionUID  boolean  
[P9_Replace_Statement]^if  ( x <= 0.0 )  {^160^^^^^157^167^if  ( p < .5 )  {^[CLASS] ExponentialDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  mean  p  ret  x  long  serialVersionUID  boolean  
[P13_Insert_Block]^if  ( p < 0.5 )  {     return getMean (  ) ; }else {     return MAX_VALUE; }^160^^^^^157^167^[Delete]^[CLASS] ExponentialDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  mean  p  ret  x  long  serialVersionUID  boolean  
[P14_Delete_Statement]^^165^^^^^157^167^return getMean (  ) ;^[CLASS] ExponentialDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  mean  p  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^return / getMean (  )  * .5;^162^^^^^157^167^return getMean (  )  * .5;^[CLASS] ExponentialDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  mean  p  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^return getMean (  )   ;^162^^^^^157^167^return getMean (  )  * .5;^[CLASS] ExponentialDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  mean  p  ret  x  long  serialVersionUID  boolean  
[P14_Delete_Statement]^^162^^^^^157^167^return getMean (  )  * .5;^[CLASS] ExponentialDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  mean  p  ret  x  long  serialVersionUID  boolean  
