[P1_Replace_Type]^private static final  short  serialVersionUID = -3349935121172596109L;^33^^^^^28^38^private static final long serialVersionUID = -3349935121172596109L;^[CLASS] PoissonDistributionImpl   [VARIABLES] 
[P8_Replace_Mix]^private static final long serialVersionUID = -3349935121172596109;^33^^^^^28^38^private static final long serialVersionUID = -3349935121172596109L;^[CLASS] PoissonDistributionImpl   [VARIABLES] 
[P1_Replace_Type]^private int mean;^38^^^^^33^43^private double mean;^[CLASS] PoissonDistributionImpl   [VARIABLES] 
[P8_Replace_Mix]^private float mean;^38^^^^^33^43^private double mean;^[CLASS] PoissonDistributionImpl   [VARIABLES] 
[P14_Delete_Statement]^^49^^^^^48^51^super (  ) ;^[CLASS] PoissonDistributionImpl  [METHOD] <init> [RETURN_TYPE] PoissonDistributionImpl(double)   double p [VARIABLES] double  mean  p  long  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^setMean ( p ) ;super (  ) ;^49^^^^^48^51^super (  ) ;^[CLASS] PoissonDistributionImpl  [METHOD] <init> [RETURN_TYPE] PoissonDistributionImpl(double)   double p [VARIABLES] double  mean  p  long  serialVersionUID  boolean  
[P7_Replace_Invocation]^probability ( p ) ;^50^^^^^48^51^setMean ( p ) ;^[CLASS] PoissonDistributionImpl  [METHOD] <init> [RETURN_TYPE] PoissonDistributionImpl(double)   double p [VARIABLES] double  mean  p  long  serialVersionUID  boolean  
[P8_Replace_Mix]^setMean ( mean ) ;^50^^^^^48^51^setMean ( p ) ;^[CLASS] PoissonDistributionImpl  [METHOD] <init> [RETURN_TYPE] PoissonDistributionImpl(double)   double p [VARIABLES] double  mean  p  long  serialVersionUID  boolean  
[P14_Delete_Statement]^^50^^^^^48^51^setMean ( p ) ;^[CLASS] PoissonDistributionImpl  [METHOD] <init> [RETURN_TYPE] PoissonDistributionImpl(double)   double p [VARIABLES] double  mean  p  long  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^super (  ) ;setMean ( p ) ;^50^^^^^48^51^setMean ( p ) ;^[CLASS] PoissonDistributionImpl  [METHOD] <init> [RETURN_TYPE] PoissonDistributionImpl(double)   double p [VARIABLES] double  mean  p  long  serialVersionUID  boolean  
[P5_Replace_Variable]^return p;^59^^^^^58^60^return this.mean;^[CLASS] PoissonDistributionImpl  [METHOD] getMean [RETURN_TYPE] double   [VARIABLES] double  mean  p  long  serialVersionUID  boolean  
[P2_Replace_Operator]^if  ( p == 0 )  {^71^^^^^70^76^if  ( p <= 0 )  {^[CLASS] PoissonDistributionImpl  [METHOD] setMean [RETURN_TYPE] void   double p [VARIABLES] double  mean  p  long  serialVersionUID  boolean  
[P3_Replace_Literal]^if  ( p <= -5 )  {^71^^^^^70^76^if  ( p <= 0 )  {^[CLASS] PoissonDistributionImpl  [METHOD] setMean [RETURN_TYPE] void   double p [VARIABLES] double  mean  p  long  serialVersionUID  boolean  
[P5_Replace_Variable]^if  ( mean <= 0 )  {^71^^^^^70^76^if  ( p <= 0 )  {^[CLASS] PoissonDistributionImpl  [METHOD] setMean [RETURN_TYPE] void   double p [VARIABLES] double  mean  p  long  serialVersionUID  boolean  
[P8_Replace_Mix]^if  ( p <= 3 )  {^71^^^^^70^76^if  ( p <= 0 )  {^[CLASS] PoissonDistributionImpl  [METHOD] setMean [RETURN_TYPE] void   double p [VARIABLES] double  mean  p  long  serialVersionUID  boolean  
[P9_Replace_Statement]^if  ( x < 0 )  {^71^^^^^70^76^if  ( p <= 0 )  {^[CLASS] PoissonDistributionImpl  [METHOD] setMean [RETURN_TYPE] void   double p [VARIABLES] double  mean  p  long  serialVersionUID  boolean  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("The Poisson mean must be positive");^71^72^73^74^^70^76^if  ( p <= 0 )  { throw new IllegalArgumentException ( "The Poisson mean must be positive" ) ; }^[CLASS] PoissonDistributionImpl  [METHOD] setMean [RETURN_TYPE] void   double p [VARIABLES] double  mean  p  long  serialVersionUID  boolean  
[P16_Remove_Block]^^71^72^73^74^^70^76^if  ( p <= 0 )  { throw new IllegalArgumentException ( "The Poisson mean must be positive" ) ; }^[CLASS] PoissonDistributionImpl  [METHOD] setMean [RETURN_TYPE] void   double p [VARIABLES] double  mean  p  long  serialVersionUID  boolean  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "The Poisson mean must be positivea" ) ;^72^73^^^^70^76^throw new IllegalArgumentException ( "The Poisson mean must be positive" ) ;^[CLASS] PoissonDistributionImpl  [METHOD] setMean [RETURN_TYPE] void   double p [VARIABLES] double  mean  p  long  serialVersionUID  boolean  
[P13_Insert_Block]^if  ( p <= 0 )  {     throw new IllegalArgumentException ( "The Poisson mean must be positive" ) ; }^72^^^^^70^76^[Delete]^[CLASS] PoissonDistributionImpl  [METHOD] setMean [RETURN_TYPE] void   double p [VARIABLES] double  mean  p  long  serialVersionUID  boolean  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Th" ) ;^72^73^^^^70^76^throw new IllegalArgumentException ( "The Poisson mean must be positive" ) ;^[CLASS] PoissonDistributionImpl  [METHOD] setMean [RETURN_TYPE] void   double p [VARIABLES] double  mean  p  long  serialVersionUID  boolean  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "The Poisson mean must " ) ;^72^73^^^^70^76^throw new IllegalArgumentException ( "The Poisson mean must be positive" ) ;^[CLASS] PoissonDistributionImpl  [METHOD] setMean [RETURN_TYPE] void   double p [VARIABLES] double  mean  p  long  serialVersionUID  boolean  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "The Poisson mean must be positive Poisson mean must " ) ;^72^73^^^^70^76^throw new IllegalArgumentException ( "The Poisson mean must be positive" ) ;^[CLASS] PoissonDistributionImpl  [METHOD] setMean [RETURN_TYPE] void   double p [VARIABLES] double  mean  p  long  serialVersionUID  boolean  
[P5_Replace_Variable]^this.mean = mean;^75^^^^^70^76^this.mean = p;^[CLASS] PoissonDistributionImpl  [METHOD] setMean [RETURN_TYPE] void   double p [VARIABLES] double  mean  p  long  serialVersionUID  boolean  
[P2_Replace_Operator]^if  ( x < 0 && x == Integer.MAX_VALUE )  {^85^^^^^84^90^if  ( x < 0 || x == Integer.MAX_VALUE )  {^[CLASS] PoissonDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  mean  p  long  serialVersionUID  int  x  
[P2_Replace_Operator]^if  ( x > 0 || x == Integer.MAX_VALUE )  {^85^^^^^84^90^if  ( x < 0 || x == Integer.MAX_VALUE )  {^[CLASS] PoissonDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  mean  p  long  serialVersionUID  int  x  
[P2_Replace_Operator]^if  ( x < 0 || x <= Integer.MAX_VALUE )  {^85^^^^^84^90^if  ( x < 0 || x == Integer.MAX_VALUE )  {^[CLASS] PoissonDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  mean  p  long  serialVersionUID  int  x  
[P3_Replace_Literal]^if  ( x < -9 || x == Integer.MAX_VALUE )  {^85^^^^^84^90^if  ( x < 0 || x == Integer.MAX_VALUE )  {^[CLASS] PoissonDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  mean  p  long  serialVersionUID  int  x  
[P3_Replace_Literal]^if  ( x < x || x == Integer.MAX_VALUE )  {^85^^^^^84^90^if  ( x < 0 || x == Integer.MAX_VALUE )  {^[CLASS] PoissonDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  mean  p  long  serialVersionUID  int  x  
[P6_Replace_Expression]^if  ( x < 0 ) {^85^^^^^84^90^if  ( x < 0 || x == Integer.MAX_VALUE )  {^[CLASS] PoissonDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  mean  p  long  serialVersionUID  int  x  
[P6_Replace_Expression]^if  (  x == Integer.MAX_VALUE )  {^85^^^^^84^90^if  ( x < 0 || x == Integer.MAX_VALUE )  {^[CLASS] PoissonDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  mean  p  long  serialVersionUID  int  x  
[P6_Replace_Expression]^if  ( x == MAX_VALUE )  {^85^^^^^84^90^if  ( x < 0 || x == Integer.MAX_VALUE )  {^[CLASS] PoissonDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  mean  p  long  serialVersionUID  int  x  
[P15_Unwrap_Block]^return 0;^85^86^87^^^84^90^if  ( x < 0 || x == Integer.MAX_VALUE )  { return 0; }^[CLASS] PoissonDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  mean  p  long  serialVersionUID  int  x  
[P16_Remove_Block]^^85^86^87^^^84^90^if  ( x < 0 || x == Integer.MAX_VALUE )  { return 0; }^[CLASS] PoissonDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  mean  p  long  serialVersionUID  int  x  
[P13_Insert_Block]^if  ( x ==  ( MAX_VALUE )  )  {     return 1; }^85^^^^^84^90^[Delete]^[CLASS] PoissonDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  mean  p  long  serialVersionUID  int  x  
[P3_Replace_Literal]^return ;^86^^^^^84^90^return 0;^[CLASS] PoissonDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  mean  p  long  serialVersionUID  int  x  
[P8_Replace_Mix]^return 1;^86^^^^^84^90^return 0;^[CLASS] PoissonDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  mean  p  long  serialVersionUID  int  x  
[P3_Replace_Literal]^return x;^86^^^^^84^90^return 0;^[CLASS] PoissonDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  mean  p  long  serialVersionUID  int  x  
[P8_Replace_Mix]^return 4;^86^^^^^84^90^return 0;^[CLASS] PoissonDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  mean  p  long  serialVersionUID  int  x  
[P2_Replace_Operator]^return - Math.pow ( getMean (  ) , x )  / MathUtils.factorialDouble ( x )  * Math.exp ( -mean ) ;^88^89^^^^84^90^return Math.pow ( getMean (  ) , x )  / MathUtils.factorialDouble ( x )  * Math.exp ( -mean ) ;^[CLASS] PoissonDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  mean  p  long  serialVersionUID  int  x  
[P2_Replace_Operator]^return Math.pow ( getMean (  ) , x )  + MathUtils.factorialDouble ( x )  * Math.exp ( -mean ) ;^88^89^^^^84^90^return Math.pow ( getMean (  ) , x )  / MathUtils.factorialDouble ( x )  * Math.exp ( -mean ) ;^[CLASS] PoissonDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  mean  p  long  serialVersionUID  int  x  
[P5_Replace_Variable]^return Math.pow ( getMean (  ) , x )  / MathUtils.factorialDouble ( x )  * Math.exp ( -p ) ;^88^89^^^^84^90^return Math.pow ( getMean (  ) , x )  / MathUtils.factorialDouble ( x )  * Math.exp ( -mean ) ;^[CLASS] PoissonDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  mean  p  long  serialVersionUID  int  x  
[P5_Replace_Variable]^return Math.pow ( getMean (  )  )  / MathUtils.factorialDouble ( x )  * Math.exp ( -mean ) ;^88^89^^^^84^90^return Math.pow ( getMean (  ) , x )  / MathUtils.factorialDouble ( x )  * Math.exp ( -mean ) ;^[CLASS] PoissonDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  mean  p  long  serialVersionUID  int  x  
[P7_Replace_Invocation]^return Math.exp ( getMean (  ) , x )  / MathUtils.factorialDouble ( x )  * Math.exp ( -mean ) ;^88^89^^^^84^90^return Math.pow ( getMean (  ) , x )  / MathUtils.factorialDouble ( x )  * Math.exp ( -mean ) ;^[CLASS] PoissonDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  mean  p  long  serialVersionUID  int  x  
[P14_Delete_Statement]^^88^89^^^^84^90^return Math.pow ( getMean (  ) , x )  / MathUtils.factorialDouble ( x )  * Math.exp ( -mean ) ;^[CLASS] PoissonDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  mean  p  long  serialVersionUID  int  x  
[P14_Delete_Statement]^^89^^^^^84^90^MathUtils.factorialDouble ( x )  * Math.exp ( -mean ) ;^[CLASS] PoissonDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  mean  p  long  serialVersionUID  int  x  
[P11_Insert_Donor_Statement]^return Math.pow ( getMean (  ) , x )  / MathUtils.factorialDouble ( x )  * Math.exp ( -mean ) ;MathUtils.factorialDouble ( x )  * Math.exp ( -mean ) ;^89^^^^^84^90^MathUtils.factorialDouble ( x )  * Math.exp ( -mean ) ;^[CLASS] PoissonDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  mean  p  long  serialVersionUID  int  x  
[P8_Replace_Mix]^MathUtils.factorialDouble ( x )  * Math.exp ( -p ) ;^89^^^^^84^90^MathUtils.factorialDouble ( x )  * Math.exp ( -mean ) ;^[CLASS] PoissonDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  mean  p  long  serialVersionUID  int  x  
[P2_Replace_Operator]^if  ( x <= 0 )  {^101^^^^^100^109^if  ( x < 0 )  {^[CLASS] PoissonDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  mean  p  long  serialVersionUID  int  x  
[P3_Replace_Literal]^if  ( x < x )  {^101^^^^^100^109^if  ( x < 0 )  {^[CLASS] PoissonDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  mean  p  long  serialVersionUID  int  x  
[P3_Replace_Literal]^if  ( x < -9 )  {^101^^^^^100^109^if  ( x < 0 )  {^[CLASS] PoissonDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  mean  p  long  serialVersionUID  int  x  
[P8_Replace_Mix]^if  ( x < 4 )  {^101^^^^^100^109^if  ( x < 0 )  {^[CLASS] PoissonDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  mean  p  long  serialVersionUID  int  x  
[P9_Replace_Statement]^if  ( p <= 0 )  {^101^^^^^100^109^if  ( x < 0 )  {^[CLASS] PoissonDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  mean  p  long  serialVersionUID  int  x  
[P15_Unwrap_Block]^return 0;^101^102^103^^^100^109^if  ( x < 0 )  { return 0; }^[CLASS] PoissonDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  mean  p  long  serialVersionUID  int  x  
[P16_Remove_Block]^^101^102^103^^^100^109^if  ( x < 0 )  { return 0; }^[CLASS] PoissonDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  mean  p  long  serialVersionUID  int  x  
[P3_Replace_Literal]^return x;^102^^^^^100^109^return 0;^[CLASS] PoissonDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  mean  p  long  serialVersionUID  int  x  
[P8_Replace_Mix]^return 1;^102^^^^^100^109^return 0;^[CLASS] PoissonDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  mean  p  long  serialVersionUID  int  x  
[P3_Replace_Literal]^return 6;^102^^^^^100^109^return 0;^[CLASS] PoissonDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  mean  p  long  serialVersionUID  int  x  
[P2_Replace_Operator]^if  ( x <= Integer.MAX_VALUE )  {^104^^^^^100^109^if  ( x == Integer.MAX_VALUE )  {^[CLASS] PoissonDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  mean  p  long  serialVersionUID  int  x  
[P9_Replace_Statement]^if  ( x < 0 || x == Integer.MAX_VALUE )  {^104^^^^^100^109^if  ( x == Integer.MAX_VALUE )  {^[CLASS] PoissonDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  mean  p  long  serialVersionUID  int  x  
[P15_Unwrap_Block]^return 1;^104^105^106^^^100^109^if  ( x == Integer.MAX_VALUE )  { return 1; }^[CLASS] PoissonDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  mean  p  long  serialVersionUID  int  x  
[P16_Remove_Block]^^104^105^106^^^100^109^if  ( x == Integer.MAX_VALUE )  { return 1; }^[CLASS] PoissonDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  mean  p  long  serialVersionUID  int  x  
[P13_Insert_Block]^if  (  ( x < 0 )  ||  ( x ==  ( MAX_VALUE )  )  )  {     return 0; }^104^^^^^100^109^[Delete]^[CLASS] PoissonDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  mean  p  long  serialVersionUID  int  x  
[P3_Replace_Literal]^return x;^105^^^^^100^109^return 1;^[CLASS] PoissonDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  mean  p  long  serialVersionUID  int  x  
[P8_Replace_Mix]^return 3;^105^^^^^100^109^return 1;^[CLASS] PoissonDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  mean  p  long  serialVersionUID  int  x  
[P3_Replace_Literal]^return -1;^105^^^^^100^109^return 1;^[CLASS] PoissonDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  mean  p  long  serialVersionUID  int  x  
[P8_Replace_Mix]^return 1 - 0;^105^^^^^100^109^return 1;^[CLASS] PoissonDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  mean  p  long  serialVersionUID  int  x  
[P2_Replace_Operator]^return Gamma.regularizedGammaQ (   instanceof   ( double ) x + 1, mean, 1E-12, Integer.MAX_VALUE ) ;^107^108^^^^100^109^return Gamma.regularizedGammaQ (  ( double ) x + 1, mean, 1E-12, Integer.MAX_VALUE ) ;^[CLASS] PoissonDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  mean  p  long  serialVersionUID  int  x  
[P3_Replace_Literal]^return Gamma.regularizedGammaQ (  ( double ) x , mean, 1E-12, Integer.MAX_VALUE ) ;^107^108^^^^100^109^return Gamma.regularizedGammaQ (  ( double ) x + 1, mean, 1E-12, Integer.MAX_VALUE ) ;^[CLASS] PoissonDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  mean  p  long  serialVersionUID  int  x  
[P5_Replace_Variable]^return Gamma.regularizedGammaQ (  ( double ) x + 1, p, 1E-12, Integer.MAX_VALUE ) ;^107^108^^^^100^109^return Gamma.regularizedGammaQ (  ( double ) x + 1, mean, 1E-12, Integer.MAX_VALUE ) ;^[CLASS] PoissonDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  mean  p  long  serialVersionUID  int  x  
[P5_Replace_Variable]^return Gamma.regularizedGammaQ (  ( double ) x + 1, mean, 1E-12, Integer.x ) ;^107^108^^^^100^109^return Gamma.regularizedGammaQ (  ( double ) x + 1, mean, 1E-12, Integer.MAX_VALUE ) ;^[CLASS] PoissonDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  mean  p  long  serialVersionUID  int  x  
[P5_Replace_Variable]^return Gamma.regularizedGammaQ (  ( double ) x + 1,  1E-12, Integer.MAX_VALUE ) ;^107^108^^^^100^109^return Gamma.regularizedGammaQ (  ( double ) x + 1, mean, 1E-12, Integer.MAX_VALUE ) ;^[CLASS] PoissonDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  mean  p  long  serialVersionUID  int  x  
[P8_Replace_Mix]^return Gamma.regularizedGammaQ (  ( double ) x  ^  2, mean, 2E-22, Integer.MAX_VALUE ) ;^107^108^^^^100^109^return Gamma.regularizedGammaQ (  ( double ) x + 1, mean, 1E-12, Integer.MAX_VALUE ) ;^[CLASS] PoissonDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  mean  p  long  serialVersionUID  int  x  
[P3_Replace_Literal]^return Gamma.regularizedGammaQ (  ( double ) x + , mean, E-2, Integer.MAX_VALUE ) ;^107^108^^^^100^109^return Gamma.regularizedGammaQ (  ( double ) x + 1, mean, 1E-12, Integer.MAX_VALUE ) ;^[CLASS] PoissonDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  mean  p  long  serialVersionUID  int  x  
[P14_Delete_Statement]^^107^108^^^^100^109^return Gamma.regularizedGammaQ (  ( double ) x + 1, mean, 1E-12, Integer.MAX_VALUE ) ;^[CLASS] PoissonDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  mean  p  long  serialVersionUID  int  x  
[P14_Delete_Statement]^^124^125^126^^^123^130^NormalDistribution normal = DistributionFactory.newInstance (  ) .createNormalDistribution ( getMean (  ) , Math.sqrt ( getMean (  )  )  ) ;^[CLASS] PoissonDistributionImpl  [METHOD] normalApproximateProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  NormalDistribution  normal  double  mean  p  long  serialVersionUID  int  x  
[P14_Delete_Statement]^^125^126^^^^123^130^.createNormalDistribution ( getMean (  ) , Math.sqrt ( getMean (  )  )  ) ;^[CLASS] PoissonDistributionImpl  [METHOD] normalApproximateProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  NormalDistribution  normal  double  mean  p  long  serialVersionUID  int  x  
[P14_Delete_Statement]^^126^^^^^123^130^Math.sqrt ( getMean (  )  )  ) ;^[CLASS] PoissonDistributionImpl  [METHOD] normalApproximateProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  NormalDistribution  normal  double  mean  p  long  serialVersionUID  int  x  
[P2_Replace_Operator]^return normal.cumulativeProbability ( x  <<  0.5 ) ;^129^^^^^123^130^return normal.cumulativeProbability ( x + 0.5 ) ;^[CLASS] PoissonDistributionImpl  [METHOD] normalApproximateProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  NormalDistribution  normal  double  mean  p  long  serialVersionUID  int  x  
[P5_Replace_Variable]^return x.cumulativeProbability ( normal + 0.5 ) ;^129^^^^^123^130^return normal.cumulativeProbability ( x + 0.5 ) ;^[CLASS] PoissonDistributionImpl  [METHOD] normalApproximateProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  NormalDistribution  normal  double  mean  p  long  serialVersionUID  int  x  
[P7_Replace_Invocation]^return normal .cumulativeProbability ( x )  ;^129^^^^^123^130^return normal.cumulativeProbability ( x + 0.5 ) ;^[CLASS] PoissonDistributionImpl  [METHOD] normalApproximateProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  NormalDistribution  normal  double  mean  p  long  serialVersionUID  int  x  
[P8_Replace_Mix]^return normal.cumulativeProbability ( x  ;^129^^^^^123^130^return normal.cumulativeProbability ( x + 0.5 ) ;^[CLASS] PoissonDistributionImpl  [METHOD] normalApproximateProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  NormalDistribution  normal  double  mean  p  long  serialVersionUID  int  x  
[P2_Replace_Operator]^return normal.cumulativeProbability ( x   instanceof   0.5 ) ;^129^^^^^123^130^return normal.cumulativeProbability ( x + 0.5 ) ;^[CLASS] PoissonDistributionImpl  [METHOD] normalApproximateProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  NormalDistribution  normal  double  mean  p  long  serialVersionUID  int  x  
[P3_Replace_Literal]^return normal.cumulativeProbability ( x + 4.0 ) ;^129^^^^^123^130^return normal.cumulativeProbability ( x + 0.5 ) ;^[CLASS] PoissonDistributionImpl  [METHOD] normalApproximateProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  NormalDistribution  normal  double  mean  p  long  serialVersionUID  int  x  
[P14_Delete_Statement]^^129^^^^^123^130^return normal.cumulativeProbability ( x + 0.5 ) ;^[CLASS] PoissonDistributionImpl  [METHOD] normalApproximateProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  NormalDistribution  normal  double  mean  p  long  serialVersionUID  int  x  
[P3_Replace_Literal]^return 3;^141^^^^^140^142^return 0;^[CLASS] PoissonDistributionImpl  [METHOD] getDomainLowerBound [RETURN_TYPE] int   double p [VARIABLES] double  mean  p  long  serialVersionUID  boolean  
[P8_Replace_Mix]^return 0 * 3;^141^^^^^140^142^return 0;^[CLASS] PoissonDistributionImpl  [METHOD] getDomainLowerBound [RETURN_TYPE] int   double p [VARIABLES] double  mean  p  long  serialVersionUID  boolean  
[P12_Insert_Condition]^if  ( x == Integer.MAX_VALUE )  { return Integer.MAX_VALUE; }^153^^^^^152^154^return Integer.MAX_VALUE;^[CLASS] PoissonDistributionImpl  [METHOD] getDomainUpperBound [RETURN_TYPE] int   double p [VARIABLES] double  mean  p  long  serialVersionUID  boolean  
