[P1_Replace_Type]^private static final  short  serialVersionUID = 8589540077390120676L;^32^^^^^27^37^private static final long serialVersionUID = 8589540077390120676L;^[CLASS] CauchyDistributionImpl   [VARIABLES] 
[P8_Replace_Mix]^private  final long serialVersionUID = 8589540077390120676;^32^^^^^27^37^private static final long serialVersionUID = 8589540077390120676L;^[CLASS] CauchyDistributionImpl   [VARIABLES] 
[P1_Replace_Type]^private int median = 0;^35^^^^^30^40^private double median = 0;^[CLASS] CauchyDistributionImpl   [VARIABLES] 
[P3_Replace_Literal]^private double median = 1;^35^^^^^30^40^private double median = 0;^[CLASS] CauchyDistributionImpl   [VARIABLES] 
[P8_Replace_Mix]^private double median  = null ;^35^^^^^30^40^private double median = 0;^[CLASS] CauchyDistributionImpl   [VARIABLES] 
[P1_Replace_Type]^private float scale = 1;^38^^^^^33^43^private double scale = 1;^[CLASS] CauchyDistributionImpl   [VARIABLES] 
[P8_Replace_Mix]^private double scale = 1 - 3;^38^^^^^33^43^private double scale = 1;^[CLASS] CauchyDistributionImpl   [VARIABLES] 
[P3_Replace_Literal]^this ( NaN, 1.0 ) ;^45^^^^^44^46^this ( 0.0, 1.0 ) ;^[CLASS] CauchyDistributionImpl  [METHOD] <init> [RETURN_TYPE] CauchyDistributionImpl()   [VARIABLES] double  median  scale  long  serialVersionUID  boolean  
[P3_Replace_Literal]^this ( 0.0, Infinity ) ;^45^^^^^44^46^this ( 0.0, 1.0 ) ;^[CLASS] CauchyDistributionImpl  [METHOD] <init> [RETURN_TYPE] CauchyDistributionImpl()   [VARIABLES] double  median  scale  long  serialVersionUID  boolean  
[P14_Delete_Statement]^^45^^^^^44^46^this ( 0.0, 1.0 ) ;^[CLASS] CauchyDistributionImpl  [METHOD] <init> [RETURN_TYPE] CauchyDistributionImpl()   [VARIABLES] double  median  scale  long  serialVersionUID  boolean  
[P14_Delete_Statement]^^54^55^^^^53^57^super (  ) ; setMedian ( median ) ;^[CLASS] CauchyDistributionImpl  [METHOD] <init> [RETURN_TYPE] CauchyDistributionImpl(double,double)   double median double s [VARIABLES] double  median  s  scale  long  serialVersionUID  boolean  
[P5_Replace_Variable]^setMedian ( scale ) ;^55^^^^^53^57^setMedian ( median ) ;^[CLASS] CauchyDistributionImpl  [METHOD] <init> [RETURN_TYPE] CauchyDistributionImpl(double,double)   double median double s [VARIABLES] double  median  s  scale  long  serialVersionUID  boolean  
[P7_Replace_Invocation]^setScale ( median ) ;^55^^^^^53^57^setMedian ( median ) ;^[CLASS] CauchyDistributionImpl  [METHOD] <init> [RETURN_TYPE] CauchyDistributionImpl(double,double)   double median double s [VARIABLES] double  median  s  scale  long  serialVersionUID  boolean  
[P14_Delete_Statement]^^55^^^^^53^57^setMedian ( median ) ;^[CLASS] CauchyDistributionImpl  [METHOD] <init> [RETURN_TYPE] CauchyDistributionImpl(double,double)   double median double s [VARIABLES] double  median  s  scale  long  serialVersionUID  boolean  
[P5_Replace_Variable]^setScale ( scale ) ;^56^^^^^53^57^setScale ( s ) ;^[CLASS] CauchyDistributionImpl  [METHOD] <init> [RETURN_TYPE] CauchyDistributionImpl(double,double)   double median double s [VARIABLES] double  median  s  scale  long  serialVersionUID  boolean  
[P7_Replace_Invocation]^setMedian ( s ) ;^56^^^^^53^57^setScale ( s ) ;^[CLASS] CauchyDistributionImpl  [METHOD] <init> [RETURN_TYPE] CauchyDistributionImpl(double,double)   double median double s [VARIABLES] double  median  s  scale  long  serialVersionUID  boolean  
[P14_Delete_Statement]^^56^^^^^53^57^setScale ( s ) ;^[CLASS] CauchyDistributionImpl  [METHOD] <init> [RETURN_TYPE] CauchyDistributionImpl(double,double)   double median double s [VARIABLES] double  median  s  scale  long  serialVersionUID  boolean  
[P2_Replace_Operator]^return 0.5 +  <=  ( Math.atan (  ( x - median )  / scale )  / Math.PI ) ;^65^^^^^64^66^return 0.5 +  ( Math.atan (  ( x - median )  / scale )  / Math.PI ) ;^[CLASS] CauchyDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  median  s  scale  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^return 0.5 +  ( Math.atan (  ( x - median )  - scale )  / Math.PI ) ;^65^^^^^64^66^return 0.5 +  ( Math.atan (  ( x - median )  / scale )  / Math.PI ) ;^[CLASS] CauchyDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  median  s  scale  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^return 0.5 +  ( Math.atan (  ( x  ==  median )  / scale )  / Math.PI ) ;^65^^^^^64^66^return 0.5 +  ( Math.atan (  ( x - median )  / scale )  / Math.PI ) ;^[CLASS] CauchyDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  median  s  scale  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^return 0.125 +  ( Math.atan (  ( x - median )  / scale )  / Math.PI ) ;^65^^^^^64^66^return 0.5 +  ( Math.atan (  ( x - median )  / scale )  / Math.PI ) ;^[CLASS] CauchyDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  median  s  scale  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^return 0.5 +  ( Math.atan (  ( s - median )  / scale )  / Math.PI ) ;^65^^^^^64^66^return 0.5 +  ( Math.atan (  ( x - median )  / scale )  / Math.PI ) ;^[CLASS] CauchyDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  median  s  scale  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^return 0.5 +  ( Math.atan (  ( x - x )  / scale )  / Math.PI ) ;^65^^^^^64^66^return 0.5 +  ( Math.atan (  ( x - median )  / scale )  / Math.PI ) ;^[CLASS] CauchyDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  median  s  scale  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^return 0.5 +  ( Math.atan (  ( x - median )  / s )  / Math.PI ) ;^65^^^^^64^66^return 0.5 +  ( Math.atan (  ( x - median )  / scale )  / Math.PI ) ;^[CLASS] CauchyDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  median  s  scale  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^return 0.5 +  ( Math.atan (  ( x - median )  / scale )  / Math.scale ) ;^65^^^^^64^66^return 0.5 +  ( Math.atan (  ( x - median )  / scale )  / Math.PI ) ;^[CLASS] CauchyDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  median  s  scale  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^return 0.5 +  ( Math.atan (  ( scale - median )  / x )  / Math.PI ) ;^65^^^^^64^66^return 0.5 +  ( Math.atan (  ( x - median )  / scale )  / Math.PI ) ;^[CLASS] CauchyDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  median  s  scale  x  long  serialVersionUID  boolean  
[P7_Replace_Invocation]^return 0.5 +  ( Math.tan (  ( x - median )  / scale )  / Math.PI ) ;^65^^^^^64^66^return 0.5 +  ( Math.atan (  ( x - median )  / scale )  / Math.PI ) ;^[CLASS] CauchyDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  median  s  scale  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^return 0.5 +  ( Math.tan (  ( x - x )  / scale )  / Math.PI ) ;^65^^^^^64^66^return 0.5 +  ( Math.atan (  ( x - median )  / scale )  / Math.PI ) ;^[CLASS] CauchyDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  median  s  scale  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^return 0.5 +  ( Math.atan (  ( x - median )  * scale )  / Math.PI ) ;^65^^^^^64^66^return 0.5 +  ( Math.atan (  ( x - median )  / scale )  / Math.PI ) ;^[CLASS] CauchyDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  median  s  scale  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^return 0.5 +  ( Math.atan (  ( x  |  median )  / scale )  / Math.PI ) ;^65^^^^^64^66^return 0.5 +  ( Math.atan (  ( x - median )  / scale )  / Math.PI ) ;^[CLASS] CauchyDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  median  s  scale  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^return 0.5 +  ( Math.atan (  ( scale - median )  / scale )  / Math.PI ) ;^65^^^^^64^66^return 0.5 +  ( Math.atan (  ( x - median )  / scale )  / Math.PI ) ;^[CLASS] CauchyDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  median  s  scale  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^return 0.5 +  ( Math.atan (  ( median - x )  / scale )  / Math.PI ) ;^65^^^^^64^66^return 0.5 +  ( Math.atan (  ( x - median )  / scale )  / Math.PI ) ;^[CLASS] CauchyDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  median  s  scale  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^return 0.5 +  ( Math.atan (  ( x - scale )  / median )  / Math.PI ) ;^65^^^^^64^66^return 0.5 +  ( Math.atan (  ( x - median )  / scale )  / Math.PI ) ;^[CLASS] CauchyDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  median  s  scale  x  long  serialVersionUID  boolean  
[P14_Delete_Statement]^^65^^^^^64^66^return 0.5 +  ( Math.atan (  ( x - median )  / scale )  / Math.PI ) ;^[CLASS] CauchyDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  median  s  scale  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^return x;^73^^^^^72^74^return median;^[CLASS] CauchyDistributionImpl  [METHOD] getMedian [RETURN_TYPE] double   [VARIABLES] double  median  s  scale  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^return x;^81^^^^^80^82^return scale;^[CLASS] CauchyDistributionImpl  [METHOD] getScale [RETURN_TYPE] double   [VARIABLES] double  median  s  scale  x  long  serialVersionUID  boolean  
[P1_Replace_Type]^int ret;^97^^^^^96^109^double ret;^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^if  ( p < 0.0 && p > 1.0 )  {^98^^^^^96^109^if  ( p < 0.0 || p > 1.0 )  {^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^if  ( p <= 0.0 || p > 1.0 )  {^98^^^^^96^109^if  ( p < 0.0 || p > 1.0 )  {^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^if  ( p < 0.0 || p >= 1.0 )  {^98^^^^^96^109^if  ( p < 0.0 || p > 1.0 )  {^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^if  ( p < 6.6 || p > 1.6 )  {^98^^^^^96^109^if  ( p < 0.0 || p > 1.0 )  {^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^if  ( p < 0.0 || p > 9.0 )  {^98^^^^^96^109^if  ( p < 0.0 || p > 1.0 )  {^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^if  ( scale < 0.0 || p > 1.0 )  {^98^^^^^96^109^if  ( p < 0.0 || p > 1.0 )  {^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^if  ( p < 0.0 ) {^98^^^^^96^109^if  ( p < 0.0 || p > 1.0 )  {^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^if  (  p > 1.0 )  {^98^^^^^96^109^if  ( p < 0.0 || p > 1.0 )  {^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^if  ( p == 0 )  {^98^^^^^96^109^if  ( p < 0.0 || p > 1.0 )  {^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^if  ( p == 1 )  {^98^^^^^96^109^if  ( p < 0.0 || p > 1.0 )  {^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^if  ( median + scale * PI * (p - 0.5)))) )  {^98^^^^^96^109^if  ( p < 0.0 || p > 1.0 )  {^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^if  ( scale * tan (  (  ( PI )  *  ( p - 0.5 )  )  ) )  {^98^^^^^96^109^if  ( p < 0.0 || p > 1.0 )  {^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^if  ( PI * p - 0.5 )  {^98^^^^^96^109^if  ( p < 0.0 || p > 1.0 )  {^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^if  ( p - 0.5 )  {^98^^^^^96^109^if  ( p < 0.0 || p > 1.0 )  {^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^} else if  ( p != 0 )  {^101^^^^^96^109^} else if  ( p == 0 )  {^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^} else if  ( p == -8 )  {^101^^^^^96^109^} else if  ( p == 0 )  {^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^} else if  ( p == 1 )  {^101^^^^^96^109^} else if  ( p == 0 )  {^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^} else if  ( median + scale * PI * (p - 0.5)))) )  {^101^^^^^96^109^} else if  ( p == 0 )  {^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^} else if  ( scale * tan (  (  ( PI )  *  ( p - 0.5 )  )  ) )  {^101^^^^^96^109^} else if  ( p == 0 )  {^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^} else if  ( PI * p - 0.5 )  {^101^^^^^96^109^} else if  ( p == 0 )  {^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^} else if  ( p - 0.5 )  {^101^^^^^96^109^} else if  ( p == 0 )  {^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^} else {^101^^^^^96^109^} else if  ( p == 0 )  {^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^} else if  ( p == 0L )  {^101^^^^^96^109^} else if  ( p == 0 )  {^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P9_Replace_Statement]^} else if  ( p > .5 )  {^101^^^^^96^109^} else if  ( p == 0 )  {^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P13_Insert_Block]^if  ( p == 1 )  {     ret = POSITIVE_INFINITY; }else {     ret =  ( median )  +  (  ( scale )  *  ( tan (  (  ( PI )  *  ( p - 0.5 )  )  )  )  ) ; }^101^^^^^96^109^[Delete]^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P13_Insert_Block]^if  (  ( p < 0.0 )  ||  ( p > 1.0 )  )  {     throw new IllegalArgumentException ( "probability argument must be between 0 and 1  ( inclusive ) " ) ; }else     if  ( p == 0 )  {         ret = NEGATIVE_INFINITY;     }else         if  ( p == 1 )  {             ret = POSITIVE_INFINITY;         }else {             ret =  ( median )  +  (  ( scale )  *  ( tan (  (  ( PI )  *  ( p - 0.5 )  )  )  )  ) ;         }^101^^^^^96^109^[Delete]^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^} else  if  ( p != 1 )  {^103^^^^^96^109^} else  if  ( p == 1 )  {^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^} else  if  ( p == 4 )  {^103^^^^^96^109^} else  if  ( p == 1 )  {^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^} else  if  ( x == 1 )  {^103^^^^^96^109^} else  if  ( p == 1 )  {^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^} else  if  ( median + scale * PI * (p - 0.5)))) )  {^103^^^^^96^109^} else  if  ( p == 1 )  {^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^} else  if  ( scale * tan (  (  ( PI )  *  ( p - 0.5 )  )  ) )  {^103^^^^^96^109^} else  if  ( p == 1 )  {^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^} else  if  ( PI * p - 0.5 )  {^103^^^^^96^109^} else  if  ( p == 1 )  {^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^} else  if  ( p - 0.5 )  {^103^^^^^96^109^} else  if  ( p == 1 )  {^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^} else {^103^^^^^96^109^} else  if  ( p == 1 )  {^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P9_Replace_Statement]^} else if  ( p > .5 )  {^103^^^^^96^109^} else  if  ( p == 1 )  {^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P9_Replace_Statement]^} else if  ( p == 0 )  {^103^^^^^96^109^} else  if  ( p == 1 )  {^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P15_Unwrap_Block]^ret = java.lang.Double.POSITIVE_INFINITY;^103^104^105^106^107^96^109^} else  if  ( p == 1 )  { ret = Double.POSITIVE_INFINITY; } else { ret = median + scale * Math.tan ( Math.PI *  ( p - .5 )  ) ; }^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P16_Remove_Block]^^103^104^105^106^107^96^109^} else  if  ( p == 1 )  { ret = Double.POSITIVE_INFINITY; } else { ret = median + scale * Math.tan ( Math.PI *  ( p - .5 )  ) ; }^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P13_Insert_Block]^if  ( p == 0 )  {     ret = NEGATIVE_INFINITY; }else     if  ( p == 1 )  {         ret = POSITIVE_INFINITY;     }else {         ret =  ( median )  +  (  ( scale )  *  ( tan (  (  ( PI )  *  ( p - 0.5 )  )  )  )  ) ;     }^103^^^^^96^109^[Delete]^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = median + scale * Math.tan ( Math.PI *  >=  ( p - .5 )  ) ;^106^^^^^96^109^ret = median + scale * Math.tan ( Math.PI *  ( p - .5 )  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret / = median + scale * Math.tan ( Math.PI *  ( p - .5 )  ) ;^106^^^^^96^109^ret = median + scale * Math.tan ( Math.PI *  ( p - .5 )  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = median + scale * Math.tan ( Math.PI *  ( p  &&  .5 )  ) ;^106^^^^^96^109^ret = median + scale * Math.tan ( Math.PI *  ( p - .5 )  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^ret = x + scale * Math.tan ( Math.PI *  ( p - .5 )  ) ;^106^^^^^96^109^ret = median + scale * Math.tan ( Math.PI *  ( p - .5 )  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^ret = median + x * Math.tan ( Math.PI *  ( p - .5 )  ) ;^106^^^^^96^109^ret = median + scale * Math.tan ( Math.PI *  ( p - .5 )  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^ret = median + scale * Math.tan ( Math.s *  ( p - .5 )  ) ;^106^^^^^96^109^ret = median + scale * Math.tan ( Math.PI *  ( p - .5 )  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^ret = scale + median * Math.tan ( Math.PI *  ( p - .5 )  ) ;^106^^^^^96^109^ret = median + scale * Math.tan ( Math.PI *  ( p - .5 )  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P7_Replace_Invocation]^ret = median + scale * Math .atan ( median )  ;^106^^^^^96^109^ret = median + scale * Math.tan ( Math.PI *  ( p - .5 )  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^ret =  median + scale * Math.tan ( Math.PI *  ( x - .5 )  ) ;^106^^^^^96^109^ret = median + scale * Math.tan ( Math.PI *  ( p - .5 )  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P13_Insert_Block]^if  ( p == 1 )  {     ret = POSITIVE_INFINITY; }else {     ret =  ( median )  +  (  ( scale )  *  ( tan (  (  ( PI )  *  ( p - 0.5 )  )  )  )  ) ; }^106^^^^^96^109^[Delete]^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret - = median + scale * Math.tan ( Math.PI *  ( p - .5 )  ) ;^106^^^^^96^109^ret = median + scale * Math.tan ( Math.PI *  ( p - .5 )  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = median + scale * Math.tan ( Math.PI *  ( p  <<  .5 )  ) ;^106^^^^^96^109^ret = median + scale * Math.tan ( Math.PI *  ( p - .5 )  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^ret = median + scale * Math.tan ( Math.x *  ( p - .5 )  ) ;^106^^^^^96^109^ret = median + scale * Math.tan ( Math.PI *  ( p - .5 )  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^ret = median + scale * Math.tan ( Math.PI *  ( scale - .5 )  ) ;^106^^^^^96^109^ret = median + scale * Math.tan ( Math.PI *  ( p - .5 )  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P14_Delete_Statement]^^106^^^^^96^109^ret = median + scale * Math.tan ( Math.PI *  ( p - .5 )  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^ret  = null ;^104^^^^^96^109^ret = Double.POSITIVE_INFINITY;^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^ret = Double.NEGATIVE_INFINITY;ret = Double.POSITIVE_INFINITY;^104^^^^^96^109^ret = Double.POSITIVE_INFINITY;^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^ret ;^104^^^^^96^109^ret = Double.POSITIVE_INFINITY;^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = median + scale * Math.tan ( Math.PI *  >>  ( p - .5 )  ) ;^106^^^^^96^109^ret = median + scale * Math.tan ( Math.PI *  ( p - .5 )  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret + = median + scale * Math.tan ( Math.PI *  ( p - .5 )  ) ;^106^^^^^96^109^ret = median + scale * Math.tan ( Math.PI *  ( p - .5 )  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = median + scale * Math.tan ( Math.PI *  ( p  !=  .5 )  ) ;^106^^^^^96^109^ret = median + scale * Math.tan ( Math.PI *  ( p - .5 )  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^ret = median + p * Math.tan ( Math.PI *  ( scale - .5 )  ) ;^106^^^^^96^109^ret = median + scale * Math.tan ( Math.PI *  ( p - .5 )  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^ret ;^102^^^^^96^109^ret = Double.NEGATIVE_INFINITY;^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^ret = Double.MAX_VALUE;ret = Double.NEGATIVE_INFINITY;^102^^^^^96^109^ret = Double.NEGATIVE_INFINITY;^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^ret = Double.POSITIVE_INFINITY;ret = Double.NEGATIVE_INFINITY;^102^^^^^96^109^ret = Double.NEGATIVE_INFINITY;^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^} else  if  ( p < 1 )  {^103^^^^^96^109^} else  if  ( p == 1 )  {^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^} else  if  ( p == 8 )  {^103^^^^^96^109^} else  if  ( p == 1 )  {^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^} else  if  ( scale == 1 )  {^103^^^^^96^109^} else  if  ( p == 1 )  {^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = median + scale * Math.tan ( Math.PI *  <=  ( p - .5 )  ) ;^106^^^^^96^109^ret = median + scale * Math.tan ( Math.PI *  ( p - .5 )  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^ret = p + scale * Math.tan ( Math.PI *  ( median - .5 )  ) ;^106^^^^^96^109^ret = median + scale * Math.tan ( Math.PI *  ( p - .5 )  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P7_Replace_Invocation]^ret = median + scale * Math .atan ( scale )  ;^106^^^^^96^109^ret = median + scale * Math.tan ( Math.PI *  ( p - .5 )  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^ret = median + scale * Math .atan ( p )  ;^106^^^^^96^109^ret = median + scale * Math.tan ( Math.PI *  ( p - .5 )  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^ret  =  ret ;^104^^^^^96^109^ret = Double.POSITIVE_INFINITY;^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^ret  = null ;^102^^^^^96^109^ret = Double.NEGATIVE_INFINITY;^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = median + scale * Math.tan ( Math.PI *  !=  ( p - .5 )  ) ;^106^^^^^96^109^ret = median + scale * Math.tan ( Math.PI *  ( p - .5 )  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = median + scale * Math.tan ( Math.PI *  ( p  <=  .5 )  ) ;^106^^^^^96^109^ret = median + scale * Math.tan ( Math.PI *  ( p - .5 )  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P7_Replace_Invocation]^ret = median + scale * Math .atan ( ret )  ;^106^^^^^96^109^ret = median + scale * Math.tan ( Math.PI *  ( p - .5 )  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = median + scale * Math.tan ( Math.PI *  ( p  &  .5 )  ) ;^106^^^^^96^109^ret = median + scale * Math.tan ( Math.PI *  ( p - .5 )  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P7_Replace_Invocation]^ret = median + scale * Math .atan ( s )  ;^106^^^^^96^109^ret = median + scale * Math.tan ( Math.PI *  ( p - .5 )  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Scale must be positive." ) ;throw new IllegalArgumentException ( "probability argument must be between 0 and 1  ( inclusive ) " ) ;^99^100^^^^96^109^throw new IllegalArgumentException ( "probability argument must be between 0 and 1  ( inclusive ) " ) ;^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^} else if  ( p <= 0 )  {^101^^^^^96^109^} else if  ( p == 0 )  {^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^} else if  ( p ==  )  {^101^^^^^96^109^} else if  ( p == 0 )  {^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^} else if  ( scale == 0 )  {^101^^^^^96^109^} else if  ( p == 0 )  {^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^} else if  ( p == 2 )  {^101^^^^^96^109^} else if  ( p == 0 )  {^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^} else  if  ( p == -4 )  {^103^^^^^96^109^} else  if  ( p == 1 )  {^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = median + scale * Math.tan ( Math.PI *  <<  ( p - .5 )  ) ;^106^^^^^96^109^ret = median + scale * Math.tan ( Math.PI *  ( p - .5 )  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = median + scale * Math.tan ( Math.PI *  ( p  >>  .5 )  ) ;^106^^^^^96^109^ret = median + scale * Math.tan ( Math.PI *  ( p - .5 )  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^ret = median + scale * Math.tan ( Math.scale *  ( p - .5 )  ) ;^106^^^^^96^109^ret = median + scale * Math.tan ( Math.PI *  ( p - .5 )  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P7_Replace_Invocation]^ret = median + scale * Math .atan ( x )  ;^106^^^^^96^109^ret = median + scale * Math.tan ( Math.PI *  ( p - .5 )  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = median + scale * Math.tan ( Math.PI *  &&  ( p - .5 )  ) ;^106^^^^^96^109^ret = median + scale * Math.tan ( Math.PI *  ( p - .5 )  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = median + scale * Math.tan ( Math.PI *  ( p  ^  .5 )  ) ;^106^^^^^96^109^ret = median + scale * Math.tan ( Math.PI *  ( p - .5 )  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^ret  =  ret ;^102^^^^^96^109^ret = Double.NEGATIVE_INFINITY;^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^} else  if  ( p > 1 )  {^103^^^^^96^109^} else  if  ( p == 1 )  {^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^}   if  ( p == 0 )  {^103^^^^^96^109^} else  if  ( p == 1 )  {^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = median + scale * Math.tan ( Math.PI *  ^  ( p - .5 )  ) ;^106^^^^^96^109^ret = median + scale * Math.tan ( Math.PI *  ( p - .5 )  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = median + scale * Math.tan ( Math.PI *  ( p  >=  .5 )  ) ;^106^^^^^96^109^ret = median + scale * Math.tan ( Math.PI *  ( p - .5 )  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^ret = scale + scale * Math.tan ( Math.PI *  ( p - .5 )  ) ;^106^^^^^96^109^ret = median + scale * Math.tan ( Math.PI *  ( p - .5 )  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = median + scale * Math.tan ( Math.PI *  ( p   instanceof   .5 )  ) ;^106^^^^^96^109^ret = median + scale * Math.tan ( Math.PI *  ( p - .5 )  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = median + scale * Math.tan ( Math.PI *  ( p  <  .5 )  ) ;^106^^^^^96^109^ret = median + scale * Math.tan ( Math.PI *  ( p - .5 )  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^ret = median + s * Math.tan ( Math.PI *  ( p - .5 )  ) ;^106^^^^^96^109^ret = median + scale * Math.tan ( Math.PI *  ( p - .5 )  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^throw new IllegalArgumentException ( "Scale must be positive." ) ; ;^99^100^^^^96^109^throw new IllegalArgumentException ( "probability argument must be between 0 and 1  ( inclusive ) " ) ;^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^return x;^108^^^^^96^109^return ret;^[CLASS] CauchyDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^this.median = x;^116^^^^^115^117^this.median = median;^[CLASS] CauchyDistributionImpl  [METHOD] setMedian [RETURN_TYPE] void   double median [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^if  ( s < 0.0 )  {^125^^^^^124^130^if  ( s <= 0.0 )  {^[CLASS] CauchyDistributionImpl  [METHOD] setScale [RETURN_TYPE] void   double s [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^if  ( scale <= 0.0 )  {^125^^^^^124^130^if  ( s <= 0.0 )  {^[CLASS] CauchyDistributionImpl  [METHOD] setScale [RETURN_TYPE] void   double s [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^if  ( s <= 1.0d )  {^125^^^^^124^130^if  ( s <= 0.0 )  {^[CLASS] CauchyDistributionImpl  [METHOD] setScale [RETURN_TYPE] void   double s [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P9_Replace_Statement]^if  ( p < .5 )  {^125^^^^^124^130^if  ( s <= 0.0 )  {^[CLASS] CauchyDistributionImpl  [METHOD] setScale [RETURN_TYPE] void   double s [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("Scale must be positive.");^125^126^127^128^^124^130^if  ( s <= 0.0 )  { throw new IllegalArgumentException ( "Scale must be positive." ) ; }^[CLASS] CauchyDistributionImpl  [METHOD] setScale [RETURN_TYPE] void   double s [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P16_Remove_Block]^^125^126^127^128^^124^130^if  ( s <= 0.0 )  { throw new IllegalArgumentException ( "Scale must be positive." ) ; }^[CLASS] CauchyDistributionImpl  [METHOD] setScale [RETURN_TYPE] void   double s [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Scale must be positive.o" ) ;^126^127^^^^124^130^throw new IllegalArgumentException ( "Scale must be positive." ) ;^[CLASS] CauchyDistributionImpl  [METHOD] setScale [RETURN_TYPE] void   double s [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P13_Insert_Block]^if  ( s <= 0.0 )  {     throw new IllegalArgumentException ( "Scale must be positive." ) ; }^126^^^^^124^130^[Delete]^[CLASS] CauchyDistributionImpl  [METHOD] setScale [RETURN_TYPE] void   double s [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Scale must be positive.must be " ) ;^126^127^^^^124^130^throw new IllegalArgumentException ( "Scale must be positive." ) ;^[CLASS] CauchyDistributionImpl  [METHOD] setScale [RETURN_TYPE] void   double s [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "probability argument must be between 0 and 1  ( inclusive ) " ) ;throw new IllegalArgumentException ( "Scale must be positive." ) ;^126^127^^^^124^130^throw new IllegalArgumentException ( "Scale must be positive." ) ;^[CLASS] CauchyDistributionImpl  [METHOD] setScale [RETURN_TYPE] void   double s [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "ale must be pocale must be positive." ) ;^126^127^^^^124^130^throw new IllegalArgumentException ( "Scale must be positive." ) ;^[CLASS] CauchyDistributionImpl  [METHOD] setScale [RETURN_TYPE] void   double s [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "must be poscale must be positive." ) ;^126^127^^^^124^130^throw new IllegalArgumentException ( "Scale must be positive." ) ;^[CLASS] CauchyDistributionImpl  [METHOD] setScale [RETURN_TYPE] void   double s [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^scale = scale;^129^^^^^124^130^scale = s;^[CLASS] CauchyDistributionImpl  [METHOD] setScale [RETURN_TYPE] void   double s [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^scale =  x;^129^^^^^124^130^scale = s;^[CLASS] CauchyDistributionImpl  [METHOD] setScale [RETURN_TYPE] void   double s [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P1_Replace_Type]^int ret;^142^^^^^141^151^double ret;^[CLASS] CauchyDistributionImpl  [METHOD] getDomainLowerBound [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^if  ( p <= .5 )  {^144^^^^^141^151^if  ( p < .5 )  {^[CLASS] CauchyDistributionImpl  [METHOD] getDomainLowerBound [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^if  ( scale < .5 )  {^144^^^^^141^151^if  ( p < .5 )  {^[CLASS] CauchyDistributionImpl  [METHOD] getDomainLowerBound [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P15_Unwrap_Block]^ret = -(java.lang.Double.MAX_VALUE);^144^145^146^147^148^141^151^if  ( p < .5 )  { ret = -Double.MAX_VALUE; } else { ret = getMedian (  ) ; }^[CLASS] CauchyDistributionImpl  [METHOD] getDomainLowerBound [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P16_Remove_Block]^^144^145^146^147^148^141^151^if  ( p < .5 )  { ret = -Double.MAX_VALUE; } else { ret = getMedian (  ) ; }^[CLASS] CauchyDistributionImpl  [METHOD] getDomainLowerBound [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P7_Replace_Invocation]^ret = getScale (  ) ;^147^^^^^141^151^ret = getMedian (  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] getDomainLowerBound [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^ret  = null ;^147^^^^^141^151^ret = getMedian (  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] getDomainLowerBound [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^ret = getMedian (  )  + getScale (  ) ;ret = getMedian (  ) ;^147^^^^^141^151^ret = getMedian (  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] getDomainLowerBound [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^ret = getMedian (  )  - getScale (  ) ;ret = getMedian (  ) ;^147^^^^^141^151^ret = getMedian (  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] getDomainLowerBound [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P14_Delete_Statement]^^147^^^^^141^151^ret = getMedian (  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] getDomainLowerBound [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^ret ;^145^^^^^141^151^ret = -Double.MAX_VALUE;^[CLASS] CauchyDistributionImpl  [METHOD] getDomainLowerBound [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^ret = Double.MAX_VALUE;ret = -Double.MAX_VALUE;^145^^^^^141^151^ret = -Double.MAX_VALUE;^[CLASS] CauchyDistributionImpl  [METHOD] getDomainLowerBound [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^ret ;^147^^^^^141^151^ret = getMedian (  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] getDomainLowerBound [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^return scale;^150^^^^^141^151^return ret;^[CLASS] CauchyDistributionImpl  [METHOD] getDomainLowerBound [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^return x;^150^^^^^141^151^return ret;^[CLASS] CauchyDistributionImpl  [METHOD] getDomainLowerBound [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P1_Replace_Type]^int ret;^163^^^^^162^172^double ret;^[CLASS] CauchyDistributionImpl  [METHOD] getDomainUpperBound [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^if  ( p <= .5 )  {^165^^^^^162^172^if  ( p < .5 )  {^[CLASS] CauchyDistributionImpl  [METHOD] getDomainUpperBound [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^if  ( x < .5 )  {^165^^^^^162^172^if  ( p < .5 )  {^[CLASS] CauchyDistributionImpl  [METHOD] getDomainUpperBound [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P15_Unwrap_Block]^ret = getMedian();^165^166^167^168^169^162^172^if  ( p < .5 )  { ret = getMedian (  ) ; } else { ret = Double.MAX_VALUE; }^[CLASS] CauchyDistributionImpl  [METHOD] getDomainUpperBound [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P16_Remove_Block]^^165^166^167^168^169^162^172^if  ( p < .5 )  { ret = getMedian (  ) ; } else { ret = Double.MAX_VALUE; }^[CLASS] CauchyDistributionImpl  [METHOD] getDomainUpperBound [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^ret  =  ret ;^168^^^^^162^172^ret = Double.MAX_VALUE;^[CLASS] CauchyDistributionImpl  [METHOD] getDomainUpperBound [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^ret = Double.NEGATIVE_INFINITY;ret = Double.MAX_VALUE;^168^^^^^162^172^ret = Double.MAX_VALUE;^[CLASS] CauchyDistributionImpl  [METHOD] getDomainUpperBound [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^ret = -Double.MAX_VALUE;ret = Double.MAX_VALUE;^168^^^^^162^172^ret = Double.MAX_VALUE;^[CLASS] CauchyDistributionImpl  [METHOD] getDomainUpperBound [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P7_Replace_Invocation]^ret = getScale (  ) ;^166^^^^^162^172^ret = getMedian (  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] getDomainUpperBound [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^ret ;^166^^^^^162^172^ret = getMedian (  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] getDomainUpperBound [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^ret = getMedian (  )  + getScale (  ) ;ret = getMedian (  ) ;^166^^^^^162^172^ret = getMedian (  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] getDomainUpperBound [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^ret = getMedian (  )  - getScale (  ) ;ret = getMedian (  ) ;^166^^^^^162^172^ret = getMedian (  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] getDomainUpperBound [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P14_Delete_Statement]^^166^^^^^162^172^ret = getMedian (  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] getDomainUpperBound [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^ret  = null ;^166^^^^^162^172^ret = getMedian (  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] getDomainUpperBound [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^ret ;^168^^^^^162^172^ret = Double.MAX_VALUE;^[CLASS] CauchyDistributionImpl  [METHOD] getDomainUpperBound [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^return scale;^171^^^^^162^172^return ret;^[CLASS] CauchyDistributionImpl  [METHOD] getDomainUpperBound [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P1_Replace_Type]^int ret;^183^^^^^182^194^double ret;^[CLASS] CauchyDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^if  ( p <= .5 )  {^185^^^^^182^194^if  ( p < .5 )  {^[CLASS] CauchyDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^if  ( x < .5 )  {^185^^^^^182^194^if  ( p < .5 )  {^[CLASS] CauchyDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^if  ( getMedian() - getScale() )  {^185^^^^^182^194^if  ( p < .5 )  {^[CLASS] CauchyDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^if  ( p > 0.5 )  {^185^^^^^182^194^if  ( p < .5 )  {^[CLASS] CauchyDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^if  ( getMedian() + getScale() )  {^185^^^^^182^194^if  ( p < .5 )  {^[CLASS] CauchyDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^} else if  ( p >= .5 )  {^187^^^^^182^194^} else if  ( p > .5 )  {^[CLASS] CauchyDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^} else if  ( x > .5 )  {^187^^^^^182^194^} else if  ( p > .5 )  {^[CLASS] CauchyDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^} else if  ( getMedian() + getScale() )  {^187^^^^^182^194^} else if  ( p > .5 )  {^[CLASS] CauchyDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^} else {^187^^^^^182^194^} else if  ( p > .5 )  {^[CLASS] CauchyDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P15_Unwrap_Block]^ret = (getMedian()) + (getScale());^187^188^189^190^191^182^194^} else if  ( p > .5 )  { ret = getMedian (  )  + getScale (  ) ; } else { ret = getMedian (  ) ; }^[CLASS] CauchyDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P16_Remove_Block]^^187^188^189^190^191^182^194^} else if  ( p > .5 )  { ret = getMedian (  )  + getScale (  ) ; } else { ret = getMedian (  ) ; }^[CLASS] CauchyDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P13_Insert_Block]^if  ( p < 0.5 )  {     ret = getMedian (  ) ; }else {     ret = MAX_VALUE; }^187^^^^^182^194^[Delete]^[CLASS] CauchyDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P13_Insert_Block]^if  ( p < 0.5 )  {     ret =  ( getMedian (  )  )  -  ( getScale (  )  ) ; }else     if  ( p > 0.5 )  {         ret =  ( getMedian (  )  )  +  ( getScale (  )  ) ;     }else {         ret = getMedian (  ) ;     }^187^^^^^182^194^[Delete]^[CLASS] CauchyDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P13_Insert_Block]^if  ( p < 0.5 )  {     ret = - ( MAX_VALUE ) ; }else {     ret = getMedian (  ) ; }^187^^^^^182^194^[Delete]^[CLASS] CauchyDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P7_Replace_Invocation]^ret = getScale (  ) ;^190^^^^^182^194^ret = getMedian (  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^ret  =  ret ;^190^^^^^182^194^ret = getMedian (  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^ret = getMedian (  )  + getScale (  ) ;ret = getMedian (  ) ;^190^^^^^182^194^ret = getMedian (  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^ret = getMedian (  )  - getScale (  ) ;ret = getMedian (  ) ;^190^^^^^182^194^ret = getMedian (  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P14_Delete_Statement]^^190^^^^^182^194^ret = getMedian (  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = getMedian (  &&  )  + getScale (  ) ;^188^^^^^182^194^ret = getMedian (  )  + getScale (  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P7_Replace_Invocation]^ret = getScale (  )  + getScale (  ) ;^188^^^^^182^194^ret = getMedian (  )  + getScale (  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P7_Replace_Invocation]^ret = getMedian (  )  + getMedian (  ) ;^188^^^^^182^194^ret = getMedian (  )  + getScale (  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^ret  =  ret ;^188^^^^^182^194^ret = getMedian (  )  + getScale (  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^ret = getMedian (  )  - getScale (  ) ;ret = getMedian (  )  + getScale (  ) ;^188^^^^^182^194^ret = getMedian (  )  + getScale (  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^ret = getMedian (  ) ;ret = getMedian (  )  + getScale (  ) ;^188^^^^^182^194^ret = getMedian (  )  + getScale (  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P14_Delete_Statement]^^188^^^^^182^194^ret = getMedian (  )  + getScale (  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = getMedian (  ==  )  + getScale (  ) ;^188^^^^^182^194^ret = getMedian (  )  + getScale (  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^ret ;^188^^^^^182^194^ret = getMedian (  )  + getScale (  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = getMedian (  )   &  getScale (  ) ;^186^^^^^182^194^ret = getMedian (  )  - getScale (  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P7_Replace_Invocation]^ret = getScale (  )  - getScale (  ) ;^186^^^^^182^194^ret = getMedian (  )  - getScale (  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P7_Replace_Invocation]^ret = getMedian (  )  - getMedian (  ) ;^186^^^^^182^194^ret = getMedian (  )  - getScale (  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^ret ;^186^^^^^182^194^ret = getMedian (  )  - getScale (  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^ret = getMedian (  )  + getScale (  ) ;ret = getMedian (  )  - getScale (  ) ;^186^^^^^182^194^ret = getMedian (  )  - getScale (  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^ret = getMedian (  ) ;ret = getMedian (  )  - getScale (  ) ;^186^^^^^182^194^ret = getMedian (  )  - getScale (  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P14_Delete_Statement]^^186^^^^^182^194^ret = getMedian (  )  - getScale (  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^}  if  ( x > .5 )  {^187^^^^^182^194^} else if  ( p > .5 )  {^[CLASS] CauchyDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = getMedian (  &  )  + getScale (  ) ;^188^^^^^182^194^ret = getMedian (  )  + getScale (  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = getMedian (  )   ^  getScale (  ) ;^186^^^^^182^194^ret = getMedian (  )  - getScale (  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = getMedian (  <  )  + getScale (  ) ;^188^^^^^182^194^ret = getMedian (  )  + getScale (  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^ret  = null ;^188^^^^^182^194^ret = getMedian (  )  + getScale (  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^ret  = null ;^190^^^^^182^194^ret = getMedian (  ) ;^[CLASS] CauchyDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^return x;^193^^^^^182^194^return ret;^[CLASS] CauchyDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  median  p  ret  s  scale  x  long  serialVersionUID  boolean  
