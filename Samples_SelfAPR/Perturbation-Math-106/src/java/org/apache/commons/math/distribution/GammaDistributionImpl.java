[P1_Replace_Type]^private static final  short  serialVersionUID = -3239549463135430361L;^32^^^^^27^37^private static final long serialVersionUID = -3239549463135430361L;^[CLASS] GammaDistributionImpl   [VARIABLES] 
[P8_Replace_Mix]^private static final long serialVersionUID = -3239549463135430361;^32^^^^^27^37^private static final long serialVersionUID = -3239549463135430361L;^[CLASS] GammaDistributionImpl   [VARIABLES] 
[P1_Replace_Type]^private int alpha;^35^^^^^30^40^private double alpha;^[CLASS] GammaDistributionImpl   [VARIABLES] 
[P1_Replace_Type]^private int beta;^38^^^^^33^43^private double beta;^[CLASS] GammaDistributionImpl   [VARIABLES] 
[P14_Delete_Statement]^^46^^^^^45^49^super (  ) ;^[CLASS] GammaDistributionImpl  [METHOD] <init> [RETURN_TYPE] GammaDistributionImpl(double,double)   double alpha double beta [VARIABLES] double  alpha  beta  long  serialVersionUID  boolean  
[P7_Replace_Invocation]^setBeta ( alpha ) ;^47^^^^^45^49^setAlpha ( alpha ) ;^[CLASS] GammaDistributionImpl  [METHOD] <init> [RETURN_TYPE] GammaDistributionImpl(double,double)   double alpha double beta [VARIABLES] double  alpha  beta  long  serialVersionUID  boolean  
[P8_Replace_Mix]^setAlpha ( beta ) ;^47^^^^^45^49^setAlpha ( alpha ) ;^[CLASS] GammaDistributionImpl  [METHOD] <init> [RETURN_TYPE] GammaDistributionImpl(double,double)   double alpha double beta [VARIABLES] double  alpha  beta  long  serialVersionUID  boolean  
[P14_Delete_Statement]^^47^^^^^45^49^setAlpha ( alpha ) ;^[CLASS] GammaDistributionImpl  [METHOD] <init> [RETURN_TYPE] GammaDistributionImpl(double,double)   double alpha double beta [VARIABLES] double  alpha  beta  long  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^setBeta ( beta ) ;setAlpha ( alpha ) ;^47^^^^^45^49^setAlpha ( alpha ) ;^[CLASS] GammaDistributionImpl  [METHOD] <init> [RETURN_TYPE] GammaDistributionImpl(double,double)   double alpha double beta [VARIABLES] double  alpha  beta  long  serialVersionUID  boolean  
[P5_Replace_Variable]^setBeta ( alpha ) ;^48^^^^^45^49^setBeta ( beta ) ;^[CLASS] GammaDistributionImpl  [METHOD] <init> [RETURN_TYPE] GammaDistributionImpl(double,double)   double alpha double beta [VARIABLES] double  alpha  beta  long  serialVersionUID  boolean  
[P7_Replace_Invocation]^setAlpha ( beta ) ;^48^^^^^45^49^setBeta ( beta ) ;^[CLASS] GammaDistributionImpl  [METHOD] <init> [RETURN_TYPE] GammaDistributionImpl(double,double)   double alpha double beta [VARIABLES] double  alpha  beta  long  serialVersionUID  boolean  
[P14_Delete_Statement]^^48^^^^^45^49^setBeta ( beta ) ;^[CLASS] GammaDistributionImpl  [METHOD] <init> [RETURN_TYPE] GammaDistributionImpl(double,double)   double alpha double beta [VARIABLES] double  alpha  beta  long  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^setAlpha ( alpha ) ;setBeta ( beta ) ;^48^^^^^45^49^setBeta ( beta ) ;^[CLASS] GammaDistributionImpl  [METHOD] <init> [RETURN_TYPE] GammaDistributionImpl(double,double)   double alpha double beta [VARIABLES] double  alpha  beta  long  serialVersionUID  boolean  
[P1_Replace_Type]^int ret;^69^^^^^68^78^double ret;^[CLASS] GammaDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^if  ( x == 0.0 )  {^71^^^^^68^78^if  ( x <= 0.0 )  {^[CLASS] GammaDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^if  ( ret <= 0.0 )  {^71^^^^^68^78^if  ( x <= 0.0 )  {^[CLASS] GammaDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^if  ( x / getBeta (  ) )  {^71^^^^^68^78^if  ( x <= 0.0 )  {^[CLASS] GammaDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^if  ( x <= 0.0d )  {^71^^^^^68^78^if  ( x <= 0.0 )  {^[CLASS] GammaDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[P9_Replace_Statement]^if  ( p == 1 )  {^71^^^^^68^78^if  ( x <= 0.0 )  {^[CLASS] GammaDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[P9_Replace_Statement]^if  ( p < .5 )  {^71^^^^^68^78^if  ( x <= 0.0 )  {^[CLASS] GammaDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[P9_Replace_Statement]^if  ( alpha <= 0.0 )  {^71^^^^^68^78^if  ( x <= 0.0 )  {^[CLASS] GammaDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[P9_Replace_Statement]^if  ( p == 0 )  {^71^^^^^68^78^if  ( x <= 0.0 )  {^[CLASS] GammaDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[P9_Replace_Statement]^if  ( beta <= 0.0 )  {^71^^^^^68^78^if  ( x <= 0.0 )  {^[CLASS] GammaDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[P15_Unwrap_Block]^ret = 0.0;^71^72^73^74^75^68^78^if  ( x <= 0.0 )  { ret = 0.0; } else { ret = Gamma.regularizedGammaP ( getAlpha (  ) , x / getBeta (  )  ) ; }^[CLASS] GammaDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[P16_Remove_Block]^^71^72^73^74^75^68^78^if  ( x <= 0.0 )  { ret = 0.0; } else { ret = Gamma.regularizedGammaP ( getAlpha (  ) , x / getBeta (  )  ) ; }^[CLASS] GammaDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = Gamma.regularizedGammaP ( getAlpha (  ) , x + getBeta (  )  ) ;^74^^^^^68^78^ret = Gamma.regularizedGammaP ( getAlpha (  ) , x / getBeta (  )  ) ;^[CLASS] GammaDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^ret = Gamma.regularizedGammaP ( getAlpha (  ) , ret / getBeta (  )  ) ;^74^^^^^68^78^ret = Gamma.regularizedGammaP ( getAlpha (  ) , x / getBeta (  )  ) ;^[CLASS] GammaDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[P7_Replace_Invocation]^ret = Gamma.regularizedGammaP ( getBeta (  ) , x / getBeta (  )  ) ;^74^^^^^68^78^ret = Gamma.regularizedGammaP ( getAlpha (  ) , x / getBeta (  )  ) ;^[CLASS] GammaDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[P7_Replace_Invocation]^ret = Gamma.regularizedGammaP ( getAlpha (  ) , x / getAlpha (  )  ) ;^74^^^^^68^78^ret = Gamma.regularizedGammaP ( getAlpha (  ) , x / getBeta (  )  ) ;^[CLASS] GammaDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^ret =  Gamma.regularizedGammaP ( getAlpha (  ) , beta / getBeta (  )  ) ;^74^^^^^68^78^ret = Gamma.regularizedGammaP ( getAlpha (  ) , x / getBeta (  )  ) ;^[CLASS] GammaDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^ret = getAlpha (  )  * getBeta (  ) ;ret = Gamma.regularizedGammaP ( getAlpha (  ) , x / getBeta (  )  ) ;^74^^^^^68^78^ret = Gamma.regularizedGammaP ( getAlpha (  ) , x / getBeta (  )  ) ;^[CLASS] GammaDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^ret = getAlpha (  )  * getBeta (  )  * .5;ret = Gamma.regularizedGammaP ( getAlpha (  ) , x / getBeta (  )  ) ;^74^^^^^68^78^ret = Gamma.regularizedGammaP ( getAlpha (  ) , x / getBeta (  )  ) ;^[CLASS] GammaDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[P13_Insert_Block]^if  ( x <= 0.0 )  {     ret = 0.0; }else {     ret = regularizedGammaP ( getAlpha (  ) ,  ( x /  ( getBeta (  )  )  )  ) ; }^74^^^^^68^78^[Delete]^[CLASS] GammaDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = Gamma.regularizedGammaP ( getAlpha (  ) , x * getBeta (  )  ) ;^74^^^^^68^78^ret = Gamma.regularizedGammaP ( getAlpha (  ) , x / getBeta (  )  ) ;^[CLASS] GammaDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[P14_Delete_Statement]^^74^^^^^68^78^ret = Gamma.regularizedGammaP ( getAlpha (  ) , x / getBeta (  )  ) ;^[CLASS] GammaDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^ret = 2.0d;^72^^^^^68^78^ret = 0.0;^[CLASS] GammaDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^ret = 1.0d;^72^^^^^68^78^ret = 0.0;^[CLASS] GammaDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = Gamma.regularizedGammaP ( getAlpha (  ) , x - getBeta (  )  ) ;^74^^^^^68^78^ret = Gamma.regularizedGammaP ( getAlpha (  ) , x / getBeta (  )  ) ;^[CLASS] GammaDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^return x;^77^^^^^68^78^return ret;^[CLASS] GammaDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^if  ( p != 0 )  {^95^^^^^93^102^if  ( p == 0 )  {^[CLASS] GammaDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^if  ( p == 9 )  {^95^^^^^93^102^if  ( p == 0 )  {^[CLASS] GammaDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^if  ( x == 0 )  {^95^^^^^93^102^if  ( p == 0 )  {^[CLASS] GammaDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^if  ( p == 1 )  {^95^^^^^93^102^if  ( p == 0 )  {^[CLASS] GammaDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P9_Replace_Statement]^if  ( p < .5 )  {^95^^^^^93^102^if  ( p == 0 )  {^[CLASS] GammaDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P9_Replace_Statement]^if  ( alpha <= 0.0 )  {^95^^^^^93^102^if  ( p == 0 )  {^[CLASS] GammaDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P9_Replace_Statement]^if  ( x <= 0.0 )  {^95^^^^^93^102^if  ( p == 0 )  {^[CLASS] GammaDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P9_Replace_Statement]^if  ( beta <= 0.0 )  {^95^^^^^93^102^if  ( p == 0 )  {^[CLASS] GammaDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P15_Unwrap_Block]^return 0.0;^95^96^97^^^93^102^if  ( p == 0 )  { return 0d; }^[CLASS] GammaDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P16_Remove_Block]^^95^96^97^^^93^102^if  ( p == 0 )  { return 0d; }^[CLASS] GammaDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^if  ( p != 1 )  {^98^^^^^93^102^if  ( p == 1 )  {^[CLASS] GammaDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^if  ( p == -4 )  {^98^^^^^93^102^if  ( p == 1 )  {^[CLASS] GammaDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^if  ( x == 1 )  {^98^^^^^93^102^if  ( p == 1 )  {^[CLASS] GammaDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^if  ( p == 1 + 4 )  {^98^^^^^93^102^if  ( p == 1 )  {^[CLASS] GammaDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P9_Replace_Statement]^if  ( p < .5 )  {^98^^^^^93^102^if  ( p == 1 )  {^[CLASS] GammaDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P9_Replace_Statement]^if  ( alpha <= 0.0 )  {^98^^^^^93^102^if  ( p == 1 )  {^[CLASS] GammaDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P9_Replace_Statement]^if  ( x <= 0.0 )  {^98^^^^^93^102^if  ( p == 1 )  {^[CLASS] GammaDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P9_Replace_Statement]^if  ( p == 0 )  {^98^^^^^93^102^if  ( p == 1 )  {^[CLASS] GammaDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P15_Unwrap_Block]^return java.lang.Double.POSITIVE_INFINITY;^98^99^100^^^93^102^if  ( p == 1 )  { return Double.POSITIVE_INFINITY; }^[CLASS] GammaDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P16_Remove_Block]^^98^99^100^^^93^102^if  ( p == 1 )  { return Double.POSITIVE_INFINITY; }^[CLASS] GammaDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P13_Insert_Block]^if  ( p == 1 )  {     return POSITIVE_INFINITY; }^99^^^^^93^102^[Delete]^[CLASS] GammaDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P14_Delete_Statement]^^101^^^^^93^102^return super.inverseCumulativeProbability ( p ) ;^[CLASS] GammaDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^if  ( alpha < 0.0 )  {^110^^^^^109^114^if  ( alpha <= 0.0 )  {^[CLASS] GammaDistributionImpl  [METHOD] setAlpha [RETURN_TYPE] void   double alpha [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^if  ( x <= 0.0 )  {^110^^^^^109^114^if  ( alpha <= 0.0 )  {^[CLASS] GammaDistributionImpl  [METHOD] setAlpha [RETURN_TYPE] void   double alpha [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^if  ( alpha <= 0.0d )  {^110^^^^^109^114^if  ( alpha <= 0.0 )  {^[CLASS] GammaDistributionImpl  [METHOD] setAlpha [RETURN_TYPE] void   double alpha [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P9_Replace_Statement]^if  ( p == 1 )  {^110^^^^^109^114^if  ( alpha <= 0.0 )  {^[CLASS] GammaDistributionImpl  [METHOD] setAlpha [RETURN_TYPE] void   double alpha [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P9_Replace_Statement]^if  ( p < .5 )  {^110^^^^^109^114^if  ( alpha <= 0.0 )  {^[CLASS] GammaDistributionImpl  [METHOD] setAlpha [RETURN_TYPE] void   double alpha [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P9_Replace_Statement]^if  ( p == 0 )  {^110^^^^^109^114^if  ( alpha <= 0.0 )  {^[CLASS] GammaDistributionImpl  [METHOD] setAlpha [RETURN_TYPE] void   double alpha [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P9_Replace_Statement]^if  ( beta <= 0.0 )  {^110^^^^^109^114^if  ( alpha <= 0.0 )  {^[CLASS] GammaDistributionImpl  [METHOD] setAlpha [RETURN_TYPE] void   double alpha [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("alpha must be positive");^110^111^112^^^109^114^if  ( alpha <= 0.0 )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] GammaDistributionImpl  [METHOD] setAlpha [RETURN_TYPE] void   double alpha [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P16_Remove_Block]^^110^111^112^^^109^114^if  ( alpha <= 0.0 )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] GammaDistributionImpl  [METHOD] setAlpha [RETURN_TYPE] void   double alpha [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P13_Insert_Block]^if  ( beta <= 0.0 )  {     throw new IllegalArgumentException ( "beta must be positive" ) ; }^110^^^^^109^114^[Delete]^[CLASS] GammaDistributionImpl  [METHOD] setAlpha [RETURN_TYPE] void   double alpha [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "beta must be positive" )   ;^111^^^^^109^114^throw new IllegalArgumentException  (" ")  ;^[CLASS] GammaDistributionImpl  [METHOD] setAlpha [RETURN_TYPE] void   double alpha [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P13_Insert_Block]^if  ( beta <= 0.0 )  {     throw new IllegalArgumentException ( "beta must be positive" ) ; }^111^^^^^109^114^[Delete]^[CLASS] GammaDistributionImpl  [METHOD] setAlpha [RETURN_TYPE] void   double alpha [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P13_Insert_Block]^if  ( alpha <= 0.0 )  {     throw new IllegalArgumentException ( "alpha must be positive" ) ; }^111^^^^^109^114^[Delete]^[CLASS] GammaDistributionImpl  [METHOD] setAlpha [RETURN_TYPE] void   double alpha [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^return ;^111^^^^^109^114^throw new IllegalArgumentException  (" ")  ;^[CLASS] GammaDistributionImpl  [METHOD] setAlpha [RETURN_TYPE] void   double alpha [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^this.alpha = x;^113^^^^^109^114^this.alpha = alpha;^[CLASS] GammaDistributionImpl  [METHOD] setAlpha [RETURN_TYPE] void   double alpha [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^this.beta = beta;this.alpha = alpha;^113^^^^^109^114^this.alpha = alpha;^[CLASS] GammaDistributionImpl  [METHOD] setAlpha [RETURN_TYPE] void   double alpha [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^return x;^121^^^^^120^122^return alpha;^[CLASS] GammaDistributionImpl  [METHOD] getAlpha [RETURN_TYPE] double   [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^if  ( beta < 0.0 )  {^130^^^^^129^134^if  ( beta <= 0.0 )  {^[CLASS] GammaDistributionImpl  [METHOD] setBeta [RETURN_TYPE] void   double beta [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^if  ( x <= 0.0 )  {^130^^^^^129^134^if  ( beta <= 0.0 )  {^[CLASS] GammaDistributionImpl  [METHOD] setBeta [RETURN_TYPE] void   double beta [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^if  ( beta <= 2.0d )  {^130^^^^^129^134^if  ( beta <= 0.0 )  {^[CLASS] GammaDistributionImpl  [METHOD] setBeta [RETURN_TYPE] void   double beta [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P9_Replace_Statement]^if  ( p < .5 )  {^130^^^^^129^134^if  ( beta <= 0.0 )  {^[CLASS] GammaDistributionImpl  [METHOD] setBeta [RETURN_TYPE] void   double beta [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P9_Replace_Statement]^if  ( alpha <= 0.0 )  {^130^^^^^129^134^if  ( beta <= 0.0 )  {^[CLASS] GammaDistributionImpl  [METHOD] setBeta [RETURN_TYPE] void   double beta [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P9_Replace_Statement]^if  ( p == 0 )  {^130^^^^^129^134^if  ( beta <= 0.0 )  {^[CLASS] GammaDistributionImpl  [METHOD] setBeta [RETURN_TYPE] void   double beta [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("beta must be positive");^130^131^132^^^129^134^if  ( beta <= 0.0 )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] GammaDistributionImpl  [METHOD] setBeta [RETURN_TYPE] void   double beta [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P16_Remove_Block]^^130^131^132^^^129^134^if  ( beta <= 0.0 )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] GammaDistributionImpl  [METHOD] setBeta [RETURN_TYPE] void   double beta [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P13_Insert_Block]^if  ( alpha <= 0.0 )  {     throw new IllegalArgumentException ( "alpha must be positive" ) ; }^130^^^^^129^134^[Delete]^[CLASS] GammaDistributionImpl  [METHOD] setBeta [RETURN_TYPE] void   double beta [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "alpha must be positive" )   ;^131^^^^^129^134^throw new IllegalArgumentException  (" ")  ;^[CLASS] GammaDistributionImpl  [METHOD] setBeta [RETURN_TYPE] void   double beta [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P13_Insert_Block]^if  ( beta <= 0.0 )  {     throw new IllegalArgumentException ( "beta must be positive" ) ; }^131^^^^^129^134^[Delete]^[CLASS] GammaDistributionImpl  [METHOD] setBeta [RETURN_TYPE] void   double beta [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P13_Insert_Block]^if  ( alpha <= 0.0 )  {     throw new IllegalArgumentException ( "alpha must be positive" ) ; }^131^^^^^129^134^[Delete]^[CLASS] GammaDistributionImpl  [METHOD] setBeta [RETURN_TYPE] void   double beta [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^this.beta = x;^133^^^^^129^134^this.beta = beta;^[CLASS] GammaDistributionImpl  [METHOD] setBeta [RETURN_TYPE] void   double beta [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^this.alpha = alpha;this.beta = beta;^133^^^^^129^134^this.beta = beta;^[CLASS] GammaDistributionImpl  [METHOD] setBeta [RETURN_TYPE] void   double beta [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^return ret;^141^^^^^140^142^return beta;^[CLASS] GammaDistributionImpl  [METHOD] getBeta [RETURN_TYPE] double   [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P1_Replace_Type]^int ret;^172^^^^^167^183^double ret;^[CLASS] GammaDistributionImpl  [METHOD] getDomainUpperBound [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^if  ( p <= .5 )  {^174^^^^^167^183^if  ( p < .5 )  {^[CLASS] GammaDistributionImpl  [METHOD] getDomainUpperBound [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^if  ( ret < .5 )  {^174^^^^^167^183^if  ( p < .5 )  {^[CLASS] GammaDistributionImpl  [METHOD] getDomainUpperBound [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^if  ( getAlpha() * getBeta() )  {^174^^^^^167^183^if  ( p < .5 )  {^[CLASS] GammaDistributionImpl  [METHOD] getDomainUpperBound [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^if  ( x < .5 )  {^174^^^^^167^183^if  ( p < .5 )  {^[CLASS] GammaDistributionImpl  [METHOD] getDomainUpperBound [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P9_Replace_Statement]^if  ( p == 1 )  {^174^^^^^167^183^if  ( p < .5 )  {^[CLASS] GammaDistributionImpl  [METHOD] getDomainUpperBound [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P9_Replace_Statement]^if  ( alpha <= 0.0 )  {^174^^^^^167^183^if  ( p < .5 )  {^[CLASS] GammaDistributionImpl  [METHOD] getDomainUpperBound [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P9_Replace_Statement]^if  ( x <= 0.0 )  {^174^^^^^167^183^if  ( p < .5 )  {^[CLASS] GammaDistributionImpl  [METHOD] getDomainUpperBound [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P9_Replace_Statement]^if  ( p == 0 )  {^174^^^^^167^183^if  ( p < .5 )  {^[CLASS] GammaDistributionImpl  [METHOD] getDomainUpperBound [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P9_Replace_Statement]^if  ( beta <= 0.0 )  {^174^^^^^167^183^if  ( p < .5 )  {^[CLASS] GammaDistributionImpl  [METHOD] getDomainUpperBound [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^ret  =  ret ;^179^^^^^167^183^ret = Double.MAX_VALUE;^[CLASS] GammaDistributionImpl  [METHOD] getDomainUpperBound [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret + = getAlpha (  )  * getBeta (  ) ;^176^^^^^167^183^ret = getAlpha (  )  * getBeta (  ) ;^[CLASS] GammaDistributionImpl  [METHOD] getDomainUpperBound [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P7_Replace_Invocation]^ret = getBeta (  )  * getBeta (  ) ;^176^^^^^167^183^ret = getAlpha (  )  * getBeta (  ) ;^[CLASS] GammaDistributionImpl  [METHOD] getDomainUpperBound [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P7_Replace_Invocation]^ret = getAlpha (  )  * getAlpha (  ) ;^176^^^^^167^183^ret = getAlpha (  )  * getBeta (  ) ;^[CLASS] GammaDistributionImpl  [METHOD] getDomainUpperBound [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^ret  =  ret ;^176^^^^^167^183^ret = getAlpha (  )  * getBeta (  ) ;^[CLASS] GammaDistributionImpl  [METHOD] getDomainUpperBound [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^ret = Gamma.regularizedGammaP ( getAlpha (  ) , x / getBeta (  )  ) ;ret = getAlpha (  )  * getBeta (  ) ;^176^^^^^167^183^ret = getAlpha (  )  * getBeta (  ) ;^[CLASS] GammaDistributionImpl  [METHOD] getDomainUpperBound [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^ret = getAlpha (  )  * getBeta (  )  * .5;ret = getAlpha (  )  * getBeta (  ) ;^176^^^^^167^183^ret = getAlpha (  )  * getBeta (  ) ;^[CLASS] GammaDistributionImpl  [METHOD] getDomainUpperBound [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P14_Delete_Statement]^^176^^^^^167^183^ret = getAlpha (  )  * getBeta (  ) ;^[CLASS] GammaDistributionImpl  [METHOD] getDomainUpperBound [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret - = getAlpha (  )  * getBeta (  ) ;^176^^^^^167^183^ret = getAlpha (  )  * getBeta (  ) ;^[CLASS] GammaDistributionImpl  [METHOD] getDomainUpperBound [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^ret ;^179^^^^^167^183^ret = Double.MAX_VALUE;^[CLASS] GammaDistributionImpl  [METHOD] getDomainUpperBound [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^return x;^182^^^^^167^183^return ret;^[CLASS] GammaDistributionImpl  [METHOD] getDomainUpperBound [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P1_Replace_Type]^float ret;^197^^^^^193^208^double ret;^[CLASS] GammaDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^if  ( p <= .5 )  {^199^^^^^193^208^if  ( p < .5 )  {^[CLASS] GammaDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^if  ( x < .5 )  {^199^^^^^193^208^if  ( p < .5 )  {^[CLASS] GammaDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^if  ( getAlpha() * getBeta() * 0.5 )  {^199^^^^^193^208^if  ( p < .5 )  {^[CLASS] GammaDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^if  ( getAlpha (  )  * getBeta (  ) )  {^199^^^^^193^208^if  ( p < .5 )  {^[CLASS] GammaDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^if  ( ret < .5 )  {^199^^^^^193^208^if  ( p < .5 )  {^[CLASS] GammaDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P9_Replace_Statement]^if  ( p == 1 )  {^199^^^^^193^208^if  ( p < .5 )  {^[CLASS] GammaDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P9_Replace_Statement]^if  ( alpha <= 0.0 )  {^199^^^^^193^208^if  ( p < .5 )  {^[CLASS] GammaDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P9_Replace_Statement]^if  ( x <= 0.0 )  {^199^^^^^193^208^if  ( p < .5 )  {^[CLASS] GammaDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P9_Replace_Statement]^if  ( p == 0 )  {^199^^^^^193^208^if  ( p < .5 )  {^[CLASS] GammaDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P9_Replace_Statement]^if  ( beta <= 0.0 )  {^199^^^^^193^208^if  ( p < .5 )  {^[CLASS] GammaDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret - = getAlpha (  )  * getBeta (  ) ;^204^^^^^193^208^ret = getAlpha (  )  * getBeta (  ) ;^[CLASS] GammaDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P7_Replace_Invocation]^ret = getBeta (  )  * getBeta (  ) ;^204^^^^^193^208^ret = getAlpha (  )  * getBeta (  ) ;^[CLASS] GammaDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P7_Replace_Invocation]^ret = getAlpha (  )  * getAlpha (  ) ;^204^^^^^193^208^ret = getAlpha (  )  * getBeta (  ) ;^[CLASS] GammaDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^ret  = null ;^204^^^^^193^208^ret = getAlpha (  )  * getBeta (  ) ;^[CLASS] GammaDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^ret = Gamma.regularizedGammaP ( getAlpha (  ) , x / getBeta (  )  ) ;ret = getAlpha (  )  * getBeta (  ) ;^204^^^^^193^208^ret = getAlpha (  )  * getBeta (  ) ;^[CLASS] GammaDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^ret = getAlpha (  )  * getBeta (  )  * .5;ret = getAlpha (  )  * getBeta (  ) ;^204^^^^^193^208^ret = getAlpha (  )  * getBeta (  ) ;^[CLASS] GammaDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P14_Delete_Statement]^^204^^^^^193^208^ret = getAlpha (  )  * getBeta (  ) ;^[CLASS] GammaDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret / = getAlpha (  )  * getBeta (  )  * .5;^201^^^^^193^208^ret = getAlpha (  )  * getBeta (  )  * .5;^[CLASS] GammaDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = getAlpha (  )  - getBeta (  )  * .5;^201^^^^^193^208^ret = getAlpha (  )  * getBeta (  )  * .5;^[CLASS] GammaDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P7_Replace_Invocation]^ret = getBeta (  )  * getBeta (  )  * .5;^201^^^^^193^208^ret = getAlpha (  )  * getBeta (  )  * .5;^[CLASS] GammaDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P7_Replace_Invocation]^ret = getAlpha (  )  * getAlpha (  )  * .5;^201^^^^^193^208^ret = getAlpha (  )  * getBeta (  )  * .5;^[CLASS] GammaDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^ret  = null ;^201^^^^^193^208^ret = getAlpha (  )  * getBeta (  )  * .5;^[CLASS] GammaDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^ret = Gamma.regularizedGammaP ( getAlpha (  ) , x / getBeta (  )  ) ;ret = getAlpha (  )  * getBeta (  )  * .5;^201^^^^^193^208^ret = getAlpha (  )  * getBeta (  )  * .5;^[CLASS] GammaDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^ret = getAlpha (  )  * getBeta (  ) ;ret = getAlpha (  )  * getBeta (  )  * .5;^201^^^^^193^208^ret = getAlpha (  )  * getBeta (  )  * .5;^[CLASS] GammaDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P14_Delete_Statement]^^201^^^^^193^208^ret = getAlpha (  )  * getBeta (  )  * .5;^[CLASS] GammaDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret + = getAlpha (  )  * getBeta (  )  * .5;^201^^^^^193^208^ret = getAlpha (  )  * getBeta (  )  * .5;^[CLASS] GammaDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = getAlpha (  )  + getBeta (  )  * .5;^201^^^^^193^208^ret = getAlpha (  )  * getBeta (  )  * .5;^[CLASS] GammaDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^ret ;^201^^^^^193^208^ret = getAlpha (  )  * getBeta (  )  * .5;^[CLASS] GammaDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret / = getAlpha (  )  * getBeta (  ) ;^204^^^^^193^208^ret = getAlpha (  )  * getBeta (  ) ;^[CLASS] GammaDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^ret  =  ret ;^204^^^^^193^208^ret = getAlpha (  )  * getBeta (  ) ;^[CLASS] GammaDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^return x;^207^^^^^193^208^return ret;^[CLASS] GammaDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
