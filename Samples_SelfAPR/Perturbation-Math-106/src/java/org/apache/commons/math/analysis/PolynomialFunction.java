[P1_Replace_Type]^private static final  short  serialVersionUID = 3322454535052136809L;^31^^^^^26^36^private static final long serialVersionUID = 3322454535052136809L;^[CLASS] PolynomialFunction   [VARIABLES] 
[P8_Replace_Mix]^private static final long serialVersionUID = 3322454535052136809;^31^^^^^26^36^private static final long serialVersionUID = 3322454535052136809L;^[CLASS] PolynomialFunction   [VARIABLES] 
[P14_Delete_Statement]^^54^^^^^53^60^super (  ) ;^[CLASS] PolynomialFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction(double[])   double[] c [VARIABLES] double[]  c  coefficients  long  serialVersionUID  boolean  
[P2_Replace_Operator]^if  ( c.length <= 1 )  {^55^^^^^53^60^if  ( c.length < 1 )  {^[CLASS] PolynomialFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction(double[])   double[] c [VARIABLES] double[]  c  coefficients  long  serialVersionUID  boolean  
[P3_Replace_Literal]^if  ( c.length < 2 )  {^55^^^^^53^60^if  ( c.length < 1 )  {^[CLASS] PolynomialFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction(double[])   double[] c [VARIABLES] double[]  c  coefficients  long  serialVersionUID  boolean  
[P5_Replace_Variable]^if  ( coefficients.length < 1 )  {^55^^^^^53^60^if  ( c.length < 1 )  {^[CLASS] PolynomialFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction(double[])   double[] c [VARIABLES] double[]  c  coefficients  long  serialVersionUID  boolean  
[P5_Replace_Variable]^if  ( c.length.length < 1 )  {^55^^^^^53^60^if  ( c.length < 1 )  {^[CLASS] PolynomialFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction(double[])   double[] c [VARIABLES] double[]  c  coefficients  long  serialVersionUID  boolean  
[P5_Replace_Variable]^if  ( c < 1 )  {^55^^^^^53^60^if  ( c.length < 1 )  {^[CLASS] PolynomialFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction(double[])   double[] c [VARIABLES] double[]  c  coefficients  long  serialVersionUID  boolean  
[P8_Replace_Mix]^if  ( c.length < 0  )  {^55^^^^^53^60^if  ( c.length < 1 )  {^[CLASS] PolynomialFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction(double[])   double[] c [VARIABLES] double[]  c  coefficients  long  serialVersionUID  boolean  
[P9_Replace_Statement]^if  ( n < 1 )  {^55^^^^^53^60^if  ( c.length < 1 )  {^[CLASS] PolynomialFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction(double[])   double[] c [VARIABLES] double[]  c  coefficients  long  serialVersionUID  boolean  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("Polynomial coefficient array must have postive length.");^55^56^57^^^53^60^if  ( c.length < 1 )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] PolynomialFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction(double[])   double[] c [VARIABLES] double[]  c  coefficients  long  serialVersionUID  boolean  
[P16_Remove_Block]^^55^56^57^^^53^60^if  ( c.length < 1 )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] PolynomialFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction(double[])   double[] c [VARIABLES] double[]  c  coefficients  long  serialVersionUID  boolean  
[P13_Insert_Block]^if  ( n < 1 )  {     throw new IllegalArgumentException ( "Coefficient array must have positive length for differentiation" ) ; }^55^^^^^53^60^[Delete]^[CLASS] PolynomialFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction(double[])   double[] c [VARIABLES] double[]  c  coefficients  long  serialVersionUID  boolean  
[P13_Insert_Block]^if  ( n < 1 )  {     throw new IllegalArgumentException ( "Coefficient array must have positive length for evaluation" ) ; }^55^^^^^53^60^[Delete]^[CLASS] PolynomialFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction(double[])   double[] c [VARIABLES] double[]  c  coefficients  long  serialVersionUID  boolean  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "Coefficient array must have positive length for evaluation" )   ;^56^^^^^53^60^throw new IllegalArgumentException  (" ")  ;^[CLASS] PolynomialFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction(double[])   double[] c [VARIABLES] double[]  c  coefficients  long  serialVersionUID  boolean  
[P13_Insert_Block]^if  (  ( c.length )  < 1 )  {     throw new IllegalArgumentException ( "Polynomial coefficient array must have postive length." ) ; }^56^^^^^53^60^[Delete]^[CLASS] PolynomialFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction(double[])   double[] c [VARIABLES] double[]  c  coefficients  long  serialVersionUID  boolean  
[P13_Insert_Block]^if  ( n < 1 )  {     throw new IllegalArgumentException ( "Coefficient array must have positive length for differentiation" ) ; }^56^^^^^53^60^[Delete]^[CLASS] PolynomialFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction(double[])   double[] c [VARIABLES] double[]  c  coefficients  long  serialVersionUID  boolean  
[P13_Insert_Block]^if  ( n < 1 )  {     throw new IllegalArgumentException ( "Coefficient array must have positive length for evaluation" ) ; }^56^^^^^53^60^[Delete]^[CLASS] PolynomialFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction(double[])   double[] c [VARIABLES] double[]  c  coefficients  long  serialVersionUID  boolean  
[P8_Replace_Mix]^this.coefficients =  new double[coefficients.length];^58^^^^^53^60^this.coefficients = new double[c.length];^[CLASS] PolynomialFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction(double[])   double[] c [VARIABLES] double[]  c  coefficients  long  serialVersionUID  boolean  
[P3_Replace_Literal]^System.arraycopy ( c, -1, this.coefficients, -1, c.length ) ;^59^^^^^53^60^System.arraycopy ( c, 0, this.coefficients, 0, c.length ) ;^[CLASS] PolynomialFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction(double[])   double[] c [VARIABLES] double[]  c  coefficients  long  serialVersionUID  boolean  
[P5_Replace_Variable]^System.arraycopy ( coefficients, 0, this.coefficients, 0, c.length ) ;^59^^^^^53^60^System.arraycopy ( c, 0, this.coefficients, 0, c.length ) ;^[CLASS] PolynomialFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction(double[])   double[] c [VARIABLES] double[]  c  coefficients  long  serialVersionUID  boolean  
[P5_Replace_Variable]^System.arraycopy ( c, 0, coefficients, 0, c.length ) ;^59^^^^^53^60^System.arraycopy ( c, 0, this.coefficients, 0, c.length ) ;^[CLASS] PolynomialFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction(double[])   double[] c [VARIABLES] double[]  c  coefficients  long  serialVersionUID  boolean  
[P5_Replace_Variable]^System.arraycopy (  0, this.coefficients, 0, c.length ) ;^59^^^^^53^60^System.arraycopy ( c, 0, this.coefficients, 0, c.length ) ;^[CLASS] PolynomialFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction(double[])   double[] c [VARIABLES] double[]  c  coefficients  long  serialVersionUID  boolean  
[P5_Replace_Variable]^System.arraycopy ( c, 0,  0, c.length ) ;^59^^^^^53^60^System.arraycopy ( c, 0, this.coefficients, 0, c.length ) ;^[CLASS] PolynomialFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction(double[])   double[] c [VARIABLES] double[]  c  coefficients  long  serialVersionUID  boolean  
[P5_Replace_Variable]^System.arraycopy ( c, 0, this.coefficients, 0 ) ;^59^^^^^53^60^System.arraycopy ( c, 0, this.coefficients, 0, c.length ) ;^[CLASS] PolynomialFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction(double[])   double[] c [VARIABLES] double[]  c  coefficients  long  serialVersionUID  boolean  
[P5_Replace_Variable]^System.arraycopy ( this.coefficients, 0, c, 0, c.length ) ;^59^^^^^53^60^System.arraycopy ( c, 0, this.coefficients, 0, c.length ) ;^[CLASS] PolynomialFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction(double[])   double[] c [VARIABLES] double[]  c  coefficients  long  serialVersionUID  boolean  
[P5_Replace_Variable]^System.arraycopy ( c, 0, c.length, 0, this.coefficients ) ;^59^^^^^53^60^System.arraycopy ( c, 0, this.coefficients, 0, c.length ) ;^[CLASS] PolynomialFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction(double[])   double[] c [VARIABLES] double[]  c  coefficients  long  serialVersionUID  boolean  
[P5_Replace_Variable]^System.arraycopy ( c.length, 0, this.coefficients, 0, c ) ;^59^^^^^53^60^System.arraycopy ( c, 0, this.coefficients, 0, c.length ) ;^[CLASS] PolynomialFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction(double[])   double[] c [VARIABLES] double[]  c  coefficients  long  serialVersionUID  boolean  
[P14_Delete_Statement]^^59^^^^^53^60^System.arraycopy ( c, 0, this.coefficients, 0, c.length ) ;^[CLASS] PolynomialFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction(double[])   double[] c [VARIABLES] double[]  c  coefficients  long  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^System.arraycopy ( coefficients,0, out, 0, coefficients.length ) ;System.arraycopy ( c, 0, this.coefficients, 0, c.length ) ;^59^^^^^53^60^System.arraycopy ( c, 0, this.coefficients, 0, c.length ) ;^[CLASS] PolynomialFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction(double[])   double[] c [VARIABLES] double[]  c  coefficients  long  serialVersionUID  boolean  
[P5_Replace_Variable]^return evaluate ( c, x ) ;^73^^^^^72^74^return evaluate ( coefficients, x ) ;^[CLASS] PolynomialFunction  [METHOD] value [RETURN_TYPE] double   double x [VARIABLES] boolean  double[]  c  coefficients  long  serialVersionUID  double  x  
[P5_Replace_Variable]^return evaluate ( coefficients ) ;^73^^^^^72^74^return evaluate ( coefficients, x ) ;^[CLASS] PolynomialFunction  [METHOD] value [RETURN_TYPE] double   double x [VARIABLES] boolean  double[]  c  coefficients  long  serialVersionUID  double  x  
[P5_Replace_Variable]^return evaluate (  x ) ;^73^^^^^72^74^return evaluate ( coefficients, x ) ;^[CLASS] PolynomialFunction  [METHOD] value [RETURN_TYPE] double   double x [VARIABLES] boolean  double[]  c  coefficients  long  serialVersionUID  double  x  
[P5_Replace_Variable]^return evaluate ( x, coefficients ) ;^73^^^^^72^74^return evaluate ( coefficients, x ) ;^[CLASS] PolynomialFunction  [METHOD] value [RETURN_TYPE] double   double x [VARIABLES] boolean  double[]  c  coefficients  long  serialVersionUID  double  x  
[P7_Replace_Invocation]^return value ( coefficients, x ) ;^73^^^^^72^74^return evaluate ( coefficients, x ) ;^[CLASS] PolynomialFunction  [METHOD] value [RETURN_TYPE] double   double x [VARIABLES] boolean  double[]  c  coefficients  long  serialVersionUID  double  x  
[P14_Delete_Statement]^^73^^^^^72^74^return evaluate ( coefficients, x ) ;^[CLASS] PolynomialFunction  [METHOD] value [RETURN_TYPE] double   double x [VARIABLES] boolean  double[]  c  coefficients  long  serialVersionUID  double  x  
[P2_Replace_Operator]^return coefficients.length  <  1;^83^^^^^82^84^return coefficients.length - 1;^[CLASS] PolynomialFunction  [METHOD] degree [RETURN_TYPE] int   [VARIABLES] double[]  c  coefficients  long  serialVersionUID  boolean  
[P3_Replace_Literal]^return coefficients.length ;^83^^^^^82^84^return coefficients.length - 1;^[CLASS] PolynomialFunction  [METHOD] degree [RETURN_TYPE] int   [VARIABLES] double[]  c  coefficients  long  serialVersionUID  boolean  
[P5_Replace_Variable]^return c.length - 1;^83^^^^^82^84^return coefficients.length - 1;^[CLASS] PolynomialFunction  [METHOD] degree [RETURN_TYPE] int   [VARIABLES] double[]  c  coefficients  long  serialVersionUID  boolean  
[P5_Replace_Variable]^return coefficients - 1;^83^^^^^82^84^return coefficients.length - 1;^[CLASS] PolynomialFunction  [METHOD] degree [RETURN_TYPE] int   [VARIABLES] double[]  c  coefficients  long  serialVersionUID  boolean  
[P5_Replace_Variable]^return coefficients.length.length - 1;^83^^^^^82^84^return coefficients.length - 1;^[CLASS] PolynomialFunction  [METHOD] degree [RETURN_TYPE] int   [VARIABLES] double[]  c  coefficients  long  serialVersionUID  boolean  
[P8_Replace_Mix]^return coefficients.length %  2 - 1;^83^^^^^82^84^return coefficients.length - 1;^[CLASS] PolynomialFunction  [METHOD] degree [RETURN_TYPE] int   [VARIABLES] double[]  c  coefficients  long  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^double[] result = new double[n - 1];double[] out = new double[coefficients.length];^95^^^^^94^98^double[] out = new double[coefficients.length];^[CLASS] PolynomialFunction  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] double[]  c  coefficients  out  long  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^double result = coefficients[n - 1];double[] out = new double[coefficients.length];^95^^^^^94^98^double[] out = new double[coefficients.length];^[CLASS] PolynomialFunction  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] double[]  c  coefficients  out  long  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^int n = coefficients.length;double[] out = new double[coefficients.length];^95^^^^^94^98^double[] out = new double[coefficients.length];^[CLASS] PolynomialFunction  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] double[]  c  coefficients  out  long  serialVersionUID  boolean  
[P3_Replace_Literal]^System.arraycopy ( coefficients,4, out, 4, coefficients.length ) ;^96^^^^^94^98^System.arraycopy ( coefficients,0, out, 0, coefficients.length ) ;^[CLASS] PolynomialFunction  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] double[]  c  coefficients  out  long  serialVersionUID  boolean  
[P3_Replace_Literal]^System.arraycopy ( coefficients,-2, out, -2, coefficients.length ) ;^96^^^^^94^98^System.arraycopy ( coefficients,0, out, 0, coefficients.length ) ;^[CLASS] PolynomialFunction  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] double[]  c  coefficients  out  long  serialVersionUID  boolean  
[P5_Replace_Variable]^System.arraycopy ( c,0, out, 0, coefficients.length ) ;^96^^^^^94^98^System.arraycopy ( coefficients,0, out, 0, coefficients.length ) ;^[CLASS] PolynomialFunction  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] double[]  c  coefficients  out  long  serialVersionUID  boolean  
[P5_Replace_Variable]^System.arraycopy ( coefficients,0,  0, coefficients.length ) ;^96^^^^^94^98^System.arraycopy ( coefficients,0, out, 0, coefficients.length ) ;^[CLASS] PolynomialFunction  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] double[]  c  coefficients  out  long  serialVersionUID  boolean  
[P5_Replace_Variable]^System.arraycopy ( 0, out, 0, coefficients.length ) ;^96^^^^^94^98^System.arraycopy ( coefficients,0, out, 0, coefficients.length ) ;^[CLASS] PolynomialFunction  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] double[]  c  coefficients  out  long  serialVersionUID  boolean  
[P5_Replace_Variable]^System.arraycopy ( coefficients,0, out, 0 ) ;^96^^^^^94^98^System.arraycopy ( coefficients,0, out, 0, coefficients.length ) ;^[CLASS] PolynomialFunction  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] double[]  c  coefficients  out  long  serialVersionUID  boolean  
[P5_Replace_Variable]^System.arraycopy ( out,0, coefficients, 0, coefficients.length ) ;^96^^^^^94^98^System.arraycopy ( coefficients,0, out, 0, coefficients.length ) ;^[CLASS] PolynomialFunction  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] double[]  c  coefficients  out  long  serialVersionUID  boolean  
[P5_Replace_Variable]^System.arraycopy ( coefficients.length,0, out, 0, coefficients ) ;^96^^^^^94^98^System.arraycopy ( coefficients,0, out, 0, coefficients.length ) ;^[CLASS] PolynomialFunction  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] double[]  c  coefficients  out  long  serialVersionUID  boolean  
[P5_Replace_Variable]^System.arraycopy ( coefficients,0, coefficients.length, 0, out ) ;^96^^^^^94^98^System.arraycopy ( coefficients,0, out, 0, coefficients.length ) ;^[CLASS] PolynomialFunction  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] double[]  c  coefficients  out  long  serialVersionUID  boolean  
[P8_Replace_Mix]^System.arraycopy ( coefficients,0, c, 0, coefficients.length ) ;^96^^^^^94^98^System.arraycopy ( coefficients,0, out, 0, coefficients.length ) ;^[CLASS] PolynomialFunction  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] double[]  c  coefficients  out  long  serialVersionUID  boolean  
[P14_Delete_Statement]^^96^97^^^^94^98^System.arraycopy ( coefficients,0, out, 0, coefficients.length ) ; return out;^[CLASS] PolynomialFunction  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] double[]  c  coefficients  out  long  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^System.arraycopy ( c, 0, this.coefficients, 0, c.length ) ;System.arraycopy ( coefficients,0, out, 0, coefficients.length ) ;^96^^^^^94^98^System.arraycopy ( coefficients,0, out, 0, coefficients.length ) ;^[CLASS] PolynomialFunction  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] double[]  c  coefficients  out  long  serialVersionUID  boolean  
[P8_Replace_Mix]^return coefficients;^97^^^^^94^98^return out;^[CLASS] PolynomialFunction  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] double[]  c  coefficients  out  long  serialVersionUID  boolean  
[P1_Replace_Type]^short  n = coefficients.length;^111^^^^^110^120^int n = coefficients.length;^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[P5_Replace_Variable]^int n = out.length;^111^^^^^110^120^int n = coefficients.length;^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[P5_Replace_Variable]^int n = j;^111^^^^^110^120^int n = coefficients.length;^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[P5_Replace_Variable]^int n = coefficients.length.length;^111^^^^^110^120^int n = coefficients.length;^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[P5_Replace_Variable]^int n = coefficients;^111^^^^^110^120^int n = coefficients.length;^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[P11_Insert_Donor_Statement]^double[] out = new double[coefficients.length];int n = coefficients.length;^111^^^^^110^120^int n = coefficients.length;^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[P2_Replace_Operator]^if  ( n == 1 )  {^112^^^^^110^120^if  ( n < 1 )  {^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[P3_Replace_Literal]^if  ( n < n )  {^112^^^^^110^120^if  ( n < 1 )  {^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[P5_Replace_Variable]^if  ( j < 1 )  {^112^^^^^110^120^if  ( n < 1 )  {^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[P8_Replace_Mix]^if  ( n < 1L )  {^112^^^^^110^120^if  ( n < 1 )  {^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[P9_Replace_Statement]^if  ( c.length < 1 )  {^112^^^^^110^120^if  ( n < 1 )  {^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("Coefficient array must have positive length for evaluation");^112^113^114^^^110^120^if  ( n < 1 )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[P16_Remove_Block]^^112^113^114^^^110^120^if  ( n < 1 )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[P13_Insert_Block]^if  (  ( c.length )  < 1 )  {     throw new IllegalArgumentException ( "Polynomial coefficient array must have postive length." ) ; }^112^^^^^110^120^[Delete]^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[P13_Insert_Block]^if  ( n < 1 )  {     throw new IllegalArgumentException ( "Coefficient array must have positive length for differentiation" ) ; }^112^^^^^110^120^[Delete]^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "Polynomial coefficient array must have postive length." )   ;^113^^^^^110^120^throw new IllegalArgumentException  (" ")  ;^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[P13_Insert_Block]^if  (  ( c.length )  < 1 )  {     throw new IllegalArgumentException ( "Polynomial coefficient array must have postive length." ) ; }^113^^^^^110^120^[Delete]^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[P13_Insert_Block]^if  ( n < 1 )  {     throw new IllegalArgumentException ( "Coefficient array must have positive length for differentiation" ) ; }^113^^^^^110^120^[Delete]^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[P13_Insert_Block]^if  ( n < 1 )  {     throw new IllegalArgumentException ( "Coefficient array must have positive length for evaluation" ) ; }^113^^^^^110^120^[Delete]^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[P8_Replace_Mix]^return ;^113^^^^^110^120^throw new IllegalArgumentException  (" ")  ;^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[P1_Replace_Type]^int result = coefficients[n - 1];^115^^^^^110^120^double result = coefficients[n - 1];^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[P2_Replace_Operator]^double result = coefficients[n  >=  1];^115^^^^^110^120^double result = coefficients[n - 1];^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[P3_Replace_Literal]^double result = coefficients[n ];^115^^^^^110^120^double result = coefficients[n - 1];^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[P5_Replace_Variable]^double result = out[n - 1];^115^^^^^110^120^double result = coefficients[n - 1];^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[P5_Replace_Variable]^double result = coefficients[j - 1];^115^^^^^110^120^double result = coefficients[n - 1];^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[P11_Insert_Donor_Statement]^double[] result = new double[n - 1];double result = coefficients[n - 1];^115^^^^^110^120^double result = coefficients[n - 1];^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[P11_Insert_Donor_Statement]^double[] out = new double[coefficients.length];double result = coefficients[n - 1];^115^^^^^110^120^double result = coefficients[n - 1];^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[P1_Replace_Type]^for  (  short  j = n -2; j >=0; j-- )  {^116^^^^^110^120^for  ( int j = n -2; j >=0; j-- )  {^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[P3_Replace_Literal]^for  ( int j = n -9; j >=0; j-- )  {^116^^^^^110^120^for  ( int j = n -2; j >=0; j-- )  {^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[P3_Replace_Literal]^for  ( int j = n -2; j >=j; j-- )  {^116^^^^^110^120^for  ( int j = n -2; j >=0; j-- )  {^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[P5_Replace_Variable]^for  ( int n = n -2; j >=0; j-- )  {^116^^^^^110^120^for  ( int j = n -2; j >=0; j-- )  {^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[P5_Replace_Variable]^for  ( int n = j -2; j >=0; j-- )  {^116^^^^^110^120^for  ( int j = n -2; j >=0; j-- )  {^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[P2_Replace_Operator]^result = argument / result + coefficients[j];^117^^^^^110^120^result = argument * result + coefficients[j];^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[P5_Replace_Variable]^result = argument * argument + coefficients[j];^117^^^^^110^120^result = argument * result + coefficients[j];^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[P5_Replace_Variable]^result = argument * result + out[j];^117^^^^^110^120^result = argument * result + coefficients[j];^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[P5_Replace_Variable]^result = result * argument + coefficients[j];^117^^^^^110^120^result = argument * result + coefficients[j];^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[P5_Replace_Variable]^result = argument * coefficients + result[j];^117^^^^^110^120^result = argument * result + coefficients[j];^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[P8_Replace_Mix]^result =  null * result + coefficients[j];^117^^^^^110^120^result = argument * result + coefficients[j];^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[P11_Insert_Donor_Statement]^result[i - 1] =  ( double )  i * coefficients[i];result = argument * result + coefficients[j];^117^^^^^110^120^result = argument * result + coefficients[j];^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[P2_Replace_Operator]^result = argument - result + coefficients[j];^117^^^^^110^120^result = argument * result + coefficients[j];^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[P5_Replace_Variable]^result = coefficients * result + argument[j];^117^^^^^110^120^result = argument * result + coefficients[j];^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[P1_Replace_Type]^for  (  long  j = n -2; j >=0; j-- )  {^116^^^^^110^120^for  ( int j = n -2; j >=0; j-- )  {^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[P3_Replace_Literal]^for  ( int j = n -8; j >=0; j-- )  {^116^^^^^110^120^for  ( int j = n -2; j >=0; j-- )  {^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[P5_Replace_Variable]^return argument;^119^^^^^110^120^return result;^[CLASS] PolynomialFunction  [METHOD] evaluate [RETURN_TYPE] double   double[] coefficients double argument [VARIABLES] boolean  double[]  c  coefficients  out  long  serialVersionUID  double  argument  result  int  j  n  
[P1_Replace_Type]^short  n = coefficients.length;^131^^^^^130^143^int n = coefficients.length;^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[P5_Replace_Variable]^int n = result.length;^131^^^^^130^143^int n = coefficients.length;^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[P5_Replace_Variable]^int n = i;^131^^^^^130^143^int n = coefficients.length;^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[P5_Replace_Variable]^int n = coefficients.length.length;^131^^^^^130^143^int n = coefficients.length;^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[P5_Replace_Variable]^int n = coefficients;^131^^^^^130^143^int n = coefficients.length;^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[P11_Insert_Donor_Statement]^double[] out = new double[coefficients.length];int n = coefficients.length;^131^^^^^130^143^int n = coefficients.length;^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[P2_Replace_Operator]^if  ( n <= 1 )  {^132^^^^^130^143^if  ( n < 1 )  {^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[P3_Replace_Literal]^if  ( n < i )  {^132^^^^^130^143^if  ( n < 1 )  {^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[P5_Replace_Variable]^if  ( i < 1 )  {^132^^^^^130^143^if  ( n < 1 )  {^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[P8_Replace_Mix]^if  ( n < 1L )  {^132^^^^^130^143^if  ( n < 1 )  {^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[P9_Replace_Statement]^if  ( c.length < 1 )  {^132^^^^^130^143^if  ( n < 1 )  {^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[P9_Replace_Statement]^if  ( n == 1 )  {^132^^^^^130^143^if  ( n < 1 )  {^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("Coefficient array must have positive length for differentiation");^132^133^134^^^130^143^if  ( n < 1 )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[P16_Remove_Block]^^132^133^134^^^130^143^if  ( n < 1 )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[P13_Insert_Block]^if  (  ( c.length )  < 1 )  {     throw new IllegalArgumentException ( "Polynomial coefficient array must have postive length." ) ; }^132^^^^^130^143^[Delete]^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[P13_Insert_Block]^if  ( n < 1 )  {     throw new IllegalArgumentException ( "Coefficient array must have positive length for evaluation" ) ; }^132^^^^^130^143^[Delete]^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "Coefficient array must have positive length for evaluation" )   ;^133^^^^^130^143^throw new IllegalArgumentException  (" ")  ;^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[P13_Insert_Block]^if  ( n < 1 )  {     throw new IllegalArgumentException ( "Coefficient array must have positive length for differentiation" ) ; }^133^^^^^130^143^[Delete]^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[P13_Insert_Block]^if  ( n < 1 )  {     throw new IllegalArgumentException ( "Coefficient array must have positive length for evaluation" ) ; }^133^^^^^130^143^[Delete]^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[P13_Insert_Block]^if  (  ( c.length )  < 1 )  {     throw new IllegalArgumentException ( "Polynomial coefficient array must have postive length." ) ; }^133^^^^^130^143^[Delete]^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[P8_Replace_Mix]^return ;^133^^^^^130^143^throw new IllegalArgumentException  (" ")  ;^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[P2_Replace_Operator]^if  ( n >= 1 )  {^135^^^^^130^143^if  ( n == 1 )  {^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[P3_Replace_Literal]^if  ( n == i )  {^135^^^^^130^143^if  ( n == 1 )  {^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[P5_Replace_Variable]^if  ( i == 1 )  {^135^^^^^130^143^if  ( n == 1 )  {^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[P8_Replace_Mix]^if  ( n == 1 - 3 )  {^135^^^^^130^143^if  ( n == 1 )  {^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[P9_Replace_Statement]^if  ( n < 1 )  {^135^^^^^130^143^if  ( n == 1 )  {^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[P15_Unwrap_Block]^return new double[]{ 0 };^135^136^137^^^130^143^if  ( n == 1 )  { return new double[]{0}; }^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[P16_Remove_Block]^^135^136^137^^^130^143^if  ( n == 1 )  { return new double[]{0}; }^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[P3_Replace_Literal]^return new double[]{i};^136^^^^^130^143^return new double[]{0};^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[P8_Replace_Mix]^return new double[]{2};^136^^^^^130^143^return new double[]{0};^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[P13_Insert_Block]^if  ( n == 1 )  {     return new double[]{ 0 }; }^136^^^^^130^143^[Delete]^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[P3_Replace_Literal]^return new double[]{-1};^136^^^^^130^143^return new double[]{0};^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[P8_Replace_Mix]^return new double[]{3};^136^^^^^130^143^return new double[]{0};^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[P2_Replace_Operator]^double[] result = new double[n  !=  1];^138^^^^^130^143^double[] result = new double[n - 1];^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[P3_Replace_Literal]^double[] result = new double[n - n];^138^^^^^130^143^double[] result = new double[n - 1];^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[P5_Replace_Variable]^double[] result = iew double[n - 1];^138^^^^^130^143^double[] result = new double[n - 1];^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[P11_Insert_Donor_Statement]^double[] out = new double[coefficients.length];double[] result = new double[n - 1];^138^^^^^130^143^double[] result = new double[n - 1];^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[P11_Insert_Donor_Statement]^double result = coefficients[n - 1];double[] result = new double[n - 1];^138^^^^^130^143^double[] result = new double[n - 1];^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[P1_Replace_Type]^for  (  short  i = n - 1; i  > 0; i-- )  {^139^^^^^130^143^for  ( int i = n - 1; i  > 0; i-- )  {^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[P2_Replace_Operator]^for  ( int i = n  |  1; i  > 0; i-- )  {^139^^^^^130^143^for  ( int i = n - 1; i  > 0; i-- )  {^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[P2_Replace_Operator]^for  ( int i = n - 1; i  >= 0; i-- )  {^139^^^^^130^143^for  ( int i = n - 1; i  > 0; i-- )  {^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[P2_Replace_Operator]^for  ( int i = n  <<  1; i  > 0; i-- )  {^139^^^^^130^143^for  ( int i = n - 1; i  > 0; i-- )  {^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[P3_Replace_Literal]^for  ( int i = n ; i  > 0; i-- )  {^139^^^^^130^143^for  ( int i = n - 1; i  > 0; i-- )  {^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[P3_Replace_Literal]^for  ( int i = n - 1; i  > i; i-- )  {^139^^^^^130^143^for  ( int i = n - 1; i  > 0; i-- )  {^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[P5_Replace_Variable]^for  ( nnt i = n - 1; i  > 0; i-- )  {^139^^^^^130^143^for  ( int i = n - 1; i  > 0; i-- )  {^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[P5_Replace_Variable]^for  ( nnt i = i - 1; i  > 0; i-- )  {^139^^^^^130^143^for  ( int i = n - 1; i  > 0; i-- )  {^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[P1_Replace_Type]^result[i - 1] =  ( int )  i * coefficients[i];^140^^^^^130^143^result[i - 1] =  ( double )  i * coefficients[i];^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[P2_Replace_Operator]^result[i  ||  1] =  ( double )  i * coefficients[i];^140^^^^^130^143^result[i - 1] =  ( double )  i * coefficients[i];^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[P2_Replace_Operator]^result[i - - 1] =  ( double )  i * coefficients[i];^140^^^^^130^143^result[i - 1] =  ( double )  i * coefficients[i];^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[P3_Replace_Literal]^result[i ] =  ( double )  i * coefficients[i];^140^^^^^130^143^result[i - 1] =  ( double )  i * coefficients[i];^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[P5_Replace_Variable]^result[i - 1] =  ( double )  n * coefficients[i];^140^^^^^130^143^result[i - 1] =  ( double )  i * coefficients[i];^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[P5_Replace_Variable]^result[i - 1] =  ( double )  i * out[i];^140^^^^^130^143^result[i - 1] =  ( double )  i * coefficients[i];^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[P8_Replace_Mix]^result[i - 3] =  ( double )  i * coefficients[i];^140^^^^^130^143^result[i - 1] =  ( double )  i * coefficients[i];^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[P11_Insert_Donor_Statement]^result = argument * result + coefficients[j];result[i - 1] =  ( double )  i * coefficients[i];^140^^^^^130^143^result[i - 1] =  ( double )  i * coefficients[i];^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[P2_Replace_Operator]^result[i  <=  1] =  ( double )  i * coefficients[i];^140^^^^^130^143^result[i - 1] =  ( double )  i * coefficients[i];^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[P3_Replace_Literal]^result[i - ] =  ( double )  i * coefficients[i];^140^^^^^130^143^result[i - 1] =  ( double )  i * coefficients[i];^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[P8_Replace_Mix]^result[i - 1 + 2] =  ( double )  i * coefficients[i];^140^^^^^130^143^result[i - 1] =  ( double )  i * coefficients[i];^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[P5_Replace_Variable]^return out;^142^^^^^130^143^return result;^[CLASS] PolynomialFunction  [METHOD] differentiate [RETURN_TYPE] double[]   double[] coefficients [VARIABLES] boolean  double[]  c  coefficients  out  result  long  serialVersionUID  int  i  n  
[P5_Replace_Variable]^return new PolynomialFunction ( differentiate ( result )  ) ;^151^^^^^150^152^return new PolynomialFunction ( differentiate ( coefficients )  ) ;^[CLASS] PolynomialFunction  [METHOD] polynomialDerivative [RETURN_TYPE] PolynomialFunction   [VARIABLES] double[]  c  coefficients  out  result  long  serialVersionUID  boolean  
[P7_Replace_Invocation]^return new PolynomialFunction ( polynomialDerivative ( coefficients )  ) ;^151^^^^^150^152^return new PolynomialFunction ( differentiate ( coefficients )  ) ;^[CLASS] PolynomialFunction  [METHOD] polynomialDerivative [RETURN_TYPE] PolynomialFunction   [VARIABLES] double[]  c  coefficients  out  result  long  serialVersionUID  boolean  
[P8_Replace_Mix]^return new PolynomialFunction ( polynomialDerivative ( result )  ) ;^151^^^^^150^152^return new PolynomialFunction ( differentiate ( coefficients )  ) ;^[CLASS] PolynomialFunction  [METHOD] polynomialDerivative [RETURN_TYPE] PolynomialFunction   [VARIABLES] double[]  c  coefficients  out  result  long  serialVersionUID  boolean  
[P14_Delete_Statement]^^151^152^^^^150^152^return new PolynomialFunction ( differentiate ( coefficients )  ) ; }^[CLASS] PolynomialFunction  [METHOD] polynomialDerivative [RETURN_TYPE] PolynomialFunction   [VARIABLES] double[]  c  coefficients  out  result  long  serialVersionUID  boolean  
[P14_Delete_Statement]^^160^^^^^159^161^return polynomialDerivative (  ) ;^[CLASS] PolynomialFunction  [METHOD] derivative [RETURN_TYPE] UnivariateRealFunction   [VARIABLES] double[]  c  coefficients  out  result  long  serialVersionUID  boolean  
