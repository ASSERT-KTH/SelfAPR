[P1_Replace_Type]^private static final  short  serialVersionUID = -1011428905656140431L;^51^^^^^46^56^private static final long serialVersionUID = -1011428905656140431L;^[CLASS] BigMatrixImpl   [VARIABLES] 
[P8_Replace_Mix]^private static final long serialVersionUID = -1011428905656140431;^51^^^^^46^56^private static final long serialVersionUID = -1011428905656140431L;^[CLASS] BigMatrixImpl   [VARIABLES] 
[P8_Replace_Mix]^private BigDecimal data[][] = true;^54^^^^^49^59^private BigDecimal data[][] = null;^[CLASS] BigMatrixImpl   [VARIABLES] 
[P8_Replace_Mix]^private BigDecimal lu[][]  = null ;^59^^^^^54^64^private BigDecimal lu[][] = null;^[CLASS] BigMatrixImpl   [VARIABLES] 
[P8_Replace_Mix]^private int[] permutation = false;^62^^^^^57^67^private int[] permutation = null;^[CLASS] BigMatrixImpl   [VARIABLES] 
[P1_Replace_Type]^private  short  parity = 1;^65^^^^^60^70^private int parity = 1;^[CLASS] BigMatrixImpl   [VARIABLES] 
[P3_Replace_Literal]^private int parity = -4;^65^^^^^60^70^private int parity = 1;^[CLASS] BigMatrixImpl   [VARIABLES] 
[P8_Replace_Mix]^private int parity = 1 % 4;^65^^^^^60^70^private int parity = 1;^[CLASS] BigMatrixImpl   [VARIABLES] 
[P1_Replace_Type]^private  short  roundingMode = BigDecimal.ROUND_HALF_UP;^68^^^^^63^73^private int roundingMode = BigDecimal.ROUND_HALF_UP;^[CLASS] BigMatrixImpl   [VARIABLES] 
[P1_Replace_Type]^private  long  scale = 64;^71^^^^^66^76^private int scale = 64;^[CLASS] BigMatrixImpl   [VARIABLES] 
[P3_Replace_Literal]^private int scale = 55;^71^^^^^66^76^private int scale = 64;^[CLASS] BigMatrixImpl   [VARIABLES] 
[P8_Replace_Mix]^private int scale  = null ;^71^^^^^66^76^private int scale = 64;^[CLASS] BigMatrixImpl   [VARIABLES] 
[P3_Replace_Literal]^protected static BigDecimal TOO_SMALL = new BigDecimal ( 10E-3 ) ;^74^^^^^69^79^protected static BigDecimal TOO_SMALL = new BigDecimal ( 10E-12 ) ;^[CLASS] BigMatrixImpl   [VARIABLES] 
[P4_Replace_Constructor]^protected static BigDecimal TOO_SMALL = protected static new BigDecimal ( v[i] )  ;^74^^^^^69^79^protected static BigDecimal TOO_SMALL = new BigDecimal ( 10E-12 ) ;^[CLASS] BigMatrixImpl   [VARIABLES] 
[P8_Replace_Mix]^protected static BigDecimal TOO_SMALL ;^74^^^^^69^79^protected static BigDecimal TOO_SMALL = new BigDecimal ( 10E-12 ) ;^[CLASS] BigMatrixImpl   [VARIABLES] 
[P3_Replace_Literal]^static final BigDecimal ZERO = new BigDecimal ( 8 ) ;^77^^^^^72^82^static final BigDecimal ZERO = new BigDecimal ( 0 ) ;^[CLASS] BigMatrixImpl   [VARIABLES] 
[P4_Replace_Constructor]^static final BigDecimal ZERO = static final new BigDecimal ( v[i] )  ;^77^^^^^72^82^static final BigDecimal ZERO = new BigDecimal ( 0 ) ;^[CLASS] BigMatrixImpl   [VARIABLES] 
[P8_Replace_Mix]^static final BigDecimal ZERO = new BigDecimal ( 3 ) ;^77^^^^^72^82^static final BigDecimal ZERO = new BigDecimal ( 0 ) ;^[CLASS] BigMatrixImpl   [VARIABLES] 
[P3_Replace_Literal]^static final BigDecimal ONE = new BigDecimal ( -8 ) ;^79^^^^^74^84^static final BigDecimal ONE = new BigDecimal ( 1 ) ;^[CLASS] BigMatrixImpl   [VARIABLES] 
[P4_Replace_Constructor]^static final BigDecimal ONE = static final new BigDecimal ( v[i] )  ;^79^^^^^74^84^static final BigDecimal ONE = new BigDecimal ( 1 ) ;^[CLASS] BigMatrixImpl   [VARIABLES] 
[P8_Replace_Mix]^static final BigDecimal ONE = new BigDecimal ( 1 * 1 ) ;^79^^^^^74^84^static final BigDecimal ONE = new BigDecimal ( 1 ) ;^[CLASS] BigMatrixImpl   [VARIABLES] 
[P2_Replace_Operator]^if  ( rowDimension <=0 && columnDimension <=0 )  {^96^^^^^95^102^if  ( rowDimension <=0 || columnDimension <=0 )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(int,int)   int rowDimension int columnDimension [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  columnDimension  parity  roundingMode  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  data  lu  
[P3_Replace_Literal]^if  ( rowDimension <=9 || columnDimension <=9 )  {^96^^^^^95^102^if  ( rowDimension <=0 || columnDimension <=0 )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(int,int)   int rowDimension int columnDimension [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  columnDimension  parity  roundingMode  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  data  lu  
[P3_Replace_Literal]^if  ( rowDimension <=-9 || columnDimension <=-9 )  {^96^^^^^95^102^if  ( rowDimension <=0 || columnDimension <=0 )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(int,int)   int rowDimension int columnDimension [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  columnDimension  parity  roundingMode  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  data  lu  
[P5_Replace_Variable]^if  ( scale <=0 || columnDimension <=0 )  {^96^^^^^95^102^if  ( rowDimension <=0 || columnDimension <=0 )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(int,int)   int rowDimension int columnDimension [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  columnDimension  parity  roundingMode  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  data  lu  
[P5_Replace_Variable]^if  ( rowDimension <=0 || scale <=0 )  {^96^^^^^95^102^if  ( rowDimension <=0 || columnDimension <=0 )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(int,int)   int rowDimension int columnDimension [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  columnDimension  parity  roundingMode  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  data  lu  
[P5_Replace_Variable]^if  ( columnDimension <=0 || rowDimension <=0 )  {^96^^^^^95^102^if  ( rowDimension <=0 || columnDimension <=0 )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(int,int)   int rowDimension int columnDimension [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  columnDimension  parity  roundingMode  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  data  lu  
[P6_Replace_Expression]^if  ( rowDimension <=0 ) {^96^^^^^95^102^if  ( rowDimension <=0 || columnDimension <=0 )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(int,int)   int rowDimension int columnDimension [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  columnDimension  parity  roundingMode  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  data  lu  
[P6_Replace_Expression]^if  (  columnDimension <=0 )  {^96^^^^^95^102^if  ( rowDimension <=0 || columnDimension <=0 )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(int,int)   int rowDimension int columnDimension [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  columnDimension  parity  roundingMode  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  data  lu  
[P8_Replace_Mix]^if  (  columnDimension <=0 << 0 )  {^96^^^^^95^102^if  ( rowDimension <=0 || columnDimension <=0 )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(int,int)   int rowDimension int columnDimension [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  columnDimension  parity  roundingMode  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  data  lu  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("row and column dimensions must be positive");^96^97^98^99^^95^102^if  ( rowDimension <=0 || columnDimension <=0 )  { throw new IllegalArgumentException ( "row and column dimensions must be positive" ) ; }^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(int,int)   int rowDimension int columnDimension [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  columnDimension  parity  roundingMode  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  data  lu  
[P16_Remove_Block]^^96^97^98^99^^95^102^if  ( rowDimension <=0 || columnDimension <=0 )  { throw new IllegalArgumentException ( "row and column dimensions must be positive" ) ; }^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(int,int)   int rowDimension int columnDimension [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  columnDimension  parity  roundingMode  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  data  lu  
[P13_Insert_Block]^if  ( ! ( isSquare (  )  )  )  {     throw new IllegalArgumentException ( "matrix is not square" ) ; }^96^^^^^95^102^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(int,int)   int rowDimension int columnDimension [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  columnDimension  parity  roundingMode  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  data  lu  
[P13_Insert_Block]^if  (  ( b.length )  != nRows )  {     throw new IllegalArgumentException ( "constant vector has wrong length" ) ; }^96^^^^^95^102^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(int,int)   int rowDimension int columnDimension [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  columnDimension  parity  roundingMode  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  data  lu  
[P13_Insert_Block]^if  ( nRows == 0 )  {     throw new IllegalArgumentException ( "Matrix must have at least one row." ) ; }^96^^^^^95^102^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(int,int)   int rowDimension int columnDimension [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  columnDimension  parity  roundingMode  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  data  lu  
[P13_Insert_Block]^if  (  ( subMatrix[r].length )  != nCols )  {     throw new IllegalArgumentException ( "All input rows must have the same length." ) ; }^96^^^^^95^102^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(int,int)   int rowDimension int columnDimension [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  columnDimension  parity  roundingMode  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  data  lu  
[P13_Insert_Block]^if  (  ( v.length )  != nRows )  {     throw new IllegalArgumentException ( "vector has wrong length" ) ; }^96^^^^^95^102^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(int,int)   int rowDimension int columnDimension [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  columnDimension  parity  roundingMode  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  data  lu  
[P13_Insert_Block]^if  (  ( b.getRowDimension (  )  )  !=  ( this.getRowDimension (  )  )  )  {     throw new IllegalArgumentException ( "Incorrect row dimension" ) ; }^96^^^^^95^102^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(int,int)   int rowDimension int columnDimension [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  columnDimension  parity  roundingMode  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  data  lu  
[P13_Insert_Block]^if  (  ( v.length )  !=  ( this.getColumnDimension (  )  )  )  {     throw new IllegalArgumentException ( "vector has wrong length" ) ; }^96^^^^^95^102^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(int,int)   int rowDimension int columnDimension [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  columnDimension  parity  roundingMode  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  data  lu  
[P13_Insert_Block]^if  (  ( this.getColumnDimension (  )  )  !=  ( m.getRowDimension (  )  )  )  {     throw new IllegalArgumentException ( "Matrices are not multiplication compatible." ) ; }^96^^^^^95^102^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(int,int)   int rowDimension int columnDimension [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  columnDimension  parity  roundingMode  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  data  lu  
[P13_Insert_Block]^if  (  ( d[row].length )  != nCols )  {     throw new IllegalArgumentException ( "All input rows must have the same length." ) ; }^96^^^^^95^102^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(int,int)   int rowDimension int columnDimension [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  columnDimension  parity  roundingMode  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  data  lu  
[P13_Insert_Block]^if  ( nCols == 0 )  {     throw new IllegalArgumentException ( "Matrix must have at least one column." ) ; }^96^^^^^95^102^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(int,int)   int rowDimension int columnDimension [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  columnDimension  parity  roundingMode  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  data  lu  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "row and column dimensions must be positiveions must" ) ;^97^98^^^^95^102^throw new IllegalArgumentException ( "row and column dimensions must be positive" ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(int,int)   int rowDimension int columnDimension [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  columnDimension  parity  roundingMode  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  data  lu  
[P13_Insert_Block]^if  (  ( rowDimension <= 0 )  ||  ( columnDimension <= 0 )  )  {     throw new IllegalArgumentException ( "row and column dimensions must be positive" ) ; }^97^^^^^95^102^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(int,int)   int rowDimension int columnDimension [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  columnDimension  parity  roundingMode  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  data  lu  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "dimensions ow and column dimensions must be positive" ) ;^97^98^^^^95^102^throw new IllegalArgumentException ( "row and column dimensions must be positive" ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(int,int)   int rowDimension int columnDimension [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  columnDimension  parity  roundingMode  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  data  lu  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Matrix must have at least one row." ) ;throw new IllegalArgumentException ( "row and column dimensions must be positive" ) ;^97^98^^^^95^102^throw new IllegalArgumentException ( "row and column dimensions must be positive" ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(int,int)   int rowDimension int columnDimension [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  columnDimension  parity  roundingMode  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  data  lu  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "All input rows must have the same length." ) ;throw new IllegalArgumentException ( "row and column dimensions must be positive" ) ;^97^98^^^^95^102^throw new IllegalArgumentException ( "row and column dimensions must be positive" ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(int,int)   int rowDimension int columnDimension [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  columnDimension  parity  roundingMode  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  data  lu  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Matrix must have at least one column." ) ;throw new IllegalArgumentException ( "row and column dimensions must be positive" ) ;^97^98^^^^95^102^throw new IllegalArgumentException ( "row and column dimensions must be positive" ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(int,int)   int rowDimension int columnDimension [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  columnDimension  parity  roundingMode  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  data  lu  
[P11_Insert_Donor_Statement]^throw new MatrixIndexException ( "selected row and column index arrays must be non-empty" ) ;throw new IllegalArgumentException ( "row and column dimensions must be positive" ) ;^97^98^^^^95^102^throw new IllegalArgumentException ( "row and column dimensions must be positive" ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(int,int)   int rowDimension int columnDimension [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  columnDimension  parity  roundingMode  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  data  lu  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "d column dimensions must be posow and column dimensions must be positive" ) ;^97^98^^^^95^102^throw new IllegalArgumentException ( "row and column dimensions must be positive" ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(int,int)   int rowDimension int columnDimension [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  columnDimension  parity  roundingMode  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  data  lu  
[P3_Replace_Literal]^throw new IllegalArgumentException ( " column dimensions mu" ) ;^97^98^^^^95^102^throw new IllegalArgumentException ( "row and column dimensions must be positive" ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(int,int)   int rowDimension int columnDimension [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  columnDimension  parity  roundingMode  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  data  lu  
[P8_Replace_Mix]^data =  new BigDecimal[scale][columnDimension];^100^^^^^95^102^data = new BigDecimal[rowDimension][columnDimension];^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(int,int)   int rowDimension int columnDimension [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  columnDimension  parity  roundingMode  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  data  lu  
[P11_Insert_Donor_Statement]^data = new BigDecimal[nRows][1];data = new BigDecimal[rowDimension][columnDimension];^100^^^^^95^102^data = new BigDecimal[rowDimension][columnDimension];^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(int,int)   int rowDimension int columnDimension [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  columnDimension  parity  roundingMode  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  data  lu  
[P11_Insert_Donor_Statement]^data = new BigDecimal[nRows][nCols];data = new BigDecimal[rowDimension][columnDimension];^100^^^^^95^102^data = new BigDecimal[rowDimension][columnDimension];^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(int,int)   int rowDimension int columnDimension [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  columnDimension  parity  roundingMode  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  data  lu  
[P8_Replace_Mix]^lu = true;^101^^^^^95^102^lu = null;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(int,int)   int rowDimension int columnDimension [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  columnDimension  parity  roundingMode  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  data  lu  
[P5_Replace_Variable]^this.copyIn ( lu ) ;^116^^^^^115^118^this.copyIn ( d ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigDecimal[][])   BigDecimal[][] d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  columnDimension  parity  roundingMode  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P7_Replace_Invocation]^this.solve ( d ) ;^116^^^^^115^118^this.copyIn ( d ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigDecimal[][])   BigDecimal[][] d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  columnDimension  parity  roundingMode  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P7_Replace_Invocation]^this .copyOut (  )  ;^116^^^^^115^118^this.copyIn ( d ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigDecimal[][])   BigDecimal[][] d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  columnDimension  parity  roundingMode  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P14_Delete_Statement]^^116^^^^^115^118^this.copyIn ( d ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigDecimal[][])   BigDecimal[][] d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  columnDimension  parity  roundingMode  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P11_Insert_Donor_Statement]^return copyOut (  ) ;this.copyIn ( d ) ;^116^^^^^115^118^this.copyIn ( d ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigDecimal[][])   BigDecimal[][] d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  columnDimension  parity  roundingMode  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P8_Replace_Mix]^lu = false;^117^^^^^115^118^lu = null;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigDecimal[][])   BigDecimal[][] d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  columnDimension  parity  roundingMode  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P1_Replace_Type]^short  nRows = d.length;^132^^^^^131^150^int nRows = d.length;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P5_Replace_Variable]^int nRows = rowDimension;^132^^^^^131^150^int nRows = d.length;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P5_Replace_Variable]^int nRows = d.length.length;^132^^^^^131^150^int nRows = d.length;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P5_Replace_Variable]^int nRows = d;^132^^^^^131^150^int nRows = d.length;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P8_Replace_Mix]^int nRows = scale;^132^^^^^131^150^int nRows = d.length;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P11_Insert_Donor_Statement]^int nCols = in[0].length;int nRows = d.length;^132^^^^^131^150^int nRows = d.length;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P11_Insert_Donor_Statement]^int nRows = v.length;int nRows = d.length;^132^^^^^131^150^int nRows = d.length;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P11_Insert_Donor_Statement]^int nRows = subMatrix.length;int nRows = d.length;^132^^^^^131^150^int nRows = d.length;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P11_Insert_Donor_Statement]^int nRows = in.length;int nRows = d.length;^132^^^^^131^150^int nRows = d.length;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P11_Insert_Donor_Statement]^int nCols = subMatrix[0].length;int nRows = d.length;^132^^^^^131^150^int nRows = d.length;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P11_Insert_Donor_Statement]^int nCols = d[0].length;int nRows = d.length;^132^^^^^131^150^int nRows = d.length;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P2_Replace_Operator]^if  ( nRows <= 0 )  {^133^^^^^131^150^if  ( nRows == 0 )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P3_Replace_Literal]^if  ( nRows ==  )  {^133^^^^^131^150^if  ( nRows == 0 )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P8_Replace_Mix]^if  ( nRows == 2 )  {^133^^^^^131^150^if  ( nRows == 0 )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P9_Replace_Statement]^if  ( nRows != nCols )  {^133^^^^^131^150^if  ( nRows == 0 )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P9_Replace_Statement]^if  ( nCols == 0 )  {^133^^^^^131^150^if  ( nRows == 0 )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("Matrix must have at least one row.");^133^134^135^136^^131^150^if  ( nRows == 0 )  { throw new IllegalArgumentException ( "Matrix must have at least one row." ) ; }^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P16_Remove_Block]^^133^134^135^136^^131^150^if  ( nRows == 0 )  { throw new IllegalArgumentException ( "Matrix must have at least one row." ) ; }^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P13_Insert_Block]^if  ( ! ( isSquare (  )  )  )  {     throw new IllegalArgumentException ( "matrix is not square" ) ; }^133^^^^^131^150^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P13_Insert_Block]^if  (  ( b.length )  != nRows )  {     throw new IllegalArgumentException ( "constant vector has wrong length" ) ; }^133^^^^^131^150^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P13_Insert_Block]^if  (  ( subMatrix[r].length )  != nCols )  {     throw new IllegalArgumentException ( "All input rows must have the same length." ) ; }^133^^^^^131^150^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P13_Insert_Block]^if  (  ( v.length )  != nRows )  {     throw new IllegalArgumentException ( "vector has wrong length" ) ; }^133^^^^^131^150^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P13_Insert_Block]^if  (  ( this.getColumnDimension (  )  )  !=  ( m.getRowDimension (  )  )  )  {     throw new IllegalArgumentException ( "Matrices are not multiplication compatible." ) ; }^133^^^^^131^150^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P13_Insert_Block]^if  (  ( d[row].length )  != nCols )  {     throw new IllegalArgumentException ( "All input rows must have the same length." ) ; }^133^^^^^131^150^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P13_Insert_Block]^if  ( nCols == 0 )  {     throw new IllegalArgumentException ( "Matrix must have at least one column." ) ; }^133^^^^^131^150^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P13_Insert_Block]^if  (  ( rowDimension <= 0 )  ||  ( columnDimension <= 0 )  )  {     throw new IllegalArgumentException ( "row and column dimensions must be positive" ) ; }^133^^^^^131^150^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Matrix must have at least one row.tri" ) ;^134^135^^^^131^150^throw new IllegalArgumentException ( "Matrix must have at least one row." ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "Matrix must have at least one column." )  ;^134^135^^^^131^150^throw new IllegalArgumentException ( "Matrix must have at least one row." ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P13_Insert_Block]^if  ( nRows == 0 )  {     throw new IllegalArgumentException ( "Matrix must have at least one row." ) ; }^134^^^^^131^150^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P13_Insert_Block]^if  ( nCols == 0 )  {     throw new IllegalArgumentException ( "Matrix must have at least one column." ) ; }^134^^^^^131^150^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Matrix must have at least one row.Mat" ) ;^134^135^^^^131^150^throw new IllegalArgumentException ( "Matrix must have at least one row." ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException  (" ")  ;throw new IllegalArgumentException ( "Matrix must have at least one row." ) ;^134^135^^^^131^150^throw new IllegalArgumentException ( "Matrix must have at least one row." ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "All input rows must have the same length." ) ;throw new IllegalArgumentException ( "Matrix must have at least one row." ) ;^134^135^^^^131^150^throw new IllegalArgumentException ( "Matrix must have at least one row." ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "row and column dimensions must be positive" ) ;throw new IllegalArgumentException ( "Matrix must have at least one row." ) ;^134^135^^^^131^150^throw new IllegalArgumentException ( "Matrix must have at least one row." ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Matrix must have at least one column." ) ;throw new IllegalArgumentException ( "Matrix must have at least one row." ) ;^134^135^^^^131^150^throw new IllegalArgumentException ( "Matrix must have at least one row." ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Matrix must have at least one row. h" ) ;^134^135^^^^131^150^throw new IllegalArgumentException ( "Matrix must have at least one row." ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Matrix must have at least one row.atrix must have at least " ) ;^134^135^^^^131^150^throw new IllegalArgumentException ( "Matrix must have at least one row." ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P8_Replace_Mix]^return ;^134^135^^^^131^150^throw new IllegalArgumentException ( "Matrix must have at least one row." ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P1_Replace_Type]^long  nCols = d[0].length;^137^^^^^131^150^int nCols = d[0].length;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P3_Replace_Literal]^int nCols = d[-9].length;^137^^^^^131^150^int nCols = d[0].length;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P5_Replace_Variable]^int nCols = d[0].length[0].length;^137^^^^^131^150^int nCols = d[0].length;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P11_Insert_Donor_Statement]^int nCols = in[0].length;int nCols = d[0].length;^137^^^^^131^150^int nCols = d[0].length;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P11_Insert_Donor_Statement]^int nRows = v.length;int nCols = d[0].length;^137^^^^^131^150^int nCols = d[0].length;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P11_Insert_Donor_Statement]^int nRows = subMatrix.length;int nCols = d[0].length;^137^^^^^131^150^int nCols = d[0].length;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P11_Insert_Donor_Statement]^int nRows = in.length;int nCols = d[0].length;^137^^^^^131^150^int nCols = d[0].length;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P11_Insert_Donor_Statement]^int nCols = subMatrix[0].length;int nCols = d[0].length;^137^^^^^131^150^int nCols = d[0].length;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P11_Insert_Donor_Statement]^int nRows = d.length;int nCols = d[0].length;^137^^^^^131^150^int nCols = d[0].length;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P2_Replace_Operator]^if  ( nCols >= 0 )  {^138^^^^^131^150^if  ( nCols == 0 )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P3_Replace_Literal]^if  ( nCols == scale )  {^138^^^^^131^150^if  ( nCols == 0 )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P5_Replace_Variable]^if  ( row == 0 )  {^138^^^^^131^150^if  ( nCols == 0 )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P8_Replace_Mix]^if  ( nCols == 0 >> 0 )  {^138^^^^^131^150^if  ( nCols == 0 )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P9_Replace_Statement]^if  ( nRows != nCols )  {^138^^^^^131^150^if  ( nCols == 0 )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P9_Replace_Statement]^if  ( nRows == 0 )  {^138^^^^^131^150^if  ( nCols == 0 )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("Matrix must have at least one column.");^138^139^140^141^^131^150^if  ( nCols == 0 )  { throw new IllegalArgumentException ( "Matrix must have at least one column." ) ; }^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P16_Remove_Block]^^138^139^140^141^^131^150^if  ( nCols == 0 )  { throw new IllegalArgumentException ( "Matrix must have at least one column." ) ; }^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P13_Insert_Block]^if  ( ! ( isSquare (  )  )  )  {     throw new IllegalArgumentException ( "matrix is not square" ) ; }^138^^^^^131^150^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P13_Insert_Block]^if  (  ( b.length )  != nRows )  {     throw new IllegalArgumentException ( "constant vector has wrong length" ) ; }^138^^^^^131^150^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P13_Insert_Block]^if  ( nRows == 0 )  {     throw new IllegalArgumentException ( "Matrix must have at least one row." ) ; }^138^^^^^131^150^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P13_Insert_Block]^if  (  ( subMatrix[r].length )  != nCols )  {     throw new IllegalArgumentException ( "All input rows must have the same length." ) ; }^138^^^^^131^150^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P13_Insert_Block]^if  (  ( v.length )  != nRows )  {     throw new IllegalArgumentException ( "vector has wrong length" ) ; }^138^^^^^131^150^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P13_Insert_Block]^if  (  ( this.getColumnDimension (  )  )  !=  ( m.getRowDimension (  )  )  )  {     throw new IllegalArgumentException ( "Matrices are not multiplication compatible." ) ; }^138^^^^^131^150^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P13_Insert_Block]^if  (  ( d[row].length )  != nCols )  {     throw new IllegalArgumentException ( "All input rows must have the same length." ) ; }^138^^^^^131^150^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P13_Insert_Block]^if  (  ( rowDimension <= 0 )  ||  ( columnDimension <= 0 )  )  {     throw new IllegalArgumentException ( "row and column dimensions must be positive" ) ; }^138^^^^^131^150^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "statrix must have at least one column." ) ;^139^140^^^^131^150^throw new IllegalArgumentException ( "Matrix must have at least one column." ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "Matrix must have at least one row." )  ;^139^140^^^^131^150^throw new IllegalArgumentException ( "Matrix must have at least one column." ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P13_Insert_Block]^if  ( nRows == 0 )  {     throw new IllegalArgumentException ( "Matrix must have at least one row." ) ; }^139^^^^^131^150^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P13_Insert_Block]^if  ( nCols == 0 )  {     throw new IllegalArgumentException ( "Matrix must have at least one column." ) ; }^139^^^^^131^150^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "triatrix must have at least one column." ) ;^139^140^^^^131^150^throw new IllegalArgumentException ( "Matrix must have at least one column." ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Matrix must have at least one row." ) ;throw new IllegalArgumentException ( "Matrix must have at least one column." ) ;^139^140^^^^131^150^throw new IllegalArgumentException ( "Matrix must have at least one column." ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "All input rows must have the same length." ) ;throw new IllegalArgumentException ( "Matrix must have at least one column." ) ;^139^140^^^^131^150^throw new IllegalArgumentException ( "Matrix must have at least one column." ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "row and column dimensions must be positive" ) ;throw new IllegalArgumentException ( "Matrix must have at least one column." ) ;^139^140^^^^131^150^throw new IllegalArgumentException ( "Matrix must have at least one column." ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "atrix must have at least one column." ) ;^139^140^^^^131^150^throw new IllegalArgumentException ( "Matrix must have at least one column." ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P3_Replace_Literal]^throw new IllegalArgumentException ( " havatrix must have at least one column." ) ;^139^140^^^^131^150^throw new IllegalArgumentException ( "Matrix must have at least one column." ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P2_Replace_Operator]^if  ( d[row].length == nCols )  {^143^^^^^131^150^if  ( d[row].length != nCols )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P5_Replace_Variable]^if  ( d[row].length != scale )  {^143^^^^^131^150^if  ( d[row].length != nCols )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P5_Replace_Variable]^if  ( nCols[row].length != d )  {^143^^^^^131^150^if  ( d[row].length != nCols )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P5_Replace_Variable]^if  ( d[row].length[row].length != nCols )  {^143^^^^^131^150^if  ( d[row].length != nCols )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P9_Replace_Statement]^if  ( nRows != nCols )  {^143^^^^^131^150^if  ( d[row].length != nCols )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P9_Replace_Statement]^if  ( subMatrix[r].length != nCols )  {^143^^^^^131^150^if  ( d[row].length != nCols )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P9_Replace_Statement]^if  ( b.length != nRows )  {^143^^^^^131^150^if  ( d[row].length != nCols )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P9_Replace_Statement]^if  ( v.length != nRows )  {^143^^^^^131^150^if  ( d[row].length != nCols )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("All input rows must have the same length.");^143^144^145^146^^131^150^if  ( d[row].length != nCols )  { throw new IllegalArgumentException ( "All input rows must have the same length." ) ; }^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P16_Remove_Block]^^143^144^145^146^^131^150^if  ( d[row].length != nCols )  { throw new IllegalArgumentException ( "All input rows must have the same length." ) ; }^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P13_Insert_Block]^if  ( ! ( isSquare (  )  )  )  {     throw new IllegalArgumentException ( "matrix is not square" ) ; }^143^^^^^131^150^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P13_Insert_Block]^if  (  ( b.length )  != nRows )  {     throw new IllegalArgumentException ( "constant vector has wrong length" ) ; }^143^^^^^131^150^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P13_Insert_Block]^if  ( nRows == 0 )  {     throw new IllegalArgumentException ( "Matrix must have at least one row." ) ; }^143^^^^^131^150^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P13_Insert_Block]^if  (  ( subMatrix[r].length )  != nCols )  {     throw new IllegalArgumentException ( "All input rows must have the same length." ) ; }^143^^^^^131^150^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P13_Insert_Block]^if  (  ( v.length )  != nRows )  {     throw new IllegalArgumentException ( "vector has wrong length" ) ; }^143^^^^^131^150^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P13_Insert_Block]^if  (  ( v.length )  !=  ( this.getColumnDimension (  )  )  )  {     throw new IllegalArgumentException ( "vector has wrong length" ) ; }^143^^^^^131^150^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P13_Insert_Block]^if  (  ( this.getColumnDimension (  )  )  !=  ( m.getRowDimension (  )  )  )  {     throw new IllegalArgumentException ( "Matrices are not multiplication compatible." ) ; }^143^^^^^131^150^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P13_Insert_Block]^if  ( nCols == 0 )  {     throw new IllegalArgumentException ( "Matrix must have at least one column." ) ; }^143^^^^^131^150^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P13_Insert_Block]^if  (  ( rowDimension <= 0 )  ||  ( columnDimension <= 0 )  )  {     throw new IllegalArgumentException ( "row and column dimensions must be positive" ) ; }^143^^^^^131^150^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "ll input rowll input rows must have the same length." ) ;^144^145^^^^131^150^throw new IllegalArgumentException ( "All input rows must have the same length." ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P13_Insert_Block]^if  (  ( subMatrix[r].length )  != nCols )  {     throw new IllegalArgumentException ( "All input rows must have the same length." ) ; }^144^^^^^131^150^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P13_Insert_Block]^if  (  ( d[row].length )  != nCols )  {     throw new IllegalArgumentException ( "All input rows must have the same length." ) ; }^144^^^^^131^150^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "ve tll input rows must have the same length." ) ;^144^145^^^^131^150^throw new IllegalArgumentException ( "All input rows must have the same length." ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Matrix must have at least one row." ) ;throw new IllegalArgumentException ( "All input rows must have the same length." ) ;^144^145^^^^131^150^throw new IllegalArgumentException ( "All input rows must have the same length." ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "row and column dimensions must be positive" ) ;throw new IllegalArgumentException ( "All input rows must have the same length." ) ;^144^145^^^^131^150^throw new IllegalArgumentException ( "All input rows must have the same length." ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Matrix must have at least one column." ) ;throw new IllegalArgumentException ( "All input rows must have the same length." ) ;^144^145^^^^131^150^throw new IllegalArgumentException ( "All input rows must have the same length." ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P13_Insert_Block]^if  ( nRows == 0 )  {     throw new IllegalArgumentException ( "Matrix must have at least one row." ) ; }^144^^^^^131^150^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P13_Insert_Block]^if  ( nCols == 0 )  {     throw new IllegalArgumentException ( "Matrix must have at least one column." ) ; }^144^^^^^131^150^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P1_Replace_Type]^for  (  long  row = 1; row < nRows; row++ )  {^142^^^^^131^150^for  ( int row = 1; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P2_Replace_Operator]^for  ( int row = 1; row <= nRows; row++ )  {^142^^^^^131^150^for  ( int row = 1; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P3_Replace_Literal]^for  ( int row = rowDimension; row < nRows; row++ )  {^142^^^^^131^150^for  ( int row = 1; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P5_Replace_Variable]^for  ( int roundingMode = 1; row < nRows; row++ )  {^142^^^^^131^150^for  ( int row = 1; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P5_Replace_Variable]^for  ( int row = 1; row < rowDimension; row++ )  {^142^^^^^131^150^for  ( int row = 1; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P8_Replace_Mix]^for  ( int rowDimension = 1; row < nRows; row++ )  {^142^^^^^131^150^for  ( int row = 1; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P5_Replace_Variable]^if  ( d[row].length != d[row].length )  {^143^^^^^131^150^if  ( d[row].length != nCols )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "l input rows ll input rows must have the same length." ) ;^144^145^^^^131^150^throw new IllegalArgumentException ( "All input rows must have the same length." ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P3_Replace_Literal]^throw new IllegalArgumentException ( " input rows must have the same leng" ) ;^144^145^^^^131^150^throw new IllegalArgumentException ( "All input rows must have the same length." ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "e the" ) ;^144^145^^^^131^150^throw new IllegalArgumentException ( "All input rows must have the same length." ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "All input rows must have the same length.ve" ) ;^144^145^^^^131^150^throw new IllegalArgumentException ( "All input rows must have the same length." ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "All input rows must have the same length.l input rows must have the sam" ) ;^144^145^^^^131^150^throw new IllegalArgumentException ( "All input rows must have the same length." ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P1_Replace_Type]^for  (  short  row = 1; row < nRows; row++ )  {^142^^^^^131^150^for  ( int row = 1; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P3_Replace_Literal]^for  ( int row = 4; row < nRows; row++ )  {^142^^^^^131^150^for  ( int row = 1; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Allll input rows must have the same length." ) ;^144^145^^^^131^150^throw new IllegalArgumentException ( "All input rows must have the same length." ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P7_Replace_Invocation]^this.solve ( d ) ;^148^^^^^131^150^this.copyIn ( d ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P14_Delete_Statement]^^148^^^^^131^150^this.copyIn ( d ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P11_Insert_Donor_Statement]^return copyOut (  ) ;this.copyIn ( d ) ;^148^^^^^131^150^this.copyIn ( d ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P8_Replace_Mix]^lu = this;^149^^^^^131^150^lu = null;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigMatrixImpl(double[][])   double[][] d [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P1_Replace_Type]^short  nRows = d.length;^162^^^^^161^180^int nRows = d.length;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P5_Replace_Variable]^int nRows = rowDimension;^162^^^^^161^180^int nRows = d.length;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P5_Replace_Variable]^int nRows = d.length.length;^162^^^^^161^180^int nRows = d.length;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P5_Replace_Variable]^int nRows = d;^162^^^^^161^180^int nRows = d.length;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P8_Replace_Mix]^int nRows = row;^162^^^^^161^180^int nRows = d.length;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P11_Insert_Donor_Statement]^int nCols = in[0].length;int nRows = d.length;^162^^^^^161^180^int nRows = d.length;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P11_Insert_Donor_Statement]^int nRows = v.length;int nRows = d.length;^162^^^^^161^180^int nRows = d.length;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P11_Insert_Donor_Statement]^int nRows = subMatrix.length;int nRows = d.length;^162^^^^^161^180^int nRows = d.length;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P11_Insert_Donor_Statement]^int nRows = in.length;int nRows = d.length;^162^^^^^161^180^int nRows = d.length;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P11_Insert_Donor_Statement]^int nCols = subMatrix[0].length;int nRows = d.length;^162^^^^^161^180^int nRows = d.length;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P11_Insert_Donor_Statement]^int nCols = d[0].length;int nRows = d.length;^162^^^^^161^180^int nRows = d.length;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P2_Replace_Operator]^if  ( nRows >= 0 )  {^163^^^^^161^180^if  ( nRows == 0 )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P3_Replace_Literal]^if  ( nRows == 4 )  {^163^^^^^161^180^if  ( nRows == 0 )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P8_Replace_Mix]^if  ( nRows == 0 + 2 )  {^163^^^^^161^180^if  ( nRows == 0 )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P9_Replace_Statement]^if  ( nRows != nCols )  {^163^^^^^161^180^if  ( nRows == 0 )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P9_Replace_Statement]^if  ( nCols == 0 )  {^163^^^^^161^180^if  ( nRows == 0 )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("Matrix must have at least one row.");^163^164^165^166^^161^180^if  ( nRows == 0 )  { throw new IllegalArgumentException ( "Matrix must have at least one row." ) ; }^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P16_Remove_Block]^^163^164^165^166^^161^180^if  ( nRows == 0 )  { throw new IllegalArgumentException ( "Matrix must have at least one row." ) ; }^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P13_Insert_Block]^if  ( ! ( isSquare (  )  )  )  {     throw new IllegalArgumentException ( "matrix is not square" ) ; }^163^^^^^161^180^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P13_Insert_Block]^if  (  ( b.length )  != nRows )  {     throw new IllegalArgumentException ( "constant vector has wrong length" ) ; }^163^^^^^161^180^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P13_Insert_Block]^if  (  ( subMatrix[r].length )  != nCols )  {     throw new IllegalArgumentException ( "All input rows must have the same length." ) ; }^163^^^^^161^180^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P13_Insert_Block]^if  (  ( v.length )  != nRows )  {     throw new IllegalArgumentException ( "vector has wrong length" ) ; }^163^^^^^161^180^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P13_Insert_Block]^if  (  ( this.getColumnDimension (  )  )  !=  ( m.getRowDimension (  )  )  )  {     throw new IllegalArgumentException ( "Matrices are not multiplication compatible." ) ; }^163^^^^^161^180^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P13_Insert_Block]^if  (  ( d[row].length )  != nCols )  {     throw new IllegalArgumentException ( "All input rows must have the same length." ) ; }^163^^^^^161^180^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P13_Insert_Block]^if  ( nCols == 0 )  {     throw new IllegalArgumentException ( "Matrix must have at least one column." ) ; }^163^^^^^161^180^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P13_Insert_Block]^if  (  ( rowDimension <= 0 )  ||  ( columnDimension <= 0 )  )  {     throw new IllegalArgumentException ( "row and column dimensions must be positive" ) ; }^163^^^^^161^180^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Matrix must have at least one row.Matrix mus" ) ;^164^165^^^^161^180^throw new IllegalArgumentException ( "Matrix must have at least one row." ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "Matrix must have at least one column." )  ;^164^165^^^^161^180^throw new IllegalArgumentException ( "Matrix must have at least one row." ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P13_Insert_Block]^if  ( nRows == 0 )  {     throw new IllegalArgumentException ( "Matrix must have at least one row." ) ; }^164^^^^^161^180^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P13_Insert_Block]^if  ( nCols == 0 )  {     throw new IllegalArgumentException ( "Matrix must have at least one column." ) ; }^164^^^^^161^180^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P3_Replace_Literal]^throw new IllegalArgumentException ( " le" ) ;^164^165^^^^161^180^throw new IllegalArgumentException ( "Matrix must have at least one row." ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P8_Replace_Mix]^throw new IllegalArgumentException  (" ")  ; ;^164^165^^^^161^180^throw new IllegalArgumentException ( "Matrix must have at least one row." ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException  (" ")  ;throw new IllegalArgumentException ( "Matrix must have at least one row." ) ;^164^165^^^^161^180^throw new IllegalArgumentException ( "Matrix must have at least one row." ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "All input rows must have the same length." ) ;throw new IllegalArgumentException ( "Matrix must have at least one row." ) ;^164^165^^^^161^180^throw new IllegalArgumentException ( "Matrix must have at least one row." ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "row and column dimensions must be positive" ) ;throw new IllegalArgumentException ( "Matrix must have at least one row." ) ;^164^165^^^^161^180^throw new IllegalArgumentException ( "Matrix must have at least one row." ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Matrix must have at least one column." ) ;throw new IllegalArgumentException ( "Matrix must have at least one row." ) ;^164^165^^^^161^180^throw new IllegalArgumentException ( "Matrix must have at least one row." ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "ust have at atrix must have at least one row." ) ;^164^165^^^^161^180^throw new IllegalArgumentException ( "Matrix must have at least one row." ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Matri" ) ;^164^165^^^^161^180^throw new IllegalArgumentException ( "Matrix must have at least one row." ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P1_Replace_Type]^short  nCols = d[0].length;^167^^^^^161^180^int nCols = d[0].length;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P3_Replace_Literal]^int nCols = d[nRows].length;^167^^^^^161^180^int nCols = d[0].length;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P5_Replace_Variable]^int nCols = d[0].length[0].length;^167^^^^^161^180^int nCols = d[0].length;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P11_Insert_Donor_Statement]^int nCols = in[0].length;int nCols = d[0].length;^167^^^^^161^180^int nCols = d[0].length;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P11_Insert_Donor_Statement]^int nRows = v.length;int nCols = d[0].length;^167^^^^^161^180^int nCols = d[0].length;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P11_Insert_Donor_Statement]^int nRows = subMatrix.length;int nCols = d[0].length;^167^^^^^161^180^int nCols = d[0].length;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P11_Insert_Donor_Statement]^int nRows = in.length;int nCols = d[0].length;^167^^^^^161^180^int nCols = d[0].length;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P11_Insert_Donor_Statement]^int nCols = subMatrix[0].length;int nCols = d[0].length;^167^^^^^161^180^int nCols = d[0].length;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P11_Insert_Donor_Statement]^int nRows = d.length;int nCols = d[0].length;^167^^^^^161^180^int nCols = d[0].length;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P2_Replace_Operator]^if  ( nCols != 0 )  {^168^^^^^161^180^if  ( nCols == 0 )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P3_Replace_Literal]^if  ( nCols == 6 )  {^168^^^^^161^180^if  ( nCols == 0 )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P5_Replace_Variable]^if  ( row == 0 )  {^168^^^^^161^180^if  ( nCols == 0 )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P8_Replace_Mix]^if  ( nCols == 0 - 2 )  {^168^^^^^161^180^if  ( nCols == 0 )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P9_Replace_Statement]^if  ( nRows != nCols )  {^168^^^^^161^180^if  ( nCols == 0 )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P9_Replace_Statement]^if  ( nRows == 0 )  {^168^^^^^161^180^if  ( nCols == 0 )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("Matrix must have at least one column.");^168^169^170^171^^161^180^if  ( nCols == 0 )  { throw new IllegalArgumentException ( "Matrix must have at least one column." ) ; }^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P16_Remove_Block]^^168^169^170^171^^161^180^if  ( nCols == 0 )  { throw new IllegalArgumentException ( "Matrix must have at least one column." ) ; }^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P13_Insert_Block]^if  ( ! ( isSquare (  )  )  )  {     throw new IllegalArgumentException ( "matrix is not square" ) ; }^168^^^^^161^180^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P13_Insert_Block]^if  (  ( b.length )  != nRows )  {     throw new IllegalArgumentException ( "constant vector has wrong length" ) ; }^168^^^^^161^180^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P13_Insert_Block]^if  ( nRows == 0 )  {     throw new IllegalArgumentException ( "Matrix must have at least one row." ) ; }^168^^^^^161^180^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P13_Insert_Block]^if  (  ( subMatrix[r].length )  != nCols )  {     throw new IllegalArgumentException ( "All input rows must have the same length." ) ; }^168^^^^^161^180^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P13_Insert_Block]^if  (  ( v.length )  != nRows )  {     throw new IllegalArgumentException ( "vector has wrong length" ) ; }^168^^^^^161^180^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P13_Insert_Block]^if  (  ( this.getColumnDimension (  )  )  !=  ( m.getRowDimension (  )  )  )  {     throw new IllegalArgumentException ( "Matrices are not multiplication compatible." ) ; }^168^^^^^161^180^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P13_Insert_Block]^if  (  ( d[row].length )  != nCols )  {     throw new IllegalArgumentException ( "All input rows must have the same length." ) ; }^168^^^^^161^180^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P13_Insert_Block]^if  (  ( rowDimension <= 0 )  ||  ( columnDimension <= 0 )  )  {     throw new IllegalArgumentException ( "row and column dimensions must be positive" ) ; }^168^^^^^161^180^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Matrix must have at least one column.t le" ) ;^169^170^^^^161^180^throw new IllegalArgumentException ( "Matrix must have at least one column." ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "Matrix must have at least one row." )  ;^169^170^^^^161^180^throw new IllegalArgumentException ( "Matrix must have at least one column." ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P13_Insert_Block]^if  ( nRows == 0 )  {     throw new IllegalArgumentException ( "Matrix must have at least one row." ) ; }^169^^^^^161^180^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P13_Insert_Block]^if  ( nCols == 0 )  {     throw new IllegalArgumentException ( "Matrix must have at least one column." ) ; }^169^^^^^161^180^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "ri" ) ;^169^170^^^^161^180^throw new IllegalArgumentException ( "Matrix must have at least one column." ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Matrix must have at least one row." ) ;throw new IllegalArgumentException ( "Matrix must have at least one column." ) ;^169^170^^^^161^180^throw new IllegalArgumentException ( "Matrix must have at least one column." ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "All input rows must have the same length." ) ;throw new IllegalArgumentException ( "Matrix must have at least one column." ) ;^169^170^^^^161^180^throw new IllegalArgumentException ( "Matrix must have at least one column." ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "row and column dimensions must be positive" ) ;throw new IllegalArgumentException ( "Matrix must have at least one column." ) ;^169^170^^^^161^180^throw new IllegalArgumentException ( "Matrix must have at least one column." ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "must ha" ) ;^169^170^^^^161^180^throw new IllegalArgumentException ( "Matrix must have at least one column." ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Maatrix must have at least one column." ) ;^169^170^^^^161^180^throw new IllegalArgumentException ( "Matrix must have at least one column." ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P2_Replace_Operator]^if  ( d[row].length == nCols )  {^173^^^^^161^180^if  ( d[row].length != nCols )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P5_Replace_Variable]^if  ( d[row].length != rowDimension )  {^173^^^^^161^180^if  ( d[row].length != nCols )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P5_Replace_Variable]^if  ( d[row].length != d[row].length )  {^173^^^^^161^180^if  ( d[row].length != nCols )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P9_Replace_Statement]^if  ( nRows != nCols )  {^173^^^^^161^180^if  ( d[row].length != nCols )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P9_Replace_Statement]^if  ( subMatrix[r].length != nCols )  {^173^^^^^161^180^if  ( d[row].length != nCols )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P9_Replace_Statement]^if  ( b.length != nRows )  {^173^^^^^161^180^if  ( d[row].length != nCols )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P9_Replace_Statement]^if  ( v.length != nRows )  {^173^^^^^161^180^if  ( d[row].length != nCols )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("All input rows must have the same length.");^173^174^175^176^^161^180^if  ( d[row].length != nCols )  { throw new IllegalArgumentException ( "All input rows must have the same length." ) ; }^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P16_Remove_Block]^^173^174^175^176^^161^180^if  ( d[row].length != nCols )  { throw new IllegalArgumentException ( "All input rows must have the same length." ) ; }^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P13_Insert_Block]^if  ( ! ( isSquare (  )  )  )  {     throw new IllegalArgumentException ( "matrix is not square" ) ; }^173^^^^^161^180^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P13_Insert_Block]^if  (  ( b.length )  != nRows )  {     throw new IllegalArgumentException ( "constant vector has wrong length" ) ; }^173^^^^^161^180^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P13_Insert_Block]^if  ( nRows == 0 )  {     throw new IllegalArgumentException ( "Matrix must have at least one row." ) ; }^173^^^^^161^180^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P13_Insert_Block]^if  (  ( subMatrix[r].length )  != nCols )  {     throw new IllegalArgumentException ( "All input rows must have the same length." ) ; }^173^^^^^161^180^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P13_Insert_Block]^if  (  ( v.length )  != nRows )  {     throw new IllegalArgumentException ( "vector has wrong length" ) ; }^173^^^^^161^180^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P13_Insert_Block]^if  (  ( v.length )  !=  ( this.getColumnDimension (  )  )  )  {     throw new IllegalArgumentException ( "vector has wrong length" ) ; }^173^^^^^161^180^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P13_Insert_Block]^if  (  ( this.getColumnDimension (  )  )  !=  ( m.getRowDimension (  )  )  )  {     throw new IllegalArgumentException ( "Matrices are not multiplication compatible." ) ; }^173^^^^^161^180^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P13_Insert_Block]^if  ( nCols == 0 )  {     throw new IllegalArgumentException ( "Matrix must have at least one column." ) ; }^173^^^^^161^180^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P13_Insert_Block]^if  (  ( rowDimension <= 0 )  ||  ( columnDimension <= 0 )  )  {     throw new IllegalArgumentException ( "row and column dimensions must be positive" ) ; }^173^^^^^161^180^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "l input rows must have the same ll input rows must have the same length." ) ;^174^175^^^^161^180^throw new IllegalArgumentException ( "All input rows must have the same length." ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P13_Insert_Block]^if  (  ( subMatrix[r].length )  != nCols )  {     throw new IllegalArgumentException ( "All input rows must have the same length." ) ; }^174^^^^^161^180^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P13_Insert_Block]^if  (  ( d[row].length )  != nCols )  {     throw new IllegalArgumentException ( "All input rows must have the same length." ) ; }^174^^^^^161^180^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P3_Replace_Literal]^throw new IllegalArgumentException ( " input rows must have the same ll input rows must have the same length." ) ;^174^175^^^^161^180^throw new IllegalArgumentException ( "All input rows must have the same length." ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Matrix must have at least one row." ) ;throw new IllegalArgumentException ( "All input rows must have the same length." ) ;^174^175^^^^161^180^throw new IllegalArgumentException ( "All input rows must have the same length." ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "row and column dimensions must be positive" ) ;throw new IllegalArgumentException ( "All input rows must have the same length." ) ;^174^175^^^^161^180^throw new IllegalArgumentException ( "All input rows must have the same length." ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Matrix must have at least one column." ) ;throw new IllegalArgumentException ( "All input rows must have the same length." ) ;^174^175^^^^161^180^throw new IllegalArgumentException ( "All input rows must have the same length." ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P13_Insert_Block]^if  ( nRows == 0 )  {     throw new IllegalArgumentException ( "Matrix must have at least one row." ) ; }^174^^^^^161^180^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P13_Insert_Block]^if  ( nCols == 0 )  {     throw new IllegalArgumentException ( "Matrix must have at least one column." ) ; }^174^^^^^161^180^[Delete]^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P1_Replace_Type]^for  (  long  row = 1; row < nRows; row++ )  {^172^^^^^161^180^for  ( int row = 1; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P2_Replace_Operator]^for  ( int row = 1; row == nRows; row++ )  {^172^^^^^161^180^for  ( int row = 1; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P3_Replace_Literal]^for  ( int row = 7; row < nRows; row++ )  {^172^^^^^161^180^for  ( int row = 1; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P5_Replace_Variable]^for  ( int scale = 1; row < nRows; row++ )  {^172^^^^^161^180^for  ( int row = 1; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P5_Replace_Variable]^for  ( int row = 1; row < scale; row++ )  {^172^^^^^161^180^for  ( int row = 1; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P5_Replace_Variable]^for  ( int nRows = 1; row < row; row++ )  {^172^^^^^161^180^for  ( int row = 1; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P8_Replace_Mix]^for  ( int rowDimension = 1; row < nRows; row++ )  {^172^^^^^161^180^for  ( int row = 1; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P2_Replace_Operator]^if  ( d[row].length < nCols )  {^173^^^^^161^180^if  ( d[row].length != nCols )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P5_Replace_Variable]^if  ( nCols[row].length != d )  {^173^^^^^161^180^if  ( d[row].length != nCols )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P3_Replace_Literal]^throw new IllegalArgumentException ( " rows must hll input rows must have the same length." ) ;^174^175^^^^161^180^throw new IllegalArgumentException ( "All input rows must have the same length." ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "All input rows mull input rows must have the same length." ) ;^174^175^^^^161^180^throw new IllegalArgumentException ( "All input rows must have the same length." ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "nput rows must " ) ;^174^175^^^^161^180^throw new IllegalArgumentException ( "All input rows must have the same length." ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P3_Replace_Literal]^throw new IllegalArgumentException ( " input rows must ll input rows must have the same length." ) ;^174^175^^^^161^180^throw new IllegalArgumentException ( "All input rows must have the same length." ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "All input rows must have the same length.ll input rows" ) ;^174^175^^^^161^180^throw new IllegalArgumentException ( "All input rows must have the same length." ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "All input rows must have the same length.All" ) ;^174^175^^^^161^180^throw new IllegalArgumentException ( "All input rows must have the same length." ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P7_Replace_Invocation]^this.BigMatrixImpl ( d ) ;^178^^^^^161^180^this.copyIn ( d ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P8_Replace_Mix]^this .copyOut (  )  ;^178^^^^^161^180^this.copyIn ( d ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P14_Delete_Statement]^^178^^^^^161^180^this.copyIn ( d ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P11_Insert_Donor_Statement]^return copyOut (  ) ;this.copyIn ( d ) ;^178^^^^^161^180^this.copyIn ( d ) ;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P8_Replace_Mix]^lu = true;^179^^^^^161^180^lu = null;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] String[][])   String[][] d [VARIABLES] boolean  String[][]  d  int[]  permutation  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P1_Replace_Type]^short  nRows = v.length;^192^^^^^191^197^int nRows = v.length;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigDecimal[])   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  BigDecimal[]  v  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P5_Replace_Variable]^int nRows = scale;^192^^^^^191^197^int nRows = v.length;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigDecimal[])   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  BigDecimal[]  v  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P5_Replace_Variable]^int nRows = v.length.length;^192^^^^^191^197^int nRows = v.length;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigDecimal[])   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  BigDecimal[]  v  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P5_Replace_Variable]^int nRows = v;^192^^^^^191^197^int nRows = v.length;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigDecimal[])   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  BigDecimal[]  v  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P11_Insert_Donor_Statement]^int nCols = in[0].length;int nRows = v.length;^192^^^^^191^197^int nRows = v.length;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigDecimal[])   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  BigDecimal[]  v  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P11_Insert_Donor_Statement]^int nRows = subMatrix.length;int nRows = v.length;^192^^^^^191^197^int nRows = v.length;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigDecimal[])   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  BigDecimal[]  v  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P11_Insert_Donor_Statement]^int nRows = in.length;int nRows = v.length;^192^^^^^191^197^int nRows = v.length;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigDecimal[])   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  BigDecimal[]  v  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P11_Insert_Donor_Statement]^int nCols = subMatrix[0].length;int nRows = v.length;^192^^^^^191^197^int nRows = v.length;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigDecimal[])   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  BigDecimal[]  v  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P11_Insert_Donor_Statement]^int nCols = d[0].length;int nRows = v.length;^192^^^^^191^197^int nRows = v.length;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigDecimal[])   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  BigDecimal[]  v  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P11_Insert_Donor_Statement]^int nRows = d.length;int nRows = v.length;^192^^^^^191^197^int nRows = v.length;^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigDecimal[])   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  BigDecimal[]  v  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P3_Replace_Literal]^data = new BigDecimal[nRows][scale];^193^^^^^191^197^data = new BigDecimal[nRows][1];^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigDecimal[])   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  BigDecimal[]  v  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P8_Replace_Mix]^data = new BigDecimal[nRows][1L];^193^^^^^191^197^data = new BigDecimal[nRows][1];^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigDecimal[])   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  BigDecimal[]  v  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P11_Insert_Donor_Statement]^data[i][j] = new BigDecimal ( in[i][j] ) ;data = new BigDecimal[nRows][1];^193^^^^^191^197^data = new BigDecimal[nRows][1];^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigDecimal[])   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  BigDecimal[]  v  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P11_Insert_Donor_Statement]^bd[i] = new BigDecimal ( b[i] ) ;data = new BigDecimal[nRows][1];^193^^^^^191^197^data = new BigDecimal[nRows][1];^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigDecimal[])   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  BigDecimal[]  v  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P11_Insert_Donor_Statement]^data = new BigDecimal[nRows][nCols];data = new BigDecimal[nRows][1];^193^^^^^191^197^data = new BigDecimal[nRows][1];^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigDecimal[])   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  BigDecimal[]  v  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P11_Insert_Donor_Statement]^data = new BigDecimal[rowDimension][columnDimension];data = new BigDecimal[nRows][1];^193^^^^^191^197^data = new BigDecimal[nRows][1];^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigDecimal[])   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  BigDecimal[]  v  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P11_Insert_Donor_Statement]^bd[i] = new BigDecimal ( v[i] ) ;data = new BigDecimal[nRows][1];^193^^^^^191^197^data = new BigDecimal[nRows][1];^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigDecimal[])   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  BigDecimal[]  v  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P1_Replace_Type]^for  (  short  row = 0; row < nRows; row++ )  {^194^^^^^191^197^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigDecimal[])   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  BigDecimal[]  v  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P2_Replace_Operator]^for  ( int row = 0; row == nRows; row++ )  {^194^^^^^191^197^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigDecimal[])   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  BigDecimal[]  v  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P3_Replace_Literal]^for  ( int row = row; row < nRows; row++ )  {^194^^^^^191^197^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigDecimal[])   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  BigDecimal[]  v  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P5_Replace_Variable]^for  ( int row = 0; row < rowDimension; row++ )  {^194^^^^^191^197^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigDecimal[])   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  BigDecimal[]  v  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P5_Replace_Variable]^for  ( int nRows = 0; row < row; row++ )  {^194^^^^^191^197^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigDecimal[])   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  BigDecimal[]  v  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P8_Replace_Mix]^for  ( int row = 0; row < scale; row++ )  {^194^^^^^191^197^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigDecimal[])   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  BigDecimal[]  v  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P3_Replace_Literal]^data[row][-3] = v[row];^195^^^^^191^197^data[row][0] = v[row];^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigDecimal[])   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  BigDecimal[]  v  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P8_Replace_Mix]^data[row][0 % 4] = v[row];^195^^^^^191^197^data[row][0] = v[row];^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigDecimal[])   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  BigDecimal[]  v  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P11_Insert_Donor_Statement]^out[row][0] = data[row][column];data[row][0] = v[row];^195^^^^^191^197^data[row][0] = v[row];^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigDecimal[])   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  BigDecimal[]  v  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P11_Insert_Donor_Statement]^outData[col][row] = data[row][col];data[row][0] = v[row];^195^^^^^191^197^data[row][0] = v[row];^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigDecimal[])   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  BigDecimal[]  v  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P8_Replace_Mix]^data[row][1] = v[row];^195^^^^^191^197^data[row][0] = v[row];^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigDecimal[])   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  BigDecimal[]  v  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P1_Replace_Type]^for  (  long  row = 0; row < nRows; row++ )  {^194^^^^^191^197^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigDecimal[])   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  BigDecimal[]  v  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P3_Replace_Literal]^for  ( int row = -6; row < nRows; row++ )  {^194^^^^^191^197^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] <init> [RETURN_TYPE] BigDecimal[])   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  BigDecimal[]  v  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P4_Replace_Constructor]^return return  new BigMatrixImpl ( nCols, nRows )   ) ;^205^^^^^204^206^return new BigMatrixImpl ( this.copyOut (  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] copy [RETURN_TYPE] BigMatrix   [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P7_Replace_Invocation]^return new BigMatrixImpl ( this.getData (  )  ) ;^205^^^^^204^206^return new BigMatrixImpl ( this.copyOut (  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] copy [RETURN_TYPE] BigMatrix   [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P7_Replace_Invocation]^return new BigMatrixImpl ( this .copyIn ( data )   ) ;^205^^^^^204^206^return new BigMatrixImpl ( this.copyOut (  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] copy [RETURN_TYPE] BigMatrix   [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P7_Replace_Invocation]^return new BigMatrixImpl ( this .copyIn ( d )   ) ;^205^^^^^204^206^return new BigMatrixImpl ( this.copyOut (  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] copy [RETURN_TYPE] BigMatrix   [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P14_Delete_Statement]^^205^^^^^204^206^return new BigMatrixImpl ( this.copyOut (  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] copy [RETURN_TYPE] BigMatrix   [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  columnDimension  nCols  nRows  parity  roundingMode  row  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  
[P2_Replace_Operator]^if  ( this.getColumnDimension (  )  != m.getColumnDimension (  )  && this.getRowDimension (  )  != m.getRowDimension (  )  )  {^216^217^^^^215^229^if  ( this.getColumnDimension (  )  != m.getColumnDimension (  )  || this.getRowDimension (  )  != m.getRowDimension (  )  )  {^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P2_Replace_Operator]^if  ( this.getColumnDimension (  )  >= m.getColumnDimension (  )  || this.getRowDimension (  )  != m.getRowDimension (  )  )  {^216^217^^^^215^229^if  ( this.getColumnDimension (  )  != m.getColumnDimension (  )  || this.getRowDimension (  )  != m.getRowDimension (  )  )  {^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P2_Replace_Operator]^if  ( this.getColumnDimension (  )  != m.getColumnDimension (  )  || this.getRowDimension (  )  == m.getRowDimension (  )  )  {^216^217^^^^215^229^if  ( this.getColumnDimension (  )  != m.getColumnDimension (  )  || this.getRowDimension (  )  != m.getRowDimension (  )  )  {^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P6_Replace_Expression]^if  ( this.getColumnDimension (  )  != m.getColumnDimension (  )  ) {^216^217^^^^215^229^if  ( this.getColumnDimension (  )  != m.getColumnDimension (  )  || this.getRowDimension (  )  != m.getRowDimension (  )  )  {^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P6_Replace_Expression]^if  (  this.getRowDimension (  )  != m.getRowDimension (  )  )  {^216^217^^^^215^229^if  ( this.getColumnDimension (  )  != m.getColumnDimension (  )  || this.getRowDimension (  )  != m.getRowDimension (  )  )  {^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P7_Replace_Invocation]^if  ( this.getRowDimension (  )  != m.getColumnDimension (  )  || this.getRowDimension (  )  != m.getRowDimension (  )  )  {^216^217^^^^215^229^if  ( this.getColumnDimension (  )  != m.getColumnDimension (  )  || this.getRowDimension (  )  != m.getRowDimension (  )  )  {^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P7_Replace_Invocation]^if  ( this.multiply (  )  != m.getColumnDimension (  )  || this.getRowDimension (  )  != m.getRowDimension (  )  )  {^216^217^^^^215^229^if  ( this.getColumnDimension (  )  != m.getColumnDimension (  )  || this.getRowDimension (  )  != m.getRowDimension (  )  )  {^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P7_Replace_Invocation]^if  ( this .getRowDimension (  )   != m^216^217^^^^215^229^if  ( this.getColumnDimension (  )  != m.getColumnDimension (  )  || this.getRowDimension (  )  != m.getRowDimension (  )  )  {^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P7_Replace_Invocation]^if  ( this.getColumnDimension (  )  != m.getColumnDimension (  )  || this.getColumnDimension (  )  != m.getRowDimension (  )  )  {^216^217^^^^215^229^if  ( this.getColumnDimension (  )  != m.getColumnDimension (  )  || this.getRowDimension (  )  != m.getRowDimension (  )  )  {^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P7_Replace_Invocation]^if  ( this.getColumnDimension (  )  != m.getColumnDimension (  )  || this .getColumnDimension (  )   != m^216^217^^^^215^229^if  ( this.getColumnDimension (  )  != m.getColumnDimension (  )  || this.getRowDimension (  )  != m.getRowDimension (  )  )  {^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P7_Replace_Invocation]^if  ( this.getColumnDimension (  )  != m.getColumnDimension (  )  || this.multiply (  )  != m.getRowDimension (  )  )  {^216^217^^^^215^229^if  ( this.getColumnDimension (  )  != m.getColumnDimension (  )  || this.getRowDimension (  )  != m.getRowDimension (  )  )  {^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("matrix dimension mismatch");^216^217^218^219^^215^229^if  ( this.getColumnDimension (  )  != m.getColumnDimension (  )  || this.getRowDimension (  )  != m.getRowDimension (  )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P16_Remove_Block]^^216^217^218^219^^215^229^if  ( this.getColumnDimension (  )  != m.getColumnDimension (  )  || this.getRowDimension (  )  != m.getRowDimension (  )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P13_Insert_Block]^if  (  ( b.getRowDimension (  )  )  !=  ( this.getRowDimension (  )  )  )  {     throw new IllegalArgumentException ( "Incorrect row dimension" ) ; }^216^^^^^215^229^[Delete]^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P13_Insert_Block]^if  (  ( v.length )  !=  ( this.getColumnDimension (  )  )  )  {     throw new IllegalArgumentException ( "vector has wrong length" ) ; }^216^^^^^215^229^[Delete]^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P13_Insert_Block]^if  (  ( this.getColumnDimension (  )  )  !=  ( m.getRowDimension (  )  )  )  {     throw new IllegalArgumentException ( "Matrices are not multiplication compatible." ) ; }^216^^^^^215^229^[Delete]^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "Incorrect row dimension" )   ;^218^^^^^215^229^throw new IllegalArgumentException  (" ")  ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Matrix must have at least one row." ) ;throw new IllegalArgumentException  (" ")  ;^218^^^^^215^229^throw new IllegalArgumentException  (" ")  ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^throw new InvalidMatrixException  (" ")  ;throw new IllegalArgumentException  (" ")  ;^218^^^^^215^229^throw new IllegalArgumentException  (" ")  ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^throw new MatrixIndexException  (" ")  ;throw new IllegalArgumentException  (" ")  ;^218^^^^^215^229^throw new IllegalArgumentException  (" ")  ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P7_Replace_Invocation]^this.getColumnDimension (  )  != m.getRowDimension (  )  )  {^217^^^^^215^229^this.getRowDimension (  )  != m.getRowDimension (  )  )  {^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P14_Delete_Statement]^^217^218^^^^215^229^this.getRowDimension (  )  != m.getRowDimension (  )  )  { throw new IllegalArgumentException  (" ")  ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P7_Replace_Invocation]^this.multiply (  )  != m.getRowDimension (  )  )  {^217^^^^^215^229^this.getRowDimension (  )  != m.getRowDimension (  )  )  {^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P1_Replace_Type]^short  rowCount = this.getRowDimension (  ) ;^220^^^^^215^229^int rowCount = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P7_Replace_Invocation]^int rowCount = this.getColumnDimension (  ) ;^220^^^^^215^229^int rowCount = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nCols = this.getColumnDimension (  ) ;int rowCount = this.getRowDimension (  ) ;^220^^^^^215^229^int rowCount = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nCol = this.getColumnDimension (  ) ;int rowCount = this.getRowDimension (  ) ;^220^^^^^215^229^int rowCount = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int columnCount = this.getColumnDimension (  ) ;int rowCount = this.getRowDimension (  ) ;^220^^^^^215^229^int rowCount = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nRows = getRowDimension (  ) ;int rowCount = this.getRowDimension (  ) ;^220^^^^^215^229^int rowCount = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nrows = this.getRowDimension (  ) ;int rowCount = this.getRowDimension (  ) ;^220^^^^^215^229^int rowCount = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nColB = b.getColumnDimension (  ) ;int rowCount = this.getRowDimension (  ) ;^220^^^^^215^229^int rowCount = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nCols = getColumnDimension (  ) ;int rowCount = this.getRowDimension (  ) ;^220^^^^^215^229^int rowCount = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nRowB = b.getRowDimension (  ) ;int rowCount = this.getRowDimension (  ) ;^220^^^^^215^229^int rowCount = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int ncols = this.getColumnDimension (  ) ;int rowCount = this.getRowDimension (  ) ;^220^^^^^215^229^int rowCount = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nRows = this.getRowDimension (  ) ;int rowCount = this.getRowDimension (  ) ;^220^^^^^215^229^int rowCount = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nSum = this.getColumnDimension (  ) ;int rowCount = this.getRowDimension (  ) ;^220^^^^^215^229^int rowCount = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nCols = m.getColumnDimension (  ) ;int rowCount = this.getRowDimension (  ) ;^220^^^^^215^229^int rowCount = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P14_Delete_Statement]^^220^221^^^^215^229^int rowCount = this.getRowDimension (  ) ; int columnCount = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^( this.getRowDimension (  )  )  ) ;int rowCount = this.getRowDimension (  ) ;^220^^^^^215^229^int rowCount = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P12_Insert_Condition]^if  ( b.getRowDimension (  )  != this.getRowDimension (  )  )  { int rowCount = this.getRowDimension (  ) ; }^220^^^^^215^229^int rowCount = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P12_Insert_Condition]^if  ( v.length != this.getColumnDimension (  )  )  { int rowCount = this.getRowDimension (  ) ; }^220^^^^^215^229^int rowCount = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P1_Replace_Type]^long  columnCount = this.getColumnDimension (  ) ;^221^^^^^215^229^int columnCount = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P7_Replace_Invocation]^int columnCount = this.getRowDimension (  ) ;^221^^^^^215^229^int columnCount = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nRows = getRowDimension (  ) ;int columnCount = this.getColumnDimension (  ) ;^221^^^^^215^229^int columnCount = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nrows = this.getRowDimension (  ) ;int columnCount = this.getColumnDimension (  ) ;^221^^^^^215^229^int columnCount = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal[][] out = new BigDecimal[nRows][this.getColumnDimension (  ) ];int columnCount = this.getColumnDimension (  ) ;^221^^^^^215^229^int columnCount = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nColB = b.getColumnDimension (  ) ;int columnCount = this.getColumnDimension (  ) ;^221^^^^^215^229^int columnCount = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int ncols = this.getColumnDimension (  ) ;int columnCount = this.getColumnDimension (  ) ;^221^^^^^215^229^int columnCount = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nSum = this.getColumnDimension (  ) ;int columnCount = this.getColumnDimension (  ) ;^221^^^^^215^229^int columnCount = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nCols = m.getColumnDimension (  ) ;int columnCount = this.getColumnDimension (  ) ;^221^^^^^215^229^int columnCount = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nCols = this.getColumnDimension (  ) ;int columnCount = this.getColumnDimension (  ) ;^221^^^^^215^229^int columnCount = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nCol = this.getColumnDimension (  ) ;int columnCount = this.getColumnDimension (  ) ;^221^^^^^215^229^int columnCount = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nCols = getColumnDimension (  ) ;int columnCount = this.getColumnDimension (  ) ;^221^^^^^215^229^int columnCount = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nRowB = b.getRowDimension (  ) ;int columnCount = this.getColumnDimension (  ) ;^221^^^^^215^229^int columnCount = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int rowCount = this.getRowDimension (  ) ;int columnCount = this.getColumnDimension (  ) ;^221^^^^^215^229^int columnCount = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nRows = this.getRowDimension (  ) ;int columnCount = this.getColumnDimension (  ) ;^221^^^^^215^229^int columnCount = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P12_Insert_Condition]^if  ( v.length != this.getColumnDimension (  )  )  { int columnCount = this.getColumnDimension (  ) ; }^221^^^^^215^229^int columnCount = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P14_Delete_Statement]^^221^^^^^215^229^int columnCount = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal[] out = new BigDecimal[v.length];BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^222^^^^^215^229^BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal[][] out = new BigDecimal[nRows][1];BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^222^^^^^215^229^BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal bd[] = new BigDecimal[v.length];BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^222^^^^^215^229^BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal bd[] = new BigDecimal[b.length];BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^222^^^^^215^229^BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal[] out = new BigDecimal[nRows];BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^222^^^^^215^229^BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal[][] out = new BigDecimal[nRows][this.getColumnDimension (  ) ];BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^222^^^^^215^229^BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal[][] out = new BigDecimal[1][ncols];BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^222^^^^^215^229^BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal[] out = new BigDecimal[nCols];BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^222^^^^^215^229^BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal[][] outData = new BigDecimal[nRows][nCols];BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^222^^^^^215^229^BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal[] out = new BigDecimal[ncols];BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^222^^^^^215^229^BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal[][] bp = new BigDecimal[nRowB][nColB];BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^222^^^^^215^229^BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P1_Replace_Type]^for  (  short  row = 0; row < rowCount; row++ )  {^223^^^^^215^229^for  ( int row = 0; row < rowCount; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P2_Replace_Operator]^for  ( int row = 0; row <= rowCount; row++ )  {^223^^^^^215^229^for  ( int row = 0; row < rowCount; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P3_Replace_Literal]^for  ( int row = -6; row < rowCount; row++ )  {^223^^^^^215^229^for  ( int row = 0; row < rowCount; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P3_Replace_Literal]^for  ( int row = rowDimension; row < rowCount; row++ )  {^223^^^^^215^229^for  ( int row = 0; row < rowCount; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^for  ( int rowCount = 0; row < rowCount; row++ )  {^223^^^^^215^229^for  ( int row = 0; row < rowCount; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^for  ( int row = 0; row < scale; row++ )  {^223^^^^^215^229^for  ( int row = 0; row < rowCount; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^for  ( int rowCount = 0; row < row; row++ )  {^223^^^^^215^229^for  ( int row = 0; row < rowCount; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P1_Replace_Type]^for  (  long  col = 0; col < columnCount; col++ )  {^224^^^^^215^229^for  ( int col = 0; col < columnCount; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P2_Replace_Operator]^for  ( int col = 0; col == columnCount; col++ )  {^224^^^^^215^229^for  ( int col = 0; col < columnCount; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P3_Replace_Literal]^for  ( int col = 6; col < columnCount; col++ )  {^224^^^^^215^229^for  ( int col = 0; col < columnCount; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^for  ( int row = 0; col < columnCount; col++ )  {^224^^^^^215^229^for  ( int col = 0; col < columnCount; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^for  ( int col = 0; col < scale; col++ )  {^224^^^^^215^229^for  ( int col = 0; col < columnCount; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P8_Replace_Mix]^for  ( int roundingMode = 0; col < columnCount; col++ )  {^224^^^^^215^229^for  ( int col = 0; col < columnCount; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^outData[row][col] = data[row][col].add ( m.getEntry ( rowDimension, col )  ) ;^225^^^^^215^229^outData[row][col] = data[row][col].add ( m.getEntry ( row, col )  ) ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^outData[row][col] = data[row][col].add ( m.getEntry ( row, row )  ) ;^225^^^^^215^229^outData[row][col] = data[row][col].add ( m.getEntry ( row, col )  ) ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^outData[row][col] = data[row][col].add ( m.getEntry (  col )  ) ;^225^^^^^215^229^outData[row][col] = data[row][col].add ( m.getEntry ( row, col )  ) ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^outData[row][col] = data[row][col].add ( m.getEntry ( row )  ) ;^225^^^^^215^229^outData[row][col] = data[row][col].add ( m.getEntry ( row, col )  ) ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^outData[row][col] = col[row][col].add ( m.getEntry ( row, data )  ) ;^225^^^^^215^229^outData[row][col] = data[row][col].add ( m.getEntry ( row, col )  ) ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^outData[row][col] = m[row][col].add ( data.getEntry ( row, col )  ) ;^225^^^^^215^229^outData[row][col] = data[row][col].add ( m.getEntry ( row, col )  ) ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P7_Replace_Invocation]^outData[row][col] = data[row][col] .add ( m )  ;^225^^^^^215^229^outData[row][col] = data[row][col].add ( m.getEntry ( row, col )  ) ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P8_Replace_Mix]^outData[row][col] ;^225^^^^^215^229^outData[row][col] = data[row][col].add ( m.getEntry ( row, col )  ) ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^outData[row][col] = data[row][col].subtract ( m.getEntry ( row, col )  ) ;outData[row][col] = data[row][col].add ( m.getEntry ( row, col )  ) ;^225^^^^^215^229^outData[row][col] = data[row][col].add ( m.getEntry ( row, col )  ) ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^outData[row][col] = data[row][col].add ( d ) ;outData[row][col] = data[row][col].add ( m.getEntry ( row, col )  ) ;^225^^^^^215^229^outData[row][col] = data[row][col].add ( m.getEntry ( row, col )  ) ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^sum = sum.add ( data[row][i].multiply ( m.getEntry ( i, col )  )  ) ;outData[row][col] = data[row][col].add ( m.getEntry ( row, col )  ) ;^225^^^^^215^229^outData[row][col] = data[row][col].add ( m.getEntry ( row, col )  ) ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^outData[row][col] = data[row][col].multiply ( d ) ;outData[row][col] = data[row][col].add ( m.getEntry ( row, col )  ) ;^225^^^^^215^229^outData[row][col] = data[row][col].add ( m.getEntry ( row, col )  ) ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P12_Insert_Condition]^if  ( !data[row][col].equals ( m.getEntry ( row, col )  )  )  { outData[row][col] = data[row][col].add ( m.getEntry ( row, col )  ) ; }^225^^^^^215^229^outData[row][col] = data[row][col].add ( m.getEntry ( row, col )  ) ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^outData[row][col] = data[row][col].add ( m.getEntry ( row, roundingMode )  ) ;^225^^^^^215^229^outData[row][col] = data[row][col].add ( m.getEntry ( row, col )  ) ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^outData[row][col] = data[row][col].add ( row.getEntry ( m, col )  ) ;^225^^^^^215^229^outData[row][col] = data[row][col].add ( m.getEntry ( row, col )  ) ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^outData[row][col] = data[row][col].add ( m.getEntry ( col, row )  ) ;^225^^^^^215^229^outData[row][col] = data[row][col].add ( m.getEntry ( row, col )  ) ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P7_Replace_Invocation]^outData[row][col] = data[row][col].add ( m .getRowDimension (  )   ) ;^225^^^^^215^229^outData[row][col] = data[row][col].add ( m.getEntry ( row, col )  ) ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P8_Replace_Mix]^outData[row][col] = data[row][col].add ( m.getEntry ( row, rowCount )  ) ;^225^^^^^215^229^outData[row][col] = data[row][col].add ( m.getEntry ( row, col )  ) ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P14_Delete_Statement]^^225^^^^^215^229^outData[row][col] = data[row][col].add ( m.getEntry ( row, col )  ) ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^outData[row][col] = data[row][col].add ( m.getEntry ( rowCount, col )  ) ;^225^^^^^215^229^outData[row][col] = data[row][col].add ( m.getEntry ( row, col )  ) ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P8_Replace_Mix]^outData[row][col] = data[row][col].add ( m.getEntry ( row, scale )  ) ;^225^^^^^215^229^outData[row][col] = data[row][col].add ( m.getEntry ( row, col )  ) ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^outData[row][col] = data[row][col].add ( m.getEntry ( parity, col )  ) ;^225^^^^^215^229^outData[row][col] = data[row][col].add ( m.getEntry ( row, col )  ) ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^outData[row][col] = lu[row][col].add ( m.getEntry ( row, col )  ) ;^225^^^^^215^229^outData[row][col] = data[row][col].add ( m.getEntry ( row, col )  ) ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^outData[row][col] = row[row][col].add ( m.getEntry ( data, col )  ) ;^225^^^^^215^229^outData[row][col] = data[row][col].add ( m.getEntry ( row, col )  ) ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P8_Replace_Mix]^outData[row][col]  =  outData[row][col] ;^225^^^^^215^229^outData[row][col] = data[row][col].add ( m.getEntry ( row, col )  ) ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P1_Replace_Type]^for  (  short  col = 0; col < columnCount; col++ )  {^224^^^^^215^229^for  ( int col = 0; col < columnCount; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P3_Replace_Literal]^for  ( int col = -1; col < columnCount; col++ )  {^224^^^^^215^229^for  ( int col = 0; col < columnCount; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^outData[row][col] = outData[row][col].add ( m.getEntry ( row, col )  ) ;^225^^^^^215^229^outData[row][col] = data[row][col].add ( m.getEntry ( row, col )  ) ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P8_Replace_Mix]^outData[row][col] = data[row][col].add ( m.getEntry ( roundingMode, col )  ) ;^225^^^^^215^229^outData[row][col] = data[row][col].add ( m.getEntry ( row, col )  ) ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^outData[row][col] = data[row][col].add ( col.getEntry ( row, m )  ) ;^225^^^^^215^229^outData[row][col] = data[row][col].add ( m.getEntry ( row, col )  ) ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P2_Replace_Operator]^for  ( int col = 0; col <= columnCount; col++ )  {^224^^^^^215^229^for  ( int col = 0; col < columnCount; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P3_Replace_Literal]^for  ( int col = 9; col < columnCount; col++ )  {^224^^^^^215^229^for  ( int col = 0; col < columnCount; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^for  ( int col = 0; col < rowCount; col++ )  {^224^^^^^215^229^for  ( int col = 0; col < columnCount; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^for  ( int columnCount = 0; col < col; col++ )  {^224^^^^^215^229^for  ( int col = 0; col < columnCount; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P8_Replace_Mix]^for  ( int scale = 0; col < columnCount; col++ )  {^224^^^^^215^229^for  ( int col = 0; col < columnCount; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^outData[row][col] = data[row][col].add ( m.getEntry ( scale, col )  ) ;^225^^^^^215^229^outData[row][col] = data[row][col].add ( m.getEntry ( row, col )  ) ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P3_Replace_Literal]^for  ( int row = roundingMode; row < rowCount; row++ )  {^223^^^^^215^229^for  ( int row = 0; row < rowCount; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P3_Replace_Literal]^for  ( int col = -5; col < columnCount; col++ )  {^224^^^^^215^229^for  ( int col = 0; col < columnCount; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P4_Replace_Constructor]^return return  new BigMatrixImpl ( nCols, nRows )  ;^228^^^^^215^229^return new BigMatrixImpl ( outData ) ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^return new BigMatrixImpl ( lu ) ;^228^^^^^215^229^return new BigMatrixImpl ( outData ) ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P8_Replace_Mix]^return  new BigMatrixImpl ( nCols, nRows )  ;^228^^^^^215^229^return new BigMatrixImpl ( outData ) ;^[CLASS] BigMatrixImpl  [METHOD] add [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P2_Replace_Operator]^if  ( this.getColumnDimension (  )  != m.getColumnDimension (  )  && this.getRowDimension (  )  != m.getRowDimension (  )  )  {^239^240^^^^238^252^if  ( this.getColumnDimension (  )  != m.getColumnDimension (  )  || this.getRowDimension (  )  != m.getRowDimension (  )  )  {^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P2_Replace_Operator]^if  ( this.getColumnDimension (  )  == m.getColumnDimension (  )  || this.getRowDimension (  )  != m.getRowDimension (  )  )  {^239^240^^^^238^252^if  ( this.getColumnDimension (  )  != m.getColumnDimension (  )  || this.getRowDimension (  )  != m.getRowDimension (  )  )  {^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P2_Replace_Operator]^if  ( this.getColumnDimension (  )  != m.getColumnDimension (  )  || this.getRowDimension (  )  > m.getRowDimension (  )  )  {^239^240^^^^238^252^if  ( this.getColumnDimension (  )  != m.getColumnDimension (  )  || this.getRowDimension (  )  != m.getRowDimension (  )  )  {^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P6_Replace_Expression]^if  ( this.getColumnDimension (  )  != m.getColumnDimension (  )  ) {^239^240^^^^238^252^if  ( this.getColumnDimension (  )  != m.getColumnDimension (  )  || this.getRowDimension (  )  != m.getRowDimension (  )  )  {^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P6_Replace_Expression]^if  (  this.getRowDimension (  )  != m.getRowDimension (  )  )  {^239^240^^^^238^252^if  ( this.getColumnDimension (  )  != m.getColumnDimension (  )  || this.getRowDimension (  )  != m.getRowDimension (  )  )  {^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P7_Replace_Invocation]^if  ( this.getRowDimension (  )  != m.getColumnDimension (  )  || this.getRowDimension (  )  != m.getRowDimension (  )  )  {^239^240^^^^238^252^if  ( this.getColumnDimension (  )  != m.getColumnDimension (  )  || this.getRowDimension (  )  != m.getRowDimension (  )  )  {^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P7_Replace_Invocation]^if  ( this .getRowDimension (  )   != m^239^240^^^^238^252^if  ( this.getColumnDimension (  )  != m.getColumnDimension (  )  || this.getRowDimension (  )  != m.getRowDimension (  )  )  {^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P7_Replace_Invocation]^if  ( this.multiply (  )  != m.getColumnDimension (  )  || this.getRowDimension (  )  != m.getRowDimension (  )  )  {^239^240^^^^238^252^if  ( this.getColumnDimension (  )  != m.getColumnDimension (  )  || this.getRowDimension (  )  != m.getRowDimension (  )  )  {^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P7_Replace_Invocation]^if  ( this.getColumnDimension (  )  != m.getColumnDimension (  )  || this.getColumnDimension (  )  != m.getRowDimension (  )  )  {^239^240^^^^238^252^if  ( this.getColumnDimension (  )  != m.getColumnDimension (  )  || this.getRowDimension (  )  != m.getRowDimension (  )  )  {^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P7_Replace_Invocation]^if  ( this.getColumnDimension (  )  != m.getColumnDimension (  )  || this .getColumnDimension (  )   != m^239^240^^^^238^252^if  ( this.getColumnDimension (  )  != m.getColumnDimension (  )  || this.getRowDimension (  )  != m.getRowDimension (  )  )  {^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P7_Replace_Invocation]^if  ( this.getColumnDimension (  )  != m.getColumnDimension (  )  || this.multiply (  )  != m.getRowDimension (  )  )  {^239^240^^^^238^252^if  ( this.getColumnDimension (  )  != m.getColumnDimension (  )  || this.getRowDimension (  )  != m.getRowDimension (  )  )  {^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("matrix dimension mismatch");^239^240^241^242^^238^252^if  ( this.getColumnDimension (  )  != m.getColumnDimension (  )  || this.getRowDimension (  )  != m.getRowDimension (  )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P16_Remove_Block]^^239^240^241^242^^238^252^if  ( this.getColumnDimension (  )  != m.getColumnDimension (  )  || this.getRowDimension (  )  != m.getRowDimension (  )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P13_Insert_Block]^if  (  ( b.getRowDimension (  )  )  !=  ( this.getRowDimension (  )  )  )  {     throw new IllegalArgumentException ( "Incorrect row dimension" ) ; }^239^^^^^238^252^[Delete]^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P13_Insert_Block]^if  (  ( v.length )  !=  ( this.getColumnDimension (  )  )  )  {     throw new IllegalArgumentException ( "vector has wrong length" ) ; }^239^^^^^238^252^[Delete]^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P13_Insert_Block]^if  (  ( this.getColumnDimension (  )  )  !=  ( m.getRowDimension (  )  )  )  {     throw new IllegalArgumentException ( "Matrices are not multiplication compatible." ) ; }^239^^^^^238^252^[Delete]^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "Incorrect row dimension" )   ;^241^^^^^238^252^throw new IllegalArgumentException  (" ")  ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Matrix must have at least one row." ) ;throw new IllegalArgumentException  (" ")  ;^241^^^^^238^252^throw new IllegalArgumentException  (" ")  ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^throw new InvalidMatrixException  (" ")  ;throw new IllegalArgumentException  (" ")  ;^241^^^^^238^252^throw new IllegalArgumentException  (" ")  ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^throw new MatrixIndexException  (" ")  ;throw new IllegalArgumentException  (" ")  ;^241^^^^^238^252^throw new IllegalArgumentException  (" ")  ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P8_Replace_Mix]^return ;^241^^^^^238^252^throw new IllegalArgumentException  (" ")  ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P7_Replace_Invocation]^this.getColumnDimension (  )  != m.getRowDimension (  )  )  {^240^^^^^238^252^this.getRowDimension (  )  != m.getRowDimension (  )  )  {^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P7_Replace_Invocation]^this .getColumnDimension (  )   != m^240^^^^^238^252^this.getRowDimension (  )  != m.getRowDimension (  )  )  {^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P14_Delete_Statement]^^240^241^^^^238^252^this.getRowDimension (  )  != m.getRowDimension (  )  )  { throw new IllegalArgumentException  (" ")  ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P7_Replace_Invocation]^this.multiply (  )  != m.getRowDimension (  )  )  {^240^^^^^238^252^this.getRowDimension (  )  != m.getRowDimension (  )  )  {^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P1_Replace_Type]^short  rowCount = this.getRowDimension (  ) ;^243^^^^^238^252^int rowCount = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P7_Replace_Invocation]^int rowCount = this.getColumnDimension (  ) ;^243^^^^^238^252^int rowCount = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nCols = this.getColumnDimension (  ) ;int rowCount = this.getRowDimension (  ) ;^243^^^^^238^252^int rowCount = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nCol = this.getColumnDimension (  ) ;int rowCount = this.getRowDimension (  ) ;^243^^^^^238^252^int rowCount = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int columnCount = this.getColumnDimension (  ) ;int rowCount = this.getRowDimension (  ) ;^243^^^^^238^252^int rowCount = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nRows = getRowDimension (  ) ;int rowCount = this.getRowDimension (  ) ;^243^^^^^238^252^int rowCount = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nrows = this.getRowDimension (  ) ;int rowCount = this.getRowDimension (  ) ;^243^^^^^238^252^int rowCount = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nColB = b.getColumnDimension (  ) ;int rowCount = this.getRowDimension (  ) ;^243^^^^^238^252^int rowCount = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nCols = getColumnDimension (  ) ;int rowCount = this.getRowDimension (  ) ;^243^^^^^238^252^int rowCount = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nRowB = b.getRowDimension (  ) ;int rowCount = this.getRowDimension (  ) ;^243^^^^^238^252^int rowCount = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int ncols = this.getColumnDimension (  ) ;int rowCount = this.getRowDimension (  ) ;^243^^^^^238^252^int rowCount = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nRows = this.getRowDimension (  ) ;int rowCount = this.getRowDimension (  ) ;^243^^^^^238^252^int rowCount = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nSum = this.getColumnDimension (  ) ;int rowCount = this.getRowDimension (  ) ;^243^^^^^238^252^int rowCount = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nCols = m.getColumnDimension (  ) ;int rowCount = this.getRowDimension (  ) ;^243^^^^^238^252^int rowCount = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P12_Insert_Condition]^if  ( b.getRowDimension (  )  != this.getRowDimension (  )  )  { int rowCount = this.getRowDimension (  ) ; }^243^^^^^238^252^int rowCount = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P12_Insert_Condition]^if  ( v.length != this.getColumnDimension (  )  )  { int rowCount = this.getRowDimension (  ) ; }^243^^^^^238^252^int rowCount = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P14_Delete_Statement]^^243^244^^^^238^252^int rowCount = this.getRowDimension (  ) ; int columnCount = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^( this.getRowDimension (  )  )  ) ;int rowCount = this.getRowDimension (  ) ;^243^^^^^238^252^int rowCount = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P1_Replace_Type]^short  columnCount = this.getColumnDimension (  ) ;^244^^^^^238^252^int columnCount = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P7_Replace_Invocation]^int columnCount = this.getRowDimension (  ) ;^244^^^^^238^252^int columnCount = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nRows = getRowDimension (  ) ;int columnCount = this.getColumnDimension (  ) ;^244^^^^^238^252^int columnCount = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nrows = this.getRowDimension (  ) ;int columnCount = this.getColumnDimension (  ) ;^244^^^^^238^252^int columnCount = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal[][] out = new BigDecimal[nRows][this.getColumnDimension (  ) ];int columnCount = this.getColumnDimension (  ) ;^244^^^^^238^252^int columnCount = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nColB = b.getColumnDimension (  ) ;int columnCount = this.getColumnDimension (  ) ;^244^^^^^238^252^int columnCount = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int ncols = this.getColumnDimension (  ) ;int columnCount = this.getColumnDimension (  ) ;^244^^^^^238^252^int columnCount = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nSum = this.getColumnDimension (  ) ;int columnCount = this.getColumnDimension (  ) ;^244^^^^^238^252^int columnCount = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nCols = m.getColumnDimension (  ) ;int columnCount = this.getColumnDimension (  ) ;^244^^^^^238^252^int columnCount = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nCols = this.getColumnDimension (  ) ;int columnCount = this.getColumnDimension (  ) ;^244^^^^^238^252^int columnCount = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nCol = this.getColumnDimension (  ) ;int columnCount = this.getColumnDimension (  ) ;^244^^^^^238^252^int columnCount = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nCols = getColumnDimension (  ) ;int columnCount = this.getColumnDimension (  ) ;^244^^^^^238^252^int columnCount = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nRowB = b.getRowDimension (  ) ;int columnCount = this.getColumnDimension (  ) ;^244^^^^^238^252^int columnCount = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int rowCount = this.getRowDimension (  ) ;int columnCount = this.getColumnDimension (  ) ;^244^^^^^238^252^int columnCount = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nRows = this.getRowDimension (  ) ;int columnCount = this.getColumnDimension (  ) ;^244^^^^^238^252^int columnCount = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P14_Delete_Statement]^^244^^^^^238^252^int columnCount = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal[] out = new BigDecimal[v.length];BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^245^^^^^238^252^BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal[][] out = new BigDecimal[nRows][1];BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^245^^^^^238^252^BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal bd[] = new BigDecimal[v.length];BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^245^^^^^238^252^BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal bd[] = new BigDecimal[b.length];BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^245^^^^^238^252^BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal[] out = new BigDecimal[nRows];BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^245^^^^^238^252^BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal[][] out = new BigDecimal[nRows][this.getColumnDimension (  ) ];BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^245^^^^^238^252^BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal[][] out = new BigDecimal[1][ncols];BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^245^^^^^238^252^BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal[] out = new BigDecimal[nCols];BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^245^^^^^238^252^BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal[][] outData = new BigDecimal[nRows][nCols];BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^245^^^^^238^252^BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal[] out = new BigDecimal[ncols];BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^245^^^^^238^252^BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal[][] bp = new BigDecimal[nRowB][nColB];BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^245^^^^^238^252^BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P1_Replace_Type]^for  (  long  row = 0; row < rowCount; row++ )  {^246^^^^^238^252^for  ( int row = 0; row < rowCount; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P2_Replace_Operator]^for  ( int row = 0; row > rowCount; row++ )  {^246^^^^^238^252^for  ( int row = 0; row < rowCount; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P3_Replace_Literal]^for  ( int row = col; row < rowCount; row++ )  {^246^^^^^238^252^for  ( int row = 0; row < rowCount; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P3_Replace_Literal]^for  ( int row = 6; row < rowCount; row++ )  {^246^^^^^238^252^for  ( int row = 0; row < rowCount; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^for  ( int parity = 0; row < rowCount; row++ )  {^246^^^^^238^252^for  ( int row = 0; row < rowCount; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^for  ( int row = 0; row < parity; row++ )  {^246^^^^^238^252^for  ( int row = 0; row < rowCount; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^for  ( int rowCount = 0; row < row; row++ )  {^246^^^^^238^252^for  ( int row = 0; row < rowCount; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P8_Replace_Mix]^for  ( int row = 0; row < scale; row++ )  {^246^^^^^238^252^for  ( int row = 0; row < rowCount; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P1_Replace_Type]^for  (  short  col = 0; col < columnCount; col++ )  {^247^^^^^238^252^for  ( int col = 0; col < columnCount; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P2_Replace_Operator]^for  ( int col = 0; col <= columnCount; col++ )  {^247^^^^^238^252^for  ( int col = 0; col < columnCount; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P3_Replace_Literal]^for  ( int col = nCols; col < columnCount; col++ )  {^247^^^^^238^252^for  ( int col = 0; col < columnCount; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^for  ( int roundingMode = 0; col < columnCount; col++ )  {^247^^^^^238^252^for  ( int col = 0; col < columnCount; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^for  ( int col = 0; col < rowCount; col++ )  {^247^^^^^238^252^for  ( int col = 0; col < columnCount; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^for  ( int columnCount = 0; col < col; col++ )  {^247^^^^^238^252^for  ( int col = 0; col < columnCount; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^outData[row][col] = data[row][col].subtract ( m.getEntry ( rowDimension, col )  ) ;^248^^^^^238^252^outData[row][col] = data[row][col].subtract ( m.getEntry ( row, col )  ) ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^outData[row][col] = data[row][col].subtract ( m.getEntry ( row, scale )  ) ;^248^^^^^238^252^outData[row][col] = data[row][col].subtract ( m.getEntry ( row, col )  ) ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^outData[row][col] = lu[row][col].subtract ( m.getEntry ( row, col )  ) ;^248^^^^^238^252^outData[row][col] = data[row][col].subtract ( m.getEntry ( row, col )  ) ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^outData[row][col] = data[row][col].subtract ( m.getEntry (  col )  ) ;^248^^^^^238^252^outData[row][col] = data[row][col].subtract ( m.getEntry ( row, col )  ) ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^outData[row][col] = data[row][col].subtract ( m.getEntry ( row )  ) ;^248^^^^^238^252^outData[row][col] = data[row][col].subtract ( m.getEntry ( row, col )  ) ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^outData[row][col] = data[row][col].subtract ( m.getEntry ( col, row )  ) ;^248^^^^^238^252^outData[row][col] = data[row][col].subtract ( m.getEntry ( row, col )  ) ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^outData[row][col] = m[row][col].subtract ( data.getEntry ( row, col )  ) ;^248^^^^^238^252^outData[row][col] = data[row][col].subtract ( m.getEntry ( row, col )  ) ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P7_Replace_Invocation]^outData[row][col] = data[row][col].subtract ( m .getRowDimension (  )   ) ;^248^^^^^238^252^outData[row][col] = data[row][col].subtract ( m.getEntry ( row, col )  ) ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P8_Replace_Mix]^outData[row][col]  =  outData[row][col] ;^248^^^^^238^252^outData[row][col] = data[row][col].subtract ( m.getEntry ( row, col )  ) ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^outData[row][col] = data[row][col].add ( m.getEntry ( row, col )  ) ;outData[row][col] = data[row][col].subtract ( m.getEntry ( row, col )  ) ;^248^^^^^238^252^outData[row][col] = data[row][col].subtract ( m.getEntry ( row, col )  ) ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^outData[row][col] = data[row][col].add ( d ) ;outData[row][col] = data[row][col].subtract ( m.getEntry ( row, col )  ) ;^248^^^^^238^252^outData[row][col] = data[row][col].subtract ( m.getEntry ( row, col )  ) ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^sum = sum.add ( data[row][i].multiply ( m.getEntry ( i, col )  )  ) ;outData[row][col] = data[row][col].subtract ( m.getEntry ( row, col )  ) ;^248^^^^^238^252^outData[row][col] = data[row][col].subtract ( m.getEntry ( row, col )  ) ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^outData[row][col] = data[row][col].multiply ( d ) ;outData[row][col] = data[row][col].subtract ( m.getEntry ( row, col )  ) ;^248^^^^^238^252^outData[row][col] = data[row][col].subtract ( m.getEntry ( row, col )  ) ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P12_Insert_Condition]^if  ( !data[row][col].equals ( m.getEntry ( row, col )  )  )  { outData[row][col] = data[row][col].subtract ( m.getEntry ( row, col )  ) ; }^248^^^^^238^252^outData[row][col] = data[row][col].subtract ( m.getEntry ( row, col )  ) ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^outData[row][col] = data[row][col].subtract ( m.getEntry ( scale, col )  ) ;^248^^^^^238^252^outData[row][col] = data[row][col].subtract ( m.getEntry ( row, col )  ) ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^outData[row][col] = data[row][col].subtract ( m.getEntry ( row, rowCount )  ) ;^248^^^^^238^252^outData[row][col] = data[row][col].subtract ( m.getEntry ( row, col )  ) ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^outData[row][col] = col[row][col].subtract ( m.getEntry ( row, data )  ) ;^248^^^^^238^252^outData[row][col] = data[row][col].subtract ( m.getEntry ( row, col )  ) ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^outData[row][col] = data[row][col].subtract ( row.getEntry ( m, col )  ) ;^248^^^^^238^252^outData[row][col] = data[row][col].subtract ( m.getEntry ( row, col )  ) ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P7_Replace_Invocation]^outData[row][col] = data[row][col] .subtract ( m )  ;^248^^^^^238^252^outData[row][col] = data[row][col].subtract ( m.getEntry ( row, col )  ) ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P8_Replace_Mix]^outData[row][col] = data[row][col].subtract ( m.getEntry ( rowCount, col )  ) ;^248^^^^^238^252^outData[row][col] = data[row][col].subtract ( m.getEntry ( row, col )  ) ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P14_Delete_Statement]^^248^^^^^238^252^outData[row][col] = data[row][col].subtract ( m.getEntry ( row, col )  ) ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^outData[row][col] = data[row][col].subtract ( col.getEntry ( row, m )  ) ;^248^^^^^238^252^outData[row][col] = data[row][col].subtract ( m.getEntry ( row, col )  ) ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^outData[row][col] = data[row][col].subtract ( m.getEntry ( row, rowDimension )  ) ;^248^^^^^238^252^outData[row][col] = data[row][col].subtract ( m.getEntry ( row, col )  ) ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P1_Replace_Type]^for  (  long  col = 0; col < columnCount; col++ )  {^247^^^^^238^252^for  ( int col = 0; col < columnCount; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P8_Replace_Mix]^outData[row][col] = data[row][col].subtract ( m.getEntry ( roundingMode, col )  ) ;^248^^^^^238^252^outData[row][col] = data[row][col].subtract ( m.getEntry ( row, col )  ) ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^outData[row][col] = data[row][col].subtract ( m.getEntry ( row, roundingMode )  ) ;^248^^^^^238^252^outData[row][col] = data[row][col].subtract ( m.getEntry ( row, col )  ) ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P3_Replace_Literal]^for  ( int col = 7; col < columnCount; col++ )  {^247^^^^^238^252^for  ( int col = 0; col < columnCount; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^for  ( int rowCount = 0; col < columnCount; col++ )  {^247^^^^^238^252^for  ( int col = 0; col < columnCount; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P8_Replace_Mix]^for  ( int col = 0; col < scale; col++ )  {^247^^^^^238^252^for  ( int col = 0; col < columnCount; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^outData[row][col] = outData[row][col].subtract ( m.getEntry ( row, col )  ) ;^248^^^^^238^252^outData[row][col] = data[row][col].subtract ( m.getEntry ( row, col )  ) ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^outData[row][col] = data[row][col].subtract ( m.getEntry ( row, row )  ) ;^248^^^^^238^252^outData[row][col] = data[row][col].subtract ( m.getEntry ( row, col )  ) ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P1_Replace_Type]^for  (  short  row = 0; row < rowCount; row++ )  {^246^^^^^238^252^for  ( int row = 0; row < rowCount; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P3_Replace_Literal]^for  ( int row = 4; row < rowCount; row++ )  {^246^^^^^238^252^for  ( int row = 0; row < rowCount; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P3_Replace_Literal]^for  ( int col = -3; col < columnCount; col++ )  {^247^^^^^238^252^for  ( int col = 0; col < columnCount; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^outData[row][col] = row[row][col].subtract ( m.getEntry ( data, col )  ) ;^248^^^^^238^252^outData[row][col] = data[row][col].subtract ( m.getEntry ( row, col )  ) ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P4_Replace_Constructor]^return return  new BigMatrixImpl ( nCols, nRows )  ;^251^^^^^238^252^return new BigMatrixImpl ( outData ) ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^return new BigMatrixImpl ( lu ) ;^251^^^^^238^252^return new BigMatrixImpl ( outData ) ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P8_Replace_Mix]^return  new BigMatrixImpl ( nCols, nRows )  ;^251^^^^^238^252^return new BigMatrixImpl ( outData ) ;^[CLASS] BigMatrixImpl  [METHOD] subtract [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  BigDecimal[][]  d  data  lu  outData  
[P1_Replace_Type]^long  rowCount = this.getRowDimension (  ) ;^261^^^^^260^270^int rowCount = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P7_Replace_Invocation]^int rowCount = this.getColumnDimension (  ) ;^261^^^^^260^270^int rowCount = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nCols = this.getColumnDimension (  ) ;int rowCount = this.getRowDimension (  ) ;^261^^^^^260^270^int rowCount = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nCol = this.getColumnDimension (  ) ;int rowCount = this.getRowDimension (  ) ;^261^^^^^260^270^int rowCount = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int columnCount = this.getColumnDimension (  ) ;int rowCount = this.getRowDimension (  ) ;^261^^^^^260^270^int rowCount = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nRows = getRowDimension (  ) ;int rowCount = this.getRowDimension (  ) ;^261^^^^^260^270^int rowCount = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nrows = this.getRowDimension (  ) ;int rowCount = this.getRowDimension (  ) ;^261^^^^^260^270^int rowCount = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nColB = b.getColumnDimension (  ) ;int rowCount = this.getRowDimension (  ) ;^261^^^^^260^270^int rowCount = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nCols = getColumnDimension (  ) ;int rowCount = this.getRowDimension (  ) ;^261^^^^^260^270^int rowCount = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nRowB = b.getRowDimension (  ) ;int rowCount = this.getRowDimension (  ) ;^261^^^^^260^270^int rowCount = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int ncols = this.getColumnDimension (  ) ;int rowCount = this.getRowDimension (  ) ;^261^^^^^260^270^int rowCount = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nRows = this.getRowDimension (  ) ;int rowCount = this.getRowDimension (  ) ;^261^^^^^260^270^int rowCount = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nSum = this.getColumnDimension (  ) ;int rowCount = this.getRowDimension (  ) ;^261^^^^^260^270^int rowCount = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nCols = m.getColumnDimension (  ) ;int rowCount = this.getRowDimension (  ) ;^261^^^^^260^270^int rowCount = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P12_Insert_Condition]^if  ( b.getRowDimension (  )  != this.getRowDimension (  )  )  { int rowCount = this.getRowDimension (  ) ; }^261^^^^^260^270^int rowCount = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P12_Insert_Condition]^if  ( v.length != this.getColumnDimension (  )  )  { int rowCount = this.getRowDimension (  ) ; }^261^^^^^260^270^int rowCount = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P14_Delete_Statement]^^261^^^^^260^270^int rowCount = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^( this.getRowDimension (  )  )  ) ;int rowCount = this.getRowDimension (  ) ;^261^^^^^260^270^int rowCount = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P1_Replace_Type]^short  columnCount = this.getColumnDimension (  ) ;^262^^^^^260^270^int columnCount = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P7_Replace_Invocation]^int columnCount = this.getRowDimension (  ) ;^262^^^^^260^270^int columnCount = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nRows = getRowDimension (  ) ;int columnCount = this.getColumnDimension (  ) ;^262^^^^^260^270^int columnCount = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nrows = this.getRowDimension (  ) ;int columnCount = this.getColumnDimension (  ) ;^262^^^^^260^270^int columnCount = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal[][] out = new BigDecimal[nRows][this.getColumnDimension (  ) ];int columnCount = this.getColumnDimension (  ) ;^262^^^^^260^270^int columnCount = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nColB = b.getColumnDimension (  ) ;int columnCount = this.getColumnDimension (  ) ;^262^^^^^260^270^int columnCount = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int ncols = this.getColumnDimension (  ) ;int columnCount = this.getColumnDimension (  ) ;^262^^^^^260^270^int columnCount = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nSum = this.getColumnDimension (  ) ;int columnCount = this.getColumnDimension (  ) ;^262^^^^^260^270^int columnCount = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nCols = m.getColumnDimension (  ) ;int columnCount = this.getColumnDimension (  ) ;^262^^^^^260^270^int columnCount = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nCols = this.getColumnDimension (  ) ;int columnCount = this.getColumnDimension (  ) ;^262^^^^^260^270^int columnCount = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nCol = this.getColumnDimension (  ) ;int columnCount = this.getColumnDimension (  ) ;^262^^^^^260^270^int columnCount = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nCols = getColumnDimension (  ) ;int columnCount = this.getColumnDimension (  ) ;^262^^^^^260^270^int columnCount = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nRowB = b.getRowDimension (  ) ;int columnCount = this.getColumnDimension (  ) ;^262^^^^^260^270^int columnCount = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int rowCount = this.getRowDimension (  ) ;int columnCount = this.getColumnDimension (  ) ;^262^^^^^260^270^int columnCount = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nRows = this.getRowDimension (  ) ;int columnCount = this.getColumnDimension (  ) ;^262^^^^^260^270^int columnCount = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P14_Delete_Statement]^^262^263^^^^260^270^int columnCount = this.getColumnDimension (  ) ; BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P12_Insert_Condition]^if  ( v.length != this.getColumnDimension (  )  )  { int columnCount = this.getColumnDimension (  ) ; }^262^^^^^260^270^int columnCount = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal[] out = new BigDecimal[v.length];BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^263^^^^^260^270^BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal[][] out = new BigDecimal[nRows][1];BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^263^^^^^260^270^BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal bd[] = new BigDecimal[v.length];BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^263^^^^^260^270^BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal bd[] = new BigDecimal[b.length];BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^263^^^^^260^270^BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal[] out = new BigDecimal[nRows];BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^263^^^^^260^270^BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal[][] out = new BigDecimal[nRows][this.getColumnDimension (  ) ];BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^263^^^^^260^270^BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal[][] out = new BigDecimal[1][ncols];BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^263^^^^^260^270^BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal[] out = new BigDecimal[nCols];BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^263^^^^^260^270^BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal[][] outData = new BigDecimal[nRows][nCols];BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^263^^^^^260^270^BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal[] out = new BigDecimal[ncols];BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^263^^^^^260^270^BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal[][] bp = new BigDecimal[nRowB][nColB];BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^263^^^^^260^270^BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P1_Replace_Type]^for  (  short  row = 0; row < rowCount; row++ )  {^264^^^^^260^270^for  ( int row = 0; row < rowCount; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P2_Replace_Operator]^for  ( int row = 0; row > rowCount; row++ )  {^264^^^^^260^270^for  ( int row = 0; row < rowCount; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P2_Replace_Operator]^for  ( int row = 0; row <= rowCount; row++ )  {^264^^^^^260^270^for  ( int row = 0; row < rowCount; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P3_Replace_Literal]^for  ( int row = row; row < rowCount; row++ )  {^264^^^^^260^270^for  ( int row = 0; row < rowCount; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P3_Replace_Literal]^for  ( int row = col; row < rowCount; row++ )  {^264^^^^^260^270^for  ( int row = 0; row < rowCount; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^for  ( int roundingMode = 0; row < rowCount; row++ )  {^264^^^^^260^270^for  ( int row = 0; row < rowCount; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^for  ( int row = 0; row < roundingMode; row++ )  {^264^^^^^260^270^for  ( int row = 0; row < rowCount; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P8_Replace_Mix]^for  ( int row = 0; row < rowDimension; row++ )  {^264^^^^^260^270^for  ( int row = 0; row < rowCount; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P1_Replace_Type]^for  (  long  col = 0; col < columnCount; col++ )  {^265^^^^^260^270^for  ( int col = 0; col < columnCount; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P2_Replace_Operator]^for  ( int col = 0; col <= columnCount; col++ )  {^265^^^^^260^270^for  ( int col = 0; col < columnCount; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P3_Replace_Literal]^for  ( int col = scale; col < columnCount; col++ )  {^265^^^^^260^270^for  ( int col = 0; col < columnCount; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^for  ( int scale = 0; col < columnCount; col++ )  {^265^^^^^260^270^for  ( int col = 0; col < columnCount; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^for  ( int col = 0; col < rowDimension; col++ )  {^265^^^^^260^270^for  ( int col = 0; col < columnCount; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^for  ( int columnCount = 0; col < col; col++ )  {^265^^^^^260^270^for  ( int col = 0; col < columnCount; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P8_Replace_Mix]^for  ( int col = 0; col < rowCount; col++ )  {^265^^^^^260^270^for  ( int col = 0; col < columnCount; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^outData[row][col] = ZEROata[row][col].add ( d ) ;^266^^^^^260^270^outData[row][col] = data[row][col].add ( d ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^outData[row][col] = lu[row][col].add ( d ) ;^266^^^^^260^270^outData[row][col] = data[row][col].add ( d ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P7_Replace_Invocation]^outData[row][col] = data[row][col].divide ( d ) ;^266^^^^^260^270^outData[row][col] = data[row][col].add ( d ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P8_Replace_Mix]^outData[row][col]  =  outData[row][col] ;^266^^^^^260^270^outData[row][col] = data[row][col].add ( d ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^sum = sum.add ( data[row][col].abs (  )  ) ;outData[row][col] = data[row][col].add ( d ) ;^266^^^^^260^270^outData[row][col] = data[row][col].add ( d ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^outData[row][col] = data[row][col].add ( m.getEntry ( row, col )  ) ;outData[row][col] = data[row][col].add ( d ) ;^266^^^^^260^270^outData[row][col] = data[row][col].add ( d ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^outData[row][col] = data[row][col].subtract ( m.getEntry ( row, col )  ) ;outData[row][col] = data[row][col].add ( d ) ;^266^^^^^260^270^outData[row][col] = data[row][col].add ( d ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^out[row][0] = data[row][column];outData[row][col] = data[row][col].add ( d ) ;^266^^^^^260^270^outData[row][col] = data[row][col].add ( d ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^outData[col][row] = data[row][col];outData[row][col] = data[row][col].add ( d ) ;^266^^^^^260^270^outData[row][col] = data[row][col].add ( d ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^outData[row][col] = data[row][col].multiply ( d ) ;outData[row][col] = data[row][col].add ( d ) ;^266^^^^^260^270^outData[row][col] = data[row][col].add ( d ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^outData[row][col] = outData[row][col].add ( d ) ;^266^^^^^260^270^outData[row][col] = data[row][col].add ( d ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^outData[row][col] = d[row][col].add ( data ) ;^266^^^^^260^270^outData[row][col] = data[row][col].add ( d ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P14_Delete_Statement]^^266^^^^^260^270^outData[row][col] = data[row][col].add ( d ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^data[row][col].hashCode (  ) ;outData[row][col] = data[row][col].add ( d ) ;^266^^^^^260^270^outData[row][col] = data[row][col].add ( d ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^outData[row][col] = dataata[row][col].add ( d ) ;^266^^^^^260^270^outData[row][col] = data[row][col].add ( d ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P8_Replace_Mix]^outData[row][col] ;^266^^^^^260^270^outData[row][col] = data[row][col].add ( d ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P1_Replace_Type]^for  (  short  col = 0; col < columnCount; col++ )  {^265^^^^^260^270^for  ( int col = 0; col < columnCount; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P3_Replace_Literal]^for  ( int col = nCols; col < columnCount; col++ )  {^265^^^^^260^270^for  ( int col = 0; col < columnCount; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P3_Replace_Literal]^for  ( int col = -5; col < columnCount; col++ )  {^265^^^^^260^270^for  ( int col = 0; col < columnCount; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^for  ( int rowDimension = 0; col < columnCount; col++ )  {^265^^^^^260^270^for  ( int col = 0; col < columnCount; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P8_Replace_Mix]^for  ( int col = 0; col < scale; col++ )  {^265^^^^^260^270^for  ( int col = 0; col < columnCount; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P8_Replace_Mix]^outData[row][col]  = null ;^266^^^^^260^270^outData[row][col] = data[row][col].add ( d ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P3_Replace_Literal]^for  ( int row = 6; row < rowCount; row++ )  {^264^^^^^260^270^for  ( int row = 0; row < rowCount; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P8_Replace_Mix]^outData[row][col] = ZEROata[row][col].divide ( d ) ;^266^^^^^260^270^outData[row][col] = data[row][col].add ( d ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P4_Replace_Constructor]^return return  new BigMatrixImpl ( nCols, nRows )  ;^269^^^^^260^270^return new BigMatrixImpl ( outData ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^return new BigMatrixImpl ( lu ) ;^269^^^^^260^270^return new BigMatrixImpl ( outData ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P8_Replace_Mix]^return  new BigMatrixImpl ( nCols, nRows )  ;^269^^^^^260^270^return new BigMatrixImpl ( outData ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarAdd [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P1_Replace_Type]^long  rowCount = this.getRowDimension (  ) ;^278^^^^^277^287^int rowCount = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P7_Replace_Invocation]^int rowCount = this.getColumnDimension (  ) ;^278^^^^^277^287^int rowCount = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nCols = this.getColumnDimension (  ) ;int rowCount = this.getRowDimension (  ) ;^278^^^^^277^287^int rowCount = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nCol = this.getColumnDimension (  ) ;int rowCount = this.getRowDimension (  ) ;^278^^^^^277^287^int rowCount = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int columnCount = this.getColumnDimension (  ) ;int rowCount = this.getRowDimension (  ) ;^278^^^^^277^287^int rowCount = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nRows = getRowDimension (  ) ;int rowCount = this.getRowDimension (  ) ;^278^^^^^277^287^int rowCount = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nrows = this.getRowDimension (  ) ;int rowCount = this.getRowDimension (  ) ;^278^^^^^277^287^int rowCount = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nColB = b.getColumnDimension (  ) ;int rowCount = this.getRowDimension (  ) ;^278^^^^^277^287^int rowCount = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nCols = getColumnDimension (  ) ;int rowCount = this.getRowDimension (  ) ;^278^^^^^277^287^int rowCount = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nRowB = b.getRowDimension (  ) ;int rowCount = this.getRowDimension (  ) ;^278^^^^^277^287^int rowCount = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int ncols = this.getColumnDimension (  ) ;int rowCount = this.getRowDimension (  ) ;^278^^^^^277^287^int rowCount = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nRows = this.getRowDimension (  ) ;int rowCount = this.getRowDimension (  ) ;^278^^^^^277^287^int rowCount = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nSum = this.getColumnDimension (  ) ;int rowCount = this.getRowDimension (  ) ;^278^^^^^277^287^int rowCount = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nCols = m.getColumnDimension (  ) ;int rowCount = this.getRowDimension (  ) ;^278^^^^^277^287^int rowCount = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P14_Delete_Statement]^^278^279^^^^277^287^int rowCount = this.getRowDimension (  ) ; int columnCount = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^( this.getRowDimension (  )  )  ) ;int rowCount = this.getRowDimension (  ) ;^278^^^^^277^287^int rowCount = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P12_Insert_Condition]^if  ( b.getRowDimension (  )  != this.getRowDimension (  )  )  { int rowCount = this.getRowDimension (  ) ; }^278^^^^^277^287^int rowCount = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P12_Insert_Condition]^if  ( v.length != this.getColumnDimension (  )  )  { int rowCount = this.getRowDimension (  ) ; }^278^^^^^277^287^int rowCount = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P1_Replace_Type]^short  columnCount = this.getColumnDimension (  ) ;^279^^^^^277^287^int columnCount = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P7_Replace_Invocation]^int columnCount = this.getRowDimension (  ) ;^279^^^^^277^287^int columnCount = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nRows = getRowDimension (  ) ;int columnCount = this.getColumnDimension (  ) ;^279^^^^^277^287^int columnCount = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nrows = this.getRowDimension (  ) ;int columnCount = this.getColumnDimension (  ) ;^279^^^^^277^287^int columnCount = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal[][] out = new BigDecimal[nRows][this.getColumnDimension (  ) ];int columnCount = this.getColumnDimension (  ) ;^279^^^^^277^287^int columnCount = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nColB = b.getColumnDimension (  ) ;int columnCount = this.getColumnDimension (  ) ;^279^^^^^277^287^int columnCount = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int ncols = this.getColumnDimension (  ) ;int columnCount = this.getColumnDimension (  ) ;^279^^^^^277^287^int columnCount = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nSum = this.getColumnDimension (  ) ;int columnCount = this.getColumnDimension (  ) ;^279^^^^^277^287^int columnCount = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nCols = m.getColumnDimension (  ) ;int columnCount = this.getColumnDimension (  ) ;^279^^^^^277^287^int columnCount = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nCols = this.getColumnDimension (  ) ;int columnCount = this.getColumnDimension (  ) ;^279^^^^^277^287^int columnCount = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nCol = this.getColumnDimension (  ) ;int columnCount = this.getColumnDimension (  ) ;^279^^^^^277^287^int columnCount = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nCols = getColumnDimension (  ) ;int columnCount = this.getColumnDimension (  ) ;^279^^^^^277^287^int columnCount = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nRowB = b.getRowDimension (  ) ;int columnCount = this.getColumnDimension (  ) ;^279^^^^^277^287^int columnCount = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int rowCount = this.getRowDimension (  ) ;int columnCount = this.getColumnDimension (  ) ;^279^^^^^277^287^int columnCount = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nRows = this.getRowDimension (  ) ;int columnCount = this.getColumnDimension (  ) ;^279^^^^^277^287^int columnCount = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P14_Delete_Statement]^^279^^^^^277^287^int columnCount = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal[] out = new BigDecimal[v.length];BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^280^^^^^277^287^BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal[][] out = new BigDecimal[nRows][1];BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^280^^^^^277^287^BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal bd[] = new BigDecimal[v.length];BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^280^^^^^277^287^BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal bd[] = new BigDecimal[b.length];BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^280^^^^^277^287^BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal[] out = new BigDecimal[nRows];BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^280^^^^^277^287^BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal[][] out = new BigDecimal[nRows][this.getColumnDimension (  ) ];BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^280^^^^^277^287^BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal[][] out = new BigDecimal[1][ncols];BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^280^^^^^277^287^BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal[] out = new BigDecimal[nCols];BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^280^^^^^277^287^BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal[][] outData = new BigDecimal[nRows][nCols];BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^280^^^^^277^287^BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal[] out = new BigDecimal[ncols];BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^280^^^^^277^287^BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal[][] bp = new BigDecimal[nRowB][nColB];BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^280^^^^^277^287^BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P1_Replace_Type]^for  (  long  row = 0; row < rowCount; row++ )  {^281^^^^^277^287^for  ( int row = 0; row < rowCount; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P2_Replace_Operator]^for  ( int row = 0; row == rowCount; row++ )  {^281^^^^^277^287^for  ( int row = 0; row < rowCount; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P2_Replace_Operator]^for  ( int row = 0; row > rowCount; row++ )  {^281^^^^^277^287^for  ( int row = 0; row < rowCount; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P3_Replace_Literal]^for  ( int row = rowCount; row < rowCount; row++ )  {^281^^^^^277^287^for  ( int row = 0; row < rowCount; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P3_Replace_Literal]^for  ( int row = rowDimension; row < rowCount; row++ )  {^281^^^^^277^287^for  ( int row = 0; row < rowCount; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^for  ( int row = 0; row < rowDimension; row++ )  {^281^^^^^277^287^for  ( int row = 0; row < rowCount; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P8_Replace_Mix]^for  ( int row = 0; row < roundingMode; row++ )  {^281^^^^^277^287^for  ( int row = 0; row < rowCount; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P1_Replace_Type]^for  (  short  col = 0; col < columnCount; col++ )  {^282^^^^^277^287^for  ( int col = 0; col < columnCount; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P2_Replace_Operator]^for  ( int col = 0; col <= columnCount; col++ )  {^282^^^^^277^287^for  ( int col = 0; col < columnCount; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P3_Replace_Literal]^for  ( int col = -3; col < columnCount; col++ )  {^282^^^^^277^287^for  ( int col = 0; col < columnCount; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^for  ( int roundingMode = 0; col < columnCount; col++ )  {^282^^^^^277^287^for  ( int col = 0; col < columnCount; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^for  ( int col = 0; col < row; col++ )  {^282^^^^^277^287^for  ( int col = 0; col < columnCount; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^for  ( int columnCount = 0; col < col; col++ )  {^282^^^^^277^287^for  ( int col = 0; col < columnCount; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P8_Replace_Mix]^for  ( int rowDimension = 0; col < columnCount; col++ )  {^282^^^^^277^287^for  ( int col = 0; col < columnCount; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^outData[row][col] = ZEROata[row][col].multiply ( d ) ;^283^^^^^277^287^outData[row][col] = data[row][col].multiply ( d ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^outData[row][col] = lu[row][col].multiply ( d ) ;^283^^^^^277^287^outData[row][col] = data[row][col].multiply ( d ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^outData[row][col] = d[row][col].multiply ( data ) ;^283^^^^^277^287^outData[row][col] = data[row][col].multiply ( d ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P7_Replace_Invocation]^outData[row][col] = data[row][col].divide ( d ) ;^283^^^^^277^287^outData[row][col] = data[row][col].multiply ( d ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P7_Replace_Invocation]^outData[row][col] = data[row][col] .multiply ( ONE )  ;^283^^^^^277^287^outData[row][col] = data[row][col].multiply ( d ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P8_Replace_Mix]^outData[row][col] ;^283^^^^^277^287^outData[row][col] = data[row][col].multiply ( d ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^outData[row][col] = data[row][col].add ( m.getEntry ( row, col )  ) ;outData[row][col] = data[row][col].multiply ( d ) ;^283^^^^^277^287^outData[row][col] = data[row][col].multiply ( d ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^out[i] = data[row][i].doubleValue (  ) ;outData[row][col] = data[row][col].multiply ( d ) ;^283^^^^^277^287^outData[row][col] = data[row][col].multiply ( d ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^outData[row][col] = data[row][col].subtract ( m.getEntry ( row, col )  ) ;outData[row][col] = data[row][col].multiply ( d ) ;^283^^^^^277^287^outData[row][col] = data[row][col].multiply ( d ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^out[row][0] = data[row][column];outData[row][col] = data[row][col].multiply ( d ) ;^283^^^^^277^287^outData[row][col] = data[row][col].multiply ( d ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^outData[col][row] = data[row][col];outData[row][col] = data[row][col].multiply ( d ) ;^283^^^^^277^287^outData[row][col] = data[row][col].multiply ( d ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^outData[row][col] = data[row][col].add ( d ) ;outData[row][col] = data[row][col].multiply ( d ) ;^283^^^^^277^287^outData[row][col] = data[row][col].multiply ( d ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^out[i] = data[i][col].doubleValue (  ) ;outData[row][col] = data[row][col].multiply ( d ) ;^283^^^^^277^287^outData[row][col] = data[row][col].multiply ( d ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^outData[row][col] = outData[row][col].multiply ( d ) ;^283^^^^^277^287^outData[row][col] = data[row][col].multiply ( d ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P14_Delete_Statement]^^283^^^^^277^287^outData[row][col] = data[row][col].multiply ( d ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^outData[row][col] = dataata[row][col].multiply ( d ) ;^283^^^^^277^287^outData[row][col] = data[row][col].multiply ( d ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P8_Replace_Mix]^outData[row][col]  =  outData[row][col] ;^283^^^^^277^287^outData[row][col] = data[row][col].multiply ( d ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P1_Replace_Type]^for  (  long  col = 0; col < columnCount; col++ )  {^282^^^^^277^287^for  ( int col = 0; col < columnCount; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P3_Replace_Literal]^for  ( int col = 3; col < columnCount; col++ )  {^282^^^^^277^287^for  ( int col = 0; col < columnCount; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^for  ( int row = 0; col < columnCount; col++ )  {^282^^^^^277^287^for  ( int col = 0; col < columnCount; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P8_Replace_Mix]^outData[row][col]  = null ;^283^^^^^277^287^outData[row][col] = data[row][col].multiply ( d ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P3_Replace_Literal]^for  ( int row = columnDimension; row < rowCount; row++ )  {^281^^^^^277^287^for  ( int row = 0; row < rowCount; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P3_Replace_Literal]^for  ( int col = parity; col < columnCount; col++ )  {^282^^^^^277^287^for  ( int col = 0; col < columnCount; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P4_Replace_Constructor]^return return  new BigMatrixImpl ( nCols, nRows )  ;^286^^^^^277^287^return new BigMatrixImpl ( outData ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P8_Replace_Mix]^return  new BigMatrixImpl ( nCols, nRows )  ;^286^^^^^277^287^return new BigMatrixImpl ( outData ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^return new BigMatrixImpl ( lu ) ;^286^^^^^277^287^return new BigMatrixImpl ( outData ) ;^[CLASS] BigMatrixImpl  [METHOD] scalarMultiply [RETURN_TYPE] BigMatrix   BigDecimal d [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  nCols  nRows  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  BigDecimal[][]  d  data  lu  outData  
[P2_Replace_Operator]^if  ( this.getColumnDimension (  )  >= m.getRowDimension (  )  )  {^297^^^^^296^315^if  ( this.getColumnDimension (  )  != m.getRowDimension (  )  )  {^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P7_Replace_Invocation]^if  ( this.getRowDimension (  )  != m.getRowDimension (  )  )  {^297^^^^^296^315^if  ( this.getColumnDimension (  )  != m.getRowDimension (  )  )  {^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P7_Replace_Invocation]^if  ( this.getColumnDimension (  )  != m.multiply (  )  )  {^297^^^^^296^315^if  ( this.getColumnDimension (  )  != m.getRowDimension (  )  )  {^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P9_Replace_Statement]^if  ( m.getColumnDimension (  )  != nCols || m.getRowDimension (  )  != nRows )  {^297^^^^^296^315^if  ( this.getColumnDimension (  )  != m.getRowDimension (  )  )  {^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P9_Replace_Statement]^if  ( b.getRowDimension (  )  != this.getRowDimension (  )  )  {^297^^^^^296^315^if  ( this.getColumnDimension (  )  != m.getRowDimension (  )  )  {^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("Matrices are not multiplication compatible.");^297^298^299^^^296^315^if  ( this.getColumnDimension (  )  != m.getRowDimension (  )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P16_Remove_Block]^^297^298^299^^^296^315^if  ( this.getColumnDimension (  )  != m.getRowDimension (  )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P13_Insert_Block]^if  ( ! ( isSquare (  )  )  )  {     throw new IllegalArgumentException ( "matrix is not square" ) ; }^297^^^^^296^315^[Delete]^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P13_Insert_Block]^if  (  ( b.length )  != nRows )  {     throw new IllegalArgumentException ( "constant vector has wrong length" ) ; }^297^^^^^296^315^[Delete]^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P13_Insert_Block]^if  ( nRows == 0 )  {     throw new IllegalArgumentException ( "Matrix must have at least one row." ) ; }^297^^^^^296^315^[Delete]^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P13_Insert_Block]^if  (  ( subMatrix[r].length )  != nCols )  {     throw new IllegalArgumentException ( "All input rows must have the same length." ) ; }^297^^^^^296^315^[Delete]^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P13_Insert_Block]^if  (  ( v.length )  != nRows )  {     throw new IllegalArgumentException ( "vector has wrong length" ) ; }^297^^^^^296^315^[Delete]^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P13_Insert_Block]^if  (  ( b.getRowDimension (  )  )  !=  ( this.getRowDimension (  )  )  )  {     throw new IllegalArgumentException ( "Incorrect row dimension" ) ; }^297^^^^^296^315^[Delete]^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P13_Insert_Block]^if  (  ( v.length )  !=  ( this.getColumnDimension (  )  )  )  {     throw new IllegalArgumentException ( "vector has wrong length" ) ; }^297^^^^^296^315^[Delete]^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P13_Insert_Block]^if  (  (  ( this.getColumnDimension (  )  )  !=  ( m.getColumnDimension (  )  )  )  ||  (  ( this.getRowDimension (  )  )  !=  ( m.getRowDimension (  )  )  )  )  {     throw new IllegalArgumentException ( "matrix dimension mismatch" ) ; }^297^^^^^296^315^[Delete]^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P13_Insert_Block]^if  (  ( d[row].length )  != nCols )  {     throw new IllegalArgumentException ( "All input rows must have the same length." ) ; }^297^^^^^296^315^[Delete]^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P13_Insert_Block]^if  ( nCols == 0 )  {     throw new IllegalArgumentException ( "Matrix must have at least one column." ) ; }^297^^^^^296^315^[Delete]^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P13_Insert_Block]^if  (  ( rowDimension <= 0 )  ||  ( columnDimension <= 0 )  )  {     throw new IllegalArgumentException ( "row and column dimensions must be positive" ) ; }^297^^^^^296^315^[Delete]^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P13_Insert_Block]^if  (  ( this.getColumnDimension (  )  )  !=  ( m.getRowDimension (  )  )  )  {     throw new IllegalArgumentException ( "Matrices are not multiplication compatible." ) ; }^298^^^^^296^315^[Delete]^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P8_Replace_Mix]^return 0;^298^^^^^296^315^throw new IllegalArgumentException  (" ")  ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Matrix must have at least one row." ) ;throw new IllegalArgumentException  (" ")  ;^298^^^^^296^315^throw new IllegalArgumentException  (" ")  ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^throw new InvalidMatrixException  (" ")  ;throw new IllegalArgumentException  (" ")  ;^298^^^^^296^315^throw new IllegalArgumentException  (" ")  ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^throw new MatrixIndexException  (" ")  ;throw new IllegalArgumentException  (" ")  ;^298^^^^^296^315^throw new IllegalArgumentException  (" ")  ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P13_Insert_Block]^if  ( nCols == 0 )  {     throw new IllegalArgumentException ( "Matrix must have at least one column." ) ; }^298^^^^^296^315^[Delete]^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P7_Replace_Invocation]^if  ( this.getColumnDimension (  )  != m .getColumnDimension (  )   )  {^297^^^^^296^315^if  ( this.getColumnDimension (  )  != m.getRowDimension (  )  )  {^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P1_Replace_Type]^short  nRows = this.getRowDimension (  ) ;^300^^^^^296^315^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P7_Replace_Invocation]^int nRows = this.getColumnDimension (  ) ;^300^^^^^296^315^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nCols = this.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^300^^^^^296^315^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nCol = this.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^300^^^^^296^315^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int columnCount = this.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^300^^^^^296^315^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nRows = getRowDimension (  ) ;int nRows = this.getRowDimension (  ) ;^300^^^^^296^315^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nrows = this.getRowDimension (  ) ;int nRows = this.getRowDimension (  ) ;^300^^^^^296^315^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nColB = b.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^300^^^^^296^315^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nCols = getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^300^^^^^296^315^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nRowB = b.getRowDimension (  ) ;int nRows = this.getRowDimension (  ) ;^300^^^^^296^315^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int rowCount = this.getRowDimension (  ) ;int nRows = this.getRowDimension (  ) ;^300^^^^^296^315^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int ncols = this.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^300^^^^^296^315^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nSum = this.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^300^^^^^296^315^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nCols = m.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^300^^^^^296^315^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P14_Delete_Statement]^^300^301^^^^296^315^int nRows = this.getRowDimension (  ) ; int nCols = m.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^( this.getRowDimension (  )  )  ) ;int nRows = this.getRowDimension (  ) ;^300^^^^^296^315^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P1_Replace_Type]^short  nCols = m.getColumnDimension (  ) ;^301^^^^^296^315^int nCols = m.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P7_Replace_Invocation]^int nCols = m.multiply (  ) ;^301^^^^^296^315^int nCols = m.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P7_Replace_Invocation]^int nCols = m .getRowDimension (  )  ;^301^^^^^296^315^int nCols = m.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nCols = this.getColumnDimension (  ) ;int nCols = m.getColumnDimension (  ) ;^301^^^^^296^315^int nCols = m.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nCol = this.getColumnDimension (  ) ;int nCols = m.getColumnDimension (  ) ;^301^^^^^296^315^int nCols = m.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int columnCount = this.getColumnDimension (  ) ;int nCols = m.getColumnDimension (  ) ;^301^^^^^296^315^int nCols = m.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nRows = getRowDimension (  ) ;int nCols = m.getColumnDimension (  ) ;^301^^^^^296^315^int nCols = m.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nrows = this.getRowDimension (  ) ;int nCols = m.getColumnDimension (  ) ;^301^^^^^296^315^int nCols = m.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nColB = b.getColumnDimension (  ) ;int nCols = m.getColumnDimension (  ) ;^301^^^^^296^315^int nCols = m.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nCols = getColumnDimension (  ) ;int nCols = m.getColumnDimension (  ) ;^301^^^^^296^315^int nCols = m.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nRowB = b.getRowDimension (  ) ;int nCols = m.getColumnDimension (  ) ;^301^^^^^296^315^int nCols = m.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int rowCount = this.getRowDimension (  ) ;int nCols = m.getColumnDimension (  ) ;^301^^^^^296^315^int nCols = m.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int ncols = this.getColumnDimension (  ) ;int nCols = m.getColumnDimension (  ) ;^301^^^^^296^315^int nCols = m.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nRows = this.getRowDimension (  ) ;int nCols = m.getColumnDimension (  ) ;^301^^^^^296^315^int nCols = m.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nSum = this.getColumnDimension (  ) ;int nCols = m.getColumnDimension (  ) ;^301^^^^^296^315^int nCols = m.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P12_Insert_Condition]^if  ( v.length != this.getColumnDimension (  )  )  { int nCols = m.getColumnDimension (  ) ; }^301^^^^^296^315^int nCols = m.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P14_Delete_Statement]^^301^302^^^^296^315^int nCols = m.getColumnDimension (  ) ; int nSum = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P1_Replace_Type]^short  nSum = this.getColumnDimension (  ) ;^302^^^^^296^315^int nSum = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P7_Replace_Invocation]^int nSum = this.getRowDimension (  ) ;^302^^^^^296^315^int nSum = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nCols = this.getColumnDimension (  ) ;int nSum = this.getColumnDimension (  ) ;^302^^^^^296^315^int nSum = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nCol = this.getColumnDimension (  ) ;int nSum = this.getColumnDimension (  ) ;^302^^^^^296^315^int nSum = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int columnCount = this.getColumnDimension (  ) ;int nSum = this.getColumnDimension (  ) ;^302^^^^^296^315^int nSum = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nRows = getRowDimension (  ) ;int nSum = this.getColumnDimension (  ) ;^302^^^^^296^315^int nSum = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nrows = this.getRowDimension (  ) ;int nSum = this.getColumnDimension (  ) ;^302^^^^^296^315^int nSum = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nColB = b.getColumnDimension (  ) ;int nSum = this.getColumnDimension (  ) ;^302^^^^^296^315^int nSum = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nCols = getColumnDimension (  ) ;int nSum = this.getColumnDimension (  ) ;^302^^^^^296^315^int nSum = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nRowB = b.getRowDimension (  ) ;int nSum = this.getColumnDimension (  ) ;^302^^^^^296^315^int nSum = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int rowCount = this.getRowDimension (  ) ;int nSum = this.getColumnDimension (  ) ;^302^^^^^296^315^int nSum = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int ncols = this.getColumnDimension (  ) ;int nSum = this.getColumnDimension (  ) ;^302^^^^^296^315^int nSum = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nRows = this.getRowDimension (  ) ;int nSum = this.getColumnDimension (  ) ;^302^^^^^296^315^int nSum = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nCols = m.getColumnDimension (  ) ;int nSum = this.getColumnDimension (  ) ;^302^^^^^296^315^int nSum = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P12_Insert_Condition]^if  ( v.length != this.getColumnDimension (  )  )  { int nSum = this.getColumnDimension (  ) ; }^302^^^^^296^315^int nSum = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P14_Delete_Statement]^^302^^^^^296^315^int nSum = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal[] out = new BigDecimal[v.length];BigDecimal[][] outData = new BigDecimal[nRows][nCols];^303^^^^^296^315^BigDecimal[][] outData = new BigDecimal[nRows][nCols];^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal[][] out = new BigDecimal[nRows][1];BigDecimal[][] outData = new BigDecimal[nRows][nCols];^303^^^^^296^315^BigDecimal[][] outData = new BigDecimal[nRows][nCols];^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal bd[] = new BigDecimal[v.length];BigDecimal[][] outData = new BigDecimal[nRows][nCols];^303^^^^^296^315^BigDecimal[][] outData = new BigDecimal[nRows][nCols];^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal bd[] = new BigDecimal[b.length];BigDecimal[][] outData = new BigDecimal[nRows][nCols];^303^^^^^296^315^BigDecimal[][] outData = new BigDecimal[nRows][nCols];^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];BigDecimal[][] outData = new BigDecimal[nRows][nCols];^303^^^^^296^315^BigDecimal[][] outData = new BigDecimal[nRows][nCols];^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal[] out = new BigDecimal[nRows];BigDecimal[][] outData = new BigDecimal[nRows][nCols];^303^^^^^296^315^BigDecimal[][] outData = new BigDecimal[nRows][nCols];^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal[][] out = new BigDecimal[nRows][this.getColumnDimension (  ) ];BigDecimal[][] outData = new BigDecimal[nRows][nCols];^303^^^^^296^315^BigDecimal[][] outData = new BigDecimal[nRows][nCols];^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal[][] out = new BigDecimal[1][ncols];BigDecimal[][] outData = new BigDecimal[nRows][nCols];^303^^^^^296^315^BigDecimal[][] outData = new BigDecimal[nRows][nCols];^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal[][] outData = out.getDataRef (  ) ;BigDecimal[][] outData = new BigDecimal[nRows][nCols];^303^^^^^296^315^BigDecimal[][] outData = new BigDecimal[nRows][nCols];^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal[] out = new BigDecimal[nCols];BigDecimal[][] outData = new BigDecimal[nRows][nCols];^303^^^^^296^315^BigDecimal[][] outData = new BigDecimal[nRows][nCols];^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal[] out = new BigDecimal[ncols];BigDecimal[][] outData = new BigDecimal[nRows][nCols];^303^^^^^296^315^BigDecimal[][] outData = new BigDecimal[nRows][nCols];^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal[][] bp = new BigDecimal[nRowB][nColB];BigDecimal[][] outData = new BigDecimal[nRows][nCols];^303^^^^^296^315^BigDecimal[][] outData = new BigDecimal[nRows][nCols];^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^BigDecimal sum = d;^304^^^^^296^315^BigDecimal sum = ZERO;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal largest = ZERO;BigDecimal sum = ZERO;^304^^^^^296^315^BigDecimal sum = ZERO;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal maxColSum = ZERO;BigDecimal sum = ZERO;^304^^^^^296^315^BigDecimal sum = ZERO;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal tmp = ZERO;BigDecimal sum = ZERO;^304^^^^^296^315^BigDecimal sum = ZERO;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P1_Replace_Type]^for  (  short  row = 0; row < nRows; row++ )  {^305^^^^^296^315^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P2_Replace_Operator]^for  ( int row = 0; row <= nRows; row++ )  {^305^^^^^296^315^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P2_Replace_Operator]^for  ( int row = 0; row > nRows; row++ )  {^305^^^^^296^315^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P3_Replace_Literal]^for  ( int row = 4; row < nRows; row++ )  {^305^^^^^296^315^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P3_Replace_Literal]^for  ( int row = -5; row < nRows; row++ )  {^305^^^^^296^315^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P3_Replace_Literal]^for  ( int row = ; row < nRows; row++ )  {^305^^^^^296^315^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^for  ( int roundingMode = 0; row < nRows; row++ )  {^305^^^^^296^315^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^for  ( int row = 0; row < roundingMode; row++ )  {^305^^^^^296^315^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^for  ( scalent row = 0; row < nRows; row++ )  {^305^^^^^296^315^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P8_Replace_Mix]^for  ( int row = 0; row < parity; row++ )  {^305^^^^^296^315^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P1_Replace_Type]^for  (  long  col = 0; col < nCols; col++ )  {^306^^^^^296^315^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P2_Replace_Operator]^for  ( int col = 0; col <= nCols; col++ )  {^306^^^^^296^315^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P3_Replace_Literal]^for  ( int col = nCols; col < nCols; col++ )  {^306^^^^^296^315^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P3_Replace_Literal]^for  ( int col = nSum; col < nCols; col++ )  {^306^^^^^296^315^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^for  ( int scale = 0; col < nCols; col++ )  {^306^^^^^296^315^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^for  ( int col = 0; col < roundingMode; col++ )  {^306^^^^^296^315^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^for  ( roundingModent col = 0; col < nCols; col++ )  {^306^^^^^296^315^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^for  ( int nCols = 0; col < col; col++ )  {^306^^^^^296^315^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^for  ( nColsnt col = 0; col < i; col++ )  {^306^^^^^296^315^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P8_Replace_Mix]^for  ( int col = 0; col < rowCount; col++ )  {^306^^^^^296^315^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P1_Replace_Type]^for  (  short  i = 0; i < nSum; i++ )  {^308^^^^^296^315^for  ( int i = 0; i < nSum; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P2_Replace_Operator]^for  ( int i = 0; i <= nSum; i++ )  {^308^^^^^296^315^for  ( int i = 0; i < nSum; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P3_Replace_Literal]^for  ( int i = -9; i < nSum; i++ )  {^308^^^^^296^315^for  ( int i = 0; i < nSum; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^for  ( roundingModent i = 0; i < nSum; i++ )  {^308^^^^^296^315^for  ( int i = 0; i < nSum; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^for  ( int i = 0; i < row; i++ )  {^308^^^^^296^315^for  ( int i = 0; i < nSum; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^for  ( nSumnt i = 0; i < i; i++ )  {^308^^^^^296^315^for  ( int i = 0; i < nSum; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P8_Replace_Mix]^for  ( int i = 0; i < scale; i++ )  {^308^^^^^296^315^for  ( int i = 0; i < nSum; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^sum = sum.add ( data[row][i].multiply ( m.getEntry ( row, col )  )  ) ;^309^^^^^296^315^sum = sum.add ( data[row][i].multiply ( m.getEntry ( i, col )  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^sum = sum.add ( data[row][i].multiply ( m.getEntry ( i, rowDimension )  )  ) ;^309^^^^^296^315^sum = sum.add ( data[row][i].multiply ( m.getEntry ( i, col )  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^sum = sum.add ( outData[row][i].multiply ( m.getEntry ( i, col )  )  ) ;^309^^^^^296^315^sum = sum.add ( data[row][i].multiply ( m.getEntry ( i, col )  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^sum = sum.add ( data[row][i].multiply ( m.getEntry (  col )  )  ) ;^309^^^^^296^315^sum = sum.add ( data[row][i].multiply ( m.getEntry ( i, col )  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^sum = sum.add ( data[row][i].multiply ( m.getEntry ( i )  )  ) ;^309^^^^^296^315^sum = sum.add ( data[row][i].multiply ( m.getEntry ( i, col )  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^sum = col.add ( data[row][i].multiply ( m.getEntry ( i, sum )  )  ) ;^309^^^^^296^315^sum = sum.add ( data[row][i].multiply ( m.getEntry ( i, col )  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^sum = sum.add ( data[row][i].multiply ( i.getEntry ( m, col )  )  ) ;^309^^^^^296^315^sum = sum.add ( data[row][i].multiply ( m.getEntry ( i, col )  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^sum = m.add ( data[row][i].multiply ( sum.getEntry ( i, col )  )  ) ;^309^^^^^296^315^sum = sum.add ( data[row][i].multiply ( m.getEntry ( i, col )  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^sum = sum.add ( m[row][i].multiply ( data.getEntry ( i, col )  )  ) ;^309^^^^^296^315^sum = sum.add ( data[row][i].multiply ( m.getEntry ( i, col )  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P8_Replace_Mix]^sum =  ZERO.add ( data[row][i].multiply ( m.getEntry ( i, col )  )  ) ;^309^^^^^296^315^sum = sum.add ( data[row][i].multiply ( m.getEntry ( i, col )  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^sum = sum.add ( data[row][col].abs (  )  ) ;sum = sum.add ( data[row][i].multiply ( m.getEntry ( i, col )  )  ) ;^309^^^^^296^315^sum = sum.add ( data[row][i].multiply ( m.getEntry ( i, col )  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^outData[row][col] = data[row][col].add ( m.getEntry ( row, col )  ) ;sum = sum.add ( data[row][i].multiply ( m.getEntry ( i, col )  )  ) ;^309^^^^^296^315^sum = sum.add ( data[row][i].multiply ( m.getEntry ( i, col )  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^outData[row][col] = data[row][col].subtract ( m.getEntry ( row, col )  ) ;sum = sum.add ( data[row][i].multiply ( m.getEntry ( i, col )  )  ) ;^309^^^^^296^315^sum = sum.add ( data[row][i].multiply ( m.getEntry ( i, col )  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^sum = sum.add ( data[row][i].multiply ( v[i] )  ) ;sum = sum.add ( data[row][i].multiply ( m.getEntry ( i, col )  )  ) ;^309^^^^^296^315^sum = sum.add ( data[row][i].multiply ( m.getEntry ( i, col )  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^sum = sum.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;sum = sum.add ( data[row][i].multiply ( m.getEntry ( i, col )  )  ) ;^309^^^^^296^315^sum = sum.add ( data[row][i].multiply ( m.getEntry ( i, col )  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^sum = sum.add ( data[i][col].multiply ( v[i] )  ) ;sum = sum.add ( data[row][i].multiply ( m.getEntry ( i, col )  )  ) ;^309^^^^^296^315^sum = sum.add ( data[row][i].multiply ( m.getEntry ( i, col )  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P12_Insert_Condition]^if  ( !data[row][col].equals ( m.getEntry ( row, col )  )  )  { sum = sum.add ( data[row][i].multiply ( m.getEntry ( i, col )  )  ) ; }^309^^^^^296^315^sum = sum.add ( data[row][i].multiply ( m.getEntry ( i, col )  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^sum = d.add ( data[row][i].multiply ( m.getEntry ( i, col )  )  ) ;^309^^^^^296^315^sum = sum.add ( data[row][i].multiply ( m.getEntry ( i, col )  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^sum = sum.add ( data[row][i].multiply ( m.getEntry ( i, row )  )  ) ;^309^^^^^296^315^sum = sum.add ( data[row][i].multiply ( m.getEntry ( i, col )  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P7_Replace_Invocation]^sum = sum.add ( data[row][i].multiply ( m .getRowDimension (  )   )  ) ;^309^^^^^296^315^sum = sum.add ( data[row][i].multiply ( m.getEntry ( i, col )  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P14_Delete_Statement]^^309^^^^^296^315^sum = sum.add ( data[row][i].multiply ( m.getEntry ( i, col )  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^sum = sum.add ( data[row][i].multiply ( m.getEntry ( roundingMode, col )  )  ) ;^309^^^^^296^315^sum = sum.add ( data[row][i].multiply ( m.getEntry ( i, col )  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^sum = sum.add ( data[row][i].multiply ( m.getEntry ( i, rowCount )  )  ) ;^309^^^^^296^315^sum = sum.add ( data[row][i].multiply ( m.getEntry ( i, col )  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^sum = sum.add ( data[row][i].multiply ( m.getEntry ( col, i )  )  ) ;^309^^^^^296^315^sum = sum.add ( data[row][i].multiply ( m.getEntry ( i, col )  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^sum = d;^307^^^^^296^315^sum = ZERO;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P8_Replace_Mix]^sum  =  sum ;^307^^^^^296^315^sum = ZERO;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^sum = data.add ( sum[row][i].multiply ( m.getEntry ( i, col )  )  ) ;^309^^^^^296^315^sum = sum.add ( data[row][i].multiply ( m.getEntry ( i, col )  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P7_Replace_Invocation]^sum = sum .add ( m )   ) ;^309^^^^^296^315^sum = sum.add ( data[row][i].multiply ( m.getEntry ( i, col )  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P7_Replace_Invocation]^sum = sum.add ( data[row][i] .multiply ( ONE )   ) ;^309^^^^^296^315^sum = sum.add ( data[row][i].multiply ( m.getEntry ( i, col )  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^outData[row][col] = d;^311^^^^^296^315^outData[row][col] = sum;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P8_Replace_Mix]^outData[row][col] ;^311^^^^^296^315^outData[row][col] = sum;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^out[row] = sum;outData[row][col] = sum;^311^^^^^296^315^outData[row][col] = sum;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^out[col] = sum;outData[row][col] = sum;^311^^^^^296^315^outData[row][col] = sum;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^lu[row][col] = sum;outData[row][col] = sum;^311^^^^^296^315^outData[row][col] = sum;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P3_Replace_Literal]^for  ( int i = -1; i < nSum; i++ )  {^308^^^^^296^315^for  ( int i = 0; i < nSum; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^sum = sum.add ( data[row][i].multiply ( m.getEntry ( rowDimension, col )  )  ) ;^309^^^^^296^315^sum = sum.add ( data[row][i].multiply ( m.getEntry ( i, col )  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^sum = sum.add ( data[row][i].multiply ( m.getEntry ( i, parity )  )  ) ;^309^^^^^296^315^sum = sum.add ( data[row][i].multiply ( m.getEntry ( i, col )  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^sum = sum.add ( i[row][i].multiply ( m.getEntry ( data, col )  )  ) ;^309^^^^^296^315^sum = sum.add ( data[row][i].multiply ( m.getEntry ( i, col )  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P7_Replace_Invocation]^sum = sum.add ( data[row][i] .multiply ( sum )   ) ;^309^^^^^296^315^sum = sum.add ( data[row][i].multiply ( m.getEntry ( i, col )  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^sum = sum.add ( data[row][i].multiply ( col.getEntry ( i, m )  )  ) ;^309^^^^^296^315^sum = sum.add ( data[row][i].multiply ( m.getEntry ( i, col )  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^sum = sum.add ( col[row][i].multiply ( m.getEntry ( i, data )  )  ) ;^309^^^^^296^315^sum = sum.add ( data[row][i].multiply ( m.getEntry ( i, col )  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^sum = sum.add ( data[row][i].multiply ( m.getEntry ( i, roundingMode )  )  ) ;^309^^^^^296^315^sum = sum.add ( data[row][i].multiply ( m.getEntry ( i, col )  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P2_Replace_Operator]^for  ( int i = 0; i > nSum; i++ )  {^308^^^^^296^315^for  ( int i = 0; i < nSum; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P3_Replace_Literal]^for  ( int i = columnCount; i < nSum; i++ )  {^308^^^^^296^315^for  ( int i = 0; i < nSum; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^for  ( paritynt i = 0; i < nSum; i++ )  {^308^^^^^296^315^for  ( int i = 0; i < nSum; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^for  ( int i = 0; i < roundingMode; i++ )  {^308^^^^^296^315^for  ( int i = 0; i < nSum; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^sum = sum.add ( data[row][i].multiply ( m.getEntry ( scale, col )  )  ) ;^309^^^^^296^315^sum = sum.add ( data[row][i].multiply ( m.getEntry ( i, col )  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^sum = sum.add ( data[row][i].multiply ( m.getEntry ( i, scale )  )  ) ;^309^^^^^296^315^sum = sum.add ( data[row][i].multiply ( m.getEntry ( i, col )  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^sum = i.add ( data[row][i].multiply ( m.getEntry ( sum, col )  )  ) ;^309^^^^^296^315^sum = sum.add ( data[row][i].multiply ( m.getEntry ( i, col )  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^sum = sum.add ( data[row][i].multiply ( m.getEntry ( rowCount, col )  )  ) ;^309^^^^^296^315^sum = sum.add ( data[row][i].multiply ( m.getEntry ( i, col )  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P8_Replace_Mix]^sum  = null ;^307^^^^^296^315^sum = ZERO;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P8_Replace_Mix]^outData[row][col]  = null ;^311^^^^^296^315^outData[row][col] = sum;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P1_Replace_Type]^for  (  short  col = 0; col < nCols; col++ )  {^306^^^^^296^315^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P3_Replace_Literal]^for  ( int col = 8; col < nCols; col++ )  {^306^^^^^296^315^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P1_Replace_Type]^for  (  long  i = 0; i < nSum; i++ )  {^308^^^^^296^315^for  ( int i = 0; i < nSum; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P3_Replace_Literal]^for  ( int i = 1; i < nSum; i++ )  {^308^^^^^296^315^for  ( int i = 0; i < nSum; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^sum = sum.add ( data[row][i].multiply ( m.getEntry ( parity, col )  )  ) ;^309^^^^^296^315^sum = sum.add ( data[row][i].multiply ( m.getEntry ( i, col )  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P2_Replace_Operator]^for  ( int col = 0; col == nCols; col++ )  {^306^^^^^296^315^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P3_Replace_Literal]^for  ( int col = row; col < nCols; col++ )  {^306^^^^^296^315^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^for  ( int roundingMode = 0; col < nCols; col++ )  {^306^^^^^296^315^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^for  ( rownt col = 0; col < nCols; col++ )  {^306^^^^^296^315^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^for  ( colnt i = 0; col < nCols; col++ )  {^306^^^^^296^315^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P8_Replace_Mix]^for  ( int col = 0; col < scale; col++ )  {^306^^^^^296^315^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P2_Replace_Operator]^for  ( int i = 0; i == nSum; i++ )  {^308^^^^^296^315^for  ( int i = 0; i < nSum; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P3_Replace_Literal]^for  ( int i = roundingMode; i < nSum; i++ )  {^308^^^^^296^315^for  ( int i = 0; i < nSum; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P8_Replace_Mix]^for  ( int i = 0; i < rowCount; i++ )  {^308^^^^^296^315^for  ( int i = 0; i < nSum; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P8_Replace_Mix]^outData[row][col]  =  outData[row][col] ;^311^^^^^296^315^outData[row][col] = sum;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P7_Replace_Invocation]^sum = sum.add ( data[row][i] .multiply ( TOO_SMALL )   ) ;^309^^^^^296^315^sum = sum.add ( data[row][i].multiply ( m.getEntry ( i, col )  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P3_Replace_Literal]^for  ( int i = 4; i < nSum; i++ )  {^308^^^^^296^315^for  ( int i = 0; i < nSum; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^outData[row][col] = ZERO;^311^^^^^296^315^outData[row][col] = sum;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P1_Replace_Type]^for  (  long  row = 0; row < nRows; row++ )  {^305^^^^^296^315^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P3_Replace_Literal]^for  ( int row = -3; row < nRows; row++ )  {^305^^^^^296^315^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P3_Replace_Literal]^for  ( int col = -1; col < nCols; col++ )  {^306^^^^^296^315^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P4_Replace_Constructor]^return return  new BigMatrixImpl ( nCols, nRows )  ;^314^^^^^296^315^return new BigMatrixImpl ( outData ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^return new BigMatrixImpl ( lu ) ;^314^^^^^296^315^return new BigMatrixImpl ( outData ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P8_Replace_Mix]^return  new BigMatrixImpl ( nCols, nRows )  ;^314^^^^^296^315^return new BigMatrixImpl ( outData ) ;^[CLASS] BigMatrixImpl  [METHOD] multiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P8_Replace_Mix]^return m .doubleValue (  )  ;^325^^^^^324^326^return m.multiply ( this ) ;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P14_Delete_Statement]^^325^^^^^324^326^return m.multiply ( this ) ;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigMatrix   BigMatrix m [VARIABLES] boolean  BigMatrix  m  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P7_Replace_Invocation]^return getData (  ) ;^336^^^^^335^337^return copyOut (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getData [RETURN_TYPE] BigDecimal[][]   [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P14_Delete_Statement]^^336^^^^^335^337^return copyOut (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getData [RETURN_TYPE] BigDecimal[][]   [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  i  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P1_Replace_Type]^short  nRows = getRowDimension (  ) ;^348^^^^^347^357^int nRows = getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getDataAsDoubleArray [RETURN_TYPE] double[][]   [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P7_Replace_Invocation]^int nRows = getColumnDimension (  ) ;^348^^^^^347^357^int nRows = getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getDataAsDoubleArray [RETURN_TYPE] double[][]   [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nCols = this.getColumnDimension (  ) ;int nRows = getRowDimension (  ) ;^348^^^^^347^357^int nRows = getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getDataAsDoubleArray [RETURN_TYPE] double[][]   [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nCol = this.getColumnDimension (  ) ;int nRows = getRowDimension (  ) ;^348^^^^^347^357^int nRows = getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getDataAsDoubleArray [RETURN_TYPE] double[][]   [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int columnCount = this.getColumnDimension (  ) ;int nRows = getRowDimension (  ) ;^348^^^^^347^357^int nRows = getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getDataAsDoubleArray [RETURN_TYPE] double[][]   [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nrows = this.getRowDimension (  ) ;int nRows = getRowDimension (  ) ;^348^^^^^347^357^int nRows = getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getDataAsDoubleArray [RETURN_TYPE] double[][]   [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nColB = b.getColumnDimension (  ) ;int nRows = getRowDimension (  ) ;^348^^^^^347^357^int nRows = getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getDataAsDoubleArray [RETURN_TYPE] double[][]   [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nCols = getColumnDimension (  ) ;int nRows = getRowDimension (  ) ;^348^^^^^347^357^int nRows = getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getDataAsDoubleArray [RETURN_TYPE] double[][]   [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nRowB = b.getRowDimension (  ) ;int nRows = getRowDimension (  ) ;^348^^^^^347^357^int nRows = getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getDataAsDoubleArray [RETURN_TYPE] double[][]   [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int rowCount = this.getRowDimension (  ) ;int nRows = getRowDimension (  ) ;^348^^^^^347^357^int nRows = getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getDataAsDoubleArray [RETURN_TYPE] double[][]   [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int ncols = this.getColumnDimension (  ) ;int nRows = getRowDimension (  ) ;^348^^^^^347^357^int nRows = getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getDataAsDoubleArray [RETURN_TYPE] double[][]   [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nRows = this.getRowDimension (  ) ;int nRows = getRowDimension (  ) ;^348^^^^^347^357^int nRows = getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getDataAsDoubleArray [RETURN_TYPE] double[][]   [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nSum = this.getColumnDimension (  ) ;int nRows = getRowDimension (  ) ;^348^^^^^347^357^int nRows = getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getDataAsDoubleArray [RETURN_TYPE] double[][]   [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nCols = m.getColumnDimension (  ) ;int nRows = getRowDimension (  ) ;^348^^^^^347^357^int nRows = getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getDataAsDoubleArray [RETURN_TYPE] double[][]   [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P14_Delete_Statement]^^348^^^^^347^357^int nRows = getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getDataAsDoubleArray [RETURN_TYPE] double[][]   [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^( this.getRowDimension (  )  )  ) ;int nRows = getRowDimension (  ) ;^348^^^^^347^357^int nRows = getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getDataAsDoubleArray [RETURN_TYPE] double[][]   [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P1_Replace_Type]^short  nCols = getColumnDimension (  ) ;^349^^^^^347^357^int nCols = getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getDataAsDoubleArray [RETURN_TYPE] double[][]   [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P7_Replace_Invocation]^int nCols = getRowDimension (  ) ;^349^^^^^347^357^int nCols = getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getDataAsDoubleArray [RETURN_TYPE] double[][]   [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nCols = this.getColumnDimension (  ) ;int nCols = getColumnDimension (  ) ;^349^^^^^347^357^int nCols = getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getDataAsDoubleArray [RETURN_TYPE] double[][]   [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nCol = this.getColumnDimension (  ) ;int nCols = getColumnDimension (  ) ;^349^^^^^347^357^int nCols = getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getDataAsDoubleArray [RETURN_TYPE] double[][]   [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int columnCount = this.getColumnDimension (  ) ;int nCols = getColumnDimension (  ) ;^349^^^^^347^357^int nCols = getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getDataAsDoubleArray [RETURN_TYPE] double[][]   [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nRows = getRowDimension (  ) ;int nCols = getColumnDimension (  ) ;^349^^^^^347^357^int nCols = getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getDataAsDoubleArray [RETURN_TYPE] double[][]   [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nrows = this.getRowDimension (  ) ;int nCols = getColumnDimension (  ) ;^349^^^^^347^357^int nCols = getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getDataAsDoubleArray [RETURN_TYPE] double[][]   [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nColB = b.getColumnDimension (  ) ;int nCols = getColumnDimension (  ) ;^349^^^^^347^357^int nCols = getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getDataAsDoubleArray [RETURN_TYPE] double[][]   [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nRowB = b.getRowDimension (  ) ;int nCols = getColumnDimension (  ) ;^349^^^^^347^357^int nCols = getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getDataAsDoubleArray [RETURN_TYPE] double[][]   [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int rowCount = this.getRowDimension (  ) ;int nCols = getColumnDimension (  ) ;^349^^^^^347^357^int nCols = getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getDataAsDoubleArray [RETURN_TYPE] double[][]   [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int ncols = this.getColumnDimension (  ) ;int nCols = getColumnDimension (  ) ;^349^^^^^347^357^int nCols = getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getDataAsDoubleArray [RETURN_TYPE] double[][]   [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nRows = this.getRowDimension (  ) ;int nCols = getColumnDimension (  ) ;^349^^^^^347^357^int nCols = getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getDataAsDoubleArray [RETURN_TYPE] double[][]   [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nSum = this.getColumnDimension (  ) ;int nCols = getColumnDimension (  ) ;^349^^^^^347^357^int nCols = getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getDataAsDoubleArray [RETURN_TYPE] double[][]   [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^int nCols = m.getColumnDimension (  ) ;int nCols = getColumnDimension (  ) ;^349^^^^^347^357^int nCols = getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getDataAsDoubleArray [RETURN_TYPE] double[][]   [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P14_Delete_Statement]^^349^350^^^^347^357^int nCols = getColumnDimension (  ) ; double d[][] = new double[nRows][nCols];^[CLASS] BigMatrixImpl  [METHOD] getDataAsDoubleArray [RETURN_TYPE] double[][]   [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P12_Insert_Condition]^if  ( v.length != this.getColumnDimension (  )  )  { int nCols = getColumnDimension (  ) ; }^349^^^^^347^357^int nCols = getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getDataAsDoubleArray [RETURN_TYPE] double[][]   [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P12_Insert_Condition]^if  ( rowDimension <=0 || columnDimension <=0 )  { int nCols = getColumnDimension (  ) ; }^349^^^^^347^357^int nCols = getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getDataAsDoubleArray [RETURN_TYPE] double[][]   [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^double[] out = new double[ncols];double d[][] = new double[nRows][nCols];^350^^^^^347^357^double d[][] = new double[nRows][nCols];^[CLASS] BigMatrixImpl  [METHOD] getDataAsDoubleArray [RETURN_TYPE] double[][]   [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^double[] out = new double[nrows];double d[][] = new double[nRows][nCols];^350^^^^^347^357^double d[][] = new double[nRows][nCols];^[CLASS] BigMatrixImpl  [METHOD] getDataAsDoubleArray [RETURN_TYPE] double[][]   [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal[][] bp = new BigDecimal[nRowB][nColB];double d[][] = new double[nRows][nCols];^350^^^^^347^357^double d[][] = new double[nRows][nCols];^[CLASS] BigMatrixImpl  [METHOD] getDataAsDoubleArray [RETURN_TYPE] double[][]   [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P1_Replace_Type]^for  (  short  i = 0; i < nRows; i++ )  {^351^^^^^347^357^for  ( int i = 0; i < nRows; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] getDataAsDoubleArray [RETURN_TYPE] double[][]   [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P2_Replace_Operator]^for  ( int i = 0; i <= nRows; i++ )  {^351^^^^^347^357^for  ( int i = 0; i < nRows; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] getDataAsDoubleArray [RETURN_TYPE] double[][]   [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P3_Replace_Literal]^for  ( int i = ; i < nRows; i++ )  {^351^^^^^347^357^for  ( int i = 0; i < nRows; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] getDataAsDoubleArray [RETURN_TYPE] double[][]   [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P3_Replace_Literal]^for  ( int i = row; i < nRows; i++ )  {^351^^^^^347^357^for  ( int i = 0; i < nRows; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] getDataAsDoubleArray [RETURN_TYPE] double[][]   [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^for  ( paritynt i = 0; i < nRows; i++ )  {^351^^^^^347^357^for  ( int i = 0; i < nRows; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] getDataAsDoubleArray [RETURN_TYPE] double[][]   [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^for  ( int i = 0; i < roundingMode; i++ )  {^351^^^^^347^357^for  ( int i = 0; i < nRows; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] getDataAsDoubleArray [RETURN_TYPE] double[][]   [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P8_Replace_Mix]^for  ( int i = 0; i < scale; i++ )  {^351^^^^^347^357^for  ( int i = 0; i < nRows; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] getDataAsDoubleArray [RETURN_TYPE] double[][]   [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P1_Replace_Type]^for  (  short  j=0; j<nCols;j++ )  {^352^^^^^347^357^for  ( int j=0; j<nCols;j++ )  {^[CLASS] BigMatrixImpl  [METHOD] getDataAsDoubleArray [RETURN_TYPE] double[][]   [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P3_Replace_Literal]^for  ( int j=1; j<nCols;j++ )  {^352^^^^^347^357^for  ( int j=0; j<nCols;j++ )  {^[CLASS] BigMatrixImpl  [METHOD] getDataAsDoubleArray [RETURN_TYPE] double[][]   [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^for  ( int parity=0; j<nCols;j++ )  {^352^^^^^347^357^for  ( int j=0; j<nCols;j++ )  {^[CLASS] BigMatrixImpl  [METHOD] getDataAsDoubleArray [RETURN_TYPE] double[][]   [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^for  ( scalent j=0; j<nCols;j++ )  {^352^^^^^347^357^for  ( int j=0; j<nCols;j++ )  {^[CLASS] BigMatrixImpl  [METHOD] getDataAsDoubleArray [RETURN_TYPE] double[][]   [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P8_Replace_Mix]^for  ( roundingModent j=0; j<nCols;j++ )  {^352^^^^^347^357^for  ( int j=0; j<nCols;j++ )  {^[CLASS] BigMatrixImpl  [METHOD] getDataAsDoubleArray [RETURN_TYPE] double[][]   [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^out[i] = data[row][i].doubleValue (  ) ;d[i][j] = data[i][j].doubleValue (  ) ;^353^^^^^347^357^d[i][j] = data[i][j].doubleValue (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getDataAsDoubleArray [RETURN_TYPE] double[][]   [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^out[i] = data[i][col].doubleValue (  ) ;d[i][j] = data[i][j].doubleValue (  ) ;^353^^^^^347^357^d[i][j] = data[i][j].doubleValue (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getDataAsDoubleArray [RETURN_TYPE] double[][]   [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^d[i][j] = outData[i][j].doubleValue (  ) ;^353^^^^^347^357^d[i][j] = data[i][j].doubleValue (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getDataAsDoubleArray [RETURN_TYPE] double[][]   [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P14_Delete_Statement]^^353^^^^^347^357^d[i][j] = data[i][j].doubleValue (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getDataAsDoubleArray [RETURN_TYPE] double[][]   [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P1_Replace_Type]^for  (  long  j=0; j<nCols;j++ )  {^352^^^^^347^357^for  ( int j=0; j<nCols;j++ )  {^[CLASS] BigMatrixImpl  [METHOD] getDataAsDoubleArray [RETURN_TYPE] double[][]   [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P3_Replace_Literal]^for  ( int j=scale; j<nCols;j++ )  {^352^^^^^347^357^for  ( int j=0; j<nCols;j++ )  {^[CLASS] BigMatrixImpl  [METHOD] getDataAsDoubleArray [RETURN_TYPE] double[][]   [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P3_Replace_Literal]^for  ( int j=rowDimension; j<nCols;j++ )  {^352^^^^^347^357^for  ( int j=0; j<nCols;j++ )  {^[CLASS] BigMatrixImpl  [METHOD] getDataAsDoubleArray [RETURN_TYPE] double[][]   [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^for  ( int row=0; j<nCols;j++ )  {^352^^^^^347^357^for  ( int j=0; j<nCols;j++ )  {^[CLASS] BigMatrixImpl  [METHOD] getDataAsDoubleArray [RETURN_TYPE] double[][]   [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^for  ( jnt i=0; j<nCols;j++ )  {^352^^^^^347^357^for  ( int j=0; j<nCols;j++ )  {^[CLASS] BigMatrixImpl  [METHOD] getDataAsDoubleArray [RETURN_TYPE] double[][]   [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P8_Replace_Mix]^for  ( int roundingMode=0; j<nCols;j++ )  {^352^^^^^347^357^for  ( int j=0; j<nCols;j++ )  {^[CLASS] BigMatrixImpl  [METHOD] getDataAsDoubleArray [RETURN_TYPE] double[][]   [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^d[i][j] = dataata[i][j].doubleValue (  ) ;^353^^^^^347^357^d[i][j] = data[i][j].doubleValue (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getDataAsDoubleArray [RETURN_TYPE] double[][]   [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P3_Replace_Literal]^for  ( int i = -9; i < nRows; i++ )  {^351^^^^^347^357^for  ( int i = 0; i < nRows; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] getDataAsDoubleArray [RETURN_TYPE] double[][]   [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P3_Replace_Literal]^for  ( int j=row; j<nCols;j++ )  {^352^^^^^347^357^for  ( int j=0; j<nCols;j++ )  {^[CLASS] BigMatrixImpl  [METHOD] getDataAsDoubleArray [RETURN_TYPE] double[][]   [VARIABLES] boolean  double[][]  d  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^return outData;^367^^^^^366^368^return data;^[CLASS] BigMatrixImpl  [METHOD] getDataRef [RETURN_TYPE] BigDecimal[][]   [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^return rowCount;^377^^^^^376^378^return roundingMode;^[CLASS] BigMatrixImpl  [METHOD] getRoundingMode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P8_Replace_Mix]^return scale;^377^^^^^376^378^return roundingMode;^[CLASS] BigMatrixImpl  [METHOD] getRoundingMode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^this.roundingMode = parity;^386^^^^^385^387^this.roundingMode = roundingMode;^[CLASS] BigMatrixImpl  [METHOD] setRoundingMode [RETURN_TYPE] void   int roundingMode [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P8_Replace_Mix]^this.roundingMode =  nSum;^386^^^^^385^387^this.roundingMode = roundingMode;^[CLASS] BigMatrixImpl  [METHOD] setRoundingMode [RETURN_TYPE] void   int roundingMode [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^return row;^396^^^^^395^397^return scale;^[CLASS] BigMatrixImpl  [METHOD] getScale [RETURN_TYPE] int   [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P8_Replace_Mix]^return nSum;^396^^^^^395^397^return scale;^[CLASS] BigMatrixImpl  [METHOD] getScale [RETURN_TYPE] int   [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P8_Replace_Mix]^this.scale =  null;^405^^^^^404^406^this.scale = scale;^[CLASS] BigMatrixImpl  [METHOD] setScale [RETURN_TYPE] void   int scale [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^BigDecimal maxColSum = sum;^415^^^^^414^424^BigDecimal maxColSum = ZERO;^[CLASS] BigMatrixImpl  [METHOD] getNorm [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal sum = ZERO;BigDecimal maxColSum = ZERO;^415^^^^^414^424^BigDecimal maxColSum = ZERO;^[CLASS] BigMatrixImpl  [METHOD] getNorm [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal largest = ZERO;BigDecimal maxColSum = ZERO;^415^^^^^414^424^BigDecimal maxColSum = ZERO;^[CLASS] BigMatrixImpl  [METHOD] getNorm [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal tmp = ZERO;BigDecimal maxColSum = ZERO;^415^^^^^414^424^BigDecimal maxColSum = ZERO;^[CLASS] BigMatrixImpl  [METHOD] getNorm [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  
[P1_Replace_Type]^for  (  short  col = 0; col < this.getColumnDimension (  ) ; col++ )  {^416^^^^^414^424^for  ( int col = 0; col < this.getColumnDimension (  ) ; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] getNorm [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  
[P2_Replace_Operator]^for  ( int col = 0; col > this.getColumnDimension (  ) ; col++ )  {^416^^^^^414^424^for  ( int col = 0; col < this.getColumnDimension (  ) ; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] getNorm [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  
[P2_Replace_Operator]^for  ( int col = 0; col <= this.getColumnDimension (  ) ; col++ )  {^416^^^^^414^424^for  ( int col = 0; col < this.getColumnDimension (  ) ; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] getNorm [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  
[P3_Replace_Literal]^for  ( int col = 1; col < this.getColumnDimension (  ) ; col++ )  {^416^^^^^414^424^for  ( int col = 0; col < this.getColumnDimension (  ) ; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] getNorm [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  
[P3_Replace_Literal]^for  ( int col = -6; col < this.getColumnDimension (  ) ; col++ )  {^416^^^^^414^424^for  ( int col = 0; col < this.getColumnDimension (  ) ; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] getNorm [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^for  ( int row = 0; col < this.getColumnDimension (  ) ; col++ )  {^416^^^^^414^424^for  ( int col = 0; col < this.getColumnDimension (  ) ; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] getNorm [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  
[P7_Replace_Invocation]^for  ( int col = 0; col < this.getRowDimension (  ) ; col++ )  {^416^^^^^414^424^for  ( int col = 0; col < this.getColumnDimension (  ) ; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] getNorm [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  
[P8_Replace_Mix]^for  ( int parity = 0; col < this.getColumnDimension (  ) ; col++ )  {^416^^^^^414^424^for  ( int col = 0; col < this.getColumnDimension (  ) ; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] getNorm [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  
[P1_Replace_Type]^for  (  long  row = 0; row < this.getRowDimension (  ) ; row++ )  {^418^^^^^414^424^for  ( int row = 0; row < this.getRowDimension (  ) ; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] getNorm [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  
[P2_Replace_Operator]^for  ( int row = 0; row == this.getRowDimension (  ) ; row++ )  {^418^^^^^414^424^for  ( int row = 0; row < this.getRowDimension (  ) ; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] getNorm [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  
[P3_Replace_Literal]^for  ( int row = ; row < this.getRowDimension (  ) ; row++ )  {^418^^^^^414^424^for  ( int row = 0; row < this.getRowDimension (  ) ; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] getNorm [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^for  ( int roundingMode = 0; row < this.getRowDimension (  ) ; row++ )  {^418^^^^^414^424^for  ( int row = 0; row < this.getRowDimension (  ) ; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] getNorm [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  
[P7_Replace_Invocation]^for  ( int row = 0; row < this.getColumnDimension (  ) ; row++ )  {^418^^^^^414^424^for  ( int row = 0; row < this.getRowDimension (  ) ; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] getNorm [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  
[P8_Replace_Mix]^for  ( int rowCount = 0; row < this .getColumnDimension (  )  ; row++ )  {^418^^^^^414^424^for  ( int row = 0; row < this.getRowDimension (  ) ; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] getNorm [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^sum = d.add ( data[row][col].abs (  )  ) ;^419^^^^^414^424^sum = sum.add ( data[row][col].abs (  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] getNorm [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^sum = sum.add ( outData[row][col].abs (  )  ) ;^419^^^^^414^424^sum = sum.add ( data[row][col].abs (  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] getNorm [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  
[P7_Replace_Invocation]^sum = sum.divide ( data[row][col].abs (  )  ) ;^419^^^^^414^424^sum = sum.add ( data[row][col].abs (  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] getNorm [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  
[P8_Replace_Mix]^sum =  maxColSum.add ( data[row][col].abs (  )  ) ;^419^^^^^414^424^sum = sum.add ( data[row][col].abs (  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] getNorm [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^sum = sum.add ( data[row][i].multiply ( v[i] )  ) ;sum = sum.add ( data[row][col].abs (  )  ) ;^419^^^^^414^424^sum = sum.add ( data[row][col].abs (  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] getNorm [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^sum = sum.add ( data[i][col].multiply ( v[i] )  ) ;sum = sum.add ( data[row][col].abs (  )  ) ;^419^^^^^414^424^sum = sum.add ( data[row][col].abs (  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] getNorm [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^outData[row][col] = data[row][col].add ( d ) ;sum = sum.add ( data[row][col].abs (  )  ) ;^419^^^^^414^424^sum = sum.add ( data[row][col].abs (  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] getNorm [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^sum = sum.add ( data[row][i].multiply ( m.getEntry ( i, col )  )  ) ;sum = sum.add ( data[row][col].abs (  )  ) ;^419^^^^^414^424^sum = sum.add ( data[row][col].abs (  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] getNorm [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^sum = data.add ( sum[row][col].abs (  )  ) ;^419^^^^^414^424^sum = sum.add ( data[row][col].abs (  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] getNorm [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  
[P14_Delete_Statement]^^419^^^^^414^424^sum = sum.add ( data[row][col].abs (  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] getNorm [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^maxColSum = d.max ( sum ) ;^421^^^^^414^424^maxColSum = maxColSum.max ( sum ) ;^[CLASS] BigMatrixImpl  [METHOD] getNorm [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^maxColSum = maxColSum.max ( d ) ;^421^^^^^414^424^maxColSum = maxColSum.max ( sum ) ;^[CLASS] BigMatrixImpl  [METHOD] getNorm [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^maxColSum = sum.max ( maxColSum ) ;^421^^^^^414^424^maxColSum = maxColSum.max ( sum ) ;^[CLASS] BigMatrixImpl  [METHOD] getNorm [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  
[P8_Replace_Mix]^maxColSum =  sum.max ( sum ) ;^421^^^^^414^424^maxColSum = maxColSum.max ( sum ) ;^[CLASS] BigMatrixImpl  [METHOD] getNorm [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^BigDecimal sum = maxColSum;^417^^^^^414^424^BigDecimal sum = ZERO;^[CLASS] BigMatrixImpl  [METHOD] getNorm [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal largest = ZERO;BigDecimal sum = ZERO;^417^^^^^414^424^BigDecimal sum = ZERO;^[CLASS] BigMatrixImpl  [METHOD] getNorm [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal maxColSum = ZERO;BigDecimal sum = ZERO;^417^^^^^414^424^BigDecimal sum = ZERO;^[CLASS] BigMatrixImpl  [METHOD] getNorm [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  
[P11_Insert_Donor_Statement]^BigDecimal tmp = ZERO;BigDecimal sum = ZERO;^417^^^^^414^424^BigDecimal sum = ZERO;^[CLASS] BigMatrixImpl  [METHOD] getNorm [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  
[P3_Replace_Literal]^for  ( int row = rowDimension; row < this.getRowDimension (  ) ; row++ )  {^418^^^^^414^424^for  ( int row = 0; row < this.getRowDimension (  ) ; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] getNorm [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  
[P14_Delete_Statement]^^418^419^420^^^414^424^for  ( int row = 0; row < this.getRowDimension (  ) ; row++ )  { sum = sum.add ( data[row][col].abs (  )  ) ; }^[CLASS] BigMatrixImpl  [METHOD] getNorm [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  
[P8_Replace_Mix]^sum = maxColSum.divide ( data[row][col].abs (  )  ) ;^419^^^^^414^424^sum = sum.add ( data[row][col].abs (  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] getNorm [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  
[P14_Delete_Statement]^^421^^^^^414^424^maxColSum = maxColSum.max ( sum ) ;^[CLASS] BigMatrixImpl  [METHOD] getNorm [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  
[P2_Replace_Operator]^for  ( int row = 0; row <= this.getRowDimension (  ) ; row++ )  {^418^^^^^414^424^for  ( int row = 0; row < this.getRowDimension (  ) ; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] getNorm [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  
[P3_Replace_Literal]^for  ( int row = 7; row < this.getRowDimension (  ) ; row++ )  {^418^^^^^414^424^for  ( int row = 0; row < this.getRowDimension (  ) ; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] getNorm [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^for  ( int nSum = 0; row < this.getRowDimension (  ) ; row++ )  {^418^^^^^414^424^for  ( int row = 0; row < this.getRowDimension (  ) ; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] getNorm [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  
[P8_Replace_Mix]^for  ( int scale = 0; row < this.getRowDimension (  ) ; row++ )  {^418^^^^^414^424^for  ( int row = 0; row < this.getRowDimension (  ) ; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] getNorm [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  
[P8_Replace_Mix]^sum = d.divide ( data[row][col].abs (  )  ) ;^419^^^^^414^424^sum = sum.add ( data[row][col].abs (  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] getNorm [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  
[P7_Replace_Invocation]^maxColSum = maxColSum .compareTo ( sum )  ;^421^^^^^414^424^maxColSum = maxColSum.max ( sum ) ;^[CLASS] BigMatrixImpl  [METHOD] getNorm [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  
[P3_Replace_Literal]^for  ( int col = columnCount; col < this.getColumnDimension (  ) ; col++ )  {^416^^^^^414^424^for  ( int col = 0; col < this.getColumnDimension (  ) ; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] getNorm [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  
[P1_Replace_Type]^for  (  short  row = 0; row < this.getRowDimension (  ) ; row++ )  {^418^^^^^414^424^for  ( int row = 0; row < this.getRowDimension (  ) ; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] getNorm [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  
[P14_Delete_Statement]^^416^417^418^419^420^414^424^for  ( int col = 0; col < this.getColumnDimension (  ) ; col++ )  { BigDecimal sum = ZERO; for  ( int row = 0; row < this.getRowDimension (  ) ; row++ )  { sum = sum.add ( data[row][col].abs (  )  ) ; }^[CLASS] BigMatrixImpl  [METHOD] getNorm [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  
[P5_Replace_Variable]^return sum;^423^^^^^414^424^return maxColSum;^[CLASS] BigMatrixImpl  [METHOD] getNorm [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  
[P8_Replace_Mix]^return d;^423^^^^^414^424^return maxColSum;^[CLASS] BigMatrixImpl  [METHOD] getNorm [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  boolean  long  serialVersionUID  int  col  columnCount  columnDimension  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  
[P2_Replace_Operator]^if  ( startRow < 0 && startRow > endRow || endRow > data.length || startColumn < 0 || startColumn > endColumn || endColumn > data[0].length  )  {^440^441^442^^^438^455^if  ( startRow < 0 || startRow > endRow || endRow > data.length || startColumn < 0 || startColumn > endColumn || endColumn > data[0].length  )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P2_Replace_Operator]^if  ( startRow <= 0 || startRow > endRow || endRow > data.length || startColumn < 0 || startColumn > endColumn || endColumn > data[0].length  )  {^440^441^442^^^438^455^if  ( startRow < 0 || startRow > endRow || endRow > data.length || startColumn < 0 || startColumn > endColumn || endColumn > data[0].length  )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P2_Replace_Operator]^if  ( startRow < 0 || startRow < endRow || endRow > data.length || startColumn < 0 || startColumn > endColumn || endColumn > data[0].length  )  {^440^441^442^^^438^455^if  ( startRow < 0 || startRow > endRow || endRow > data.length || startColumn < 0 || startColumn > endColumn || endColumn > data[0].length  )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P2_Replace_Operator]^if  ( startRow < 0 || startRow > endRow || endRow >= data.length || startColumn < 0 || startColumn > endColumn || endColumn > data[0].length  )  {^440^441^442^^^438^455^if  ( startRow < 0 || startRow > endRow || endRow > data.length || startColumn < 0 || startColumn > endColumn || endColumn > data[0].length  )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P2_Replace_Operator]^if  ( startRow < 0 || startRow > endRow || endRow > data.length || startColumn <= 0 || startColumn > endColumn || endColumn > data[0].length  )  {^440^441^442^^^438^455^if  ( startRow < 0 || startRow > endRow || endRow > data.length || startColumn < 0 || startColumn > endColumn || endColumn > data[0].length  )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P2_Replace_Operator]^if  ( startRow < 0 || startRow > endRow || endRow > data.length || startColumn < 0 || startColumn >= endColumn || endColumn > data[0].length  )  {^440^441^442^^^438^455^if  ( startRow < 0 || startRow > endRow || endRow > data.length || startColumn < 0 || startColumn > endColumn || endColumn > data[0].length  )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P2_Replace_Operator]^if  ( startRow < 0 || startRow > endRow || endRow > data.length || startColumn < 0 || startColumn > endColumn || endColumn >= data[0].length  )  {^440^441^442^^^438^455^if  ( startRow < 0 || startRow > endRow || endRow > data.length || startColumn < 0 || startColumn > endColumn || endColumn > data[0].length  )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P3_Replace_Literal]^if  ( startRow < columnDimension || startRow > endRow || endRow > data.length || startColumn < columnDimension || startColumn > endColumn || endColumn > data[columnDimension].length  )  {^440^441^442^^^438^455^if  ( startRow < 0 || startRow > endRow || endRow > data.length || startColumn < 0 || startColumn > endColumn || endColumn > data[0].length  )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P3_Replace_Literal]^if  ( startRow < scale || startRow > endRow || endRow > data.length || startColumn < scale || startColumn > endColumn || endColumn > data[scale].length  )  {^440^441^442^^^438^455^if  ( startRow < 0 || startRow > endRow || endRow > data.length || startColumn < 0 || startColumn > endColumn || endColumn > data[0].length  )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^if  ( row < 0 || startRow > endRow || endRow > data.length || startColumn < 0 || startColumn > endColumn || endColumn > data[0].length  )  {^440^441^442^^^438^455^if  ( startRow < 0 || startRow > endRow || endRow > data.length || startColumn < 0 || startColumn > endColumn || endColumn > data[0].length  )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^if  ( startRow < 0 || startRow > parity || endRow > data.length || startColumn < 0 || startColumn > endColumn || endColumn > data[0].length  )  {^440^441^442^^^438^455^if  ( startRow < 0 || startRow > endRow || endRow > data.length || startColumn < 0 || startColumn > endColumn || endColumn > data[0].length  )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^if  ( startRow < 0 || startRow > endRow || endRow > data.length || parity < 0 || startColumn > endColumn || endColumn > data[0].length  )  {^440^441^442^^^438^455^if  ( startRow < 0 || startRow > endRow || endRow > data.length || startColumn < 0 || startColumn > endColumn || endColumn > data[0].length  )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^if  ( startRow < 0 || startRow > endRow || endRow > data.length || startColumn < 0 || startColumn > row || endColumn > data[0].length  )  {^440^441^442^^^438^455^if  ( startRow < 0 || startRow > endRow || endRow > data.length || startColumn < 0 || startColumn > endColumn || endColumn > data[0].length  )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^if  ( startRow < 0 || startRow > endRow || endRow > parity || startColumn < 0 || startColumn > endColumn || endColumn > data[0].length  )  {^440^441^442^^^438^455^if  ( startRow < 0 || startRow > endRow || endRow > data.length || startColumn < 0 || startColumn > endColumn || endColumn > data[0].length  )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^if  ( startRow < 0 || startRow > endRow || endRow > subMatrixData.length || startColumn < 0 || startColumn > endColumn || endColumn > data[0].length  )  {^440^441^442^^^438^455^if  ( startRow < 0 || startRow > endRow || endRow > data.length || startColumn < 0 || startColumn > endColumn || endColumn > data[0].length  )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^if  ( data.length < 0 || startRow > endRow || endRow > startRow || startColumn < 0 || startColumn > endColumn || endColumn > data[0].length  )  {^440^441^442^^^438^455^if  ( startRow < 0 || startRow > endRow || endRow > data.length || startColumn < 0 || startColumn > endColumn || endColumn > data[0].length  )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^if  ( startRow < 0 || startRow > data.length || endRow > endRow || startColumn < 0 || startColumn > endColumn || endColumn > data[0].length  )  {^440^441^442^^^438^455^if  ( startRow < 0 || startRow > endRow || endRow > data.length || startColumn < 0 || startColumn > endColumn || endColumn > data[0].length  )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^if  ( startRow < 0 || startRow > startColumn || endRow > data.length || endRow < 0 || startColumn > endColumn || endColumn > data[0].length  )  {^440^441^442^^^438^455^if  ( startRow < 0 || startRow > endRow || endRow > data.length || startColumn < 0 || startColumn > endColumn || endColumn > data[0].length  )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^if  ( startRow < 0 || startRow > endRow || endRow > data.length || endColumn < 0 || startColumn > startColumn || endColumn > data[0].length  )  {^440^441^442^^^438^455^if  ( startRow < 0 || startRow > endRow || endRow > data.length || startColumn < 0 || startColumn > endColumn || endColumn > data[0].length  )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^if  ( startRow < 0 || startRow > endRow || endRow > endColumn || startColumn < 0 || startColumn > data.length || endColumn > data[0].length  )  {^440^441^442^^^438^455^if  ( startRow < 0 || startRow > endRow || endRow > data.length || startColumn < 0 || startColumn > endColumn || endColumn > data[0].length  )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^if  ( data < 0 || startRow > endRow || endRow > startRow.length || startColumn < 0 || startColumn > endColumn || endColumn > data[0].length  )  {^440^441^442^^^438^455^if  ( startRow < 0 || startRow > endRow || endRow > data.length || startColumn < 0 || startColumn > endColumn || endColumn > data[0].length  )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^if  ( startRow < 0 || startRow > endRow || endRow > data.length || startColumn < 0 || startColumn > data[0].length || endColumn > data[0].length  )  {^440^441^442^^^438^455^if  ( startRow < 0 || startRow > endRow || endRow > data.length || startColumn < 0 || startColumn > endColumn || endColumn > data[0].length  )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P6_Replace_Expression]^if  ( startRow < 0 ) {^440^441^442^^^438^455^if  ( startRow < 0 || startRow > endRow || endRow > data.length || startColumn < 0 || startColumn > endColumn || endColumn > data[0].length  )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P6_Replace_Expression]^if  (  startRow > endRow || endRow > data.length || startColumn < 0 || startColumn > endColumn || endColumn > data[0].length  )  {^440^441^442^^^438^455^if  ( startRow < 0 || startRow > endRow || endRow > data.length || startColumn < 0 || startColumn > endColumn || endColumn > data[0].length  )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P6_Replace_Expression]^if  ( ((((startRow < 0) || (startRow > endRow)) || (endRow > data.length)) || (startColumn < 0) || startColumn > endColumn) )  {^440^441^442^^^438^455^if  ( startRow < 0 || startRow > endRow || endRow > data.length || startColumn < 0 || startColumn > endColumn || endColumn > data[0].length  )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P6_Replace_Expression]^if  ( (((startRow < 0) || (startRow > endRow)) || (endRow > data.length) || startColumn < 0) )  {^440^441^442^^^438^455^if  ( startRow < 0 || startRow > endRow || endRow > data.length || startColumn < 0 || startColumn > endColumn || endColumn > data[0].length  )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P6_Replace_Expression]^if  ( ((startRow < 0) || (startRow > endRow) || endRow > data.length) )  {^440^441^442^^^438^455^if  ( startRow < 0 || startRow > endRow || endRow > data.length || startColumn < 0 || startColumn > endColumn || endColumn > data[0].length  )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P6_Replace_Expression]^if  ( (startRow < 0 || startRow > endRow) )  {^440^441^442^^^438^455^if  ( startRow < 0 || startRow > endRow || endRow > data.length || startColumn < 0 || startColumn > endColumn || endColumn > data[0].length  )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P6_Replace_Expression]^if  ( startRow > endRow )  {^440^441^442^^^438^455^if  ( startRow < 0 || startRow > endRow || endRow > data.length || startColumn < 0 || startColumn > endColumn || endColumn > data[0].length  )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P6_Replace_Expression]^if  ( endRow > data.length )  {^440^441^442^^^438^455^if  ( startRow < 0 || startRow > endRow || endRow > data.length || startColumn < 0 || startColumn > endColumn || endColumn > data[0].length  )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P6_Replace_Expression]^if  ( startColumn < 0 )  {^440^441^442^^^438^455^if  ( startRow < 0 || startRow > endRow || endRow > data.length || startColumn < 0 || startColumn > endColumn || endColumn > data[0].length  )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P6_Replace_Expression]^if  ( startColumn > endColumn )  {^440^441^442^^^438^455^if  ( startRow < 0 || startRow > endRow || endRow > data.length || startColumn < 0 || startColumn > endColumn || endColumn > data[0].length  )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P6_Replace_Expression]^if  ( endColumn > data[0].length )  {^440^441^442^^^438^455^if  ( startRow < 0 || startRow > endRow || endRow > data.length || startColumn < 0 || startColumn > endColumn || endColumn > data[0].length  )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P15_Unwrap_Block]^throw new org.apache.commons.math.linear.MatrixIndexException("invalid row or column index selection");^440^441^442^443^444^438^455^if  ( startRow < 0 || startRow > endRow || endRow > data.length || startColumn < 0 || startColumn > endColumn || endColumn > data[0].length  )  { throw new MatrixIndexException ( "invalid row or column index selection" ) ; }^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P16_Remove_Block]^^440^441^442^443^444^438^455^if  ( startRow < 0 || startRow > endRow || endRow > data.length || startColumn < 0 || startColumn > endColumn || endColumn > data[0].length  )  { throw new MatrixIndexException ( "invalid row or column index selection" ) ; }^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P3_Replace_Literal]^throw new MatrixIndexException ( "invalid row or cnvalid row or column index selection" ) ;^443^444^^^^438^455^throw new MatrixIndexException ( "invalid row or column index selection" ) ;^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P4_Replace_Constructor]^throw throw  new MatrixIndexException ( "selected row and column index arrays must be non-empty" )  ;^443^444^^^^438^455^throw new MatrixIndexException ( "invalid row or column index selection" ) ;^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P3_Replace_Literal]^throw new MatrixIndexException ( " column index s" ) ;^443^444^^^^438^455^throw new MatrixIndexException ( "invalid row or column index selection" ) ;^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P3_Replace_Literal]^throw new MatrixIndexException ( "id nvalid row or column index selection" ) ;^443^444^^^^438^455^throw new MatrixIndexException ( "invalid row or column index selection" ) ;^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P8_Replace_Mix]^return true;^443^444^^^^438^455^throw new MatrixIndexException ( "invalid row or column index selection" ) ;^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P11_Insert_Donor_Statement]^throw new MatrixIndexException ( "selected row and column index arrays must be non-empty" ) ;throw new MatrixIndexException ( "invalid row or column index selection" ) ;^443^444^^^^438^455^throw new MatrixIndexException ( "invalid row or column index selection" ) ;^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P2_Replace_Operator]^BigMatrixImpl subMatrix = new BigMatrixImpl ( endRow  ||  startRow+1, endColumn - startColumn+1 ) ;^446^447^^^^438^455^BigMatrixImpl subMatrix = new BigMatrixImpl ( endRow - startRow+1, endColumn - startColumn+1 ) ;^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P2_Replace_Operator]^BigMatrixImpl subMatrix = new BigMatrixImpl ( endRow  <<  startRow+1, endColumn - startColumn+1 ) ;^446^447^^^^438^455^BigMatrixImpl subMatrix = new BigMatrixImpl ( endRow - startRow+1, endColumn - startColumn+1 ) ;^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P3_Replace_Literal]^BigMatrixImpl subMatrix = new BigMatrixImpl ( endRow - startRow+nCols, endColumn - startColumn+nCols ) ;^446^447^^^^438^455^BigMatrixImpl subMatrix = new BigMatrixImpl ( endRow - startRow+1, endColumn - startColumn+1 ) ;^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P3_Replace_Literal]^BigMatrixImpl subMatrix = new BigMatrixImpl ( endRow - startRow+startRow, endColumn - startColumn+startRow ) ;^446^447^^^^438^455^BigMatrixImpl subMatrix = new BigMatrixImpl ( endRow - startRow+1, endColumn - startColumn+1 ) ;^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P4_Replace_Constructor]^BigMatrixImpl subMatrix = new BigMatrixImpl ( endRow - startRow+1 - startColumn+1 ) ;^446^447^^^^438^455^BigMatrixImpl subMatrix = new BigMatrixImpl ( endRow - startRow+1, endColumn - startColumn+1 ) ;^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^BigMatrixImpl subMatrix = new BigMatrixImpl ( rowCount - startRow+1, endColumn - startColumn+1 ) ;^446^447^^^^438^455^BigMatrixImpl subMatrix = new BigMatrixImpl ( endRow - startRow+1, endColumn - startColumn+1 ) ;^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^BigMatrixImpl subMatrix = new BigMatrixImpl ( endRow - rowCount+1, endColumn - startColumn+1 ) ;^446^447^^^^438^455^BigMatrixImpl subMatrix = new BigMatrixImpl ( endRow - startRow+1, endColumn - startColumn+1 ) ;^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^BigMatrixImpl subMatrix = new BigMatrixImpl ( endRow - startRow+1, endColumn - rowDimension+1 ) ;^446^447^^^^438^455^BigMatrixImpl subMatrix = new BigMatrixImpl ( endRow - startRow+1, endColumn - startColumn+1 ) ;^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^BigMatrixImpl subMatrix = new BigMatrixImpl ( startColumn - startRow+1, endColumn - endRow+1 ) ;^446^447^^^^438^455^BigMatrixImpl subMatrix = new BigMatrixImpl ( endRow - startRow+1, endColumn - startColumn+1 ) ;^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^BigMatrixImpl subMatrix = new BigMatrixImpl ( startRow - endRow+1, endColumn - startColumn+1 ) ;^446^447^^^^438^455^BigMatrixImpl subMatrix = new BigMatrixImpl ( endRow - startRow+1, endColumn - startColumn+1 ) ;^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^BigMatrixImpl subMatrix = new BigMatrixImpl ( endRow - endColumn+1, startRow - startColumn+1 ) ;^446^447^^^^438^455^BigMatrixImpl subMatrix = new BigMatrixImpl ( endRow - startRow+1, endColumn - startColumn+1 ) ;^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P8_Replace_Mix]^BigMatrixImpl subMatrix = new BigMatrixImpl ( endRow - startRow+1, parity - startColumn+1 ) ;^446^447^^^^438^455^BigMatrixImpl subMatrix = new BigMatrixImpl ( endRow - startRow+1, endColumn - startColumn+1 ) ;^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P3_Replace_Literal]^BigMatrixImpl subMatrix = new BigMatrixImpl ( endRow - startRow+endRow, endColumn - startColumn+endRow ) ;^446^447^^^^438^455^BigMatrixImpl subMatrix = new BigMatrixImpl ( endRow - startRow+1, endColumn - startColumn+1 ) ;^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P3_Replace_Literal]^BigMatrixImpl subMatrix = new BigMatrixImpl ( endRow - startRow+rowCount, endColumn - startColumn+rowCount ) ;^446^447^^^^438^455^BigMatrixImpl subMatrix = new BigMatrixImpl ( endRow - startRow+1, endColumn - startColumn+1 ) ;^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^BigMatrixImpl subMatrix = new BigMatrixImpl ( endRow - parity+1, endColumn - startColumn+1 ) ;^446^447^^^^438^455^BigMatrixImpl subMatrix = new BigMatrixImpl ( endRow - startRow+1, endColumn - startColumn+1 ) ;^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^BigMatrixImpl subMatrix = new BigMatrixImpl ( endRow - startRow+1, roundingMode - startColumn+1 ) ;^446^447^^^^438^455^BigMatrixImpl subMatrix = new BigMatrixImpl ( endRow - startRow+1, endColumn - startColumn+1 ) ;^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^BigMatrixImpl subMatrix = new BigMatrixImpl ( endRow - startRow+1, endColumn - row+1 ) ;^446^447^^^^438^455^BigMatrixImpl subMatrix = new BigMatrixImpl ( endRow - startRow+1, endColumn - startColumn+1 ) ;^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^BigMatrixImpl subMatrix = new BigMatrixImpl ( endRow - startColumn+1, endColumn - startRow+1 ) ;^446^447^^^^438^455^BigMatrixImpl subMatrix = new BigMatrixImpl ( endRow - startRow+1, endColumn - startColumn+1 ) ;^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^BigMatrixImpl subMatrix = new BigMatrixImpl ( endColumn - startRow+1, endRow - startColumn+1 ) ;^446^447^^^^438^455^BigMatrixImpl subMatrix = new BigMatrixImpl ( endRow - startRow+1, endColumn - startColumn+1 ) ;^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P11_Insert_Donor_Statement]^BigMatrixImpl out = new BigMatrixImpl ( nCols, nRows ) ;BigMatrixImpl subMatrix = new BigMatrixImpl ( endRow - startRow+1, endColumn - startColumn+1 ) ;^446^447^^^^438^455^BigMatrixImpl subMatrix = new BigMatrixImpl ( endRow - startRow+1, endColumn - startColumn+1 ) ;^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P11_Insert_Donor_Statement]^BigMatrixImpl subMatrix = new BigMatrixImpl ( selectedRows.length, selectedColumns.length ) ;BigMatrixImpl subMatrix = new BigMatrixImpl ( endRow - startRow+1, endColumn - startColumn+1 ) ;^446^447^^^^438^455^BigMatrixImpl subMatrix = new BigMatrixImpl ( endRow - startRow+1, endColumn - startColumn+1 ) ;^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P7_Replace_Invocation]^BigDecimal[][] subMatrixData = subMatrix.getRow (  ) ;^448^^^^^438^455^BigDecimal[][] subMatrixData = subMatrix.getDataRef (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P7_Replace_Invocation]^BigDecimal[][] subMatrixData = subMatrix .getData (  )  ;^448^^^^^438^455^BigDecimal[][] subMatrixData = subMatrix.getDataRef (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[][] solution =  (  ( BigMatrixImpl )   ( solve ( bMatrix )  )  ) .getDataRef (  ) ;BigDecimal[][] subMatrixData = subMatrix.getDataRef (  ) ;^448^^^^^438^455^BigDecimal[][] subMatrixData = subMatrix.getDataRef (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[][] outData = out.getDataRef (  ) ;BigDecimal[][] subMatrixData = subMatrix.getDataRef (  ) ;^448^^^^^438^455^BigDecimal[][] subMatrixData = subMatrix.getDataRef (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P14_Delete_Statement]^^448^^^^^438^455^BigDecimal[][] subMatrixData = subMatrix.getDataRef (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P1_Replace_Type]^for  (  short  i = startRow; i <= endRow; i++ )  {^449^^^^^438^455^for  ( int i = startRow; i <= endRow; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P2_Replace_Operator]^for  ( int i = startRow; i == endRow; i++ )  {^449^^^^^438^455^for  ( int i = startRow; i <= endRow; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P2_Replace_Operator]^for  ( int i = startRow; i < endRow; i++ )  {^449^^^^^438^455^for  ( int i = startRow; i <= endRow; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^for  ( int i = parity; i <= endRow; i++ )  {^449^^^^^438^455^for  ( int i = startRow; i <= endRow; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^for  ( rowCountnt i = startRow; i <= endRow; i++ )  {^449^^^^^438^455^for  ( int i = startRow; i <= endRow; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^for  ( int i = startRow; i <= scale; i++ )  {^449^^^^^438^455^for  ( int i = startRow; i <= endRow; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P8_Replace_Mix]^for  ( int i = startRow; i <= roundingMode; i++ )  {^449^^^^^438^455^for  ( int i = startRow; i <= endRow; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P1_Replace_Type]^for  (  short  j = startColumn; j <= endColumn; j++ )  {^450^^^^^438^455^for  ( int j = startColumn; j <= endColumn; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P2_Replace_Operator]^for  ( int j = startColumn; j > endColumn; j++ )  {^450^^^^^438^455^for  ( int j = startColumn; j <= endColumn; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^for  ( int j = rowCount; j <= endColumn; j++ )  {^450^^^^^438^455^for  ( int j = startColumn; j <= endColumn; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^for  ( int parity = startColumn; j <= endColumn; j++ )  {^450^^^^^438^455^for  ( int j = startColumn; j <= endColumn; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^for  ( int j = startColumn; j <= roundingMode; j++ )  {^450^^^^^438^455^for  ( int j = startColumn; j <= endColumn; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^for  ( scalent j = startColumn; j <= endColumn; j++ )  {^450^^^^^438^455^for  ( int j = startColumn; j <= endColumn; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^for  ( startColumnnt j = i; j <= endColumn; j++ )  {^450^^^^^438^455^for  ( int j = startColumn; j <= endColumn; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^for  ( jnt i = startColumn; j <= endColumn; j++ )  {^450^^^^^438^455^for  ( int j = startColumn; j <= endColumn; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^for  ( endColumnnt j = startColumn; j <= i; j++ )  {^450^^^^^438^455^for  ( int j = startColumn; j <= endColumn; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P8_Replace_Mix]^for  ( int j = row; j <= endColumn; j++ )  {^450^^^^^438^455^for  ( int j = startColumn; j <= endColumn; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P2_Replace_Operator]^subMatrixData[i  &&  startRow][j - startColumn] = data[i][j];^451^^^^^438^455^subMatrixData[i - startRow][j - startColumn] = data[i][j];^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P2_Replace_Operator]^subMatrixData[i  |  startRow][j - startColumn] = data[i][j];^451^^^^^438^455^subMatrixData[i - startRow][j - startColumn] = data[i][j];^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^subMatrixData[rowCount - startRow][j - startColumn] = data[i][j];^451^^^^^438^455^subMatrixData[i - startRow][j - startColumn] = data[i][j];^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^subMatrixData[i - scale][j - startColumn] = data[i][j];^451^^^^^438^455^subMatrixData[i - startRow][j - startColumn] = data[i][j];^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^subMatrixData[i - startRow][row - startColumn] = data[i][j];^451^^^^^438^455^subMatrixData[i - startRow][j - startColumn] = data[i][j];^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^subMatrixData[i - startRow][j - parity] = data[i][j];^451^^^^^438^455^subMatrixData[i - startRow][j - startColumn] = data[i][j];^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^subMatrixData[i - startRow][j - startColumn] = outData[i][j];^451^^^^^438^455^subMatrixData[i - startRow][j - startColumn] = data[i][j];^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P8_Replace_Mix]^subMatrixData[i - startRow][j - startColumn]  =  subMatrixData[i - startRow][j - startColumn] ;^451^^^^^438^455^subMatrixData[i - startRow][j - startColumn] = data[i][j];^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P2_Replace_Operator]^subMatrixData[i  ||  startRow][j - startColumn] = data[i][j];^451^^^^^438^455^subMatrixData[i - startRow][j - startColumn] = data[i][j];^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P2_Replace_Operator]^subMatrixData[i  <=  startRow][j - startColumn] = data[i][j];^451^^^^^438^455^subMatrixData[i - startRow][j - startColumn] = data[i][j];^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^subMatrixData[i - nSum][j - startColumn] = data[i][j];^451^^^^^438^455^subMatrixData[i - startRow][j - startColumn] = data[i][j];^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^subMatrixData[i - startRow][roundingMode - startColumn] = data[i][j];^451^^^^^438^455^subMatrixData[i - startRow][j - startColumn] = data[i][j];^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^subMatrixData[i - startColumn][j - startRow] = data[i][j];^451^^^^^438^455^subMatrixData[i - startRow][j - startColumn] = data[i][j];^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P8_Replace_Mix]^subMatrixData[i - startRow][j - startColumn]  = null ;^451^^^^^438^455^subMatrixData[i - startRow][j - startColumn] = data[i][j];^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^for  ( int j = roundingMode; j <= endColumn; j++ )  {^450^^^^^438^455^for  ( int j = startColumn; j <= endColumn; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P1_Replace_Type]^for  (  long  j = startColumn; j <= endColumn; j++ )  {^450^^^^^438^455^for  ( int j = startColumn; j <= endColumn; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P2_Replace_Operator]^for  ( int j = startColumn; j == endColumn; j++ )  {^450^^^^^438^455^for  ( int j = startColumn; j <= endColumn; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^for  ( int j = startColumn; j <= rowDimension; j++ )  {^450^^^^^438^455^for  ( int j = startColumn; j <= endColumn; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^for  ( roundingModent j = startColumn; j <= endColumn; j++ )  {^450^^^^^438^455^for  ( int j = startColumn; j <= endColumn; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^for  ( int j = endColumn; j <= startColumn; j++ )  {^450^^^^^438^455^for  ( int j = startColumn; j <= endColumn; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P2_Replace_Operator]^subMatrixData[i  &  startRow][j - startColumn] = data[i][j];^451^^^^^438^455^subMatrixData[i - startRow][j - startColumn] = data[i][j];^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P2_Replace_Operator]^subMatrixData[i  ==  startRow][j - startColumn] = data[i][j];^451^^^^^438^455^subMatrixData[i - startRow][j - startColumn] = data[i][j];^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^subMatrixData[i - parity][j - startColumn] = data[i][j];^451^^^^^438^455^subMatrixData[i - startRow][j - startColumn] = data[i][j];^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^subMatrixData[i - startRow][startColumn - startColumn] = data[i][j];^451^^^^^438^455^subMatrixData[i - startRow][j - startColumn] = data[i][j];^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^subMatrixData[i - startRow][j - rowCount] = data[i][j];^451^^^^^438^455^subMatrixData[i - startRow][j - startColumn] = data[i][j];^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P2_Replace_Operator]^subMatrixData[i  <  startRow][j - startColumn] = data[i][j];^451^^^^^438^455^subMatrixData[i - startRow][j - startColumn] = data[i][j];^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P2_Replace_Operator]^subMatrixData[i  >  startRow][j - startColumn] = data[i][j];^451^^^^^438^455^subMatrixData[i - startRow][j - startColumn] = data[i][j];^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^subMatrixData[i - startRow][j - startColumn] = subMatrixData[i][j];^451^^^^^438^455^subMatrixData[i - startRow][j - startColumn] = data[i][j];^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P8_Replace_Mix]^for  ( int i = startColumn; i <= endRow; i++ )  {^449^^^^^438^455^for  ( int i = startRow; i <= endRow; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P8_Replace_Mix]^for  ( int j = parity; j <= endColumn; j++ )  {^450^^^^^438^455^for  ( int j = startColumn; j <= endColumn; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int startRow int endRow int startColumn int endColumn [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P2_Replace_Operator]^if  ( selectedRows.length * selectedColumns.length >= 0 )  {^470^^^^^468^488^if  ( selectedRows.length * selectedColumns.length == 0 )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P2_Replace_Operator]^if  ( selectedRows.length - selectedColumns.length == 0 )  {^470^^^^^468^488^if  ( selectedRows.length * selectedColumns.length == 0 )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P3_Replace_Literal]^if  ( selectedRows.length * selectedColumns.length == -4 )  {^470^^^^^468^488^if  ( selectedRows.length * selectedColumns.length == 0 )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^if  ( permutation.length * selectedColumns.length == 0 )  {^470^^^^^468^488^if  ( selectedRows.length * selectedColumns.length == 0 )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^if  ( selectedRows.length * permutation.length == 0 )  {^470^^^^^468^488^if  ( selectedRows.length * selectedColumns.length == 0 )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^if  ( parity * selectedColumns.length == 0 )  {^470^^^^^468^488^if  ( selectedRows.length * selectedColumns.length == 0 )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^if  ( selectedRows.length * parity == 0 )  {^470^^^^^468^488^if  ( selectedRows.length * selectedColumns.length == 0 )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^if  ( selectedColumns.length * selectedRows.length == 0 )  {^470^^^^^468^488^if  ( selectedRows.length * selectedColumns.length == 0 )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P6_Replace_Expression]^if  ( selectedRows.length * selectedColumns.length )  {^470^^^^^468^488^if  ( selectedRows.length * selectedColumns.length == 0 )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P8_Replace_Mix]^if  ( selectedRows.length * selectedColumns.length == 0  )  {^470^^^^^468^488^if  ( selectedRows.length * selectedColumns.length == 0 )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P15_Unwrap_Block]^throw new org.apache.commons.math.linear.MatrixIndexException("selected row and column index arrays must be non-empty");^470^471^472^473^^468^488^if  ( selectedRows.length * selectedColumns.length == 0 )  { throw new MatrixIndexException ( "selected row and column index arrays must be non-empty" ) ; }^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P16_Remove_Block]^^470^471^472^473^^468^488^if  ( selectedRows.length * selectedColumns.length == 0 )  { throw new MatrixIndexException ( "selected row and column index arrays must be non-empty" ) ; }^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P3_Replace_Literal]^throw new MatrixIndexException ( "rray" ) ;^471^472^^^^468^488^throw new MatrixIndexException ( "selected row and column index arrays must be non-empty" ) ;^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P4_Replace_Constructor]^throw throw  new MatrixIndexException ( "invalid row or column index selection" )  ;^471^472^^^^468^488^throw new MatrixIndexException ( "selected row and column index arrays must be non-empty" ) ;^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P13_Insert_Block]^if  (  (  ( selectedRows.length )  *  ( selectedColumns.length )  )  == 0 )  {     throw new MatrixIndexException ( "selected row and column index arrays must be non-empty" ) ; }^471^^^^^468^488^[Delete]^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P3_Replace_Literal]^throw new MatrixIndexException ( "selected row and column index arrays must be non-emptyo" ) ;^471^472^^^^468^488^throw new MatrixIndexException ( "selected row and column index arrays must be non-empty" ) ;^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P8_Replace_Mix]^throw new IllegalArgumentException ( "Matrix must have at least one row." ) ; ;^471^472^^^^468^488^throw new MatrixIndexException ( "selected row and column index arrays must be non-empty" ) ;^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "row and column dimensions must be positive" ) ;throw new MatrixIndexException ( "selected row and column index arrays must be non-empty" ) ;^471^472^^^^468^488^throw new MatrixIndexException ( "selected row and column index arrays must be non-empty" ) ;^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P11_Insert_Donor_Statement]^throw new MatrixIndexException ( "invalid row or column index selection" ) ;throw new MatrixIndexException ( "selected row and column index arrays must be non-empty" ) ;^471^472^^^^468^488^throw new MatrixIndexException ( "selected row and column index arrays must be non-empty" ) ;^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P13_Insert_Block]^if  (  ( row < 0 )  ||  ( column < 0 )  )  {     throw new MatrixIndexException ( "invalid row or column index selection" ) ; }^471^^^^^468^488^[Delete]^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P3_Replace_Literal]^throw new MatrixIndexException ( "n indexelected row and column index arrays must be non-empty" ) ;^471^472^^^^468^488^throw new MatrixIndexException ( "selected row and column index arrays must be non-empty" ) ;^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P3_Replace_Literal]^throw new MatrixIndexException ( "selected row and column index arrays must be non-emptyselected r" ) ;^471^472^^^^468^488^throw new MatrixIndexException ( "selected row and column index arrays must be non-empty" ) ;^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P8_Replace_Mix]^return true;^471^472^^^^468^488^throw new MatrixIndexException ( "selected row and column index arrays must be non-empty" ) ;^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P4_Replace_Constructor]^BigMatrixImpl subMatrix = new BigMatrixImpl ( selectedRows.length.length ) ;^474^475^^^^468^488^BigMatrixImpl subMatrix = new BigMatrixImpl ( selectedRows.length, selectedColumns.length ) ;^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^BigMatrixImpl subMatrix = new BigMatrixImpl ( selectedRows.length, permutation.length ) ;^474^475^^^^468^488^BigMatrixImpl subMatrix = new BigMatrixImpl ( selectedRows.length, selectedColumns.length ) ;^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^BigMatrixImpl subMatrix = new BigMatrixImpl ( selectedRows.length, rowDimension ) ;^474^475^^^^468^488^BigMatrixImpl subMatrix = new BigMatrixImpl ( selectedRows.length, selectedColumns.length ) ;^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^BigMatrixImpl subMatrix = new BigMatrixImpl (  selectedColumns.length ) ;^474^475^^^^468^488^BigMatrixImpl subMatrix = new BigMatrixImpl ( selectedRows.length, selectedColumns.length ) ;^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^BigMatrixImpl subMatrix = new BigMatrixImpl ( selectedRows.length ) ;^474^475^^^^468^488^BigMatrixImpl subMatrix = new BigMatrixImpl ( selectedRows.length, selectedColumns.length ) ;^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^BigMatrixImpl subMatrix = new BigMatrixImpl ( selectedColumns.length, selectedRows.length ) ;^474^475^^^^468^488^BigMatrixImpl subMatrix = new BigMatrixImpl ( selectedRows.length, selectedColumns.length ) ;^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^BigMatrixImpl subMatrix = new BigMatrixImpl ( selectedRows, selectedColumns.length ) ;^474^475^^^^468^488^BigMatrixImpl subMatrix = new BigMatrixImpl ( selectedRows.length, selectedColumns.length ) ;^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P8_Replace_Mix]^BigMatrixImpl subMatrix = new BigMatrixImpl ( selectedRows.length, roundingMode ) ;^474^475^^^^468^488^BigMatrixImpl subMatrix = new BigMatrixImpl ( selectedRows.length, selectedColumns.length ) ;^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^BigMatrixImpl subMatrix = new BigMatrixImpl ( selectedColumns.length, selectedColumns.length ) ;^474^475^^^^468^488^BigMatrixImpl subMatrix = new BigMatrixImpl ( selectedRows.length, selectedColumns.length ) ;^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^BigMatrixImpl subMatrix = new BigMatrixImpl ( selectedRows.length, selectedRows.length ) ;^474^475^^^^468^488^BigMatrixImpl subMatrix = new BigMatrixImpl ( selectedRows.length, selectedColumns.length ) ;^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^BigMatrixImpl subMatrix = new BigMatrixImpl ( startRow, selectedColumns.length ) ;^474^475^^^^468^488^BigMatrixImpl subMatrix = new BigMatrixImpl ( selectedRows.length, selectedColumns.length ) ;^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^BigMatrixImpl subMatrix = new BigMatrixImpl ( selectedRows.length, nSum ) ;^474^475^^^^468^488^BigMatrixImpl subMatrix = new BigMatrixImpl ( selectedRows.length, selectedColumns.length ) ;^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^BigMatrixImpl subMatrix = new BigMatrixImpl ( selectedColumns, selectedRows.length.length ) ;^474^475^^^^468^488^BigMatrixImpl subMatrix = new BigMatrixImpl ( selectedRows.length, selectedColumns.length ) ;^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P11_Insert_Donor_Statement]^BigMatrixImpl subMatrix = new BigMatrixImpl ( endRow - startRow+1, endColumn - startColumn+1 ) ;BigMatrixImpl subMatrix = new BigMatrixImpl ( selectedRows.length, selectedColumns.length ) ;^474^475^^^^468^488^BigMatrixImpl subMatrix = new BigMatrixImpl ( selectedRows.length, selectedColumns.length ) ;^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P11_Insert_Donor_Statement]^BigMatrixImpl out = new BigMatrixImpl ( nCols, nRows ) ;BigMatrixImpl subMatrix = new BigMatrixImpl ( selectedRows.length, selectedColumns.length ) ;^474^475^^^^468^488^BigMatrixImpl subMatrix = new BigMatrixImpl ( selectedRows.length, selectedColumns.length ) ;^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P7_Replace_Invocation]^BigDecimal[][] subMatrixData = subMatrix.getRow (  ) ;^476^^^^^468^488^BigDecimal[][] subMatrixData = subMatrix.getDataRef (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P7_Replace_Invocation]^BigDecimal[][] subMatrixData = subMatrix .getData (  )  ;^476^^^^^468^488^BigDecimal[][] subMatrixData = subMatrix.getDataRef (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[][] solution =  (  ( BigMatrixImpl )   ( solve ( bMatrix )  )  ) .getDataRef (  ) ;BigDecimal[][] subMatrixData = subMatrix.getDataRef (  ) ;^476^^^^^468^488^BigDecimal[][] subMatrixData = subMatrix.getDataRef (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[][] outData = out.getDataRef (  ) ;BigDecimal[][] subMatrixData = subMatrix.getDataRef (  ) ;^476^^^^^468^488^BigDecimal[][] subMatrixData = subMatrix.getDataRef (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P14_Delete_Statement]^^476^^^^^468^488^BigDecimal[][] subMatrixData = subMatrix.getDataRef (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P1_Replace_Type]^for  (  short  i = 0; i < selectedRows.length; i++ )  {^478^^^^^468^488^for  ( int i = 0; i < selectedRows.length; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P2_Replace_Operator]^for  ( int i = 0; i > selectedRows.length; i++ )  {^478^^^^^468^488^for  ( int i = 0; i < selectedRows.length; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P2_Replace_Operator]^for  ( int i = 0; i == selectedRows.length; i++ )  {^478^^^^^468^488^for  ( int i = 0; i < selectedRows.length; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P3_Replace_Literal]^for  ( int i = -5; i < selectedRows.length; i++ )  {^478^^^^^468^488^for  ( int i = 0; i < selectedRows.length; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P3_Replace_Literal]^for  ( int i = row; i < selectedRows.length; i++ )  {^478^^^^^468^488^for  ( int i = 0; i < selectedRows.length; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^for  ( roundingModent i = 0; i < selectedRows.length; i++ )  {^478^^^^^468^488^for  ( int i = 0; i < selectedRows.length; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^for  ( int i = 0; i < selectedColumns.length; i++ )  {^478^^^^^468^488^for  ( int i = 0; i < selectedRows.length; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^for  ( int i = 0; i < rowCount; i++ )  {^478^^^^^468^488^for  ( int i = 0; i < selectedRows.length; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^for  ( selectedRows.lengthnt i = 0; i < i; i++ )  {^478^^^^^468^488^for  ( int i = 0; i < selectedRows.length; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P1_Replace_Type]^for  (  short  j = 0; j < selectedColumns.length; j++ )  {^479^^^^^468^488^for  ( int j = 0; j < selectedColumns.length; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P2_Replace_Operator]^for  ( int j = 0; j == selectedColumns.length; j++ )  {^479^^^^^468^488^for  ( int j = 0; j < selectedColumns.length; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P3_Replace_Literal]^for  ( int j = -7; j < selectedColumns.length; j++ )  {^479^^^^^468^488^for  ( int j = 0; j < selectedColumns.length; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^for  ( int startRow = 0; j < selectedColumns.length; j++ )  {^479^^^^^468^488^for  ( int j = 0; j < selectedColumns.length; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^for  ( int j = 0; j < selectedRows.length; j++ )  {^479^^^^^468^488^for  ( int j = 0; j < selectedColumns.length; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^for  ( roundingModent j = 0; j < selectedColumns.length; j++ )  {^479^^^^^468^488^for  ( int j = 0; j < selectedColumns.length; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^for  ( int j = 0; j < parity; j++ )  {^479^^^^^468^488^for  ( int j = 0; j < selectedColumns.length; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^for  ( jnt i = 0; j < selectedColumns.length; j++ )  {^479^^^^^468^488^for  ( int j = 0; j < selectedColumns.length; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^for  ( int j = 0; j < selectedColumns.length.length; j++ )  {^479^^^^^468^488^for  ( int j = 0; j < selectedColumns.length; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^for  ( int j = 0; j < selectedColumns; j++ )  {^479^^^^^468^488^for  ( int j = 0; j < selectedColumns.length; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^subMatrixData[i][j] = outData[selectedRows[i]][selectedColumns[j]];^480^^^^^468^488^subMatrixData[i][j] = data[selectedRows[i]][selectedColumns[j]];^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P8_Replace_Mix]^subMatrixData[i][j] ;^480^^^^^468^488^subMatrixData[i][j] = data[selectedRows[i]][selectedColumns[j]];^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^subMatrixData[i][j] = subMatrixData[selectedRows[i]][selectedColumns[j]];^480^^^^^468^488^subMatrixData[i][j] = data[selectedRows[i]][selectedColumns[j]];^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P8_Replace_Mix]^subMatrixData[i][j]  =  subMatrixData[i][j] ;^480^^^^^468^488^subMatrixData[i][j] = data[selectedRows[i]][selectedColumns[j]];^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P1_Replace_Type]^for  (  long  j = 0; j < selectedColumns.length; j++ )  {^479^^^^^468^488^for  ( int j = 0; j < selectedColumns.length; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P2_Replace_Operator]^for  ( int j = 0; j > selectedColumns.length; j++ )  {^479^^^^^468^488^for  ( int j = 0; j < selectedColumns.length; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P3_Replace_Literal]^for  ( int j = 7; j < selectedColumns.length; j++ )  {^479^^^^^468^488^for  ( int j = 0; j < selectedColumns.length; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^for  ( int row = 0; j < selectedColumns.length; j++ )  {^479^^^^^468^488^for  ( int j = 0; j < selectedColumns.length; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^for  ( selectedColumns.lengthnt j = 0; j < i; j++ )  {^479^^^^^468^488^for  ( int j = 0; j < selectedColumns.length; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^for  ( int selectedColumns.length = 0; j < j; j++ )  {^479^^^^^468^488^for  ( int j = 0; j < selectedColumns.length; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P8_Replace_Mix]^for  ( int j = 0; j < rowCount; j++ )  {^479^^^^^468^488^for  ( int j = 0; j < selectedColumns.length; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P1_Replace_Type]^for  (  long  i = 0; i < selectedRows.length; i++ )  {^478^^^^^468^488^for  ( int i = 0; i < selectedRows.length; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P3_Replace_Literal]^for  ( int i = parity; i < selectedRows.length; i++ )  {^478^^^^^468^488^for  ( int i = 0; i < selectedRows.length; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P3_Replace_Literal]^for  ( int i = -9; i < selectedRows.length; i++ )  {^478^^^^^468^488^for  ( int i = 0; i < selectedRows.length; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^for  ( paritynt i = 0; i < selectedRows.length; i++ )  {^478^^^^^468^488^for  ( int i = 0; i < selectedRows.length; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^for  ( int i = 0; i < row; i++ )  {^478^^^^^468^488^for  ( int i = 0; i < selectedRows.length; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P2_Replace_Operator]^for  ( int j = 0; j <= selectedColumns.length; j++ )  {^479^^^^^468^488^for  ( int j = 0; j < selectedColumns.length; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^for  ( startRownt j = 0; j < selectedColumns.length; j++ )  {^479^^^^^468^488^for  ( int j = 0; j < selectedColumns.length; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^for  ( selectedColumnsnt j = 0; j < i.length; j++ )  {^479^^^^^468^488^for  ( int j = 0; j < selectedColumns.length; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P8_Replace_Mix]^for  ( int j = 0; j < startColumn; j++ )  {^479^^^^^468^488^for  ( int j = 0; j < selectedColumns.length; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P3_Replace_Literal]^for  ( int j = -1; j < selectedColumns.length; j++ )  {^479^^^^^468^488^for  ( int j = 0; j < selectedColumns.length; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P5_Replace_Variable]^for  ( int parity = 0; j < selectedColumns.length; j++ )  {^479^^^^^468^488^for  ( int j = 0; j < selectedColumns.length; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P8_Replace_Mix]^for  ( int j = 0; j < startRow; j++ )  {^479^^^^^468^488^for  ( int j = 0; j < selectedColumns.length; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P3_Replace_Literal]^for  ( int i = 5; i < selectedRows.length; i++ )  {^478^^^^^468^488^for  ( int i = 0; i < selectedRows.length; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P3_Replace_Literal]^for  ( int j = startColumn; j < selectedColumns.length; j++ )  {^479^^^^^468^488^for  ( int j = 0; j < selectedColumns.length; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P4_Replace_Constructor]^throw throw  new MatrixIndexException ( "matrix entry does not exist" )   ;^485^^^^^468^488^throw new MatrixIndexException  (" ")  ;^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P3_Replace_Literal]^for  ( int i = nRows; i < selectedRows.length; i++ )  {^478^^^^^468^488^for  ( int i = 0; i < selectedRows.length; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P3_Replace_Literal]^for  ( int j = parity; j < selectedColumns.length; j++ )  {^479^^^^^468^488^for  ( int j = 0; j < selectedColumns.length; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] getSubMatrix [RETURN_TYPE] BigMatrix   int[] selectedRows int[] selectedColumns [VARIABLES] boolean  BigMatrixImpl  subMatrix  int[]  permutation  selectedColumns  selectedRows  ArrayIndexOutOfBoundsException  e  long  serialVersionUID  int  col  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrixData  
[P2_Replace_Operator]^if  (  ( row < 0 )  &&  ( column < 0 )  ) {^519^^^^^504^534^if  (  ( row < 0 )  ||  ( column < 0 )  ) {^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P2_Replace_Operator]^if  (  ( row <= 0 )  ||  ( column < 0 )  ) {^519^^^^^504^534^if  (  ( row < 0 )  ||  ( column < 0 )  ) {^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P2_Replace_Operator]^if  (  ( row < 0 )  ||  ( column > 0 )  ) {^519^^^^^504^534^if  (  ( row < 0 )  ||  ( column < 0 )  ) {^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^if  (  ( row < j )  ||  ( column < j )  ) {^519^^^^^504^534^if  (  ( row < 0 )  ||  ( column < 0 )  ) {^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^if  (  ( row < 8 )  ||  ( column < 8 )  ) {^519^^^^^504^534^if  (  ( row < 0 )  ||  ( column < 0 )  ) {^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  (  ( rowCount < 0 )  ||  ( column < 0 )  ) {^519^^^^^504^534^if  (  ( row < 0 )  ||  ( column < 0 )  ) {^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  (  ( row < 0 )  ||  ( rowCount < 0 )  ) {^519^^^^^504^534^if  (  ( row < 0 )  ||  ( column < 0 )  ) {^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  (  ( column < 0 )  ||  ( row < 0 )  ) {^519^^^^^504^534^if  (  ( row < 0 )  ||  ( column < 0 )  ) {^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P6_Replace_Expression]^if  (  ( row < 0 )  ) {^519^^^^^504^534^if  (  ( row < 0 )  ||  ( column < 0 )  ) {^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P6_Replace_Expression]^if  (   ( column < 0 )  ) {^519^^^^^504^534^if  (  ( row < 0 )  ||  ( column < 0 )  ) {^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P6_Replace_Expression]^if  ( row < 0 ) {^519^^^^^504^534^if  (  ( row < 0 )  ||  ( column < 0 )  ) {^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P6_Replace_Expression]^if  ( column < 0 ) {^519^^^^^504^534^if  (  ( row < 0 )  ||  ( column < 0 )  ) {^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^if  (  ( row < 0L )  ||  ( column < 0L )  ) {^519^^^^^504^534^if  (  ( row < 0 )  ||  ( column < 0 )  ) {^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P15_Unwrap_Block]^throw new org.apache.commons.math.linear.MatrixIndexException("invalid row or column index selection");^519^520^521^522^^504^534^if  (  ( row < 0 )  ||  ( column < 0 )  ) { throw new MatrixIndexException ( "invalid row or column index selection" ) ; }^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P16_Remove_Block]^^519^520^521^522^^504^534^if  (  ( row < 0 )  ||  ( column < 0 )  ) { throw new MatrixIndexException ( "invalid row or column index selection" ) ; }^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^throw new MatrixIndexException ( "d row or column index selectnvalid row or column index selection" ) ;^520^521^^^^505^535^throw new MatrixIndexException ( "invalid row or column index selection" ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P4_Replace_Constructor]^throw throw  new MatrixIndexException ( "selected row and column index arrays must be non-empty" )  ;^520^521^^^^505^535^throw new MatrixIndexException ( "invalid row or column index selection" ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( row < 0 )  ||  ( column < 0 )  )  {     throw new MatrixIndexException ( "invalid row or column index selection" ) ; }^520^^^^^505^535^[Delete]^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^throw new MatrixIndexException ( "inval" ) ;^520^521^^^^505^535^throw new MatrixIndexException ( "invalid row or column index selection" ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^throw new MatrixIndexException ( "selected row and column index arrays must be non-empty" ) ;throw new MatrixIndexException ( "invalid row or column index selection" ) ;^520^521^^^^505^535^throw new MatrixIndexException ( "invalid row or column index selection" ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^throw new MatrixIndexException ( "invalid row or column index selectionlu" ) ;^520^521^^^^505^535^throw new MatrixIndexException ( "invalid row or column index selection" ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^throw new MatrixIndexException ( "invalid row or column index selectionnvalid row o" ) ;^520^521^^^^505^535^throw new MatrixIndexException ( "invalid row or column index selection" ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P1_Replace_Type]^long  nRows = subMatrix.length;^523^^^^^508^538^int nRows = subMatrix.length;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^int nRows = subMatrixData.length;^523^^^^^508^538^int nRows = subMatrix.length;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^int nRows = row;^523^^^^^508^538^int nRows = subMatrix.length;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^int nRows = subMatrix.length.length;^523^^^^^508^538^int nRows = subMatrix.length;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^int nRows = subMatrix;^523^^^^^508^538^int nRows = subMatrix.length;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^int nRows = roundingMode;^523^^^^^508^538^int nRows = subMatrix.length;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = in[0].length;int nRows = subMatrix.length;^523^^^^^508^538^int nRows = subMatrix.length;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRows = v.length;int nRows = subMatrix.length;^523^^^^^508^538^int nRows = subMatrix.length;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRows = in.length;int nRows = subMatrix.length;^523^^^^^508^538^int nRows = subMatrix.length;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = subMatrix[0].length;int nRows = subMatrix.length;^523^^^^^508^538^int nRows = subMatrix.length;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = d[0].length;int nRows = subMatrix.length;^523^^^^^508^538^int nRows = subMatrix.length;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRows = d.length;int nRows = subMatrix.length;^523^^^^^508^538^int nRows = subMatrix.length;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P2_Replace_Operator]^if  ( nRows <= 0 )  {^524^^^^^509^539^if  ( nRows == 0 )  {^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^if  ( nRows == columnDimension )  {^524^^^^^509^539^if  ( nRows == 0 )  {^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( r == 0 )  {^524^^^^^509^539^if  ( nRows == 0 )  {^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^if  ( nRows == 3 )  {^524^^^^^509^539^if  ( nRows == 0 )  {^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  ( nRows != nCols )  {^524^^^^^509^539^if  ( nRows == 0 )  {^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  ( nCols == 0 )  {^524^^^^^509^539^if  ( nRows == 0 )  {^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("Matrix must have at least one row.");^524^525^526^527^^509^539^if  ( nRows == 0 )  { throw new IllegalArgumentException ( "Matrix must have at least one row." ) ; }^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P16_Remove_Block]^^524^525^526^527^^509^539^if  ( nRows == 0 )  { throw new IllegalArgumentException ( "Matrix must have at least one row." ) ; }^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( ! ( isSquare (  )  )  )  {     throw new IllegalArgumentException ( "matrix is not square" ) ; }^524^^^^^509^539^[Delete]^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( b.length )  != nRows )  {     throw new IllegalArgumentException ( "constant vector has wrong length" ) ; }^524^^^^^509^539^[Delete]^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( subMatrix[r].length )  != nCols )  {     throw new IllegalArgumentException ( "All input rows must have the same length." ) ; }^524^^^^^509^539^[Delete]^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( v.length )  != nRows )  {     throw new IllegalArgumentException ( "vector has wrong length" ) ; }^524^^^^^509^539^[Delete]^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( this.getColumnDimension (  )  )  !=  ( m.getRowDimension (  )  )  )  {     throw new IllegalArgumentException ( "Matrices are not multiplication compatible." ) ; }^524^^^^^509^539^[Delete]^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( d[row].length )  != nCols )  {     throw new IllegalArgumentException ( "All input rows must have the same length." ) ; }^524^^^^^509^539^[Delete]^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( nCols == 0 )  {     throw new IllegalArgumentException ( "Matrix must have at least one column." ) ; }^524^^^^^509^539^[Delete]^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( rowDimension <= 0 )  ||  ( columnDimension <= 0 )  )  {     throw new IllegalArgumentException ( "row and column dimensions must be positive" ) ; }^524^^^^^509^539^[Delete]^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "ave at least one r" ) ;^525^526^^^^510^540^throw new IllegalArgumentException ( "Matrix must have at least one row." ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "Matrix must have at least one column." )  ;^525^526^^^^510^540^throw new IllegalArgumentException ( "Matrix must have at least one row." ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( nRows == 0 )  {     throw new IllegalArgumentException ( "Matrix must have at least one row." ) ; }^525^^^^^510^540^[Delete]^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( nCols == 0 )  {     throw new IllegalArgumentException ( "Matrix must have at least one column." ) ; }^525^^^^^510^540^[Delete]^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "trix " ) ;^525^526^^^^510^540^throw new IllegalArgumentException ( "Matrix must have at least one row." ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "a" ) ;^525^526^^^^510^540^throw new IllegalArgumentException ( "Matrix must have at least one row." ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Matrix must have at least one row.x m" ) ;^525^526^^^^510^540^throw new IllegalArgumentException ( "Matrix must have at least one row." ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^throw new IllegalArgumentException  (" ")  ; ;^525^526^^^^510^540^throw new IllegalArgumentException ( "Matrix must have at least one row." ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException  (" ")  ;throw new IllegalArgumentException ( "Matrix must have at least one row." ) ;^525^526^^^^510^540^throw new IllegalArgumentException ( "Matrix must have at least one row." ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "All input rows must have the same length." ) ;throw new IllegalArgumentException ( "Matrix must have at least one row." ) ;^525^526^^^^510^540^throw new IllegalArgumentException ( "Matrix must have at least one row." ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "row and column dimensions must be positive" ) ;throw new IllegalArgumentException ( "Matrix must have at least one row." ) ;^525^526^^^^510^540^throw new IllegalArgumentException ( "Matrix must have at least one row." ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Matrix must have at least one column." ) ;throw new IllegalArgumentException ( "Matrix must have at least one row." ) ;^525^526^^^^510^540^throw new IllegalArgumentException ( "Matrix must have at least one row." ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P1_Replace_Type]^short  nCols = subMatrix[0].length;^528^^^^^513^543^int nCols = subMatrix[0].length;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^int nCols = subMatrixData[0].length;^528^^^^^513^543^int nCols = subMatrix[0].length;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^int nCols = subMatrix[0].length[0].length;^528^^^^^513^543^int nCols = subMatrix[0].length;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = in[0].length;int nCols = subMatrix[0].length;^528^^^^^513^543^int nCols = subMatrix[0].length;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRows = v.length;int nCols = subMatrix[0].length;^528^^^^^513^543^int nCols = subMatrix[0].length;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRows = subMatrix.length;int nCols = subMatrix[0].length;^528^^^^^513^543^int nCols = subMatrix[0].length;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRows = in.length;int nCols = subMatrix[0].length;^528^^^^^513^543^int nCols = subMatrix[0].length;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = d[0].length;int nCols = subMatrix[0].length;^528^^^^^513^543^int nCols = subMatrix[0].length;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRows = d.length;int nCols = subMatrix[0].length;^528^^^^^513^543^int nCols = subMatrix[0].length;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P2_Replace_Operator]^if  ( nCols >= 0 )  {^529^^^^^514^544^if  ( nCols == 0 )  {^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^if  ( nCols == 7 )  {^529^^^^^514^544^if  ( nCols == 0 )  {^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( row == 0 )  {^529^^^^^514^544^if  ( nCols == 0 )  {^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^if  ( nCols == 2 )  {^529^^^^^514^544^if  ( nCols == 0 )  {^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  ( nRows != nCols )  {^529^^^^^514^544^if  ( nCols == 0 )  {^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  ( nRows == 0 )  {^529^^^^^514^544^if  ( nCols == 0 )  {^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("Matrix must have at least one column.");^529^530^531^532^^514^544^if  ( nCols == 0 )  { throw new IllegalArgumentException ( "Matrix must have at least one column." ) ; }^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P16_Remove_Block]^^529^530^531^532^^514^544^if  ( nCols == 0 )  { throw new IllegalArgumentException ( "Matrix must have at least one column." ) ; }^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( ! ( isSquare (  )  )  )  {     throw new IllegalArgumentException ( "matrix is not square" ) ; }^529^^^^^514^544^[Delete]^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( b.length )  != nRows )  {     throw new IllegalArgumentException ( "constant vector has wrong length" ) ; }^529^^^^^514^544^[Delete]^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( nRows == 0 )  {     throw new IllegalArgumentException ( "Matrix must have at least one row." ) ; }^529^^^^^514^544^[Delete]^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( subMatrix[r].length )  != nCols )  {     throw new IllegalArgumentException ( "All input rows must have the same length." ) ; }^529^^^^^514^544^[Delete]^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( v.length )  != nRows )  {     throw new IllegalArgumentException ( "vector has wrong length" ) ; }^529^^^^^514^544^[Delete]^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( this.getColumnDimension (  )  )  !=  ( m.getRowDimension (  )  )  )  {     throw new IllegalArgumentException ( "Matrices are not multiplication compatible." ) ; }^529^^^^^514^544^[Delete]^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( d[row].length )  != nCols )  {     throw new IllegalArgumentException ( "All input rows must have the same length." ) ; }^529^^^^^514^544^[Delete]^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( rowDimension <= 0 )  ||  ( columnDimension <= 0 )  )  {     throw new IllegalArgumentException ( "row and column dimensions must be positive" ) ; }^529^^^^^514^544^[Delete]^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Matrix must have at least one column.trix mus" ) ;^530^531^^^^515^545^throw new IllegalArgumentException ( "Matrix must have at least one column." ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "Matrix must have at least one row." )  ;^530^531^^^^515^545^throw new IllegalArgumentException ( "Matrix must have at least one column." ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( nRows == 0 )  {     throw new IllegalArgumentException ( "Matrix must have at least one row." ) ; }^530^^^^^515^545^[Delete]^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( nCols == 0 )  {     throw new IllegalArgumentException ( "Matrix must have at least one column." ) ; }^530^^^^^515^545^[Delete]^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "i" ) ;^530^531^^^^515^545^throw new IllegalArgumentException ( "Matrix must have at least one column." ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Matrix must have at least one row." ) ;throw new IllegalArgumentException ( "Matrix must have at least one column." ) ;^530^531^^^^515^545^throw new IllegalArgumentException ( "Matrix must have at least one column." ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "All input rows must have the same length." ) ;throw new IllegalArgumentException ( "Matrix must have at least one column." ) ;^530^531^^^^515^545^throw new IllegalArgumentException ( "Matrix must have at least one column." ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "row and column dimensions must be positive" ) ;throw new IllegalArgumentException ( "Matrix must have at least one column." ) ;^530^531^^^^515^545^throw new IllegalArgumentException ( "Matrix must have at least one column." ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Matrix must have at least one column.ix must have at leas" ) ;^530^531^^^^515^545^throw new IllegalArgumentException ( "Matrix must have at least one column." ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "e at l" ) ;^530^531^^^^515^545^throw new IllegalArgumentException ( "Matrix must have at least one column." ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P2_Replace_Operator]^if  ( subMatrix[r].length <= nCols )  {^534^^^^^519^549^if  ( subMatrix[r].length != nCols )  {^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( subMatrixData[r].length != nCols )  {^534^^^^^519^549^if  ( subMatrix[r].length != nCols )  {^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( subMatrix[r].length != roundingMode )  {^534^^^^^519^549^if  ( subMatrix[r].length != nCols )  {^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( subMatrix[r].length[r].length != nCols )  {^534^^^^^519^549^if  ( subMatrix[r].length != nCols )  {^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( subMatrix[r].length != subMatrix[r].length )  {^534^^^^^519^549^if  ( subMatrix[r].length != nCols )  {^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^if  ( subMatrix[r].length = nCols )  {^534^^^^^519^549^if  ( subMatrix[r].length != nCols )  {^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  ( d[row].length != nCols )  {^534^^^^^519^549^if  ( subMatrix[r].length != nCols )  {^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  ( b.length != nRows )  {^534^^^^^519^549^if  ( subMatrix[r].length != nCols )  {^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("All input rows must have the same length.");^534^535^536^537^^519^549^if  ( subMatrix[r].length != nCols )  { throw new IllegalArgumentException ( "All input rows must have the same length." ) ; }^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P16_Remove_Block]^^534^535^536^537^^519^549^if  ( subMatrix[r].length != nCols )  { throw new IllegalArgumentException ( "All input rows must have the same length." ) ; }^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( ! ( isSquare (  )  )  )  {     throw new IllegalArgumentException ( "matrix is not square" ) ; }^534^^^^^519^549^[Delete]^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( b.length )  != nRows )  {     throw new IllegalArgumentException ( "constant vector has wrong length" ) ; }^534^^^^^519^549^[Delete]^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( nRows == 0 )  {     throw new IllegalArgumentException ( "Matrix must have at least one row." ) ; }^534^^^^^519^549^[Delete]^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( v.length )  != nRows )  {     throw new IllegalArgumentException ( "vector has wrong length" ) ; }^534^^^^^519^549^[Delete]^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( v.length )  !=  ( this.getColumnDimension (  )  )  )  {     throw new IllegalArgumentException ( "vector has wrong length" ) ; }^534^^^^^519^549^[Delete]^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( this.getColumnDimension (  )  )  !=  ( m.getRowDimension (  )  )  )  {     throw new IllegalArgumentException ( "Matrices are not multiplication compatible." ) ; }^534^^^^^519^549^[Delete]^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( d[row].length )  != nCols )  {     throw new IllegalArgumentException ( "All input rows must have the same length." ) ; }^534^^^^^519^549^[Delete]^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( nCols == 0 )  {     throw new IllegalArgumentException ( "Matrix must have at least one column." ) ; }^534^^^^^519^549^[Delete]^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( rowDimension <= 0 )  ||  ( columnDimension <= 0 )  )  {     throw new IllegalArgumentException ( "row and column dimensions must be positive" ) ; }^534^^^^^519^549^[Delete]^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "All input rows must have the same length. input rows must have the same length" ) ;^535^536^^^^520^550^throw new IllegalArgumentException ( "All input rows must have the same length." ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( subMatrix[r].length )  != nCols )  {     throw new IllegalArgumentException ( "All input rows must have the same length." ) ; }^535^^^^^520^550^[Delete]^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( d[row].length )  != nCols )  {     throw new IllegalArgumentException ( "All input rows must have the same length." ) ; }^535^^^^^520^550^[Delete]^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "All input rows must have the same length.ll input rows must " ) ;^535^536^^^^520^550^throw new IllegalArgumentException ( "All input rows must have the same length." ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Matrix must have at least one row." ) ;throw new IllegalArgumentException ( "All input rows must have the same length." ) ;^535^536^^^^520^550^throw new IllegalArgumentException ( "All input rows must have the same length." ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "row and column dimensions must be positive" ) ;throw new IllegalArgumentException ( "All input rows must have the same length." ) ;^535^536^^^^520^550^throw new IllegalArgumentException ( "All input rows must have the same length." ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Matrix must have at least one column." ) ;throw new IllegalArgumentException ( "All input rows must have the same length." ) ;^535^536^^^^520^550^throw new IllegalArgumentException ( "All input rows must have the same length." ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( nRows == 0 )  {     throw new IllegalArgumentException ( "Matrix must have at least one row." ) ; }^535^^^^^520^550^[Delete]^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( nCols == 0 )  {     throw new IllegalArgumentException ( "Matrix must have at least one column." ) ; }^535^^^^^520^550^[Delete]^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  short  r = 1; r < nRows; r++ )  {^533^^^^^518^548^for  ( int r = 1; r < nRows; r++ )  {^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  ( int r = 1; r == nRows; r++ )  {^533^^^^^518^548^for  ( int r = 1; r < nRows; r++ )  {^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int r = startRow; r < nRows; r++ )  {^533^^^^^518^548^for  ( int r = 1; r < nRows; r++ )  {^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int nSum = 1; r < nRows; r++ )  {^533^^^^^518^548^for  ( int r = 1; r < nRows; r++ )  {^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P2_Replace_Operator]^if  ( subMatrix[r].length == nCols )  {^534^^^^^519^549^if  ( subMatrix[r].length != nCols )  {^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( subMatrix[r].length != parity )  {^534^^^^^519^549^if  ( subMatrix[r].length != nCols )  {^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "All input rows must have the same length.t" ) ;^535^536^^^^520^550^throw new IllegalArgumentException ( "All input rows must have the same length." ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^throw new IllegalArgumentException ( " ll input rows must have the same length." ) ;^535^536^^^^520^550^throw new IllegalArgumentException ( "All input rows must have the same length." ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^throw new IllegalArgumentException ( "Matrix must have at least one row." ) ; ;^535^536^^^^520^550^throw new IllegalArgumentException ( "All input rows must have the same length." ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "the same ll input rows must have the same length." ) ;^535^536^^^^520^550^throw new IllegalArgumentException ( "All input rows must have the same length." ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^throw new IllegalArgumentException ( " rows must hall input rows must have the same length." ) ;^535^536^^^^520^550^throw new IllegalArgumentException ( "All input rows must have the same length." ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "All input rows must have the same length.lengt" ) ;^535^536^^^^520^550^throw new IllegalArgumentException ( "All input rows must have the same length." ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int r = scale; r < nRows; r++ )  {^533^^^^^518^548^for  ( int r = 1; r < nRows; r++ )  {^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "All input rows must have the same length.l " ) ;^535^536^^^^520^550^throw new IllegalArgumentException ( "All input rows must have the same length." ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P2_Replace_Operator]^if  ( data != null )  {^539^^^^^524^554^if  ( data == null )  {^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( subMatrixData == null )  {^539^^^^^524^554^if  ( data == null )  {^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P6_Replace_Expression]^if  ( row > 0 || column > 0 )  {^539^^^^^524^554^if  ( data == null )  {^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P6_Replace_Expression]^if  ( row > 0 )  {^539^^^^^524^554^if  ( data == null )  {^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P6_Replace_Expression]^if  ( column > 0 )  {^539^^^^^524^554^if  ( data == null )  {^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^if  ( data == true )  {^539^^^^^524^554^if  ( data == null )  {^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  ( lu == null )  {^539^^^^^524^554^if  ( data == null )  {^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  ( max != col )  {^539^^^^^524^554^if  ( data == null )  {^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P15_Unwrap_Block]^if ((row > 0) || (column > 0))    throw new org.apache.commons.math.linear.MatrixIndexException("matrix must be initialized to perfom this method");; data = new java.math.BigDecimal[nRows][nCols]; java.lang.System.arraycopy(subMatrix, 0, data, 0, subMatrix.length);^539^540^541^542^543^524^554^if  ( data == null )  { if  (  ( row > 0 ) || ( column > 0 )  )  throw new MatrixIndexException ( "matrix must be initialized to perfom this method" ) ; data = new BigDecimal[nRows][nCols]; System.arraycopy ( subMatrix, 0, data, 0, subMatrix.length ) ; }^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P16_Remove_Block]^^539^540^541^542^543^524^554^if  ( data == null )  { if  (  ( row > 0 ) || ( column > 0 )  )  throw new MatrixIndexException ( "matrix must be initialized to perfom this method" ) ; data = new BigDecimal[nRows][nCols]; System.arraycopy ( subMatrix, 0, data, 0, subMatrix.length ) ; }^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P2_Replace_Operator]^if  (  ( row > 0 ) && ( column > 0 )  )  throw new MatrixIndexException ( "matrix must be initialized to perfom this method" ) ;^540^541^^^^525^555^if  (  ( row > 0 ) || ( column > 0 )  )  throw new MatrixIndexException ( "matrix must be initialized to perfom this method" ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P2_Replace_Operator]^if  (  ( row >= 0 ) || ( column > 0 )  )  throw new MatrixIndexException ( "matrix must be initialized to perfom this method" ) ;^540^541^^^^525^555^if  (  ( row > 0 ) || ( column > 0 )  )  throw new MatrixIndexException ( "matrix must be initialized to perfom this method" ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P2_Replace_Operator]^if  (  ( row > 0 ) || ( column >= 0 )  )  throw new MatrixIndexException ( "matrix must be initialized to perfom this method" ) ;^540^541^^^^525^555^if  (  ( row > 0 ) || ( column > 0 )  )  throw new MatrixIndexException ( "matrix must be initialized to perfom this method" ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^if  (  ( row > nSum ) || ( column > nSum )  )  throw new MatrixIndexException ( "matrix must be initialized to perfom this method" ) ;^540^541^^^^525^555^if  (  ( row > 0 ) || ( column > 0 )  )  throw new MatrixIndexException ( "matrix must be initialized to perfom this method" ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^if  (  ( row > 0 ) || ( column > 0 )  )  throw new MatrixIndexException ( "nitialized toatrix must be initialized to perfom this method" ) ;^540^541^^^^525^555^if  (  ( row > 0 ) || ( column > 0 )  )  throw new MatrixIndexException ( "matrix must be initialized to perfom this method" ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P4_Replace_Constructor]^if  (  ( row > 0 ) || ( column > 0 )  )  throw if  (  ( row > 0 ) || ( column > 0 )  )  throw  new MatrixIndexException ( "matrix entry does not exist" )  ;^540^541^^^^525^555^if  (  ( row > 0 ) || ( column > 0 )  )  throw new MatrixIndexException ( "matrix must be initialized to perfom this method" ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  (  ( parity > 0 ) || ( column > 0 )  )  throw new MatrixIndexException ( "matrix must be initialized to perfom this method" ) ;^540^541^^^^525^555^if  (  ( row > 0 ) || ( column > 0 )  )  throw new MatrixIndexException ( "matrix must be initialized to perfom this method" ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  (  ( row > 0 ) || ( parity > 0 )  )  throw new MatrixIndexException ( "matrix must be initialized to perfom this method" ) ;^540^541^^^^525^555^if  (  ( row > 0 ) || ( column > 0 )  )  throw new MatrixIndexException ( "matrix must be initialized to perfom this method" ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  (  ( column > 0 ) || ( row > 0 )  )  throw new MatrixIndexException ( "matrix must be initialized to perfom this method" ) ;^540^541^^^^525^555^if  (  ( row > 0 ) || ( column > 0 )  )  throw new MatrixIndexException ( "matrix must be initialized to perfom this method" ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P6_Replace_Expression]^if  ( row > 0 ) ;^540^541^^^^525^555^if  (  ( row > 0 ) || ( column > 0 )  )  throw new MatrixIndexException ( "matrix must be initialized to perfom this method" ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P6_Replace_Expression]^if  ( column > 0 ) ;^540^541^^^^525^555^if  (  ( row > 0 ) || ( column > 0 )  )  throw new MatrixIndexException ( "matrix must be initialized to perfom this method" ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^if  (  ( row > 0 - 0 ) || ( column > 0 - 0 )  )  throw new MatrixIndexException ( "matrix must be initialized to perfom this method" ) ;^540^541^^^^525^555^if  (  ( row > 0 ) || ( column > 0 )  )  throw new MatrixIndexException ( "matrix must be initialized to perfom this method" ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P15_Unwrap_Block]^throw new org.apache.commons.math.linear.MatrixIndexException("matrix must be initialized to perfom this method");^540^541^542^543^544^525^555^if  (  ( row > 0 ) || ( column > 0 )  )  throw new MatrixIndexException ( "matrix must be initialized to perfom this method" ) ; data = new BigDecimal[nRows][nCols]; System.arraycopy ( subMatrix, 0, data, 0, subMatrix.length ) ; }^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P16_Remove_Block]^^540^541^542^543^544^525^555^if  (  ( row > 0 ) || ( column > 0 )  )  throw new MatrixIndexException ( "matrix must be initialized to perfom this method" ) ; data = new BigDecimal[nRows][nCols]; System.arraycopy ( subMatrix, 0, data, 0, subMatrix.length ) ; }^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( ! ( isSquare (  )  )  )  {     throw new InvalidMatrixException ( "matrix is not square" ) ; }^540^^^^^525^555^[Delete]^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( ! ( isValidCoordinate ( 0, column )  )  )  {     throw new MatrixIndexException ( "illegal column argument" ) ; }^540^^^^^525^555^[Delete]^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  (  ( selectedRows.length )  *  ( selectedColumns.length )  )  == 0 )  {     throw new MatrixIndexException ( "selected row and column index arrays must be non-empty" ) ; }^540^^^^^525^555^[Delete]^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( ! ( isValidCoordinate ( row, column )  )  )  {     throw new MatrixIndexException ( "matrix entry does not exist" ) ; }^540^^^^^525^555^[Delete]^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( ! ( isValidCoordinate ( row, 0 )  )  )  {     throw new MatrixIndexException ( "illegal row argument" ) ; }^540^^^^^525^555^[Delete]^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( row < 0 )  ||  ( column < 0 )  )  {     throw new MatrixIndexException ( "invalid row or column index selection" ) ; }^540^^^^^525^555^[Delete]^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( ! ( isValidCoordinate ( 0, col )  )  )  {     throw new MatrixIndexException ( "illegal column argument" ) ; }^540^^^^^525^555^[Delete]^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( this.isSingular (  )  )  {     throw new InvalidMatrixException ( "Matrix is singular." ) ; }^540^^^^^525^555^[Delete]^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( nRows != nCols )  {     throw new InvalidMatrixException ( "LU decomposition requires that the matrix be square." ) ; }^540^^^^^525^555^[Delete]^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^if  (  ( row > 0 ) || ( column > 0 )  )  throw new MatrixIndexException ( "maatrix must be initialized to perfom this method" ) ;^540^541^^^^525^555^if  (  ( row > 0 ) || ( column > 0 )  )  throw new MatrixIndexException ( "matrix must be initialized to perfom this method" ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^if  (  ( row > 0 ) || ( column > 0 )  )  throw new MatrixIndexException ( "matrix must be initialized to perfom this methodmust be initialize" ) ;^540^541^^^^525^555^if  (  ( row > 0 ) || ( column > 0 )  )  throw new MatrixIndexException ( "matrix must be initialized to perfom this method" ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^data =  new BigDecimal[rowDimension][nCols];^542^^^^^527^557^data = new BigDecimal[nRows][nCols];^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^data = new BigDecimal[nRows][1];data = new BigDecimal[nRows][nCols];^542^^^^^527^557^data = new BigDecimal[nRows][nCols];^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^data[i][j] = new BigDecimal ( in[i][j] ) ;data = new BigDecimal[nRows][nCols];^542^^^^^527^557^data = new BigDecimal[nRows][nCols];^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^bd[i] = new BigDecimal ( b[i] ) ;data = new BigDecimal[nRows][nCols];^542^^^^^527^557^data = new BigDecimal[nRows][nCols];^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^data = new BigDecimal[rowDimension][columnDimension];data = new BigDecimal[nRows][nCols];^542^^^^^527^557^data = new BigDecimal[nRows][nCols];^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^bd[i] = new BigDecimal ( v[i] ) ;data = new BigDecimal[nRows][nCols];^542^^^^^527^557^data = new BigDecimal[nRows][nCols];^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^if  (  ( row > 0 ) || ( column > 0 )  )  throw new MatrixIndexException ( "tri" ) ;^540^541^^^^525^555^if  (  ( row > 0 ) || ( column > 0 )  )  throw new MatrixIndexException ( "matrix must be initialized to perfom this method" ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^if  (  ( row > 0 ) || ( column > 0 )  )  throw new MatrixIndexException ( " be initialized to perfom this metatrix must be initialized to perfom this method" ) ;^540^541^^^^525^555^if  (  ( row > 0 ) || ( column > 0 )  )  throw new MatrixIndexException ( "matrix must be initialized to perfom this method" ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^if  (  ( row > 0 ) || ( column > 0 )  )  throw new MatrixIndexException ;^540^541^^^^525^555^if  (  ( row > 0 ) || ( column > 0 )  )  throw new MatrixIndexException ( "matrix must be initialized to perfom this method" ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^System.arraycopy ( subMatrix, 3, data, 3, subMatrix.length ) ;^543^^^^^528^558^System.arraycopy ( subMatrix, 0, data, 0, subMatrix.length ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^System.arraycopy ( subMatrix, -5, data, -5, subMatrix.length ) ;^543^^^^^528^558^System.arraycopy ( subMatrix, 0, data, 0, subMatrix.length ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^System.arraycopy ( subMatrix, 0, subMatrixData, 0, subMatrix.length ) ;^543^^^^^528^558^System.arraycopy ( subMatrix, 0, data, 0, subMatrix.length ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^System.arraycopy ( subMatrix, 0, data, 0, row ) ;^543^^^^^528^558^System.arraycopy ( subMatrix, 0, data, 0, subMatrix.length ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^System.arraycopy (  0, data, 0, subMatrix.length ) ;^543^^^^^528^558^System.arraycopy ( subMatrix, 0, data, 0, subMatrix.length ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^System.arraycopy ( subMatrix, 0,  0, subMatrix.length ) ;^543^^^^^528^558^System.arraycopy ( subMatrix, 0, data, 0, subMatrix.length ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^System.arraycopy ( subMatrix, 0, data, 0 ) ;^543^^^^^528^558^System.arraycopy ( subMatrix, 0, data, 0, subMatrix.length ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^System.arraycopy ( subMatrix.length, 0, data, 0, subMatrix ) ;^543^^^^^528^558^System.arraycopy ( subMatrix, 0, data, 0, subMatrix.length ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^System.arraycopy ( data, 0, subMatrix, 0, subMatrix.length ) ;^543^^^^^528^558^System.arraycopy ( subMatrix, 0, data, 0, subMatrix.length ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^System.arraycopy ( subMatrixData, 0, data, 0, subMatrix.length ) ;^543^^^^^528^558^System.arraycopy ( subMatrix, 0, data, 0, subMatrix.length ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P14_Delete_Statement]^^543^^^^^528^558^System.arraycopy ( subMatrix, 0, data, 0, subMatrix.length ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^System.arraycopy ( data[row], 0, out[0], 0, ncols ) ;System.arraycopy ( subMatrix, 0, data, 0, subMatrix.length ) ;^543^^^^^528^558^System.arraycopy ( subMatrix, 0, data, 0, subMatrix.length ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^System.arraycopy ( permutation, 0, out, 0, permutation.length ) ;System.arraycopy ( subMatrix, 0, data, 0, subMatrix.length ) ;^543^^^^^528^558^System.arraycopy ( subMatrix, 0, data, 0, subMatrix.length ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^System.arraycopy ( data[i], 0, out[i], 0, data[i].length ) ;System.arraycopy ( subMatrix, 0, data, 0, subMatrix.length ) ;^543^^^^^528^558^System.arraycopy ( subMatrix, 0, data, 0, subMatrix.length ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^System.arraycopy ( data[row], 0, out, 0, ncols ) ;System.arraycopy ( subMatrix, 0, data, 0, subMatrix.length ) ;^543^^^^^528^558^System.arraycopy ( subMatrix, 0, data, 0, subMatrix.length ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^System.arraycopy ( subMatrix[i], 0, data[row + i], column, nCols ) ;System.arraycopy ( subMatrix, 0, data, 0, subMatrix.length ) ;^543^^^^^528^558^System.arraycopy ( subMatrix, 0, data, 0, subMatrix.length ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^if  (  ( row > -7 ) || ( column > -7 )  )  throw new MatrixIndexException ( "matrix must be initialized to perfom this method" ) ;^540^541^^^^525^555^if  (  ( row > 0 ) || ( column > 0 )  )  throw new MatrixIndexException ( "matrix must be initialized to perfom this method" ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^if  (  ( row >  ) || ( column >  )  )  throw new MatrixIndexException ( "matrix must be initialized to perfom this method" ) ;^540^541^^^^525^555^if  (  ( row > 0 ) || ( column > 0 )  )  throw new MatrixIndexException ( "matrix must be initialized to perfom this method" ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^if  (  ( row > 0 ) || ( column > 0 )  )  throw new MatrixIndexException ( "ma" ) ;^540^541^^^^525^555^if  (  ( row > 0 ) || ( column > 0 )  )  throw new MatrixIndexException ( "matrix must be initialized to perfom this method" ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  (  ( roundingMode > 0 ) || ( column > 0 )  )  throw new MatrixIndexException ( "matrix must be initialized to perfom this method" ) ;^540^541^^^^525^555^if  (  ( row > 0 ) || ( column > 0 )  )  throw new MatrixIndexException ( "matrix must be initialized to perfom this method" ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  (  ( row > 0 ) || ( roundingMode > 0 )  )  throw new MatrixIndexException ( "matrix must be initialized to perfom this method" ) ;^540^541^^^^525^555^if  (  ( row > 0 ) || ( column > 0 )  )  throw new MatrixIndexException ( "matrix must be initialized to perfom this method" ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^if  (  ( row > 0L ) || ( column > 0L )  )  throw new MatrixIndexException ( "matrix must be initialized to perfom this method" ) ;^540^541^^^^525^555^if  (  ( row > 0 ) || ( column > 0 )  )  throw new MatrixIndexException ( "matrix must be initialized to perfom this method" ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^if  (  ( row > 0 ) || ( column > 0 )  )  throw new MatrixIndexException ( "atrix must be initialized to perfom this method" ) ;^540^541^^^^525^555^if  (  ( row > 0 ) || ( column > 0 )  )  throw new MatrixIndexException ( "matrix must be initialized to perfom this method" ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^if  (  ( row > 0 ) || ( column > 0 )  )  throw new MatrixIndexException ( "d to pe" ) ;^540^541^^^^525^555^if  (  ( row > 0 ) || ( column > 0 )  )  throw new MatrixIndexException ( "matrix must be initialized to perfom this method" ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^data =  new BigDecimal[roundingMode][nCols];^542^^^^^527^557^data = new BigDecimal[nRows][nCols];^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^if  (  ( row > 0 ) || ( column > 0 )  )  throw new MatrixIndexException ( "matr" ) ;^540^541^^^^525^555^if  (  ( row > 0 ) || ( column > 0 )  )  throw new MatrixIndexException ( "matrix must be initialized to perfom this method" ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^if  (  ( row > 0 ) || ( column > 0 )  )  throw new MatrixIndexException ( "matrix must be initialized to perfom this methodt be " ) ;^540^541^^^^525^555^if  (  ( row > 0 ) || ( column > 0 )  )  throw new MatrixIndexException ( "matrix must be initialized to perfom this method" ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^System.arraycopy ( subMatrix, roundingMode, data, roundingMode, subMatrix.length ) ;^543^^^^^528^558^System.arraycopy ( subMatrix, 0, data, 0, subMatrix.length ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^System.arraycopy ( subMatrix, -6, data, -6, subMatrix.length ) ;^543^^^^^528^558^System.arraycopy ( subMatrix, 0, data, 0, subMatrix.length ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^System.arraycopy ( subMatrix, 0, data, 0, rowCount ) ;^543^^^^^528^558^System.arraycopy ( subMatrix, 0, data, 0, subMatrix.length ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^System.arraycopy ( subMatrix, 0, subMatrix.length, 0, data ) ;^543^^^^^528^558^System.arraycopy ( subMatrix, 0, data, 0, subMatrix.length ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P2_Replace_Operator]^if  (  (  ( nRows + row )  > this.getRowDimension (  )  )  && ( nCols + column > this.getColumnDimension (  )  )  ) throw new MatrixIndexException ( "invalid row or column index selection" ) ;^545^546^547^548^^530^560^if  (  (  ( nRows + row )  > this.getRowDimension (  )  )  || ( nCols + column > this.getColumnDimension (  )  )  ) throw new MatrixIndexException ( "invalid row or column index selection" ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P2_Replace_Operator]^if  (  (  ( nRows + row )  < this.getRowDimension (  )  )  || ( nCols + column > this.getColumnDimension (  )  )  ) throw new MatrixIndexException ( "invalid row or column index selection" ) ;^545^546^547^548^^530^560^if  (  (  ( nRows + row )  > this.getRowDimension (  )  )  || ( nCols + column > this.getColumnDimension (  )  )  ) throw new MatrixIndexException ( "invalid row or column index selection" ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P2_Replace_Operator]^if  (  (  ( nRows   instanceof   row )  > this.getRowDimension (  )  )  || ( nCols + column > this.getColumnDimension (  )  )  ) throw new MatrixIndexException ( "invalid row or column index selection" ) ;^545^546^547^548^^530^560^if  (  (  ( nRows + row )  > this.getRowDimension (  )  )  || ( nCols + column > this.getColumnDimension (  )  )  ) throw new MatrixIndexException ( "invalid row or column index selection" ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P2_Replace_Operator]^if  (  (  ( nRows + row )  > this.getRowDimension (  )  )  || ( nCols + column >= this.getColumnDimension (  )  )  ) throw new MatrixIndexException ( "invalid row or column index selection" ) ;^545^546^547^548^^530^560^if  (  (  ( nRows + row )  > this.getRowDimension (  )  )  || ( nCols + column > this.getColumnDimension (  )  )  ) throw new MatrixIndexException ( "invalid row or column index selection" ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P2_Replace_Operator]^if  (  (  ( nRows + row )  > this.getRowDimension (  )  )  || ( nCols  &&  column > this.getColumnDimension (  )  )  ) throw new MatrixIndexException ( "invalid row or column index selection" ) ;^545^546^547^548^^530^560^if  (  (  ( nRows + row )  > this.getRowDimension (  )  )  || ( nCols + column > this.getColumnDimension (  )  )  ) throw new MatrixIndexException ( "invalid row or column index selection" ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^if  (  (  ( nRows + row )  > this.getRowDimension (  )  )  || ( nCols + column > this.getColumnDimension (  )  )  ) throw new MatrixIndexException ( " innvalid row or column index selection" ) ;^545^546^547^548^^530^560^if  (  (  ( nRows + row )  > this.getRowDimension (  )  )  || ( nCols + column > this.getColumnDimension (  )  )  ) throw new MatrixIndexException ( "invalid row or column index selection" ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P4_Replace_Constructor]^if  (  (  ( nRows + row )  > this.getRowDimension (  )  )  || ( nCols + column > this.getColumnDimension (  )  )  ) throw if  (  (  ( nRows + row )  > this.getRowDimension (  )  )  || ( nCols + column > this.getColumnDimension (  )  )  ) throw  new MatrixIndexException ( "selected row and column index arrays must be non-empty" )  ;^545^546^547^548^^530^560^if  (  (  ( nRows + row )  > this.getRowDimension (  )  )  || ( nCols + column > this.getColumnDimension (  )  )  ) throw new MatrixIndexException ( "invalid row or column index selection" ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  (  (  ( row + row )  > this.getRowDimension (  )  )  || ( nCols + column > this.getColumnDimension (  )  )  ) throw new MatrixIndexException ( "invalid row or column index selection" ) ;^545^546^547^548^^530^560^if  (  (  ( nRows + row )  > this.getRowDimension (  )  )  || ( nCols + column > this.getColumnDimension (  )  )  ) throw new MatrixIndexException ( "invalid row or column index selection" ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  (  (  ( nRows + scale )  > this.getRowDimension (  )  )  || ( nCols + column > this.getColumnDimension (  )  )  ) throw new MatrixIndexException ( "invalid row or column index selection" ) ;^545^546^547^548^^530^560^if  (  (  ( nRows + row )  > this.getRowDimension (  )  )  || ( nCols + column > this.getColumnDimension (  )  )  ) throw new MatrixIndexException ( "invalid row or column index selection" ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  (  (  ( nRows + row )  > this.getRowDimension (  )  )  || ( startRow + column > this.getColumnDimension (  )  )  ) throw new MatrixIndexException ( "invalid row or column index selection" ) ;^545^546^547^548^^530^560^if  (  (  ( nRows + row )  > this.getRowDimension (  )  )  || ( nCols + column > this.getColumnDimension (  )  )  ) throw new MatrixIndexException ( "invalid row or column index selection" ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  (  (  ( nRows + row )  > this.getRowDimension (  )  )  || ( nCols + rowDimension > this.getColumnDimension (  )  )  ) throw new MatrixIndexException ( "invalid row or column index selection" ) ;^545^546^547^548^^530^560^if  (  (  ( nRows + row )  > this.getRowDimension (  )  )  || ( nCols + column > this.getColumnDimension (  )  )  ) throw new MatrixIndexException ( "invalid row or column index selection" ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  (  (  ( nCols + row )  > this.getRowDimension (  )  )  || ( nRows + column > this.getColumnDimension (  )  )  ) throw new MatrixIndexException ( "invalid row or column index selection" ) ;^545^546^547^548^^530^560^if  (  (  ( nRows + row )  > this.getRowDimension (  )  )  || ( nCols + column > this.getColumnDimension (  )  )  ) throw new MatrixIndexException ( "invalid row or column index selection" ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  (  (  ( nRows + column )  > this.getRowDimension (  )  )  || ( nCols + row > this.getColumnDimension (  )  )  ) throw new MatrixIndexException ( "invalid row or column index selection" ) ;^545^546^547^548^^530^560^if  (  (  ( nRows + row )  > this.getRowDimension (  )  )  || ( nCols + column > this.getColumnDimension (  )  )  ) throw new MatrixIndexException ( "invalid row or column index selection" ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  (  (  ( nRows + row )  > this.getRowDimension (  )  )  || ( column + nCols > this.getColumnDimension (  )  )  ) throw new MatrixIndexException ( "invalid row or column index selection" ) ;^545^546^547^548^^530^560^if  (  (  ( nRows + row )  > this.getRowDimension (  )  )  || ( nCols + column > this.getColumnDimension (  )  )  ) throw new MatrixIndexException ( "invalid row or column index selection" ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P6_Replace_Expression]^if  ( nRows + row > this.getRowDimension (  ) ) ;^545^546^547^548^^530^560^if  (  (  ( nRows + row )  > this.getRowDimension (  )  )  || ( nCols + column > this.getColumnDimension (  )  )  ) throw new MatrixIndexException ( "invalid row or column index selection" ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P6_Replace_Expression]^if  ( nRows + row ) ;^545^546^547^548^^530^560^if  (  (  ( nRows + row )  > this.getRowDimension (  )  )  || ( nCols + column > this.getColumnDimension (  )  )  ) throw new MatrixIndexException ( "invalid row or column index selection" ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P6_Replace_Expression]^if  ( nCols + column > this.getColumnDimension (  ) ) ;^545^546^547^548^^530^560^if  (  (  ( nRows + row )  > this.getRowDimension (  )  )  || ( nCols + column > this.getColumnDimension (  )  )  ) throw new MatrixIndexException ( "invalid row or column index selection" ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P6_Replace_Expression]^if  ( nCols + column ) ;^545^546^547^548^^530^560^if  (  (  ( nRows + row )  > this.getRowDimension (  )  )  || ( nCols + column > this.getColumnDimension (  )  )  ) throw new MatrixIndexException ( "invalid row or column index selection" ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P7_Replace_Invocation]^if  (  (  ( nRows + row )  > this.getColumnDimension (  )  )  || ( nCols + column > this.getColumnDimension (  )  )  ) throw new MatrixIndexException ( "invalid row or column index selection" ) ;^545^546^547^548^^530^560^if  (  (  ( nRows + row )  > this.getRowDimension (  )  )  || ( nCols + column > this.getColumnDimension (  )  )  ) throw new MatrixIndexException ( "invalid row or column index selection" ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P7_Replace_Invocation]^if  (  (  ( nRows + row )  > this.getRowDimension (  )  )  || ( nCols + column > this.getRowDimension (  )  )  ) throw new MatrixIndexException ( "invalid row or column index selection" ) ;^545^546^547^548^^530^560^if  (  (  ( nRows + row )  > this.getRowDimension (  )  )  || ( nCols + column > this.getColumnDimension (  )  )  ) throw new MatrixIndexException ( "invalid row or column index selection" ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^if  (  (  ( nRows + r )  > this.getRowDimension (  )  )  || ( nCols + column > this.getColumnDimension (  )  )  ) throw new MatrixIndexException ( "invalid row or column index selection" ) ;^545^546^547^548^^530^560^if  (  (  ( nRows + row )  > this.getRowDimension (  )  )  || ( nCols + column > this.getColumnDimension (  )  )  ) throw new MatrixIndexException ( "invalid row or column index selection" ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( ! ( isValidCoordinate ( 0, column )  )  )  {     throw new MatrixIndexException ( "illegal column argument" ) ; }^545^^^^^530^560^[Delete]^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  (  (  (  (  ( startRow < 0 )  ||  ( startRow > endRow )  )  ||  ( endRow >  ( data.length )  )  )  ||  ( startColumn < 0 )  )  ||  ( startColumn > endColumn )  )  ||  ( endColumn >  ( data[0].length )  )  )  {     throw new MatrixIndexException ( "invalid row or column index selection" ) ; }^545^^^^^530^560^[Delete]^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  (  ( selectedRows.length )  *  ( selectedColumns.length )  )  == 0 )  {     throw new MatrixIndexException ( "selected row and column index arrays must be non-empty" ) ; }^545^^^^^530^560^[Delete]^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( row < 0 )  ||  ( column < 0 )  )  {     throw new MatrixIndexException ( "invalid row or column index selection" ) ; }^545^^^^^530^560^[Delete]^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^throw new MatrixIndexException ( "invalid row or column index selectionvalid row or colu" ) ;^547^548^^^^532^562^throw new MatrixIndexException ( "invalid row or column index selection" ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P4_Replace_Constructor]^throw throw  new MatrixIndexException ( "selected row and column index arrays must be non-empty" )  ;^547^548^^^^532^562^throw new MatrixIndexException ( "invalid row or column index selection" ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^throw new MatrixIndexException ( "ow or column in" ) ;^547^548^^^^532^562^throw new MatrixIndexException ( "invalid row or column index selection" ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^throw new MatrixIndexException ( "selected row and column index arrays must be non-empty" ) ;throw new MatrixIndexException ( "invalid row or column index selection" ) ;^547^548^^^^532^562^throw new MatrixIndexException ( "invalid row or column index selection" ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^throw new MatrixIndexException ( "invalid row or column index selectiono" ) ;^547^548^^^^532^562^throw new MatrixIndexException ( "invalid row or column index selection" ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^throw new MatrixIndexException ( "invalid row or column index selectionva" ) ;^547^548^^^^532^562^throw new MatrixIndexException ( "invalid row or column index selection" ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P7_Replace_Invocation]^( nCols + column > this.getRowDimension (  )  )  ) throw new MatrixIndexException ( "invalid row or column index selection" ) ;^546^547^548^^^531^561^( nCols + column > this.getColumnDimension (  )  )  ) throw new MatrixIndexException ( "invalid row or column index selection" ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P14_Delete_Statement]^^546^547^548^^^531^561^( nCols + column > this.getColumnDimension (  )  )  ) throw new MatrixIndexException ( "invalid row or column index selection" ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  short  i = 0; i < nRows; i++ )  {^549^^^^^534^564^for  ( int i = 0; i < nRows; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  ( int i = 0; i <= nRows; i++ )  {^549^^^^^534^564^for  ( int i = 0; i < nRows; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  !=  ( int i = 0; i < nRows; i++ )  {^549^^^^^534^564^for  ( int i = 0; i < nRows; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = columnCount; i < nRows; i++ )  {^549^^^^^534^564^for  ( int i = 0; i < nRows; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = roundingMode; i < nRows; i++ )  {^549^^^^^534^564^for  ( int i = 0; i < nRows; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( rnt i = 0; i < nRows; i++ )  {^549^^^^^534^564^for  ( int i = 0; i < nRows; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int i = 0; i < r; i++ )  {^549^^^^^534^564^for  ( int i = 0; i < nRows; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( nRowsnt i = 0; i < i; i++ )  {^549^^^^^534^564^for  ( int i = 0; i < nRows; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^for  ( int i = 0; i < rowCount; i++ )  {^549^^^^^534^564^for  ( int i = 0; i < nRows; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^System.arraycopy ( outData[i], 0, data[row + i], column, nCols ) ;^550^^^^^535^565^System.arraycopy ( subMatrix[i], 0, data[row + i], column, nCols ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^System.arraycopy ( subMatrix[i], 0, data[r + i], column, nCols ) ;^550^^^^^535^565^System.arraycopy ( subMatrix[i], 0, data[row + i], column, nCols ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^System.arraycopy ( subMatrix[i], 0, data[row + i], parity, nCols ) ;^550^^^^^535^565^System.arraycopy ( subMatrix[i], 0, data[row + i], column, nCols ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^System.arraycopy ( subMatrix[i], 0, data[row + i], column, row ) ;^550^^^^^535^565^System.arraycopy ( subMatrix[i], 0, data[row + i], column, nCols ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^System.arraycopy ( subMatrix[i], 0, subMatrixData[row + i], column, nCols ) ;^550^^^^^535^565^System.arraycopy ( subMatrix[i], 0, data[row + i], column, nCols ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^System.arraycopy ( subMatrix[i], 0, data[row + i],  nCols ) ;^550^^^^^535^565^System.arraycopy ( subMatrix[i], 0, data[row + i], column, nCols ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^System.arraycopy ( subMatrix[i], 0, data[row + i], column ) ;^550^^^^^535^565^System.arraycopy ( subMatrix[i], 0, data[row + i], column, nCols ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^System.arraycopy ( subMatrix[i], 0[row + i], column, nCols ) ;^550^^^^^535^565^System.arraycopy ( subMatrix[i], 0, data[row + i], column, nCols ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^System.arraycopy ( data[i], 0, subMatrix[row + i], column, nCols ) ;^550^^^^^535^565^System.arraycopy ( subMatrix[i], 0, data[row + i], column, nCols ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^System.arraycopy ( subMatrix[i], 0, data[row + nCols], column, i ) ;^550^^^^^535^565^System.arraycopy ( subMatrix[i], 0, data[row + i], column, nCols ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^System.arraycopy ( subMatrix[i], 0, data[row + i], nCols, column ) ;^550^^^^^535^565^System.arraycopy ( subMatrix[i], 0, data[row + i], column, nCols ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^System.arraycopy ( subMatrix[i], 0, i[row + data], column, nCols ) ;^550^^^^^535^565^System.arraycopy ( subMatrix[i], 0, data[row + i], column, nCols ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^System.arraycopy ( subMatrix[i], 0, data[parity + i], column, nCols ) ;^550^^^^^535^565^System.arraycopy ( subMatrix[i], 0, data[row + i], column, nCols ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P14_Delete_Statement]^^550^^^^^535^565^System.arraycopy ( subMatrix[i], 0, data[row + i], column, nCols ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^System.arraycopy ( data[row], 0, out[0], 0, ncols ) ;System.arraycopy ( subMatrix[i], 0, data[row + i], column, nCols ) ;^550^^^^^535^565^System.arraycopy ( subMatrix[i], 0, data[row + i], column, nCols ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^System.arraycopy ( data[i], 0, out[i], 0, data[i].length ) ;System.arraycopy ( subMatrix[i], 0, data[row + i], column, nCols ) ;^550^^^^^535^565^System.arraycopy ( subMatrix[i], 0, data[row + i], column, nCols ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^System.arraycopy ( subMatrix, 0, data, 0, subMatrix.length ) ;System.arraycopy ( subMatrix[i], 0, data[row + i], column, nCols ) ;^550^^^^^535^565^System.arraycopy ( subMatrix[i], 0, data[row + i], column, nCols ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^System.arraycopy ( data[row], 0, out, 0, ncols ) ;System.arraycopy ( subMatrix[i], 0, data[row + i], column, nCols ) ;^550^^^^^535^565^System.arraycopy ( subMatrix[i], 0, data[row + i], column, nCols ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  long  i = 0; i < nRows; i++ )  {^549^^^^^534^564^for  ( int i = 0; i < nRows; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = -6; i < nRows; i++ )  {^549^^^^^534^564^for  ( int i = 0; i < nRows; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^System.arraycopy ( subMatrix[i], , data[row + i], column, nCols ) ;^550^^^^^535^565^System.arraycopy ( subMatrix[i], 0, data[row + i], column, nCols ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^System.arraycopy ( subMatrixData[i], 0, data[row + i], column, nCols ) ;^550^^^^^535^565^System.arraycopy ( subMatrix[i], 0, data[row + i], column, nCols ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^System.arraycopy ( subMatrix[i], 0, data[row + parity], column, nCols ) ;^550^^^^^535^565^System.arraycopy ( subMatrix[i], 0, data[row + i], column, nCols ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^System.arraycopy ( subMatrix[i], 0, data[nSum + i], column, nCols ) ;^550^^^^^535^565^System.arraycopy ( subMatrix[i], 0, data[row + i], column, nCols ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^System.arraycopy ( subMatrix[i], 0, data[row + i], column, parity ) ;^550^^^^^535^565^System.arraycopy ( subMatrix[i], 0, data[row + i], column, nCols ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^System.arraycopy ( subMatrix[i], 0, data[row + column], i, nCols ) ;^550^^^^^535^565^System.arraycopy ( subMatrix[i], 0, data[row + i], column, nCols ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^System.arraycopy ( column[i], 0, data[row + i], subMatrix, nCols ) ;^550^^^^^535^565^System.arraycopy ( subMatrix[i], 0, data[row + i], column, nCols ) ;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^lu = true;^552^^^^^537^567^lu = null;^[CLASS] BigMatrixImpl  [METHOD] setSubMatrix [RETURN_TYPE] void   BigDecimal[][] subMatrix int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^if  (  !isValidCoordinate (  row, scale )  )  {^564^^^^^563^571^if  (  !isValidCoordinate (  row, 0 )  )  {^[CLASS] BigMatrixImpl  [METHOD] getRowMatrix [RETURN_TYPE] BigMatrix   int row [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  (  !isValidCoordinate (  ncols, 0 )  )  {^564^^^^^563^571^if  (  !isValidCoordinate (  row, 0 )  )  {^[CLASS] BigMatrixImpl  [METHOD] getRowMatrix [RETURN_TYPE] BigMatrix   int row [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P7_Replace_Invocation]^if  (  !BigMatrixImpl (  row, 0 )  )  {^564^^^^^563^571^if  (  !isValidCoordinate (  row, 0 )  )  {^[CLASS] BigMatrixImpl  [METHOD] getRowMatrix [RETURN_TYPE] BigMatrix   int row [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^if  (  !isValidCoordinate (  row, 1 )  )  {^564^^^^^563^571^if  (  !isValidCoordinate (  row, 0 )  )  {^[CLASS] BigMatrixImpl  [METHOD] getRowMatrix [RETURN_TYPE] BigMatrix   int row [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  (  !isValidCoordinate ( 0, col )   )  {^564^^^^^563^571^if  (  !isValidCoordinate (  row, 0 )  )  {^[CLASS] BigMatrixImpl  [METHOD] getRowMatrix [RETURN_TYPE] BigMatrix   int row [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  ( !isValidCoordinate ( row,column )  )  {^564^^^^^563^571^if  (  !isValidCoordinate (  row, 0 )  )  {^[CLASS] BigMatrixImpl  [METHOD] getRowMatrix [RETURN_TYPE] BigMatrix   int row [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  (  !isValidCoordinate (  0, column )  )  {^564^^^^^563^571^if  (  !isValidCoordinate (  row, 0 )  )  {^[CLASS] BigMatrixImpl  [METHOD] getRowMatrix [RETURN_TYPE] BigMatrix   int row [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P15_Unwrap_Block]^throw new org.apache.commons.math.linear.MatrixIndexException("illegal row argument");^564^565^566^^^563^571^if  (  !isValidCoordinate (  row, 0 )  )  { throw new MatrixIndexException  (" ")  ; }^[CLASS] BigMatrixImpl  [METHOD] getRowMatrix [RETURN_TYPE] BigMatrix   int row [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P16_Remove_Block]^^564^565^566^^^563^571^if  (  !isValidCoordinate (  row, 0 )  )  { throw new MatrixIndexException  (" ")  ; }^[CLASS] BigMatrixImpl  [METHOD] getRowMatrix [RETURN_TYPE] BigMatrix   int row [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P4_Replace_Constructor]^throw throw  new MatrixIndexException ( "matrix entry does not exist" )   ;^565^^^^^563^571^throw new MatrixIndexException  (" ")  ;^[CLASS] BigMatrixImpl  [METHOD] getRowMatrix [RETURN_TYPE] BigMatrix   int row [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( ! ( isValidCoordinate ( 0, column )  )  )  {     throw new MatrixIndexException ( "illegal column argument" ) ; }^565^^^^^563^571^[Delete]^[CLASS] BigMatrixImpl  [METHOD] getRowMatrix [RETURN_TYPE] BigMatrix   int row [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( ! ( isValidCoordinate ( row, 0 )  )  )  {     throw new MatrixIndexException ( "illegal row argument" ) ; }^565^^^^^563^571^[Delete]^[CLASS] BigMatrixImpl  [METHOD] getRowMatrix [RETURN_TYPE] BigMatrix   int row [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( ! ( isValidCoordinate ( 0, col )  )  )  {     throw new MatrixIndexException ( "illegal column argument" ) ; }^565^^^^^563^571^[Delete]^[CLASS] BigMatrixImpl  [METHOD] getRowMatrix [RETURN_TYPE] BigMatrix   int row [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( ! ( isSquare (  )  )  )  {     throw new InvalidMatrixException ( "matrix is not square" ) ; }^565^^^^^563^571^[Delete]^[CLASS] BigMatrixImpl  [METHOD] getRowMatrix [RETURN_TYPE] BigMatrix   int row [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( ! ( isValidCoordinate ( row, column )  )  )  {     throw new MatrixIndexException ( "matrix entry does not exist" ) ; }^565^^^^^563^571^[Delete]^[CLASS] BigMatrixImpl  [METHOD] getRowMatrix [RETURN_TYPE] BigMatrix   int row [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( row < 0 )  ||  ( column < 0 )  )  {     throw new MatrixIndexException ( "invalid row or column index selection" ) ; }^565^^^^^563^571^[Delete]^[CLASS] BigMatrixImpl  [METHOD] getRowMatrix [RETURN_TYPE] BigMatrix   int row [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^throw new IllegalArgumentException  (" ")  ; ;^565^^^^^563^571^throw new MatrixIndexException  (" ")  ;^[CLASS] BigMatrixImpl  [METHOD] getRowMatrix [RETURN_TYPE] BigMatrix   int row [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^if  (  !isValidCoordinate (  row, endColumn )  )  {^564^^^^^563^571^if  (  !isValidCoordinate (  row, 0 )  )  {^[CLASS] BigMatrixImpl  [METHOD] getRowMatrix [RETURN_TYPE] BigMatrix   int row [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  (  !isValidCoordinate (  rowDimension, 0 )  )  {^564^^^^^563^571^if  (  !isValidCoordinate (  row, 0 )  )  {^[CLASS] BigMatrixImpl  [METHOD] getRowMatrix [RETURN_TYPE] BigMatrix   int row [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P1_Replace_Type]^long  ncols = this.getColumnDimension (  ) ;^567^^^^^563^571^int ncols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getRowMatrix [RETURN_TYPE] BigMatrix   int row [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P7_Replace_Invocation]^int ncols = this.getRowDimension (  ) ;^567^^^^^563^571^int ncols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getRowMatrix [RETURN_TYPE] BigMatrix   int row [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = this.getColumnDimension (  ) ;int ncols = this.getColumnDimension (  ) ;^567^^^^^563^571^int ncols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getRowMatrix [RETURN_TYPE] BigMatrix   int row [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCol = this.getColumnDimension (  ) ;int ncols = this.getColumnDimension (  ) ;^567^^^^^563^571^int ncols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getRowMatrix [RETURN_TYPE] BigMatrix   int row [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int columnCount = this.getColumnDimension (  ) ;int ncols = this.getColumnDimension (  ) ;^567^^^^^563^571^int ncols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getRowMatrix [RETURN_TYPE] BigMatrix   int row [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRows = getRowDimension (  ) ;int ncols = this.getColumnDimension (  ) ;^567^^^^^563^571^int ncols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getRowMatrix [RETURN_TYPE] BigMatrix   int row [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nrows = this.getRowDimension (  ) ;int ncols = this.getColumnDimension (  ) ;^567^^^^^563^571^int ncols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getRowMatrix [RETURN_TYPE] BigMatrix   int row [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nColB = b.getColumnDimension (  ) ;int ncols = this.getColumnDimension (  ) ;^567^^^^^563^571^int ncols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getRowMatrix [RETURN_TYPE] BigMatrix   int row [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = getColumnDimension (  ) ;int ncols = this.getColumnDimension (  ) ;^567^^^^^563^571^int ncols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getRowMatrix [RETURN_TYPE] BigMatrix   int row [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRowB = b.getRowDimension (  ) ;int ncols = this.getColumnDimension (  ) ;^567^^^^^563^571^int ncols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getRowMatrix [RETURN_TYPE] BigMatrix   int row [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int rowCount = this.getRowDimension (  ) ;int ncols = this.getColumnDimension (  ) ;^567^^^^^563^571^int ncols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getRowMatrix [RETURN_TYPE] BigMatrix   int row [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRows = this.getRowDimension (  ) ;int ncols = this.getColumnDimension (  ) ;^567^^^^^563^571^int ncols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getRowMatrix [RETURN_TYPE] BigMatrix   int row [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nSum = this.getColumnDimension (  ) ;int ncols = this.getColumnDimension (  ) ;^567^^^^^563^571^int ncols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getRowMatrix [RETURN_TYPE] BigMatrix   int row [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = m.getColumnDimension (  ) ;int ncols = this.getColumnDimension (  ) ;^567^^^^^563^571^int ncols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getRowMatrix [RETURN_TYPE] BigMatrix   int row [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P14_Delete_Statement]^^567^568^^^^563^571^int ncols = this.getColumnDimension (  ) ; BigDecimal[][] out = new BigDecimal[1][ncols];^[CLASS] BigMatrixImpl  [METHOD] getRowMatrix [RETURN_TYPE] BigMatrix   int row [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P12_Insert_Condition]^if  ( v.length != this.getColumnDimension (  )  )  { int ncols = this.getColumnDimension (  ) ; }^567^^^^^563^571^int ncols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getRowMatrix [RETURN_TYPE] BigMatrix   int row [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^BigDecimal[][] out = new BigDecimal[parity][ncols];^568^^^^^563^571^BigDecimal[][] out = new BigDecimal[1][ncols];^[CLASS] BigMatrixImpl  [METHOD] getRowMatrix [RETURN_TYPE] BigMatrix   int row [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[] out = new BigDecimal[v.length];BigDecimal[][] out = new BigDecimal[1][ncols];^568^^^^^563^571^BigDecimal[][] out = new BigDecimal[1][ncols];^[CLASS] BigMatrixImpl  [METHOD] getRowMatrix [RETURN_TYPE] BigMatrix   int row [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[][] out = new BigDecimal[nRows][1];BigDecimal[][] out = new BigDecimal[1][ncols];^568^^^^^563^571^BigDecimal[][] out = new BigDecimal[1][ncols];^[CLASS] BigMatrixImpl  [METHOD] getRowMatrix [RETURN_TYPE] BigMatrix   int row [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal bd[] = new BigDecimal[v.length];BigDecimal[][] out = new BigDecimal[1][ncols];^568^^^^^563^571^BigDecimal[][] out = new BigDecimal[1][ncols];^[CLASS] BigMatrixImpl  [METHOD] getRowMatrix [RETURN_TYPE] BigMatrix   int row [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal bd[] = new BigDecimal[b.length];BigDecimal[][] out = new BigDecimal[1][ncols];^568^^^^^563^571^BigDecimal[][] out = new BigDecimal[1][ncols];^[CLASS] BigMatrixImpl  [METHOD] getRowMatrix [RETURN_TYPE] BigMatrix   int row [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];BigDecimal[][] out = new BigDecimal[1][ncols];^568^^^^^563^571^BigDecimal[][] out = new BigDecimal[1][ncols];^[CLASS] BigMatrixImpl  [METHOD] getRowMatrix [RETURN_TYPE] BigMatrix   int row [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^double[] out = new double[ncols];BigDecimal[][] out = new BigDecimal[1][ncols];^568^^^^^563^571^BigDecimal[][] out = new BigDecimal[1][ncols];^[CLASS] BigMatrixImpl  [METHOD] getRowMatrix [RETURN_TYPE] BigMatrix   int row [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[] out = new BigDecimal[nRows];BigDecimal[][] out = new BigDecimal[1][ncols];^568^^^^^563^571^BigDecimal[][] out = new BigDecimal[1][ncols];^[CLASS] BigMatrixImpl  [METHOD] getRowMatrix [RETURN_TYPE] BigMatrix   int row [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[][] out = new BigDecimal[nRows][this.getColumnDimension (  ) ];BigDecimal[][] out = new BigDecimal[1][ncols];^568^^^^^563^571^BigDecimal[][] out = new BigDecimal[1][ncols];^[CLASS] BigMatrixImpl  [METHOD] getRowMatrix [RETURN_TYPE] BigMatrix   int row [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[] out = new BigDecimal[nCols];BigDecimal[][] out = new BigDecimal[1][ncols];^568^^^^^563^571^BigDecimal[][] out = new BigDecimal[1][ncols];^[CLASS] BigMatrixImpl  [METHOD] getRowMatrix [RETURN_TYPE] BigMatrix   int row [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[][] outData = new BigDecimal[nRows][nCols];BigDecimal[][] out = new BigDecimal[1][ncols];^568^^^^^563^571^BigDecimal[][] out = new BigDecimal[1][ncols];^[CLASS] BigMatrixImpl  [METHOD] getRowMatrix [RETURN_TYPE] BigMatrix   int row [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[] out = new BigDecimal[ncols];BigDecimal[][] out = new BigDecimal[1][ncols];^568^^^^^563^571^BigDecimal[][] out = new BigDecimal[1][ncols];^[CLASS] BigMatrixImpl  [METHOD] getRowMatrix [RETURN_TYPE] BigMatrix   int row [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[][] bp = new BigDecimal[nRowB][nColB];BigDecimal[][] out = new BigDecimal[1][ncols];^568^^^^^563^571^BigDecimal[][] out = new BigDecimal[1][ncols];^[CLASS] BigMatrixImpl  [METHOD] getRowMatrix [RETURN_TYPE] BigMatrix   int row [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^System.arraycopy ( data[row], , out[], , ncols ) ;^569^^^^^563^571^System.arraycopy ( data[row], 0, out[0], 0, ncols ) ;^[CLASS] BigMatrixImpl  [METHOD] getRowMatrix [RETURN_TYPE] BigMatrix   int row [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^System.arraycopy ( data[row], 6, out[6], 6, ncols ) ;^569^^^^^563^571^System.arraycopy ( data[row], 0, out[0], 0, ncols ) ;^[CLASS] BigMatrixImpl  [METHOD] getRowMatrix [RETURN_TYPE] BigMatrix   int row [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^System.arraycopy ( data[row], -7, out[-7], -7, ncols ) ;^569^^^^^563^571^System.arraycopy ( data[row], 0, out[0], 0, ncols ) ;^[CLASS] BigMatrixImpl  [METHOD] getRowMatrix [RETURN_TYPE] BigMatrix   int row [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^System.arraycopy ( data[row], 0, subMatrixData[0], 0, ncols ) ;^569^^^^^563^571^System.arraycopy ( data[row], 0, out[0], 0, ncols ) ;^[CLASS] BigMatrixImpl  [METHOD] getRowMatrix [RETURN_TYPE] BigMatrix   int row [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^System.arraycopy ( data[row], 0, out[0], 0, nSum ) ;^569^^^^^563^571^System.arraycopy ( data[row], 0, out[0], 0, ncols ) ;^[CLASS] BigMatrixImpl  [METHOD] getRowMatrix [RETURN_TYPE] BigMatrix   int row [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^System.arraycopy ( subMatrixData[row], 0, out[0], 0, ncols ) ;^569^^^^^563^571^System.arraycopy ( data[row], 0, out[0], 0, ncols ) ;^[CLASS] BigMatrixImpl  [METHOD] getRowMatrix [RETURN_TYPE] BigMatrix   int row [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^System.arraycopy ( data[row], 0[0], 0, ncols ) ;^569^^^^^563^571^System.arraycopy ( data[row], 0, out[0], 0, ncols ) ;^[CLASS] BigMatrixImpl  [METHOD] getRowMatrix [RETURN_TYPE] BigMatrix   int row [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^System.arraycopy ( data[row], 0, out[0], 0 ) ;^569^^^^^563^571^System.arraycopy ( data[row], 0, out[0], 0, ncols ) ;^[CLASS] BigMatrixImpl  [METHOD] getRowMatrix [RETURN_TYPE] BigMatrix   int row [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^System.arraycopy ( out[row], 0, data[0], 0, ncols ) ;^569^^^^^563^571^System.arraycopy ( data[row], 0, out[0], 0, ncols ) ;^[CLASS] BigMatrixImpl  [METHOD] getRowMatrix [RETURN_TYPE] BigMatrix   int row [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P14_Delete_Statement]^^569^^^^^563^571^System.arraycopy ( data[row], 0, out[0], 0, ncols ) ;^[CLASS] BigMatrixImpl  [METHOD] getRowMatrix [RETURN_TYPE] BigMatrix   int row [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^System.arraycopy ( permutation, 0, out, 0, permutation.length ) ;System.arraycopy ( data[row], 0, out[0], 0, ncols ) ;^569^^^^^563^571^System.arraycopy ( data[row], 0, out[0], 0, ncols ) ;^[CLASS] BigMatrixImpl  [METHOD] getRowMatrix [RETURN_TYPE] BigMatrix   int row [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^System.arraycopy ( data[i], 0, out[i], 0, data[i].length ) ;System.arraycopy ( data[row], 0, out[0], 0, ncols ) ;^569^^^^^563^571^System.arraycopy ( data[row], 0, out[0], 0, ncols ) ;^[CLASS] BigMatrixImpl  [METHOD] getRowMatrix [RETURN_TYPE] BigMatrix   int row [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^System.arraycopy ( subMatrix, 0, data, 0, subMatrix.length ) ;System.arraycopy ( data[row], 0, out[0], 0, ncols ) ;^569^^^^^563^571^System.arraycopy ( data[row], 0, out[0], 0, ncols ) ;^[CLASS] BigMatrixImpl  [METHOD] getRowMatrix [RETURN_TYPE] BigMatrix   int row [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^System.arraycopy ( data[row], 0, out, 0, ncols ) ;System.arraycopy ( data[row], 0, out[0], 0, ncols ) ;^569^^^^^563^571^System.arraycopy ( data[row], 0, out[0], 0, ncols ) ;^[CLASS] BigMatrixImpl  [METHOD] getRowMatrix [RETURN_TYPE] BigMatrix   int row [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^System.arraycopy ( subMatrix[i], 0, data[row + i], column, nCols ) ;System.arraycopy ( data[row], 0, out[0], 0, ncols ) ;^569^^^^^563^571^System.arraycopy ( data[row], 0, out[0], 0, ncols ) ;^[CLASS] BigMatrixImpl  [METHOD] getRowMatrix [RETURN_TYPE] BigMatrix   int row [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P4_Replace_Constructor]^return return  new BigMatrixImpl ( nCols, nRows )  ;^570^^^^^563^571^return new BigMatrixImpl ( out ) ;^[CLASS] BigMatrixImpl  [METHOD] getRowMatrix [RETURN_TYPE] BigMatrix   int row [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^return new BigMatrixImpl ( outData ) ;^570^^^^^563^571^return new BigMatrixImpl ( out ) ;^[CLASS] BigMatrixImpl  [METHOD] getRowMatrix [RETURN_TYPE] BigMatrix   int row [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^return  new BigMatrixImpl ( nCols, nRows )  ;^570^^^^^563^571^return new BigMatrixImpl ( out ) ;^[CLASS] BigMatrixImpl  [METHOD] getRowMatrix [RETURN_TYPE] BigMatrix   int row [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^return new BigMatrixImpl ( subMatrix ) ;^570^^^^^563^571^return new BigMatrixImpl ( out ) ;^[CLASS] BigMatrixImpl  [METHOD] getRowMatrix [RETURN_TYPE] BigMatrix   int row [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^return new BigMatrixImpl ( subMatrixData ) ;^570^^^^^563^571^return new BigMatrixImpl ( out ) ;^[CLASS] BigMatrixImpl  [METHOD] getRowMatrix [RETURN_TYPE] BigMatrix   int row [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^if  (  !isValidCoordinate (  j, column )  )  {^582^^^^^581^591^if  (  !isValidCoordinate (  0, column )  )  {^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  (  !isValidCoordinate (  0, rowDimension )  )  {^582^^^^^581^591^if  (  !isValidCoordinate (  0, column )  )  {^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P7_Replace_Invocation]^if  (  !BigMatrixImpl (  0, column )  )  {^582^^^^^581^591^if  (  !isValidCoordinate (  0, column )  )  {^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^if  (  !isValidCoordinate (  0 << 3, column )  )  {^582^^^^^581^591^if  (  !isValidCoordinate (  0, column )  )  {^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  (  !isValidCoordinate ( 0, col )   )  {^582^^^^^581^591^if  (  !isValidCoordinate (  0, column )  )  {^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  (  !isValidCoordinate (  row, 0  )   )  {^582^^^^^581^591^if  (  !isValidCoordinate (  0, column )  )  {^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  ( !isValidCoordinate ( row,column )  )  {^582^^^^^581^591^if  (  !isValidCoordinate (  0, column )  )  {^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P15_Unwrap_Block]^throw new org.apache.commons.math.linear.MatrixIndexException("illegal column argument");^582^583^584^^^581^591^if  (  !isValidCoordinate (  0, column )  )  { throw new MatrixIndexException  (" ")  ; }^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P16_Remove_Block]^^582^583^584^^^581^591^if  (  !isValidCoordinate (  0, column )  )  { throw new MatrixIndexException  (" ")  ; }^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P4_Replace_Constructor]^throw throw  new MatrixIndexException ( "matrix entry does not exist" )   ;^583^^^^^581^591^throw new MatrixIndexException  (" ")  ;^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( ! ( isValidCoordinate ( 0, column )  )  )  {     throw new MatrixIndexException ( "illegal column argument" ) ; }^583^^^^^581^591^[Delete]^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( ! ( isValidCoordinate ( row, 0 )  )  )  {     throw new MatrixIndexException ( "illegal row argument" ) ; }^583^^^^^581^591^[Delete]^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( ! ( isValidCoordinate ( 0, col )  )  )  {     throw new MatrixIndexException ( "illegal column argument" ) ; }^583^^^^^581^591^[Delete]^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( row < 0 )  ||  ( column < 0 )  )  {     throw new MatrixIndexException ( "invalid row or column index selection" ) ; }^583^^^^^581^591^[Delete]^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^return ;^583^^^^^581^591^throw new MatrixIndexException  (" ")  ;^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^if  (  !isValidCoordinate (  3, column )  )  {^582^^^^^581^591^if  (  !isValidCoordinate (  0, column )  )  {^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  (  !isValidCoordinate (  0, r )  )  {^582^^^^^581^591^if  (  !isValidCoordinate (  0, column )  )  {^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P1_Replace_Type]^short  nRows = this.getRowDimension (  ) ;^585^^^^^581^591^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P7_Replace_Invocation]^int nRows = this.getColumnDimension (  ) ;^585^^^^^581^591^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = this.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^585^^^^^581^591^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCol = this.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^585^^^^^581^591^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int columnCount = this.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^585^^^^^581^591^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRows = getRowDimension (  ) ;int nRows = this.getRowDimension (  ) ;^585^^^^^581^591^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nrows = this.getRowDimension (  ) ;int nRows = this.getRowDimension (  ) ;^585^^^^^581^591^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nColB = b.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^585^^^^^581^591^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^585^^^^^581^591^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRowB = b.getRowDimension (  ) ;int nRows = this.getRowDimension (  ) ;^585^^^^^581^591^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int rowCount = this.getRowDimension (  ) ;int nRows = this.getRowDimension (  ) ;^585^^^^^581^591^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int ncols = this.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^585^^^^^581^591^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nSum = this.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^585^^^^^581^591^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = m.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^585^^^^^581^591^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P14_Delete_Statement]^^585^586^^^^581^591^int nRows = this.getRowDimension (  ) ; BigDecimal[][] out = new BigDecimal[nRows][1];^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^( this.getRowDimension (  )  )  ) ;int nRows = this.getRowDimension (  ) ;^585^^^^^581^591^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P12_Insert_Condition]^if  ( b.getRowDimension (  )  != this.getRowDimension (  )  )  { int nRows = this.getRowDimension (  ) ; }^585^^^^^581^591^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P12_Insert_Condition]^if  ( v.length != this.getColumnDimension (  )  )  { int nRows = this.getRowDimension (  ) ; }^585^^^^^581^591^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^BigDecimal[][] out = new BigDecimal[nRows][6];^586^^^^^581^591^BigDecimal[][] out = new BigDecimal[nRows][1];^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[] out = new BigDecimal[v.length];BigDecimal[][] out = new BigDecimal[nRows][1];^586^^^^^581^591^BigDecimal[][] out = new BigDecimal[nRows][1];^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal bd[] = new BigDecimal[v.length];BigDecimal[][] out = new BigDecimal[nRows][1];^586^^^^^581^591^BigDecimal[][] out = new BigDecimal[nRows][1];^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal bd[] = new BigDecimal[b.length];BigDecimal[][] out = new BigDecimal[nRows][1];^586^^^^^581^591^BigDecimal[][] out = new BigDecimal[nRows][1];^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];BigDecimal[][] out = new BigDecimal[nRows][1];^586^^^^^581^591^BigDecimal[][] out = new BigDecimal[nRows][1];^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[] out = new BigDecimal[nRows];BigDecimal[][] out = new BigDecimal[nRows][1];^586^^^^^581^591^BigDecimal[][] out = new BigDecimal[nRows][1];^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[][] out = new BigDecimal[nRows][this.getColumnDimension (  ) ];BigDecimal[][] out = new BigDecimal[nRows][1];^586^^^^^581^591^BigDecimal[][] out = new BigDecimal[nRows][1];^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[][] out = new BigDecimal[1][ncols];BigDecimal[][] out = new BigDecimal[nRows][1];^586^^^^^581^591^BigDecimal[][] out = new BigDecimal[nRows][1];^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[] out = new BigDecimal[nCols];BigDecimal[][] out = new BigDecimal[nRows][1];^586^^^^^581^591^BigDecimal[][] out = new BigDecimal[nRows][1];^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[][] outData = new BigDecimal[nRows][nCols];BigDecimal[][] out = new BigDecimal[nRows][1];^586^^^^^581^591^BigDecimal[][] out = new BigDecimal[nRows][1];^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[] out = new BigDecimal[ncols];BigDecimal[][] out = new BigDecimal[nRows][1];^586^^^^^581^591^BigDecimal[][] out = new BigDecimal[nRows][1];^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^double[] out = new double[nrows];BigDecimal[][] out = new BigDecimal[nRows][1];^586^^^^^581^591^BigDecimal[][] out = new BigDecimal[nRows][1];^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[][] bp = new BigDecimal[nRowB][nColB];BigDecimal[][] out = new BigDecimal[nRows][1];^586^^^^^581^591^BigDecimal[][] out = new BigDecimal[nRows][1];^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  short  row = 0; row < nRows; row++ )  {^587^^^^^581^591^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  ( int row = 0; row <= nRows; row++ )  {^587^^^^^581^591^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int row = endRow; row < nRows; row++ )  {^587^^^^^581^591^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int row = parity; row < nRows; row++ )  {^587^^^^^581^591^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int roundingMode = 0; row < nRows; row++ )  {^587^^^^^581^591^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int row = 0; row < parity; row++ )  {^587^^^^^581^591^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int nRows = 0; row < row; row++ )  {^587^^^^^581^591^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^for  ( int row = 0; row < startColumn; row++ )  {^587^^^^^581^591^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^out[row][3] = data[row][column];^588^^^^^581^591^out[row][0] = data[row][column];^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^out[row][0] = outData[row][column];^588^^^^^581^591^out[row][0] = data[row][column];^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^out[row][2] = data[row][column];^588^^^^^581^591^out[row][0] = data[row][column];^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^data[row][0] = v[row];out[row][0] = data[row][column];^588^^^^^581^591^out[row][0] = data[row][column];^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^outData[col][row] = data[row][col];out[row][0] = data[row][column];^588^^^^^581^591^out[row][0] = data[row][column];^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^outData[row][col] = data[row][col].add ( d ) ;out[row][0] = data[row][column];^588^^^^^581^591^out[row][0] = data[row][column];^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^out[i] = data[i][col];out[row][0] = data[row][column];^588^^^^^581^591^out[row][0] = data[row][column];^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^outData[row][col] = data[row][col].multiply ( d ) ;out[row][0] = data[row][column];^588^^^^^581^591^out[row][0] = data[row][column];^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^out[row][scale] = data[row][column];^588^^^^^581^591^out[row][0] = data[row][column];^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^out[row][0] = subMatrixData[row][column];^588^^^^^581^591^out[row][0] = data[row][column];^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^out[row][0 >> 1] = data[row][column];^588^^^^^581^591^out[row][0] = data[row][column];^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int row = j; row < nRows; row++ )  {^587^^^^^581^591^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P4_Replace_Constructor]^return return  new BigMatrixImpl ( nCols, nRows )  ;^590^^^^^581^591^return new BigMatrixImpl ( out ) ;^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^return new BigMatrixImpl ( subMatrixData ) ;^590^^^^^581^591^return new BigMatrixImpl ( out ) ;^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^return  new BigMatrixImpl ( nCols, nRows )  ;^590^^^^^581^591^return new BigMatrixImpl ( out ) ;^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^return new BigMatrixImpl ( outData ) ;^590^^^^^581^591^return new BigMatrixImpl ( out ) ;^[CLASS] BigMatrixImpl  [METHOD] getColumnMatrix [RETURN_TYPE] BigMatrix   int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^if  (  !isValidCoordinate (  row, roundingMode  )   )  {^604^^^^^603^611^if  (  !isValidCoordinate (  row, 0  )   )  {^[CLASS] BigMatrixImpl  [METHOD] getRow [RETURN_TYPE] BigDecimal[]   int row [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  (  !isValidCoordinate (  ncols, 0  )   )  {^604^^^^^603^611^if  (  !isValidCoordinate (  row, 0  )   )  {^[CLASS] BigMatrixImpl  [METHOD] getRow [RETURN_TYPE] BigDecimal[]   int row [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P7_Replace_Invocation]^if  (  !BigMatrixImpl (  row, 0  )   )  {^604^^^^^603^611^if  (  !isValidCoordinate (  row, 0  )   )  {^[CLASS] BigMatrixImpl  [METHOD] getRow [RETURN_TYPE] BigDecimal[]   int row [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^if  (  !isValidCoordinate (  row, 4  )   )  {^604^^^^^603^611^if  (  !isValidCoordinate (  row, 0  )   )  {^[CLASS] BigMatrixImpl  [METHOD] getRow [RETURN_TYPE] BigDecimal[]   int row [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  (  !isValidCoordinate ( 0, col )   )  {^604^^^^^603^611^if  (  !isValidCoordinate (  row, 0  )   )  {^[CLASS] BigMatrixImpl  [METHOD] getRow [RETURN_TYPE] BigDecimal[]   int row [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  ( !isValidCoordinate ( row,column )  )  {^604^^^^^603^611^if  (  !isValidCoordinate (  row, 0  )   )  {^[CLASS] BigMatrixImpl  [METHOD] getRow [RETURN_TYPE] BigDecimal[]   int row [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  (  !isValidCoordinate (  0, column )  )  {^604^^^^^603^611^if  (  !isValidCoordinate (  row, 0  )   )  {^[CLASS] BigMatrixImpl  [METHOD] getRow [RETURN_TYPE] BigDecimal[]   int row [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P15_Unwrap_Block]^throw new org.apache.commons.math.linear.MatrixIndexException("illegal row argument");^604^605^606^^^603^611^if  (  !isValidCoordinate (  row, 0  )   )  { throw new MatrixIndexException  (" ")  ; }^[CLASS] BigMatrixImpl  [METHOD] getRow [RETURN_TYPE] BigDecimal[]   int row [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P16_Remove_Block]^^604^605^606^^^603^611^if  (  !isValidCoordinate (  row, 0  )   )  { throw new MatrixIndexException  (" ")  ; }^[CLASS] BigMatrixImpl  [METHOD] getRow [RETURN_TYPE] BigDecimal[]   int row [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P4_Replace_Constructor]^throw throw  new MatrixIndexException ( "matrix entry does not exist" )   ;^605^^^^^603^611^throw new MatrixIndexException  (" ")  ;^[CLASS] BigMatrixImpl  [METHOD] getRow [RETURN_TYPE] BigDecimal[]   int row [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( ! ( isValidCoordinate ( 0, column )  )  )  {     throw new MatrixIndexException ( "illegal column argument" ) ; }^605^^^^^603^611^[Delete]^[CLASS] BigMatrixImpl  [METHOD] getRow [RETURN_TYPE] BigDecimal[]   int row [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( ! ( isValidCoordinate ( row, 0 )  )  )  {     throw new MatrixIndexException ( "illegal row argument" ) ; }^605^^^^^603^611^[Delete]^[CLASS] BigMatrixImpl  [METHOD] getRow [RETURN_TYPE] BigDecimal[]   int row [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( ! ( isValidCoordinate ( 0, col )  )  )  {     throw new MatrixIndexException ( "illegal column argument" ) ; }^605^^^^^603^611^[Delete]^[CLASS] BigMatrixImpl  [METHOD] getRow [RETURN_TYPE] BigDecimal[]   int row [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( ! ( isSquare (  )  )  )  {     throw new InvalidMatrixException ( "matrix is not square" ) ; }^605^^^^^603^611^[Delete]^[CLASS] BigMatrixImpl  [METHOD] getRow [RETURN_TYPE] BigDecimal[]   int row [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( ! ( isValidCoordinate ( row, column )  )  )  {     throw new MatrixIndexException ( "matrix entry does not exist" ) ; }^605^^^^^603^611^[Delete]^[CLASS] BigMatrixImpl  [METHOD] getRow [RETURN_TYPE] BigDecimal[]   int row [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( row < 0 )  ||  ( column < 0 )  )  {     throw new MatrixIndexException ( "invalid row or column index selection" ) ; }^605^^^^^603^611^[Delete]^[CLASS] BigMatrixImpl  [METHOD] getRow [RETURN_TYPE] BigDecimal[]   int row [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^throw new IllegalArgumentException  (" ")  ; ;^605^^^^^603^611^throw new MatrixIndexException  (" ")  ;^[CLASS] BigMatrixImpl  [METHOD] getRow [RETURN_TYPE] BigDecimal[]   int row [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^if  (  !isValidCoordinate (  row, startRow  )   )  {^604^^^^^603^611^if  (  !isValidCoordinate (  row, 0  )   )  {^[CLASS] BigMatrixImpl  [METHOD] getRow [RETURN_TYPE] BigDecimal[]   int row [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  (  !isValidCoordinate (  parity, 0  )   )  {^604^^^^^603^611^if  (  !isValidCoordinate (  row, 0  )   )  {^[CLASS] BigMatrixImpl  [METHOD] getRow [RETURN_TYPE] BigDecimal[]   int row [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^if  (  !isValidCoordinate (  roundingMode, 0  )   )  {^604^^^^^603^611^if  (  !isValidCoordinate (  row, 0  )   )  {^[CLASS] BigMatrixImpl  [METHOD] getRow [RETURN_TYPE] BigDecimal[]   int row [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P1_Replace_Type]^long  ncols = this.getColumnDimension (  ) ;^607^^^^^603^611^int ncols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getRow [RETURN_TYPE] BigDecimal[]   int row [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P7_Replace_Invocation]^int ncols = this.getRowDimension (  ) ;^607^^^^^603^611^int ncols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getRow [RETURN_TYPE] BigDecimal[]   int row [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = this.getColumnDimension (  ) ;int ncols = this.getColumnDimension (  ) ;^607^^^^^603^611^int ncols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getRow [RETURN_TYPE] BigDecimal[]   int row [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCol = this.getColumnDimension (  ) ;int ncols = this.getColumnDimension (  ) ;^607^^^^^603^611^int ncols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getRow [RETURN_TYPE] BigDecimal[]   int row [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int columnCount = this.getColumnDimension (  ) ;int ncols = this.getColumnDimension (  ) ;^607^^^^^603^611^int ncols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getRow [RETURN_TYPE] BigDecimal[]   int row [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRows = getRowDimension (  ) ;int ncols = this.getColumnDimension (  ) ;^607^^^^^603^611^int ncols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getRow [RETURN_TYPE] BigDecimal[]   int row [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nrows = this.getRowDimension (  ) ;int ncols = this.getColumnDimension (  ) ;^607^^^^^603^611^int ncols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getRow [RETURN_TYPE] BigDecimal[]   int row [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nColB = b.getColumnDimension (  ) ;int ncols = this.getColumnDimension (  ) ;^607^^^^^603^611^int ncols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getRow [RETURN_TYPE] BigDecimal[]   int row [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = getColumnDimension (  ) ;int ncols = this.getColumnDimension (  ) ;^607^^^^^603^611^int ncols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getRow [RETURN_TYPE] BigDecimal[]   int row [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRowB = b.getRowDimension (  ) ;int ncols = this.getColumnDimension (  ) ;^607^^^^^603^611^int ncols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getRow [RETURN_TYPE] BigDecimal[]   int row [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int rowCount = this.getRowDimension (  ) ;int ncols = this.getColumnDimension (  ) ;^607^^^^^603^611^int ncols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getRow [RETURN_TYPE] BigDecimal[]   int row [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRows = this.getRowDimension (  ) ;int ncols = this.getColumnDimension (  ) ;^607^^^^^603^611^int ncols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getRow [RETURN_TYPE] BigDecimal[]   int row [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nSum = this.getColumnDimension (  ) ;int ncols = this.getColumnDimension (  ) ;^607^^^^^603^611^int ncols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getRow [RETURN_TYPE] BigDecimal[]   int row [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = m.getColumnDimension (  ) ;int ncols = this.getColumnDimension (  ) ;^607^^^^^603^611^int ncols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getRow [RETURN_TYPE] BigDecimal[]   int row [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P14_Delete_Statement]^^607^^^^^603^611^int ncols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getRow [RETURN_TYPE] BigDecimal[]   int row [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P12_Insert_Condition]^if  ( v.length != this.getColumnDimension (  )  )  { int ncols = this.getColumnDimension (  ) ; }^607^^^^^603^611^int ncols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getRow [RETURN_TYPE] BigDecimal[]   int row [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[] out = new BigDecimal[v.length];BigDecimal[] out = new BigDecimal[ncols];^608^^^^^603^611^BigDecimal[] out = new BigDecimal[ncols];^[CLASS] BigMatrixImpl  [METHOD] getRow [RETURN_TYPE] BigDecimal[]   int row [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal bd[] = new BigDecimal[v.length];BigDecimal[] out = new BigDecimal[ncols];^608^^^^^603^611^BigDecimal[] out = new BigDecimal[ncols];^[CLASS] BigMatrixImpl  [METHOD] getRow [RETURN_TYPE] BigDecimal[]   int row [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];BigDecimal[] out = new BigDecimal[ncols];^608^^^^^603^611^BigDecimal[] out = new BigDecimal[ncols];^[CLASS] BigMatrixImpl  [METHOD] getRow [RETURN_TYPE] BigDecimal[]   int row [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[] out = new BigDecimal[nRows];BigDecimal[] out = new BigDecimal[ncols];^608^^^^^603^611^BigDecimal[] out = new BigDecimal[ncols];^[CLASS] BigMatrixImpl  [METHOD] getRow [RETURN_TYPE] BigDecimal[]   int row [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[][] out = new BigDecimal[nRows][this.getColumnDimension (  ) ];BigDecimal[] out = new BigDecimal[ncols];^608^^^^^603^611^BigDecimal[] out = new BigDecimal[ncols];^[CLASS] BigMatrixImpl  [METHOD] getRow [RETURN_TYPE] BigDecimal[]   int row [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[][] out = new BigDecimal[1][ncols];BigDecimal[] out = new BigDecimal[ncols];^608^^^^^603^611^BigDecimal[] out = new BigDecimal[ncols];^[CLASS] BigMatrixImpl  [METHOD] getRow [RETURN_TYPE] BigDecimal[]   int row [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[][] bp = new BigDecimal[nRowB][nColB];BigDecimal[] out = new BigDecimal[ncols];^608^^^^^603^611^BigDecimal[] out = new BigDecimal[ncols];^[CLASS] BigMatrixImpl  [METHOD] getRow [RETURN_TYPE] BigDecimal[]   int row [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[][] out = new BigDecimal[nRows][1];BigDecimal[] out = new BigDecimal[ncols];^608^^^^^603^611^BigDecimal[] out = new BigDecimal[ncols];^[CLASS] BigMatrixImpl  [METHOD] getRow [RETURN_TYPE] BigDecimal[]   int row [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal bd[] = new BigDecimal[b.length];BigDecimal[] out = new BigDecimal[ncols];^608^^^^^603^611^BigDecimal[] out = new BigDecimal[ncols];^[CLASS] BigMatrixImpl  [METHOD] getRow [RETURN_TYPE] BigDecimal[]   int row [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^double[] out = new double[ncols];BigDecimal[] out = new BigDecimal[ncols];^608^^^^^603^611^BigDecimal[] out = new BigDecimal[ncols];^[CLASS] BigMatrixImpl  [METHOD] getRow [RETURN_TYPE] BigDecimal[]   int row [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[] out = new BigDecimal[nCols];BigDecimal[] out = new BigDecimal[ncols];^608^^^^^603^611^BigDecimal[] out = new BigDecimal[ncols];^[CLASS] BigMatrixImpl  [METHOD] getRow [RETURN_TYPE] BigDecimal[]   int row [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[][] outData = new BigDecimal[nRows][nCols];BigDecimal[] out = new BigDecimal[ncols];^608^^^^^603^611^BigDecimal[] out = new BigDecimal[ncols];^[CLASS] BigMatrixImpl  [METHOD] getRow [RETURN_TYPE] BigDecimal[]   int row [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^double[] out = new double[nrows];BigDecimal[] out = new BigDecimal[ncols];^608^^^^^603^611^BigDecimal[] out = new BigDecimal[ncols];^[CLASS] BigMatrixImpl  [METHOD] getRow [RETURN_TYPE] BigDecimal[]   int row [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^System.arraycopy ( data[row], nSum, out, nSum, ncols ) ;^609^^^^^603^611^System.arraycopy ( data[row], 0, out, 0, ncols ) ;^[CLASS] BigMatrixImpl  [METHOD] getRow [RETURN_TYPE] BigDecimal[]   int row [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^System.arraycopy ( data[row], nRows, out, nRows, ncols ) ;^609^^^^^603^611^System.arraycopy ( data[row], 0, out, 0, ncols ) ;^[CLASS] BigMatrixImpl  [METHOD] getRow [RETURN_TYPE] BigDecimal[]   int row [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^System.arraycopy ( data[row], 0, out, 0, roundingMode ) ;^609^^^^^603^611^System.arraycopy ( data[row], 0, out, 0, ncols ) ;^[CLASS] BigMatrixImpl  [METHOD] getRow [RETURN_TYPE] BigDecimal[]   int row [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^System.arraycopy ( data[row], 0,  0, ncols ) ;^609^^^^^603^611^System.arraycopy ( data[row], 0, out, 0, ncols ) ;^[CLASS] BigMatrixImpl  [METHOD] getRow [RETURN_TYPE] BigDecimal[]   int row [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^System.arraycopy ( data[row], 0, out, 0 ) ;^609^^^^^603^611^System.arraycopy ( data[row], 0, out, 0, ncols ) ;^[CLASS] BigMatrixImpl  [METHOD] getRow [RETURN_TYPE] BigDecimal[]   int row [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^System.arraycopy ( ncols[row], 0, out, 0, data ) ;^609^^^^^603^611^System.arraycopy ( data[row], 0, out, 0, ncols ) ;^[CLASS] BigMatrixImpl  [METHOD] getRow [RETURN_TYPE] BigDecimal[]   int row [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^System.arraycopy ( outData[row], 0, out, 0, ncols ) ;^609^^^^^603^611^System.arraycopy ( data[row], 0, out, 0, ncols ) ;^[CLASS] BigMatrixImpl  [METHOD] getRow [RETURN_TYPE] BigDecimal[]   int row [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P14_Delete_Statement]^^609^^^^^603^611^System.arraycopy ( data[row], 0, out, 0, ncols ) ;^[CLASS] BigMatrixImpl  [METHOD] getRow [RETURN_TYPE] BigDecimal[]   int row [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^System.arraycopy ( data[row], 0, out[0], 0, ncols ) ;System.arraycopy ( data[row], 0, out, 0, ncols ) ;^609^^^^^603^611^System.arraycopy ( data[row], 0, out, 0, ncols ) ;^[CLASS] BigMatrixImpl  [METHOD] getRow [RETURN_TYPE] BigDecimal[]   int row [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^System.arraycopy ( permutation, 0, out, 0, permutation.length ) ;System.arraycopy ( data[row], 0, out, 0, ncols ) ;^609^^^^^603^611^System.arraycopy ( data[row], 0, out, 0, ncols ) ;^[CLASS] BigMatrixImpl  [METHOD] getRow [RETURN_TYPE] BigDecimal[]   int row [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^System.arraycopy ( data[i], 0, out[i], 0, data[i].length ) ;System.arraycopy ( data[row], 0, out, 0, ncols ) ;^609^^^^^603^611^System.arraycopy ( data[row], 0, out, 0, ncols ) ;^[CLASS] BigMatrixImpl  [METHOD] getRow [RETURN_TYPE] BigDecimal[]   int row [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^System.arraycopy ( subMatrix, 0, data, 0, subMatrix.length ) ;System.arraycopy ( data[row], 0, out, 0, ncols ) ;^609^^^^^603^611^System.arraycopy ( data[row], 0, out, 0, ncols ) ;^[CLASS] BigMatrixImpl  [METHOD] getRow [RETURN_TYPE] BigDecimal[]   int row [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^System.arraycopy ( subMatrix[i], 0, data[row + i], column, nCols ) ;System.arraycopy ( data[row], 0, out, 0, ncols ) ;^609^^^^^603^611^System.arraycopy ( data[row], 0, out, 0, ncols ) ;^[CLASS] BigMatrixImpl  [METHOD] getRow [RETURN_TYPE] BigDecimal[]   int row [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^if  (  !isValidCoordinate (  row, rowDimension  )   )  {^625^^^^^624^634^if  (  !isValidCoordinate (  row, 0  )   )  {^[CLASS] BigMatrixImpl  [METHOD] getRowAsDoubleArray [RETURN_TYPE] double[]   int row [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  (  !isValidCoordinate (  nSum, 0  )   )  {^625^^^^^624^634^if  (  !isValidCoordinate (  row, 0  )   )  {^[CLASS] BigMatrixImpl  [METHOD] getRowAsDoubleArray [RETURN_TYPE] double[]   int row [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P7_Replace_Invocation]^if  (  !BigMatrixImpl (  row, 0  )   )  {^625^^^^^624^634^if  (  !isValidCoordinate (  row, 0  )   )  {^[CLASS] BigMatrixImpl  [METHOD] getRowAsDoubleArray [RETURN_TYPE] double[]   int row [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^if  (  !isValidCoordinate (  row, 0 / 2  )   )  {^625^^^^^624^634^if  (  !isValidCoordinate (  row, 0  )   )  {^[CLASS] BigMatrixImpl  [METHOD] getRowAsDoubleArray [RETURN_TYPE] double[]   int row [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  (  !isValidCoordinate ( 0, col )   )  {^625^^^^^624^634^if  (  !isValidCoordinate (  row, 0  )   )  {^[CLASS] BigMatrixImpl  [METHOD] getRowAsDoubleArray [RETURN_TYPE] double[]   int row [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  ( !isValidCoordinate ( row,column )  )  {^625^^^^^624^634^if  (  !isValidCoordinate (  row, 0  )   )  {^[CLASS] BigMatrixImpl  [METHOD] getRowAsDoubleArray [RETURN_TYPE] double[]   int row [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  (  !isValidCoordinate (  0, column )  )  {^625^^^^^624^634^if  (  !isValidCoordinate (  row, 0  )   )  {^[CLASS] BigMatrixImpl  [METHOD] getRowAsDoubleArray [RETURN_TYPE] double[]   int row [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P15_Unwrap_Block]^throw new org.apache.commons.math.linear.MatrixIndexException("illegal row argument");^625^626^627^^^624^634^if  (  !isValidCoordinate (  row, 0  )   )  { throw new MatrixIndexException  (" ")  ; }^[CLASS] BigMatrixImpl  [METHOD] getRowAsDoubleArray [RETURN_TYPE] double[]   int row [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P16_Remove_Block]^^625^626^627^^^624^634^if  (  !isValidCoordinate (  row, 0  )   )  { throw new MatrixIndexException  (" ")  ; }^[CLASS] BigMatrixImpl  [METHOD] getRowAsDoubleArray [RETURN_TYPE] double[]   int row [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P4_Replace_Constructor]^throw throw  new MatrixIndexException ( "matrix entry does not exist" )   ;^626^^^^^624^634^throw new MatrixIndexException  (" ")  ;^[CLASS] BigMatrixImpl  [METHOD] getRowAsDoubleArray [RETURN_TYPE] double[]   int row [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( ! ( isValidCoordinate ( 0, column )  )  )  {     throw new MatrixIndexException ( "illegal column argument" ) ; }^626^^^^^624^634^[Delete]^[CLASS] BigMatrixImpl  [METHOD] getRowAsDoubleArray [RETURN_TYPE] double[]   int row [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( ! ( isValidCoordinate ( row, 0 )  )  )  {     throw new MatrixIndexException ( "illegal row argument" ) ; }^626^^^^^624^634^[Delete]^[CLASS] BigMatrixImpl  [METHOD] getRowAsDoubleArray [RETURN_TYPE] double[]   int row [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( ! ( isValidCoordinate ( 0, col )  )  )  {     throw new MatrixIndexException ( "illegal column argument" ) ; }^626^^^^^624^634^[Delete]^[CLASS] BigMatrixImpl  [METHOD] getRowAsDoubleArray [RETURN_TYPE] double[]   int row [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( ! ( isSquare (  )  )  )  {     throw new InvalidMatrixException ( "matrix is not square" ) ; }^626^^^^^624^634^[Delete]^[CLASS] BigMatrixImpl  [METHOD] getRowAsDoubleArray [RETURN_TYPE] double[]   int row [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( ! ( isValidCoordinate ( row, column )  )  )  {     throw new MatrixIndexException ( "matrix entry does not exist" ) ; }^626^^^^^624^634^[Delete]^[CLASS] BigMatrixImpl  [METHOD] getRowAsDoubleArray [RETURN_TYPE] double[]   int row [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( row < 0 )  ||  ( column < 0 )  )  {     throw new MatrixIndexException ( "invalid row or column index selection" ) ; }^626^^^^^624^634^[Delete]^[CLASS] BigMatrixImpl  [METHOD] getRowAsDoubleArray [RETURN_TYPE] double[]   int row [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^if  (  !isValidCoordinate (  row, -3  )   )  {^625^^^^^624^634^if  (  !isValidCoordinate (  row, 0  )   )  {^[CLASS] BigMatrixImpl  [METHOD] getRowAsDoubleArray [RETURN_TYPE] double[]   int row [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^if  (  !isValidCoordinate (  r, 0  )   )  {^625^^^^^624^634^if  (  !isValidCoordinate (  row, 0  )   )  {^[CLASS] BigMatrixImpl  [METHOD] getRowAsDoubleArray [RETURN_TYPE] double[]   int row [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P1_Replace_Type]^short  ncols = this.getColumnDimension (  ) ;^628^^^^^624^634^int ncols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getRowAsDoubleArray [RETURN_TYPE] double[]   int row [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P7_Replace_Invocation]^int ncols = this.getRowDimension (  ) ;^628^^^^^624^634^int ncols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getRowAsDoubleArray [RETURN_TYPE] double[]   int row [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = this.getColumnDimension (  ) ;int ncols = this.getColumnDimension (  ) ;^628^^^^^624^634^int ncols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getRowAsDoubleArray [RETURN_TYPE] double[]   int row [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCol = this.getColumnDimension (  ) ;int ncols = this.getColumnDimension (  ) ;^628^^^^^624^634^int ncols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getRowAsDoubleArray [RETURN_TYPE] double[]   int row [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int columnCount = this.getColumnDimension (  ) ;int ncols = this.getColumnDimension (  ) ;^628^^^^^624^634^int ncols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getRowAsDoubleArray [RETURN_TYPE] double[]   int row [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRows = getRowDimension (  ) ;int ncols = this.getColumnDimension (  ) ;^628^^^^^624^634^int ncols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getRowAsDoubleArray [RETURN_TYPE] double[]   int row [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nrows = this.getRowDimension (  ) ;int ncols = this.getColumnDimension (  ) ;^628^^^^^624^634^int ncols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getRowAsDoubleArray [RETURN_TYPE] double[]   int row [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nColB = b.getColumnDimension (  ) ;int ncols = this.getColumnDimension (  ) ;^628^^^^^624^634^int ncols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getRowAsDoubleArray [RETURN_TYPE] double[]   int row [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = getColumnDimension (  ) ;int ncols = this.getColumnDimension (  ) ;^628^^^^^624^634^int ncols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getRowAsDoubleArray [RETURN_TYPE] double[]   int row [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRowB = b.getRowDimension (  ) ;int ncols = this.getColumnDimension (  ) ;^628^^^^^624^634^int ncols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getRowAsDoubleArray [RETURN_TYPE] double[]   int row [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int rowCount = this.getRowDimension (  ) ;int ncols = this.getColumnDimension (  ) ;^628^^^^^624^634^int ncols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getRowAsDoubleArray [RETURN_TYPE] double[]   int row [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRows = this.getRowDimension (  ) ;int ncols = this.getColumnDimension (  ) ;^628^^^^^624^634^int ncols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getRowAsDoubleArray [RETURN_TYPE] double[]   int row [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nSum = this.getColumnDimension (  ) ;int ncols = this.getColumnDimension (  ) ;^628^^^^^624^634^int ncols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getRowAsDoubleArray [RETURN_TYPE] double[]   int row [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = m.getColumnDimension (  ) ;int ncols = this.getColumnDimension (  ) ;^628^^^^^624^634^int ncols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getRowAsDoubleArray [RETURN_TYPE] double[]   int row [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P12_Insert_Condition]^if  ( v.length != this.getColumnDimension (  )  )  { int ncols = this.getColumnDimension (  ) ; }^628^^^^^624^634^int ncols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getRowAsDoubleArray [RETURN_TYPE] double[]   int row [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P14_Delete_Statement]^^628^^^^^624^634^int ncols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getRowAsDoubleArray [RETURN_TYPE] double[]   int row [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[] out = new BigDecimal[nRows];double[] out = new double[ncols];^629^^^^^624^634^double[] out = new double[ncols];^[CLASS] BigMatrixImpl  [METHOD] getRowAsDoubleArray [RETURN_TYPE] double[]   int row [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[][] out = new BigDecimal[1][ncols];double[] out = new double[ncols];^629^^^^^624^634^double[] out = new double[ncols];^[CLASS] BigMatrixImpl  [METHOD] getRowAsDoubleArray [RETURN_TYPE] double[]   int row [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[] out = new BigDecimal[nCols];double[] out = new double[ncols];^629^^^^^624^634^double[] out = new double[ncols];^[CLASS] BigMatrixImpl  [METHOD] getRowAsDoubleArray [RETURN_TYPE] double[]   int row [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^double d[][] = new double[nRows][nCols];double[] out = new double[ncols];^629^^^^^624^634^double[] out = new double[ncols];^[CLASS] BigMatrixImpl  [METHOD] getRowAsDoubleArray [RETURN_TYPE] double[]   int row [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[] out = new BigDecimal[ncols];double[] out = new double[ncols];^629^^^^^624^634^double[] out = new double[ncols];^[CLASS] BigMatrixImpl  [METHOD] getRowAsDoubleArray [RETURN_TYPE] double[]   int row [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^double[] out = new double[nrows];double[] out = new double[ncols];^629^^^^^624^634^double[] out = new double[ncols];^[CLASS] BigMatrixImpl  [METHOD] getRowAsDoubleArray [RETURN_TYPE] double[]   int row [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  short  i=0;i<ncols;i++ )  {^630^^^^^624^634^for  ( int i=0;i<ncols;i++ )  {^[CLASS] BigMatrixImpl  [METHOD] getRowAsDoubleArray [RETURN_TYPE] double[]   int row [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i=parity;i<ncols;i++ )  {^630^^^^^624^634^for  ( int i=0;i<ncols;i++ )  {^[CLASS] BigMatrixImpl  [METHOD] getRowAsDoubleArray [RETURN_TYPE] double[]   int row [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( paritynt i=0;i<ncols;i++ )  {^630^^^^^624^634^for  ( int i=0;i<ncols;i++ )  {^[CLASS] BigMatrixImpl  [METHOD] getRowAsDoubleArray [RETURN_TYPE] double[]   int row [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^for  ( startRownt i=0;i<ncols;i++ )  {^630^^^^^624^634^for  ( int i=0;i<ncols;i++ )  {^[CLASS] BigMatrixImpl  [METHOD] getRowAsDoubleArray [RETURN_TYPE] double[]   int row [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^out[i] = subMatrix[row][i].doubleValue (  ) ;^631^^^^^624^634^out[i] = data[row][i].doubleValue (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getRowAsDoubleArray [RETURN_TYPE] double[]   int row [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^d[i][j] = data[i][j].doubleValue (  ) ;out[i] = data[row][i].doubleValue (  ) ;^631^^^^^624^634^out[i] = data[row][i].doubleValue (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getRowAsDoubleArray [RETURN_TYPE] double[]   int row [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^out[i] = data[i][col].doubleValue (  ) ;out[i] = data[row][i].doubleValue (  ) ;^631^^^^^624^634^out[i] = data[row][i].doubleValue (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getRowAsDoubleArray [RETURN_TYPE] double[]   int row [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^outData[row][col] = data[row][col].multiply ( d ) ;out[i] = data[row][i].doubleValue (  ) ;^631^^^^^624^634^out[i] = data[row][i].doubleValue (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getRowAsDoubleArray [RETURN_TYPE] double[]   int row [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^out[i] = subMatrixData[row][i].doubleValue (  ) ;^631^^^^^624^634^out[i] = data[row][i].doubleValue (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getRowAsDoubleArray [RETURN_TYPE] double[]   int row [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P14_Delete_Statement]^^631^^^^^624^634^out[i] = data[row][i].doubleValue (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getRowAsDoubleArray [RETURN_TYPE] double[]   int row [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  long  i=0;i<ncols;i++ )  {^630^^^^^624^634^for  ( int i=0;i<ncols;i++ )  {^[CLASS] BigMatrixImpl  [METHOD] getRowAsDoubleArray [RETURN_TYPE] double[]   int row [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i=nRows;i<ncols;i++ )  {^630^^^^^624^634^for  ( int i=0;i<ncols;i++ )  {^[CLASS] BigMatrixImpl  [METHOD] getRowAsDoubleArray [RETURN_TYPE] double[]   int row [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^out[i] = outData[row][i].doubleValue (  ) ;^631^^^^^624^634^out[i] = data[row][i].doubleValue (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getRowAsDoubleArray [RETURN_TYPE] double[]   int row [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^if  (  !isValidCoordinate ( endRow, col )   )  {^647^^^^^646^656^if  (  !isValidCoordinate ( 0, col )   )  {^[CLASS] BigMatrixImpl  [METHOD] getColumn [RETURN_TYPE] BigDecimal[]   int col [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  (  !isValidCoordinate ( 0, row )   )  {^647^^^^^646^656^if  (  !isValidCoordinate ( 0, col )   )  {^[CLASS] BigMatrixImpl  [METHOD] getColumn [RETURN_TYPE] BigDecimal[]   int col [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P7_Replace_Invocation]^if  (  !BigMatrixImpl ( 0, col )   )  {^647^^^^^646^656^if  (  !isValidCoordinate ( 0, col )   )  {^[CLASS] BigMatrixImpl  [METHOD] getColumn [RETURN_TYPE] BigDecimal[]   int col [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^if  (  !BigMatrixImpl ( 0 + 3, col )   )  {^647^^^^^646^656^if  (  !isValidCoordinate ( 0, col )   )  {^[CLASS] BigMatrixImpl  [METHOD] getColumn [RETURN_TYPE] BigDecimal[]   int col [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  (  !isValidCoordinate (  row, 0  )   )  {^647^^^^^646^656^if  (  !isValidCoordinate ( 0, col )   )  {^[CLASS] BigMatrixImpl  [METHOD] getColumn [RETURN_TYPE] BigDecimal[]   int col [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  ( !isValidCoordinate ( row,column )  )  {^647^^^^^646^656^if  (  !isValidCoordinate ( 0, col )   )  {^[CLASS] BigMatrixImpl  [METHOD] getColumn [RETURN_TYPE] BigDecimal[]   int col [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  (  !isValidCoordinate (  0, column )  )  {^647^^^^^646^656^if  (  !isValidCoordinate ( 0, col )   )  {^[CLASS] BigMatrixImpl  [METHOD] getColumn [RETURN_TYPE] BigDecimal[]   int col [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P15_Unwrap_Block]^throw new org.apache.commons.math.linear.MatrixIndexException("illegal column argument");^647^648^649^^^646^656^if  (  !isValidCoordinate ( 0, col )   )  { throw new MatrixIndexException  (" ")  ; }^[CLASS] BigMatrixImpl  [METHOD] getColumn [RETURN_TYPE] BigDecimal[]   int col [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P16_Remove_Block]^^647^648^649^^^646^656^if  (  !isValidCoordinate ( 0, col )   )  { throw new MatrixIndexException  (" ")  ; }^[CLASS] BigMatrixImpl  [METHOD] getColumn [RETURN_TYPE] BigDecimal[]   int col [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P4_Replace_Constructor]^throw throw  new MatrixIndexException ( "matrix entry does not exist" )   ;^648^^^^^646^656^throw new MatrixIndexException  (" ")  ;^[CLASS] BigMatrixImpl  [METHOD] getColumn [RETURN_TYPE] BigDecimal[]   int col [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( ! ( isValidCoordinate ( 0, column )  )  )  {     throw new MatrixIndexException ( "illegal column argument" ) ; }^648^^^^^646^656^[Delete]^[CLASS] BigMatrixImpl  [METHOD] getColumn [RETURN_TYPE] BigDecimal[]   int col [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( ! ( isValidCoordinate ( row, 0 )  )  )  {     throw new MatrixIndexException ( "illegal row argument" ) ; }^648^^^^^646^656^[Delete]^[CLASS] BigMatrixImpl  [METHOD] getColumn [RETURN_TYPE] BigDecimal[]   int col [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( ! ( isValidCoordinate ( 0, col )  )  )  {     throw new MatrixIndexException ( "illegal column argument" ) ; }^648^^^^^646^656^[Delete]^[CLASS] BigMatrixImpl  [METHOD] getColumn [RETURN_TYPE] BigDecimal[]   int col [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( row < 0 )  ||  ( column < 0 )  )  {     throw new MatrixIndexException ( "invalid row or column index selection" ) ; }^648^^^^^646^656^[Delete]^[CLASS] BigMatrixImpl  [METHOD] getColumn [RETURN_TYPE] BigDecimal[]   int col [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^if  (  !isValidCoordinate ( j, col )   )  {^647^^^^^646^656^if  (  !isValidCoordinate ( 0, col )   )  {^[CLASS] BigMatrixImpl  [METHOD] getColumn [RETURN_TYPE] BigDecimal[]   int col [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^if  (  !BigMatrixImpl ( 0, ncols )   )  {^647^^^^^646^656^if  (  !isValidCoordinate ( 0, col )   )  {^[CLASS] BigMatrixImpl  [METHOD] getColumn [RETURN_TYPE] BigDecimal[]   int col [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P1_Replace_Type]^short  nRows = this.getRowDimension (  ) ;^650^^^^^646^656^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getColumn [RETURN_TYPE] BigDecimal[]   int col [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P7_Replace_Invocation]^int nRows = this.getColumnDimension (  ) ;^650^^^^^646^656^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getColumn [RETURN_TYPE] BigDecimal[]   int col [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = this.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^650^^^^^646^656^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getColumn [RETURN_TYPE] BigDecimal[]   int col [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCol = this.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^650^^^^^646^656^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getColumn [RETURN_TYPE] BigDecimal[]   int col [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int columnCount = this.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^650^^^^^646^656^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getColumn [RETURN_TYPE] BigDecimal[]   int col [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRows = getRowDimension (  ) ;int nRows = this.getRowDimension (  ) ;^650^^^^^646^656^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getColumn [RETURN_TYPE] BigDecimal[]   int col [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nrows = this.getRowDimension (  ) ;int nRows = this.getRowDimension (  ) ;^650^^^^^646^656^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getColumn [RETURN_TYPE] BigDecimal[]   int col [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nColB = b.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^650^^^^^646^656^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getColumn [RETURN_TYPE] BigDecimal[]   int col [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^650^^^^^646^656^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getColumn [RETURN_TYPE] BigDecimal[]   int col [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRowB = b.getRowDimension (  ) ;int nRows = this.getRowDimension (  ) ;^650^^^^^646^656^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getColumn [RETURN_TYPE] BigDecimal[]   int col [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int rowCount = this.getRowDimension (  ) ;int nRows = this.getRowDimension (  ) ;^650^^^^^646^656^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getColumn [RETURN_TYPE] BigDecimal[]   int col [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int ncols = this.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^650^^^^^646^656^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getColumn [RETURN_TYPE] BigDecimal[]   int col [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nSum = this.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^650^^^^^646^656^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getColumn [RETURN_TYPE] BigDecimal[]   int col [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = m.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^650^^^^^646^656^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getColumn [RETURN_TYPE] BigDecimal[]   int col [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P12_Insert_Condition]^if  ( b.getRowDimension (  )  != this.getRowDimension (  )  )  { int nRows = this.getRowDimension (  ) ; }^650^^^^^646^656^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getColumn [RETURN_TYPE] BigDecimal[]   int col [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P12_Insert_Condition]^if  ( v.length != this.getColumnDimension (  )  )  { int nRows = this.getRowDimension (  ) ; }^650^^^^^646^656^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getColumn [RETURN_TYPE] BigDecimal[]   int col [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P14_Delete_Statement]^^650^^^^^646^656^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getColumn [RETURN_TYPE] BigDecimal[]   int col [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^( this.getRowDimension (  )  )  ) ;int nRows = this.getRowDimension (  ) ;^650^^^^^646^656^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getColumn [RETURN_TYPE] BigDecimal[]   int col [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[] out = new BigDecimal[v.length];BigDecimal[] out = new BigDecimal[nRows];^651^^^^^646^656^BigDecimal[] out = new BigDecimal[nRows];^[CLASS] BigMatrixImpl  [METHOD] getColumn [RETURN_TYPE] BigDecimal[]   int col [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal bd[] = new BigDecimal[v.length];BigDecimal[] out = new BigDecimal[nRows];^651^^^^^646^656^BigDecimal[] out = new BigDecimal[nRows];^[CLASS] BigMatrixImpl  [METHOD] getColumn [RETURN_TYPE] BigDecimal[]   int col [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];BigDecimal[] out = new BigDecimal[nRows];^651^^^^^646^656^BigDecimal[] out = new BigDecimal[nRows];^[CLASS] BigMatrixImpl  [METHOD] getColumn [RETURN_TYPE] BigDecimal[]   int col [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[][] out = new BigDecimal[nRows][this.getColumnDimension (  ) ];BigDecimal[] out = new BigDecimal[nRows];^651^^^^^646^656^BigDecimal[] out = new BigDecimal[nRows];^[CLASS] BigMatrixImpl  [METHOD] getColumn [RETURN_TYPE] BigDecimal[]   int col [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[][] out = new BigDecimal[1][ncols];BigDecimal[] out = new BigDecimal[nRows];^651^^^^^646^656^BigDecimal[] out = new BigDecimal[nRows];^[CLASS] BigMatrixImpl  [METHOD] getColumn [RETURN_TYPE] BigDecimal[]   int col [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[] out = new BigDecimal[ncols];BigDecimal[] out = new BigDecimal[nRows];^651^^^^^646^656^BigDecimal[] out = new BigDecimal[nRows];^[CLASS] BigMatrixImpl  [METHOD] getColumn [RETURN_TYPE] BigDecimal[]   int col [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[][] bp = new BigDecimal[nRowB][nColB];BigDecimal[] out = new BigDecimal[nRows];^651^^^^^646^656^BigDecimal[] out = new BigDecimal[nRows];^[CLASS] BigMatrixImpl  [METHOD] getColumn [RETURN_TYPE] BigDecimal[]   int col [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[][] out = new BigDecimal[nRows][1];BigDecimal[] out = new BigDecimal[nRows];^651^^^^^646^656^BigDecimal[] out = new BigDecimal[nRows];^[CLASS] BigMatrixImpl  [METHOD] getColumn [RETURN_TYPE] BigDecimal[]   int col [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal bd[] = new BigDecimal[b.length];BigDecimal[] out = new BigDecimal[nRows];^651^^^^^646^656^BigDecimal[] out = new BigDecimal[nRows];^[CLASS] BigMatrixImpl  [METHOD] getColumn [RETURN_TYPE] BigDecimal[]   int col [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^double[] out = new double[ncols];BigDecimal[] out = new BigDecimal[nRows];^651^^^^^646^656^BigDecimal[] out = new BigDecimal[nRows];^[CLASS] BigMatrixImpl  [METHOD] getColumn [RETURN_TYPE] BigDecimal[]   int col [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[] out = new BigDecimal[nCols];BigDecimal[] out = new BigDecimal[nRows];^651^^^^^646^656^BigDecimal[] out = new BigDecimal[nRows];^[CLASS] BigMatrixImpl  [METHOD] getColumn [RETURN_TYPE] BigDecimal[]   int col [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[][] outData = new BigDecimal[nRows][nCols];BigDecimal[] out = new BigDecimal[nRows];^651^^^^^646^656^BigDecimal[] out = new BigDecimal[nRows];^[CLASS] BigMatrixImpl  [METHOD] getColumn [RETURN_TYPE] BigDecimal[]   int col [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^double[] out = new double[nrows];BigDecimal[] out = new BigDecimal[nRows];^651^^^^^646^656^BigDecimal[] out = new BigDecimal[nRows];^[CLASS] BigMatrixImpl  [METHOD] getColumn [RETURN_TYPE] BigDecimal[]   int col [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  short  i = 0; i < nRows; i++ )  {^652^^^^^646^656^for  ( int i = 0; i < nRows; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] getColumn [RETURN_TYPE] BigDecimal[]   int col [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  ( int i = 0; i <= nRows; i++ )  {^652^^^^^646^656^for  ( int i = 0; i < nRows; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] getColumn [RETURN_TYPE] BigDecimal[]   int col [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = -5; i < nRows; i++ )  {^652^^^^^646^656^for  ( int i = 0; i < nRows; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] getColumn [RETURN_TYPE] BigDecimal[]   int col [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( rowCountnt i = 0; i < nRows; i++ )  {^652^^^^^646^656^for  ( int i = 0; i < nRows; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] getColumn [RETURN_TYPE] BigDecimal[]   int col [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int i = 0; i < rowDimension; i++ )  {^652^^^^^646^656^for  ( int i = 0; i < nRows; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] getColumn [RETURN_TYPE] BigDecimal[]   int col [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^for  ( int i = 0; i < row; i++ )  {^652^^^^^646^656^for  ( int i = 0; i < nRows; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] getColumn [RETURN_TYPE] BigDecimal[]   int col [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^out[i] = subMatrixData[i][col];^653^^^^^646^656^out[i] = data[i][col];^[CLASS] BigMatrixImpl  [METHOD] getColumn [RETURN_TYPE] BigDecimal[]   int col [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^out[i]  = null ;^653^^^^^646^656^out[i] = data[i][col];^[CLASS] BigMatrixImpl  [METHOD] getColumn [RETURN_TYPE] BigDecimal[]   int col [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^out[row][0] = data[row][column];out[i] = data[i][col];^653^^^^^646^656^out[i] = data[i][col];^[CLASS] BigMatrixImpl  [METHOD] getColumn [RETURN_TYPE] BigDecimal[]   int col [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^outData[col][row] = data[row][col];out[i] = data[i][col];^653^^^^^646^656^out[i] = data[i][col];^[CLASS] BigMatrixImpl  [METHOD] getColumn [RETURN_TYPE] BigDecimal[]   int col [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^out[i] = data[i][col].doubleValue (  ) ;out[i] = data[i][col];^653^^^^^646^656^out[i] = data[i][col];^[CLASS] BigMatrixImpl  [METHOD] getColumn [RETURN_TYPE] BigDecimal[]   int col [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^out[i] ;^653^^^^^646^656^out[i] = data[i][col];^[CLASS] BigMatrixImpl  [METHOD] getColumn [RETURN_TYPE] BigDecimal[]   int col [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = rowDimension; i < nRows; i++ )  {^652^^^^^646^656^for  ( int i = 0; i < nRows; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] getColumn [RETURN_TYPE] BigDecimal[]   int col [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^if  (  !isValidCoordinate (  -1, col  )   )  {^670^^^^^669^679^if  (  !isValidCoordinate (  0, col  )   )  {^[CLASS] BigMatrixImpl  [METHOD] getColumnAsDoubleArray [RETURN_TYPE] double[]   int col [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  (  !isValidCoordinate (  0, nrows  )   )  {^670^^^^^669^679^if  (  !isValidCoordinate (  0, col  )   )  {^[CLASS] BigMatrixImpl  [METHOD] getColumnAsDoubleArray [RETURN_TYPE] double[]   int col [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P7_Replace_Invocation]^if  (  !BigMatrixImpl (  0, col  )   )  {^670^^^^^669^679^if  (  !isValidCoordinate (  0, col  )   )  {^[CLASS] BigMatrixImpl  [METHOD] getColumnAsDoubleArray [RETURN_TYPE] double[]   int col [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^if  (  !isValidCoordinate (  1, col  )   )  {^670^^^^^669^679^if  (  !isValidCoordinate (  0, col  )   )  {^[CLASS] BigMatrixImpl  [METHOD] getColumnAsDoubleArray [RETURN_TYPE] double[]   int col [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  (  !isValidCoordinate (  row, 0  )   )  {^670^^^^^669^679^if  (  !isValidCoordinate (  0, col  )   )  {^[CLASS] BigMatrixImpl  [METHOD] getColumnAsDoubleArray [RETURN_TYPE] double[]   int col [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  ( !isValidCoordinate ( row,column )  )  {^670^^^^^669^679^if  (  !isValidCoordinate (  0, col  )   )  {^[CLASS] BigMatrixImpl  [METHOD] getColumnAsDoubleArray [RETURN_TYPE] double[]   int col [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  (  !isValidCoordinate (  0, column )  )  {^670^^^^^669^679^if  (  !isValidCoordinate (  0, col  )   )  {^[CLASS] BigMatrixImpl  [METHOD] getColumnAsDoubleArray [RETURN_TYPE] double[]   int col [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P15_Unwrap_Block]^throw new org.apache.commons.math.linear.MatrixIndexException("illegal column argument");^670^671^672^^^669^679^if  (  !isValidCoordinate (  0, col  )   )  { throw new MatrixIndexException  (" ")  ; }^[CLASS] BigMatrixImpl  [METHOD] getColumnAsDoubleArray [RETURN_TYPE] double[]   int col [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P16_Remove_Block]^^670^671^672^^^669^679^if  (  !isValidCoordinate (  0, col  )   )  { throw new MatrixIndexException  (" ")  ; }^[CLASS] BigMatrixImpl  [METHOD] getColumnAsDoubleArray [RETURN_TYPE] double[]   int col [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P4_Replace_Constructor]^throw throw  new MatrixIndexException ( "matrix entry does not exist" )   ;^671^^^^^669^679^throw new MatrixIndexException  (" ")  ;^[CLASS] BigMatrixImpl  [METHOD] getColumnAsDoubleArray [RETURN_TYPE] double[]   int col [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( ! ( isValidCoordinate ( 0, column )  )  )  {     throw new MatrixIndexException ( "illegal column argument" ) ; }^671^^^^^669^679^[Delete]^[CLASS] BigMatrixImpl  [METHOD] getColumnAsDoubleArray [RETURN_TYPE] double[]   int col [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( ! ( isValidCoordinate ( row, 0 )  )  )  {     throw new MatrixIndexException ( "illegal row argument" ) ; }^671^^^^^669^679^[Delete]^[CLASS] BigMatrixImpl  [METHOD] getColumnAsDoubleArray [RETURN_TYPE] double[]   int col [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( ! ( isValidCoordinate ( 0, col )  )  )  {     throw new MatrixIndexException ( "illegal column argument" ) ; }^671^^^^^669^679^[Delete]^[CLASS] BigMatrixImpl  [METHOD] getColumnAsDoubleArray [RETURN_TYPE] double[]   int col [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( row < 0 )  ||  ( column < 0 )  )  {     throw new MatrixIndexException ( "invalid row or column index selection" ) ; }^671^^^^^669^679^[Delete]^[CLASS] BigMatrixImpl  [METHOD] getColumnAsDoubleArray [RETURN_TYPE] double[]   int col [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^if  (  !isValidCoordinate (  2, col  )   )  {^670^^^^^669^679^if  (  !isValidCoordinate (  0, col  )   )  {^[CLASS] BigMatrixImpl  [METHOD] getColumnAsDoubleArray [RETURN_TYPE] double[]   int col [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  (  !isValidCoordinate (  0, parity  )   )  {^670^^^^^669^679^if  (  !isValidCoordinate (  0, col  )   )  {^[CLASS] BigMatrixImpl  [METHOD] getColumnAsDoubleArray [RETURN_TYPE] double[]   int col [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^if  (  !isValidCoordinate (  0, rowDimension  )   )  {^670^^^^^669^679^if  (  !isValidCoordinate (  0, col  )   )  {^[CLASS] BigMatrixImpl  [METHOD] getColumnAsDoubleArray [RETURN_TYPE] double[]   int col [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P1_Replace_Type]^long  nrows = this.getRowDimension (  ) ;^673^^^^^669^679^int nrows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getColumnAsDoubleArray [RETURN_TYPE] double[]   int col [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P7_Replace_Invocation]^int nrows = this.getColumnDimension (  ) ;^673^^^^^669^679^int nrows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getColumnAsDoubleArray [RETURN_TYPE] double[]   int col [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = this.getColumnDimension (  ) ;int nrows = this.getRowDimension (  ) ;^673^^^^^669^679^int nrows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getColumnAsDoubleArray [RETURN_TYPE] double[]   int col [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCol = this.getColumnDimension (  ) ;int nrows = this.getRowDimension (  ) ;^673^^^^^669^679^int nrows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getColumnAsDoubleArray [RETURN_TYPE] double[]   int col [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int columnCount = this.getColumnDimension (  ) ;int nrows = this.getRowDimension (  ) ;^673^^^^^669^679^int nrows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getColumnAsDoubleArray [RETURN_TYPE] double[]   int col [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRows = getRowDimension (  ) ;int nrows = this.getRowDimension (  ) ;^673^^^^^669^679^int nrows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getColumnAsDoubleArray [RETURN_TYPE] double[]   int col [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nColB = b.getColumnDimension (  ) ;int nrows = this.getRowDimension (  ) ;^673^^^^^669^679^int nrows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getColumnAsDoubleArray [RETURN_TYPE] double[]   int col [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = getColumnDimension (  ) ;int nrows = this.getRowDimension (  ) ;^673^^^^^669^679^int nrows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getColumnAsDoubleArray [RETURN_TYPE] double[]   int col [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRowB = b.getRowDimension (  ) ;int nrows = this.getRowDimension (  ) ;^673^^^^^669^679^int nrows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getColumnAsDoubleArray [RETURN_TYPE] double[]   int col [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int rowCount = this.getRowDimension (  ) ;int nrows = this.getRowDimension (  ) ;^673^^^^^669^679^int nrows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getColumnAsDoubleArray [RETURN_TYPE] double[]   int col [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int ncols = this.getColumnDimension (  ) ;int nrows = this.getRowDimension (  ) ;^673^^^^^669^679^int nrows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getColumnAsDoubleArray [RETURN_TYPE] double[]   int col [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRows = this.getRowDimension (  ) ;int nrows = this.getRowDimension (  ) ;^673^^^^^669^679^int nrows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getColumnAsDoubleArray [RETURN_TYPE] double[]   int col [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nSum = this.getColumnDimension (  ) ;int nrows = this.getRowDimension (  ) ;^673^^^^^669^679^int nrows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getColumnAsDoubleArray [RETURN_TYPE] double[]   int col [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = m.getColumnDimension (  ) ;int nrows = this.getRowDimension (  ) ;^673^^^^^669^679^int nrows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getColumnAsDoubleArray [RETURN_TYPE] double[]   int col [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P14_Delete_Statement]^^673^674^^^^669^679^int nrows = this.getRowDimension (  ) ; double[] out = new double[nrows];^[CLASS] BigMatrixImpl  [METHOD] getColumnAsDoubleArray [RETURN_TYPE] double[]   int col [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^( this.getRowDimension (  )  )  ) ;int nrows = this.getRowDimension (  ) ;^673^^^^^669^679^int nrows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getColumnAsDoubleArray [RETURN_TYPE] double[]   int col [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[][] out = new BigDecimal[nRows][1];double[] out = new double[nrows];^674^^^^^669^679^double[] out = new double[nrows];^[CLASS] BigMatrixImpl  [METHOD] getColumnAsDoubleArray [RETURN_TYPE] double[]   int col [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^double[] out = new double[ncols];double[] out = new double[nrows];^674^^^^^669^679^double[] out = new double[nrows];^[CLASS] BigMatrixImpl  [METHOD] getColumnAsDoubleArray [RETURN_TYPE] double[]   int col [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[] out = new BigDecimal[nRows];double[] out = new double[nrows];^674^^^^^669^679^double[] out = new double[nrows];^[CLASS] BigMatrixImpl  [METHOD] getColumnAsDoubleArray [RETURN_TYPE] double[]   int col [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[] out = new BigDecimal[nCols];double[] out = new double[nrows];^674^^^^^669^679^double[] out = new double[nrows];^[CLASS] BigMatrixImpl  [METHOD] getColumnAsDoubleArray [RETURN_TYPE] double[]   int col [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^double d[][] = new double[nRows][nCols];double[] out = new double[nrows];^674^^^^^669^679^double[] out = new double[nrows];^[CLASS] BigMatrixImpl  [METHOD] getColumnAsDoubleArray [RETURN_TYPE] double[]   int col [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[] out = new BigDecimal[ncols];double[] out = new double[nrows];^674^^^^^669^679^double[] out = new double[nrows];^[CLASS] BigMatrixImpl  [METHOD] getColumnAsDoubleArray [RETURN_TYPE] double[]   int col [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  short  i=0;i<nrows;i++ )  {^675^^^^^669^679^for  ( int i=0;i<nrows;i++ )  {^[CLASS] BigMatrixImpl  [METHOD] getColumnAsDoubleArray [RETURN_TYPE] double[]   int col [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i=endColumn;i<nrows;i++ )  {^675^^^^^669^679^for  ( int i=0;i<nrows;i++ )  {^[CLASS] BigMatrixImpl  [METHOD] getColumnAsDoubleArray [RETURN_TYPE] double[]   int col [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( nrowsnt i=0;i<nrows;i++ )  {^675^^^^^669^679^for  ( int i=0;i<nrows;i++ )  {^[CLASS] BigMatrixImpl  [METHOD] getColumnAsDoubleArray [RETURN_TYPE] double[]   int col [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^out[i] = subMatrix[i][col].doubleValue (  ) ;^676^^^^^669^679^out[i] = data[i][col].doubleValue (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getColumnAsDoubleArray [RETURN_TYPE] double[]   int col [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^out[i] = data[row][i].doubleValue (  ) ;out[i] = data[i][col].doubleValue (  ) ;^676^^^^^669^679^out[i] = data[i][col].doubleValue (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getColumnAsDoubleArray [RETURN_TYPE] double[]   int col [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^d[i][j] = data[i][j].doubleValue (  ) ;out[i] = data[i][col].doubleValue (  ) ;^676^^^^^669^679^out[i] = data[i][col].doubleValue (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getColumnAsDoubleArray [RETURN_TYPE] double[]   int col [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^out[i] = data[i][col];out[i] = data[i][col].doubleValue (  ) ;^676^^^^^669^679^out[i] = data[i][col].doubleValue (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getColumnAsDoubleArray [RETURN_TYPE] double[]   int col [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^outData[row][col] = data[row][col].multiply ( d ) ;out[i] = data[i][col].doubleValue (  ) ;^676^^^^^669^679^out[i] = data[i][col].doubleValue (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getColumnAsDoubleArray [RETURN_TYPE] double[]   int col [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^out[i] = subMatrixData[i][col].doubleValue (  ) ;^676^^^^^669^679^out[i] = data[i][col].doubleValue (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getColumnAsDoubleArray [RETURN_TYPE] double[]   int col [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P14_Delete_Statement]^^676^^^^^669^679^out[i] = data[i][col].doubleValue (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getColumnAsDoubleArray [RETURN_TYPE] double[]   int col [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^out[i] = outData[i][col].doubleValue (  ) ;^676^^^^^669^679^out[i] = data[i][col].doubleValue (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getColumnAsDoubleArray [RETURN_TYPE] double[]   int col [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i=4;i<nrows;i++ )  {^675^^^^^669^679^for  ( int i=0;i<nrows;i++ )  {^[CLASS] BigMatrixImpl  [METHOD] getColumnAsDoubleArray [RETURN_TYPE] double[]   int col [VARIABLES] boolean  double[]  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P4_Replace_Constructor]^if  ( !isValidCoordinate ( column )  )  {^698^^^^^696^702^if  ( !isValidCoordinate ( row,column )  )  {^[CLASS] BigMatrixImpl  [METHOD] getEntry [RETURN_TYPE] BigDecimal   int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( !isValidCoordinate ( startColumn,column )  )  {^698^^^^^696^702^if  ( !isValidCoordinate ( row,column )  )  {^[CLASS] BigMatrixImpl  [METHOD] getEntry [RETURN_TYPE] BigDecimal   int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( !isValidCoordinate ( row,rowCount )  )  {^698^^^^^696^702^if  ( !isValidCoordinate ( row,column )  )  {^[CLASS] BigMatrixImpl  [METHOD] getEntry [RETURN_TYPE] BigDecimal   int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P7_Replace_Invocation]^if  ( !BigMatrixImpl ( row,column )  )  {^698^^^^^696^702^if  ( !isValidCoordinate ( row,column )  )  {^[CLASS] BigMatrixImpl  [METHOD] getEntry [RETURN_TYPE] BigDecimal   int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^if  ( !BigMatrixImpl ( parity,column )  )  {^698^^^^^696^702^if  ( !isValidCoordinate ( row,column )  )  {^[CLASS] BigMatrixImpl  [METHOD] getEntry [RETURN_TYPE] BigDecimal   int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  (  !isValidCoordinate ( 0, col )   )  {^698^^^^^696^702^if  ( !isValidCoordinate ( row,column )  )  {^[CLASS] BigMatrixImpl  [METHOD] getEntry [RETURN_TYPE] BigDecimal   int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  (  !isValidCoordinate (  row, 0  )   )  {^698^^^^^696^702^if  ( !isValidCoordinate ( row,column )  )  {^[CLASS] BigMatrixImpl  [METHOD] getEntry [RETURN_TYPE] BigDecimal   int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  (  !isValidCoordinate (  0, column )  )  {^698^^^^^696^702^if  ( !isValidCoordinate ( row,column )  )  {^[CLASS] BigMatrixImpl  [METHOD] getEntry [RETURN_TYPE] BigDecimal   int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P15_Unwrap_Block]^throw new org.apache.commons.math.linear.MatrixIndexException("matrix entry does not exist");^698^699^700^^^696^702^if  ( !isValidCoordinate ( row,column )  )  { throw new MatrixIndexException  (" ")  ; }^[CLASS] BigMatrixImpl  [METHOD] getEntry [RETURN_TYPE] BigDecimal   int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P16_Remove_Block]^^698^699^700^^^696^702^if  ( !isValidCoordinate ( row,column )  )  { throw new MatrixIndexException  (" ")  ; }^[CLASS] BigMatrixImpl  [METHOD] getEntry [RETURN_TYPE] BigDecimal   int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P4_Replace_Constructor]^throw throw  new MatrixIndexException ( "matrix must be initialized to perfom this method" )   ;^699^^^^^696^702^throw new MatrixIndexException  (" ")  ;^[CLASS] BigMatrixImpl  [METHOD] getEntry [RETURN_TYPE] BigDecimal   int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( !isValidCoordinate ( row,roundingMode )  )  {^698^^^^^696^702^if  ( !isValidCoordinate ( row,column )  )  {^[CLASS] BigMatrixImpl  [METHOD] getEntry [RETURN_TYPE] BigDecimal   int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^if  ( !isValidCoordinate ( parity,column )  )  {^698^^^^^696^702^if  ( !isValidCoordinate ( row,column )  )  {^[CLASS] BigMatrixImpl  [METHOD] getEntry [RETURN_TYPE] BigDecimal   int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^return subMatrixData[row][column];^701^^^^^696^702^return data[row][column];^[CLASS] BigMatrixImpl  [METHOD] getEntry [RETURN_TYPE] BigDecimal   int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^return outData[row][column];^701^^^^^696^702^return data[row][column];^[CLASS] BigMatrixImpl  [METHOD] getEntry [RETURN_TYPE] BigDecimal   int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^return getEntry ( rowCount,column ) .doubleValue (  ) ;^721^^^^^720^722^return getEntry ( row,column ) .doubleValue (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getEntryAsDouble [RETURN_TYPE] double   int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^return getEntry ( row,startRow ) .doubleValue (  ) ;^721^^^^^720^722^return getEntry ( row,column ) .doubleValue (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getEntryAsDouble [RETURN_TYPE] double   int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^return getEntry ( column ) .doubleValue (  ) ;^721^^^^^720^722^return getEntry ( row,column ) .doubleValue (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getEntryAsDouble [RETURN_TYPE] double   int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P7_Replace_Invocation]^return getEntryAsDouble ( row,column ) .doubleValue (  ) ;^721^^^^^720^722^return getEntry ( row,column ) .doubleValue (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getEntryAsDouble [RETURN_TYPE] double   int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^return getEntry ( parity,column ) .doubleValue (  ) ;^721^^^^^720^722^return getEntry ( row,column ) .doubleValue (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getEntryAsDouble [RETURN_TYPE] double   int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^return getEntry ( row,nrows ) .doubleValue (  ) ;^721^^^^^720^722^return getEntry ( row,column ) .doubleValue (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getEntryAsDouble [RETURN_TYPE] double   int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^return getEntry ( roundingMode,column ) .doubleValue (  ) ;^721^^^^^720^722^return getEntry ( row,column ) .doubleValue (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getEntryAsDouble [RETURN_TYPE] double   int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P14_Delete_Statement]^^721^^^^^720^722^return getEntry ( row,column ) .doubleValue (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getEntryAsDouble [RETURN_TYPE] double   int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^return getEntry ( nrows,column ) .doubleValue (  ) ;^721^^^^^720^722^return getEntry ( row,column ) .doubleValue (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getEntryAsDouble [RETURN_TYPE] double   int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^return getEntry ( row,parity ) .doubleValue (  ) ;^721^^^^^720^722^return getEntry ( row,column ) .doubleValue (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getEntryAsDouble [RETURN_TYPE] double   int row int column [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P1_Replace_Type]^long  nRows = this.getRowDimension (  ) ;^730^^^^^729^740^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P7_Replace_Invocation]^int nRows = this.getColumnDimension (  ) ;^730^^^^^729^740^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = this.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^730^^^^^729^740^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCol = this.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^730^^^^^729^740^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int columnCount = this.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^730^^^^^729^740^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRows = getRowDimension (  ) ;int nRows = this.getRowDimension (  ) ;^730^^^^^729^740^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nrows = this.getRowDimension (  ) ;int nRows = this.getRowDimension (  ) ;^730^^^^^729^740^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nColB = b.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^730^^^^^729^740^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^730^^^^^729^740^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRowB = b.getRowDimension (  ) ;int nRows = this.getRowDimension (  ) ;^730^^^^^729^740^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int rowCount = this.getRowDimension (  ) ;int nRows = this.getRowDimension (  ) ;^730^^^^^729^740^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int ncols = this.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^730^^^^^729^740^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nSum = this.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^730^^^^^729^740^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = m.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^730^^^^^729^740^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P14_Delete_Statement]^^730^731^^^^729^740^int nRows = this.getRowDimension (  ) ; int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^( this.getRowDimension (  )  )  ) ;int nRows = this.getRowDimension (  ) ;^730^^^^^729^740^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P12_Insert_Condition]^if  ( b.getRowDimension (  )  != this.getRowDimension (  )  )  { int nRows = this.getRowDimension (  ) ; }^730^^^^^729^740^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P12_Insert_Condition]^if  ( v.length != this.getColumnDimension (  )  )  { int nRows = this.getRowDimension (  ) ; }^730^^^^^729^740^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P1_Replace_Type]^short  nCols = this.getColumnDimension (  ) ;^731^^^^^729^740^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P7_Replace_Invocation]^int nCols = this.getRowDimension (  ) ;^731^^^^^729^740^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCol = this.getColumnDimension (  ) ;int nCols = this.getColumnDimension (  ) ;^731^^^^^729^740^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int columnCount = this.getColumnDimension (  ) ;int nCols = this.getColumnDimension (  ) ;^731^^^^^729^740^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRows = getRowDimension (  ) ;int nCols = this.getColumnDimension (  ) ;^731^^^^^729^740^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nrows = this.getRowDimension (  ) ;int nCols = this.getColumnDimension (  ) ;^731^^^^^729^740^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nColB = b.getColumnDimension (  ) ;int nCols = this.getColumnDimension (  ) ;^731^^^^^729^740^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = getColumnDimension (  ) ;int nCols = this.getColumnDimension (  ) ;^731^^^^^729^740^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRowB = b.getRowDimension (  ) ;int nCols = this.getColumnDimension (  ) ;^731^^^^^729^740^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int rowCount = this.getRowDimension (  ) ;int nCols = this.getColumnDimension (  ) ;^731^^^^^729^740^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int ncols = this.getColumnDimension (  ) ;int nCols = this.getColumnDimension (  ) ;^731^^^^^729^740^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRows = this.getRowDimension (  ) ;int nCols = this.getColumnDimension (  ) ;^731^^^^^729^740^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nSum = this.getColumnDimension (  ) ;int nCols = this.getColumnDimension (  ) ;^731^^^^^729^740^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = m.getColumnDimension (  ) ;int nCols = this.getColumnDimension (  ) ;^731^^^^^729^740^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P12_Insert_Condition]^if  ( v.length != this.getColumnDimension (  )  )  { int nCols = this.getColumnDimension (  ) ; }^731^^^^^729^740^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P14_Delete_Statement]^^731^732^^^^729^740^int nCols = this.getColumnDimension (  ) ; BigMatrixImpl out = new BigMatrixImpl ( nCols, nRows ) ;^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P4_Replace_Constructor]^BigMatrixImpl out = new BigMatrixImpl ( out )  ;^732^^^^^729^740^BigMatrixImpl out = new BigMatrixImpl ( nCols, nRows ) ;^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P4_Replace_Constructor]^BigMatrixImpl out = new BigMatrixImpl (  nRows ) ;^732^^^^^729^740^BigMatrixImpl out = new BigMatrixImpl ( nCols, nRows ) ;^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P4_Replace_Constructor]^BigMatrixImpl out = new BigMatrixImpl ( nCols ) ;^732^^^^^729^740^BigMatrixImpl out = new BigMatrixImpl ( nCols, nRows ) ;^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^BigMatrixImpl out = new BigMatrixImpl ( rowCount, nRows ) ;^732^^^^^729^740^BigMatrixImpl out = new BigMatrixImpl ( nCols, nRows ) ;^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^BigMatrixImpl out = new BigMatrixImpl ( nCols, r ) ;^732^^^^^729^740^BigMatrixImpl out = new BigMatrixImpl ( nCols, nRows ) ;^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^BigMatrixImpl out = new BigMatrixImpl ( nRows, nCols ) ;^732^^^^^729^740^BigMatrixImpl out = new BigMatrixImpl ( nCols, nRows ) ;^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^BigMatrixImpl out = new BigMatrixImpl ( nCols, rowCount ) ;^732^^^^^729^740^BigMatrixImpl out = new BigMatrixImpl ( nCols, nRows ) ;^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^BigMatrixImpl out = new BigMatrixImpl ( nrows, nRows ) ;^732^^^^^729^740^BigMatrixImpl out = new BigMatrixImpl ( nCols, nRows ) ;^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^BigMatrixImpl out = new BigMatrixImpl ( nCols, nrows ) ;^732^^^^^729^740^BigMatrixImpl out = new BigMatrixImpl ( nCols, nRows ) ;^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigMatrixImpl subMatrix = new BigMatrixImpl ( endRow - startRow+1, endColumn - startColumn+1 ) ;BigMatrixImpl out = new BigMatrixImpl ( nCols, nRows ) ;^732^^^^^729^740^BigMatrixImpl out = new BigMatrixImpl ( nCols, nRows ) ;^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigMatrixImpl outMat = new BigMatrixImpl ( bp ) ;BigMatrixImpl out = new BigMatrixImpl ( nCols, nRows ) ;^732^^^^^729^740^BigMatrixImpl out = new BigMatrixImpl ( nCols, nRows ) ;^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigMatrix bMatrix = new BigMatrixImpl ( b ) ;BigMatrixImpl out = new BigMatrixImpl ( nCols, nRows ) ;^732^^^^^729^740^BigMatrixImpl out = new BigMatrixImpl ( nCols, nRows ) ;^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigMatrixImpl subMatrix = new BigMatrixImpl ( selectedRows.length, selectedColumns.length ) ;BigMatrixImpl out = new BigMatrixImpl ( nCols, nRows ) ;^732^^^^^729^740^BigMatrixImpl out = new BigMatrixImpl ( nCols, nRows ) ;^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P7_Replace_Invocation]^BigDecimal[][] outData = out.getRow (  ) ;^733^^^^^729^740^BigDecimal[][] outData = out.getDataRef (  ) ;^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^BigDecimal[][] outData = out .getData (  )  ;^733^^^^^729^740^BigDecimal[][] outData = out.getDataRef (  ) ;^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[][] subMatrixData = subMatrix.getDataRef (  ) ;BigDecimal[][] outData = out.getDataRef (  ) ;^733^^^^^729^740^BigDecimal[][] outData = out.getDataRef (  ) ;^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[][] outData = new BigDecimal[nRows][nCols];BigDecimal[][] outData = out.getDataRef (  ) ;^733^^^^^729^740^BigDecimal[][] outData = out.getDataRef (  ) ;^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P14_Delete_Statement]^^733^^^^^729^740^BigDecimal[][] outData = out.getDataRef (  ) ;^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  long  row = 0; row < nRows; row++ )  {^734^^^^^729^740^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  ( int row = 0; row <= nRows; row++ )  {^734^^^^^729^740^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  ( int row = 0; row > nRows; row++ )  {^734^^^^^729^740^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int row = scale; row < nRows; row++ )  {^734^^^^^729^740^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int row = startRow; row < nRows; row++ )  {^734^^^^^729^740^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int parity = 0; row < nRows; row++ )  {^734^^^^^729^740^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int row = 0; row < parity; row++ )  {^734^^^^^729^740^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^for  ( int nrows = 0; row < nRows; row++ )  {^734^^^^^729^740^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  short  col = 0; col < nCols; col++ )  {^735^^^^^729^740^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  ( int col = 0; col <= nCols; col++ )  {^735^^^^^729^740^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int col = 1; col < nCols; col++ )  {^735^^^^^729^740^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int nrows = 0; col < nCols; col++ )  {^735^^^^^729^740^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int col = 0; col < parity; col++ )  {^735^^^^^729^740^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int nCols = 0; col < col; col++ )  {^735^^^^^729^740^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^outData[col][row] = subMatrixData[row][col];^736^^^^^729^740^outData[col][row] = data[row][col];^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^outData[col][row] ;^736^^^^^729^740^outData[col][row] = data[row][col];^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^data[row][0] = v[row];outData[col][row] = data[row][col];^736^^^^^729^740^outData[col][row] = data[row][col];^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^out[row][0] = data[row][column];outData[col][row] = data[row][col];^736^^^^^729^740^outData[col][row] = data[row][col];^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^outData[row][col] = data[row][col].add ( d ) ;outData[col][row] = data[row][col];^736^^^^^729^740^outData[col][row] = data[row][col];^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^out[i] = data[i][col];outData[col][row] = data[row][col];^736^^^^^729^740^outData[col][row] = data[row][col];^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^outData[row][col] = data[row][col].multiply ( d ) ;outData[col][row] = data[row][col];^736^^^^^729^740^outData[col][row] = data[row][col];^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^outData[col][row]  =  outData[col][row] ;^736^^^^^729^740^outData[col][row] = data[row][col];^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int col = rowCount; col < nCols; col++ )  {^735^^^^^729^740^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  long  col = 0; col < nCols; col++ )  {^735^^^^^729^740^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int col = rowDimension; col < nCols; col++ )  {^735^^^^^729^740^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int rowDimension = 0; col < nCols; col++ )  {^735^^^^^729^740^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int col = 0; col < row; col++ )  {^735^^^^^729^740^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^for  ( int parity = 0; col < nCols; col++ )  {^735^^^^^729^740^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^outData[col][row] = subMatrix[row][col];^736^^^^^729^740^outData[col][row] = data[row][col];^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int row = ncols; row < nRows; row++ )  {^734^^^^^729^740^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int col = nCols; col < nCols; col++ )  {^735^^^^^729^740^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] transpose [RETURN_TYPE] BigMatrix   [VARIABLES] boolean  BigMatrixImpl  out  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P7_Replace_Invocation]^return getColumnDimension ( MatrixUtils.createBigIdentityMatrix ( this.getRowDimension (  )  )  ) ;^749^750^^^^748^751^return solve ( MatrixUtils.createBigIdentityMatrix ( this.getRowDimension (  )  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] inverse [RETURN_TYPE] BigMatrix   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P7_Replace_Invocation]^return solve ( MatrixUtils.createBigIdentityMatrix ( this.getColumnDimension (  )  )  ) ;^749^750^^^^748^751^return solve ( MatrixUtils.createBigIdentityMatrix ( this.getRowDimension (  )  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] inverse [RETURN_TYPE] BigMatrix   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P14_Delete_Statement]^^749^750^^^^748^751^return solve ( MatrixUtils.createBigIdentityMatrix ( this.getRowDimension (  )  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] inverse [RETURN_TYPE] BigMatrix   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P7_Replace_Invocation]^( this.getColumnDimension (  )  )  ) ;^750^^^^^748^751^( this.getRowDimension (  )  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] inverse [RETURN_TYPE] BigMatrix   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P14_Delete_Statement]^^750^^^^^748^751^( this.getRowDimension (  )  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] inverse [RETURN_TYPE] BigMatrix   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRows = getRowDimension (  ) ;( this.getRowDimension (  )  )  ) ;^750^^^^^748^751^( this.getRowDimension (  )  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] inverse [RETURN_TYPE] BigMatrix   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nrows = this.getRowDimension (  ) ;( this.getRowDimension (  )  )  ) ;^750^^^^^748^751^( this.getRowDimension (  )  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] inverse [RETURN_TYPE] BigMatrix   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int rowCount = this.getRowDimension (  ) ;( this.getRowDimension (  )  )  ) ;^750^^^^^748^751^( this.getRowDimension (  )  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] inverse [RETURN_TYPE] BigMatrix   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRows = this.getRowDimension (  ) ;( this.getRowDimension (  )  )  ) ;^750^^^^^748^751^( this.getRowDimension (  )  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] inverse [RETURN_TYPE] BigMatrix   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P12_Insert_Condition]^if  ( v.length != this.getColumnDimension (  )  )  { ( this.getRowDimension (  )  )  ) ; }^750^^^^^748^751^( this.getRowDimension (  )  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] inverse [RETURN_TYPE] BigMatrix   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P7_Replace_Invocation]^if  ( !isSingular (  )  )  {^760^^^^^759^772^if  ( !isSquare (  )  )  {^[CLASS] BigMatrixImpl  [METHOD] getDeterminant [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  ( this.isSingular (  )  )  {^760^^^^^759^772^if  ( !isSquare (  )  )  {^[CLASS] BigMatrixImpl  [METHOD] getDeterminant [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  ( isSingular (  )  )  {^760^^^^^759^772^if  ( !isSquare (  )  )  {^[CLASS] BigMatrixImpl  [METHOD] getDeterminant [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  ( !this.isSquare (  )  )  {^760^^^^^759^772^if  ( !isSquare (  )  )  {^[CLASS] BigMatrixImpl  [METHOD] getDeterminant [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P15_Unwrap_Block]^throw new org.apache.commons.math.linear.InvalidMatrixException("matrix is not square");^760^761^762^^^759^772^if  ( !isSquare (  )  )  { throw new InvalidMatrixException  (" ")  ; }^[CLASS] BigMatrixImpl  [METHOD] getDeterminant [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P16_Remove_Block]^^760^761^762^^^759^772^if  ( !isSquare (  )  )  { throw new InvalidMatrixException  (" ")  ; }^[CLASS] BigMatrixImpl  [METHOD] getDeterminant [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P4_Replace_Constructor]^throw throw  new InvalidMatrixException ( "Matrix is singular." )   ;^761^^^^^759^772^throw new InvalidMatrixException  (" ")  ;^[CLASS] BigMatrixImpl  [METHOD] getDeterminant [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( ! ( this.isSquare (  )  )  )  {     throw new InvalidMatrixException ( "coefficient matrix is not square" ) ; }^761^^^^^759^772^[Delete]^[CLASS] BigMatrixImpl  [METHOD] getDeterminant [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( ! ( isSquare (  )  )  )  {     throw new InvalidMatrixException ( "matrix is not square" ) ; }^761^^^^^759^772^[Delete]^[CLASS] BigMatrixImpl  [METHOD] getDeterminant [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( this.isSingular (  )  )  {     throw new InvalidMatrixException ( "Matrix is singular." ) ; }^761^^^^^759^772^[Delete]^[CLASS] BigMatrixImpl  [METHOD] getDeterminant [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( nRows != nCols )  {     throw new InvalidMatrixException ( "LU decomposition requires that the matrix be square." ) ; }^761^^^^^759^772^[Delete]^[CLASS] BigMatrixImpl  [METHOD] getDeterminant [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( rowCountsSingular (  )  )  {^763^^^^^759^772^if  ( isSingular (  )  )  {^[CLASS] BigMatrixImpl  [METHOD] getDeterminant [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P6_Replace_Expression]^if  ( i < this.getRowDimension() )  {^763^^^^^759^772^if  ( isSingular (  )  )  {^[CLASS] BigMatrixImpl  [METHOD] getDeterminant [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P7_Replace_Invocation]^if  ( isSquare (  )  )  {^763^^^^^759^772^if  ( isSingular (  )  )  {^[CLASS] BigMatrixImpl  [METHOD] getDeterminant [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  ( this.isSingular (  )  )  {^763^^^^^759^772^if  ( isSingular (  )  )  {^[CLASS] BigMatrixImpl  [METHOD] getDeterminant [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  ( !isSquare (  )  )  {^763^^^^^759^772^if  ( isSingular (  )  )  {^[CLASS] BigMatrixImpl  [METHOD] getDeterminant [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  ( !this.isSquare (  )  )  {^763^^^^^759^772^if  ( isSingular (  )  )  {^[CLASS] BigMatrixImpl  [METHOD] getDeterminant [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  short  i = 0; i < this.getRowDimension (  ) ; i++ )  {^767^^^^^759^772^for  ( int i = 0; i < this.getRowDimension (  ) ; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] getDeterminant [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  ( int i = 0; i <= this.getRowDimension (  ) ; i++ )  {^767^^^^^759^772^for  ( int i = 0; i < this.getRowDimension (  ) ; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] getDeterminant [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = rowDimension; i < this.getRowDimension (  ) ; i++ )  {^767^^^^^759^772^for  ( int i = 0; i < this.getRowDimension (  ) ; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] getDeterminant [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( rowDimensionnt i = 0; i < this.getRowDimension (  ) ; i++ )  {^767^^^^^759^772^for  ( int i = 0; i < this.getRowDimension (  ) ; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] getDeterminant [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P7_Replace_Invocation]^for  ( int i = 0; i < this.getColumnDimension (  ) ; i++ )  {^767^^^^^759^772^for  ( int i = 0; i < this.getRowDimension (  ) ; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] getDeterminant [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^for  ( nrowsnt i = 0; i < this.getRowDimension (  ) ; i++ )  {^767^^^^^759^772^for  ( int i = 0; i < this.getRowDimension (  ) ; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] getDeterminant [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^det = maxColSum.multiply ( lu[i][i] ) ;^768^^^^^759^772^det = det.multiply ( lu[i][i] ) ;^[CLASS] BigMatrixImpl  [METHOD] getDeterminant [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^det = det.multiply ( subMatrixData[i][i] ) ;^768^^^^^759^772^det = det.multiply ( lu[i][i] ) ;^[CLASS] BigMatrixImpl  [METHOD] getDeterminant [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^det = lu.multiply ( det[i][i] ) ;^768^^^^^759^772^det = det.multiply ( lu[i][i] ) ;^[CLASS] BigMatrixImpl  [METHOD] getDeterminant [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P7_Replace_Invocation]^det = det.divide ( lu[i][i] ) ;^768^^^^^759^772^det = det.multiply ( lu[i][i] ) ;^[CLASS] BigMatrixImpl  [METHOD] getDeterminant [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^det =  sum.multiply ( lu[i][i] ) ;^768^^^^^759^772^det = det.multiply ( lu[i][i] ) ;^[CLASS] BigMatrixImpl  [METHOD] getDeterminant [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^det = d.multiply ( lu[i][i] ) ;^768^^^^^759^772^det = det.multiply ( lu[i][i] ) ;^[CLASS] BigMatrixImpl  [METHOD] getDeterminant [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^det = det.multiply ( subMatrix[i][i] ) ;^768^^^^^759^772^det = det.multiply ( lu[i][i] ) ;^[CLASS] BigMatrixImpl  [METHOD] getDeterminant [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^det = d .multiply ( det )  ;^768^^^^^759^772^det = det.multiply ( lu[i][i] ) ;^[CLASS] BigMatrixImpl  [METHOD] getDeterminant [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P14_Delete_Statement]^^768^^^^^759^772^det = det.multiply ( lu[i][i] ) ;^[CLASS] BigMatrixImpl  [METHOD] getDeterminant [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^return m.multiply ( this ) ;det = det.multiply ( lu[i][i] ) ;^768^^^^^759^772^det = det.multiply ( lu[i][i] ) ;^[CLASS] BigMatrixImpl  [METHOD] getDeterminant [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^return sum;^770^^^^^759^772^return det;^[CLASS] BigMatrixImpl  [METHOD] getDeterminant [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P2_Replace_Operator]^BigDecimal det =  ( parity != 1 )  ? ONE : ONE.negate (  ) ;^766^^^^^759^772^BigDecimal det =  ( parity == 1 )  ? ONE : ONE.negate (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getDeterminant [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^BigDecimal det =  ( parity == nCols )  ? ONE : ONE.negate (  ) ;^766^^^^^759^772^BigDecimal det =  ( parity == 1 )  ? ONE : ONE.negate (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getDeterminant [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^BigDecimal det =  ( nrows == 1 )  ? ONE : ONE.negate (  ) ;^766^^^^^759^772^BigDecimal det =  ( parity == 1 )  ? ONE : ONE.negate (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getDeterminant [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^BigDecimal det =  ( parity == 1 )  ? maxColSum : ONE.negate (  ) ;^766^^^^^759^772^BigDecimal det =  ( parity == 1 )  ? ONE : ONE.negate (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getDeterminant [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^BigDecimal det =  ( ONE == 1 )  ? parity : ONE.negate (  ) ;^766^^^^^759^772^BigDecimal det =  ( parity == 1 )  ? ONE : ONE.negate (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getDeterminant [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P6_Replace_Expression]^BigDecimal det =  ( ONE.negate (  ) ;^766^^^^^759^772^BigDecimal det =  ( parity == 1 )  ? ONE : ONE.negate (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getDeterminant [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P7_Replace_Invocation]^BigDecimal det =  ( parity == 1 )  ? ONE : ONE.abs (  ) ;^766^^^^^759^772^BigDecimal det =  ( parity == 1 )  ? ONE : ONE.negate (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getDeterminant [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P7_Replace_Invocation]^BigDecimal det =  ( parity == 1 )  ? ONE : ONE .doubleValue (  )  ;^766^^^^^759^772^BigDecimal det =  ( parity == 1 )  ? ONE : ONE.negate (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getDeterminant [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^BigDecimal det =  ( ncols == 1 )  ? ONE : ONE.negate (  ) ;^766^^^^^759^772^BigDecimal det =  ( parity == 1 )  ? ONE : ONE.negate (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getDeterminant [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  long  i = 0; i < this.getRowDimension (  ) ; i++ )  {^767^^^^^759^772^for  ( int i = 0; i < this.getRowDimension (  ) ; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] getDeterminant [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = startColumn; i < this.getRowDimension (  ) ; i++ )  {^767^^^^^759^772^for  ( int i = 0; i < this.getRowDimension (  ) ; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] getDeterminant [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^BigDecimal det =  ( parity == 1 )  ? det : ONE.negate (  ) ;^766^^^^^759^772^BigDecimal det =  ( parity == 1 )  ? ONE : ONE.negate (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getDeterminant [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P14_Delete_Statement]^^766^^^^^759^772^BigDecimal det =  ( parity == 1 )  ? ONE : ONE.negate (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getDeterminant [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P14_Delete_Statement]^^767^768^769^^^759^772^for  ( int i = 0; i < this.getRowDimension (  ) ; i++ )  { det = det.multiply ( lu[i][i] ) ; }^[CLASS] BigMatrixImpl  [METHOD] getDeterminant [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P7_Replace_Invocation]^det = det .multiply ( d )  ;^768^^^^^759^772^det = det.multiply ( lu[i][i] ) ;^[CLASS] BigMatrixImpl  [METHOD] getDeterminant [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^return sum;^764^^^^^759^772^return ZERO;^[CLASS] BigMatrixImpl  [METHOD] getDeterminant [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^return det;^764^^^^^759^772^return ZERO;^[CLASS] BigMatrixImpl  [METHOD] getDeterminant [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = col; i < this.getRowDimension (  ) ; i++ )  {^767^^^^^759^772^for  ( int i = 0; i < this.getRowDimension (  ) ; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] getDeterminant [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( paritynt i = 0; i < this.getRowDimension (  ) ; i++ )  {^767^^^^^759^772^for  ( int i = 0; i < this.getRowDimension (  ) ; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] getDeterminant [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^return maxColSum;^764^^^^^759^772^return ZERO;^[CLASS] BigMatrixImpl  [METHOD] getDeterminant [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^return d;^770^^^^^759^772^return det;^[CLASS] BigMatrixImpl  [METHOD] getDeterminant [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P2_Replace_Operator]^BigDecimal det =  ( parity <= 1 )  ? ONE : ONE.negate (  ) ;^766^^^^^759^772^BigDecimal det =  ( parity == 1 )  ? ONE : ONE.negate (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getDeterminant [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^BigDecimal det =  ( r == 1 )  ? ONE : ONE.negate (  ) ;^766^^^^^759^772^BigDecimal det =  ( parity == 1 )  ? ONE : ONE.negate (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getDeterminant [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^BigDecimal det =  ( parity == 1 )  ? sum : ONE.negate (  ) ;^766^^^^^759^772^BigDecimal det =  ( parity == 1 )  ? ONE : ONE.negate (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getDeterminant [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = 1; i < this.getRowDimension (  ) ; i++ )  {^767^^^^^759^772^for  ( int i = 0; i < this.getRowDimension (  ) ; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] getDeterminant [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^det = det.multiply ( outData[i][i] ) ;^768^^^^^759^772^det = det.multiply ( lu[i][i] ) ;^[CLASS] BigMatrixImpl  [METHOD] getDeterminant [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P2_Replace_Operator]^return  ( this.getColumnDimension (  )  <= this.getRowDimension (  )  ) ;^779^^^^^778^780^return  ( this.getColumnDimension (  )  == this.getRowDimension (  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] isSquare [RETURN_TYPE] boolean   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P7_Replace_Invocation]^return  ( this.getRowDimension (  )  == this.getRowDimension (  )  ) ;^779^^^^^778^780^return  ( this.getColumnDimension (  )  == this.getRowDimension (  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] isSquare [RETURN_TYPE] boolean   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P7_Replace_Invocation]^return  ( this.getColumnDimension (  )  == this.getColumnDimension (  )  ) ;^779^^^^^778^780^return  ( this.getColumnDimension (  )  == this.getRowDimension (  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] isSquare [RETURN_TYPE] boolean   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P12_Insert_Condition]^if  ( this.getColumnDimension (  )  != m.getRowDimension (  )  )  { return  ( this.getColumnDimension (  )  == this.getRowDimension (  )  ) ; }^779^^^^^778^780^return  ( this.getColumnDimension (  )  == this.getRowDimension (  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] isSquare [RETURN_TYPE] boolean   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P12_Insert_Condition]^if  ( m.getColumnDimension (  )  != nCols || m.getRowDimension (  )  != nRows )  { return  ( this.getColumnDimension (  )  == this.getRowDimension (  )  ) ; }^779^^^^^778^780^return  ( this.getColumnDimension (  )  == this.getRowDimension (  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] isSquare [RETURN_TYPE] boolean   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P12_Insert_Condition]^if  ( b.getRowDimension (  )  != this.getRowDimension (  )  )  { return  ( this.getColumnDimension (  )  == this.getRowDimension (  )  ) ; }^779^^^^^778^780^return  ( this.getColumnDimension (  )  == this.getRowDimension (  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] isSquare [RETURN_TYPE] boolean   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P14_Delete_Statement]^^779^^^^^778^780^return  ( this.getColumnDimension (  )  == this.getRowDimension (  )  ) ;^[CLASS] BigMatrixImpl  [METHOD] isSquare [RETURN_TYPE] boolean   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P2_Replace_Operator]^if  ( lu != null )  {^787^^^^^786^797^if  ( lu == null )  {^[CLASS] BigMatrixImpl  [METHOD] isSingular [RETURN_TYPE] boolean   [VARIABLES] InvalidMatrixException  ex  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( subMatrixData == null )  {^787^^^^^786^797^if  ( lu == null )  {^[CLASS] BigMatrixImpl  [METHOD] isSingular [RETURN_TYPE] boolean   [VARIABLES] InvalidMatrixException  ex  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^if  ( lu == false )  {^787^^^^^786^797^if  ( lu == null )  {^[CLASS] BigMatrixImpl  [METHOD] isSingular [RETURN_TYPE] boolean   [VARIABLES] InvalidMatrixException  ex  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  ( data != null )  {^787^^^^^786^797^if  ( lu == null )  {^[CLASS] BigMatrixImpl  [METHOD] isSingular [RETURN_TYPE] boolean   [VARIABLES] InvalidMatrixException  ex  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  ( max != col )  {^787^^^^^786^797^if  ( lu == null )  {^[CLASS] BigMatrixImpl  [METHOD] isSingular [RETURN_TYPE] boolean   [VARIABLES] InvalidMatrixException  ex  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  ( data == null )  {^787^^^^^786^797^if  ( lu == null )  {^[CLASS] BigMatrixImpl  [METHOD] isSingular [RETURN_TYPE] boolean   [VARIABLES] InvalidMatrixException  ex  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^return true;^795^^^^^786^797^return false;^[CLASS] BigMatrixImpl  [METHOD] isSingular [RETURN_TYPE] boolean   [VARIABLES] InvalidMatrixException  ex  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^return true;^790^^^^^786^797^return false;^[CLASS] BigMatrixImpl  [METHOD] isSingular [RETURN_TYPE] boolean   [VARIABLES] InvalidMatrixException  ex  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P7_Replace_Invocation]^copyOut (  ) ;^789^^^^^786^797^luDecompose (  ) ;^[CLASS] BigMatrixImpl  [METHOD] isSingular [RETURN_TYPE] boolean   [VARIABLES] InvalidMatrixException  ex  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P14_Delete_Statement]^^789^790^^^^786^797^luDecompose (  ) ; return false;^[CLASS] BigMatrixImpl  [METHOD] isSingular [RETURN_TYPE] boolean   [VARIABLES] InvalidMatrixException  ex  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^return copyOut (  ) ;luDecompose (  ) ;^789^^^^^786^797^luDecompose (  ) ;^[CLASS] BigMatrixImpl  [METHOD] isSingular [RETURN_TYPE] boolean   [VARIABLES] InvalidMatrixException  ex  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^return false;^792^^^^^786^797^return true;^[CLASS] BigMatrixImpl  [METHOD] isSingular [RETURN_TYPE] boolean   [VARIABLES] InvalidMatrixException  ex  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P14_Delete_Statement]^^789^^^^^786^797^luDecompose (  ) ;^[CLASS] BigMatrixImpl  [METHOD] isSingular [RETURN_TYPE] boolean   [VARIABLES] InvalidMatrixException  ex  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^return ncols;^805^^^^^804^806^return data.length;^[CLASS] BigMatrixImpl  [METHOD] getRowDimension [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^return subMatrix.length;^805^^^^^804^806^return data.length;^[CLASS] BigMatrixImpl  [METHOD] getRowDimension [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^return data;^805^^^^^804^806^return data.length;^[CLASS] BigMatrixImpl  [METHOD] getRowDimension [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^return data.length.length;^805^^^^^804^806^return data.length;^[CLASS] BigMatrixImpl  [METHOD] getRowDimension [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^return nrows;^805^^^^^804^806^return data.length;^[CLASS] BigMatrixImpl  [METHOD] getRowDimension [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^return data[parity].length;^814^^^^^813^815^return data[0].length;^[CLASS] BigMatrixImpl  [METHOD] getColumnDimension [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^return subMatrix[0].length;^814^^^^^813^815^return data[0].length;^[CLASS] BigMatrixImpl  [METHOD] getColumnDimension [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^return data[0].length[0].length;^814^^^^^813^815^return data[0].length;^[CLASS] BigMatrixImpl  [METHOD] getColumnDimension [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^return data[0 ].length;^814^^^^^813^815^return data[0].length;^[CLASS] BigMatrixImpl  [METHOD] getColumnDimension [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P7_Replace_Invocation]^if  ( !isSingular (  )  )  {^826^^^^^825^834^if  ( !isSquare (  )  )  {^[CLASS] BigMatrixImpl  [METHOD] getTrace [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  ( this.isSingular (  )  )  {^826^^^^^825^834^if  ( !isSquare (  )  )  {^[CLASS] BigMatrixImpl  [METHOD] getTrace [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  ( isSingular (  )  )  {^826^^^^^825^834^if  ( !isSquare (  )  )  {^[CLASS] BigMatrixImpl  [METHOD] getTrace [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  ( !this.isSquare (  )  )  {^826^^^^^825^834^if  ( !isSquare (  )  )  {^[CLASS] BigMatrixImpl  [METHOD] getTrace [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("matrix is not square");^826^827^828^^^825^834^if  ( !isSquare (  )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] BigMatrixImpl  [METHOD] getTrace [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P16_Remove_Block]^^826^827^828^^^825^834^if  ( !isSquare (  )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] BigMatrixImpl  [METHOD] getTrace [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( b.length )  != nRows )  {     throw new IllegalArgumentException ( "constant vector has wrong length" ) ; }^826^^^^^825^834^[Delete]^[CLASS] BigMatrixImpl  [METHOD] getTrace [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( nRows == 0 )  {     throw new IllegalArgumentException ( "Matrix must have at least one row." ) ; }^826^^^^^825^834^[Delete]^[CLASS] BigMatrixImpl  [METHOD] getTrace [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( b.getRowDimension (  )  )  !=  ( this.getRowDimension (  )  )  )  {     throw new IllegalArgumentException ( "Incorrect row dimension" ) ; }^826^^^^^825^834^[Delete]^[CLASS] BigMatrixImpl  [METHOD] getTrace [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( ! ( this.isSquare (  )  )  )  {     throw new InvalidMatrixException ( "coefficient matrix is not square" ) ; }^826^^^^^825^834^[Delete]^[CLASS] BigMatrixImpl  [METHOD] getTrace [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( subMatrix[r].length )  != nCols )  {     throw new IllegalArgumentException ( "All input rows must have the same length." ) ; }^826^^^^^825^834^[Delete]^[CLASS] BigMatrixImpl  [METHOD] getTrace [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( ! ( isSquare (  )  )  )  {     throw new InvalidMatrixException ( "matrix is not square" ) ; }^826^^^^^825^834^[Delete]^[CLASS] BigMatrixImpl  [METHOD] getTrace [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( v.length )  != nRows )  {     throw new IllegalArgumentException ( "vector has wrong length" ) ; }^826^^^^^825^834^[Delete]^[CLASS] BigMatrixImpl  [METHOD] getTrace [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( v.length )  !=  ( this.getColumnDimension (  )  )  )  {     throw new IllegalArgumentException ( "vector has wrong length" ) ; }^826^^^^^825^834^[Delete]^[CLASS] BigMatrixImpl  [METHOD] getTrace [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( this.getColumnDimension (  )  )  !=  ( m.getRowDimension (  )  )  )  {     throw new IllegalArgumentException ( "Matrices are not multiplication compatible." ) ; }^826^^^^^825^834^[Delete]^[CLASS] BigMatrixImpl  [METHOD] getTrace [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( d[row].length )  != nCols )  {     throw new IllegalArgumentException ( "All input rows must have the same length." ) ; }^826^^^^^825^834^[Delete]^[CLASS] BigMatrixImpl  [METHOD] getTrace [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( nCols == 0 )  {     throw new IllegalArgumentException ( "Matrix must have at least one column." ) ; }^826^^^^^825^834^[Delete]^[CLASS] BigMatrixImpl  [METHOD] getTrace [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( rowDimension <= 0 )  ||  ( columnDimension <= 0 )  )  {     throw new IllegalArgumentException ( "row and column dimensions must be positive" ) ; }^826^^^^^825^834^[Delete]^[CLASS] BigMatrixImpl  [METHOD] getTrace [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( this.isSingular (  )  )  {     throw new InvalidMatrixException ( "Matrix is singular." ) ; }^826^^^^^825^834^[Delete]^[CLASS] BigMatrixImpl  [METHOD] getTrace [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "matrix dimension mismatch" )   ;^827^^^^^825^834^throw new IllegalArgumentException  (" ")  ;^[CLASS] BigMatrixImpl  [METHOD] getTrace [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( ! ( isSquare (  )  )  )  {     throw new IllegalArgumentException ( "matrix is not square" ) ; }^827^^^^^825^834^[Delete]^[CLASS] BigMatrixImpl  [METHOD] getTrace [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( nRows == 0 )  {     throw new IllegalArgumentException ( "Matrix must have at least one row." ) ; }^827^^^^^825^834^[Delete]^[CLASS] BigMatrixImpl  [METHOD] getTrace [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Matrix must have at least one row." ) ;throw new IllegalArgumentException  (" ")  ;^827^^^^^825^834^throw new IllegalArgumentException  (" ")  ;^[CLASS] BigMatrixImpl  [METHOD] getTrace [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^throw new InvalidMatrixException  (" ")  ;throw new IllegalArgumentException  (" ")  ;^827^^^^^825^834^throw new IllegalArgumentException  (" ")  ;^[CLASS] BigMatrixImpl  [METHOD] getTrace [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^throw new MatrixIndexException  (" ")  ;throw new IllegalArgumentException  (" ")  ;^827^^^^^825^834^throw new IllegalArgumentException  (" ")  ;^[CLASS] BigMatrixImpl  [METHOD] getTrace [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( v.length )  != nRows )  {     throw new IllegalArgumentException ( "vector has wrong length" ) ; }^827^^^^^825^834^[Delete]^[CLASS] BigMatrixImpl  [METHOD] getTrace [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( nCols == 0 )  {     throw new IllegalArgumentException ( "Matrix must have at least one column." ) ; }^827^^^^^825^834^[Delete]^[CLASS] BigMatrixImpl  [METHOD] getTrace [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^BigDecimal trace = data[9][9];^829^^^^^825^834^BigDecimal trace = data[0][0];^[CLASS] BigMatrixImpl  [METHOD] getTrace [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^BigDecimal trace = data[rowDimension][rowDimension];^829^^^^^825^834^BigDecimal trace = data[0][0];^[CLASS] BigMatrixImpl  [METHOD] getTrace [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^BigDecimal trace = subMatrixData[0][0];^829^^^^^825^834^BigDecimal trace = data[0][0];^[CLASS] BigMatrixImpl  [METHOD] getTrace [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal tmp = ZERO;BigDecimal trace = data[0][0];^829^^^^^825^834^BigDecimal trace = data[0][0];^[CLASS] BigMatrixImpl  [METHOD] getTrace [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  short  i = 1; i < this.getRowDimension (  ) ; i++ )  {^830^^^^^825^834^for  ( int i = 1; i < this.getRowDimension (  ) ; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] getTrace [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  ( int i = 1; i <= this.getRowDimension (  ) ; i++ )  {^830^^^^^825^834^for  ( int i = 1; i < this.getRowDimension (  ) ; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] getTrace [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = 9; i < this.getRowDimension (  ) ; i++ )  {^830^^^^^825^834^for  ( int i = 1; i < this.getRowDimension (  ) ; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] getTrace [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( nrowsnt i = 1; i < this.getRowDimension (  ) ; i++ )  {^830^^^^^825^834^for  ( int i = 1; i < this.getRowDimension (  ) ; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] getTrace [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P7_Replace_Invocation]^for  ( int i = 1; i < this.getColumnDimension (  ) ; i++ )  {^830^^^^^825^834^for  ( int i = 1; i < this.getRowDimension (  ) ; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] getTrace [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^for  ( nrowsnt i = 1; i < this.getColumnDimension (  ) ; i++ )  {^830^^^^^825^834^for  ( int i = 1; i < this.getRowDimension (  ) ; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] getTrace [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^trace = sum.add ( data[i][i] ) ;^831^^^^^825^834^trace = trace.add ( data[i][i] ) ;^[CLASS] BigMatrixImpl  [METHOD] getTrace [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^trace = trace.add ( subMatrixData[i][i] ) ;^831^^^^^825^834^trace = trace.add ( data[i][i] ) ;^[CLASS] BigMatrixImpl  [METHOD] getTrace [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^trace = data.add ( trace[i][i] ) ;^831^^^^^825^834^trace = trace.add ( data[i][i] ) ;^[CLASS] BigMatrixImpl  [METHOD] getTrace [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P7_Replace_Invocation]^trace = trace.divide ( data[i][i] ) ;^831^^^^^825^834^trace = trace.add ( data[i][i] ) ;^[CLASS] BigMatrixImpl  [METHOD] getTrace [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^trace =  maxColSum.add ( data[i][i] ) ;^831^^^^^825^834^trace = trace.add ( data[i][i] ) ;^[CLASS] BigMatrixImpl  [METHOD] getTrace [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^trace = trace.add ( subMatrix[i][i] ) ;^831^^^^^825^834^trace = trace.add ( data[i][i] ) ;^[CLASS] BigMatrixImpl  [METHOD] getTrace [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^trace = trace.add ( outData[i][i] ) ;^831^^^^^825^834^trace = trace.add ( data[i][i] ) ;^[CLASS] BigMatrixImpl  [METHOD] getTrace [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P14_Delete_Statement]^^831^^^^^825^834^trace = trace.add ( data[i][i] ) ;^[CLASS] BigMatrixImpl  [METHOD] getTrace [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^res.append ( data[i][j] ) ;trace = trace.add ( data[i][i] ) ;^831^^^^^825^834^trace = trace.add ( data[i][i] ) ;^[CLASS] BigMatrixImpl  [METHOD] getTrace [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^trace =  det.add ( data[i][i] ) ;^831^^^^^825^834^trace = trace.add ( data[i][i] ) ;^[CLASS] BigMatrixImpl  [METHOD] getTrace [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  long  i = 1; i < this.getRowDimension (  ) ; i++ )  {^830^^^^^825^834^for  ( int i = 1; i < this.getRowDimension (  ) ; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] getTrace [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = startColumn; i < this.getRowDimension (  ) ; i++ )  {^830^^^^^825^834^for  ( int i = 1; i < this.getRowDimension (  ) ; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] getTrace [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P14_Delete_Statement]^^830^831^832^^^825^834^for  ( int i = 1; i < this.getRowDimension (  ) ; i++ )  { trace = trace.add ( data[i][i] ) ; }^[CLASS] BigMatrixImpl  [METHOD] getTrace [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^return sum;^833^^^^^825^834^return trace;^[CLASS] BigMatrixImpl  [METHOD] getTrace [RETURN_TYPE] BigDecimal   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P2_Replace_Operator]^if  ( v.length >= this.getColumnDimension (  )  )  {^844^^^^^843^858^if  ( v.length != this.getColumnDimension (  )  )  {^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( out.length != this.getColumnDimension (  )  )  {^844^^^^^843^858^if  ( v.length != this.getColumnDimension (  )  )  {^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( rowCount != this.getColumnDimension (  )  )  {^844^^^^^843^858^if  ( v.length != this.getColumnDimension (  )  )  {^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( v.length.length != this.getColumnDimension (  )  )  {^844^^^^^843^858^if  ( v.length != this.getColumnDimension (  )  )  {^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( v != this.getColumnDimension (  )  )  {^844^^^^^843^858^if  ( v.length != this.getColumnDimension (  )  )  {^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P7_Replace_Invocation]^if  ( v.length != this.getRowDimension (  )  )  {^844^^^^^843^858^if  ( v.length != this.getColumnDimension (  )  )  {^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^if  ( r != this.getColumnDimension (  )  )  {^844^^^^^843^858^if  ( v.length != this.getColumnDimension (  )  )  {^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("vector has wrong length");^844^845^846^^^843^858^if  ( v.length != this.getColumnDimension (  )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P16_Remove_Block]^^844^845^846^^^843^858^if  ( v.length != this.getColumnDimension (  )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( ! ( isSquare (  )  )  )  {     throw new IllegalArgumentException ( "matrix is not square" ) ; }^844^^^^^843^858^[Delete]^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( b.length )  != nRows )  {     throw new IllegalArgumentException ( "constant vector has wrong length" ) ; }^844^^^^^843^858^[Delete]^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( subMatrix[r].length )  != nCols )  {     throw new IllegalArgumentException ( "All input rows must have the same length." ) ; }^844^^^^^843^858^[Delete]^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( v.length )  != nRows )  {     throw new IllegalArgumentException ( "vector has wrong length" ) ; }^844^^^^^843^858^[Delete]^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( b.getRowDimension (  )  )  !=  ( this.getRowDimension (  )  )  )  {     throw new IllegalArgumentException ( "Incorrect row dimension" ) ; }^844^^^^^843^858^[Delete]^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( this.getColumnDimension (  )  )  !=  ( m.getRowDimension (  )  )  )  {     throw new IllegalArgumentException ( "Matrices are not multiplication compatible." ) ; }^844^^^^^843^858^[Delete]^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  (  ( this.getColumnDimension (  )  )  !=  ( m.getColumnDimension (  )  )  )  ||  (  ( this.getRowDimension (  )  )  !=  ( m.getRowDimension (  )  )  )  )  {     throw new IllegalArgumentException ( "matrix dimension mismatch" ) ; }^844^^^^^843^858^[Delete]^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( d[row].length )  != nCols )  {     throw new IllegalArgumentException ( "All input rows must have the same length." ) ; }^844^^^^^843^858^[Delete]^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( rowDimension <= 0 )  ||  ( columnDimension <= 0 )  )  {     throw new IllegalArgumentException ( "row and column dimensions must be positive" ) ; }^844^^^^^843^858^[Delete]^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "Incorrect row dimension" )   ;^845^^^^^843^858^throw new IllegalArgumentException  (" ")  ;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( b.length )  != nRows )  {     throw new IllegalArgumentException ( "constant vector has wrong length" ) ; }^845^^^^^843^858^[Delete]^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( v.length )  != nRows )  {     throw new IllegalArgumentException ( "vector has wrong length" ) ; }^845^^^^^843^858^[Delete]^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( v.length )  !=  ( this.getColumnDimension (  )  )  )  {     throw new IllegalArgumentException ( "vector has wrong length" ) ; }^845^^^^^843^858^[Delete]^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Matrix must have at least one row." ) ;throw new IllegalArgumentException  (" ")  ;^845^^^^^843^858^throw new IllegalArgumentException  (" ")  ;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^throw new InvalidMatrixException  (" ")  ;throw new IllegalArgumentException  (" ")  ;^845^^^^^843^858^throw new IllegalArgumentException  (" ")  ;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^throw new MatrixIndexException  (" ")  ;throw new IllegalArgumentException  (" ")  ;^845^^^^^843^858^throw new IllegalArgumentException  (" ")  ;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( ! ( isSquare (  )  )  )  {     throw new IllegalArgumentException ( "matrix is not square" ) ; }^845^^^^^843^858^[Delete]^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( nRows == 0 )  {     throw new IllegalArgumentException ( "Matrix must have at least one row." ) ; }^845^^^^^843^858^[Delete]^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P1_Replace_Type]^short  nRows = this.getRowDimension (  ) ;^847^^^^^843^858^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P7_Replace_Invocation]^int nRows = this.getColumnDimension (  ) ;^847^^^^^843^858^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = this.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^847^^^^^843^858^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCol = this.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^847^^^^^843^858^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int columnCount = this.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^847^^^^^843^858^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRows = getRowDimension (  ) ;int nRows = this.getRowDimension (  ) ;^847^^^^^843^858^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nrows = this.getRowDimension (  ) ;int nRows = this.getRowDimension (  ) ;^847^^^^^843^858^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nColB = b.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^847^^^^^843^858^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^847^^^^^843^858^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRowB = b.getRowDimension (  ) ;int nRows = this.getRowDimension (  ) ;^847^^^^^843^858^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int rowCount = this.getRowDimension (  ) ;int nRows = this.getRowDimension (  ) ;^847^^^^^843^858^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int ncols = this.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^847^^^^^843^858^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nSum = this.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^847^^^^^843^858^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = m.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^847^^^^^843^858^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P14_Delete_Statement]^^847^^^^^843^858^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^( this.getRowDimension (  )  )  ) ;int nRows = this.getRowDimension (  ) ;^847^^^^^843^858^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P12_Insert_Condition]^if  ( b.getRowDimension (  )  != this.getRowDimension (  )  )  { int nRows = this.getRowDimension (  ) ; }^847^^^^^843^858^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P12_Insert_Condition]^if  ( v.length != this.getColumnDimension (  )  )  { int nRows = this.getRowDimension (  ) ; }^847^^^^^843^858^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P1_Replace_Type]^short  nCols = this.getColumnDimension (  ) ;^848^^^^^843^858^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P7_Replace_Invocation]^int nCols = this.getRowDimension (  ) ;^848^^^^^843^858^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCol = this.getColumnDimension (  ) ;int nCols = this.getColumnDimension (  ) ;^848^^^^^843^858^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int columnCount = this.getColumnDimension (  ) ;int nCols = this.getColumnDimension (  ) ;^848^^^^^843^858^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRows = getRowDimension (  ) ;int nCols = this.getColumnDimension (  ) ;^848^^^^^843^858^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nrows = this.getRowDimension (  ) ;int nCols = this.getColumnDimension (  ) ;^848^^^^^843^858^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nColB = b.getColumnDimension (  ) ;int nCols = this.getColumnDimension (  ) ;^848^^^^^843^858^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = getColumnDimension (  ) ;int nCols = this.getColumnDimension (  ) ;^848^^^^^843^858^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRowB = b.getRowDimension (  ) ;int nCols = this.getColumnDimension (  ) ;^848^^^^^843^858^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int rowCount = this.getRowDimension (  ) ;int nCols = this.getColumnDimension (  ) ;^848^^^^^843^858^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int ncols = this.getColumnDimension (  ) ;int nCols = this.getColumnDimension (  ) ;^848^^^^^843^858^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRows = this.getRowDimension (  ) ;int nCols = this.getColumnDimension (  ) ;^848^^^^^843^858^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nSum = this.getColumnDimension (  ) ;int nCols = this.getColumnDimension (  ) ;^848^^^^^843^858^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = m.getColumnDimension (  ) ;int nCols = this.getColumnDimension (  ) ;^848^^^^^843^858^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P12_Insert_Condition]^if  ( v.length != this.getColumnDimension (  )  )  { int nCols = this.getColumnDimension (  ) ; }^848^^^^^843^858^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P14_Delete_Statement]^^848^849^^^^843^858^int nCols = this.getColumnDimension (  ) ; BigDecimal[] out = new BigDecimal[v.length];^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[][] out = new BigDecimal[nRows][1];BigDecimal[] out = new BigDecimal[v.length];^849^^^^^843^858^BigDecimal[] out = new BigDecimal[v.length];^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal bd[] = new BigDecimal[v.length];BigDecimal[] out = new BigDecimal[v.length];^849^^^^^843^858^BigDecimal[] out = new BigDecimal[v.length];^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal bd[] = new BigDecimal[b.length];BigDecimal[] out = new BigDecimal[v.length];^849^^^^^843^858^BigDecimal[] out = new BigDecimal[v.length];^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];BigDecimal[] out = new BigDecimal[v.length];^849^^^^^843^858^BigDecimal[] out = new BigDecimal[v.length];^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[] out = new BigDecimal[nRows];BigDecimal[] out = new BigDecimal[v.length];^849^^^^^843^858^BigDecimal[] out = new BigDecimal[v.length];^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[][] out = new BigDecimal[nRows][this.getColumnDimension (  ) ];BigDecimal[] out = new BigDecimal[v.length];^849^^^^^843^858^BigDecimal[] out = new BigDecimal[v.length];^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[][] out = new BigDecimal[1][ncols];BigDecimal[] out = new BigDecimal[v.length];^849^^^^^843^858^BigDecimal[] out = new BigDecimal[v.length];^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[] out = new BigDecimal[nCols];BigDecimal[] out = new BigDecimal[v.length];^849^^^^^843^858^BigDecimal[] out = new BigDecimal[v.length];^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[][] outData = new BigDecimal[nRows][nCols];BigDecimal[] out = new BigDecimal[v.length];^849^^^^^843^858^BigDecimal[] out = new BigDecimal[v.length];^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[] out = new BigDecimal[ncols];BigDecimal[] out = new BigDecimal[v.length];^849^^^^^843^858^BigDecimal[] out = new BigDecimal[v.length];^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[][] bp = new BigDecimal[nRowB][nColB];BigDecimal[] out = new BigDecimal[v.length];^849^^^^^843^858^BigDecimal[] out = new BigDecimal[v.length];^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  short  row = 0; row < nRows; row++ )  {^850^^^^^843^858^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  ( int row = 0; row == nRows; row++ )  {^850^^^^^843^858^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  ( int row = 0; row <= nRows; row++ )  {^850^^^^^843^858^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int row = 9; row < nRows; row++ )  {^850^^^^^843^858^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int rowCount = 0; row < nRows; row++ )  {^850^^^^^843^858^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int row = 0; row < startRow; row++ )  {^850^^^^^843^858^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( roundingModent row = 0; row < nRows; row++ )  {^850^^^^^843^858^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( nRowsnt row = 0; row < i; row++ )  {^850^^^^^843^858^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( rownt i = 0; row < nRows; row++ )  {^850^^^^^843^858^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^for  ( int parity = 0; row < nRows; row++ )  {^850^^^^^843^858^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  short  i = 0; i < nCols; i++ )  {^852^^^^^843^858^for  ( int i = 0; i < nCols; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  ( int i = 0; i <= nCols; i++ )  {^852^^^^^843^858^for  ( int i = 0; i < nCols; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = r; i < nCols; i++ )  {^852^^^^^843^858^for  ( int i = 0; i < nCols; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int i = 0; i < parity; i++ )  {^852^^^^^843^858^for  ( int i = 0; i < nCols; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^for  ( int i = 0; i < startColumn; i++ )  {^852^^^^^843^858^for  ( int i = 0; i < nCols; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^sum = maxColSum.add ( data[row][i].multiply ( v[i] )  ) ;^853^^^^^843^858^sum = sum.add ( data[row][i].multiply ( v[i] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^sum = sum.add ( data[row][i].multiply ( out[i] )  ) ;^853^^^^^843^858^sum = sum.add ( data[row][i].multiply ( v[i] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^sum = sum.add ( subMatrixData[row][i].multiply ( v[i] )  ) ;^853^^^^^843^858^sum = sum.add ( data[row][i].multiply ( v[i] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^sum = v.add ( data[row][i].multiply ( sum[i] )  ) ;^853^^^^^843^858^sum = sum.add ( data[row][i].multiply ( v[i] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^sum = sum.add ( data[row][col].abs (  )  ) ;sum = sum.add ( data[row][i].multiply ( v[i] )  ) ;^853^^^^^843^858^sum = sum.add ( data[row][i].multiply ( v[i] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^sum = sum.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;sum = sum.add ( data[row][i].multiply ( v[i] )  ) ;^853^^^^^843^858^sum = sum.add ( data[row][i].multiply ( v[i] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^sum = sum.add ( data[i][col].multiply ( v[i] )  ) ;sum = sum.add ( data[row][i].multiply ( v[i] )  ) ;^853^^^^^843^858^sum = sum.add ( data[row][i].multiply ( v[i] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^sum = sum.add ( data[row][i].multiply ( m.getEntry ( i, col )  )  ) ;sum = sum.add ( data[row][i].multiply ( v[i] )  ) ;^853^^^^^843^858^sum = sum.add ( data[row][i].multiply ( v[i] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^sum = det.add ( data[row][i].multiply ( v[i] )  ) ;^853^^^^^843^858^sum = sum.add ( data[row][i].multiply ( v[i] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^sum = sum.add ( outData[row][i].multiply ( v[i] )  ) ;^853^^^^^843^858^sum = sum.add ( data[row][i].multiply ( v[i] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^sum = sum.add ( v[row][i].multiply ( data[i] )  ) ;^853^^^^^843^858^sum = sum.add ( data[row][i].multiply ( v[i] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P7_Replace_Invocation]^sum = sum.add ( data[row][i] .multiply ( d )   ) ;^853^^^^^843^858^sum = sum.add ( data[row][i].multiply ( v[i] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^sum = trace.add ( data[row][i].multiply ( v[i] )  ) ;^853^^^^^843^858^sum = sum.add ( data[row][i].multiply ( v[i] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P14_Delete_Statement]^^853^^^^^843^858^sum = sum.add ( data[row][i].multiply ( v[i] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^sum = data.add ( sum[row][i].multiply ( v[i] )  ) ;^853^^^^^843^858^sum = sum.add ( data[row][i].multiply ( v[i] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^out[row] = det;^855^^^^^843^858^out[row] = sum;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^out[row]  =  out[row] ;^855^^^^^843^858^out[row] = sum;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^out[col] = sum;out[row] = sum;^855^^^^^843^858^out[row] = sum;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^outData[row][col] = sum;out[row] = sum;^855^^^^^843^858^out[row] = sum;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^lu[row][col] = sum;out[row] = sum;^855^^^^^843^858^out[row] = sum;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^BigDecimal sum = trace;^851^^^^^843^858^BigDecimal sum = ZERO;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal largest = ZERO;BigDecimal sum = ZERO;^851^^^^^843^858^BigDecimal sum = ZERO;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal maxColSum = ZERO;BigDecimal sum = ZERO;^851^^^^^843^858^BigDecimal sum = ZERO;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal tmp = ZERO;BigDecimal sum = ZERO;^851^^^^^843^858^BigDecimal sum = ZERO;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P7_Replace_Invocation]^sum = sum.add ( data[row][i] .multiply ( trace )   ) ;^853^^^^^843^858^sum = sum.add ( data[row][i].multiply ( v[i] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P7_Replace_Invocation]^sum = sum.add ( data[row][i] .multiply ( sum )   ) ;^853^^^^^843^858^sum = sum.add ( data[row][i].multiply ( v[i] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  ( int i = 0; i > nCols; i++ )  {^852^^^^^843^858^for  ( int i = 0; i < nCols; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = 7; i < nCols; i++ )  {^852^^^^^843^858^for  ( int i = 0; i < nCols; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( rnt i = 0; i < nCols; i++ )  {^852^^^^^843^858^for  ( int i = 0; i < nCols; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int i = 0; i < rowDimension; i++ )  {^852^^^^^843^858^for  ( int i = 0; i < nCols; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( nColsnt i = 0; i < i; i++ )  {^852^^^^^843^858^for  ( int i = 0; i < nCols; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P7_Replace_Invocation]^sum = sum.add ( data[row][i] .multiply ( ZERO )   ) ;^853^^^^^843^858^sum = sum.add ( data[row][i].multiply ( v[i] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^sum = sum.add ( subMatrix[row][i].multiply ( v[i] )  ) ;^853^^^^^843^858^sum = sum.add ( data[row][i].multiply ( v[i] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^out[row] = maxColSum;^855^^^^^843^858^out[row] = sum;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^out[row] ;^855^^^^^843^858^out[row] = sum;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  long  row = 0; row < nRows; row++ )  {^850^^^^^843^858^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int row = column; row < nRows; row++ )  {^850^^^^^843^858^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^BigDecimal sum = maxColSum;^851^^^^^843^858^BigDecimal sum = ZERO;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = 4; i < nCols; i++ )  {^852^^^^^843^858^for  ( int i = 0; i < nCols; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^return v;^857^^^^^843^858^return out;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[] out = new BigDecimal[v.length];BigDecimal bd[] = new BigDecimal[v.length];^868^^^^^867^873^BigDecimal bd[] = new BigDecimal[v.length];^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   double[] v [VARIABLES] boolean  double[]  v  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  bd  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[][] out = new BigDecimal[nRows][1];BigDecimal bd[] = new BigDecimal[v.length];^868^^^^^867^873^BigDecimal bd[] = new BigDecimal[v.length];^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   double[] v [VARIABLES] boolean  double[]  v  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  bd  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal bd[] = new BigDecimal[b.length];BigDecimal bd[] = new BigDecimal[v.length];^868^^^^^867^873^BigDecimal bd[] = new BigDecimal[v.length];^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   double[] v [VARIABLES] boolean  double[]  v  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  bd  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];BigDecimal bd[] = new BigDecimal[v.length];^868^^^^^867^873^BigDecimal bd[] = new BigDecimal[v.length];^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   double[] v [VARIABLES] boolean  double[]  v  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  bd  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[] out = new BigDecimal[nRows];BigDecimal bd[] = new BigDecimal[v.length];^868^^^^^867^873^BigDecimal bd[] = new BigDecimal[v.length];^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   double[] v [VARIABLES] boolean  double[]  v  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  bd  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[][] out = new BigDecimal[1][ncols];BigDecimal bd[] = new BigDecimal[v.length];^868^^^^^867^873^BigDecimal bd[] = new BigDecimal[v.length];^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   double[] v [VARIABLES] boolean  double[]  v  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  bd  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[] out = new BigDecimal[nCols];BigDecimal bd[] = new BigDecimal[v.length];^868^^^^^867^873^BigDecimal bd[] = new BigDecimal[v.length];^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   double[] v [VARIABLES] boolean  double[]  v  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  bd  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[][] outData = new BigDecimal[nRows][nCols];BigDecimal bd[] = new BigDecimal[v.length];^868^^^^^867^873^BigDecimal bd[] = new BigDecimal[v.length];^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   double[] v [VARIABLES] boolean  double[]  v  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  bd  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[] out = new BigDecimal[ncols];BigDecimal bd[] = new BigDecimal[v.length];^868^^^^^867^873^BigDecimal bd[] = new BigDecimal[v.length];^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   double[] v [VARIABLES] boolean  double[]  v  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  bd  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[][] bp = new BigDecimal[nRowB][nColB];BigDecimal bd[] = new BigDecimal[v.length];^868^^^^^867^873^BigDecimal bd[] = new BigDecimal[v.length];^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   double[] v [VARIABLES] boolean  double[]  v  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  bd  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  short  i=0;i<bd.length;i++ )  {^869^^^^^867^873^for  ( int i=0;i<bd.length;i++ )  {^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   double[] v [VARIABLES] boolean  double[]  v  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  bd  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i=-1;i<bd.length;i++ )  {^869^^^^^867^873^for  ( int i=0;i<bd.length;i++ )  {^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   double[] v [VARIABLES] boolean  double[]  v  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  bd  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( nrowsnt i=0;i<bd.length;i++ )  {^869^^^^^867^873^for  ( int i=0;i<bd.length;i++ )  {^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   double[] v [VARIABLES] boolean  double[]  v  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  bd  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P4_Replace_Constructor]^bd[i] = bd[i] =  new BigDecimal ( b[i] )  ;^870^^^^^867^873^bd[i] = new BigDecimal ( v[i] ) ;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   double[] v [VARIABLES] boolean  double[]  v  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  bd  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^bd[i] =  new BigDecimal ( b[i] )  ;^870^^^^^867^873^bd[i] = new BigDecimal ( v[i] ) ;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   double[] v [VARIABLES] boolean  double[]  v  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  bd  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^data = new BigDecimal[nRows][1];bd[i] = new BigDecimal ( v[i] ) ;^870^^^^^867^873^bd[i] = new BigDecimal ( v[i] ) ;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   double[] v [VARIABLES] boolean  double[]  v  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  bd  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^data[i][j] = new BigDecimal ( in[i][j] ) ;bd[i] = new BigDecimal ( v[i] ) ;^870^^^^^867^873^bd[i] = new BigDecimal ( v[i] ) ;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   double[] v [VARIABLES] boolean  double[]  v  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  bd  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^bd[i] = new BigDecimal ( b[i] ) ;bd[i] = new BigDecimal ( v[i] ) ;^870^^^^^867^873^bd[i] = new BigDecimal ( v[i] ) ;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   double[] v [VARIABLES] boolean  double[]  v  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  bd  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^data = new BigDecimal[nRows][nCols];bd[i] = new BigDecimal ( v[i] ) ;^870^^^^^867^873^bd[i] = new BigDecimal ( v[i] ) ;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   double[] v [VARIABLES] boolean  double[]  v  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  bd  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  long  i=0;i<bd.length;i++ )  {^869^^^^^867^873^for  ( int i=0;i<bd.length;i++ )  {^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   double[] v [VARIABLES] boolean  double[]  v  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  bd  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i=columnDimension;i<bd.length;i++ )  {^869^^^^^867^873^for  ( int i=0;i<bd.length;i++ )  {^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   double[] v [VARIABLES] boolean  double[]  v  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  bd  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P7_Replace_Invocation]^return solve ( bd ) ;^872^^^^^867^873^return operate ( bd ) ;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   double[] v [VARIABLES] boolean  double[]  v  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  bd  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P14_Delete_Statement]^^872^^^^^867^873^return operate ( bd ) ;^[CLASS] BigMatrixImpl  [METHOD] operate [RETURN_TYPE] BigDecimal[]   double[] v [VARIABLES] boolean  double[]  v  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  bd  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P1_Replace_Type]^long  nRows = this.getRowDimension (  ) ;^883^^^^^882^897^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P7_Replace_Invocation]^int nRows = this.getColumnDimension (  ) ;^883^^^^^882^897^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = this.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^883^^^^^882^897^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCol = this.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^883^^^^^882^897^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int columnCount = this.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^883^^^^^882^897^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRows = getRowDimension (  ) ;int nRows = this.getRowDimension (  ) ;^883^^^^^882^897^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nrows = this.getRowDimension (  ) ;int nRows = this.getRowDimension (  ) ;^883^^^^^882^897^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nColB = b.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^883^^^^^882^897^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^883^^^^^882^897^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRowB = b.getRowDimension (  ) ;int nRows = this.getRowDimension (  ) ;^883^^^^^882^897^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int rowCount = this.getRowDimension (  ) ;int nRows = this.getRowDimension (  ) ;^883^^^^^882^897^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int ncols = this.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^883^^^^^882^897^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nSum = this.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^883^^^^^882^897^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = m.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^883^^^^^882^897^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P12_Insert_Condition]^if  ( b.getRowDimension (  )  != this.getRowDimension (  )  )  { int nRows = this.getRowDimension (  ) ; }^883^^^^^882^897^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P12_Insert_Condition]^if  ( v.length != this.getColumnDimension (  )  )  { int nRows = this.getRowDimension (  ) ; }^883^^^^^882^897^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P14_Delete_Statement]^^883^^^^^882^897^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^( this.getRowDimension (  )  )  ) ;int nRows = this.getRowDimension (  ) ;^883^^^^^882^897^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P2_Replace_Operator]^if  ( v.length < nRows )  {^884^^^^^882^897^if  ( v.length != nRows )  {^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( out.length != nRows )  {^884^^^^^882^897^if  ( v.length != nRows )  {^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( roundingMode != nRows )  {^884^^^^^882^897^if  ( v.length != nRows )  {^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( nRows.length != v )  {^884^^^^^882^897^if  ( v.length != nRows )  {^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( nRows != v.length )  {^884^^^^^882^897^if  ( v.length != nRows )  {^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  ( d[row].length != nCols )  {^884^^^^^882^897^if  ( v.length != nRows )  {^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  ( b.length != nRows )  {^884^^^^^882^897^if  ( v.length != nRows )  {^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("vector has wrong length");^884^885^886^^^882^897^if  ( v.length != nRows )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P16_Remove_Block]^^884^885^886^^^882^897^if  ( v.length != nRows )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( ! ( isSquare (  )  )  )  {     throw new IllegalArgumentException ( "matrix is not square" ) ; }^884^^^^^882^897^[Delete]^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( b.length )  != nRows )  {     throw new IllegalArgumentException ( "constant vector has wrong length" ) ; }^884^^^^^882^897^[Delete]^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( nRows == 0 )  {     throw new IllegalArgumentException ( "Matrix must have at least one row." ) ; }^884^^^^^882^897^[Delete]^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( subMatrix[r].length )  != nCols )  {     throw new IllegalArgumentException ( "All input rows must have the same length." ) ; }^884^^^^^882^897^[Delete]^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( b.getRowDimension (  )  )  !=  ( this.getRowDimension (  )  )  )  {     throw new IllegalArgumentException ( "Incorrect row dimension" ) ; }^884^^^^^882^897^[Delete]^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( v.length )  !=  ( this.getColumnDimension (  )  )  )  {     throw new IllegalArgumentException ( "vector has wrong length" ) ; }^884^^^^^882^897^[Delete]^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( this.getColumnDimension (  )  )  !=  ( m.getRowDimension (  )  )  )  {     throw new IllegalArgumentException ( "Matrices are not multiplication compatible." ) ; }^884^^^^^882^897^[Delete]^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( d[row].length )  != nCols )  {     throw new IllegalArgumentException ( "All input rows must have the same length." ) ; }^884^^^^^882^897^[Delete]^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( nCols == 0 )  {     throw new IllegalArgumentException ( "Matrix must have at least one column." ) ; }^884^^^^^882^897^[Delete]^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( rowDimension <= 0 )  ||  ( columnDimension <= 0 )  )  {     throw new IllegalArgumentException ( "row and column dimensions must be positive" ) ; }^884^^^^^882^897^[Delete]^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "Incorrect row dimension" )   ;^885^^^^^882^897^throw new IllegalArgumentException  (" ")  ;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( b.length )  != nRows )  {     throw new IllegalArgumentException ( "constant vector has wrong length" ) ; }^885^^^^^882^897^[Delete]^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( v.length )  != nRows )  {     throw new IllegalArgumentException ( "vector has wrong length" ) ; }^885^^^^^882^897^[Delete]^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( v.length )  !=  ( this.getColumnDimension (  )  )  )  {     throw new IllegalArgumentException ( "vector has wrong length" ) ; }^885^^^^^882^897^[Delete]^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Matrix must have at least one row." ) ;throw new IllegalArgumentException  (" ")  ;^885^^^^^882^897^throw new IllegalArgumentException  (" ")  ;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^throw new InvalidMatrixException  (" ")  ;throw new IllegalArgumentException  (" ")  ;^885^^^^^882^897^throw new IllegalArgumentException  (" ")  ;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^throw new MatrixIndexException  (" ")  ;throw new IllegalArgumentException  (" ")  ;^885^^^^^882^897^throw new IllegalArgumentException  (" ")  ;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( ! ( isSquare (  )  )  )  {     throw new IllegalArgumentException ( "matrix is not square" ) ; }^885^^^^^882^897^[Delete]^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( nRows == 0 )  {     throw new IllegalArgumentException ( "Matrix must have at least one row." ) ; }^885^^^^^882^897^[Delete]^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P1_Replace_Type]^long  nCols = this.getColumnDimension (  ) ;^887^^^^^882^897^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P7_Replace_Invocation]^int nCols = this.getRowDimension (  ) ;^887^^^^^882^897^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCol = this.getColumnDimension (  ) ;int nCols = this.getColumnDimension (  ) ;^887^^^^^882^897^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int columnCount = this.getColumnDimension (  ) ;int nCols = this.getColumnDimension (  ) ;^887^^^^^882^897^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRows = getRowDimension (  ) ;int nCols = this.getColumnDimension (  ) ;^887^^^^^882^897^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nrows = this.getRowDimension (  ) ;int nCols = this.getColumnDimension (  ) ;^887^^^^^882^897^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nColB = b.getColumnDimension (  ) ;int nCols = this.getColumnDimension (  ) ;^887^^^^^882^897^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = getColumnDimension (  ) ;int nCols = this.getColumnDimension (  ) ;^887^^^^^882^897^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRowB = b.getRowDimension (  ) ;int nCols = this.getColumnDimension (  ) ;^887^^^^^882^897^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int rowCount = this.getRowDimension (  ) ;int nCols = this.getColumnDimension (  ) ;^887^^^^^882^897^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int ncols = this.getColumnDimension (  ) ;int nCols = this.getColumnDimension (  ) ;^887^^^^^882^897^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRows = this.getRowDimension (  ) ;int nCols = this.getColumnDimension (  ) ;^887^^^^^882^897^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nSum = this.getColumnDimension (  ) ;int nCols = this.getColumnDimension (  ) ;^887^^^^^882^897^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = m.getColumnDimension (  ) ;int nCols = this.getColumnDimension (  ) ;^887^^^^^882^897^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P12_Insert_Condition]^if  ( v.length != this.getColumnDimension (  )  )  { int nCols = this.getColumnDimension (  ) ; }^887^^^^^882^897^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P14_Delete_Statement]^^887^888^^^^882^897^int nCols = this.getColumnDimension (  ) ; BigDecimal[] out = new BigDecimal[nCols];^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[] out = new BigDecimal[v.length];BigDecimal[] out = new BigDecimal[nCols];^888^^^^^882^897^BigDecimal[] out = new BigDecimal[nCols];^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal bd[] = new BigDecimal[v.length];BigDecimal[] out = new BigDecimal[nCols];^888^^^^^882^897^BigDecimal[] out = new BigDecimal[nCols];^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];BigDecimal[] out = new BigDecimal[nCols];^888^^^^^882^897^BigDecimal[] out = new BigDecimal[nCols];^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[] out = new BigDecimal[nRows];BigDecimal[] out = new BigDecimal[nCols];^888^^^^^882^897^BigDecimal[] out = new BigDecimal[nCols];^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[][] out = new BigDecimal[nRows][this.getColumnDimension (  ) ];BigDecimal[] out = new BigDecimal[nCols];^888^^^^^882^897^BigDecimal[] out = new BigDecimal[nCols];^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[][] out = new BigDecimal[1][ncols];BigDecimal[] out = new BigDecimal[nCols];^888^^^^^882^897^BigDecimal[] out = new BigDecimal[nCols];^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[] out = new BigDecimal[ncols];BigDecimal[] out = new BigDecimal[nCols];^888^^^^^882^897^BigDecimal[] out = new BigDecimal[nCols];^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[][] bp = new BigDecimal[nRowB][nColB];BigDecimal[] out = new BigDecimal[nCols];^888^^^^^882^897^BigDecimal[] out = new BigDecimal[nCols];^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[][] out = new BigDecimal[nRows][1];BigDecimal[] out = new BigDecimal[nCols];^888^^^^^882^897^BigDecimal[] out = new BigDecimal[nCols];^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal bd[] = new BigDecimal[b.length];BigDecimal[] out = new BigDecimal[nCols];^888^^^^^882^897^BigDecimal[] out = new BigDecimal[nCols];^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^double[] out = new double[ncols];BigDecimal[] out = new BigDecimal[nCols];^888^^^^^882^897^BigDecimal[] out = new BigDecimal[nCols];^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[][] outData = new BigDecimal[nRows][nCols];BigDecimal[] out = new BigDecimal[nCols];^888^^^^^882^897^BigDecimal[] out = new BigDecimal[nCols];^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^double[] out = new double[nrows];BigDecimal[] out = new BigDecimal[nCols];^888^^^^^882^897^BigDecimal[] out = new BigDecimal[nCols];^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  long  col = 0; col < nCols; col++ )  {^889^^^^^882^897^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  ( int col = 0; col <= nCols; col++ )  {^889^^^^^882^897^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int col = 5; col < nCols; col++ )  {^889^^^^^882^897^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int col = rowCount; col < nCols; col++ )  {^889^^^^^882^897^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int startRow = 0; col < nCols; col++ )  {^889^^^^^882^897^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int col = 0; col < parity; col++ )  {^889^^^^^882^897^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( scalent col = 0; col < nCols; col++ )  {^889^^^^^882^897^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( colnt i = 0; col < nCols; col++ )  {^889^^^^^882^897^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( nColsnt col = 0; col < i; col++ )  {^889^^^^^882^897^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^for  ( roundingModent col = 0; col < nCols; col++ )  {^889^^^^^882^897^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  long  i = 0; i < nRows; i++ )  {^891^^^^^882^897^for  ( int i = 0; i < nRows; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  ( int i = 0; i <= nRows; i++ )  {^891^^^^^882^897^for  ( int i = 0; i < nRows; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = -8; i < nRows; i++ )  {^891^^^^^882^897^for  ( int i = 0; i < nRows; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( nrowsnt i = 0; i < nRows; i++ )  {^891^^^^^882^897^for  ( int i = 0; i < nRows; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int i = 0; i < startRow; i++ )  {^891^^^^^882^897^for  ( int i = 0; i < nRows; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( nRowsnt i = 0; i < i; i++ )  {^891^^^^^882^897^for  ( int i = 0; i < nRows; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^sum = sum.add ( data[i][col].multiply ( out[i] )  ) ;^892^^^^^882^897^sum = sum.add ( data[i][col].multiply ( v[i] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^sum = v.add ( data[i][col].multiply ( sum[i] )  ) ;^892^^^^^882^897^sum = sum.add ( data[i][col].multiply ( v[i] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^sum = data.add ( sum[i][col].multiply ( v[i] )  ) ;^892^^^^^882^897^sum = sum.add ( data[i][col].multiply ( v[i] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P7_Replace_Invocation]^sum = sum.add ( data[i][col] .multiply ( trace )   ) ;^892^^^^^882^897^sum = sum.add ( data[i][col].multiply ( v[i] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^sum =  trace.add ( data[i][col].multiply ( v[i] )  ) ;^892^^^^^882^897^sum = sum.add ( data[i][col].multiply ( v[i] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^sum = sum.add ( data[row][col].abs (  )  ) ;sum = sum.add ( data[i][col].multiply ( v[i] )  ) ;^892^^^^^882^897^sum = sum.add ( data[i][col].multiply ( v[i] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^sum = sum.add ( data[row][i].multiply ( v[i] )  ) ;sum = sum.add ( data[i][col].multiply ( v[i] )  ) ;^892^^^^^882^897^sum = sum.add ( data[i][col].multiply ( v[i] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^sum = sum.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;sum = sum.add ( data[i][col].multiply ( v[i] )  ) ;^892^^^^^882^897^sum = sum.add ( data[i][col].multiply ( v[i] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^sum = sum.add ( data[row][i].multiply ( m.getEntry ( i, col )  )  ) ;sum = sum.add ( data[i][col].multiply ( v[i] )  ) ;^892^^^^^882^897^sum = sum.add ( data[i][col].multiply ( v[i] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^sum = sum.add ( subMatrixData[i][col].multiply ( v[i] )  ) ;^892^^^^^882^897^sum = sum.add ( data[i][col].multiply ( v[i] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^sum = sum.add ( subMatrix[i][col].multiply ( v[i] )  ) ;^892^^^^^882^897^sum = sum.add ( data[i][col].multiply ( v[i] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P14_Delete_Statement]^^892^^^^^882^897^sum = sum.add ( data[i][col].multiply ( v[i] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P7_Replace_Invocation]^sum = sum.add ( data[i][col] .multiply ( det )   ) ;^892^^^^^882^897^sum = sum.add ( data[i][col].multiply ( v[i] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^sum = sum.add ( outData[i][col].multiply ( v[i] )  ) ;^892^^^^^882^897^sum = sum.add ( data[i][col].multiply ( v[i] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^sum =  maxColSum.add ( data[i][col].multiply ( v[i] )  ) ;^892^^^^^882^897^sum = sum.add ( data[i][col].multiply ( v[i] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^out[col] = det;^894^^^^^882^897^out[col] = sum;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^out[col]  =  out[col] ;^894^^^^^882^897^out[col] = sum;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^lu[col][i] = tmp;out[col] = sum;^894^^^^^882^897^out[col] = sum;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^out[row] = sum;out[col] = sum;^894^^^^^882^897^out[col] = sum;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^outData[row][col] = sum;out[col] = sum;^894^^^^^882^897^out[col] = sum;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^lu[row][col] = sum;out[col] = sum;^894^^^^^882^897^out[col] = sum;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^BigDecimal sum = trace;^890^^^^^882^897^BigDecimal sum = ZERO;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal largest = ZERO;BigDecimal sum = ZERO;^890^^^^^882^897^BigDecimal sum = ZERO;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal maxColSum = ZERO;BigDecimal sum = ZERO;^890^^^^^882^897^BigDecimal sum = ZERO;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal tmp = ZERO;BigDecimal sum = ZERO;^890^^^^^882^897^BigDecimal sum = ZERO;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = rowDimension; i < nRows; i++ )  {^891^^^^^882^897^for  ( int i = 0; i < nRows; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^sum = det.add ( data[i][col].multiply ( v[i] )  ) ;^892^^^^^882^897^sum = sum.add ( data[i][col].multiply ( v[i] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^sum = sum.add ( v[i][col].multiply ( data[i] )  ) ;^892^^^^^882^897^sum = sum.add ( data[i][col].multiply ( v[i] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P7_Replace_Invocation]^sum = sum.add ( data[i][col] .multiply ( d )   ) ;^892^^^^^882^897^sum = sum.add ( data[i][col].multiply ( v[i] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  short  i = 0; i < nRows; i++ )  {^891^^^^^882^897^for  ( int i = 0; i < nRows; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  ( int i = 0; i > nRows; i++ )  {^891^^^^^882^897^for  ( int i = 0; i < nRows; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = columnDimension; i < nRows; i++ )  {^891^^^^^882^897^for  ( int i = 0; i < nRows; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( rownt i = 0; i < nRows; i++ )  {^891^^^^^882^897^for  ( int i = 0; i < nRows; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int i = 0; i < parity; i++ )  {^891^^^^^882^897^for  ( int i = 0; i < nRows; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P7_Replace_Invocation]^sum = sum.add ( data[i][col] .multiply ( ONE )   ) ;^892^^^^^882^897^sum = sum.add ( data[i][col].multiply ( v[i] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^sum =  null.add ( data[i][col].multiply ( v[i] )  ) ;^892^^^^^882^897^sum = sum.add ( data[i][col].multiply ( v[i] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int col = ncols; col < nCols; col++ )  {^889^^^^^882^897^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = nRows; i < nRows; i++ )  {^891^^^^^882^897^for  ( int i = 0; i < nRows; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P8_Replace_Mix]^sum = sum.add ( subMatrixData[i][col] .multiply ( maxColSum )   ) ;^892^^^^^882^897^sum = sum.add ( data[i][col].multiply ( v[i] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P5_Replace_Variable]^return v;^896^^^^^882^897^return out;^[CLASS] BigMatrixImpl  [METHOD] preMultiply [RETURN_TYPE] BigDecimal[]   BigDecimal[] v [VARIABLES] boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  
[P1_Replace_Type]^short  nRows = this.getRowDimension (  ) ;^911^^^^^910^922^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^int nRows = this.getColumnDimension (  ) ;^911^^^^^910^922^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = this.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^911^^^^^910^922^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCol = this.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^911^^^^^910^922^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int columnCount = this.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^911^^^^^910^922^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRows = getRowDimension (  ) ;int nRows = this.getRowDimension (  ) ;^911^^^^^910^922^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nrows = this.getRowDimension (  ) ;int nRows = this.getRowDimension (  ) ;^911^^^^^910^922^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nColB = b.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^911^^^^^910^922^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^911^^^^^910^922^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRowB = b.getRowDimension (  ) ;int nRows = this.getRowDimension (  ) ;^911^^^^^910^922^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int rowCount = this.getRowDimension (  ) ;int nRows = this.getRowDimension (  ) ;^911^^^^^910^922^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int ncols = this.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^911^^^^^910^922^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nSum = this.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^911^^^^^910^922^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = m.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^911^^^^^910^922^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P12_Insert_Condition]^if  ( b.getRowDimension (  )  != this.getRowDimension (  )  )  { int nRows = this.getRowDimension (  ) ; }^911^^^^^910^922^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P12_Insert_Condition]^if  ( v.length != this.getColumnDimension (  )  )  { int nRows = this.getRowDimension (  ) ; }^911^^^^^910^922^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P14_Delete_Statement]^^911^^^^^910^922^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^( this.getRowDimension (  )  )  ) ;int nRows = this.getRowDimension (  ) ;^911^^^^^910^922^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^if  ( b.length <= nRows )  {^912^^^^^910^922^if  ( b.length != nRows )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( out.length != nRows )  {^912^^^^^910^922^if  ( b.length != nRows )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( b.length != startRow )  {^912^^^^^910^922^if  ( b.length != nRows )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( parity != nRows )  {^912^^^^^910^922^if  ( b.length != nRows )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( b.length.length != nRows )  {^912^^^^^910^922^if  ( b.length != nRows )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( nRows.length != b )  {^912^^^^^910^922^if  ( b.length != nRows )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( nRows != b.length )  {^912^^^^^910^922^if  ( b.length != nRows )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^if  ( ncols != nRows )  {^912^^^^^910^922^if  ( b.length != nRows )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  ( d[row].length != nCols )  {^912^^^^^910^922^if  ( b.length != nRows )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  ( subMatrix[r].length != nCols )  {^912^^^^^910^922^if  ( b.length != nRows )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  ( v.length != nRows )  {^912^^^^^910^922^if  ( b.length != nRows )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("constant vector has wrong length");^912^913^914^^^910^922^if  ( b.length != nRows )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P16_Remove_Block]^^912^913^914^^^910^922^if  ( b.length != nRows )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( ! ( isSquare (  )  )  )  {     throw new IllegalArgumentException ( "matrix is not square" ) ; }^912^^^^^910^922^[Delete]^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( nRows == 0 )  {     throw new IllegalArgumentException ( "Matrix must have at least one row." ) ; }^912^^^^^910^922^[Delete]^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( subMatrix[r].length )  != nCols )  {     throw new IllegalArgumentException ( "All input rows must have the same length." ) ; }^912^^^^^910^922^[Delete]^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( v.length )  != nRows )  {     throw new IllegalArgumentException ( "vector has wrong length" ) ; }^912^^^^^910^922^[Delete]^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( b.getRowDimension (  )  )  !=  ( this.getRowDimension (  )  )  )  {     throw new IllegalArgumentException ( "Incorrect row dimension" ) ; }^912^^^^^910^922^[Delete]^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( v.length )  !=  ( this.getColumnDimension (  )  )  )  {     throw new IllegalArgumentException ( "vector has wrong length" ) ; }^912^^^^^910^922^[Delete]^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( this.getColumnDimension (  )  )  !=  ( m.getRowDimension (  )  )  )  {     throw new IllegalArgumentException ( "Matrices are not multiplication compatible." ) ; }^912^^^^^910^922^[Delete]^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( d[row].length )  != nCols )  {     throw new IllegalArgumentException ( "All input rows must have the same length." ) ; }^912^^^^^910^922^[Delete]^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( nCols == 0 )  {     throw new IllegalArgumentException ( "Matrix must have at least one column." ) ; }^912^^^^^910^922^[Delete]^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( rowDimension <= 0 )  ||  ( columnDimension <= 0 )  )  {     throw new IllegalArgumentException ( "row and column dimensions must be positive" ) ; }^912^^^^^910^922^[Delete]^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "vector has wrong length" )   ;^913^^^^^910^922^throw new IllegalArgumentException  (" ")  ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( b.length )  != nRows )  {     throw new IllegalArgumentException ( "constant vector has wrong length" ) ; }^913^^^^^910^922^[Delete]^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( v.length )  != nRows )  {     throw new IllegalArgumentException ( "vector has wrong length" ) ; }^913^^^^^910^922^[Delete]^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Matrix must have at least one row." ) ;throw new IllegalArgumentException  (" ")  ;^913^^^^^910^922^throw new IllegalArgumentException  (" ")  ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^throw new InvalidMatrixException  (" ")  ;throw new IllegalArgumentException  (" ")  ;^913^^^^^910^922^throw new IllegalArgumentException  (" ")  ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^throw new MatrixIndexException  (" ")  ;throw new IllegalArgumentException  (" ")  ;^913^^^^^910^922^throw new IllegalArgumentException  (" ")  ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( nRows == 0 )  {     throw new IllegalArgumentException ( "Matrix must have at least one row." ) ; }^913^^^^^910^922^[Delete]^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( nCols == 0 )  {     throw new IllegalArgumentException ( "Matrix must have at least one column." ) ; }^913^^^^^910^922^[Delete]^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P4_Replace_Constructor]^BigMatrix bMatrix = BigMatrix bMatrix =  new BigMatrixImpl ( nCols, nRows )  ;^915^^^^^910^922^BigMatrix bMatrix = new BigMatrixImpl ( b ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^BigMatrix outMatrix = new BigMatrixImpl ( b ) ;^915^^^^^910^922^BigMatrix bMatrix = new BigMatrixImpl ( b ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigMatrixImpl outMat = new BigMatrixImpl ( bp ) ;BigMatrix bMatrix = new BigMatrixImpl ( b ) ;^915^^^^^910^922^BigMatrix bMatrix = new BigMatrixImpl ( b ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigMatrixImpl out = new BigMatrixImpl ( nCols, nRows ) ;BigMatrix bMatrix = new BigMatrixImpl ( b ) ;^915^^^^^910^922^BigMatrix bMatrix = new BigMatrixImpl ( b ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigMatrix m =  ( BigMatrix )  object;BigMatrix bMatrix = new BigMatrixImpl ( b ) ;^915^^^^^910^922^BigMatrix bMatrix = new BigMatrixImpl ( b ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^BigDecimal[][] solution =  (  ( BigMatrixImpl )   ( solve ( bMatrix )  )  ) .getRow (  ) ;^916^^^^^910^922^BigDecimal[][] solution =  (  ( BigMatrixImpl )   ( solve ( bMatrix )  )  ) .getDataRef (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^BigDecimal[][] solution =  (  ( BigMatrixImpl )   ( solve ( bMatrix )  )  )  .getData (  )  ;^916^^^^^910^922^BigDecimal[][] solution =  (  ( BigMatrixImpl )   ( solve ( bMatrix )  )  ) .getDataRef (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^BigDecimal[][] solution =  (  ( BigMatrixImpl )   ( operate ( bMatrix )  )  ) .getDataRef (  ) ;^916^^^^^910^922^BigDecimal[][] solution =  (  ( BigMatrixImpl )   ( solve ( bMatrix )  )  ) .getDataRef (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[][] subMatrixData = subMatrix.getDataRef (  ) ;BigDecimal[][] solution =  (  ( BigMatrixImpl )   ( solve ( bMatrix )  )  ) .getDataRef (  ) ;^916^^^^^910^922^BigDecimal[][] solution =  (  ( BigMatrixImpl )   ( solve ( bMatrix )  )  ) .getDataRef (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P14_Delete_Statement]^^916^^^^^910^922^BigDecimal[][] solution =  (  ( BigMatrixImpl )   ( solve ( bMatrix )  )  ) .getDataRef (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[] out = new BigDecimal[v.length];BigDecimal[] out = new BigDecimal[nRows];^917^^^^^910^922^BigDecimal[] out = new BigDecimal[nRows];^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal bd[] = new BigDecimal[v.length];BigDecimal[] out = new BigDecimal[nRows];^917^^^^^910^922^BigDecimal[] out = new BigDecimal[nRows];^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];BigDecimal[] out = new BigDecimal[nRows];^917^^^^^910^922^BigDecimal[] out = new BigDecimal[nRows];^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[][] out = new BigDecimal[nRows][this.getColumnDimension (  ) ];BigDecimal[] out = new BigDecimal[nRows];^917^^^^^910^922^BigDecimal[] out = new BigDecimal[nRows];^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[][] out = new BigDecimal[1][ncols];BigDecimal[] out = new BigDecimal[nRows];^917^^^^^910^922^BigDecimal[] out = new BigDecimal[nRows];^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[] out = new BigDecimal[ncols];BigDecimal[] out = new BigDecimal[nRows];^917^^^^^910^922^BigDecimal[] out = new BigDecimal[nRows];^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[][] bp = new BigDecimal[nRowB][nColB];BigDecimal[] out = new BigDecimal[nRows];^917^^^^^910^922^BigDecimal[] out = new BigDecimal[nRows];^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[][] out = new BigDecimal[nRows][1];BigDecimal[] out = new BigDecimal[nRows];^917^^^^^910^922^BigDecimal[] out = new BigDecimal[nRows];^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal bd[] = new BigDecimal[b.length];BigDecimal[] out = new BigDecimal[nRows];^917^^^^^910^922^BigDecimal[] out = new BigDecimal[nRows];^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^double[] out = new double[ncols];BigDecimal[] out = new BigDecimal[nRows];^917^^^^^910^922^BigDecimal[] out = new BigDecimal[nRows];^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[] out = new BigDecimal[nCols];BigDecimal[] out = new BigDecimal[nRows];^917^^^^^910^922^BigDecimal[] out = new BigDecimal[nRows];^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[][] outData = new BigDecimal[nRows][nCols];BigDecimal[] out = new BigDecimal[nRows];^917^^^^^910^922^BigDecimal[] out = new BigDecimal[nRows];^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^double[] out = new double[nrows];BigDecimal[] out = new BigDecimal[nRows];^917^^^^^910^922^BigDecimal[] out = new BigDecimal[nRows];^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  short  row = 0; row < nRows; row++ )  {^918^^^^^910^922^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  ( int row = 0; row <= nRows; row++ )  {^918^^^^^910^922^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int row = scale; row < nRows; row++ )  {^918^^^^^910^922^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int row = endColumn; row < nRows; row++ )  {^918^^^^^910^922^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int nrows = 0; row < nRows; row++ )  {^918^^^^^910^922^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int row = 0; row < roundingMode; row++ )  {^918^^^^^910^922^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int nRows = 0; row < row; row++ )  {^918^^^^^910^922^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^out[row] = solution[row][-7];^919^^^^^910^922^out[row] = solution[row][0];^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^out[row] = subMatrix[row][0];^919^^^^^910^922^out[row] = solution[row][0];^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^out[row] = solution[row][2];^919^^^^^910^922^out[row] = solution[row][0];^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^out[row] = solution[row][];^919^^^^^910^922^out[row] = solution[row][0];^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^out[row] = solution[row][0L];^919^^^^^910^922^out[row] = solution[row][0];^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int row = 8; row < nRows; row++ )  {^918^^^^^910^922^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^return b;^921^^^^^910^922^return out;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   BigDecimal[] b [VARIABLES] boolean  BigMatrix  bMatrix  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  b  out  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[] out = new BigDecimal[v.length];BigDecimal bd[] = new BigDecimal[b.length];^936^^^^^935^941^BigDecimal bd[] = new BigDecimal[b.length];^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   double[] b [VARIABLES] boolean  double[]  b  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  bd  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[][] out = new BigDecimal[nRows][1];BigDecimal bd[] = new BigDecimal[b.length];^936^^^^^935^941^BigDecimal bd[] = new BigDecimal[b.length];^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   double[] b [VARIABLES] boolean  double[]  b  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  bd  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal bd[] = new BigDecimal[v.length];BigDecimal bd[] = new BigDecimal[b.length];^936^^^^^935^941^BigDecimal bd[] = new BigDecimal[b.length];^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   double[] b [VARIABLES] boolean  double[]  b  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  bd  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];BigDecimal bd[] = new BigDecimal[b.length];^936^^^^^935^941^BigDecimal bd[] = new BigDecimal[b.length];^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   double[] b [VARIABLES] boolean  double[]  b  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  bd  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[] out = new BigDecimal[nRows];BigDecimal bd[] = new BigDecimal[b.length];^936^^^^^935^941^BigDecimal bd[] = new BigDecimal[b.length];^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   double[] b [VARIABLES] boolean  double[]  b  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  bd  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[][] out = new BigDecimal[1][ncols];BigDecimal bd[] = new BigDecimal[b.length];^936^^^^^935^941^BigDecimal bd[] = new BigDecimal[b.length];^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   double[] b [VARIABLES] boolean  double[]  b  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  bd  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[] out = new BigDecimal[nCols];BigDecimal bd[] = new BigDecimal[b.length];^936^^^^^935^941^BigDecimal bd[] = new BigDecimal[b.length];^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   double[] b [VARIABLES] boolean  double[]  b  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  bd  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[][] outData = new BigDecimal[nRows][nCols];BigDecimal bd[] = new BigDecimal[b.length];^936^^^^^935^941^BigDecimal bd[] = new BigDecimal[b.length];^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   double[] b [VARIABLES] boolean  double[]  b  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  bd  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[] out = new BigDecimal[ncols];BigDecimal bd[] = new BigDecimal[b.length];^936^^^^^935^941^BigDecimal bd[] = new BigDecimal[b.length];^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   double[] b [VARIABLES] boolean  double[]  b  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  bd  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[][] bp = new BigDecimal[nRowB][nColB];BigDecimal bd[] = new BigDecimal[b.length];^936^^^^^935^941^BigDecimal bd[] = new BigDecimal[b.length];^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   double[] b [VARIABLES] boolean  double[]  b  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  bd  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  short  i=0;i<bd.length;i++ )  {^937^^^^^935^941^for  ( int i=0;i<bd.length;i++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   double[] b [VARIABLES] boolean  double[]  b  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  bd  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i=nRows;i<bd.length;i++ )  {^937^^^^^935^941^for  ( int i=0;i<bd.length;i++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   double[] b [VARIABLES] boolean  double[]  b  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  bd  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( paritynt i=0;i<bd.length;i++ )  {^937^^^^^935^941^for  ( int i=0;i<bd.length;i++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   double[] b [VARIABLES] boolean  double[]  b  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  bd  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^for  ( rnt i=0;i<bd.length;i++ )  {^937^^^^^935^941^for  ( int i=0;i<bd.length;i++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   double[] b [VARIABLES] boolean  double[]  b  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  bd  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P4_Replace_Constructor]^bd[i] = bd[i] =  new BigDecimal ( v[i] )  ;^938^^^^^935^941^bd[i] = new BigDecimal ( b[i] ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   double[] b [VARIABLES] boolean  double[]  b  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  bd  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^bd[i] =  new BigDecimal ( v[i] )  ;^938^^^^^935^941^bd[i] = new BigDecimal ( b[i] ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   double[] b [VARIABLES] boolean  double[]  b  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  bd  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^data = new BigDecimal[nRows][1];bd[i] = new BigDecimal ( b[i] ) ;^938^^^^^935^941^bd[i] = new BigDecimal ( b[i] ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   double[] b [VARIABLES] boolean  double[]  b  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  bd  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^data[i][j] = new BigDecimal ( in[i][j] ) ;bd[i] = new BigDecimal ( b[i] ) ;^938^^^^^935^941^bd[i] = new BigDecimal ( b[i] ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   double[] b [VARIABLES] boolean  double[]  b  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  bd  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^data = new BigDecimal[nRows][nCols];bd[i] = new BigDecimal ( b[i] ) ;^938^^^^^935^941^bd[i] = new BigDecimal ( b[i] ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   double[] b [VARIABLES] boolean  double[]  b  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  bd  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^bd[i] = new BigDecimal ( v[i] ) ;bd[i] = new BigDecimal ( b[i] ) ;^938^^^^^935^941^bd[i] = new BigDecimal ( b[i] ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   double[] b [VARIABLES] boolean  double[]  b  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  bd  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i=-6;i<bd.length;i++ )  {^937^^^^^935^941^for  ( int i=0;i<bd.length;i++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   double[] b [VARIABLES] boolean  double[]  b  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  bd  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^return operate ( bd ) ;^940^^^^^935^941^return solve ( bd ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   double[] b [VARIABLES] boolean  double[]  b  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  bd  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P14_Delete_Statement]^^940^^^^^935^941^return solve ( bd ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigDecimal[]   double[] b [VARIABLES] boolean  double[]  b  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  bd  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^if  ( b.getRowDimension (  )  >= this.getRowDimension (  )  )  {^955^^^^^940^970^if  ( b.getRowDimension (  )  != this.getRowDimension (  )  )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^if  ( b.multiply (  )  != this.getRowDimension (  )  )  {^955^^^^^940^970^if  ( b.getRowDimension (  )  != this.getRowDimension (  )  )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^if  ( b .getColumnDimension (  )   != this^955^^^^^940^970^if  ( b.getRowDimension (  )  != this.getRowDimension (  )  )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^if  ( b.getColumnDimension (  )  != this.getRowDimension (  )  )  {^955^^^^^940^970^if  ( b.getRowDimension (  )  != this.getRowDimension (  )  )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  ( this.getColumnDimension (  )  != m.getRowDimension (  )  )  {^955^^^^^940^970^if  ( b.getRowDimension (  )  != this.getRowDimension (  )  )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  ( m.getColumnDimension (  )  != nCols || m.getRowDimension (  )  != nRows )  {^955^^^^^940^970^if  ( b.getRowDimension (  )  != this.getRowDimension (  )  )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("Incorrect row dimension");^955^956^957^^^940^970^if  ( b.getRowDimension (  )  != this.getRowDimension (  )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P16_Remove_Block]^^955^956^957^^^940^970^if  ( b.getRowDimension (  )  != this.getRowDimension (  )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( ! ( isSquare (  )  )  )  {     throw new IllegalArgumentException ( "matrix is not square" ) ; }^955^^^^^940^970^[Delete]^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( b.length )  != nRows )  {     throw new IllegalArgumentException ( "constant vector has wrong length" ) ; }^955^^^^^940^970^[Delete]^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( v.length )  != nRows )  {     throw new IllegalArgumentException ( "vector has wrong length" ) ; }^955^^^^^940^970^[Delete]^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( v.length )  !=  ( this.getColumnDimension (  )  )  )  {     throw new IllegalArgumentException ( "vector has wrong length" ) ; }^955^^^^^940^970^[Delete]^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( this.getColumnDimension (  )  )  !=  ( m.getRowDimension (  )  )  )  {     throw new IllegalArgumentException ( "Matrices are not multiplication compatible." ) ; }^955^^^^^940^970^[Delete]^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  (  ( this.getColumnDimension (  )  )  !=  ( m.getColumnDimension (  )  )  )  ||  (  ( this.getRowDimension (  )  )  !=  ( m.getRowDimension (  )  )  )  )  {     throw new IllegalArgumentException ( "matrix dimension mismatch" ) ; }^955^^^^^940^970^[Delete]^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( rowDimension <= 0 )  ||  ( columnDimension <= 0 )  )  {     throw new IllegalArgumentException ( "row and column dimensions must be positive" ) ; }^955^^^^^940^970^[Delete]^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "matrix dimension mismatch" )   ;^956^^^^^941^971^throw new IllegalArgumentException  (" ")  ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Matrix must have at least one row." ) ;throw new IllegalArgumentException  (" ")  ;^956^^^^^941^971^throw new IllegalArgumentException  (" ")  ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^throw new InvalidMatrixException  (" ")  ;throw new IllegalArgumentException  (" ")  ;^956^^^^^941^971^throw new IllegalArgumentException  (" ")  ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^throw new MatrixIndexException  (" ")  ;throw new IllegalArgumentException  (" ")  ;^956^^^^^941^971^throw new IllegalArgumentException  (" ")  ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( ! ( isSquare (  )  )  )  {     throw new IllegalArgumentException ( "matrix is not square" ) ; }^956^^^^^941^971^[Delete]^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( nRows == 0 )  {     throw new IllegalArgumentException ( "Matrix must have at least one row." ) ; }^956^^^^^941^971^[Delete]^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( v.length )  != nRows )  {     throw new IllegalArgumentException ( "vector has wrong length" ) ; }^956^^^^^941^971^[Delete]^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( b.getRowDimension (  )  )  !=  ( this.getRowDimension (  )  )  )  {     throw new IllegalArgumentException ( "Incorrect row dimension" ) ; }^956^^^^^941^971^[Delete]^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^if  ( !this.isSingular (  )  )  {^958^^^^^943^973^if  ( !this.isSquare (  )  )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  ( this.isSingular (  )  )  {^958^^^^^943^973^if  ( !this.isSquare (  )  )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  ( isSingular (  )  )  {^958^^^^^943^973^if  ( !this.isSquare (  )  )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  ( !isSquare (  )  )  {^958^^^^^943^973^if  ( !this.isSquare (  )  )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P15_Unwrap_Block]^throw new org.apache.commons.math.linear.InvalidMatrixException("coefficient matrix is not square");^958^959^960^^^943^973^if  ( !this.isSquare (  )  )  { throw new InvalidMatrixException  (" ")  ; }^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P16_Remove_Block]^^958^959^960^^^943^973^if  ( !this.isSquare (  )  )  { throw new InvalidMatrixException  (" ")  ; }^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( ! ( isSquare (  )  )  )  {     throw new IllegalArgumentException ( "matrix is not square" ) ; }^958^^^^^943^973^[Delete]^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( ! ( isSquare (  )  )  )  {     throw new InvalidMatrixException ( "matrix is not square" ) ; }^958^^^^^943^973^[Delete]^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( ! ( isValidCoordinate ( 0, column )  )  )  {     throw new MatrixIndexException ( "illegal column argument" ) ; }^958^^^^^943^973^[Delete]^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( ! ( isValidCoordinate ( row, column )  )  )  {     throw new MatrixIndexException ( "matrix entry does not exist" ) ; }^958^^^^^943^973^[Delete]^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( ! ( isValidCoordinate ( row, 0 )  )  )  {     throw new MatrixIndexException ( "illegal row argument" ) ; }^958^^^^^943^973^[Delete]^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P13_Insert_Block]^if  (  ( row < 0 )  ||  ( column < 0 )  )  {     throw new MatrixIndexException ( "invalid row or column index selection" ) ; }^958^^^^^943^973^[Delete]^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( ! ( isValidCoordinate ( 0, col )  )  )  {     throw new MatrixIndexException ( "illegal column argument" ) ; }^958^^^^^943^973^[Delete]^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( this.isSingular (  )  )  {     throw new InvalidMatrixException ( "Matrix is singular." ) ; }^958^^^^^943^973^[Delete]^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( nRows != nCols )  {     throw new InvalidMatrixException ( "LU decomposition requires that the matrix be square." ) ; }^958^^^^^943^973^[Delete]^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P4_Replace_Constructor]^throw throw  new InvalidMatrixException ( "matrix is not square" )   ;^959^^^^^944^974^throw new InvalidMatrixException  (" ")  ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( ! ( this.isSquare (  )  )  )  {     throw new InvalidMatrixException ( "coefficient matrix is not square" ) ; }^959^^^^^944^974^[Delete]^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( ! ( isSquare (  )  )  )  {     throw new InvalidMatrixException ( "matrix is not square" ) ; }^959^^^^^944^974^[Delete]^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( this.isSingular (  )  )  {     throw new InvalidMatrixException ( "Matrix is singular." ) ; }^959^^^^^944^974^[Delete]^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( nRows != nCols )  {     throw new InvalidMatrixException ( "LU decomposition requires that the matrix be square." ) ; }^959^^^^^944^974^[Delete]^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^if  ( this.isSquare (  )  )  {^961^^^^^946^976^if  ( this.isSingular (  )  )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  ( isSingular (  )  )  {^961^^^^^946^976^if  ( this.isSingular (  )  )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  ( !isSquare (  )  )  {^961^^^^^946^976^if  ( this.isSingular (  )  )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  ( !this.isSquare (  )  )  {^961^^^^^946^976^if  ( this.isSingular (  )  )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P15_Unwrap_Block]^throw new org.apache.commons.math.linear.InvalidMatrixException("Matrix is singular.");^961^962^963^^^946^976^if  ( this.isSingular (  )  )  { throw new InvalidMatrixException  (" ")  ; }^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P16_Remove_Block]^^961^962^963^^^946^976^if  ( this.isSingular (  )  )  { throw new InvalidMatrixException  (" ")  ; }^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P4_Replace_Constructor]^throw throw  new InvalidMatrixException ( "matrix is not square" )   ;^962^^^^^947^977^throw new InvalidMatrixException  (" ")  ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( ! ( this.isSquare (  )  )  )  {     throw new InvalidMatrixException ( "coefficient matrix is not square" ) ; }^962^^^^^947^977^[Delete]^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( ! ( isSquare (  )  )  )  {     throw new InvalidMatrixException ( "matrix is not square" ) ; }^962^^^^^947^977^[Delete]^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( this.isSingular (  )  )  {     throw new InvalidMatrixException ( "Matrix is singular." ) ; }^962^^^^^947^977^[Delete]^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( nRows != nCols )  {     throw new InvalidMatrixException ( "LU decomposition requires that the matrix be square." ) ; }^962^^^^^947^977^[Delete]^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^throw new IllegalArgumentException  (" ")  ; ;^962^^^^^947^977^throw new InvalidMatrixException  (" ")  ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P1_Replace_Type]^long  nCol = this.getColumnDimension (  ) ;^965^^^^^950^980^int nCol = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^int nCol = this.getRowDimension (  ) ;^965^^^^^950^980^int nCol = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = this.getColumnDimension (  ) ;int nCol = this.getColumnDimension (  ) ;^965^^^^^950^980^int nCol = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int columnCount = this.getColumnDimension (  ) ;int nCol = this.getColumnDimension (  ) ;^965^^^^^950^980^int nCol = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRows = getRowDimension (  ) ;int nCol = this.getColumnDimension (  ) ;^965^^^^^950^980^int nCol = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nrows = this.getRowDimension (  ) ;int nCol = this.getColumnDimension (  ) ;^965^^^^^950^980^int nCol = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nColB = b.getColumnDimension (  ) ;int nCol = this.getColumnDimension (  ) ;^965^^^^^950^980^int nCol = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = getColumnDimension (  ) ;int nCol = this.getColumnDimension (  ) ;^965^^^^^950^980^int nCol = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRowB = b.getRowDimension (  ) ;int nCol = this.getColumnDimension (  ) ;^965^^^^^950^980^int nCol = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int rowCount = this.getRowDimension (  ) ;int nCol = this.getColumnDimension (  ) ;^965^^^^^950^980^int nCol = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int ncols = this.getColumnDimension (  ) ;int nCol = this.getColumnDimension (  ) ;^965^^^^^950^980^int nCol = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRows = this.getRowDimension (  ) ;int nCol = this.getColumnDimension (  ) ;^965^^^^^950^980^int nCol = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nSum = this.getColumnDimension (  ) ;int nCol = this.getColumnDimension (  ) ;^965^^^^^950^980^int nCol = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = m.getColumnDimension (  ) ;int nCol = this.getColumnDimension (  ) ;^965^^^^^950^980^int nCol = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P14_Delete_Statement]^^965^^^^^950^980^int nCol = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P1_Replace_Type]^long  nColB = b.getColumnDimension (  ) ;^966^^^^^951^981^int nColB = b.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^int nColB = b.multiply (  ) ;^966^^^^^951^981^int nColB = b.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = this.getColumnDimension (  ) ;int nColB = b.getColumnDimension (  ) ;^966^^^^^951^981^int nColB = b.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCol = this.getColumnDimension (  ) ;int nColB = b.getColumnDimension (  ) ;^966^^^^^951^981^int nColB = b.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int columnCount = this.getColumnDimension (  ) ;int nColB = b.getColumnDimension (  ) ;^966^^^^^951^981^int nColB = b.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRows = getRowDimension (  ) ;int nColB = b.getColumnDimension (  ) ;^966^^^^^951^981^int nColB = b.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nrows = this.getRowDimension (  ) ;int nColB = b.getColumnDimension (  ) ;^966^^^^^951^981^int nColB = b.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = getColumnDimension (  ) ;int nColB = b.getColumnDimension (  ) ;^966^^^^^951^981^int nColB = b.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRowB = b.getRowDimension (  ) ;int nColB = b.getColumnDimension (  ) ;^966^^^^^951^981^int nColB = b.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int rowCount = this.getRowDimension (  ) ;int nColB = b.getColumnDimension (  ) ;^966^^^^^951^981^int nColB = b.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int ncols = this.getColumnDimension (  ) ;int nColB = b.getColumnDimension (  ) ;^966^^^^^951^981^int nColB = b.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRows = this.getRowDimension (  ) ;int nColB = b.getColumnDimension (  ) ;^966^^^^^951^981^int nColB = b.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nSum = this.getColumnDimension (  ) ;int nColB = b.getColumnDimension (  ) ;^966^^^^^951^981^int nColB = b.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = m.getColumnDimension (  ) ;int nColB = b.getColumnDimension (  ) ;^966^^^^^951^981^int nColB = b.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P12_Insert_Condition]^if  ( v.length != this.getColumnDimension (  )  )  { int nColB = b.getColumnDimension (  ) ; }^966^^^^^951^981^int nColB = b.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P14_Delete_Statement]^^966^967^^^^951^981^int nColB = b.getColumnDimension (  ) ; int nRowB = b.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P1_Replace_Type]^short  nRowB = b.getRowDimension (  ) ;^967^^^^^952^982^int nRowB = b.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^int nRowB = b.multiply (  ) ;^967^^^^^952^982^int nRowB = b.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^int nRowB = b .getColumnDimension (  )  ;^967^^^^^952^982^int nRowB = b.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = this.getColumnDimension (  ) ;int nRowB = b.getRowDimension (  ) ;^967^^^^^952^982^int nRowB = b.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCol = this.getColumnDimension (  ) ;int nRowB = b.getRowDimension (  ) ;^967^^^^^952^982^int nRowB = b.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int columnCount = this.getColumnDimension (  ) ;int nRowB = b.getRowDimension (  ) ;^967^^^^^952^982^int nRowB = b.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRows = getRowDimension (  ) ;int nRowB = b.getRowDimension (  ) ;^967^^^^^952^982^int nRowB = b.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nrows = this.getRowDimension (  ) ;int nRowB = b.getRowDimension (  ) ;^967^^^^^952^982^int nRowB = b.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nColB = b.getColumnDimension (  ) ;int nRowB = b.getRowDimension (  ) ;^967^^^^^952^982^int nRowB = b.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = getColumnDimension (  ) ;int nRowB = b.getRowDimension (  ) ;^967^^^^^952^982^int nRowB = b.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int rowCount = this.getRowDimension (  ) ;int nRowB = b.getRowDimension (  ) ;^967^^^^^952^982^int nRowB = b.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int ncols = this.getColumnDimension (  ) ;int nRowB = b.getRowDimension (  ) ;^967^^^^^952^982^int nRowB = b.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRows = this.getRowDimension (  ) ;int nRowB = b.getRowDimension (  ) ;^967^^^^^952^982^int nRowB = b.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nSum = this.getColumnDimension (  ) ;int nRowB = b.getRowDimension (  ) ;^967^^^^^952^982^int nRowB = b.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = m.getColumnDimension (  ) ;int nRowB = b.getRowDimension (  ) ;^967^^^^^952^982^int nRowB = b.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P14_Delete_Statement]^^967^^^^^952^982^int nRowB = b.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[] out = new BigDecimal[v.length];BigDecimal[][] bp = new BigDecimal[nRowB][nColB];^970^^^^^955^985^BigDecimal[][] bp = new BigDecimal[nRowB][nColB];^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[][] out = new BigDecimal[nRows][1];BigDecimal[][] bp = new BigDecimal[nRowB][nColB];^970^^^^^955^985^BigDecimal[][] bp = new BigDecimal[nRowB][nColB];^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal bd[] = new BigDecimal[v.length];BigDecimal[][] bp = new BigDecimal[nRowB][nColB];^970^^^^^955^985^BigDecimal[][] bp = new BigDecimal[nRowB][nColB];^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal bd[] = new BigDecimal[b.length];BigDecimal[][] bp = new BigDecimal[nRowB][nColB];^970^^^^^955^985^BigDecimal[][] bp = new BigDecimal[nRowB][nColB];^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];BigDecimal[][] bp = new BigDecimal[nRowB][nColB];^970^^^^^955^985^BigDecimal[][] bp = new BigDecimal[nRowB][nColB];^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[] out = new BigDecimal[nRows];BigDecimal[][] bp = new BigDecimal[nRowB][nColB];^970^^^^^955^985^BigDecimal[][] bp = new BigDecimal[nRowB][nColB];^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[][] out = new BigDecimal[nRows][this.getColumnDimension (  ) ];BigDecimal[][] bp = new BigDecimal[nRowB][nColB];^970^^^^^955^985^BigDecimal[][] bp = new BigDecimal[nRowB][nColB];^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[][] out = new BigDecimal[1][ncols];BigDecimal[][] bp = new BigDecimal[nRowB][nColB];^970^^^^^955^985^BigDecimal[][] bp = new BigDecimal[nRowB][nColB];^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[] out = new BigDecimal[nCols];BigDecimal[][] bp = new BigDecimal[nRowB][nColB];^970^^^^^955^985^BigDecimal[][] bp = new BigDecimal[nRowB][nColB];^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^double d[][] = new double[nRows][nCols];BigDecimal[][] bp = new BigDecimal[nRowB][nColB];^970^^^^^955^985^BigDecimal[][] bp = new BigDecimal[nRowB][nColB];^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[][] outData = new BigDecimal[nRows][nCols];BigDecimal[][] bp = new BigDecimal[nRowB][nColB];^970^^^^^955^985^BigDecimal[][] bp = new BigDecimal[nRowB][nColB];^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[] out = new BigDecimal[ncols];BigDecimal[][] bp = new BigDecimal[nRowB][nColB];^970^^^^^955^985^BigDecimal[][] bp = new BigDecimal[nRowB][nColB];^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  short  row = 0; row < nRowB; row++ )  {^971^^^^^956^986^for  ( int row = 0; row < nRowB; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  ( int row = 0; row > nRowB; row++ )  {^971^^^^^956^986^for  ( int row = 0; row < nRowB; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  ( int row = 0; row <= nRowB; row++ )  {^971^^^^^956^986^for  ( int row = 0; row < nRowB; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int row = 6; row < nRowB; row++ )  {^971^^^^^956^986^for  ( int row = 0; row < nRowB; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int row = ; row < nRowB; row++ )  {^971^^^^^956^986^for  ( int row = 0; row < nRowB; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int roundingMode = 0; row < nRowB; row++ )  {^971^^^^^956^986^for  ( int row = 0; row < nRowB; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^for  ( int nRows = 0; row < nRowB; row++ )  {^971^^^^^956^986^for  ( int row = 0; row < nRowB; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  long  col = 0; col < nColB; col++ )  {^972^^^^^957^987^for  ( int col = 0; col < nColB; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  ( int col = 0; col <= nColB; col++ )  {^972^^^^^957^987^for  ( int col = 0; col < nColB; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int col = 8; col < nColB; col++ )  {^972^^^^^957^987^for  ( int col = 0; col < nColB; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int ncols = 0; col < nColB; col++ )  {^972^^^^^957^987^for  ( int col = 0; col < nColB; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int col = 0; col < r; col++ )  {^972^^^^^957^987^for  ( int col = 0; col < nColB; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int nColB = 0; col < col; col++ )  {^972^^^^^957^987^for  ( int col = 0; col < nColB; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^for  ( int col = 0; col < parity; col++ )  {^972^^^^^957^987^for  ( int col = 0; col < nColB; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^bp[row][col] = b.getEntry ( permutation[row], nSum ) ;^973^^^^^958^988^bp[row][col] = b.getEntry ( permutation[row], col ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^bp[row][col] = b.getEntry ( permutation[row] ) ;^973^^^^^958^988^bp[row][col] = b.getEntry ( permutation[row], col ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^bp[row][col] = permutation.getEntry ( b[row], col ) ;^973^^^^^958^988^bp[row][col] = b.getEntry ( permutation[row], col ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^bp[row][col]  = null ;^973^^^^^958^988^bp[row][col] = b.getEntry ( permutation[row], col ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^bp[row][col] = b.getEntry ( permutation[row], nrows ) ;^973^^^^^958^988^bp[row][col] = b.getEntry ( permutation[row], col ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^bp[row][col] = col.getEntry ( permutation[row], b ) ;^973^^^^^958^988^bp[row][col] = b.getEntry ( permutation[row], col ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^bp[row][col] = b.getEntry ( selectedRows[row], col ) ;^973^^^^^958^988^bp[row][col] = b.getEntry ( permutation[row], col ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P14_Delete_Statement]^^973^^^^^958^988^bp[row][col] = b.getEntry ( permutation[row], col ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^bp[row][col] = b.getEntry ( col[row], permutation ) ;^973^^^^^958^988^bp[row][col] = b.getEntry ( permutation[row], col ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^bp[row][col] = b .getRowDimension (  )  ;^973^^^^^958^988^bp[row][col] = b.getEntry ( permutation[row], col ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^bp[row][col] ;^973^^^^^958^988^bp[row][col] = b.getEntry ( permutation[row], col ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int col = r; col < nColB; col++ )  {^972^^^^^957^987^for  ( int col = 0; col < nColB; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^bp[row][col] = b.getEntry ( permutation[row], ncols ) ;^973^^^^^958^988^bp[row][col] = b.getEntry ( permutation[row], col ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  short  col = 0; col < nColB; col++ )  {^972^^^^^957^987^for  ( int col = 0; col < nColB; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  ( int col = 0; col == nColB; col++ )  {^972^^^^^957^987^for  ( int col = 0; col < nColB; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int col = 9; col < nColB; col++ )  {^972^^^^^957^987^for  ( int col = 0; col < nColB; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int nSum = 0; col < nColB; col++ )  {^972^^^^^957^987^for  ( int col = 0; col < nColB; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int col = 0; col < rowCount; col++ )  {^972^^^^^957^987^for  ( int col = 0; col < nColB; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int row = -2; row < nRowB; row++ )  {^971^^^^^956^986^for  ( int row = 0; row < nRowB; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int col = i; col < nColB; col++ )  {^972^^^^^957^987^for  ( int col = 0; col < nColB; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^bp[row][col] = b.getEntry ( permutation[row], r ) ;^973^^^^^958^988^bp[row][col] = b.getEntry ( permutation[row], col ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  short  col = 0; col < nCol; col++ )  {^978^^^^^963^993^for  ( int col = 0; col < nCol; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  ( int col = 0; col <= nCol; col++ )  {^978^^^^^963^993^for  ( int col = 0; col < nCol; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  <  ( int col = 0; col < nCol; col++ )  {^978^^^^^963^993^for  ( int col = 0; col < nCol; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int col = -7; col < nCol; col++ )  {^978^^^^^963^993^for  ( int col = 0; col < nCol; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int nSum = 0; col < nCol; col++ )  {^978^^^^^963^993^for  ( int col = 0; col < nCol; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int col = 0; col < row; col++ )  {^978^^^^^963^993^for  ( int col = 0; col < nCol; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( paritynt col = 0; col < nCol; col++ )  {^978^^^^^963^993^for  ( int col = 0; col < nCol; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int nCol = 0; col < col; col++ )  {^978^^^^^963^993^for  ( int col = 0; col < nCol; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( nColnt col = 0; col < i; col++ )  {^978^^^^^963^993^for  ( int col = 0; col < nCol; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^for  ( int nrows = 0; col < nCol; col++ )  {^978^^^^^963^993^for  ( int col = 0; col < nCol; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  short  i = col + 1; i < nCol; i++ )  {^979^^^^^964^994^for  ( int i = col + 1; i < nCol; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  ||  ( int i = col + 1; i < nCol; i++ )  {^979^^^^^964^994^for  ( int i = col + 1; i < nCol; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  ( int i = col + 1; i > nCol; i++ )  {^979^^^^^964^994^for  ( int i = col + 1; i < nCol; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  ( int i = col + 1; i <= nCol; i++ )  {^979^^^^^964^994^for  ( int i = col + 1; i < nCol; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = col + nSum; i < nCol; i++ )  {^979^^^^^964^994^for  ( int i = col + 1; i < nCol; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int i = roundingMode + 1; i < nCol; i++ )  {^979^^^^^964^994^for  ( int i = col + 1; i < nCol; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( ncolsnt i = col + 1; i < nCol; i++ )  {^979^^^^^964^994^for  ( int i = col + 1; i < nCol; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int i = col + 1; i < nrows; i++ )  {^979^^^^^964^994^for  ( int i = col + 1; i < nCol; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^for  ( int i = r + 1; i < nCol; i++ )  {^979^^^^^964^994^for  ( int i = col + 1; i < nCol; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  short  j = 0; j < nColB; j++ )  {^980^^^^^965^995^for  ( int j = 0; j < nColB; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  ( int j = 0; j <= nColB; j++ )  {^980^^^^^965^995^for  ( int j = 0; j < nColB; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int parity = 0; j < nColB; j++ )  {^980^^^^^965^995^for  ( int j = 0; j < nColB; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int j = 0; j < roundingMode; j++ )  {^980^^^^^965^995^for  ( int j = 0; j < nColB; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( rnt j = 0; j < nColB; j++ )  {^980^^^^^965^995^for  ( int j = 0; j < nColB; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( jnt i = 0; j < nColB; j++ )  {^980^^^^^965^995^for  ( int j = 0; j < nColB; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^for  ( int j = 0; j < r; j++ )  {^980^^^^^965^995^for  ( int j = 0; j < nColB; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^bp[i][j] = subMatrixData[i][j].subtract ( bp[col][j].multiply ( lu[i][col] )  ) ;^981^^^^^966^996^bp[i][j] = bp[i][j].subtract ( bp[col][j].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^bp[i][j] = bp[i][j].subtract ( bp[col][j].multiply ( subMatrixData[i][col] )  ) ;^981^^^^^966^996^bp[i][j] = bp[i][j].subtract ( bp[col][j].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^bp[i][j] = lu[i][j].subtract ( bp[col][j].multiply ( bp[i][col] )  ) ;^981^^^^^966^996^bp[i][j] = bp[i][j].subtract ( bp[col][j].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^bp[i][j] = bp[i][j] .subtract ( b )  ;^981^^^^^966^996^bp[i][j] = bp[i][j].subtract ( bp[col][j].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^bp[i][j]  =  bp[i][j] ;^981^^^^^966^996^bp[i][j] = bp[i][j].subtract ( bp[col][j].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^sum = sum.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;bp[i][j] = bp[i][j].subtract ( bp[col][j].multiply ( lu[i][col] )  ) ;^981^^^^^966^996^bp[i][j] = bp[i][j].subtract ( bp[col][j].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^bp[i][j] = bp[i][j].subtract ( bp[col][j] .multiply ( TOO_SMALL )   ) ;^981^^^^^966^996^bp[i][j] = bp[i][j].subtract ( bp[col][j].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^bp[i][j] = subMatrix[i][j].subtract ( bp[col][j].multiply ( lu[i][col] )  ) ;^981^^^^^966^996^bp[i][j] = bp[i][j].subtract ( bp[col][j].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P14_Delete_Statement]^^981^^^^^966^996^bp[i][j] = bp[i][j].subtract ( bp[col][j].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^bp[i][j] = bp[i][j].subtract ( bp[col][j].multiply ( subMatrix[i][col] )  ) ;^981^^^^^966^996^bp[i][j] = bp[i][j].subtract ( bp[col][j].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^bp[i][j] ;^981^^^^^966^996^bp[i][j] = bp[i][j].subtract ( bp[col][j].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int j = nrows; j < nColB; j++ )  {^980^^^^^965^995^for  ( int j = 0; j < nColB; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^bp[i][j] = bp[i][j].subtract ( bp[col][j].multiply ( solution[i][col] )  ) ;^981^^^^^966^996^bp[i][j] = bp[i][j].subtract ( bp[col][j].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^bp[i][j] = solution[i][j].subtract ( bp[col][j].multiply ( lu[i][col] )  ) ;^981^^^^^966^996^bp[i][j] = bp[i][j].subtract ( bp[col][j].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  long  j = 0; j < nColB; j++ )  {^980^^^^^965^995^for  ( int j = 0; j < nColB; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  ( int j = 0; j == nColB; j++ )  {^980^^^^^965^995^for  ( int j = 0; j < nColB; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int j = ; j < nColB; j++ )  {^980^^^^^965^995^for  ( int j = 0; j < nColB; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int nSum = 0; j < nColB; j++ )  {^980^^^^^965^995^for  ( int j = 0; j < nColB; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int j = 0; j < parity; j++ )  {^980^^^^^965^995^for  ( int j = 0; j < nColB; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( ncolsnt j = 0; j < nColB; j++ )  {^980^^^^^965^995^for  ( int j = 0; j < nColB; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( nColBnt j = 0; j < i; j++ )  {^980^^^^^965^995^for  ( int j = 0; j < nColB; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^for  ( roundingModent j = 0; j < nColB; j++ )  {^980^^^^^965^995^for  ( int j = 0; j < nColB; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^bp[i][j]  = null ;^981^^^^^966^996^bp[i][j] = bp[i][j].subtract ( bp[col][j].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^bp[i][j] = bp[i][j].subtract ( bp[col][j] .multiply ( ZERO )   ) ;^981^^^^^966^996^bp[i][j] = bp[i][j].subtract ( bp[col][j].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  >=  ( int i = col + 1; i < nCol; i++ )  {^979^^^^^964^994^for  ( int i = col + 1; i < nCol; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = col ; i < nCol; i++ )  {^979^^^^^964^994^for  ( int i = col + 1; i < nCol; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int i = nrows + 1; i < nCol; i++ )  {^979^^^^^964^994^for  ( int i = col + 1; i < nCol; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^for  ( int i = ncols + 1; i < nCol; i++ )  {^979^^^^^964^994^for  ( int i = col + 1; i < nCol; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int j = startRow; j < nColB; j++ )  {^980^^^^^965^995^for  ( int j = 0; j < nColB; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^bp[i][j] = bp[i][j].subtract ( bp[col][j].multiply ( outData[i][col] )  ) ;^981^^^^^966^996^bp[i][j] = bp[i][j].subtract ( bp[col][j].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  long  i = col + 1; i < nCol; i++ )  {^979^^^^^964^994^for  ( int i = col + 1; i < nCol; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  ^  ( int i = col + 1; i < nCol; i++ )  {^979^^^^^964^994^for  ( int i = col + 1; i < nCol; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = col + column; i < nCol; i++ )  {^979^^^^^964^994^for  ( int i = col + 1; i < nCol; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( rowCountnt i = col + 1; i < nCol; i++ )  {^979^^^^^964^994^for  ( int i = col + 1; i < nCol; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int i = col + 1; i < startRow; i++ )  {^979^^^^^964^994^for  ( int i = col + 1; i < nCol; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( nColnt i = col + 1; i < i; i++ )  {^979^^^^^964^994^for  ( int i = col + 1; i < nCol; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int j = endRow; j < nColB; j++ )  {^980^^^^^965^995^for  ( int j = 0; j < nColB; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int r = 0; j < nColB; j++ )  {^980^^^^^965^995^for  ( int j = 0; j < nColB; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int j = 0; j < nrows; j++ )  {^980^^^^^965^995^for  ( int j = 0; j < nColB; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^bp[i][j] = bp[i][j].subtract ( bp[col][j] .multiply ( d )   ) ;^981^^^^^966^996^bp[i][j] = bp[i][j].subtract ( bp[col][j].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int j = 3; j < nColB; j++ )  {^980^^^^^965^995^for  ( int j = 0; j < nColB; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^bp[i][j] = bp[i][j].subtract ( bp[col][j] .multiply ( det )   ) ;^981^^^^^966^996^bp[i][j] = bp[i][j].subtract ( bp[col][j].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int j = -8; j < nColB; j++ )  {^980^^^^^965^995^for  ( int j = 0; j < nColB; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int j = 0; j < ncols; j++ )  {^980^^^^^965^995^for  ( int j = 0; j < nColB; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( rowDimensionnt j = 0; j < nColB; j++ )  {^980^^^^^965^995^for  ( int j = 0; j < nColB; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int nColB = 0; j < j; j++ )  {^980^^^^^965^995^for  ( int j = 0; j < nColB; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^for  ( int roundingMode = 0; j < nColB; j++ )  {^980^^^^^965^995^for  ( int j = 0; j < nColB; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int col = -2; col < nCol; col++ )  {^978^^^^^963^993^for  ( int col = 0; col < nCol; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  &  ( int i = col + 1; i < nCol; i++ )  {^979^^^^^964^994^for  ( int i = col + 1; i < nCol; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = col + j; i < nCol; i++ )  {^979^^^^^964^994^for  ( int i = col + 1; i < nCol; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int j = -3; j < nColB; j++ )  {^980^^^^^965^995^for  ( int j = 0; j < nColB; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^bp[i][j] = outData[i][j].subtract ( bp[col][j].multiply ( lu[i][col] )  ) ;^981^^^^^966^996^bp[i][j] = bp[i][j].subtract ( bp[col][j].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^bp[i][j] = solution[i][j].subtract ( bp[col][j] .multiply ( ONE )   ) ;^981^^^^^966^996^bp[i][j] = bp[i][j].subtract ( bp[col][j].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  long  col = nCol - 1; col >= 0; col-- )  {^987^^^^^972^1002^for  ( int col = nCol - 1; col >= 0; col-- )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  ( int col = nCol  !=  1; col >= 0; col-- )  {^987^^^^^972^1002^for  ( int col = nCol - 1; col >= 0; col-- )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  ( int col = nCol - 1; col > 0; col-- )  {^987^^^^^972^1002^for  ( int col = nCol - 1; col >= 0; col-- )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int col = nCol - columnDimension; col >= 0; col-- )  {^987^^^^^972^1002^for  ( int col = nCol - 1; col >= 0; col-- )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int col = nCol - 1; col >= -2; col-- )  {^987^^^^^972^1002^for  ( int col = nCol - 1; col >= 0; col-- )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int col = nCol - 1; col >= 2; col-- )  {^987^^^^^972^1002^for  ( int col = nCol - 1; col >= 0; col-- )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int col = nrows - 1; col >= 0; col-- )  {^987^^^^^972^1002^for  ( int col = nCol - 1; col >= 0; col-- )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int nSum = nCol - 1; col >= 0; col-- )  {^987^^^^^972^1002^for  ( int col = nCol - 1; col >= 0; col-- )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( roundingModent col = nCol - 1; col >= 0; col-- )  {^987^^^^^972^1002^for  ( int col = nCol - 1; col >= 0; col-- )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int nCol = col - 1; col >= 0; col-- )  {^987^^^^^972^1002^for  ( int col = nCol - 1; col >= 0; col-- )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^for  ( rnt col = nCol - 1; col >= 0; col-- )  {^987^^^^^972^1002^for  ( int col = nCol - 1; col >= 0; col-- )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  short  j = 0; j < nColB; j++ )  {^988^^^^^973^1003^for  ( int j = 0; j < nColB; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  ( int j = 0; j <= nColB; j++ )  {^988^^^^^973^1003^for  ( int j = 0; j < nColB; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int j = 6; j < nColB; j++ )  {^988^^^^^973^1003^for  ( int j = 0; j < nColB; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int j = 0; j < nrows; j++ )  {^988^^^^^973^1003^for  ( int j = 0; j < nColB; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^for  ( int ncols = 0; j < nColB; j++ )  {^988^^^^^973^1003^for  ( int j = 0; j < nColB; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^bp[col][j] = subMatrixData[col][j].divide ( lu[col][col], scale, roundingMode ) ;^989^^^^^974^1004^bp[col][j] = bp[col][j].divide ( lu[col][col], scale, roundingMode ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^bp[col][j] = bp[col][j].divide ( outData[col][col], scale, roundingMode ) ;^989^^^^^974^1004^bp[col][j] = bp[col][j].divide ( lu[col][col], scale, roundingMode ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^bp[col][j] = bp[col][j].divide ( lu[col][col], parity, roundingMode ) ;^989^^^^^974^1004^bp[col][j] = bp[col][j].divide ( lu[col][col], scale, roundingMode ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^bp[col][j] = bp[col][j].divide ( lu[col][col], scale, nSum ) ;^989^^^^^974^1004^bp[col][j] = bp[col][j].divide ( lu[col][col], scale, roundingMode ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^bp[col][j] = bp[col][j].divide ( lu[col][col],  roundingMode ) ;^989^^^^^974^1004^bp[col][j] = bp[col][j].divide ( lu[col][col], scale, roundingMode ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^bp[col][j] = bp[col][j].divide ( lu[col][col], scale ) ;^989^^^^^974^1004^bp[col][j] = bp[col][j].divide ( lu[col][col], scale, roundingMode ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^bp[col][j] = lu[col][j].divide ( bp[col][col], scale, roundingMode ) ;^989^^^^^974^1004^bp[col][j] = bp[col][j].divide ( lu[col][col], scale, roundingMode ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^bp[col][j] = bp[col][j].divide ( lu[col][col], roundingMode, scale ) ;^989^^^^^974^1004^bp[col][j] = bp[col][j].divide ( lu[col][col], scale, roundingMode ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^bp[col][j] = bp[col][j] .doubleValue (  )  ;^989^^^^^974^1004^bp[col][j] = bp[col][j].divide ( lu[col][col], scale, roundingMode ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^bp[col][j] ;^989^^^^^974^1004^bp[col][j] = bp[col][j].divide ( lu[col][col], scale, roundingMode ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^lu[row][col] = lu[row][col].divide ( lu[col][col], scale, roundingMode ) ;bp[col][j] = bp[col][j].divide ( lu[col][col], scale, roundingMode ) ;^989^^^^^974^1004^bp[col][j] = bp[col][j].divide ( lu[col][col], scale, roundingMode ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^bp[col][j] = bp[col][j].divide ( lu[col][col], roundingMode, roundingMode ) ;^989^^^^^974^1004^bp[col][j] = bp[col][j].divide ( lu[col][col], scale, roundingMode ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P14_Delete_Statement]^^989^^^^^974^1004^bp[col][j] = bp[col][j].divide ( lu[col][col], scale, roundingMode ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  short  i = 0; i < col; i++ )  {^991^^^^^976^1006^for  ( int i = 0; i < col; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  ( int i = 0; i <= col; i++ )  {^991^^^^^976^1006^for  ( int i = 0; i < col; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  ( int i = 0; i == col; i++ )  {^991^^^^^976^1006^for  ( int i = 0; i < col; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = -3; i < col; i++ )  {^991^^^^^976^1006^for  ( int i = 0; i < col; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = 4; i < col; i++ )  {^991^^^^^976^1006^for  ( int i = 0; i < col; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( nSumnt i = 0; i < col; i++ )  {^991^^^^^976^1006^for  ( int i = 0; i < col; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int i = 0; i < ncols; i++ )  {^991^^^^^976^1006^for  ( int i = 0; i < col; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^for  ( paritynt i = 0; i < col; i++ )  {^991^^^^^976^1006^for  ( int i = 0; i < col; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  long  j = 0; j < nColB; j++ )  {^992^^^^^977^1007^for  ( int j = 0; j < nColB; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  ( int j = 0; j <= nColB; j++ )  {^992^^^^^977^1007^for  ( int j = 0; j < nColB; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int j = nSum; j < nColB; j++ )  {^992^^^^^977^1007^for  ( int j = 0; j < nColB; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int nSum = 0; j < nColB; j++ )  {^992^^^^^977^1007^for  ( int j = 0; j < nColB; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int j = 0; j < r; j++ )  {^992^^^^^977^1007^for  ( int j = 0; j < nColB; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( ncolsnt j = 0; j < nColB; j++ )  {^992^^^^^977^1007^for  ( int j = 0; j < nColB; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( jnt i = 0; j < nColB; j++ )  {^992^^^^^977^1007^for  ( int j = 0; j < nColB; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( nColBnt j = 0; j < i; j++ )  {^992^^^^^977^1007^for  ( int j = 0; j < nColB; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^for  ( nrowsnt j = 0; j < nColB; j++ )  {^992^^^^^977^1007^for  ( int j = 0; j < nColB; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^bp[i][j] = subMatrixData[i][j].subtract ( bp[col][j].multiply ( lu[i][col] )  ) ;^993^^^^^978^1008^bp[i][j] = bp[i][j].subtract ( bp[col][j].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^bp[i][j] = bp[i][j].subtract ( bp[col][j].multiply ( outData[i][col] )  ) ;^993^^^^^978^1008^bp[i][j] = bp[i][j].subtract ( bp[col][j].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^bp[i][j] = bp[i][j] .subtract ( b )  ;^993^^^^^978^1008^bp[i][j] = bp[i][j].subtract ( bp[col][j].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^bp[i][j]  = null ;^993^^^^^978^1008^bp[i][j] = bp[i][j].subtract ( bp[col][j].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^sum = sum.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;bp[i][j] = bp[i][j].subtract ( bp[col][j].multiply ( lu[i][col] )  ) ;^993^^^^^978^1008^bp[i][j] = bp[i][j].subtract ( bp[col][j].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^bp[i][j] = bp[i][j].subtract ( bp[col][j].multiply ( subMatrix[i][col] )  ) ;^993^^^^^978^1008^bp[i][j] = bp[i][j].subtract ( bp[col][j].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^bp[i][j] = lu[i][j].subtract ( bp[col][j].multiply ( bp[i][col] )  ) ;^993^^^^^978^1008^bp[i][j] = bp[i][j].subtract ( bp[col][j].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^bp[i][j] = solution[i][j].subtract ( bp[col][j].multiply ( lu[i][col] )  ) ;^993^^^^^978^1008^bp[i][j] = bp[i][j].subtract ( bp[col][j].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P14_Delete_Statement]^^993^^^^^978^1008^bp[i][j] = bp[i][j].subtract ( bp[col][j].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^bp[i][j] = bp[i][j].subtract ( bp[col][j] .multiply ( det )   ) ;^993^^^^^978^1008^bp[i][j] = bp[i][j].subtract ( bp[col][j].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^bp[i][j] = bp[i][j].subtract ( bp[col][j].multiply ( solution[i][col] )  ) ;^993^^^^^978^1008^bp[i][j] = bp[i][j].subtract ( bp[col][j].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^bp[i][j] = outData[i][j].subtract ( bp[col][j].multiply ( lu[i][col] )  ) ;^993^^^^^978^1008^bp[i][j] = bp[i][j].subtract ( bp[col][j].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^bp[i][j] = bp[i][j].subtract ( bp[col][j].multiply ( subMatrixData[i][col] )  ) ;^993^^^^^978^1008^bp[i][j] = bp[i][j].subtract ( bp[col][j].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^bp[i][j] = bp[i][j].subtract ( bp[col][j] .multiply ( TOO_SMALL )   ) ;^993^^^^^978^1008^bp[i][j] = bp[i][j].subtract ( bp[col][j].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int j = 1; j < nColB; j++ )  {^992^^^^^977^1007^for  ( int j = 0; j < nColB; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^bp[i][j] = bp[i][j].subtract ( bp[col][j] .multiply ( trace )   ) ;^993^^^^^978^1008^bp[i][j] = bp[i][j].subtract ( bp[col][j].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  short  j = 0; j < nColB; j++ )  {^992^^^^^977^1007^for  ( int j = 0; j < nColB; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int j = rowCount; j < nColB; j++ )  {^992^^^^^977^1007^for  ( int j = 0; j < nColB; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int row = 0; j < nColB; j++ )  {^992^^^^^977^1007^for  ( int j = 0; j < nColB; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int j = 0; j < nrows; j++ )  {^992^^^^^977^1007^for  ( int j = 0; j < nColB; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( rownt j = 0; j < nColB; j++ )  {^992^^^^^977^1007^for  ( int j = 0; j < nColB; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^for  ( int r = 0; j < nColB; j++ )  {^992^^^^^977^1007^for  ( int j = 0; j < nColB; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^bp[i][j]  =  bp[i][j] ;^993^^^^^978^1008^bp[i][j] = bp[i][j].subtract ( bp[col][j].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^bp[i][j] = bp[i][j].subtract ( bp[col][j] .multiply ( ZERO )   ) ;^993^^^^^978^1008^bp[i][j] = bp[i][j].subtract ( bp[col][j].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^bp[i][j] = subMatrixData[i][j].subtract ( bp[col][j] .multiply ( maxColSum )   ) ;^993^^^^^978^1008^bp[i][j] = bp[i][j].subtract ( bp[col][j].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^bp[col][j] = bp[col][j].divide ( solution[col][col], scale, roundingMode ) ;^989^^^^^974^1004^bp[col][j] = bp[col][j].divide ( lu[col][col], scale, roundingMode ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^bp[col][j] = bp[col][j].divide ( lu[col][col], rowCount, roundingMode ) ;^989^^^^^974^1004^bp[col][j] = bp[col][j].divide ( lu[col][col], scale, roundingMode ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^bp[col][j] = bp[col][j].divide ( lu[col][col], scale, nRows ) ;^989^^^^^974^1004^bp[col][j] = bp[col][j].divide ( lu[col][col], scale, roundingMode ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int j = -2; j < nColB; j++ )  {^988^^^^^973^1003^for  ( int j = 0; j < nColB; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  long  i = 0; i < col; i++ )  {^991^^^^^976^1006^for  ( int i = 0; i < col; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = -6; i < col; i++ )  {^991^^^^^976^1006^for  ( int i = 0; i < col; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^bp[col][j] = subMatrix[col][j].divide ( lu[col][col], scale, roundingMode ) ;^989^^^^^974^1004^bp[col][j] = bp[col][j].divide ( lu[col][col], scale, roundingMode ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^bp[col][j] = bp[col][j].divide ( lu[col][col], nSum, roundingMode ) ;^989^^^^^974^1004^bp[col][j] = bp[col][j].divide ( lu[col][col], scale, roundingMode ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^bp[col][j] = solution[col][j].divide ( lu[col][col], scale, roundingMode ) ;^989^^^^^974^1004^bp[col][j] = bp[col][j].divide ( lu[col][col], scale, roundingMode ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^bp[i][j] = bp[i][j].subtract ( bp[col][j] .multiply ( maxColSum )   ) ;^993^^^^^978^1008^bp[i][j] = bp[i][j].subtract ( bp[col][j].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int j = rowCount; j < nColB; j++ )  {^988^^^^^973^1003^for  ( int j = 0; j < nColB; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int j = 0; j < parity; j++ )  {^988^^^^^973^1003^for  ( int j = 0; j < nColB; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^for  ( int j = 0; j < roundingMode; j++ )  {^988^^^^^973^1003^for  ( int j = 0; j < nColB; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^bp[col][j] = bp[col][j].divide ( subMatrix[col][col], scale, roundingMode ) ;^989^^^^^974^1004^bp[col][j] = bp[col][j].divide ( lu[col][col], scale, roundingMode ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^bp[col][j] = roundingMode[col][j].divide ( lu[col][col], scale, bp ) ;^989^^^^^974^1004^bp[col][j] = bp[col][j].divide ( lu[col][col], scale, roundingMode ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^bp[col][j]  =  bp[col][j] ;^989^^^^^974^1004^bp[col][j] = bp[col][j].divide ( lu[col][col], scale, roundingMode ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^bp[col][j] = bp[col][j].divide ( lu[col][col], ncols, roundingMode ) ;^989^^^^^974^1004^bp[col][j] = bp[col][j].divide ( lu[col][col], scale, roundingMode ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^bp[col][j] = bp[col][j].divide ( lu[col][col], scale, parity ) ;^989^^^^^974^1004^bp[col][j] = bp[col][j].divide ( lu[col][col], scale, roundingMode ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = nSum; i < col; i++ )  {^991^^^^^976^1006^for  ( int i = 0; i < col; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( nrowsnt i = 0; i < col; i++ )  {^991^^^^^976^1006^for  ( int i = 0; i < col; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  ( int j = 0; j > nColB; j++ )  {^992^^^^^977^1007^for  ( int j = 0; j < nColB; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int j = 8; j < nColB; j++ )  {^992^^^^^977^1007^for  ( int j = 0; j < nColB; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int nrows = 0; j < nColB; j++ )  {^992^^^^^977^1007^for  ( int j = 0; j < nColB; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int j = 0; j < ncols; j++ )  {^992^^^^^977^1007^for  ( int j = 0; j < nColB; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^for  ( int ncols = 0; j < nColB; j++ )  {^992^^^^^977^1007^for  ( int j = 0; j < nColB; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^bp[i][j] = bp[i][j].subtract ( bp[col][j] .multiply ( d )   ) ;^993^^^^^978^1008^bp[i][j] = bp[i][j].subtract ( bp[col][j].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^bp[i][j] ;^993^^^^^978^1008^bp[i][j] = bp[i][j].subtract ( bp[col][j].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^bp[i][j] = bp[i][j].subtract ( bp[col][j] .multiply ( sum )   ) ;^993^^^^^978^1008^bp[i][j] = bp[i][j].subtract ( bp[col][j].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^bp[i][j] = subMatrix[i][j].subtract ( bp[col][j].multiply ( lu[i][col] )  ) ;^993^^^^^978^1008^bp[i][j] = bp[i][j].subtract ( bp[col][j].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int j = 7; j < nColB; j++ )  {^992^^^^^977^1007^for  ( int j = 0; j < nColB; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int j = 0; j < row; j++ )  {^992^^^^^977^1007^for  ( int j = 0; j < nColB; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^for  ( roundingModent j = 0; j < nColB; j++ )  {^992^^^^^977^1007^for  ( int j = 0; j < nColB; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^bp[col][j] = bp[col][j].divide ( subMatrixData[col][col], scale, roundingMode ) ;^989^^^^^974^1004^bp[col][j] = bp[col][j].divide ( lu[col][col], scale, roundingMode ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^bp[col][j] = bp[col][j].divide ( scale[col][col], lu, roundingMode ) ;^989^^^^^974^1004^bp[col][j] = bp[col][j].divide ( lu[col][col], scale, roundingMode ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  short  col = nCol - 1; col >= 0; col-- )  {^987^^^^^972^1002^for  ( int col = nCol - 1; col >= 0; col-- )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  ( int col = nCol  >=  1; col >= 0; col-- )  {^987^^^^^972^1002^for  ( int col = nCol - 1; col >= 0; col-- )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int col = nCol - nSum; col >= 0; col-- )  {^987^^^^^972^1002^for  ( int col = nCol - 1; col >= 0; col-- )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int j = -6; j < nColB; j++ )  {^988^^^^^973^1003^for  ( int j = 0; j < nColB; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = -7; i < col; i++ )  {^991^^^^^976^1006^for  ( int i = 0; i < col; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int j = endRow; j < nColB; j++ )  {^992^^^^^977^1007^for  ( int j = 0; j < nColB; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^bp[col][j] = outData[col][j].divide ( lu[col][col], scale, roundingMode ) ;^989^^^^^974^1004^bp[col][j] = bp[col][j].divide ( lu[col][col], scale, roundingMode ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^bp[i][j] = bp[i][j].subtract ( bp[col][j] .multiply ( ONE )   ) ;^993^^^^^978^1008^bp[i][j] = bp[i][j].subtract ( bp[col][j].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P4_Replace_Constructor]^BigMatrixImpl outMat = new BigMatrixImpl ( nCols, nRows )  ;^998^^^^^983^1013^BigMatrixImpl outMat = new BigMatrixImpl ( bp ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^BigMatrixImpl outMat = new BigMatrixImpl ( subMatrixData ) ;^998^^^^^983^1013^BigMatrixImpl outMat = new BigMatrixImpl ( bp ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^BigMatrixImpl outMat = new BigMatrixImpl ( subMatrix ) ;^998^^^^^983^1013^BigMatrixImpl outMat = new BigMatrixImpl ( bp ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigMatrixImpl out = new BigMatrixImpl ( nCols, nRows ) ;BigMatrixImpl outMat = new BigMatrixImpl ( bp ) ;^998^^^^^983^1013^BigMatrixImpl outMat = new BigMatrixImpl ( bp ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigMatrix bMatrix = new BigMatrixImpl ( b ) ;BigMatrixImpl outMat = new BigMatrixImpl ( bp ) ;^998^^^^^983^1013^BigMatrixImpl outMat = new BigMatrixImpl ( bp ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigMatrix m =  ( BigMatrix )  object;BigMatrixImpl outMat = new BigMatrixImpl ( bp ) ;^998^^^^^983^1013^BigMatrixImpl outMat = new BigMatrixImpl ( bp ) ;^[CLASS] BigMatrixImpl  [METHOD] solve [RETURN_TYPE] BigMatrix   BigMatrix b [VARIABLES] boolean  BigMatrix  b  BigMatrixImpl  outMat  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P1_Replace_Type]^short  nRows = this.getRowDimension (  ) ;^1022^^^^^1007^1037^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^int nRows = this.getColumnDimension (  ) ;^1022^^^^^1007^1037^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = this.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^1022^^^^^1007^1037^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCol = this.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^1022^^^^^1007^1037^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int columnCount = this.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^1022^^^^^1007^1037^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRows = getRowDimension (  ) ;int nRows = this.getRowDimension (  ) ;^1022^^^^^1007^1037^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nrows = this.getRowDimension (  ) ;int nRows = this.getRowDimension (  ) ;^1022^^^^^1007^1037^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nColB = b.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^1022^^^^^1007^1037^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^1022^^^^^1007^1037^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRowB = b.getRowDimension (  ) ;int nRows = this.getRowDimension (  ) ;^1022^^^^^1007^1037^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int rowCount = this.getRowDimension (  ) ;int nRows = this.getRowDimension (  ) ;^1022^^^^^1007^1037^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int ncols = this.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^1022^^^^^1007^1037^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nSum = this.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^1022^^^^^1007^1037^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = m.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^1022^^^^^1007^1037^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P14_Delete_Statement]^^1022^^^^^1007^1037^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^( this.getRowDimension (  )  )  ) ;int nRows = this.getRowDimension (  ) ;^1022^^^^^1007^1037^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P1_Replace_Type]^short  nCols = this.getColumnDimension (  ) ;^1023^^^^^1008^1038^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^int nCols = this.getRowDimension (  ) ;^1023^^^^^1008^1038^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCol = this.getColumnDimension (  ) ;int nCols = this.getColumnDimension (  ) ;^1023^^^^^1008^1038^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int columnCount = this.getColumnDimension (  ) ;int nCols = this.getColumnDimension (  ) ;^1023^^^^^1008^1038^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRows = getRowDimension (  ) ;int nCols = this.getColumnDimension (  ) ;^1023^^^^^1008^1038^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nrows = this.getRowDimension (  ) ;int nCols = this.getColumnDimension (  ) ;^1023^^^^^1008^1038^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nColB = b.getColumnDimension (  ) ;int nCols = this.getColumnDimension (  ) ;^1023^^^^^1008^1038^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = getColumnDimension (  ) ;int nCols = this.getColumnDimension (  ) ;^1023^^^^^1008^1038^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRowB = b.getRowDimension (  ) ;int nCols = this.getColumnDimension (  ) ;^1023^^^^^1008^1038^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int rowCount = this.getRowDimension (  ) ;int nCols = this.getColumnDimension (  ) ;^1023^^^^^1008^1038^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int ncols = this.getColumnDimension (  ) ;int nCols = this.getColumnDimension (  ) ;^1023^^^^^1008^1038^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRows = this.getRowDimension (  ) ;int nCols = this.getColumnDimension (  ) ;^1023^^^^^1008^1038^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nSum = this.getColumnDimension (  ) ;int nCols = this.getColumnDimension (  ) ;^1023^^^^^1008^1038^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = m.getColumnDimension (  ) ;int nCols = this.getColumnDimension (  ) ;^1023^^^^^1008^1038^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P12_Insert_Condition]^if  ( v.length != this.getColumnDimension (  )  )  { int nCols = this.getColumnDimension (  ) ; }^1023^^^^^1008^1038^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P14_Delete_Statement]^^1023^^^^^1008^1038^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^if  ( nRows <= nCols )  {^1024^^^^^1009^1039^if  ( nRows != nCols )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( temp != nCols )  {^1024^^^^^1009^1039^if  ( nRows != nCols )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( nRows != ncols )  {^1024^^^^^1009^1039^if  ( nRows != nCols )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( nCols != nRows )  {^1024^^^^^1009^1039^if  ( nRows != nCols )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^if  ( nrows != nCols )  {^1024^^^^^1009^1039^if  ( nRows != nCols )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  ( nRows == 0 )  {^1024^^^^^1009^1039^if  ( nRows != nCols )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  ( d[row].length != nCols )  {^1024^^^^^1009^1039^if  ( nRows != nCols )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  ( data != null )  {^1024^^^^^1009^1039^if  ( nRows != nCols )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  ( max != col )  {^1024^^^^^1009^1039^if  ( nRows != nCols )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  ( nCols == 0 )  {^1024^^^^^1009^1039^if  ( nRows != nCols )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P15_Unwrap_Block]^throw new org.apache.commons.math.linear.InvalidMatrixException("LU decomposition requires that the matrix be square.");^1024^1025^1026^^^1009^1039^if  ( nRows != nCols )  { throw new InvalidMatrixException  (" ")  ; }^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P16_Remove_Block]^^1024^1025^1026^^^1009^1039^if  ( nRows != nCols )  { throw new InvalidMatrixException  (" ")  ; }^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( nRows != nCols )  {     throw new InvalidMatrixException ( "LU decomposition requires that the matrix be square." ) ; }^1025^^^^^1010^1040^[Delete]^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^lu = this.getDataRef (  ) ;^1027^^^^^1012^1042^lu = this.getData (  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^lu ;^1027^^^^^1012^1042^lu = this.getData (  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P14_Delete_Statement]^^1027^^^^^1012^1042^lu = this.getData (  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^permutation =  new int[null];^1030^^^^^1015^1045^permutation = new int[nRows];^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^permutation[row] = row;permutation = new int[nRows];^1030^^^^^1015^1045^permutation = new int[nRows];^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^permutation[max] = permutation[col];permutation = new int[nRows];^1030^^^^^1015^1045^permutation = new int[nRows];^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  short  row = 0; row < nRows; row++ )  {^1031^^^^^1016^1046^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  ( int row = 0; row <= nRows; row++ )  {^1031^^^^^1016^1046^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int row = nColB; row < nRows; row++ )  {^1031^^^^^1016^1046^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int row = 0; row < ncols; row++ )  {^1031^^^^^1016^1046^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int nRows = 0; row < row; row++ )  {^1031^^^^^1016^1046^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^for  ( int row = 0; row < r; row++ )  {^1031^^^^^1016^1046^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^permutation[row] = nRows;^1032^^^^^1017^1047^permutation[row] = row;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^permutation[row]  = null ;^1032^^^^^1017^1047^permutation[row] = row;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^permutation[col] = temp;permutation[row] = row;^1032^^^^^1017^1047^permutation[row] = row;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^permutation[max] = permutation[col];permutation[row] = row;^1032^^^^^1017^1047^permutation[row] = row;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^permutation = new int[nRows];permutation[row] = row;^1032^^^^^1017^1047^permutation[row] = row;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^permutation[row]  =  permutation[row] ;^1032^^^^^1017^1047^permutation[row] = row;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int row = -9; row < nRows; row++ )  {^1031^^^^^1016^1046^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^parity = nSum;^1034^^^^^1019^1049^parity = 1;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^parity = 1 - 1;^1034^^^^^1019^1049^parity = 1;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^parity = -parity;parity = 1;^1034^^^^^1019^1049^parity = 1;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^if  ( sum.abs (  ) .compareTo ( largest )  >= 1 )  {^1061^^^^^1046^1076^if  ( sum.abs (  ) .compareTo ( largest )  == 1 )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^if  ( sum.abs (  ) .compareTo ( largest )  == 6 )  {^1061^^^^^1046^1076^if  ( sum.abs (  ) .compareTo ( largest )  == 1 )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( trace.abs (  ) .compareTo ( largest )  == 1 )  {^1061^^^^^1046^1076^if  ( sum.abs (  ) .compareTo ( largest )  == 1 )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( sum.abs (  ) .compareTo ( trace )  == 1 )  {^1061^^^^^1046^1076^if  ( sum.abs (  ) .compareTo ( largest )  == 1 )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( largest.abs (  ) .compareTo ( sum )  == 1 )  {^1061^^^^^1046^1076^if  ( sum.abs (  ) .compareTo ( largest )  == 1 )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^if  ( sum.BigDecimal (  ) .compareTo ( largest )  == 1 )  {^1061^^^^^1046^1076^if  ( sum.abs (  ) .compareTo ( largest )  == 1 )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^if  ( sum.abs (  ) .compareTo ( maxColSum )  == 0 )  {^1061^^^^^1046^1076^if  ( sum.abs (  ) .compareTo ( largest )  == 1 )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  ( lu[max][col].abs (  ) .compareTo ( TOO_SMALL )  <= 0 )  {^1061^^^^^1046^1076^if  ( sum.abs (  ) .compareTo ( largest )  == 1 )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P15_Unwrap_Block]^largest = sum.abs(); max = row;^1061^1062^1063^1064^^1046^1076^if  ( sum.abs (  ) .compareTo ( largest )  == 1 )  { largest = sum.abs (  ) ; max = row; }^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P16_Remove_Block]^^1061^1062^1063^1064^^1046^1076^if  ( sum.abs (  ) .compareTo ( largest )  == 1 )  { largest = sum.abs (  ) ; max = row; }^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^largest = largest.abs (  ) ;^1062^^^^^1047^1077^largest = sum.abs (  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^largest = sum.BigDecimal (  ) ;^1062^^^^^1047^1077^largest = sum.abs (  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^largest =  tmp.abs (  ) ;^1062^^^^^1047^1077^largest = sum.abs (  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^max = nRows;^1063^^^^^1048^1078^max = row;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^max =  temp;^1063^^^^^1048^1078^max = row;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^largest = trace.abs (  ) ;^1062^^^^^1047^1077^largest = sum.abs (  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^largest = maxColSum.abs (  ) ;^1062^^^^^1047^1077^largest = sum.abs (  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P14_Delete_Statement]^^1062^^^^^1047^1077^largest = sum.abs (  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^if  ( lu[max][col].abs (  ) .compareTo ( TOO_SMALL )  < 0 )  {^1068^^^^^1053^1083^if  ( lu[max][col].abs (  ) .compareTo ( TOO_SMALL )  <= 0 )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^if  ( lu[max][col].abs (  ) .compareTo ( TOO_SMALL )  <= column )  {^1068^^^^^1053^1083^if  ( lu[max][col].abs (  ) .compareTo ( TOO_SMALL )  <= 0 )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( subMatrixData[max][col].abs (  ) .compareTo ( TOO_SMALL )  <= 0 )  {^1068^^^^^1053^1083^if  ( lu[max][col].abs (  ) .compareTo ( TOO_SMALL )  <= 0 )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^if  ( lu[max][col] .add ( null )  .compareTo ( TOO_SMALL )  <= 0 )  {^1068^^^^^1053^1083^if  ( lu[max][col].abs (  ) .compareTo ( TOO_SMALL )  <= 0 )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^if  ( lu[max][col].abs (  ) .compareTo ( TOO_SMALL )  <= 0 + 4 )  {^1068^^^^^1053^1083^if  ( lu[max][col].abs (  ) .compareTo ( TOO_SMALL )  <= 0 )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  ( sum.abs (  ) .compareTo ( largest )  == 1 )  {^1068^^^^^1053^1083^if  ( lu[max][col].abs (  ) .compareTo ( TOO_SMALL )  <= 0 )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P15_Unwrap_Block]^lu = null; throw new org.apache.commons.math.linear.InvalidMatrixException("matrix is singular");^1068^1069^1070^1071^^1053^1083^if  ( lu[max][col].abs (  ) .compareTo ( TOO_SMALL )  <= 0 )  { lu = null; throw new InvalidMatrixException  (" ")  ; }^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P16_Remove_Block]^^1068^1069^1070^1071^^1053^1083^if  ( lu[max][col].abs (  ) .compareTo ( TOO_SMALL )  <= 0 )  { lu = null; throw new InvalidMatrixException  (" ")  ; }^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( this.isSingular (  )  )  {     throw new InvalidMatrixException ( "Matrix is singular." ) ; }^1068^^^^^1053^1083^[Delete]^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^lu = true;^1069^^^^^1054^1084^lu = null;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P4_Replace_Constructor]^throw throw  new InvalidMatrixException ( "matrix is not square" )   ;^1070^^^^^1055^1085^throw new InvalidMatrixException  (" ")  ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^if  ( max == col )  {^1074^^^^^1059^1089^if  ( max != col )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( nrows != col )  {^1074^^^^^1059^1089^if  ( max != col )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( max != nSum )  {^1074^^^^^1059^1089^if  ( max != col )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( col != max )  {^1074^^^^^1059^1089^if  ( max != col )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P6_Replace_Expression]^if  ( i < nCols )  {^1074^^^^^1059^1089^if  ( max != col )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  ( nRows != nCols )  {^1074^^^^^1059^1089^if  ( max != col )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  ( lu == null )  {^1074^^^^^1059^1089^if  ( max != col )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  ( data != null )  {^1074^^^^^1059^1089^if  ( max != col )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  ( data == null )  {^1074^^^^^1059^1089^if  ( max != col )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  long  i = 0; i < nCols; i++ )  {^1076^^^^^1061^1091^for  ( int i = 0; i < nCols; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  ( int i = 0; i == nCols; i++ )  {^1076^^^^^1061^1091^for  ( int i = 0; i < nCols; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = -4; i < nCols; i++ )  {^1076^^^^^1061^1091^for  ( int i = 0; i < nCols; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int i = 0; i < roundingMode; i++ )  {^1076^^^^^1061^1091^for  ( int i = 0; i < nCols; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^for  ( int i = 0; i < ncols; i++ )  {^1076^^^^^1061^1091^for  ( int i = 0; i < nCols; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^tmp = subMatrixData[max][i];^1077^^^^^1062^1092^tmp = lu[max][i];^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^tmp =  lu[ncols][i];^1077^^^^^1062^1092^tmp = lu[max][i];^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^sum = lu[row][col];tmp = lu[max][i];^1077^^^^^1062^1092^tmp = lu[max][i];^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^lu[max][i] = subMatrixData[col][i];^1078^^^^^1063^1093^lu[max][i] = lu[col][i];^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^lu[max][i] ;^1078^^^^^1063^1093^lu[max][i] = lu[col][i];^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^lu[col][i] = trace;^1079^^^^^1064^1094^lu[col][i] = tmp;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^lu[col][i]  =  lu[col][i] ;^1079^^^^^1064^1094^lu[col][i] = tmp;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^out[col] = sum;lu[col][i] = tmp;^1079^^^^^1064^1094^lu[col][i] = tmp;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^lu[row][col] = sum;lu[col][i] = tmp;^1079^^^^^1064^1094^lu[col][i] = tmp;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^tmp =  lu[null][i];^1077^^^^^1062^1092^tmp = lu[max][i];^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^lu[max][i]  = null ;^1078^^^^^1063^1093^lu[max][i] = lu[col][i];^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^permutation[max] = selectedRows[col];^1082^^^^^1067^1097^permutation[max] = permutation[col];^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^permutation[max]  =  permutation[max] ;^1082^^^^^1067^1097^permutation[max] = permutation[col];^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^permutation[col] = temp;permutation[max] = permutation[col];^1082^^^^^1067^1097^permutation[max] = permutation[col];^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^permutation[row] = row;permutation[max] = permutation[col];^1082^^^^^1067^1097^permutation[max] = permutation[col];^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^permutation = new int[nRows];permutation[max] = permutation[col];^1082^^^^^1067^1097^permutation[max] = permutation[col];^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^permutation[col] = nrows;^1083^^^^^1068^1098^permutation[col] = temp;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^permutation[col]  =  permutation[col] ;^1083^^^^^1068^1098^permutation[col] = temp;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^permutation[row] = row;permutation[col] = temp;^1083^^^^^1068^1098^permutation[col] = temp;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^permutation[max] = permutation[col];permutation[col] = temp;^1083^^^^^1068^1098^permutation[col] = temp;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^r = -parity;^1084^^^^^1069^1099^parity = -parity;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^parity  =  parity ;^1084^^^^^1069^1099^parity = -parity;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^parity = 1;parity = -parity;^1084^^^^^1069^1099^parity = -parity;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^BigDecimal tmp = trace;^1075^^^^^1060^1090^BigDecimal tmp = ZERO;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^BigDecimal tmp = maxColSum;^1075^^^^^1060^1090^BigDecimal tmp = ZERO;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal sum = ZERO;BigDecimal tmp = ZERO;^1075^^^^^1060^1090^BigDecimal tmp = ZERO;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal trace = data[0][0];BigDecimal tmp = ZERO;^1075^^^^^1060^1090^BigDecimal tmp = ZERO;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal largest = ZERO;BigDecimal tmp = ZERO;^1075^^^^^1060^1090^BigDecimal tmp = ZERO;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal maxColSum = ZERO;BigDecimal tmp = ZERO;^1075^^^^^1060^1090^BigDecimal tmp = ZERO;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  short  i = 0; i < nCols; i++ )  {^1076^^^^^1061^1091^for  ( int i = 0; i < nCols; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = max; i < nCols; i++ )  {^1076^^^^^1061^1091^for  ( int i = 0; i < nCols; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P1_Replace_Type]^short  temp = permutation[max];^1081^^^^^1066^1096^int temp = permutation[max];^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^int temp = selectedRows[max];^1081^^^^^1066^1096^int temp = permutation[max];^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  short  col = 0; col < nCols; col++ )  {^1037^^^^^1022^1052^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  ( int col = 0; col == nCols; col++ )  {^1037^^^^^1022^1052^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  ( int col = 0; col <= nCols; col++ )  {^1037^^^^^1022^1052^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  <<  ( int col = 0; col < nCols; col++ )  {^1037^^^^^1022^1052^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int col = -8; col < nCols; col++ )  {^1037^^^^^1022^1052^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int col = ; col < nCols; col++ )  {^1037^^^^^1022^1052^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int col = 2; col < nCols; col++ )  {^1037^^^^^1022^1052^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int col = -7; col < nCols; col++ )  {^1037^^^^^1022^1052^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int col = -6; col < nCols; col++ )  {^1037^^^^^1022^1052^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int nrows = 0; col < nCols; col++ )  {^1037^^^^^1022^1052^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int col = 0; col < r; col++ )  {^1037^^^^^1022^1052^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( ncolsnt col = 0; col < nCols; col++ )  {^1037^^^^^1022^1052^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( colnt i = 0; col < nCols; col++ )  {^1037^^^^^1022^1052^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^for  ( int col = 0; col < row; col++ )  {^1037^^^^^1022^1052^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^if  ( sum.abs (  ) .compareTo ( largest )  != 1 )  {^1061^^^^^1046^1076^if  ( sum.abs (  ) .compareTo ( largest )  == 1 )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^if  ( sum.abs (  ) .compareTo ( largest )  == scale )  {^1061^^^^^1046^1076^if  ( sum.abs (  ) .compareTo ( largest )  == 1 )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( maxColSum.abs (  ) .compareTo ( largest )  == 1 )  {^1061^^^^^1046^1076^if  ( sum.abs (  ) .compareTo ( largest )  == 1 )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^if  ( maxColSum.abs (  ) .compareTo ( largest )  == 1 + 3 )  {^1061^^^^^1046^1076^if  ( sum.abs (  ) .compareTo ( largest )  == 1 )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^max = parity;^1063^^^^^1048^1078^max = row;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^max =  r;^1063^^^^^1048^1078^max = row;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P14_Delete_Statement]^^1062^1063^^^^1047^1077^largest = sum.abs (  ) ; max = row;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^if  ( lu[max][col].abs (  ) .compareTo ( TOO_SMALL )  <= 2 )  {^1068^^^^^1053^1083^if  ( lu[max][col].abs (  ) .compareTo ( TOO_SMALL )  <= 0 )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( lu[max][col].abs (  ) .compareTo ( tmp )  <= 0 )  {^1068^^^^^1053^1083^if  ( lu[max][col].abs (  ) .compareTo ( TOO_SMALL )  <= 0 )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( TOO_SMALL[max][col].abs (  ) .compareTo ( lu )  <= 0 )  {^1068^^^^^1053^1083^if  ( lu[max][col].abs (  ) .compareTo ( TOO_SMALL )  <= 0 )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^if  ( lu[max][col].abs (  ) .compareTo ( TOO_SMALL )  <= 0L )  {^1068^^^^^1053^1083^if  ( lu[max][col].abs (  ) .compareTo ( TOO_SMALL )  <= 0 )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^lu = this;^1069^^^^^1054^1084^lu = null;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^if  ( max <= col )  {^1074^^^^^1059^1089^if  ( max != col )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( ncols != col )  {^1074^^^^^1059^1089^if  ( max != col )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( max != parity )  {^1074^^^^^1059^1089^if  ( max != col )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  ( int i = 0; i <= nCols; i++ )  {^1076^^^^^1061^1091^for  ( int i = 0; i < nCols; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = -2; i < nCols; i++ )  {^1076^^^^^1061^1091^for  ( int i = 0; i < nCols; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( rnt i = 0; i < nCols; i++ )  {^1076^^^^^1061^1091^for  ( int i = 0; i < nCols; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^for  ( int i = 0; i < parity; i++ )  {^1076^^^^^1061^1091^for  ( int i = 0; i < nCols; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^lu[max][i] = solution[col][i];^1078^^^^^1063^1093^lu[max][i] = lu[col][i];^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^lu[max][i]  =  lu[max][i] ;^1078^^^^^1063^1093^lu[max][i] = lu[col][i];^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^lu[col][i] = sum;^1079^^^^^1064^1094^lu[col][i] = tmp;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^lu[col][i] ;^1079^^^^^1064^1094^lu[col][i] = tmp;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^tmp = outData[max][i];^1077^^^^^1062^1092^tmp = lu[max][i];^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^tmp =  lu[nSum][i];^1077^^^^^1062^1092^tmp = lu[max][i];^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^permutation[col] = roundingMode;^1083^^^^^1068^1098^permutation[col] = temp;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^permutation[col]  = null ;^1083^^^^^1068^1098^permutation[col] = temp;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^nRows = -parity;^1084^^^^^1069^1099^parity = -parity;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^parity  = null ;^1084^^^^^1069^1099^parity = -parity;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = rowCount; i < nCols; i++ )  {^1076^^^^^1061^1091^for  ( int i = 0; i < nCols; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  long  row = 0; row < col; row++ )  {^1042^^^^^1027^1057^for  ( int row = 0; row < col; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  ( int row = 0; row == col; row++ )  {^1042^^^^^1027^1057^for  ( int row = 0; row < col; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int row = rowDimension; row < col; row++ )  {^1042^^^^^1027^1057^for  ( int row = 0; row < col; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int row = 9; row < col; row++ )  {^1042^^^^^1027^1057^for  ( int row = 0; row < col; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int ncols = 0; row < col; row++ )  {^1042^^^^^1027^1057^for  ( int row = 0; row < col; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int row = 0; row < ncols; row++ )  {^1042^^^^^1027^1057^for  ( int row = 0; row < col; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( paritynt row = 0; row < col; row++ )  {^1042^^^^^1027^1057^for  ( int row = 0; row < col; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( rownt i = 0; row < col; row++ )  {^1042^^^^^1027^1057^for  ( int row = 0; row < col; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^for  ( nSumnt row = 0; row < col; row++ )  {^1042^^^^^1027^1057^for  ( int row = 0; row < col; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  long  i = 0; i < row; i++ )  {^1044^^^^^1029^1059^for  ( int i = 0; i < row; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  ( int i = 0; i <= row; i++ )  {^1044^^^^^1029^1059^for  ( int i = 0; i < row; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( ncolsnt i = 0; i < row; i++ )  {^1044^^^^^1029^1059^for  ( int i = 0; i < row; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int i = 0; i < parity; i++ )  {^1044^^^^^1029^1059^for  ( int i = 0; i < row; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( rownt i = 0; i < i; i++ )  {^1044^^^^^1029^1059^for  ( int i = 0; i < row; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^for  ( int i = 0; i < ncols; i++ )  {^1044^^^^^1029^1059^for  ( int i = 0; i < row; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^sum = trace.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;^1045^^^^^1030^1060^sum = sum.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^sum = sum.subtract ( subMatrixData[row][i].multiply ( lu[i][col] )  ) ;^1045^^^^^1030^1060^sum = sum.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^sum = sum.subtract ( lu[row][i] .multiply ( sum )   ) ;^1045^^^^^1030^1060^sum = sum.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^bp[i][j] = bp[i][j].subtract ( bp[col][j].multiply ( lu[i][col] )  ) ;sum = sum.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;^1045^^^^^1030^1060^sum = sum.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^sum = sum.add ( data[row][i].multiply ( v[i] )  ) ;sum = sum.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;^1045^^^^^1030^1060^sum = sum.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^sum = sum.add ( data[i][col].multiply ( v[i] )  ) ;sum = sum.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;^1045^^^^^1030^1060^sum = sum.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^sum = sum.add ( data[row][i].multiply ( m.getEntry ( i, col )  )  ) ;sum = sum.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;^1045^^^^^1030^1060^sum = sum.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^sum = maxColSum.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;^1045^^^^^1030^1060^sum = sum.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^sum = sum.subtract ( solution[row][i].multiply ( lu[i][col] )  ) ;^1045^^^^^1030^1060^sum = sum.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^sum = sum.subtract ( lu[row][i] .multiply ( tmp )   ) ;^1045^^^^^1030^1060^sum = sum.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P14_Delete_Statement]^^1045^^^^^1030^1060^sum = sum.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^sum = sum.subtract ( subMatrix[row][i].multiply ( lu[i][col] )  ) ;^1045^^^^^1030^1060^sum = sum.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^sum = outData[row][col];^1043^^^^^1028^1058^sum = lu[row][col];^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^sum =  lu[null][col];^1043^^^^^1028^1058^sum = lu[row][col];^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^tmp = lu[max][i];sum = lu[row][col];^1043^^^^^1028^1058^sum = lu[row][col];^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^sum = sum.subtract ( lu[row][i] .multiply ( ONE )   ) ;^1045^^^^^1030^1060^sum = sum.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^sum =  largest.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;^1045^^^^^1030^1060^sum = sum.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^lu[row][col] = maxColSum;^1047^^^^^1032^1062^lu[row][col] = sum;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^lu[row][col]  = null ;^1047^^^^^1032^1062^lu[row][col] = sum;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^lu[col][i] = tmp;lu[row][col] = sum;^1047^^^^^1032^1062^lu[row][col] = sum;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^out[row] = sum;lu[row][col] = sum;^1047^^^^^1032^1062^lu[row][col] = sum;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^out[col] = sum;lu[row][col] = sum;^1047^^^^^1032^1062^lu[row][col] = sum;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^outData[row][col] = sum;lu[row][col] = sum;^1047^^^^^1032^1062^lu[row][col] = sum;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  short  i = 0; i < row; i++ )  {^1044^^^^^1029^1059^for  ( int i = 0; i < row; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = endColumn; i < row; i++ )  {^1044^^^^^1029^1059^for  ( int i = 0; i < row; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^sum = tmp.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;^1045^^^^^1030^1060^sum = sum.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = nSum; i < row; i++ )  {^1044^^^^^1029^1059^for  ( int i = 0; i < row; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( nSumnt i = 0; i < row; i++ )  {^1044^^^^^1029^1059^for  ( int i = 0; i < row; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^sum = lu.subtract ( sum[row][i].multiply ( lu[i][col] )  ) ;^1045^^^^^1030^1060^sum = sum.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^sum = tmp.subtract ( lu[row][i] .multiply ( det )   ) ;^1045^^^^^1030^1060^sum = sum.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^sum = sum.subtract ( outData[row][i].multiply ( lu[i][col] )  ) ;^1045^^^^^1030^1060^sum = sum.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^sum = sum.subtract ( lu[row][i] .multiply ( d )   ) ;^1045^^^^^1030^1060^sum = sum.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  short  row = col; row < nRows; row++ )  {^1053^^^^^1038^1068^for  ( int row = col; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  ( int row = col; row <= nRows; row++ )  {^1053^^^^^1038^1068^for  ( int row = col; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int nSum = col; row < nRows; row++ )  {^1053^^^^^1038^1068^for  ( int row = col; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int row = col; row < rowDimension; row++ )  {^1053^^^^^1038^1068^for  ( int row = col; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( nSumnt row = col; row < nRows; row++ )  {^1053^^^^^1038^1068^for  ( int row = col; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( colnt row = i; row < nRows; row++ )  {^1053^^^^^1038^1068^for  ( int row = col; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int nRows = col; row < row; row++ )  {^1053^^^^^1038^1068^for  ( int row = col; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^for  ( int row = col; row < ncols; row++ )  {^1053^^^^^1038^1068^for  ( int row = col; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^if  ( sum.abs (  ) .compareTo ( largest )  == nRows )  {^1061^^^^^1046^1076^if  ( sum.abs (  ) .compareTo ( largest )  == 1 )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^if  ( sum.abs (  ) .compareTo ( largest )  == 2 )  {^1061^^^^^1046^1076^if  ( sum.abs (  ) .compareTo ( largest )  == 1 )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^max = ncols;^1063^^^^^1048^1078^max = row;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^max =  null;^1063^^^^^1048^1078^max = row;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  short  i = 0; i < col; i++ )  {^1055^^^^^1040^1070^for  ( int i = 0; i < col; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  ( int i = 0; i <= col; i++ )  {^1055^^^^^1040^1070^for  ( int i = 0; i < col; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = startColumn; i < col; i++ )  {^1055^^^^^1040^1070^for  ( int i = 0; i < col; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( paritynt i = 0; i < col; i++ )  {^1055^^^^^1040^1070^for  ( int i = 0; i < col; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int i = 0; i < ncols; i++ )  {^1055^^^^^1040^1070^for  ( int i = 0; i < col; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( colnt i = 0; i < i; i++ )  {^1055^^^^^1040^1070^for  ( int i = 0; i < col; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^sum = largest.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;^1056^^^^^1041^1071^sum = sum.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^sum = sum.subtract ( subMatrixData[row][i].multiply ( lu[i][col] )  ) ;^1056^^^^^1041^1071^sum = sum.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^sum = lu.subtract ( sum[row][i].multiply ( lu[i][col] )  ) ;^1056^^^^^1041^1071^sum = sum.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^sum = sum.subtract ( lu[row][i] .multiply ( maxColSum )   ) ;^1056^^^^^1041^1071^sum = sum.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^sum =  trace.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;^1056^^^^^1041^1071^sum = sum.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^bp[i][j] = bp[i][j].subtract ( bp[col][j].multiply ( lu[i][col] )  ) ;sum = sum.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;^1056^^^^^1041^1071^sum = sum.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^sum = sum.add ( data[row][i].multiply ( v[i] )  ) ;sum = sum.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;^1056^^^^^1041^1071^sum = sum.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^sum = sum.add ( data[i][col].multiply ( v[i] )  ) ;sum = sum.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;^1056^^^^^1041^1071^sum = sum.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^sum = sum.add ( data[row][i].multiply ( m.getEntry ( i, col )  )  ) ;sum = sum.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;^1056^^^^^1041^1071^sum = sum.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^sum = sum.subtract ( solution[row][i].multiply ( lu[i][col] )  ) ;^1056^^^^^1041^1071^sum = sum.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P14_Delete_Statement]^^1056^^^^^1041^1071^sum = sum.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^sum = sum.subtract ( subMatrix[row][i].multiply ( lu[i][col] )  ) ;^1056^^^^^1041^1071^sum = sum.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^sum = solution[row][col];^1054^^^^^1039^1069^sum = lu[row][col];^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^sum =  lu[nSum][col];^1054^^^^^1039^1069^sum = lu[row][col];^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^tmp = lu[max][i];sum = lu[row][col];^1054^^^^^1039^1069^sum = lu[row][col];^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^sum = sum.subtract ( lu[row][i] .multiply ( trace )   ) ;^1056^^^^^1041^1071^sum = sum.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^sum =  tmp.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;^1056^^^^^1041^1071^sum = sum.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^lu[row][col] = trace;^1058^^^^^1043^1073^lu[row][col] = sum;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^lu[row][col]  =  lu[row][col] ;^1058^^^^^1043^1073^lu[row][col] = sum;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^lu[col][i] = tmp;lu[row][col] = sum;^1058^^^^^1043^1073^lu[row][col] = sum;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^out[row] = sum;lu[row][col] = sum;^1058^^^^^1043^1073^lu[row][col] = sum;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^out[col] = sum;lu[row][col] = sum;^1058^^^^^1043^1073^lu[row][col] = sum;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^outData[row][col] = sum;lu[row][col] = sum;^1058^^^^^1043^1073^lu[row][col] = sum;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^largest = sum .add ( this )  ;^1062^^^^^1047^1077^largest = sum.abs (  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^max =  nrows;^1063^^^^^1048^1078^max = row;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  long  i = 0; i < col; i++ )  {^1055^^^^^1040^1070^for  ( int i = 0; i < col; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = r; i < col; i++ )  {^1055^^^^^1040^1070^for  ( int i = 0; i < col; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^sum = sum.subtract ( outData[row][i].multiply ( lu[i][col] )  ) ;^1056^^^^^1041^1071^sum = sum.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( sum.abs (  ) .compareTo ( maxColSum )  == 1 )  {^1061^^^^^1046^1076^if  ( sum.abs (  ) .compareTo ( largest )  == 1 )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^if  ( sum.BigDecimal (  ) .compareTo ( trace )  == 1 )  {^1061^^^^^1046^1076^if  ( sum.abs (  ) .compareTo ( largest )  == 1 )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^if  ( tmp.abs (  ) .compareTo ( largest )  == 1 )  {^1061^^^^^1046^1076^if  ( sum.abs (  ) .compareTo ( largest )  == 1 )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = -7; i < col; i++ )  {^1055^^^^^1040^1070^for  ( int i = 0; i < col; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^for  ( nrowsnt i = 0; i < col; i++ )  {^1055^^^^^1040^1070^for  ( int i = 0; i < col; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^sum = maxColSum.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;^1056^^^^^1041^1071^sum = sum.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^sum = sum.subtract ( lu[row][i] .multiply ( largest )   ) ;^1056^^^^^1041^1071^sum = sum.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^sum = sum.subtract ( solution[row][i] .multiply ( det )   ) ;^1056^^^^^1041^1071^sum = sum.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = nRowB; i < nCols; i++ )  {^1076^^^^^1061^1091^for  ( int i = 0; i < nCols; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( startColumnnt i = 0; i < nCols; i++ )  {^1076^^^^^1061^1091^for  ( int i = 0; i < nCols; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( nColsnt i = 0; i < i; i++ )  {^1076^^^^^1061^1091^for  ( int i = 0; i < nCols; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  short  row = col + 1; row < nRows; row++ )  {^1088^^^^^1073^1103^for  ( int row = col + 1; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  >=  ( int row = col + 1; row < nRows; row++ )  {^1088^^^^^1073^1103^for  ( int row = col + 1; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  ( int row = col + 1; row <= nRows; row++ )  {^1088^^^^^1073^1103^for  ( int row = col + 1; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int row = col ; row < nRows; row++ )  {^1088^^^^^1073^1103^for  ( int row = col + 1; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int row = ncols + 1; row < nRows; row++ )  {^1088^^^^^1073^1103^for  ( int row = col + 1; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int nRows = col + 1; row < nRows; row++ )  {^1088^^^^^1073^1103^for  ( int row = col + 1; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int row = col + 1; row < nSum; row++ )  {^1088^^^^^1073^1103^for  ( int row = col + 1; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int row = nRows + 1; row < col; row++ )  {^1088^^^^^1073^1103^for  ( int row = col + 1; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^for  ( int row = roundingMode + 1; row < nRows; row++ )  {^1088^^^^^1073^1103^for  ( int row = col + 1; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^lu[row][col] = subMatrix[row][col].divide ( lu[col][col], scale, roundingMode ) ;^1089^^^^^1074^1104^lu[row][col] = lu[row][col].divide ( lu[col][col], scale, roundingMode ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^lu[row][col] = lu[row][col].divide ( lu[col][col], ncols, roundingMode ) ;^1089^^^^^1074^1104^lu[row][col] = lu[row][col].divide ( lu[col][col], scale, roundingMode ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^lu[row][col] = lu[row][col].divide ( lu[col][col],  roundingMode ) ;^1089^^^^^1074^1104^lu[row][col] = lu[row][col].divide ( lu[col][col], scale, roundingMode ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^lu[row][col] = lu[row][col].divide ( lu[col][col], scale ) ;^1089^^^^^1074^1104^lu[row][col] = lu[row][col].divide ( lu[col][col], scale, roundingMode ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^lu[row][col] = lu[row][col].divide ( lu[col][col], roundingMode, scale ) ;^1089^^^^^1074^1104^lu[row][col] = lu[row][col].divide ( lu[col][col], scale, roundingMode ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^lu[row][col]  = null ;^1089^^^^^1074^1104^lu[row][col] = lu[row][col].divide ( lu[col][col], scale, roundingMode ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^bp[col][j] = bp[col][j].divide ( lu[col][col], scale, roundingMode ) ;lu[row][col] = lu[row][col].divide ( lu[col][col], scale, roundingMode ) ;^1089^^^^^1074^1104^lu[row][col] = lu[row][col].divide ( lu[col][col], scale, roundingMode ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^lu[row][col] = subMatrixData[row][col].divide ( lu[col][col], scale, roundingMode ) ;^1089^^^^^1074^1104^lu[row][col] = lu[row][col].divide ( lu[col][col], scale, roundingMode ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^lu[row][col] = lu[row][col].divide ( lu[col][col], nRows, roundingMode ) ;^1089^^^^^1074^1104^lu[row][col] = lu[row][col].divide ( lu[col][col], scale, roundingMode ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^lu[row][col] = lu[row][col].divide ( lu[col][col], scale, ncols ) ;^1089^^^^^1074^1104^lu[row][col] = lu[row][col].divide ( lu[col][col], scale, roundingMode ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^lu[row][col] = roundingMode[row][col].divide ( lu[col][col], scale, lu ) ;^1089^^^^^1074^1104^lu[row][col] = lu[row][col].divide ( lu[col][col], scale, roundingMode ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P14_Delete_Statement]^^1089^^^^^1074^1104^lu[row][col] = lu[row][col].divide ( lu[col][col], scale, roundingMode ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^lu[row][col] ;^1047^^^^^1032^1062^lu[row][col] = sum;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^sum = outData[row][col];^1054^^^^^1039^1069^sum = lu[row][col];^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^sum =  lu[nRows][col];^1054^^^^^1039^1069^sum = lu[row][col];^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^sum = sum.subtract ( lu[row][i] .multiply ( sum )   ) ;^1056^^^^^1041^1071^sum = sum.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^tmp = subMatrix[max][i];^1077^^^^^1062^1092^tmp = lu[max][i];^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^lu[max][i] = subMatrix[col][i];^1078^^^^^1063^1093^lu[max][i] = lu[col][i];^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^permutation[max] ;^1082^^^^^1067^1097^permutation[max] = permutation[col];^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^permutation[col] = row;^1083^^^^^1068^1098^permutation[col] = temp;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^permutation[col] ;^1083^^^^^1068^1098^permutation[col] = temp;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^nSum = -parity;^1084^^^^^1069^1099^parity = -parity;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^parity ;^1084^^^^^1069^1099^parity = -parity;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^lu[row][col] = outData[row][col].divide ( lu[col][col], scale, roundingMode ) ;^1089^^^^^1074^1104^lu[row][col] = lu[row][col].divide ( lu[col][col], scale, roundingMode ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^lu[row][col] = lu[row][col].divide ( lu[col][col], roundingMode, roundingMode ) ;^1089^^^^^1074^1104^lu[row][col] = lu[row][col].divide ( lu[col][col], scale, roundingMode ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^lu[row][col] = lu[row][col].divide ( lu[col][col], scale, r ) ;^1089^^^^^1074^1104^lu[row][col] = lu[row][col].divide ( lu[col][col], scale, roundingMode ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^lu[row][col] = lu[row][col] .doubleValue (  )  ;^1089^^^^^1074^1104^lu[row][col] = lu[row][col].divide ( lu[col][col], scale, roundingMode ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^BigDecimal sum = tmp;^1039^^^^^1024^1054^BigDecimal sum = ZERO;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^BigDecimal sum = trace;^1039^^^^^1024^1054^BigDecimal sum = ZERO;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal largest = ZERO;BigDecimal sum = ZERO;^1039^^^^^1024^1054^BigDecimal sum = ZERO;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal maxColSum = ZERO;BigDecimal sum = ZERO;^1039^^^^^1024^1054^BigDecimal sum = ZERO;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal tmp = ZERO;BigDecimal sum = ZERO;^1039^^^^^1024^1054^BigDecimal sum = ZERO;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int row = nCols; row < col; row++ )  {^1042^^^^^1027^1057^for  ( int row = 0; row < col; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = nRows; i < row; i++ )  {^1044^^^^^1029^1059^for  ( int i = 0; i < row; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P1_Replace_Type]^short  max = col;^1051^^^^^1036^1066^int max = col;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^int max = ncols;^1051^^^^^1036^1066^int max = col;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^int max = nrows;^1051^^^^^1036^1066^int max = col;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int ret = 7;int max = col;^1051^^^^^1036^1066^int max = col;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^BigDecimal largest = trace;^1052^^^^^1037^1067^BigDecimal largest = ZERO;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal sum = ZERO;BigDecimal largest = ZERO;^1052^^^^^1037^1067^BigDecimal largest = ZERO;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal maxColSum = ZERO;BigDecimal largest = ZERO;^1052^^^^^1037^1067^BigDecimal largest = ZERO;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal tmp = ZERO;BigDecimal largest = ZERO;^1052^^^^^1037^1067^BigDecimal largest = ZERO;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int row = nSum; row < nRows; row++ )  {^1053^^^^^1038^1068^for  ( int row = col; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^for  ( int row = temp; row < nRows; row++ )  {^1053^^^^^1038^1068^for  ( int row = col; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = 1; i < col; i++ )  {^1055^^^^^1040^1070^for  ( int i = 0; i < col; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = -8; i < nCols; i++ )  {^1076^^^^^1061^1091^for  ( int i = 0; i < nCols; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  &&  ( int row = col + 1; row < nRows; row++ )  {^1088^^^^^1073^1103^for  ( int row = col + 1; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^for  ( int row = parity + 1; row < nRows; row++ )  {^1088^^^^^1073^1103^for  ( int row = col + 1; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^sum = sum.subtract ( lu[row][i] .multiply ( det )   ) ;^1045^^^^^1030^1060^sum = sum.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^sum = sum.subtract ( solution[row][i] .multiply ( maxColSum )   ) ;^1045^^^^^1030^1060^sum = sum.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^sum = sum.subtract ( lu[row][i] .multiply ( ZERO )   ) ;^1056^^^^^1041^1071^sum = sum.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^if  ( tmp.BigDecimal (  ) .compareTo ( largest )  == 1 )  {^1061^^^^^1046^1076^if  ( sum.abs (  ) .compareTo ( largest )  == 1 )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( outData[max][col].abs (  ) .compareTo ( TOO_SMALL )  <= 0 )  {^1068^^^^^1053^1083^if  ( lu[max][col].abs (  ) .compareTo ( TOO_SMALL )  <= 0 )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( lu[max][col].abs (  ) .compareTo ( trace )  <= 0 )  {^1068^^^^^1053^1083^if  ( lu[max][col].abs (  ) .compareTo ( TOO_SMALL )  <= 0 )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( subMatrix[max][col].abs (  ) .compareTo ( TOO_SMALL )  <= 0 )  {^1068^^^^^1053^1083^if  ( lu[max][col].abs (  ) .compareTo ( TOO_SMALL )  <= 0 )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^lu[row][col] = lu[row][col].divide ( lu[col][col], nrows, roundingMode ) ;^1089^^^^^1074^1104^lu[row][col] = lu[row][col].divide ( lu[col][col], scale, roundingMode ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^lu[row][col] = lu[row][col].divide ( lu[col][col], scale, nRows ) ;^1089^^^^^1074^1104^lu[row][col] = lu[row][col].divide ( lu[col][col], scale, roundingMode ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  short  row = 0; row < col; row++ )  {^1042^^^^^1027^1057^for  ( int row = 0; row < col; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  ( int row = 0; row <= col; row++ )  {^1042^^^^^1027^1057^for  ( int row = 0; row < col; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int row = -5; row < col; row++ )  {^1042^^^^^1027^1057^for  ( int row = 0; row < col; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int row = ; row < col; row++ )  {^1042^^^^^1027^1057^for  ( int row = 0; row < col; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int nrows = 0; row < col; row++ )  {^1042^^^^^1027^1057^for  ( int row = 0; row < col; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( ncolsnt row = 0; row < col; row++ )  {^1042^^^^^1027^1057^for  ( int row = 0; row < col; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( colnt row = 0; row < i; row++ )  {^1042^^^^^1027^1057^for  ( int row = 0; row < col; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^for  ( int nRows = 0; row < col; row++ )  {^1042^^^^^1027^1057^for  ( int row = 0; row < col; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = rowDimension; i < row; i++ )  {^1044^^^^^1029^1059^for  ( int i = 0; i < row; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int i = 0; i < nSum; i++ )  {^1044^^^^^1029^1059^for  ( int i = 0; i < row; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^sum =  null.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;^1045^^^^^1030^1060^sum = sum.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^sum = trace.subtract ( lu[row][i] .multiply ( ZERO )   ) ;^1045^^^^^1030^1060^sum = sum.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^sum =  lu[ncols][col];^1043^^^^^1028^1058^sum = lu[row][col];^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^lu[row][col] = largest;^1047^^^^^1032^1062^lu[row][col] = sum;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^lu[row][col]  =  lu[row][col] ;^1047^^^^^1032^1062^lu[row][col] = sum;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = temp; i < row; i++ )  {^1044^^^^^1029^1059^for  ( int i = 0; i < row; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = 8; i < row; i++ )  {^1044^^^^^1029^1059^for  ( int i = 0; i < row; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( paritynt i = 0; i < row; i++ )  {^1044^^^^^1029^1059^for  ( int i = 0; i < row; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int i = 0; i < nrows; i++ )  {^1044^^^^^1029^1059^for  ( int i = 0; i < row; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^sum = sum.subtract ( subMatrix[row][i] .multiply ( ONE )   ) ;^1045^^^^^1030^1060^sum = sum.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  ( int row = col; row == nRows; row++ )  {^1053^^^^^1038^1068^for  ( int row = col; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int nRows = col; row < nRows; row++ )  {^1053^^^^^1038^1068^for  ( int row = col; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int row = col; row < parity; row++ )  {^1053^^^^^1038^1068^for  ( int row = col; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int col = row; row < nRows; row++ )  {^1053^^^^^1038^1068^for  ( int row = col; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( rownt i = col; row < nRows; row++ )  {^1053^^^^^1038^1068^for  ( int row = col; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int row = nRows; row < col; row++ )  {^1053^^^^^1038^1068^for  ( int row = col; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^if  ( sum.abs (  ) .compareTo ( largest )  < 1 )  {^1061^^^^^1046^1076^if  ( sum.abs (  ) .compareTo ( largest )  == 1 )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^if  ( sum.abs (  ) .compareTo ( largest )  == r )  {^1061^^^^^1046^1076^if  ( sum.abs (  ) .compareTo ( largest )  == 1 )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( sum.abs (  ) .compareTo ( sum )  == 1 )  {^1061^^^^^1046^1076^if  ( sum.abs (  ) .compareTo ( largest )  == 1 )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^if  ( sum.abs (  )  .max ( ZERO )   == 1 )  {^1061^^^^^1046^1076^if  ( sum.abs (  ) .compareTo ( largest )  == 1 )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^if  ( sum.abs (  ) .compareTo ( largest )  == 1 - 1 )  {^1061^^^^^1046^1076^if  ( sum.abs (  ) .compareTo ( largest )  == 1 )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^max = nSum;^1063^^^^^1048^1078^max = row;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = -5; i < col; i++ )  {^1055^^^^^1040^1070^for  ( int i = 0; i < col; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int i = 0; i < rowDimension; i++ )  {^1055^^^^^1040^1070^for  ( int i = 0; i < col; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^for  ( nSumnt i = 0; i < col; i++ )  {^1055^^^^^1040^1070^for  ( int i = 0; i < col; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^sum = sum.subtract ( lu[row][i] .multiply ( det )   ) ;^1056^^^^^1041^1071^sum = sum.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^sum = subMatrixData[row][col];^1054^^^^^1039^1069^sum = lu[row][col];^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^sum =  lu[ncols][col];^1054^^^^^1039^1069^sum = lu[row][col];^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = roundingMode; i < col; i++ )  {^1055^^^^^1040^1070^for  ( int i = 0; i < col; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^sum = sum.subtract ( subMatrixData[row][i] .multiply ( largest )   ) ;^1056^^^^^1041^1071^sum = sum.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^sum = sum.subtract ( lu[row][i] .multiply ( tmp )   ) ;^1056^^^^^1041^1071^sum = sum.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^if  ( largest.BigDecimal (  ) .compareTo ( largest )  == 1 )  {^1061^^^^^1046^1076^if  ( sum.abs (  ) .compareTo ( largest )  == 1 )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = ; i < col; i++ )  {^1055^^^^^1040^1070^for  ( int i = 0; i < col; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^for  ( int i = 0; i < row; i++ )  {^1055^^^^^1040^1070^for  ( int i = 0; i < col; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^sum = sum.subtract ( lu[row][i] .multiply ( TOO_SMALL )   ) ;^1056^^^^^1041^1071^sum = sum.subtract ( lu[row][i].multiply ( lu[i][col] )  ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = endRow; i < nCols; i++ )  {^1076^^^^^1061^1091^for  ( int i = 0; i < nCols; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( rownt i = 0; i < nCols; i++ )  {^1076^^^^^1061^1091^for  ( int i = 0; i < nCols; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^for  ( rowCountnt i = 0; i < nCols; i++ )  {^1076^^^^^1061^1091^for  ( int i = 0; i < nCols; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  <<  ( int row = col + 1; row < nRows; row++ )  {^1088^^^^^1073^1103^for  ( int row = col + 1; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  ( int row = col + 1; row > nRows; row++ )  {^1088^^^^^1073^1103^for  ( int row = col + 1; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int row = col + j; row < nRows; row++ )  {^1088^^^^^1073^1103^for  ( int row = col + 1; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int row = rowDimension + 1; row < nRows; row++ )  {^1088^^^^^1073^1103^for  ( int row = col + 1; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int nSum = col + 1; row < nRows; row++ )  {^1088^^^^^1073^1103^for  ( int row = col + 1; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int row = col + 1; row < r; row++ )  {^1088^^^^^1073^1103^for  ( int row = col + 1; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int col = row + 1; row < nRows; row++ )  {^1088^^^^^1073^1103^for  ( int row = col + 1; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int nRows = col + 1; row < row; row++ )  {^1088^^^^^1073^1103^for  ( int row = col + 1; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^lu[row][col] = lu[row][col].divide ( lu[col][col], nSum, roundingMode ) ;^1089^^^^^1074^1104^lu[row][col] = lu[row][col].divide ( lu[col][col], scale, roundingMode ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^lu[row][col] = scale[row][col].divide ( lu[col][col], lu, roundingMode ) ;^1089^^^^^1074^1104^lu[row][col] = lu[row][col].divide ( lu[col][col], scale, roundingMode ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^lu[row][col] ;^1089^^^^^1074^1104^lu[row][col] = lu[row][col].divide ( lu[col][col], scale, roundingMode ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^lu[row][col] = lu[row][col].divide ( lu[col][col], temp, roundingMode ) ;^1089^^^^^1074^1104^lu[row][col] = lu[row][col].divide ( lu[col][col], scale, roundingMode ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^sum = subMatrixData[row][col];^1043^^^^^1028^1058^sum = lu[row][col];^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^sum =  lu[parity][col];^1043^^^^^1028^1058^sum = lu[row][col];^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^lu[row][col] = trace;^1047^^^^^1032^1062^lu[row][col] = sum;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^tmp =  lu[parity][i];^1077^^^^^1062^1092^tmp = lu[max][i];^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^lu[col][i] = maxColSum;^1079^^^^^1064^1094^lu[col][i] = tmp;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^lu[row][col] = lu[row][col].divide ( lu[col][col], r, roundingMode ) ;^1089^^^^^1074^1104^lu[row][col] = lu[row][col].divide ( lu[col][col], scale, roundingMode ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^lu[row][col] = lu[row][col].divide ( lu[col][col], scale, rowDimension ) ;^1089^^^^^1074^1104^lu[row][col] = lu[row][col].divide ( lu[col][col], scale, roundingMode ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^lu[row][col]  =  lu[row][col] ;^1089^^^^^1074^1104^lu[row][col] = lu[row][col].divide ( lu[col][col], scale, roundingMode ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int col = endColumn; col < nCols; col++ )  {^1037^^^^^1022^1052^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^BigDecimal sum = maxColSum;^1039^^^^^1024^1054^BigDecimal sum = ZERO;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int row = -1; row < col; row++ )  {^1042^^^^^1027^1057^for  ( int row = 0; row < col; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = nCol; i < row; i++ )  {^1044^^^^^1029^1059^for  ( int i = 0; i < row; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P1_Replace_Type]^long  max = col;^1051^^^^^1036^1066^int max = col;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^int max = rowCount;^1051^^^^^1036^1066^int max = col;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^BigDecimal largest = sum;^1052^^^^^1037^1067^BigDecimal largest = ZERO;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = max; i < col; i++ )  {^1055^^^^^1040^1070^for  ( int i = 0; i < col; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = roundingMode; i < nCols; i++ )  {^1076^^^^^1061^1091^for  ( int i = 0; i < nCols; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^for  ( int row = r + 1; row < nRows; row++ )  {^1088^^^^^1073^1103^for  ( int row = col + 1; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( largest.abs (  ) .compareTo ( largest )  == 1 )  {^1061^^^^^1046^1076^if  ( sum.abs (  ) .compareTo ( largest )  == 1 )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( solution[max][col].abs (  ) .compareTo ( TOO_SMALL )  <= 0 )  {^1068^^^^^1053^1083^if  ( lu[max][col].abs (  ) .compareTo ( TOO_SMALL )  <= 0 )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^if  ( outData[max][col].abs (  )  .max ( d )   <= 0 )  {^1068^^^^^1053^1083^if  ( lu[max][col].abs (  ) .compareTo ( TOO_SMALL )  <= 0 )  {^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^lu[row][col] = lu[row][col].divide ( lu[col][col], scale, nrows ) ;^1089^^^^^1074^1104^lu[row][col] = lu[row][col].divide ( lu[col][col], scale, roundingMode ) ;^[CLASS] BigMatrixImpl  [METHOD] luDecompose [RETURN_TYPE] void   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^res.append ( "ixImigMatrixImpl{" ) ;^1102^^^^^1100^1118^res.append ( "BigMatrixImpl{" ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P14_Delete_Statement]^^1102^^^^^1100^1118^res.append ( "BigMatrixImpl{" ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^res.append ( "," ) ;res.append ( "BigMatrixImpl{" ) ;^1102^^^^^1100^1118^res.append ( "BigMatrixImpl{" ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^res.append ( "{" ) ;res.append ( "BigMatrixImpl{" ) ;^1102^^^^^1100^1118^res.append ( "BigMatrixImpl{" ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^res.append ( data[i][j] ) ;res.append ( "BigMatrixImpl{" ) ;^1102^^^^^1100^1118^res.append ( "BigMatrixImpl{" ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^res.append ( "}" ) ;res.append ( "BigMatrixImpl{" ) ;^1102^^^^^1100^1118^res.append ( "BigMatrixImpl{" ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^if  ( data == null )  {^1103^^^^^1100^1118^if  ( data != null )  {^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( subMatrixData != null )  {^1103^^^^^1100^1118^if  ( data != null )  {^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P6_Replace_Expression]^if  ( i < data.length )  {^1103^^^^^1100^1118^if  ( data != null )  {^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P6_Replace_Expression]^if  ( i > 0 )  {^1103^^^^^1100^1118^if  ( data != null )  {^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P6_Replace_Expression]^if  ( j < data[0].length )  {^1103^^^^^1100^1118^if  ( data != null )  {^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P6_Replace_Expression]^if  ( j > 0 )  {^1103^^^^^1100^1118^if  ( data != null )  {^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^if  ( data != this )  {^1103^^^^^1100^1118^if  ( data != null )  {^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  ( nRows != nCols )  {^1103^^^^^1100^1118^if  ( data != null )  {^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  ( lu == null )  {^1103^^^^^1100^1118^if  ( data != null )  {^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  ( max != col )  {^1103^^^^^1100^1118^if  ( data != null )  {^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^if  ( i >= 0 ) res.append ( "," ) ;^1105^1106^^^^1100^1118^if  ( i > 0 ) res.append ( "," ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( ncols > 0 ) res.append ( "," ) ;^1105^1106^^^^1100^1118^if  ( i > 0 ) res.append ( "," ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( res > 0 ) i.append ( "," ) ;^1105^1106^^^^1100^1118^if  ( i > 0 ) res.append ( "," ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^if  ( i > 0 - 4 ) res.append ( "," ) ;^1105^1106^^^^1100^1118^if  ( i > 0 ) res.append ( "," ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^res.append ( "" ) ;^1106^^^^^1100^1118^res.append ( "," ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P14_Delete_Statement]^^1106^1107^^^^1100^1118^res.append ( "," ) ; res.append ( "{" ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^res.append ( "{" ) ;res.append ( "," ) ;^1106^^^^^1100^1118^res.append ( "," ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^res.append ( data[i][j] ) ;res.append ( "," ) ;^1106^^^^^1100^1118^res.append ( "," ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^res.append ( "BigMatrixImpl{" ) ;res.append ( "," ) ;^1106^^^^^1100^1118^res.append ( "," ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^res.append ( "}" ) ;res.append ( "," ) ;^1106^^^^^1100^1118^res.append ( "," ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^if  ( j >= 0 ) res.append ( "," ) ;^1109^1110^^^^1100^1118^if  ( j > 0 ) res.append ( "," ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^if  ( j > max ) res.append ( "," ) ;^1109^1110^^^^1100^1118^if  ( j > 0 ) res.append ( "," ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^if  ( j > 0 ) res.append ( "" ) ;^1109^1110^^^^1100^1118^if  ( j > 0 ) res.append ( "," ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( nrows > 0 ) res.append ( "," ) ;^1109^1110^^^^1100^1118^if  ( j > 0 ) res.append ( "," ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( res > 0 ) j.append ( "," ) ;^1109^1110^^^^1100^1118^if  ( j > 0 ) res.append ( "," ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^if  ( j > 2 ) res.append ( "," ) ;^1109^1110^^^^1100^1118^if  ( j > 0 ) res.append ( "," ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P15_Unwrap_Block]^res.append(",");^1109^1110^1111^1112^^1100^1118^if  ( j > 0 ) res.append ( "," ) ; res.append ( data[i][j] ) ; }^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P16_Remove_Block]^^1109^1110^1111^1112^^1100^1118^if  ( j > 0 ) res.append ( "," ) ; res.append ( data[i][j] ) ; }^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^res.append ( "" ) ;^1110^^^^^1100^1118^res.append ( "," ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P14_Delete_Statement]^^1110^1111^^^^1100^1118^res.append ( "," ) ; res.append ( data[i][j] ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^res.append ( "{" ) ;res.append ( "," ) ;^1110^^^^^1100^1118^res.append ( "," ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^res.append ( data[i][j] ) ;res.append ( "," ) ;^1110^^^^^1100^1118^res.append ( "," ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^res.append ( "BigMatrixImpl{" ) ;res.append ( "," ) ;^1110^^^^^1100^1118^res.append ( "," ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^res.append ( "}" ) ;res.append ( "," ) ;^1110^^^^^1100^1118^res.append ( "," ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  long  i = 0; i < data.length; i++ )  {^1104^^^^^1100^1118^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  ( int i = 0; i <= data.length; i++ )  {^1104^^^^^1100^1118^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = -8; i < data.length; i++ )  {^1104^^^^^1100^1118^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = 6; i < data.length; i++ )  {^1104^^^^^1100^1118^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = parity; i < data.length; i++ )  {^1104^^^^^1100^1118^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = nColB; i < data.length; i++ )  {^1104^^^^^1100^1118^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = temp; i < data.length; i++ )  {^1104^^^^^1100^1118^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( rnt i = 0; i < data.length; i++ )  {^1104^^^^^1100^1118^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int i = 0; i < nrows; i++ )  {^1104^^^^^1100^1118^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int i = 0; i < subMatrixData.length; i++ )  {^1104^^^^^1100^1118^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( data.lengthnt i = 0; i < i; i++ )  {^1104^^^^^1100^1118^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^for  ( ncolsnt i = 0; i < data.length; i++ )  {^1104^^^^^1100^1118^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^if  ( i > nColB ) res.append ( "," ) ;^1105^1106^^^^1100^1118^if  ( i > 0 ) res.append ( "," ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^if  ( i > 0 ) res.append ( "" ) ;^1105^1106^^^^1100^1118^if  ( i > 0 ) res.append ( "," ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( parity > 0 ) res.append ( "," ) ;^1105^1106^^^^1100^1118^if  ( i > 0 ) res.append ( "," ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^if  ( i > 4 ) res.append ( "," ) ;^1105^1106^^^^1100^1118^if  ( i > 0 ) res.append ( "," ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P14_Delete_Statement]^^1106^^^^^1100^1118^res.append ( "," ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^if  ( j > -4 ) res.append ( "," ) ;^1109^1110^^^^1100^1118^if  ( j > 0 ) res.append ( "," ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( nSum > 0 ) res.append ( "," ) ;^1109^1110^^^^1100^1118^if  ( j > 0 ) res.append ( "," ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^if  ( nSum > 3 ) res.append ( "," ) ;^1109^1110^^^^1100^1118^if  ( j > 0 ) res.append ( "," ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  long  j = 0; j < data[0].length; j++ )  {^1108^^^^^1100^1118^for  ( int j = 0; j < data[0].length; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  ( int j = 0; j <= data[0].length; j++ )  {^1108^^^^^1100^1118^for  ( int j = 0; j < data[0].length; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int j = -6; j < data[-6].length; j++ )  {^1108^^^^^1100^1118^for  ( int j = 0; j < data[0].length; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int j = rowDimension; j < data[rowDimension].length; j++ )  {^1108^^^^^1100^1118^for  ( int j = 0; j < data[0].length; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int j = 6; j < data[6].length; j++ )  {^1108^^^^^1100^1118^for  ( int j = 0; j < data[0].length; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int ncols = 0; j < data[0].length; j++ )  {^1108^^^^^1100^1118^for  ( int j = 0; j < data[0].length; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( nrowsnt j = 0; j < data[0].length; j++ )  {^1108^^^^^1100^1118^for  ( int j = 0; j < data[0].length; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int j = 0; j < solution[0].length; j++ )  {^1108^^^^^1100^1118^for  ( int j = 0; j < data[0].length; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( jnt i = 0; j < data[0].length; j++ )  {^1108^^^^^1100^1118^for  ( int j = 0; j < data[0].length; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( data[0].lengthnt j = 0; j < data[0].length; j++ )  {^1108^^^^^1100^1118^for  ( int j = 0; j < data[0].length; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int data[0].length = 0; j < data[0].length; j++ )  {^1108^^^^^1100^1118^for  ( int j = 0; j < data[0].length; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( datant j = 0; j < i[0].length; j++ )  {^1108^^^^^1100^1118^for  ( int j = 0; j < data[0].length; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^for  ( ncolsnt j = 0; j < data[0].length; j++ )  {^1108^^^^^1100^1118^for  ( int j = 0; j < data[0].length; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^if  ( j > i ) res.append ( "," ) ;^1109^1110^^^^1100^1118^if  ( j > 0 ) res.append ( "," ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( roundingMode > 0 ) res.append ( "," ) ;^1109^1110^^^^1100^1118^if  ( j > 0 ) res.append ( "," ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^if  ( j > 4 ) res.append ( "," ) ;^1109^1110^^^^1100^1118^if  ( j > 0 ) res.append ( "," ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P14_Delete_Statement]^^1110^^^^^1100^1118^res.append ( "," ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^res.append ( subMatrixData[i][j] ) ;^1111^^^^^1100^1118^res.append ( data[i][j] ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P14_Delete_Statement]^^1111^^^^^1100^1118^res.append ( data[i][j] ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^trace = trace.add ( data[i][i] ) ;res.append ( data[i][j] ) ;^1111^^^^^1100^1118^res.append ( data[i][j] ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^res.append ( "," ) ;res.append ( data[i][j] ) ;^1111^^^^^1100^1118^res.append ( data[i][j] ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^res.append ( "{" ) ;res.append ( data[i][j] ) ;^1111^^^^^1100^1118^res.append ( data[i][j] ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^res.append ( "BigMatrixImpl{" ) ;res.append ( data[i][j] ) ;^1111^^^^^1100^1118^res.append ( data[i][j] ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^res.append ( "}" ) ;res.append ( data[i][j] ) ;^1111^^^^^1100^1118^res.append ( data[i][j] ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  short  j = 0; j < data[0].length; j++ )  {^1108^^^^^1100^1118^for  ( int j = 0; j < data[0].length; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int j = 1; j < data[1].length; j++ )  {^1108^^^^^1100^1118^for  ( int j = 0; j < data[0].length; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^res.append ( "" ) ;^1107^^^^^1100^1118^res.append ( "{" ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P14_Delete_Statement]^^1107^^^^^1100^1118^res.append ( "{" ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^res.append ( "," ) ;res.append ( "{" ) ;^1107^^^^^1100^1118^res.append ( "{" ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^res.append ( data[i][j] ) ;res.append ( "{" ) ;^1107^^^^^1100^1118^res.append ( "{" ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^res.append ( "BigMatrixImpl{" ) ;res.append ( "{" ) ;^1107^^^^^1100^1118^res.append ( "{" ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^res.append ( "}" ) ;res.append ( "{" ) ;^1107^^^^^1100^1118^res.append ( "{" ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^res.append ( solution[i][j] ) ;^1111^^^^^1100^1118^res.append ( data[i][j] ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^res.append ( "" ) ;^1113^^^^^1100^1118^res.append ( "}" ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^res .append ( 0 )  ;^1113^^^^^1100^1118^res.append ( "}" ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P14_Delete_Statement]^^1113^^^^^1100^1118^res.append ( "}" ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^res.append ( "," ) ;res.append ( "}" ) ;^1113^^^^^1100^1118^res.append ( "}" ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^res.append ( "{" ) ;res.append ( "}" ) ;^1113^^^^^1100^1118^res.append ( "}" ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^res.append ( data[i][j] ) ;res.append ( "}" ) ;^1113^^^^^1100^1118^res.append ( "}" ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^res.append ( "BigMatrixImpl{" ) ;res.append ( "}" ) ;^1113^^^^^1100^1118^res.append ( "}" ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int j = 9; j < data[9].length; j++ )  {^1108^^^^^1100^1118^for  ( int j = 0; j < data[0].length; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int j = ; j < data[].length; j++ )  {^1108^^^^^1100^1118^for  ( int j = 0; j < data[0].length; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int r = 0; j < data[0].length; j++ )  {^1108^^^^^1100^1118^for  ( int j = 0; j < data[0].length; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int data = 0; j < j[0].length; j++ )  {^1108^^^^^1100^1118^for  ( int j = 0; j < data[0].length; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^for  ( int j = 0; j < subMatrixData[0].length; j++ )  {^1108^^^^^1100^1118^for  ( int j = 0; j < data[0].length; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^if  ( j > 1 ) res.append ( "," ) ;^1109^1110^^^^1100^1118^if  ( j > 0 ) res.append ( "," ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^if  ( j > 0 << 0 ) res.append ( "," ) ;^1109^1110^^^^1100^1118^if  ( j > 0 ) res.append ( "," ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^res .append ( 2 )  ;^1110^^^^^1100^1118^res.append ( "," ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^res.append ( outData[i][j] ) ;^1111^^^^^1100^1118^res.append ( data[i][j] ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  short  i = 0; i < data.length; i++ )  {^1104^^^^^1100^1118^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = rowDimension; i < data.length; i++ )  {^1104^^^^^1100^1118^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int j = 4; j < data[4].length; j++ )  {^1108^^^^^1100^1118^for  ( int j = 0; j < data[0].length; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^res .append ( null )  ;^1107^^^^^1100^1118^res.append ( "{" ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^res.append ( subMatrix[i][j] ) ;^1111^^^^^1100^1118^res.append ( data[i][j] ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^if  ( i > startColumn ) res.append ( "," ) ;^1105^1106^^^^1100^1118^if  ( i > 0 ) res.append ( "," ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^if  ( i > 3 ) res.append ( "," ) ;^1105^1106^^^^1100^1118^if  ( i > 0 ) res.append ( "," ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^if  ( j > scale ) res.append ( "," ) ;^1109^1110^^^^1100^1118^if  ( j > 0 ) res.append ( "," ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^if  ( nSum > 1 ) res.append ( "," ) ;^1109^1110^^^^1100^1118^if  ( j > 0 ) res.append ( "," ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  ( int i = 0; i > data.length; i++ )  {^1104^^^^^1100^1118^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = columnDimension; i < data.length; i++ )  {^1104^^^^^1100^1118^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = 1; i < data.length; i++ )  {^1104^^^^^1100^1118^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = 3; i < data.length; i++ )  {^1104^^^^^1100^1118^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = columnCount; i < data.length; i++ )  {^1104^^^^^1100^1118^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( nSumnt i = 0; i < data.length; i++ )  {^1104^^^^^1100^1118^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int i = 0; i < r; i++ )  {^1104^^^^^1100^1118^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int i = 0; i < outData.length; i++ )  {^1104^^^^^1100^1118^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int i = 0; i < data.length.length; i++ )  {^1104^^^^^1100^1118^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^for  ( nrowsnt i = 0; i < data.length; i++ )  {^1104^^^^^1100^1118^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^if  ( i > i ) res.append ( "," ) ;^1105^1106^^^^1100^1118^if  ( i > 0 ) res.append ( "," ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( nSum > 0 ) res.append ( "," ) ;^1105^1106^^^^1100^1118^if  ( i > 0 ) res.append ( "," ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^if  ( i > 0 << 4 ) res.append ( "," ) ;^1105^1106^^^^1100^1118^if  ( i > 0 ) res.append ( "," ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^res .append ( 0 )  ;^1106^^^^^1100^1118^res.append ( "," ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( rowCount > 0 ) res.append ( "," ) ;^1109^1110^^^^1100^1118^if  ( j > 0 ) res.append ( "," ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^if  ( ncols > 2 ) res.append ( "," ) ;^1109^1110^^^^1100^1118^if  ( j > 0 ) res.append ( "," ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int j = -9; j < data[-9].length; j++ )  {^1108^^^^^1100^1118^for  ( int j = 0; j < data[0].length; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int j = nCol; j < data[nCol].length; j++ )  {^1108^^^^^1100^1118^for  ( int j = 0; j < data[0].length; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int j = columnCount; j < data[columnCount].length; j++ )  {^1108^^^^^1100^1118^for  ( int j = 0; j < data[0].length; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int nrows = 0; j < data[0].length; j++ )  {^1108^^^^^1100^1118^for  ( int j = 0; j < data[0].length; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( rnt j = 0; j < data[0].length; j++ )  {^1108^^^^^1100^1118^for  ( int j = 0; j < data[0].length; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int j = 0; j < data[0].length[0].length; j++ )  {^1108^^^^^1100^1118^for  ( int j = 0; j < data[0].length; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^if  ( j > -3 ) res.append ( "," ) ;^1109^1110^^^^1100^1118^if  ( j > 0 ) res.append ( "," ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^if  ( j > 0 / 1 ) res.append ( "," ) ;^1109^1110^^^^1100^1118^if  ( j > 0 ) res.append ( "," ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int j = nRows; j < data[nRows].length; j++ )  {^1108^^^^^1100^1118^for  ( int j = 0; j < data[0].length; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^res .append ( 1 )  ;^1106^^^^^1100^1118^res.append ( "," ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int j = j; j < data[j].length; j++ )  {^1108^^^^^1100^1118^for  ( int j = 0; j < data[0].length; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int j = parity; j < data[parity].length; j++ )  {^1108^^^^^1100^1118^for  ( int j = 0; j < data[0].length; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int j = rowCount; j < data[rowCount].length; j++ )  {^1108^^^^^1100^1118^for  ( int j = 0; j < data[0].length; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int nSum = 0; j < data[0].length; j++ )  {^1108^^^^^1100^1118^for  ( int j = 0; j < data[0].length; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^if  ( j < 0 ) res.append ( "," ) ;^1109^1110^^^^1100^1118^if  ( j > 0 ) res.append ( "," ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^if  ( j > parity ) res.append ( "," ) ;^1109^1110^^^^1100^1118^if  ( j > 0 ) res.append ( "," ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( parity > 0 ) res.append ( "," ) ;^1109^1110^^^^1100^1118^if  ( j > 0 ) res.append ( "," ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^if  ( j > 0 % 2 ) res.append ( "," ) ;^1109^1110^^^^1100^1118^if  ( j > 0 ) res.append ( "," ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = 8; i < data.length; i++ )  {^1104^^^^^1100^1118^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int j = -3; j < data[-3].length; j++ )  {^1108^^^^^1100^1118^for  ( int j = 0; j < data[0].length; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^res.append ( "" ) ;^1116^^^^^1100^1118^res.append ( "}" ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P14_Delete_Statement]^^1116^^^^^1100^1118^res.append ( "}" ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^res.append ( "," ) ;res.append ( "}" ) ;^1116^^^^^1100^1118^res.append ( "}" ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^res.append ( "{" ) ;res.append ( "}" ) ;^1116^^^^^1100^1118^res.append ( "}" ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^res.append ( data[i][j] ) ;res.append ( "}" ) ;^1116^^^^^1100^1118^res.append ( "}" ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^res.append ( "BigMatrixImpl{" ) ;res.append ( "}" ) ;^1116^^^^^1100^1118^res.append ( "}" ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^return res.append (  ) ;^1117^^^^^1100^1118^return res.toString (  ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^return res .StringBuffer (  )  ;^1117^^^^^1100^1118^return res.toString (  ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P14_Delete_Statement]^^1117^^^^^1100^1118^return res.toString (  ) ;^[CLASS] BigMatrixImpl  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  res  boolean  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^if  ( object != this  )  {^1130^^^^^1129^1150^if  ( object == this  )  {^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P15_Unwrap_Block]^return true;^1130^1131^1132^^^1129^1150^if  ( object == this  )  { return true; }^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P16_Remove_Block]^^1130^1131^1132^^^1129^1150^if  ( object == this  )  { return true; }^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^return false;^1131^^^^^1129^1150^return true;^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^if  ( object instanceof BigMatrixImpl != false )  {^1133^^^^^1129^1150^if  ( object instanceof BigMatrixImpl == false )  {^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^if  ( object  >=  BigMatrixImpl == false )  {^1133^^^^^1129^1150^if  ( object instanceof BigMatrixImpl == false )  {^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^if  ( object instanceof BigMatrixImpl == true )  {^1133^^^^^1129^1150^if  ( object instanceof BigMatrixImpl == false )  {^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P6_Replace_Expression]^if  ( object instanceof BigMatrixImpl )  {^1133^^^^^1129^1150^if  ( object instanceof BigMatrixImpl == false )  {^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P15_Unwrap_Block]^return false;^1133^1134^1135^^^1129^1150^if  ( object instanceof BigMatrixImpl == false )  { return false; }^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P16_Remove_Block]^^1133^1134^1135^^^1129^1150^if  ( object instanceof BigMatrixImpl == false )  { return false; }^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^return true;^1134^^^^^1129^1150^return false;^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigMatrixImpl outMat = new BigMatrixImpl ( bp ) ;BigMatrix m =  ( BigMatrix )  object;^1136^^^^^1129^1150^BigMatrix m =  ( BigMatrix )  object;^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigMatrix bMatrix = new BigMatrixImpl ( b ) ;BigMatrix m =  ( BigMatrix )  object;^1136^^^^^1129^1150^BigMatrix m =  ( BigMatrix )  object;^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P1_Replace_Type]^long  nRows = getRowDimension (  ) ;^1137^^^^^1129^1150^int nRows = getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^int nRows = getColumnDimension (  ) ;^1137^^^^^1129^1150^int nRows = getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = this.getColumnDimension (  ) ;int nRows = getRowDimension (  ) ;^1137^^^^^1129^1150^int nRows = getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCol = this.getColumnDimension (  ) ;int nRows = getRowDimension (  ) ;^1137^^^^^1129^1150^int nRows = getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int columnCount = this.getColumnDimension (  ) ;int nRows = getRowDimension (  ) ;^1137^^^^^1129^1150^int nRows = getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nrows = this.getRowDimension (  ) ;int nRows = getRowDimension (  ) ;^1137^^^^^1129^1150^int nRows = getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nColB = b.getColumnDimension (  ) ;int nRows = getRowDimension (  ) ;^1137^^^^^1129^1150^int nRows = getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = getColumnDimension (  ) ;int nRows = getRowDimension (  ) ;^1137^^^^^1129^1150^int nRows = getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRowB = b.getRowDimension (  ) ;int nRows = getRowDimension (  ) ;^1137^^^^^1129^1150^int nRows = getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int rowCount = this.getRowDimension (  ) ;int nRows = getRowDimension (  ) ;^1137^^^^^1129^1150^int nRows = getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int ncols = this.getColumnDimension (  ) ;int nRows = getRowDimension (  ) ;^1137^^^^^1129^1150^int nRows = getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRows = this.getRowDimension (  ) ;int nRows = getRowDimension (  ) ;^1137^^^^^1129^1150^int nRows = getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nSum = this.getColumnDimension (  ) ;int nRows = getRowDimension (  ) ;^1137^^^^^1129^1150^int nRows = getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = m.getColumnDimension (  ) ;int nRows = getRowDimension (  ) ;^1137^^^^^1129^1150^int nRows = getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P14_Delete_Statement]^^1137^^^^^1129^1150^int nRows = getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^( this.getRowDimension (  )  )  ) ;int nRows = getRowDimension (  ) ;^1137^^^^^1129^1150^int nRows = getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P1_Replace_Type]^short  nCols = getColumnDimension (  ) ;^1138^^^^^1129^1150^int nCols = getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^int nCols = getRowDimension (  ) ;^1138^^^^^1129^1150^int nCols = getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = this.getColumnDimension (  ) ;int nCols = getColumnDimension (  ) ;^1138^^^^^1129^1150^int nCols = getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCol = this.getColumnDimension (  ) ;int nCols = getColumnDimension (  ) ;^1138^^^^^1129^1150^int nCols = getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int columnCount = this.getColumnDimension (  ) ;int nCols = getColumnDimension (  ) ;^1138^^^^^1129^1150^int nCols = getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRows = getRowDimension (  ) ;int nCols = getColumnDimension (  ) ;^1138^^^^^1129^1150^int nCols = getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nrows = this.getRowDimension (  ) ;int nCols = getColumnDimension (  ) ;^1138^^^^^1129^1150^int nCols = getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nColB = b.getColumnDimension (  ) ;int nCols = getColumnDimension (  ) ;^1138^^^^^1129^1150^int nCols = getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRowB = b.getRowDimension (  ) ;int nCols = getColumnDimension (  ) ;^1138^^^^^1129^1150^int nCols = getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int rowCount = this.getRowDimension (  ) ;int nCols = getColumnDimension (  ) ;^1138^^^^^1129^1150^int nCols = getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int ncols = this.getColumnDimension (  ) ;int nCols = getColumnDimension (  ) ;^1138^^^^^1129^1150^int nCols = getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRows = this.getRowDimension (  ) ;int nCols = getColumnDimension (  ) ;^1138^^^^^1129^1150^int nCols = getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nSum = this.getColumnDimension (  ) ;int nCols = getColumnDimension (  ) ;^1138^^^^^1129^1150^int nCols = getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = m.getColumnDimension (  ) ;int nCols = getColumnDimension (  ) ;^1138^^^^^1129^1150^int nCols = getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P12_Insert_Condition]^if  ( v.length != this.getColumnDimension (  )  )  { int nCols = getColumnDimension (  ) ; }^1138^^^^^1129^1150^int nCols = getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P12_Insert_Condition]^if  ( rowDimension <=0 || columnDimension <=0 )  { int nCols = getColumnDimension (  ) ; }^1138^^^^^1129^1150^int nCols = getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P14_Delete_Statement]^^1138^^^^^1129^1150^int nCols = getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^if  ( m.getColumnDimension (  )  != nCols && m.getRowDimension (  )  != nRows )  {^1139^^^^^1129^1150^if  ( m.getColumnDimension (  )  != nCols || m.getRowDimension (  )  != nRows )  {^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^if  ( m.getColumnDimension (  )  > nCols || m.getRowDimension (  )  != nRows )  {^1139^^^^^1129^1150^if  ( m.getColumnDimension (  )  != nCols || m.getRowDimension (  )  != nRows )  {^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^if  ( m.getColumnDimension (  )  != nCols || m.getRowDimension (  )  == nRows )  {^1139^^^^^1129^1150^if  ( m.getColumnDimension (  )  != nCols || m.getRowDimension (  )  != nRows )  {^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( m.getColumnDimension (  )  != parity || m.getRowDimension (  )  != nRows )  {^1139^^^^^1129^1150^if  ( m.getColumnDimension (  )  != nCols || m.getRowDimension (  )  != nRows )  {^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( m.getColumnDimension (  )  != nCols || m.getRowDimension (  )  != parity )  {^1139^^^^^1129^1150^if  ( m.getColumnDimension (  )  != nCols || m.getRowDimension (  )  != nRows )  {^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( nCols.getColumnDimension (  )  != m || m.getRowDimension (  )  != nRows )  {^1139^^^^^1129^1150^if  ( m.getColumnDimension (  )  != nCols || m.getRowDimension (  )  != nRows )  {^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( m.getColumnDimension (  )  != nRows || m.getRowDimension (  )  != nCols )  {^1139^^^^^1129^1150^if  ( m.getColumnDimension (  )  != nCols || m.getRowDimension (  )  != nRows )  {^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P6_Replace_Expression]^if  ( m.getColumnDimension (  )  != nCols ) {^1139^^^^^1129^1150^if  ( m.getColumnDimension (  )  != nCols || m.getRowDimension (  )  != nRows )  {^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P6_Replace_Expression]^if  (  m.getRowDimension (  )  != nRows )  {^1139^^^^^1129^1150^if  ( m.getColumnDimension (  )  != nCols || m.getRowDimension (  )  != nRows )  {^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^if  ( m.multiply (  )  != nCols || m.getRowDimension (  )  != nRows )  {^1139^^^^^1129^1150^if  ( m.getColumnDimension (  )  != nCols || m.getRowDimension (  )  != nRows )  {^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^if  ( m .getRowDimension (  )   != nCols || m.getRowDimension (  )  != nRows )  {^1139^^^^^1129^1150^if  ( m.getColumnDimension (  )  != nCols || m.getRowDimension (  )  != nRows )  {^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^if  ( m.getColumnDimension (  )  != nCols || m.multiply (  )  != nRows )  {^1139^^^^^1129^1150^if  ( m.getColumnDimension (  )  != nCols || m.getRowDimension (  )  != nRows )  {^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^if  (  m.getRowDimension (  )  != ncols )  {^1139^^^^^1129^1150^if  ( m.getColumnDimension (  )  != nCols || m.getRowDimension (  )  != nRows )  {^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  ( this.getColumnDimension (  )  != m.getRowDimension (  )  )  {^1139^^^^^1129^1150^if  ( m.getColumnDimension (  )  != nCols || m.getRowDimension (  )  != nRows )  {^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  ( b.getRowDimension (  )  != this.getRowDimension (  )  )  {^1139^^^^^1129^1150^if  ( m.getColumnDimension (  )  != nCols || m.getRowDimension (  )  != nRows )  {^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P15_Unwrap_Block]^return false;^1139^1140^1141^^^1129^1150^if  ( m.getColumnDimension (  )  != nCols || m.getRowDimension (  )  != nRows )  { return false; }^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P16_Remove_Block]^^1139^1140^1141^^^1129^1150^if  ( m.getColumnDimension (  )  != nCols || m.getRowDimension (  )  != nRows )  { return false; }^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^return true;^1140^^^^^1129^1150^return false;^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^if  ( m.getColumnDimension (  )  != nCols || m .getColumnDimension (  )   != nRows )  {^1139^^^^^1129^1150^if  ( m.getColumnDimension (  )  != nCols || m.getRowDimension (  )  != nRows )  {^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( !data[row][col].equals ( m.getEntry ( nrows, col )  )  )  {^1144^^^^^1129^1150^if  ( !data[row][col].equals ( m.getEntry ( row, col )  )  )  {^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( !data[row][col].equals ( m.getEntry ( row, nrows )  )  )  {^1144^^^^^1129^1150^if  ( !data[row][col].equals ( m.getEntry ( row, col )  )  )  {^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( !data[row][col].equals ( m.getEntry (  col )  )  )  {^1144^^^^^1129^1150^if  ( !data[row][col].equals ( m.getEntry ( row, col )  )  )  {^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( !data[row][col].equals ( m.getEntry ( row )  )  )  {^1144^^^^^1129^1150^if  ( !data[row][col].equals ( m.getEntry ( row, col )  )  )  {^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( !data[row][col].equals ( m.getEntry ( col, row )  )  )  {^1144^^^^^1129^1150^if  ( !data[row][col].equals ( m.getEntry ( row, col )  )  )  {^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( !data[row][col].equals ( col.getEntry ( row, m )  )  )  {^1144^^^^^1129^1150^if  ( !data[row][col].equals ( m.getEntry ( row, col )  )  )  {^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^if  ( !data[row][col].equals ( m.getEntry ( row, nSum )  )  )  {^1144^^^^^1129^1150^if  ( !data[row][col].equals ( m.getEntry ( row, col )  )  )  {^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P15_Unwrap_Block]^return false;^1144^1145^1146^^^1129^1150^if  ( !data[row][col].equals ( m.getEntry ( row, col )  )  )  { return false; }^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P16_Remove_Block]^^1144^1145^1146^^^1129^1150^if  ( !data[row][col].equals ( m.getEntry ( row, col )  )  )  { return false; }^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^return true;^1145^^^^^1129^1150^return false;^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  short  row = 0; row < nRows; row++ )  {^1142^^^^^1129^1150^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  ( int row = 0; row <= nRows; row++ )  {^1142^^^^^1129^1150^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  ( int row = 0; row > nRows; row++ )  {^1142^^^^^1129^1150^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int row = endColumn; row < nRows; row++ )  {^1142^^^^^1129^1150^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int row = ; row < nRows; row++ )  {^1142^^^^^1129^1150^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int roundingMode = 0; row < nRows; row++ )  {^1142^^^^^1129^1150^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int row = 0; row < ncols; row++ )  {^1142^^^^^1129^1150^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( !data[row][col].equals ( m.getEntry ( ncols, col )  )  )  {^1144^^^^^1129^1150^if  ( !data[row][col].equals ( m.getEntry ( row, col )  )  )  {^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( !data[row][col].equals ( row.getEntry ( m, col )  )  )  {^1144^^^^^1129^1150^if  ( !data[row][col].equals ( m.getEntry ( row, col )  )  )  {^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^if  ( !data[row][col].equals ( m .getRowDimension (  )   )  )  {^1144^^^^^1129^1150^if  ( !data[row][col].equals ( m.getEntry ( row, col )  )  )  {^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  long  col = 0; col < nCols; col++ )  {^1143^^^^^1129^1150^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  ( int col = 0; col <= nCols; col++ )  {^1143^^^^^1129^1150^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int col = 4; col < nCols; col++ )  {^1143^^^^^1129^1150^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int nSum = 0; col < nCols; col++ )  {^1143^^^^^1129^1150^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int col = 0; col < ncols; col++ )  {^1143^^^^^1129^1150^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int nCols = 0; col < col; col++ )  {^1143^^^^^1129^1150^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( !data[row][col].equals ( m.getEntry ( rowDimension, col )  )  )  {^1144^^^^^1129^1150^if  ( !data[row][col].equals ( m.getEntry ( row, col )  )  )  {^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^if  ( !data[row][col] .setScale ( max )   )  {^1144^^^^^1129^1150^if  ( !data[row][col].equals ( m.getEntry ( row, col )  )  )  {^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^if  ( !data[row][col].equals ( m.getEntry ( rowCount, col )  )  )  {^1144^^^^^1129^1150^if  ( !data[row][col].equals ( m.getEntry ( row, col )  )  )  {^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( !data[row][col].equals ( m.getEntry ( nSum, col )  )  )  {^1144^^^^^1129^1150^if  ( !data[row][col].equals ( m.getEntry ( row, col )  )  )  {^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^if  ( !data[row][col].equals ( m.getEntry ( row, parity )  )  )  {^1144^^^^^1129^1150^if  ( !data[row][col].equals ( m.getEntry ( row, col )  )  )  {^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P13_Insert_Block]^if  ( ! ( data[row][col].equals ( m.getEntry ( row, col )  )  )  )  {     return false; }^1144^^^^^1129^1150^[Delete]^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( !data[row][col].equals ( m.getEntry ( parity, col )  )  )  {^1144^^^^^1129^1150^if  ( !data[row][col].equals ( m.getEntry ( row, col )  )  )  {^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( !data[row][col].equals ( m.getEntry ( row, rowDimension )  )  )  {^1144^^^^^1129^1150^if  ( !data[row][col].equals ( m.getEntry ( row, col )  )  )  {^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int col = 5; col < nCols; col++ )  {^1143^^^^^1129^1150^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( !data[row][col].equals ( m.getEntry ( nRows, col )  )  )  {^1144^^^^^1129^1150^if  ( !data[row][col].equals ( m.getEntry ( row, col )  )  )  {^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^if  ( !data[row][col].equals ( m.getEntry ( r, col )  )  )  {^1144^^^^^1129^1150^if  ( !data[row][col].equals ( m.getEntry ( row, col )  )  )  {^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int col = nrows; col < nCols; col++ )  {^1143^^^^^1129^1150^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int ncols = 0; col < nCols; col++ )  {^1143^^^^^1129^1150^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int col = 0; col < roundingMode; col++ )  {^1143^^^^^1129^1150^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^for  ( int col = 0; col < rowDimension; col++ )  {^1143^^^^^1129^1150^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( !data[row][col].equals ( m.getEntry ( row, ncols )  )  )  {^1144^^^^^1129^1150^if  ( !data[row][col].equals ( m.getEntry ( row, col )  )  )  {^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^if  ( !data[row][col] .setScale ( columnDimension )   )  {^1144^^^^^1129^1150^if  ( !data[row][col].equals ( m.getEntry ( row, col )  )  )  {^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int row = 5; row < nRows; row++ )  {^1142^^^^^1129^1150^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  short  col = 0; col < nCols; col++ )  {^1143^^^^^1129^1150^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int col = 6; col < nCols; col++ )  {^1143^^^^^1129^1150^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^return false;^1149^^^^^1129^1150^return true;^[CLASS] BigMatrixImpl  [METHOD] equals [RETURN_TYPE] boolean   Object object [VARIABLES] boolean  BigMatrix  m  int[]  permutation  selectedColumns  selectedRows  Object  object  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P1_Replace_Type]^long  ret = 7;^1158^^^^^1157^1170^int ret = 7;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^int ret = 4;^1158^^^^^1157^1170^int ret = 7;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int max = col;int ret = 7;^1158^^^^^1157^1170^int ret = 7;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P1_Replace_Type]^short  nRows = getRowDimension (  ) ;^1159^^^^^1157^1170^int nRows = getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^int nRows = getColumnDimension (  ) ;^1159^^^^^1157^1170^int nRows = getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = this.getColumnDimension (  ) ;int nRows = getRowDimension (  ) ;^1159^^^^^1157^1170^int nRows = getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCol = this.getColumnDimension (  ) ;int nRows = getRowDimension (  ) ;^1159^^^^^1157^1170^int nRows = getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int columnCount = this.getColumnDimension (  ) ;int nRows = getRowDimension (  ) ;^1159^^^^^1157^1170^int nRows = getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nrows = this.getRowDimension (  ) ;int nRows = getRowDimension (  ) ;^1159^^^^^1157^1170^int nRows = getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nColB = b.getColumnDimension (  ) ;int nRows = getRowDimension (  ) ;^1159^^^^^1157^1170^int nRows = getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = getColumnDimension (  ) ;int nRows = getRowDimension (  ) ;^1159^^^^^1157^1170^int nRows = getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRowB = b.getRowDimension (  ) ;int nRows = getRowDimension (  ) ;^1159^^^^^1157^1170^int nRows = getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int rowCount = this.getRowDimension (  ) ;int nRows = getRowDimension (  ) ;^1159^^^^^1157^1170^int nRows = getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int ncols = this.getColumnDimension (  ) ;int nRows = getRowDimension (  ) ;^1159^^^^^1157^1170^int nRows = getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRows = this.getRowDimension (  ) ;int nRows = getRowDimension (  ) ;^1159^^^^^1157^1170^int nRows = getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nSum = this.getColumnDimension (  ) ;int nRows = getRowDimension (  ) ;^1159^^^^^1157^1170^int nRows = getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = m.getColumnDimension (  ) ;int nRows = getRowDimension (  ) ;^1159^^^^^1157^1170^int nRows = getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P14_Delete_Statement]^^1159^^^^^1157^1170^int nRows = getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^( this.getRowDimension (  )  )  ) ;int nRows = getRowDimension (  ) ;^1159^^^^^1157^1170^int nRows = getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P1_Replace_Type]^short  nCols = getColumnDimension (  ) ;^1160^^^^^1157^1170^int nCols = getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^int nCols = getRowDimension (  ) ;^1160^^^^^1157^1170^int nCols = getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = this.getColumnDimension (  ) ;int nCols = getColumnDimension (  ) ;^1160^^^^^1157^1170^int nCols = getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCol = this.getColumnDimension (  ) ;int nCols = getColumnDimension (  ) ;^1160^^^^^1157^1170^int nCols = getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int columnCount = this.getColumnDimension (  ) ;int nCols = getColumnDimension (  ) ;^1160^^^^^1157^1170^int nCols = getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRows = getRowDimension (  ) ;int nCols = getColumnDimension (  ) ;^1160^^^^^1157^1170^int nCols = getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nrows = this.getRowDimension (  ) ;int nCols = getColumnDimension (  ) ;^1160^^^^^1157^1170^int nCols = getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nColB = b.getColumnDimension (  ) ;int nCols = getColumnDimension (  ) ;^1160^^^^^1157^1170^int nCols = getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRowB = b.getRowDimension (  ) ;int nCols = getColumnDimension (  ) ;^1160^^^^^1157^1170^int nCols = getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int rowCount = this.getRowDimension (  ) ;int nCols = getColumnDimension (  ) ;^1160^^^^^1157^1170^int nCols = getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int ncols = this.getColumnDimension (  ) ;int nCols = getColumnDimension (  ) ;^1160^^^^^1157^1170^int nCols = getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRows = this.getRowDimension (  ) ;int nCols = getColumnDimension (  ) ;^1160^^^^^1157^1170^int nCols = getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nSum = this.getColumnDimension (  ) ;int nCols = getColumnDimension (  ) ;^1160^^^^^1157^1170^int nCols = getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = m.getColumnDimension (  ) ;int nCols = getColumnDimension (  ) ;^1160^^^^^1157^1170^int nCols = getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P12_Insert_Condition]^if  ( v.length != this.getColumnDimension (  )  )  { int nCols = getColumnDimension (  ) ; }^1160^^^^^1157^1170^int nCols = getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P12_Insert_Condition]^if  ( rowDimension <=0 || columnDimension <=0 )  { int nCols = getColumnDimension (  ) ; }^1160^^^^^1157^1170^int nCols = getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P14_Delete_Statement]^^1160^^^^^1157^1170^int nCols = getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^ret = ret + 31 + nRows;^1161^^^^^1157^1170^ret = ret * 31 + nRows;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^ret = ret * 32 + nRows;^1161^^^^^1157^1170^ret = ret * 31 + nRows;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^ret = ncols * 31 + nRows;^1161^^^^^1157^1170^ret = ret * 31 + nRows;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^ret = ret * 31 + parity;^1161^^^^^1157^1170^ret = ret * 31 + nRows;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^ret = nRows * 31 + ret;^1161^^^^^1157^1170^ret = ret * 31 + nRows;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^ret = ret * 26 + nRows;^1161^^^^^1157^1170^ret = ret * 31 + nRows;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^ret = ret * 31 + nCols;ret = ret * 31 + nRows;^1161^^^^^1157^1170^ret = ret * 31 + nRows;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^ret = ret / 31 + nCols;^1162^^^^^1157^1170^ret = ret * 31 + nCols;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^ret = ret * startColumn + nCols;^1162^^^^^1157^1170^ret = ret * 31 + nCols;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^ret = r * 31 + nCols;^1162^^^^^1157^1170^ret = ret * 31 + nCols;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^ret = ret * 31 + ncols;^1162^^^^^1157^1170^ret = ret * 31 + nCols;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^ret = nCols * 31 + ret;^1162^^^^^1157^1170^ret = ret * 31 + nCols;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^ret = ret * 3 + nCols;^1162^^^^^1157^1170^ret = ret * 31 + nCols;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^ret = ret * 31 + nRows;ret = ret * 31 + nCols;^1162^^^^^1157^1170^ret = ret * 31 + nCols;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  long  row = 0; row < nRows; row++ )  {^1163^^^^^1157^1170^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  ( int row = 0; row <= nRows; row++ )  {^1163^^^^^1157^1170^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  &&  ( int row = 0; row < nRows; row++ )  {^1163^^^^^1157^1170^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  ||  ( int row = 0; row < nRows; row++ )  {^1163^^^^^1157^1170^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  >>  ( int row = 0; row < nRows; row++ )  {^1163^^^^^1157^1170^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  ==  ( int row = 0; row < nRows; row++ )  {^1163^^^^^1157^1170^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int row = roundingMode; row < nRows; row++ )  {^1163^^^^^1157^1170^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int row = 2; row < nRows; row++ )  {^1163^^^^^1157^1170^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int ncols = 0; row < nRows; row++ )  {^1163^^^^^1157^1170^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int row = 0; row < roundingMode; row++ )  {^1163^^^^^1157^1170^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^for  ( int row = 0; row < nrows; row++ )  {^1163^^^^^1157^1170^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  short  col = 0; col < nCols; col++ )  {^1164^^^^^1157^1170^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  ( int col = 0; col <= nCols; col++ )  {^1164^^^^^1157^1170^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  >  ( int col = 0; col < nCols; col++ )  {^1164^^^^^1157^1170^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  |  ( int col = 0; col < nCols; col++ )  {^1164^^^^^1157^1170^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  !=  ( int col = 0; col < nCols; col++ )  {^1164^^^^^1157^1170^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  ||  ( int col = 0; col < nCols; col++ )  {^1164^^^^^1157^1170^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int col = row; col < nCols; col++ )  {^1164^^^^^1157^1170^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int ret = 0; col < nCols; col++ )  {^1164^^^^^1157^1170^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int col = 0; col < temp; col++ )  {^1164^^^^^1157^1170^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int nCols = 0; col < col; col++ )  {^1164^^^^^1157^1170^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^for  ( int parity = 0; col < nCols; col++ )  {^1164^^^^^1157^1170^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^ret = ret * 31 +  ||  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^1165^1166^^^^1157^1170^ret = ret * 31 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^ret = ret - 31 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^1165^1166^^^^1157^1170^ret = ret * 31 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^ret + = ret * 31 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^1165^1166^^^^1157^1170^ret = ret * 31 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^ret = ret * 31 +   instanceof   ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^1165^1166^^^^1157^1170^ret = ret * 31 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^ret - = ret * 31 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^1165^1166^^^^1157^1170^ret = ret * 31 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^ret = ret * 31 +  &  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^1165^1166^^^^1157^1170^ret = ret * 31 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^ret = ret * 31 +  >=  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^1165^1166^^^^1157^1170^ret = ret * 31 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^ret = ret * nRows +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^1165^1166^^^^1157^1170^ret = ret * 31 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^ret = ret * 31 +  ( 3 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^1165^1166^^^^1157^1170^ret = ret * 31 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^ret = ret * 3column +  ( columncolumn *  ( row+column )  + column7 *  ( col+column )  )  * data[row][col].hashCode (  ) ;^1165^1166^^^^1157^1170^ret = ret * 31 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^ret = ret * 31 +  ( 11 *  ( row+1 )  + startRow *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^1165^1166^^^^1157^1170^ret = ret * 31 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^ret = ret * 31 +  ( 11 *  ( row+1 )  7 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^1165^1166^^^^1157^1170^ret = ret * 31 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^ret = roundingMode * 31 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^1165^1166^^^^1157^1170^ret = ret * 31 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^ret = ret * 31 +  ( 11 *  ( ncols+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^1165^1166^^^^1157^1170^ret = ret * 31 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^ret = ret * 31 +  ( 11 *  ( row+1 )  + 17 *  ( parity+1 )  )  * data[row][col].hashCode (  ) ;^1165^1166^^^^1157^1170^ret = ret * 31 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^ret = ret * 31 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * subMatrixData[row][col].hashCode (  ) ;^1165^1166^^^^1157^1170^ret = ret * 31 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^ret = row * 31 +  ( 11 *  ( ret+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^1165^1166^^^^1157^1170^ret = ret * 31 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^ret = ret * 31 +  ( 11 *  ( col+1 )  + 17 *  ( row+1 )  )  * data[row][col].hashCode (  ) ;^1165^1166^^^^1157^1170^ret = ret * 31 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^ret = ret * 31 +  ( 11 *  ( data+1 )  + 17 *  ( col+1 )  )  * row[row][col].hashCode (  ) ;^1165^1166^^^^1157^1170^ret = ret * 31 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^ret = ret * 0 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^1165^1166^^^^1157^1170^ret = ret * 31 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P14_Delete_Statement]^^1166^^^^^1157^1170^data[row][col].hashCode (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^outData[row][col] = data[row][col].add ( d ) ;data[row][col].hashCode (  ) ;^1166^^^^^1157^1170^data[row][col].hashCode (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^ret = ret + 31 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^1165^1166^^^^1157^1170^ret = ret * 31 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^ret = ret * 31 +  ^  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^1165^1166^^^^1157^1170^ret = ret * 31 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^ret = ret * 31 +  |  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^1165^1166^^^^1157^1170^ret = ret * 31 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^ret / = ret * 31 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^1165^1166^^^^1157^1170^ret = ret * 31 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^ret = ret * 27 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^1165^1166^^^^1157^1170^ret = ret * 31 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^ret = ret * 31 +  ( rowCount *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^1165^1166^^^^1157^1170^ret = ret * 31 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^ret = ret * 31 +  ( 11 *  ( row+1 )  + j *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^1165^1166^^^^1157^1170^ret = ret * 31 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^ret = ret * 3nRows +  ( nRowsnRows *  ( row+nRows )  + nRows7 *  ( col+nRows )  )  * data[row][col].hashCode (  ) ;^1165^1166^^^^1157^1170^ret = ret * 31 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^ret = nrows * 31 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^1165^1166^^^^1157^1170^ret = ret * 31 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^ret = ret * 31 +  ( 11 *  ( row+1 )  + 17 *  ( nrows+1 )  )  * data[row][col].hashCode (  ) ;^1165^1166^^^^1157^1170^ret = ret * 31 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^ret = ret * 31 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * outData[row][col].hashCode (  ) ;^1165^1166^^^^1157^1170^ret = ret * 31 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^ret = ret * 31 +  ( 11 *  ( row+1 )  + 17 *  ( data+1 )  )  * col[row][col].hashCode (  ) ;^1165^1166^^^^1157^1170^ret = ret * 31 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^ret = data * 31 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * ret[row][col].hashCode (  ) ;^1165^1166^^^^1157^1170^ret = ret * 31 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^ret = ret * 1 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^1165^1166^^^^1157^1170^ret = ret * 31 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  long  col = 0; col < nCols; col++ )  {^1164^^^^^1157^1170^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int col = 3; col < nCols; col++ )  {^1164^^^^^1157^1170^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^data[row][col] .add ( 2 )  ;^1166^^^^^1157^1170^data[row][col].hashCode (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  <<  ( int col = 0; col < nCols; col++ )  {^1164^^^^^1157^1170^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  <  ( int col = 0; col < nCols; col++ )  {^1164^^^^^1157^1170^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int col = 6; col < nCols; col++ )  {^1164^^^^^1157^1170^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int roundingMode = 0; col < nCols; col++ )  {^1164^^^^^1157^1170^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int col = 0; col < ret; col++ )  {^1164^^^^^1157^1170^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^for  ( int ncols = 0; col < nCols; col++ )  {^1164^^^^^1157^1170^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^ret = ret * 31 +  <  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^1165^1166^^^^1157^1170^ret = ret * 31 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^ret = ret * 31 +  <<  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^1165^1166^^^^1157^1170^ret = ret * 31 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^ret = ret * 33 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^1165^1166^^^^1157^1170^ret = ret * 31 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^ret = ret * 31 +  ( scale *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^1165^1166^^^^1157^1170^ret = ret * 31 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^ret = ret * 31 +  ( 11 *  ( row+1 )   *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^1165^1166^^^^1157^1170^ret = ret * 31 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^ret = ret * 3ret +  ( retret *  ( row+ret )  + ret7 *  ( col+ret )  )  * data[row][col].hashCode (  ) ;^1165^1166^^^^1157^1170^ret = ret * 31 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^ret = ncols * 31 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^1165^1166^^^^1157^1170^ret = ret * 31 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^ret = col * 31 +  ( 11 *  ( row+1 )  + 17 *  ( ret+1 )  )  * data[row][col].hashCode (  ) ;^1165^1166^^^^1157^1170^ret = ret * 31 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^ret = ret * 31 - 4 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^1165^1166^^^^1157^1170^ret = ret * 31 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^ret = ret / 31 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^1165^1166^^^^1157^1170^ret = ret * 31 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^ret = ret * 31 +  >>  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^1165^1166^^^^1157^1170^ret = ret * 31 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^ret = ret * 22 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^1165^1166^^^^1157^1170^ret = ret * 31 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^ret = ret * 31 +  ( 8 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^1165^1166^^^^1157^1170^ret = ret * 31 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^ret = ret * 31 +  ( 11 *  ( nSum+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^1165^1166^^^^1157^1170^ret = ret * 31 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^ret = ret * 31 +  ( 11 *  ( row+1 )  + 17 *  ( ncols+1 )  )  * data[row][col].hashCode (  ) ;^1165^1166^^^^1157^1170^ret = ret * 31 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^ret = ret * 3 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^1165^1166^^^^1157^1170^ret = ret * 31 +  ( 11 *  ( row+1 )  + 17 *  ( col+1 )  )  * data[row][col].hashCode (  ) ;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  short  row = 0; row < nRows; row++ )  {^1163^^^^^1157^1170^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int row = 7; row < nRows; row++ )  {^1163^^^^^1157^1170^for  ( int row = 0; row < nRows; row++ )  {^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int col = -1; col < nCols; col++ )  {^1164^^^^^1157^1170^for  ( int col = 0; col < nCols; col++ )  {^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^return nSum;^1169^^^^^1157^1170^return ret;^[CLASS] BigMatrixImpl  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^return MatrixUtils.createBigIdentityMatrix ( nSum ) ;^1183^^^^^1182^1184^return MatrixUtils.createBigIdentityMatrix ( dimension ) ;^[CLASS] BigMatrixImpl  [METHOD] getIdentity [RETURN_TYPE] BigMatrix   int dimension [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^return MatrixUtils.createBigIdentityMatrix ( ncols ) ;^1183^^^^^1182^1184^return MatrixUtils.createBigIdentityMatrix ( dimension ) ;^[CLASS] BigMatrixImpl  [METHOD] getIdentity [RETURN_TYPE] BigMatrix   int dimension [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P14_Delete_Statement]^^1183^^^^^1182^1184^return MatrixUtils.createBigIdentityMatrix ( dimension ) ;^[CLASS] BigMatrixImpl  [METHOD] getIdentity [RETURN_TYPE] BigMatrix   int dimension [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^if  ( lu != null )  {^1214^^^^^1213^1218^if  ( lu == null )  {^[CLASS] BigMatrixImpl  [METHOD] getLUMatrix [RETURN_TYPE] BigMatrix   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^if  ( subMatrixData == null )  {^1214^^^^^1213^1218^if  ( lu == null )  {^[CLASS] BigMatrixImpl  [METHOD] getLUMatrix [RETURN_TYPE] BigMatrix   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^if  ( lu == this )  {^1214^^^^^1213^1218^if  ( lu == null )  {^[CLASS] BigMatrixImpl  [METHOD] getLUMatrix [RETURN_TYPE] BigMatrix   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  ( data != null )  {^1214^^^^^1213^1218^if  ( lu == null )  {^[CLASS] BigMatrixImpl  [METHOD] getLUMatrix [RETURN_TYPE] BigMatrix   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  ( max != col )  {^1214^^^^^1213^1218^if  ( lu == null )  {^[CLASS] BigMatrixImpl  [METHOD] getLUMatrix [RETURN_TYPE] BigMatrix   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P9_Replace_Statement]^if  ( data == null )  {^1214^^^^^1213^1218^if  ( lu == null )  {^[CLASS] BigMatrixImpl  [METHOD] getLUMatrix [RETURN_TYPE] BigMatrix   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P15_Unwrap_Block]^luDecompose();^1214^1215^1216^^^1213^1218^if  ( lu == null )  { luDecompose (  ) ; }^[CLASS] BigMatrixImpl  [METHOD] getLUMatrix [RETURN_TYPE] BigMatrix   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P16_Remove_Block]^^1214^1215^1216^^^1213^1218^if  ( lu == null )  { luDecompose (  ) ; }^[CLASS] BigMatrixImpl  [METHOD] getLUMatrix [RETURN_TYPE] BigMatrix   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^copyOut (  ) ;^1215^^^^^1213^1218^luDecompose (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getLUMatrix [RETURN_TYPE] BigMatrix   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P14_Delete_Statement]^^1215^^^^^1213^1218^luDecompose (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getLUMatrix [RETURN_TYPE] BigMatrix   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^return copyOut (  ) ;luDecompose (  ) ;^1215^^^^^1213^1218^luDecompose (  ) ;^[CLASS] BigMatrixImpl  [METHOD] getLUMatrix [RETURN_TYPE] BigMatrix   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P4_Replace_Constructor]^return return  new BigMatrixImpl ( nCols, nRows )  ;^1217^^^^^1213^1218^return new BigMatrixImpl ( lu ) ;^[CLASS] BigMatrixImpl  [METHOD] getLUMatrix [RETURN_TYPE] BigMatrix   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^return new BigMatrixImpl ( subMatrixData ) ;^1217^^^^^1213^1218^return new BigMatrixImpl ( lu ) ;^[CLASS] BigMatrixImpl  [METHOD] getLUMatrix [RETURN_TYPE] BigMatrix   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^return  new BigMatrixImpl ( nCols, nRows )  ;^1217^^^^^1213^1218^return new BigMatrixImpl ( lu ) ;^[CLASS] BigMatrixImpl  [METHOD] getLUMatrix [RETURN_TYPE] BigMatrix   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^return new BigMatrixImpl ( outData ) ;^1217^^^^^1213^1218^return new BigMatrixImpl ( lu ) ;^[CLASS] BigMatrixImpl  [METHOD] getLUMatrix [RETURN_TYPE] BigMatrix   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^return new BigMatrixImpl ( solution ) ;^1217^^^^^1213^1218^return new BigMatrixImpl ( lu ) ;^[CLASS] BigMatrixImpl  [METHOD] getLUMatrix [RETURN_TYPE] BigMatrix   [VARIABLES] int[]  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^System.arraycopy ( permutation, 8, out, 8, permutation.length ) ;^1234^^^^^1232^1236^System.arraycopy ( permutation, 0, out, 0, permutation.length ) ;^[CLASS] BigMatrixImpl  [METHOD] getPermutation [RETURN_TYPE] int[]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^System.arraycopy ( permutation, -3, out, -3, permutation.length ) ;^1234^^^^^1232^1236^System.arraycopy ( permutation, 0, out, 0, permutation.length ) ;^[CLASS] BigMatrixImpl  [METHOD] getPermutation [RETURN_TYPE] int[]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^System.arraycopy ( permutation, 0, selectedRows, 0, permutation.length ) ;^1234^^^^^1232^1236^System.arraycopy ( permutation, 0, out, 0, permutation.length ) ;^[CLASS] BigMatrixImpl  [METHOD] getPermutation [RETURN_TYPE] int[]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^System.arraycopy ( selectedRows, 0, out, 0, permutation.length ) ;^1234^^^^^1232^1236^System.arraycopy ( permutation, 0, out, 0, permutation.length ) ;^[CLASS] BigMatrixImpl  [METHOD] getPermutation [RETURN_TYPE] int[]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^System.arraycopy ( permutation, 0, out, 0, nRows ) ;^1234^^^^^1232^1236^System.arraycopy ( permutation, 0, out, 0, permutation.length ) ;^[CLASS] BigMatrixImpl  [METHOD] getPermutation [RETURN_TYPE] int[]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^System.arraycopy ( permutation, 0,  0, permutation.length ) ;^1234^^^^^1232^1236^System.arraycopy ( permutation, 0, out, 0, permutation.length ) ;^[CLASS] BigMatrixImpl  [METHOD] getPermutation [RETURN_TYPE] int[]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^System.arraycopy (  0, out, 0, permutation.length ) ;^1234^^^^^1232^1236^System.arraycopy ( permutation, 0, out, 0, permutation.length ) ;^[CLASS] BigMatrixImpl  [METHOD] getPermutation [RETURN_TYPE] int[]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^System.arraycopy ( permutation, 0, out, 0 ) ;^1234^^^^^1232^1236^System.arraycopy ( permutation, 0, out, 0, permutation.length ) ;^[CLASS] BigMatrixImpl  [METHOD] getPermutation [RETURN_TYPE] int[]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^System.arraycopy ( permutation, 0, permutation.length, 0, out ) ;^1234^^^^^1232^1236^System.arraycopy ( permutation, 0, out, 0, permutation.length ) ;^[CLASS] BigMatrixImpl  [METHOD] getPermutation [RETURN_TYPE] int[]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^System.arraycopy ( out, 0, permutation, 0, permutation.length ) ;^1234^^^^^1232^1236^System.arraycopy ( permutation, 0, out, 0, permutation.length ) ;^[CLASS] BigMatrixImpl  [METHOD] getPermutation [RETURN_TYPE] int[]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P14_Delete_Statement]^^1234^^^^^1232^1236^System.arraycopy ( permutation, 0, out, 0, permutation.length ) ;^[CLASS] BigMatrixImpl  [METHOD] getPermutation [RETURN_TYPE] int[]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^System.arraycopy ( data[row], 0, out[0], 0, ncols ) ;System.arraycopy ( permutation, 0, out, 0, permutation.length ) ;^1234^^^^^1232^1236^System.arraycopy ( permutation, 0, out, 0, permutation.length ) ;^[CLASS] BigMatrixImpl  [METHOD] getPermutation [RETURN_TYPE] int[]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^System.arraycopy ( data[i], 0, out[i], 0, data[i].length ) ;System.arraycopy ( permutation, 0, out, 0, permutation.length ) ;^1234^^^^^1232^1236^System.arraycopy ( permutation, 0, out, 0, permutation.length ) ;^[CLASS] BigMatrixImpl  [METHOD] getPermutation [RETURN_TYPE] int[]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^System.arraycopy ( subMatrix, 0, data, 0, subMatrix.length ) ;System.arraycopy ( permutation, 0, out, 0, permutation.length ) ;^1234^^^^^1232^1236^System.arraycopy ( permutation, 0, out, 0, permutation.length ) ;^[CLASS] BigMatrixImpl  [METHOD] getPermutation [RETURN_TYPE] int[]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^System.arraycopy ( data[row], 0, out, 0, ncols ) ;System.arraycopy ( permutation, 0, out, 0, permutation.length ) ;^1234^^^^^1232^1236^System.arraycopy ( permutation, 0, out, 0, permutation.length ) ;^[CLASS] BigMatrixImpl  [METHOD] getPermutation [RETURN_TYPE] int[]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^return selectedRows;^1235^^^^^1232^1236^return out;^[CLASS] BigMatrixImpl  [METHOD] getPermutation [RETURN_TYPE] int[]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P1_Replace_Type]^long  nRows = this.getRowDimension (  ) ;^1246^^^^^1245^1253^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] copyOut [RETURN_TYPE] BigDecimal[][]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^int nRows = this.getColumnDimension (  ) ;^1246^^^^^1245^1253^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] copyOut [RETURN_TYPE] BigDecimal[][]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = this.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^1246^^^^^1245^1253^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] copyOut [RETURN_TYPE] BigDecimal[][]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCol = this.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^1246^^^^^1245^1253^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] copyOut [RETURN_TYPE] BigDecimal[][]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int columnCount = this.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^1246^^^^^1245^1253^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] copyOut [RETURN_TYPE] BigDecimal[][]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRows = getRowDimension (  ) ;int nRows = this.getRowDimension (  ) ;^1246^^^^^1245^1253^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] copyOut [RETURN_TYPE] BigDecimal[][]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nrows = this.getRowDimension (  ) ;int nRows = this.getRowDimension (  ) ;^1246^^^^^1245^1253^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] copyOut [RETURN_TYPE] BigDecimal[][]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nColB = b.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^1246^^^^^1245^1253^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] copyOut [RETURN_TYPE] BigDecimal[][]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^1246^^^^^1245^1253^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] copyOut [RETURN_TYPE] BigDecimal[][]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRowB = b.getRowDimension (  ) ;int nRows = this.getRowDimension (  ) ;^1246^^^^^1245^1253^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] copyOut [RETURN_TYPE] BigDecimal[][]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int rowCount = this.getRowDimension (  ) ;int nRows = this.getRowDimension (  ) ;^1246^^^^^1245^1253^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] copyOut [RETURN_TYPE] BigDecimal[][]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int ncols = this.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^1246^^^^^1245^1253^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] copyOut [RETURN_TYPE] BigDecimal[][]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nSum = this.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^1246^^^^^1245^1253^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] copyOut [RETURN_TYPE] BigDecimal[][]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = m.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^1246^^^^^1245^1253^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] copyOut [RETURN_TYPE] BigDecimal[][]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P12_Insert_Condition]^if  ( b.getRowDimension (  )  != this.getRowDimension (  )  )  { int nRows = this.getRowDimension (  ) ; }^1246^^^^^1245^1253^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] copyOut [RETURN_TYPE] BigDecimal[][]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P12_Insert_Condition]^if  ( v.length != this.getColumnDimension (  )  )  { int nRows = this.getRowDimension (  ) ; }^1246^^^^^1245^1253^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] copyOut [RETURN_TYPE] BigDecimal[][]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P14_Delete_Statement]^^1246^1247^^^^1245^1253^int nRows = this.getRowDimension (  ) ; BigDecimal[][] out = new BigDecimal[nRows][this.getColumnDimension (  ) ];^[CLASS] BigMatrixImpl  [METHOD] copyOut [RETURN_TYPE] BigDecimal[][]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^( this.getRowDimension (  )  )  ) ;int nRows = this.getRowDimension (  ) ;^1246^^^^^1245^1253^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] copyOut [RETURN_TYPE] BigDecimal[][]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^BigDecimal[][] out = new BigDecimal[nRows][this.getRowDimension (  ) ];^1247^^^^^1245^1253^BigDecimal[][] out = new BigDecimal[nRows][this.getColumnDimension (  ) ];^[CLASS] BigMatrixImpl  [METHOD] copyOut [RETURN_TYPE] BigDecimal[][]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int columnCount = this.getColumnDimension (  ) ;BigDecimal[][] out = new BigDecimal[nRows][this.getColumnDimension (  ) ];^1247^^^^^1245^1253^BigDecimal[][] out = new BigDecimal[nRows][this.getColumnDimension (  ) ];^[CLASS] BigMatrixImpl  [METHOD] copyOut [RETURN_TYPE] BigDecimal[][]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[] out = new BigDecimal[v.length];BigDecimal[][] out = new BigDecimal[nRows][this.getColumnDimension (  ) ];^1247^^^^^1245^1253^BigDecimal[][] out = new BigDecimal[nRows][this.getColumnDimension (  ) ];^[CLASS] BigMatrixImpl  [METHOD] copyOut [RETURN_TYPE] BigDecimal[][]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[][] out = new BigDecimal[nRows][1];BigDecimal[][] out = new BigDecimal[nRows][this.getColumnDimension (  ) ];^1247^^^^^1245^1253^BigDecimal[][] out = new BigDecimal[nRows][this.getColumnDimension (  ) ];^[CLASS] BigMatrixImpl  [METHOD] copyOut [RETURN_TYPE] BigDecimal[][]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];BigDecimal[][] out = new BigDecimal[nRows][this.getColumnDimension (  ) ];^1247^^^^^1245^1253^BigDecimal[][] out = new BigDecimal[nRows][this.getColumnDimension (  ) ];^[CLASS] BigMatrixImpl  [METHOD] copyOut [RETURN_TYPE] BigDecimal[][]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[] out = new BigDecimal[nRows];BigDecimal[][] out = new BigDecimal[nRows][this.getColumnDimension (  ) ];^1247^^^^^1245^1253^BigDecimal[][] out = new BigDecimal[nRows][this.getColumnDimension (  ) ];^[CLASS] BigMatrixImpl  [METHOD] copyOut [RETURN_TYPE] BigDecimal[][]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[][] out = new BigDecimal[1][ncols];BigDecimal[][] out = new BigDecimal[nRows][this.getColumnDimension (  ) ];^1247^^^^^1245^1253^BigDecimal[][] out = new BigDecimal[nRows][this.getColumnDimension (  ) ];^[CLASS] BigMatrixImpl  [METHOD] copyOut [RETURN_TYPE] BigDecimal[][]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[] out = new BigDecimal[nCols];BigDecimal[][] out = new BigDecimal[nRows][this.getColumnDimension (  ) ];^1247^^^^^1245^1253^BigDecimal[][] out = new BigDecimal[nRows][this.getColumnDimension (  ) ];^[CLASS] BigMatrixImpl  [METHOD] copyOut [RETURN_TYPE] BigDecimal[][]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[][] outData = new BigDecimal[nRows][nCols];BigDecimal[][] out = new BigDecimal[nRows][this.getColumnDimension (  ) ];^1247^^^^^1245^1253^BigDecimal[][] out = new BigDecimal[nRows][this.getColumnDimension (  ) ];^[CLASS] BigMatrixImpl  [METHOD] copyOut [RETURN_TYPE] BigDecimal[][]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[] out = new BigDecimal[ncols];BigDecimal[][] out = new BigDecimal[nRows][this.getColumnDimension (  ) ];^1247^^^^^1245^1253^BigDecimal[][] out = new BigDecimal[nRows][this.getColumnDimension (  ) ];^[CLASS] BigMatrixImpl  [METHOD] copyOut [RETURN_TYPE] BigDecimal[][]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^BigDecimal[][] bp = new BigDecimal[nRowB][nColB];BigDecimal[][] out = new BigDecimal[nRows][this.getColumnDimension (  ) ];^1247^^^^^1245^1253^BigDecimal[][] out = new BigDecimal[nRows][this.getColumnDimension (  ) ];^[CLASS] BigMatrixImpl  [METHOD] copyOut [RETURN_TYPE] BigDecimal[][]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P14_Delete_Statement]^^1247^^^^^1245^1253^BigDecimal[][] out = new BigDecimal[nRows][this.getColumnDimension (  ) ];^[CLASS] BigMatrixImpl  [METHOD] copyOut [RETURN_TYPE] BigDecimal[][]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  short  i = 0; i < nRows; i++ )  {^1249^^^^^1245^1253^for  ( int i = 0; i < nRows; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] copyOut [RETURN_TYPE] BigDecimal[][]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  ( int i = 0; i <= nRows; i++ )  {^1249^^^^^1245^1253^for  ( int i = 0; i < nRows; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] copyOut [RETURN_TYPE] BigDecimal[][]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = 7; i < nRows; i++ )  {^1249^^^^^1245^1253^for  ( int i = 0; i < nRows; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] copyOut [RETURN_TYPE] BigDecimal[][]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = 6; i < nRows; i++ )  {^1249^^^^^1245^1253^for  ( int i = 0; i < nRows; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] copyOut [RETURN_TYPE] BigDecimal[][]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = 4; i < nRows; i++ )  {^1249^^^^^1245^1253^for  ( int i = 0; i < nRows; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] copyOut [RETURN_TYPE] BigDecimal[][]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int i = 0; i < roundingMode; i++ )  {^1249^^^^^1245^1253^for  ( int i = 0; i < nRows; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] copyOut [RETURN_TYPE] BigDecimal[][]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( nRowsnt i = 0; i < i; i++ )  {^1249^^^^^1245^1253^for  ( int i = 0; i < nRows; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] copyOut [RETURN_TYPE] BigDecimal[][]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^for  ( paritynt i = 0; i < nRows; i++ )  {^1249^^^^^1245^1253^for  ( int i = 0; i < nRows; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] copyOut [RETURN_TYPE] BigDecimal[][]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^System.arraycopy ( data[i], roundingMode, out[i], roundingMode, data[i].length ) ;^1250^^^^^1245^1253^System.arraycopy ( data[i], 0, out[i], 0, data[i].length ) ;^[CLASS] BigMatrixImpl  [METHOD] copyOut [RETURN_TYPE] BigDecimal[][]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^System.arraycopy ( data[i], 2, out[i], 2, data[i].length ) ;^1250^^^^^1245^1253^System.arraycopy ( data[i], 0, out[i], 0, data[i].length ) ;^[CLASS] BigMatrixImpl  [METHOD] copyOut [RETURN_TYPE] BigDecimal[][]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^System.arraycopy ( data[i], 0, subMatrixData[i], 0, data[i].length ) ;^1250^^^^^1245^1253^System.arraycopy ( data[i], 0, out[i], 0, data[i].length ) ;^[CLASS] BigMatrixImpl  [METHOD] copyOut [RETURN_TYPE] BigDecimal[][]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^System.arraycopy ( subMatrixData[i], 0, out[i], 0, data[i].length ) ;^1250^^^^^1245^1253^System.arraycopy ( data[i], 0, out[i], 0, data[i].length ) ;^[CLASS] BigMatrixImpl  [METHOD] copyOut [RETURN_TYPE] BigDecimal[][]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^System.arraycopy ( data[i], 0[i], 0, data[i].length ) ;^1250^^^^^1245^1253^System.arraycopy ( data[i], 0, out[i], 0, data[i].length ) ;^[CLASS] BigMatrixImpl  [METHOD] copyOut [RETURN_TYPE] BigDecimal[][]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^System.arraycopy ( data[i], 0, out[i], 0[i].length ) ;^1250^^^^^1245^1253^System.arraycopy ( data[i], 0, out[i], 0, data[i].length ) ;^[CLASS] BigMatrixImpl  [METHOD] copyOut [RETURN_TYPE] BigDecimal[][]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P14_Delete_Statement]^^1250^^^^^1245^1253^System.arraycopy ( data[i], 0, out[i], 0, data[i].length ) ;^[CLASS] BigMatrixImpl  [METHOD] copyOut [RETURN_TYPE] BigDecimal[][]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^System.arraycopy ( data[row], 0, out[0], 0, ncols ) ;System.arraycopy ( data[i], 0, out[i], 0, data[i].length ) ;^1250^^^^^1245^1253^System.arraycopy ( data[i], 0, out[i], 0, data[i].length ) ;^[CLASS] BigMatrixImpl  [METHOD] copyOut [RETURN_TYPE] BigDecimal[][]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^System.arraycopy ( permutation, 0, out, 0, permutation.length ) ;System.arraycopy ( data[i], 0, out[i], 0, data[i].length ) ;^1250^^^^^1245^1253^System.arraycopy ( data[i], 0, out[i], 0, data[i].length ) ;^[CLASS] BigMatrixImpl  [METHOD] copyOut [RETURN_TYPE] BigDecimal[][]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^System.arraycopy ( subMatrix, 0, data, 0, subMatrix.length ) ;System.arraycopy ( data[i], 0, out[i], 0, data[i].length ) ;^1250^^^^^1245^1253^System.arraycopy ( data[i], 0, out[i], 0, data[i].length ) ;^[CLASS] BigMatrixImpl  [METHOD] copyOut [RETURN_TYPE] BigDecimal[][]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^System.arraycopy ( data[row], 0, out, 0, ncols ) ;System.arraycopy ( data[i], 0, out[i], 0, data[i].length ) ;^1250^^^^^1245^1253^System.arraycopy ( data[i], 0, out[i], 0, data[i].length ) ;^[CLASS] BigMatrixImpl  [METHOD] copyOut [RETURN_TYPE] BigDecimal[][]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^System.arraycopy ( subMatrix[i], 0, data[row + i], column, nCols ) ;System.arraycopy ( data[i], 0, out[i], 0, data[i].length ) ;^1250^^^^^1245^1253^System.arraycopy ( data[i], 0, out[i], 0, data[i].length ) ;^[CLASS] BigMatrixImpl  [METHOD] copyOut [RETURN_TYPE] BigDecimal[][]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = -4; i < nRows; i++ )  {^1249^^^^^1245^1253^for  ( int i = 0; i < nRows; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] copyOut [RETURN_TYPE] BigDecimal[][]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^System.arraycopy ( data[i], max, out[i], max, data[i].length ) ;^1250^^^^^1245^1253^System.arraycopy ( data[i], 0, out[i], 0, data[i].length ) ;^[CLASS] BigMatrixImpl  [METHOD] copyOut [RETURN_TYPE] BigDecimal[][]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^System.arraycopy ( data[i], dimension, out[i], dimension, data[i].length ) ;^1250^^^^^1245^1253^System.arraycopy ( data[i], 0, out[i], 0, data[i].length ) ;^[CLASS] BigMatrixImpl  [METHOD] copyOut [RETURN_TYPE] BigDecimal[][]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^System.arraycopy ( out[i], 0, data[i], 0, data[i].length ) ;^1250^^^^^1245^1253^System.arraycopy ( data[i], 0, out[i], 0, data[i].length ) ;^[CLASS] BigMatrixImpl  [METHOD] copyOut [RETURN_TYPE] BigDecimal[][]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^return subMatrixData;^1252^^^^^1245^1253^return out;^[CLASS] BigMatrixImpl  [METHOD] copyOut [RETURN_TYPE] BigDecimal[][]   [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^setSubMatrix ( in,, ) ;^1266^^^^^1265^1267^setSubMatrix ( in,0,0 ) ;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   BigDecimal[][] in [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^setSubMatrix ( in,row,row ) ;^1266^^^^^1265^1267^setSubMatrix ( in,0,0 ) ;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   BigDecimal[][] in [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^setSubMatrix ( outData,0,0 ) ;^1266^^^^^1265^1267^setSubMatrix ( in,0,0 ) ;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   BigDecimal[][] in [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P14_Delete_Statement]^^1266^^^^^1265^1267^setSubMatrix ( in,0,0 ) ;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   BigDecimal[][] in [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P1_Replace_Type]^long  nRows = in.length;^1275^^^^^1274^1284^int nRows = in.length;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   double[][] in [VARIABLES] boolean  double[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^int nRows = nSum;^1275^^^^^1274^1284^int nRows = in.length;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   double[][] in [VARIABLES] boolean  double[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^int nRows = in.length.length;^1275^^^^^1274^1284^int nRows = in.length;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   double[][] in [VARIABLES] boolean  double[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^int nRows = in;^1275^^^^^1274^1284^int nRows = in.length;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   double[][] in [VARIABLES] boolean  double[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = in[0].length;int nRows = in.length;^1275^^^^^1274^1284^int nRows = in.length;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   double[][] in [VARIABLES] boolean  double[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRows = v.length;int nRows = in.length;^1275^^^^^1274^1284^int nRows = in.length;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   double[][] in [VARIABLES] boolean  double[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRows = subMatrix.length;int nRows = in.length;^1275^^^^^1274^1284^int nRows = in.length;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   double[][] in [VARIABLES] boolean  double[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = subMatrix[0].length;int nRows = in.length;^1275^^^^^1274^1284^int nRows = in.length;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   double[][] in [VARIABLES] boolean  double[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = d[0].length;int nRows = in.length;^1275^^^^^1274^1284^int nRows = in.length;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   double[][] in [VARIABLES] boolean  double[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRows = d.length;int nRows = in.length;^1275^^^^^1274^1284^int nRows = in.length;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   double[][] in [VARIABLES] boolean  double[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P1_Replace_Type]^short  nCols = in[0].length;^1276^^^^^1274^1284^int nCols = in[0].length;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   double[][] in [VARIABLES] boolean  double[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^int nCols = in[nCol].length;^1276^^^^^1274^1284^int nCols = in[0].length;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   double[][] in [VARIABLES] boolean  double[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^int nCols = in[0].length[0].length;^1276^^^^^1274^1284^int nCols = in[0].length;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   double[][] in [VARIABLES] boolean  double[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRows = v.length;int nCols = in[0].length;^1276^^^^^1274^1284^int nCols = in[0].length;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   double[][] in [VARIABLES] boolean  double[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRows = subMatrix.length;int nCols = in[0].length;^1276^^^^^1274^1284^int nCols = in[0].length;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   double[][] in [VARIABLES] boolean  double[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRows = in.length;int nCols = in[0].length;^1276^^^^^1274^1284^int nCols = in[0].length;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   double[][] in [VARIABLES] boolean  double[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = subMatrix[0].length;int nCols = in[0].length;^1276^^^^^1274^1284^int nCols = in[0].length;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   double[][] in [VARIABLES] boolean  double[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = d[0].length;int nCols = in[0].length;^1276^^^^^1274^1284^int nCols = in[0].length;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   double[][] in [VARIABLES] boolean  double[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRows = d.length;int nCols = in[0].length;^1276^^^^^1274^1284^int nCols = in[0].length;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   double[][] in [VARIABLES] boolean  double[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^data =  new BigDecimal[ncols][nCols];^1277^^^^^1274^1284^data = new BigDecimal[nRows][nCols];^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   double[][] in [VARIABLES] boolean  double[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^data = new BigDecimal[nRows][1];data = new BigDecimal[nRows][nCols];^1277^^^^^1274^1284^data = new BigDecimal[nRows][nCols];^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   double[][] in [VARIABLES] boolean  double[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^data[i][j] = new BigDecimal ( in[i][j] ) ;data = new BigDecimal[nRows][nCols];^1277^^^^^1274^1284^data = new BigDecimal[nRows][nCols];^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   double[][] in [VARIABLES] boolean  double[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^bd[i] = new BigDecimal ( b[i] ) ;data = new BigDecimal[nRows][nCols];^1277^^^^^1274^1284^data = new BigDecimal[nRows][nCols];^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   double[][] in [VARIABLES] boolean  double[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^data = new BigDecimal[rowDimension][columnDimension];data = new BigDecimal[nRows][nCols];^1277^^^^^1274^1284^data = new BigDecimal[nRows][nCols];^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   double[][] in [VARIABLES] boolean  double[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^bd[i] = new BigDecimal ( v[i] ) ;data = new BigDecimal[nRows][nCols];^1277^^^^^1274^1284^data = new BigDecimal[nRows][nCols];^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   double[][] in [VARIABLES] boolean  double[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  long  i = 0; i < nRows; i++ )  {^1278^^^^^1274^1284^for  ( int i = 0; i < nRows; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   double[][] in [VARIABLES] boolean  double[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  ( int i = 0; i > nRows; i++ )  {^1278^^^^^1274^1284^for  ( int i = 0; i < nRows; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   double[][] in [VARIABLES] boolean  double[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  ( int i = 0; i <= nRows; i++ )  {^1278^^^^^1274^1284^for  ( int i = 0; i < nRows; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   double[][] in [VARIABLES] boolean  double[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = -7; i < nRows; i++ )  {^1278^^^^^1274^1284^for  ( int i = 0; i < nRows; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   double[][] in [VARIABLES] boolean  double[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = 5; i < nRows; i++ )  {^1278^^^^^1274^1284^for  ( int i = 0; i < nRows; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   double[][] in [VARIABLES] boolean  double[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( nSumnt i = 0; i < nRows; i++ )  {^1278^^^^^1274^1284^for  ( int i = 0; i < nRows; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   double[][] in [VARIABLES] boolean  double[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( innt i = 0; i < nRows; i++ )  {^1278^^^^^1274^1284^for  ( int i = 0; i < nRows; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   double[][] in [VARIABLES] boolean  double[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( nRowst i = 0; i < in; i++ )  {^1278^^^^^1274^1284^for  ( int i = 0; i < nRows; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   double[][] in [VARIABLES] boolean  double[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  short  j=0; j < nCols; j++ )  {^1279^^^^^1274^1284^for  ( int j=0; j < nCols; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   double[][] in [VARIABLES] boolean  double[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  ( int j=0; j == nCols; j++ )  {^1279^^^^^1274^1284^for  ( int j=0; j < nCols; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   double[][] in [VARIABLES] boolean  double[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int j=-6; j < nCols; j++ )  {^1279^^^^^1274^1284^for  ( int j=0; j < nCols; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   double[][] in [VARIABLES] boolean  double[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int nSum=0; j < nCols; j++ )  {^1279^^^^^1274^1284^for  ( int j=0; j < nCols; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   double[][] in [VARIABLES] boolean  double[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int j=0; j < ncols; j++ )  {^1279^^^^^1274^1284^for  ( int j=0; j < nCols; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   double[][] in [VARIABLES] boolean  double[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( nrowsnt j=0; j < nCols; j++ )  {^1279^^^^^1274^1284^for  ( int j=0; j < nCols; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   double[][] in [VARIABLES] boolean  double[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( nColsnt j=0; j < i; j++ )  {^1279^^^^^1274^1284^for  ( int j=0; j < nCols; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   double[][] in [VARIABLES] boolean  double[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( jnt i=0; j < nCols; j++ )  {^1279^^^^^1274^1284^for  ( int j=0; j < nCols; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   double[][] in [VARIABLES] boolean  double[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( jt in=0; j < nCols; j++ )  {^1279^^^^^1274^1284^for  ( int j=0; j < nCols; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   double[][] in [VARIABLES] boolean  double[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^for  ( int roundingMode=0; j < nCols; j++ )  {^1279^^^^^1274^1284^for  ( int j=0; j < nCols; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   double[][] in [VARIABLES] boolean  double[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P4_Replace_Constructor]^data[i][j] = data[i][j] =  new BigDecimal ( v[i] )  ;^1280^^^^^1274^1284^data[i][j] = new BigDecimal ( in[i][j] ) ;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   double[][] in [VARIABLES] boolean  double[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^data[i][j] = new BigDecimal ( nrowsn[i][j] ) ;^1280^^^^^1274^1284^data[i][j] = new BigDecimal ( in[i][j] ) ;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   double[][] in [VARIABLES] boolean  double[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^data[i][j] =  new BigDecimal ( v[i] )  ;^1280^^^^^1274^1284^data[i][j] = new BigDecimal ( in[i][j] ) ;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   double[][] in [VARIABLES] boolean  double[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^data = new BigDecimal[nRows][1];data[i][j] = new BigDecimal ( in[i][j] ) ;^1280^^^^^1274^1284^data[i][j] = new BigDecimal ( in[i][j] ) ;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   double[][] in [VARIABLES] boolean  double[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^bd[i] = new BigDecimal ( b[i] ) ;data[i][j] = new BigDecimal ( in[i][j] ) ;^1280^^^^^1274^1284^data[i][j] = new BigDecimal ( in[i][j] ) ;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   double[][] in [VARIABLES] boolean  double[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^data = new BigDecimal[nRows][nCols];data[i][j] = new BigDecimal ( in[i][j] ) ;^1280^^^^^1274^1284^data[i][j] = new BigDecimal ( in[i][j] ) ;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   double[][] in [VARIABLES] boolean  double[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^bd[i] = new BigDecimal ( v[i] ) ;data[i][j] = new BigDecimal ( in[i][j] ) ;^1280^^^^^1274^1284^data[i][j] = new BigDecimal ( in[i][j] ) ;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   double[][] in [VARIABLES] boolean  double[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^data[i][j] = new BigDecimal ( i[i][j] ) ;^1280^^^^^1274^1284^data[i][j] = new BigDecimal ( in[i][j] ) ;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   double[][] in [VARIABLES] boolean  double[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^data[i][j] = new BigDecimal ( inn[i][j] ) ;^1280^^^^^1274^1284^data[i][j] = new BigDecimal ( in[i][j] ) ;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   double[][] in [VARIABLES] boolean  double[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^data[i][j] = new BigDecimal ( rn[i][j] ) ;^1280^^^^^1274^1284^data[i][j] = new BigDecimal ( in[i][j] ) ;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   double[][] in [VARIABLES] boolean  double[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^data[i][j] = new BigDecimal ( parityn[i][j] ) ;^1280^^^^^1274^1284^data[i][j] = new BigDecimal ( in[i][j] ) ;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   double[][] in [VARIABLES] boolean  double[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^data[i][j] = new BigDecimal ( ncolsn[i][j] ) ;^1280^^^^^1274^1284^data[i][j] = new BigDecimal ( in[i][j] ) ;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   double[][] in [VARIABLES] boolean  double[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int j=temp; j < nCols; j++ )  {^1279^^^^^1274^1284^for  ( int j=0; j < nCols; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   double[][] in [VARIABLES] boolean  double[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  ( int j=0; j > nCols; j++ )  {^1279^^^^^1274^1284^for  ( int j=0; j < nCols; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   double[][] in [VARIABLES] boolean  double[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int j=rowCount; j < nCols; j++ )  {^1279^^^^^1274^1284^for  ( int j=0; j < nCols; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   double[][] in [VARIABLES] boolean  double[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( rowCountnt j=0; j < nCols; j++ )  {^1279^^^^^1274^1284^for  ( int j=0; j < nCols; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   double[][] in [VARIABLES] boolean  double[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int nCols=0; j < j; j++ )  {^1279^^^^^1274^1284^for  ( int j=0; j < nCols; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   double[][] in [VARIABLES] boolean  double[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^for  ( int j=0; j < rowCount; j++ )  {^1279^^^^^1274^1284^for  ( int j=0; j < nCols; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   double[][] in [VARIABLES] boolean  double[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^data[i][j] = new BigDecimal ( rowCountn[i][j] ) ;^1280^^^^^1274^1284^data[i][j] = new BigDecimal ( in[i][j] ) ;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   double[][] in [VARIABLES] boolean  double[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^data[i][j] = new BigDecimal ( roundingModen[i][j] ) ;^1280^^^^^1274^1284^data[i][j] = new BigDecimal ( in[i][j] ) ;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   double[][] in [VARIABLES] boolean  double[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  short  i = 0; i < nRows; i++ )  {^1278^^^^^1274^1284^for  ( int i = 0; i < nRows; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   double[][] in [VARIABLES] boolean  double[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = startRow; i < nRows; i++ )  {^1278^^^^^1274^1284^for  ( int i = 0; i < nRows; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   double[][] in [VARIABLES] boolean  double[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int j=endColumn; j < nCols; j++ )  {^1279^^^^^1274^1284^for  ( int j=0; j < nCols; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   double[][] in [VARIABLES] boolean  double[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^lu = this;^1283^^^^^1274^1284^lu = null;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   double[][] in [VARIABLES] boolean  double[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P1_Replace_Type]^long  nRows = in.length;^1293^^^^^1292^1302^int nRows = in.length;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^int nRows = nrows;^1293^^^^^1292^1302^int nRows = in.length;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^int nRows = in.length.length;^1293^^^^^1292^1302^int nRows = in.length;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^int nRows = in;^1293^^^^^1292^1302^int nRows = in.length;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^int nRows = roundingMode;^1293^^^^^1292^1302^int nRows = in.length;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = in[0].length;int nRows = in.length;^1293^^^^^1292^1302^int nRows = in.length;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRows = v.length;int nRows = in.length;^1293^^^^^1292^1302^int nRows = in.length;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRows = subMatrix.length;int nRows = in.length;^1293^^^^^1292^1302^int nRows = in.length;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = subMatrix[0].length;int nRows = in.length;^1293^^^^^1292^1302^int nRows = in.length;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = d[0].length;int nRows = in.length;^1293^^^^^1292^1302^int nRows = in.length;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRows = d.length;int nRows = in.length;^1293^^^^^1292^1302^int nRows = in.length;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P1_Replace_Type]^short  nCols = in[0].length;^1294^^^^^1292^1302^int nCols = in[0].length;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^int nCols = in[-6].length;^1294^^^^^1292^1302^int nCols = in[0].length;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^int nCols = in[0].length[0].length;^1294^^^^^1292^1302^int nCols = in[0].length;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRows = v.length;int nCols = in[0].length;^1294^^^^^1292^1302^int nCols = in[0].length;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRows = subMatrix.length;int nCols = in[0].length;^1294^^^^^1292^1302^int nCols = in[0].length;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRows = in.length;int nCols = in[0].length;^1294^^^^^1292^1302^int nCols = in[0].length;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = subMatrix[0].length;int nCols = in[0].length;^1294^^^^^1292^1302^int nCols = in[0].length;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = d[0].length;int nCols = in[0].length;^1294^^^^^1292^1302^int nCols = in[0].length;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRows = d.length;int nCols = in[0].length;^1294^^^^^1292^1302^int nCols = in[0].length;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^data =  new BigDecimal[nSum][nCols];^1295^^^^^1292^1302^data = new BigDecimal[nRows][nCols];^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^data = new BigDecimal[nRows][1];data = new BigDecimal[nRows][nCols];^1295^^^^^1292^1302^data = new BigDecimal[nRows][nCols];^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^data[i][j] = new BigDecimal ( in[i][j] ) ;data = new BigDecimal[nRows][nCols];^1295^^^^^1292^1302^data = new BigDecimal[nRows][nCols];^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^bd[i] = new BigDecimal ( b[i] ) ;data = new BigDecimal[nRows][nCols];^1295^^^^^1292^1302^data = new BigDecimal[nRows][nCols];^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^data = new BigDecimal[rowDimension][columnDimension];data = new BigDecimal[nRows][nCols];^1295^^^^^1292^1302^data = new BigDecimal[nRows][nCols];^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^bd[i] = new BigDecimal ( v[i] ) ;data = new BigDecimal[nRows][nCols];^1295^^^^^1292^1302^data = new BigDecimal[nRows][nCols];^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  short  i = 0; i < nRows; i++ )  {^1296^^^^^1292^1302^for  ( int i = 0; i < nRows; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  ( int i = 0; i <= nRows; i++ )  {^1296^^^^^1292^1302^for  ( int i = 0; i < nRows; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  ( int i = 0; i == nRows; i++ )  {^1296^^^^^1292^1302^for  ( int i = 0; i < nRows; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = -4; i < nRows; i++ )  {^1296^^^^^1292^1302^for  ( int i = 0; i < nRows; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = 6; i < nRows; i++ )  {^1296^^^^^1292^1302^for  ( int i = 0; i < nRows; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( paritynt i = 0; i < nRows; i++ )  {^1296^^^^^1292^1302^for  ( int i = 0; i < nRows; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int i = 0; i < ncols; i++ )  {^1296^^^^^1292^1302^for  ( int i = 0; i < nRows; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( nRowsnt i = 0; i < i; i++ )  {^1296^^^^^1292^1302^for  ( int i = 0; i < nRows; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^for  ( nSumnt i = 0; i < nRows; i++ )  {^1296^^^^^1292^1302^for  ( int i = 0; i < nRows; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  short  j=0; j < nCols; j++ )  {^1297^^^^^1292^1302^for  ( int j=0; j < nCols; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  ( int j=0; j > nCols; j++ )  {^1297^^^^^1292^1302^for  ( int j=0; j < nCols; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int j=nrows; j < nCols; j++ )  {^1297^^^^^1292^1302^for  ( int j=0; j < nCols; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int nSum=0; j < nCols; j++ )  {^1297^^^^^1292^1302^for  ( int j=0; j < nCols; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( scalent j=0; j < nCols; j++ )  {^1297^^^^^1292^1302^for  ( int j=0; j < nCols; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int nCols=0; j < j; j++ )  {^1297^^^^^1292^1302^for  ( int j=0; j < nCols; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( nColsnt j=0; j < i; j++ )  {^1297^^^^^1292^1302^for  ( int j=0; j < nCols; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( innt j=0; j < nCols; j++ )  {^1297^^^^^1292^1302^for  ( int j=0; j < nCols; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( jt in=0; j < nCols; j++ )  {^1297^^^^^1292^1302^for  ( int j=0; j < nCols; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^for  ( paritynt j=0; j < nCols; j++ )  {^1297^^^^^1292^1302^for  ( int j=0; j < nCols; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P4_Replace_Constructor]^data[i][j] = data[i][j] =  new BigDecimal ( v[i] )  ;^1298^^^^^1292^1302^data[i][j] = new BigDecimal ( in[i][j] ) ;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^data[i][j] = new BigDecimal ( i[i][j] ) ;^1298^^^^^1292^1302^data[i][j] = new BigDecimal ( in[i][j] ) ;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^data[i][j] =  new BigDecimal ( v[i] )  ;^1298^^^^^1292^1302^data[i][j] = new BigDecimal ( in[i][j] ) ;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^data = new BigDecimal[nRows][1];data[i][j] = new BigDecimal ( in[i][j] ) ;^1298^^^^^1292^1302^data[i][j] = new BigDecimal ( in[i][j] ) ;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^bd[i] = new BigDecimal ( b[i] ) ;data[i][j] = new BigDecimal ( in[i][j] ) ;^1298^^^^^1292^1302^data[i][j] = new BigDecimal ( in[i][j] ) ;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^data = new BigDecimal[nRows][nCols];data[i][j] = new BigDecimal ( in[i][j] ) ;^1298^^^^^1292^1302^data[i][j] = new BigDecimal ( in[i][j] ) ;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^bd[i] = new BigDecimal ( v[i] ) ;data[i][j] = new BigDecimal ( in[i][j] ) ;^1298^^^^^1292^1302^data[i][j] = new BigDecimal ( in[i][j] ) ;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^data[i][j] = new BigDecimal ( nrowsn[i][j] ) ;^1298^^^^^1292^1302^data[i][j] = new BigDecimal ( in[i][j] ) ;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^data[i][j] = new BigDecimal ( inn[i][j] ) ;^1298^^^^^1292^1302^data[i][j] = new BigDecimal ( in[i][j] ) ;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^data[i][j] = new BigDecimal ( ncolsn[i][j] ) ;^1298^^^^^1292^1302^data[i][j] = new BigDecimal ( in[i][j] ) ;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^data[i][j] = new BigDecimal ( nSumn[i][j] ) ;^1298^^^^^1292^1302^data[i][j] = new BigDecimal ( in[i][j] ) ;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^data[i][j] = new BigDecimal ( parityn[i][j] ) ;^1298^^^^^1292^1302^data[i][j] = new BigDecimal ( in[i][j] ) ;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  long  j=0; j < nCols; j++ )  {^1297^^^^^1292^1302^for  ( int j=0; j < nCols; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int j=dimension; j < nCols; j++ )  {^1297^^^^^1292^1302^for  ( int j=0; j < nCols; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^for  ( int j=0; j <= nCols; j++ )  {^1297^^^^^1292^1302^for  ( int j=0; j < nCols; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int j=parity; j < nCols; j++ )  {^1297^^^^^1292^1302^for  ( int j=0; j < nCols; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int temp=0; j < nCols; j++ )  {^1297^^^^^1292^1302^for  ( int j=0; j < nCols; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( int j=0; j < ncols; j++ )  {^1297^^^^^1292^1302^for  ( int j=0; j < nCols; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( rowCountnt j=0; j < nCols; j++ )  {^1297^^^^^1292^1302^for  ( int j=0; j < nCols; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^for  ( jnt i=0; j < nCols; j++ )  {^1297^^^^^1292^1302^for  ( int j=0; j < nCols; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^for  ( int j=0; j < parity; j++ )  {^1297^^^^^1292^1302^for  ( int j=0; j < nCols; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^data[i][j] = new BigDecimal ( roundingModen[i][j] ) ;^1298^^^^^1292^1302^data[i][j] = new BigDecimal ( in[i][j] ) ;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^data[i][j] = new BigDecimal ( rn[i][j] ) ;^1298^^^^^1292^1302^data[i][j] = new BigDecimal ( in[i][j] ) ;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P1_Replace_Type]^for  (  long  i = 0; i < nRows; i++ )  {^1296^^^^^1292^1302^for  ( int i = 0; i < nRows; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int i = 5; i < nRows; i++ )  {^1296^^^^^1292^1302^for  ( int i = 0; i < nRows; i++ )  {^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^for  ( int j=ret; j < nCols; j++ )  {^1297^^^^^1292^1302^for  ( int j=0; j < nCols; j++ )  {^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^lu = false;^1301^^^^^1292^1302^lu = null;^[CLASS] BigMatrixImpl  [METHOD] copyIn [RETURN_TYPE] void   String[][] in [VARIABLES] boolean  String[][]  in  int[]  out  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P1_Replace_Type]^long  nRows = this.getRowDimension (  ) ;^1312^^^^^1311^1316^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] isValidCoordinate [RETURN_TYPE] boolean   int row int col [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^int nRows = this.getColumnDimension (  ) ;^1312^^^^^1311^1316^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] isValidCoordinate [RETURN_TYPE] boolean   int row int col [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = this.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^1312^^^^^1311^1316^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] isValidCoordinate [RETURN_TYPE] boolean   int row int col [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCol = this.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^1312^^^^^1311^1316^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] isValidCoordinate [RETURN_TYPE] boolean   int row int col [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int columnCount = this.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^1312^^^^^1311^1316^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] isValidCoordinate [RETURN_TYPE] boolean   int row int col [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRows = getRowDimension (  ) ;int nRows = this.getRowDimension (  ) ;^1312^^^^^1311^1316^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] isValidCoordinate [RETURN_TYPE] boolean   int row int col [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nrows = this.getRowDimension (  ) ;int nRows = this.getRowDimension (  ) ;^1312^^^^^1311^1316^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] isValidCoordinate [RETURN_TYPE] boolean   int row int col [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nColB = b.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^1312^^^^^1311^1316^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] isValidCoordinate [RETURN_TYPE] boolean   int row int col [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^1312^^^^^1311^1316^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] isValidCoordinate [RETURN_TYPE] boolean   int row int col [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRowB = b.getRowDimension (  ) ;int nRows = this.getRowDimension (  ) ;^1312^^^^^1311^1316^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] isValidCoordinate [RETURN_TYPE] boolean   int row int col [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int rowCount = this.getRowDimension (  ) ;int nRows = this.getRowDimension (  ) ;^1312^^^^^1311^1316^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] isValidCoordinate [RETURN_TYPE] boolean   int row int col [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int ncols = this.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^1312^^^^^1311^1316^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] isValidCoordinate [RETURN_TYPE] boolean   int row int col [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nSum = this.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^1312^^^^^1311^1316^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] isValidCoordinate [RETURN_TYPE] boolean   int row int col [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = m.getColumnDimension (  ) ;int nRows = this.getRowDimension (  ) ;^1312^^^^^1311^1316^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] isValidCoordinate [RETURN_TYPE] boolean   int row int col [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P12_Insert_Condition]^if  ( b.getRowDimension (  )  != this.getRowDimension (  )  )  { int nRows = this.getRowDimension (  ) ; }^1312^^^^^1311^1316^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] isValidCoordinate [RETURN_TYPE] boolean   int row int col [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P12_Insert_Condition]^if  ( v.length != this.getColumnDimension (  )  )  { int nRows = this.getRowDimension (  ) ; }^1312^^^^^1311^1316^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] isValidCoordinate [RETURN_TYPE] boolean   int row int col [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P14_Delete_Statement]^^1312^^^^^1311^1316^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] isValidCoordinate [RETURN_TYPE] boolean   int row int col [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^( this.getRowDimension (  )  )  ) ;int nRows = this.getRowDimension (  ) ;^1312^^^^^1311^1316^int nRows = this.getRowDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] isValidCoordinate [RETURN_TYPE] boolean   int row int col [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P1_Replace_Type]^short  nCols = this.getColumnDimension (  ) ;^1313^^^^^1311^1316^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] isValidCoordinate [RETURN_TYPE] boolean   int row int col [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P7_Replace_Invocation]^int nCols = this.getRowDimension (  ) ;^1313^^^^^1311^1316^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] isValidCoordinate [RETURN_TYPE] boolean   int row int col [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCol = this.getColumnDimension (  ) ;int nCols = this.getColumnDimension (  ) ;^1313^^^^^1311^1316^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] isValidCoordinate [RETURN_TYPE] boolean   int row int col [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int columnCount = this.getColumnDimension (  ) ;int nCols = this.getColumnDimension (  ) ;^1313^^^^^1311^1316^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] isValidCoordinate [RETURN_TYPE] boolean   int row int col [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRows = getRowDimension (  ) ;int nCols = this.getColumnDimension (  ) ;^1313^^^^^1311^1316^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] isValidCoordinate [RETURN_TYPE] boolean   int row int col [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nrows = this.getRowDimension (  ) ;int nCols = this.getColumnDimension (  ) ;^1313^^^^^1311^1316^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] isValidCoordinate [RETURN_TYPE] boolean   int row int col [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nColB = b.getColumnDimension (  ) ;int nCols = this.getColumnDimension (  ) ;^1313^^^^^1311^1316^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] isValidCoordinate [RETURN_TYPE] boolean   int row int col [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = getColumnDimension (  ) ;int nCols = this.getColumnDimension (  ) ;^1313^^^^^1311^1316^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] isValidCoordinate [RETURN_TYPE] boolean   int row int col [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRowB = b.getRowDimension (  ) ;int nCols = this.getColumnDimension (  ) ;^1313^^^^^1311^1316^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] isValidCoordinate [RETURN_TYPE] boolean   int row int col [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int rowCount = this.getRowDimension (  ) ;int nCols = this.getColumnDimension (  ) ;^1313^^^^^1311^1316^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] isValidCoordinate [RETURN_TYPE] boolean   int row int col [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int ncols = this.getColumnDimension (  ) ;int nCols = this.getColumnDimension (  ) ;^1313^^^^^1311^1316^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] isValidCoordinate [RETURN_TYPE] boolean   int row int col [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nRows = this.getRowDimension (  ) ;int nCols = this.getColumnDimension (  ) ;^1313^^^^^1311^1316^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] isValidCoordinate [RETURN_TYPE] boolean   int row int col [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nSum = this.getColumnDimension (  ) ;int nCols = this.getColumnDimension (  ) ;^1313^^^^^1311^1316^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] isValidCoordinate [RETURN_TYPE] boolean   int row int col [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P11_Insert_Donor_Statement]^int nCols = m.getColumnDimension (  ) ;int nCols = this.getColumnDimension (  ) ;^1313^^^^^1311^1316^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] isValidCoordinate [RETURN_TYPE] boolean   int row int col [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P12_Insert_Condition]^if  ( v.length != this.getColumnDimension (  )  )  { int nCols = this.getColumnDimension (  ) ; }^1313^^^^^1311^1316^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] isValidCoordinate [RETURN_TYPE] boolean   int row int col [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P14_Delete_Statement]^^1313^^^^^1311^1316^int nCols = this.getColumnDimension (  ) ;^[CLASS] BigMatrixImpl  [METHOD] isValidCoordinate [RETURN_TYPE] boolean   int row int col [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^return ! ( row < 0 && row >= nRows || col < 0 || col >= nCols ) ;^1315^^^^^1311^1316^return ! ( row < 0 || row >= nRows || col < 0 || col >= nCols ) ;^[CLASS] BigMatrixImpl  [METHOD] isValidCoordinate [RETURN_TYPE] boolean   int row int col [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^return ! ( row <= 0 || row >= nRows || col < 0 || col >= nCols ) ;^1315^^^^^1311^1316^return ! ( row < 0 || row >= nRows || col < 0 || col >= nCols ) ;^[CLASS] BigMatrixImpl  [METHOD] isValidCoordinate [RETURN_TYPE] boolean   int row int col [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^return ! ( row < 0 || row > nRows || col < 0 || col >= nCols ) ;^1315^^^^^1311^1316^return ! ( row < 0 || row >= nRows || col < 0 || col >= nCols ) ;^[CLASS] BigMatrixImpl  [METHOD] isValidCoordinate [RETURN_TYPE] boolean   int row int col [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^return ! ( row < 0 || row >= nRows || col <= 0 || col >= nCols ) ;^1315^^^^^1311^1316^return ! ( row < 0 || row >= nRows || col < 0 || col >= nCols ) ;^[CLASS] BigMatrixImpl  [METHOD] isValidCoordinate [RETURN_TYPE] boolean   int row int col [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P2_Replace_Operator]^return ! ( row < 0 || row >= nRows || col < 0 || col > nCols ) ;^1315^^^^^1311^1316^return ! ( row < 0 || row >= nRows || col < 0 || col >= nCols ) ;^[CLASS] BigMatrixImpl  [METHOD] isValidCoordinate [RETURN_TYPE] boolean   int row int col [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^return ! ( row < nCol || row >= nRows || col < nCol || col >= nCols ) ;^1315^^^^^1311^1316^return ! ( row < 0 || row >= nRows || col < 0 || col >= nCols ) ;^[CLASS] BigMatrixImpl  [METHOD] isValidCoordinate [RETURN_TYPE] boolean   int row int col [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P3_Replace_Literal]^return ! ( row < -8 || row >= nRows || col < -8 || col >= nCols ) ;^1315^^^^^1311^1316^return ! ( row < 0 || row >= nRows || col < 0 || col >= nCols ) ;^[CLASS] BigMatrixImpl  [METHOD] isValidCoordinate [RETURN_TYPE] boolean   int row int col [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^return ! ( roundingMode < 0 || row >= nRows || col < 0 || col >= nCols ) ;^1315^^^^^1311^1316^return ! ( row < 0 || row >= nRows || col < 0 || col >= nCols ) ;^[CLASS] BigMatrixImpl  [METHOD] isValidCoordinate [RETURN_TYPE] boolean   int row int col [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^return ! ( row < 0 || row >= nrows || col < 0 || col >= nCols ) ;^1315^^^^^1311^1316^return ! ( row < 0 || row >= nRows || col < 0 || col >= nCols ) ;^[CLASS] BigMatrixImpl  [METHOD] isValidCoordinate [RETURN_TYPE] boolean   int row int col [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^return ! ( row < 0 || row >= nRows || parity < 0 || col >= nCols ) ;^1315^^^^^1311^1316^return ! ( row < 0 || row >= nRows || col < 0 || col >= nCols ) ;^[CLASS] BigMatrixImpl  [METHOD] isValidCoordinate [RETURN_TYPE] boolean   int row int col [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^return ! ( row < 0 || row >= nRows || col < 0 || col >= r ) ;^1315^^^^^1311^1316^return ! ( row < 0 || row >= nRows || col < 0 || col >= nCols ) ;^[CLASS] BigMatrixImpl  [METHOD] isValidCoordinate [RETURN_TYPE] boolean   int row int col [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^return ! ( nCols < 0 || row >= nRows || col < 0 || col >= row ) ;^1315^^^^^1311^1316^return ! ( row < 0 || row >= nRows || col < 0 || col >= nCols ) ;^[CLASS] BigMatrixImpl  [METHOD] isValidCoordinate [RETURN_TYPE] boolean   int row int col [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^return ! ( nRows < 0 || row >= row || col < 0 || col >= nCols ) ;^1315^^^^^1311^1316^return ! ( row < 0 || row >= nRows || col < 0 || col >= nCols ) ;^[CLASS] BigMatrixImpl  [METHOD] isValidCoordinate [RETURN_TYPE] boolean   int row int col [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^return ! ( col < 0 || row >= nRows || row < 0 || col >= nCols ) ;^1315^^^^^1311^1316^return ! ( row < 0 || row >= nRows || col < 0 || col >= nCols ) ;^[CLASS] BigMatrixImpl  [METHOD] isValidCoordinate [RETURN_TYPE] boolean   int row int col [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P5_Replace_Variable]^return ! ( row < 0 || row >= nCols || col < 0 || col >= nRows ) ;^1315^^^^^1311^1316^return ! ( row < 0 || row >= nRows || col < 0 || col >= nCols ) ;^[CLASS] BigMatrixImpl  [METHOD] isValidCoordinate [RETURN_TYPE] boolean   int row int col [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
[P8_Replace_Mix]^return ! ( nrows ;^1315^^^^^1311^1316^return ! ( row < 0 || row >= nRows || col < 0 || col >= nCols ) ;^[CLASS] BigMatrixImpl  [METHOD] isValidCoordinate [RETURN_TYPE] boolean   int row int col [VARIABLES] int[]  out  permutation  selectedColumns  selectedRows  boolean  long  serialVersionUID  int  col  column  columnCount  columnDimension  dimension  endColumn  endRow  i  j  max  nCol  nColB  nCols  nRowB  nRows  nSum  ncols  nrows  parity  r  ret  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  temp  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  largest  maxColSum  sum  tmp  trace  BigDecimal[][]  bp  d  data  in  lu  out  outData  solution  subMatrix  subMatrixData  
