[P1_Replace_Type]^private static final  short  serialVersionUID = 3350616277306882875L;^33^^^^^28^38^private static final long serialVersionUID = 3350616277306882875L;^[CLASS] BrentSolver   [VARIABLES] 
[P8_Replace_Mix]^private static final  int  serialVersionUID = 3350616277306882875;^33^^^^^28^38^private static final long serialVersionUID = 3350616277306882875L;^[CLASS] BrentSolver   [VARIABLES] 
[P3_Replace_Literal]^super ( f, 102, 1E-6 ) ;^41^^^^^40^42^super ( f, 100, 1E-6 ) ;^[CLASS] BrentSolver  [METHOD] <init> [RETURN_TYPE] UnivariateRealFunction)   UnivariateRealFunction f [VARIABLES] long  serialVersionUID  UnivariateRealFunction  f  boolean  
[P14_Delete_Statement]^^41^^^^^40^42^super ( f, 100, 1E-6 ) ;^[CLASS] BrentSolver  [METHOD] <init> [RETURN_TYPE] UnivariateRealFunction)   UnivariateRealFunction f [VARIABLES] long  serialVersionUID  UnivariateRealFunction  f  boolean  
[P5_Replace_Variable]^return solve ( initial, max ) ;^62^^^^^59^63^return solve ( min, max ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P5_Replace_Variable]^return solve ( min, initial ) ;^62^^^^^59^63^return solve ( min, max ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P5_Replace_Variable]^return solve (  max ) ;^62^^^^^59^63^return solve ( min, max ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P5_Replace_Variable]^return solve ( min ) ;^62^^^^^59^63^return solve ( min, max ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P5_Replace_Variable]^return solve ( max, min ) ;^62^^^^^59^63^return solve ( min, max ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P14_Delete_Statement]^^62^^^^^59^63^return solve ( min, max ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max double initial [VARIABLES] long  serialVersionUID  double  initial  max  min  boolean  
[P14_Delete_Statement]^^84^85^^^^69^99^clearResult (  ) ; verifyInterval ( min, max ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^setResult ( x1, i ) ;clearResult (  ) ;^84^^^^^69^99^clearResult (  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^verifyInterval ( tolerance, max ) ;^85^^^^^70^100^verifyInterval ( min, max ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^verifyInterval ( min, tolerance ) ;^85^^^^^70^100^verifyInterval ( min, max ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^verifyInterval (  max ) ;^85^^^^^70^100^verifyInterval ( min, max ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^verifyInterval ( min ) ;^85^^^^^70^100^verifyInterval ( min, max ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^verifyInterval ( max, min ) ;^85^^^^^70^100^verifyInterval ( min, max ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P7_Replace_Invocation]^setResult ( min, max ) ;^85^^^^^70^100^verifyInterval ( min, max ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P1_Replace_Type]^float x0 = min;^90^^^^^75^105^double x0 = min;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^double x0 = x1;^90^^^^^75^105^double x0 = min;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^double x0 = tolerance;^90^^^^^75^105^double x0 = min;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double x1 = max;double x0 = min;^90^^^^^75^105^double x0 = min;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double r2 = y1 / y2;double x0 = min;^90^^^^^75^105^double x0 = min;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double y0;double x0 = min;^90^^^^^75^105^double x0 = min;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double x2 = x0;double x0 = min;^90^^^^^75^105^double x0 = min;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double r1 = y0 / y2;double x0 = min;^90^^^^^75^105^double x0 = min;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double y2 = y0;double x0 = min;^90^^^^^75^105^double x0 = min;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double r3 = y1 / y0;double x0 = min;^90^^^^^75^105^double x0 = min;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P1_Replace_Type]^int x1 = max;^91^^^^^76^106^double x1 = max;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^double x1 = x2;^91^^^^^76^106^double x1 = max;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^double x1 = r3;^91^^^^^76^106^double x1 = max;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double r2 = y1 / y2;double x1 = max;^91^^^^^76^106^double x1 = max;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double delta = x1 - x0;double x1 = max;^91^^^^^76^106^double x1 = max;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double y1;double x1 = max;^91^^^^^76^106^double x1 = max;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double x2 = x0;double x1 = max;^91^^^^^76^106^double x1 = max;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double p1;double x1 = max;^91^^^^^76^106^double x1 = max;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double r1 = y0 / y2;double x1 = max;^91^^^^^76^106^double x1 = max;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double x0 = min;double x1 = max;^91^^^^^76^106^double x1 = max;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double y2 = y0;double x1 = max;^91^^^^^76^106^double x1 = max;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double r3 = y1 / y0;double x1 = max;^91^^^^^76^106^double x1 = max;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P1_Replace_Type]^int y0;^92^^^^^77^107^double y0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double y1;double y0;^92^^^^^77^107^double y0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double p;double y0;^92^^^^^77^107^double y0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double x2 = x0;double y0;^92^^^^^77^107^double y0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double p1;double y0;^92^^^^^77^107^double y0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double x0 = min;double y0;^92^^^^^77^107^double y0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double y2 = y0;double y0;^92^^^^^77^107^double y0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P1_Replace_Type]^int y1;^93^^^^^78^108^double y1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double x1 = max;double y1;^93^^^^^78^108^double y1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double y0;double y1;^93^^^^^78^108^double y1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double p;double y1;^93^^^^^78^108^double y1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double x2 = x0;double y1;^93^^^^^78^108^double y1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double p1;double y1;^93^^^^^78^108^double y1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double y2 = y0;double y1;^93^^^^^78^108^double y1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^y0 = x0.value ( f ) ;^94^^^^^79^109^y0 = f.value ( x0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^y0 =  f.value ( y2 ) ;^94^^^^^79^109^y0 = f.value ( x0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^y1 = f.value ( x1 ) ;y0 = f.value ( x0 ) ;^94^^^^^79^109^y0 = f.value ( x0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^y0 = f.value ( x1 ) ;^94^^^^^79^109^y0 = f.value ( x0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P14_Delete_Statement]^^94^95^^^^79^109^y0 = f.value ( x0 ) ; y1 = f.value ( x1 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^y1 = x1.value ( f ) ;^95^^^^^80^110^y1 = f.value ( x1 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^y1 =  f.value ( r2 ) ;^95^^^^^80^110^y1 = f.value ( x1 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^y0 = f.value ( x0 ) ;y1 = f.value ( x1 ) ;^95^^^^^80^110^y1 = f.value ( x1 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^y1 = f.value ( y1 ) ;^95^^^^^80^110^y1 = f.value ( x1 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P14_Delete_Statement]^^95^^^^^80^110^y1 = f.value ( x1 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^if  ( y0 * y1 > 0 )  {^98^^^^^83^113^if  ( y0 * y1 >= 0 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^if  ( y0 / y1 >= 0 )  {^98^^^^^83^113^if  ( y0 * y1 >= 0 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^if  ( yi * y1 >= i )  {^98^^^^^83^113^if  ( y0 * y1 >= 0 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  ( r3 * y1 >= 0 )  {^98^^^^^83^113^if  ( y0 * y1 >= 0 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  ( y0 * r3 >= 0 )  {^98^^^^^83^113^if  ( y0 * y1 >= 0 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  ( y0 * y1 )  {^98^^^^^83^113^if  ( y0 * y1 >= 0 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  (  (  (  (  (  (  (  (  ( "Function values at endpoints do not have different signs." + "  Endpoints: [" )  + min )  + "," )  + max )  + "]" )  + "  Values: [" )  + y0 )  + "," )  + y1 + "]" )  {^98^^^^^83^113^if  ( y0 * y1 >= 0 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  (  (  (  (  (  (  (  ( "Function values at endpoints do not have different signs." + "  Endpoints: [" )  + min )  + "," )  + max )  + "]" )  + "  Values: [" )  + y0 )  + "," + y1 )  {^98^^^^^83^113^if  ( y0 * y1 >= 0 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  (  (  (  (  (  (  ( "Function values at endpoints do not have different signs." + "  Endpoints: [" )  + min )  + "," )  + max )  + "]" )  + "  Values: [" )  + y0 + "," )  {^98^^^^^83^113^if  ( y0 * y1 >= 0 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  (  (  (  (  (  ( "Function values at endpoints do not have different signs." + "  Endpoints: [" )  + min )  + "," )  + max )  + "]" )  + "  Values: [" + y0 )  {^98^^^^^83^113^if  ( y0 * y1 >= 0 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  (  (  (  (  ( "Function values at endpoints do not have different signs." + "  Endpoints: [" )  + min )  + "," )  + max )  + "]" + "  Values: [" )  {^98^^^^^83^113^if  ( y0 * y1 >= 0 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  (  (  (  ( "Function values at endpoints do not have different signs." + "  Endpoints: [" )  + min )  + "," )  + max + "]" )  {^98^^^^^83^113^if  ( y0 * y1 >= 0 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  (  (  ( "Function values at endpoints do not have different signs." + "  Endpoints: [" )  + min )  + "," + max )  {^98^^^^^83^113^if  ( y0 * y1 >= 0 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  (  ( "Function values at endpoints do not have different signs." + "  Endpoints: [" )  + min + "," )  {^98^^^^^83^113^if  ( y0 * y1 >= 0 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min )  {^98^^^^^83^113^if  ( y0 * y1 >= 0 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  ( "Function values at endpoints do not have different signs." + "  Endpoints: [" )  {^98^^^^^83^113^if  ( y0 * y1 >= 0 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^if  ( y3 * y1 >= 3 )  {^98^^^^^83^113^if  ( y0 * y1 >= 0 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException((((((((((("Function values at endpoints do not have different signs." + "  Endpoints: [") + min) + ",") + max) + "]") + "  Values: [") + y0) + ",") + y1) + "]"));^98^99^100^101^102^83^113^if  ( y0 * y1 >= 0 )  { throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ; }^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P16_Remove_Block]^^98^99^100^101^102^83^113^if  ( y0 * y1 >= 0 )  { throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ; }^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  <=  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^99^100^101^102^^84^114^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  |  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^99^100^101^102^^84^114^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  >  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^99^100^101^102^^84^114^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  &&  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^99^100^101^102^^84^114^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  ||  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^99^100^101^102^^84^114^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  <<  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^99^100^101^102^^84^114^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  ^  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^99^100^101^102^^84^114^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs."  ||  "  Endpoints: ["  ||  min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^99^100^101^102^^84^114^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs."  <  "  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^99^100^101^102^^84^114^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "ve different signsunction values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^99^100^101^102^^84^114^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [poin" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^99^100^101^102^^84^114^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "" + max + "]" + "  Values: [" + y0 + "" + y1 + "]" ) ;^99^100^101^102^^84^114^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + max + "]" + "lues:" + y0 + "," + y1 + "]" ) ;^99^100^101^102^^84^114^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + x2 + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^99^100^101^102^^84^114^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + r3 + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^99^100^101^102^^84^114^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + max + "]" + "  Values: [" + tolerance + "," + y1 + "]" ) ;^99^100^101^102^^84^114^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + x0 + "]" ) ;^99^100^101^102^^84^114^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + max + "," + min + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^99^100^101^102^^84^114^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y1 + "," + y0 + "]" ) ;^99^100^101^102^^84^114^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + y1 + "]" + "  Values: [" + y0 + "," + max + "]" ) ;^99^100^101^102^^84^114^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + x0 + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^99^100^101^102^^84^114^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P13_Insert_Block]^if  (  ( y0 * y1 )  >= 0 )  {     throw new IllegalArgumentException (  (  (  (  (  (  (  (  (  (  ( "Function values at endpoints do not have different signs." + "  Endpoints: [" )  + min )  + "," )  + max )  + "]" )  + "  Values: [" )  + y0 )  + "," )  + y1 )  + "]" )  ) ; }^99^^^^^84^114^[Delete]^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  >>  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^99^100^101^102^^84^114^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  !=  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^99^100^101^102^^84^114^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs."   instanceof   "  Endpoints: ["   instanceof   min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^99^100^101^102^^84^114^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs."  !=  "  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^99^100^101^102^^84^114^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "ndpoints do not haunction values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^99^100^101^102^^84^114^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "d" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^99^100^101^102^^84^114^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + max + "" + "  Values: [" + y0 + "," + y1 + "" ) ;^99^100^101^102^^84^114^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + x1 + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^99^100^101^102^^84^114^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + max + "]" + "  Values: [" + x2 + "," + y1 + "]" ) ;^99^100^101^102^^84^114^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y2 + "]" ) ;^99^100^101^102^^84^114^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  &  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^99^100^101^102^^84^114^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "   instanceof   Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^99^100^101^102^^84^114^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  >=  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^99^100^101^102^^84^114^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs."  <<  "  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^99^100^101^102^^84^114^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs. do not have different s" + "  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^99^100^101^102^^84^114^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + " E Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^99^100^101^102^^84^114^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + max + "]" + "lu Values: [" + y0 + "," + y1 + "]" ) ;^99^100^101^102^^84^114^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + max + "]" + "  Values: [" + x1 + "," + y1 + "]" ) ;^99^100^101^102^^84^114^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + r2 + "]" ) ;^99^100^101^102^^84^114^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + y0 + "]" + "  Values: [" + max + "," + y1 + "]" ) ;^99^100^101^102^^84^114^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + x1 + "]" ) ;^99^100^101^102^^84^114^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  <  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^99^100^101^102^^84^114^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs."  >>  "  Endpoints: ["  >>  min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^99^100^101^102^^84^114^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^throw new IllegalArgumentException ( " endpunction values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^99^100^101^102^^84^114^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [oint" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^99^100^101^102^^84^114^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + max + "]" + "  Values: [ " + y0 + "," + y1 + "]" ) ;^99^100^101^102^^84^114^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + x1 + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^99^100^101^102^^84^114^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + x2 + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^99^100^101^102^^84^114^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + y0 + "," + max + "]" + "  Values: [" + min + "," + y1 + "]" ) ;^99^100^101^102^^84^114^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + y1 + "," + max + "]" + "  Values: [" + y0 + "," + min + "]" ) ;^99^100^101^102^^84^114^throw new IllegalArgumentException ( "Function values at endpoints do not have different signs." + "  Endpoints: [" + min + "," + max + "]" + "  Values: [" + y0 + "," + y1 + "]" ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P1_Replace_Type]^float x2 = x0;^105^^^^^90^120^double x2 = x0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^double x2 = x1;^105^^^^^90^120^double x2 = x0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^double x2 = r2;^105^^^^^90^120^double x2 = x0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double x1 = max;double x2 = x0;^105^^^^^90^120^double x2 = x0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double r2 = y1 / y2;double x2 = x0;^105^^^^^90^120^double x2 = x0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double delta = x1 - x0;double x2 = x0;^105^^^^^90^120^double x2 = x0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double y0;double x2 = x0;^105^^^^^90^120^double x2 = x0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double y1;double x2 = x0;^105^^^^^90^120^double x2 = x0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double p;double x2 = x0;^105^^^^^90^120^double x2 = x0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double p1;double x2 = x0;^105^^^^^90^120^double x2 = x0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double r1 = y0 / y2;double x2 = x0;^105^^^^^90^120^double x2 = x0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double x0 = min;double x2 = x0;^105^^^^^90^120^double x2 = x0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double y2 = y0;double x2 = x0;^105^^^^^90^120^double x2 = x0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double r3 = y1 / y0;double x2 = x0;^105^^^^^90^120^double x2 = x0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P1_Replace_Type]^int y2 = y0;^106^^^^^91^121^double y2 = y0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^double y2 = x2;^106^^^^^91^121^double y2 = y0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^double y2 = tolerance;^106^^^^^91^121^double y2 = y0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double x1 = max;double y2 = y0;^106^^^^^91^121^double y2 = y0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double r2 = y1 / y2;double y2 = y0;^106^^^^^91^121^double y2 = y0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double delta = x1 - x0;double y2 = y0;^106^^^^^91^121^double y2 = y0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double y0;double y2 = y0;^106^^^^^91^121^double y2 = y0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double y1;double y2 = y0;^106^^^^^91^121^double y2 = y0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double p;double y2 = y0;^106^^^^^91^121^double y2 = y0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double x2 = x0;double y2 = y0;^106^^^^^91^121^double y2 = y0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double p1;double y2 = y0;^106^^^^^91^121^double y2 = y0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double r1 = y0 / y2;double y2 = y0;^106^^^^^91^121^double y2 = y0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double x0 = min;double y2 = y0;^106^^^^^91^121^double y2 = y0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double r3 = y1 / y0;double y2 = y0;^106^^^^^91^121^double y2 = y0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P1_Replace_Type]^int delta = x1 - x0;^107^^^^^92^122^double delta = x1 - x0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^double delta = x1  >  x0;^107^^^^^92^122^double delta = x1 - x0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^double delta = x1 - tolerance;^107^^^^^92^122^double delta = x1 - x0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^double delta = x0 - x1;^107^^^^^92^122^double delta = x1 - x0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^double delta = x0 - x0;^107^^^^^92^122^double delta = x1 - x0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double x1 = max;double delta = x1 - x0;^107^^^^^92^122^double delta = x1 - x0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double r2 = y1 / y2;double delta = x1 - x0;^107^^^^^92^122^double delta = x1 - x0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double oldDelta = delta;double delta = x1 - x0;^107^^^^^92^122^double delta = x1 - x0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double x2 = x0;double delta = x1 - x0;^107^^^^^92^122^double delta = x1 - x0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double dx =  ( x2 - x1 ) ;double delta = x1 - x0;^107^^^^^92^122^double delta = x1 - x0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double r1 = y0 / y2;double delta = x1 - x0;^107^^^^^92^122^double delta = x1 - x0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double y2 = y0;double delta = x1 - x0;^107^^^^^92^122^double delta = x1 - x0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double r3 = y1 / y0;double delta = x1 - x0;^107^^^^^92^122^double delta = x1 - x0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P1_Replace_Type]^int oldDelta = delta;^108^^^^^93^123^double oldDelta = delta;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^double oldDelta = x2;^108^^^^^93^123^double oldDelta = delta;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double delta = x1 - x0;double oldDelta = delta;^108^^^^^93^123^double oldDelta = delta;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P1_Replace_Type]^short  i = 0;^110^^^^^95^125^int i = 0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^int i = 8;^110^^^^^95^125^int i = 0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^while  ( i <= maximalIterationCount )  {^111^^^^^96^126^while  ( i < maximalIterationCount )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^while  ( i > maximalIterationCount )  {^111^^^^^96^126^while  ( i < maximalIterationCount )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P7_Replace_Invocation]^while  ( i < absimalIterationCount )  {^111^^^^^96^126^while  ( i < maximalIterationCount )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^if  ( Math.abs ( y2 )  == Math.abs ( y1 )  )  {^112^^^^^97^127^if  ( Math.abs ( y2 )  < Math.abs ( y1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  ( Math.abs ( x1 )  < Math.abs ( y1 )  )  {^112^^^^^97^127^if  ( Math.abs ( y2 )  < Math.abs ( y1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  ( Math.abs ( y2 )  < Math.abs ( r3 )  )  {^112^^^^^97^127^if  ( Math.abs ( y2 )  < Math.abs ( y1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^if  ( Math.abs ( r2 )  < Math.abs ( y1 )  )  {^112^^^^^97^127^if  ( Math.abs ( y2 )  < Math.abs ( y1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^x0 = r2;^113^^^^^98^128^x0 = x1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^x0 =  y2;^113^^^^^98^128^x0 = x1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^x2 = x0;x0 = x1;^113^^^^^98^128^x0 = x1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^x1 = x2;x0 = x1;^113^^^^^98^128^x0 = x1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^y0 = y1;x0 = x1;^113^^^^^98^128^x0 = x1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^p1 = -p1;x0 = x1;^113^^^^^98^128^x0 = x1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^x1 = x0;^114^^^^^99^129^x1 = x2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^x1 =  null;^114^^^^^99^129^x1 = x2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^x2 = x0;x1 = x2;^114^^^^^99^129^x1 = x2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^y1 = y2;x1 = x2;^114^^^^^99^129^x1 = x2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^x0 = x1;x1 = x2;^114^^^^^99^129^x1 = x2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^p1 = -p1;x1 = x2;^114^^^^^99^129^x1 = x2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^x2 = x1;^115^^^^^100^130^x2 = x0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^x2 =  null;^115^^^^^100^130^x2 = x0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^x1 = x2;x2 = x0;^115^^^^^100^130^x2 = x0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^y2 = y0;x2 = x0;^115^^^^^100^130^x2 = x0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^x0 = x1;x2 = x0;^115^^^^^100^130^x2 = x0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^y0 =  r2;^116^^^^^101^131^y0 = y1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^y1 = y2;y0 = y1;^116^^^^^101^131^y0 = y1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^y2 = y0;y0 = y1;^116^^^^^101^131^y0 = y1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^x0 = x1;y0 = y1;^116^^^^^101^131^y0 = y1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^p1 = -p1;y0 = y1;^116^^^^^101^131^y0 = y1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^y1 = y1;^117^^^^^102^132^y1 = y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^y1 =  r2;^117^^^^^102^132^y1 = y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^x1 = x2;y1 = y2;^117^^^^^102^132^y1 = y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^y2 = y0;y1 = y2;^117^^^^^102^132^y1 = y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^y0 = y1;y1 = y2;^117^^^^^102^132^y1 = y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^p1 = -p1;y1 = y2;^117^^^^^102^132^y1 = y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^y2 = r3;^118^^^^^103^133^y2 = y0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^x2 = x0;y2 = y0;^118^^^^^103^133^y2 = y0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^y1 = y2;y2 = y0;^118^^^^^103^133^y2 = y0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^y0 = y1;y2 = y0;^118^^^^^103^133^y2 = y0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^if  ( Math.abs ( y1 )  < functionValueAccuracy )  {^120^^^^^105^135^if  ( Math.abs ( y1 )  <= functionValueAccuracy )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^if  ( Math.abs ( r3 )  <= functionValueAccuracy )  {^120^^^^^105^135^if  ( Math.abs ( y1 )  <= functionValueAccuracy )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P9_Replace_Statement]^if  ( Math.abs ( dx )  <= tolerance )  {^120^^^^^105^135^if  ( Math.abs ( y1 )  <= functionValueAccuracy )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P13_Insert_Block]^if  (  ( abs ( dx )  )  <= tolerance )  {     setResult ( x1, i ) ;     return result; }^120^^^^^105^135^[Delete]^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^setResult ( x2, i ) ;^124^^^^^109^139^setResult ( x1, i ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^setResult (  i ) ;^124^^^^^109^139^setResult ( x1, i ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^setResult ( x1 ) ;^124^^^^^109^139^setResult ( x1, i ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^setResult ( i, x1 ) ;^124^^^^^109^139^setResult ( x1, i ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P7_Replace_Invocation]^verifyInterval ( x1, i ) ;^124^^^^^109^139^setResult ( x1, i ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P14_Delete_Statement]^^124^^^^^109^139^setResult ( x1, i ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^return solve ( min, max ) ;setResult ( x1, i ) ;^124^^^^^109^139^setResult ( x1, i ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^clearResult (  ) ;setResult ( x1, i ) ;^124^^^^^109^139^setResult ( x1, i ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^if  ( Math.abs ( dx )  > tolerance )  {^130^^^^^115^145^if  ( Math.abs ( dx )  <= tolerance )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  ( Math.abs ( r3 )  <= tolerance )  {^130^^^^^115^145^if  ( Math.abs ( dx )  <= tolerance )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  ( Math.abs ( dx )  <= x2 )  {^130^^^^^115^145^if  ( Math.abs ( dx )  <= tolerance )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  ( Math.abs ( tolerance )  <= dx )  {^130^^^^^115^145^if  ( Math.abs ( dx )  <= tolerance )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^if  ( Math.abs ( x2 )  <= tolerance )  {^130^^^^^115^145^if  ( Math.abs ( dx )  <= tolerance )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P9_Replace_Statement]^if  ( Math.abs ( y1 )  <= functionValueAccuracy )  {^130^^^^^115^145^if  ( Math.abs ( dx )  <= tolerance )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P9_Replace_Statement]^if  ( Math.abs ( delta )  > tolerance )  {^130^^^^^115^145^if  ( Math.abs ( dx )  <= tolerance )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P15_Unwrap_Block]^setResult(x1, i); return result;^130^131^132^133^^115^145^if  ( Math.abs ( dx )  <= tolerance )  { setResult ( x1, i ) ; return result; }^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P16_Remove_Block]^^130^131^132^133^^115^145^if  ( Math.abs ( dx )  <= tolerance )  { setResult ( x1, i ) ; return result; }^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P13_Insert_Block]^if  (  ( abs ( y1 )  )  <=  ( functionValueAccuracy )  )  {     setResult ( x1, i ) ;     return result; }^130^^^^^115^145^[Delete]^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^setResult ( tolerance, i ) ;^131^^^^^116^146^setResult ( x1, i ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^setResult (  i ) ;^131^^^^^116^146^setResult ( x1, i ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^setResult ( x1 ) ;^131^^^^^116^146^setResult ( x1, i ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^setResult ( i, x1 ) ;^131^^^^^116^146^setResult ( x1, i ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P7_Replace_Invocation]^verifyInterval ( x1, i ) ;^131^^^^^116^146^setResult ( x1, i ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^setResult ( r2, i ) ;^131^^^^^116^146^setResult ( x1, i ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P14_Delete_Statement]^^131^132^^^^116^146^setResult ( x1, i ) ; return result;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^return solve ( min, max ) ;setResult ( x1, i ) ;^131^^^^^116^146^setResult ( x1, i ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^clearResult (  ) ;setResult ( x1, i ) ;^131^^^^^116^146^setResult ( x1, i ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^if  (  ( Math.abs ( oldDelta )  < tolerance )  && ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^134^135^^^^119^149^if  (  ( Math.abs ( oldDelta )  < tolerance )  || ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^if  (  ( Math.abs ( oldDelta )  > tolerance )  || ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^134^135^^^^119^149^if  (  ( Math.abs ( oldDelta )  < tolerance )  || ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^if  (  ( Math.abs ( oldDelta )  < tolerance )  || ( Math.abs ( y0 )  < Math.abs ( y1 )  )  )  {^134^135^^^^119^149^if  (  ( Math.abs ( oldDelta )  < tolerance )  || ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^if  (  ( Math.abs ( oldelta )  < tolerance )  || ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^134^135^^^^119^149^if  (  ( Math.abs ( oldDelta )  < tolerance )  || ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  (  ( Math.abs ( y0 )  < tolerance )  || ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^134^135^^^^119^149^if  (  ( Math.abs ( oldDelta )  < tolerance )  || ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  (  ( Math.abs ( oldDelta )  < r2 )  || ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^134^135^^^^119^149^if  (  ( Math.abs ( oldDelta )  < tolerance )  || ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  (  ( Math.abs ( oldDelta )  < tolerance )  || ( Math.abs ( y2 )  <= Math.abs ( y1 )  )  )  {^134^135^^^^119^149^if  (  ( Math.abs ( oldDelta )  < tolerance )  || ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  (  ( Math.abs ( oldDelta )  < tolerance )  || ( Math.abs ( y0 )  <= Math.abs ( tolerance )  )  )  {^134^135^^^^119^149^if  (  ( Math.abs ( oldDelta )  < tolerance )  || ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  (  ( Math.abs ( tolerance )  < oldDelta )  || ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^134^135^^^^119^149^if  (  ( Math.abs ( oldDelta )  < tolerance )  || ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  (  ( Math.abs ( oldDelta )  < tolerance )  ) {^134^135^^^^119^149^if  (  ( Math.abs ( oldDelta )  < tolerance )  || ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  (  ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^134^135^^^^119^149^if  (  ( Math.abs ( oldDelta )  < tolerance )  || ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  ( abs ( oldDelta )  < tolerance )  {^134^135^^^^119^149^if  (  ( Math.abs ( oldDelta )  < tolerance )  || ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  ( abs ( y0 )  <= abs ( y1 ) )  {^134^135^^^^119^149^if  (  ( Math.abs ( oldDelta )  < tolerance )  || ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  ( 0.5 * dx )  {^134^135^^^^119^149^if  (  ( Math.abs ( oldDelta )  < tolerance )  || ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  ( y1 / y0 )  {^134^135^^^^119^149^if  (  ( Math.abs ( oldDelta )  < tolerance )  || ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  ( x0 == x2 )  {^134^135^^^^119^149^if  (  ( Math.abs ( oldDelta )  < tolerance )  || ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  ( dx * r3 )  {^134^135^^^^119^149^if  (  ( Math.abs ( oldDelta )  < tolerance )  || ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  ( 1.0 - r3 )  {^134^135^^^^119^149^if  (  ( Math.abs ( oldDelta )  < tolerance )  || ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  ( y0 / y2 )  {^134^135^^^^119^149^if  (  ( Math.abs ( oldDelta )  < tolerance )  || ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  ( y1 / y2 )  {^134^135^^^^119^149^if  (  ( Math.abs ( oldDelta )  < tolerance )  || ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  ( r3 * ((dx * r1) * (r1 - r2)) - ((x1 - x0) * (r2 - 1.0)) )  {^134^135^^^^119^149^if  (  ( Math.abs ( oldDelta )  < tolerance )  || ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  (  ( dx * r1 )  *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 ) )  {^134^135^^^^119^149^if  (  ( Math.abs ( oldDelta )  < tolerance )  || ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  ( dx * r1 * r1 - r2 )  {^134^135^^^^119^149^if  (  ( Math.abs ( oldDelta )  < tolerance )  || ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  ( dx * r1 )  {^134^135^^^^119^149^if  (  ( Math.abs ( oldDelta )  < tolerance )  || ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  ( r1 - r2 )  {^134^135^^^^119^149^if  (  ( Math.abs ( oldDelta )  < tolerance )  || ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  ( x1 - x0 * r2 - 1.0 )  {^134^135^^^^119^149^if  (  ( Math.abs ( oldDelta )  < tolerance )  || ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  ( x1 - x0 )  {^134^135^^^^119^149^if  (  ( Math.abs ( oldDelta )  < tolerance )  || ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  ( r2 - 1.0 )  {^134^135^^^^119^149^if  (  ( Math.abs ( oldDelta )  < tolerance )  || ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  ( (r1 - 1.0) * (r2 - 1.0) * r3 - 1.0 )  {^134^135^^^^119^149^if  (  ( Math.abs ( oldDelta )  < tolerance )  || ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  ( r1 - 1.0 * r2 - 1.0 )  {^134^135^^^^119^149^if  (  ( Math.abs ( oldDelta )  < tolerance )  || ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  ( r1 - 1.0 )  {^134^135^^^^119^149^if  (  ( Math.abs ( oldDelta )  < tolerance )  || ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  ( r3 - 1.0 )  {^134^135^^^^119^149^if  (  ( Math.abs ( oldDelta )  < tolerance )  || ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  ( p > 0.0 )  {^134^135^^^^119^149^if  (  ( Math.abs ( oldDelta )  < tolerance )  || ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  ( (2.0 * p) >= (((1.5 * dx) * p1) - abs((tolerance * p1)))) || p >= 5 * oldDelta) * p1))) )  {^134^135^^^^119^149^if  (  ( Math.abs ( oldDelta )  < tolerance )  || ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  ( 2.0 * p >=  (  ( 1.5 * dx )  * p1 )  -  ( abs (  ( tolerance * p1 )  )  ) )  {^134^135^^^^119^149^if  (  ( Math.abs ( oldDelta )  < tolerance )  || ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  ( 2.0 * p )  {^134^135^^^^119^149^if  (  ( Math.abs ( oldDelta )  < tolerance )  || ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  (  ( 1.5 * dx )  * p1 - abs (  ( tolerance * p1 )  ) )  {^134^135^^^^119^149^if  (  ( Math.abs ( oldDelta )  < tolerance )  || ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  ( 1.5 * dx * p1 )  {^134^135^^^^119^149^if  (  ( Math.abs ( oldDelta )  < tolerance )  || ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  ( 1.5 * dx )  {^134^135^^^^119^149^if  (  ( Math.abs ( oldDelta )  < tolerance )  || ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  ( tolerance * p1 )  {^134^135^^^^119^149^if  (  ( Math.abs ( oldDelta )  < tolerance )  || ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  ( p >= abs (  (  ( 0.5 * oldDelta )  * p1 )  ) )  {^134^135^^^^119^149^if  (  ( Math.abs ( oldDelta )  < tolerance )  || ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  ( 0.5 * oldDelta * p1 )  {^134^135^^^^119^149^if  (  ( Math.abs ( oldDelta )  < tolerance )  || ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  ( 0.5 * oldDelta )  {^134^135^^^^119^149^if  (  ( Math.abs ( oldDelta )  < tolerance )  || ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  ( p / p1 )  {^134^135^^^^119^149^if  (  ( Math.abs ( oldDelta )  < tolerance )  || ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P7_Replace_Invocation]^if  (  ( Math.max ( oldDelta )  < tolerance )  || ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^134^135^^^^119^149^if  (  ( Math.abs ( oldDelta )  < tolerance )  || ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^if  ( x0 != x2 )  {^143^^^^^128^158^if  ( x0 == x2 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  ( x1 == x2 )  {^143^^^^^128^158^if  ( x0 == x2 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  ( x0 == y2 )  {^143^^^^^128^158^if  ( x0 == x2 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  ( dx * r3 )  {^143^^^^^128^158^if  ( x0 == x2 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  ( 1.0 - r3 )  {^143^^^^^128^158^if  ( x0 == x2 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  ( y0 / y2 )  {^143^^^^^128^158^if  ( x0 == x2 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  ( y1 / y2 )  {^143^^^^^128^158^if  ( x0 == x2 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  ( r3 * ((dx * r1) * (r1 - r2)) - ((x1 - x0) * (r2 - 1.0)) )  {^143^^^^^128^158^if  ( x0 == x2 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  (  ( dx * r1 )  *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 ) )  {^143^^^^^128^158^if  ( x0 == x2 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  ( dx * r1 * r1 - r2 )  {^143^^^^^128^158^if  ( x0 == x2 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  ( dx * r1 )  {^143^^^^^128^158^if  ( x0 == x2 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  ( r1 - r2 )  {^143^^^^^128^158^if  ( x0 == x2 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  ( x1 - x0 * r2 - 1.0 )  {^143^^^^^128^158^if  ( x0 == x2 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  ( x1 - x0 )  {^143^^^^^128^158^if  ( x0 == x2 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  ( r2 - 1.0 )  {^143^^^^^128^158^if  ( x0 == x2 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  ( (r1 - 1.0) * (r2 - 1.0) * r3 - 1.0 )  {^143^^^^^128^158^if  ( x0 == x2 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  ( r1 - 1.0 * r2 - 1.0 )  {^143^^^^^128^158^if  ( x0 == x2 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  ( r1 - 1.0 )  {^143^^^^^128^158^if  ( x0 == x2 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  ( r3 - 1.0 )  {^143^^^^^128^158^if  ( x0 == x2 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^if  ( x2 == x2 )  {^143^^^^^128^158^if  ( x0 == x2 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p + = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^143^153^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p = r3 *  ( dx * r1 *  ( r1  >=  r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^143^153^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p / = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^143^153^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p = r3 *  ( dx - r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^143^153^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p = r3 *  ( dx * r1 *  ( r1  ^  r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^143^153^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1  ==  x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^143^153^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2  >>  1.0 )  ) ;^151^^^^^143^153^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 9.0 )  ) ;^151^^^^^143^153^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p = y0 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^143^153^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p = r3 *  ( x0 * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^143^153^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p = r3 *  ( dx * x0 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^143^153^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p = r3 *  ( dx * r1 *  ( r1 - r3 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^143^153^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( r3 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^143^153^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x1 )  *  ( r2 - 1.0 )  ) ;^151^^^^^143^153^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p = r2 *  ( dx * r1 *  ( r1 - r3 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^143^153^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p = r3 *  ( r1 * dx *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^143^153^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p = r3 *  ( dx * x1 *  ( r1 - r2 )  -  ( r1 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^143^153^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p = r3 *  ( dx * r1 *  ( r1 - x1 )  -  ( r2 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^143^153^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x0 - x1 )  *  ( r2 - 1.0 )  ) ;^151^^^^^143^153^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 0.0d )  ) ;^151^^^^^143^153^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^143^153^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p1 / =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^152^^^^^143^153^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p1 + =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^152^^^^^143^153^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p1 =  ( r1  &&  1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^152^^^^^143^153^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p1 =  ( r1 - 1.0 )  *  ( r2  !=  1.0 )  *  ( r3 - 1.0 ) ;^152^^^^^143^153^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3  >=  1.0 ) ;^152^^^^^143^153^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^p1 =  ( r1 - 5.0 )  *  ( r2 - 5.0 )  *  ( r3 - 5.0 ) ;^152^^^^^143^153^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^p1 =  ( r1 - 0.25 )  *  ( r2 - 0.25 )  *  ( r3 - 0.25 ) ;^152^^^^^143^153^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p1 =  ( y0 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^152^^^^^143^153^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p1 =  ( r1 - 1.0 )  *  ( y2 - 1.0 )  *  ( r3 - 1.0 ) ;^152^^^^^143^153^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( x2 - 1.0 ) ;^152^^^^^143^153^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p1 =  ( r3 - 1.0 )  *  ( r2 - 1.0 )  *  ( r1 - 1.0 ) ;^152^^^^^143^153^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p1 =  ( r1 - 1.0 )  *  ( r3 - 1.0 )  *  ( r2 - 1.0 ) ;^152^^^^^143^153^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^p1 =  ( r1 - 2.0d )  *  ( r2 - 2.0d )  *  ( r3 - 2.0d ) ;^152^^^^^143^153^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^152^^^^^143^153^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P1_Replace_Type]^int r1 = y0 / y2;^149^^^^^143^153^double r1 = y0 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^double r1 = y0 - y2;^149^^^^^143^153^double r1 = y0 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^double r1 = tolerance / y2;^149^^^^^143^153^double r1 = y0 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^double r1 = y0 / tolerance;^149^^^^^143^153^double r1 = y0 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^double r1 = y2 / y0;^149^^^^^143^153^double r1 = y0 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^double r1 = y0 / y1;^149^^^^^143^153^double r1 = y0 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double x1 = max;double r1 = y0 / y2;^149^^^^^143^153^double r1 = y0 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double r2 = y1 / y2;double r1 = y0 / y2;^149^^^^^143^153^double r1 = y0 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double delta = x1 - x0;double r1 = y0 / y2;^149^^^^^143^153^double r1 = y0 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double x2 = x0;double r1 = y0 / y2;^149^^^^^143^153^double r1 = y0 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double x0 = min;double r1 = y0 / y2;^149^^^^^143^153^double r1 = y0 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double y2 = y0;double r1 = y0 / y2;^149^^^^^143^153^double r1 = y0 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double r3 = y1 / y0;double r1 = y0 / y2;^149^^^^^143^153^double r1 = y0 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P1_Replace_Type]^float r2 = y1 / y2;^150^^^^^143^153^double r2 = y1 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^double r2 = y1 - y2;^150^^^^^143^153^double r2 = y1 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^double r2 = x0 / y2;^150^^^^^143^153^double r2 = y1 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^double r2 = y1 / r3;^150^^^^^143^153^double r2 = y1 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^double r2 = y2 / y1;^150^^^^^143^153^double r2 = y1 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^double r2 = y1 / y1;^150^^^^^143^153^double r2 = y1 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double x1 = max;double r2 = y1 / y2;^150^^^^^143^153^double r2 = y1 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double delta = x1 - x0;double r2 = y1 / y2;^150^^^^^143^153^double r2 = y1 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double x2 = x0;double r2 = y1 / y2;^150^^^^^143^153^double r2 = y1 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double r1 = y0 / y2;double r2 = y1 / y2;^150^^^^^143^153^double r2 = y1 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double x0 = min;double r2 = y1 / y2;^150^^^^^143^153^double r2 = y1 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double y2 = y0;double r2 = y1 / y2;^150^^^^^143^153^double r2 = y1 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double r3 = y1 / y0;double r2 = y1 / y2;^150^^^^^143^153^double r2 = y1 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p / = dx * r3;^145^^^^^130^160^p = dx * r3;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p = tolerance * r3;^145^^^^^130^160^p = dx * r3;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p = dx * tolerance;^145^^^^^130^160^p = dx * r3;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p = r3 * dx;^145^^^^^130^160^p = dx * r3;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^p1 = 1.0 - r3;p = dx * r3;^145^^^^^130^160^p = dx * r3;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p1 = 1.0  !=  r3;^146^^^^^131^161^p1 = 1.0 - r3;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^p1 = 0.5 - r3;^146^^^^^131^161^p1 = 1.0 - r3;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p1 = 1.0 - r2;^146^^^^^131^161^p1 = 1.0 - r3;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^p1 = 2.0d - r3;^146^^^^^131^161^p1 = 1.0 - r3;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^p = dx * r3;p1 = 1.0 - r3;^146^^^^^131^161^p1 = 1.0 - r3;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^if  ( p < 0.0 )  {^154^^^^^139^169^if  ( p > 0.0 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  ( tolerance > 0.0 )  {^154^^^^^139^169^if  ( p > 0.0 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^if  ( p > 0.0D )  {^154^^^^^139^169^if  ( p > 0.0 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P15_Unwrap_Block]^p1 = -p1;^154^155^156^157^158^139^169^if  ( p > 0.0 )  { p1 = -p1; } else { p = -p; }^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P16_Remove_Block]^^154^155^156^157^158^139^169^if  ( p > 0.0 )  { p1 = -p1; } else { p = -p; }^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^y0 = -p;^157^^^^^154^158^p = -p;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^p =  -y2;^157^^^^^154^158^p = -p;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^p1 = -p1;p = -p;^157^^^^^154^158^p = -p;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^x0 = -p1;^155^^^^^140^170^p1 = -p1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^p1 =  -r3;^155^^^^^140^170^p1 = -p1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^y1 = y2;p1 = -p1;^155^^^^^140^170^p1 = -p1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^x1 = x2;p1 = -p1;^155^^^^^140^170^p1 = -p1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^y0 = y1;p1 = -p1;^155^^^^^140^170^p1 = -p1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^x0 = x1;p1 = -p1;^155^^^^^140^170^p1 = -p1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^p = -p;p1 = -p1;^155^^^^^140^170^p1 = -p1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  && p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^if  ( 2.0 * p > 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^if  ( 2.0 / p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^if  ( 2.0 * p >= 1.5 * dx * p1  !=  Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^if  ( 2.0 * p >= 1.5 - dx - p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^if  ( 2.0 * p >= 1.5 / dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance - p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 / oldDelta / p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 / oldDelta * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^if - ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^if  ( 8.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^if  ( 2.0 * p >= 9.0 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.07142857142857142 * oldDelta * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 1.5 * oldDelta * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  ( 2.0 * x0 >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  ( 2.0 * p >= 1.5 * x1 * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  ( 2.0 * p >= 1.5 * dx * y1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( y1 * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * y2 * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  ( 2.0 * p1 >= 1.5 * dx * p - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  ( 2.0 * dx >= 1.5 * p * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  ( 2.0 * p >= 1.5 * tolerance * p1 - Math.abs ( dx * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  ( 2.0 * p >= 1.5 * oldDelta * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * dx * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  ) {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  (  p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  ( 2.0 * p >=  (  ( 1.5 * dx )  * p1 )  -  ( abs (  ( tolerance * p1 )  )  ) )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  ( 2.0 * p )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  (  ( 1.5 * dx )  * p1 - abs (  ( tolerance * p1 )  ) )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  ( 1.5 * dx * p1 )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  ( 1.5 * dx )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  ( tolerance * p1 )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  ( p >= abs (  (  ( 0.5 * oldDelta )  * p1 )  ) )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  ( 0.5 * oldDelta * p1 )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  ( 0.5 * oldDelta )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  ( 0.5 * dx )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  ( p / p1 )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P7_Replace_Invocation]^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.max ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^if  ( 2.0D * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * olfelta * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^oldDelta = y1;^167^^^^^159^169^oldDelta = delta;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^oldDelta =  tolerance;^167^^^^^159^169^oldDelta = delta;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^delta = p * p1;^168^^^^^159^169^delta = p / p1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^delta = tolerance / p1;^168^^^^^159^169^delta = p / p1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^delta = p / y2;^168^^^^^159^169^delta = p / p1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^delta = p1 / p;^168^^^^^159^169^delta = p / p1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^delta =  x1 / x11;^168^^^^^159^169^delta = p / p1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^delta = 0.5 * dx;delta = p / p1;^168^^^^^159^169^delta = p / p1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^delta = x1 - x0;delta = p / p1;^168^^^^^159^169^delta = p / p1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^delta / = 0.5 * dx;^164^^^^^159^169^delta = 0.5 * dx;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^delta = 0.125 * dx;^164^^^^^159^169^delta = 0.5 * dx;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^delta = 0.5 * x1;^164^^^^^159^169^delta = 0.5 * dx;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^delta = 1.0d * dx;^164^^^^^159^169^delta = 0.5 * dx;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^delta = x1 - x0;delta = 0.5 * dx;^164^^^^^159^169^delta = 0.5 * dx;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^delta = p / p1;delta = 0.5 * dx;^164^^^^^159^169^delta = 0.5 * dx;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^oldDelta = tolerance;^165^^^^^159^169^oldDelta = delta;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^oldDelta =  x0;^165^^^^^159^169^oldDelta = delta;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p = x1 * r3;^145^^^^^130^160^p = dx * r3;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p = dx * x2;^145^^^^^130^160^p = dx * r3;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p1 = 1.0  |  r3;^146^^^^^131^161^p1 = 1.0 - r3;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^p1 = 0.25 - r3;^146^^^^^131^161^p1 = 1.0 - r3;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p - = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^136^166^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p = r3 *  ( dx * r1 *  ( r1  &&  r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^136^166^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p = r3 *  ( dx - r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^136^166^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p / = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^136^166^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1  >>  x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^136^166^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2  &&  1.0 )  ) ;^151^^^^^136^166^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 6.0 )  ) ;^151^^^^^136^166^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p = y2 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^136^166^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p = r3 *  ( x0 * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^136^166^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p = r3 *  ( dx * x1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^136^166^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p = r3 *  ( dx * r1 *  ( r1 - y1 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^136^166^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( y1 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^136^166^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - tolerance )  *  ( r2 - 1.0 )  ) ;^151^^^^^136^166^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p = dx *  ( r3 * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^136^166^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p = r3 *  ( r1 * dx *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^136^166^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p = r3 *  ( dx * x1 *  ( r1 - r2 )  -  ( r1 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^136^166^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p = r2 *  ( dx * r1 *  ( r1 - r3 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^136^166^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p = r3 *  ( x1 * r1 *  ( r1 - r2 )  -  ( dx - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^136^166^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p = r3 *  ( x0 * r1 *  ( r1 - r2 )  -  ( x1 - dx )  *  ( r2 - 1.0 )  ) ;^151^^^^^136^166^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0D )  ) ;^151^^^^^136^166^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^136^166^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p1 - =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^152^^^^^137^167^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p1 / =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^152^^^^^137^167^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p1 =  ( r1  >  1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^152^^^^^137^167^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p1 =  ( r1 - 1.0 )  *  ( r2  &&  1.0 )  *  ( r3 - 1.0 ) ;^152^^^^^137^167^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3  |  1.0 ) ;^152^^^^^137^167^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^p1 =  ( r1 - 5.0 )  *  ( r2 - 5.0 )  *  ( r3 - 5.0 ) ;^152^^^^^137^167^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^p1 =  ( r1 - 0.16666666666666666 )  *  ( r2 - 0.16666666666666666 )  *  ( r3 - 0.16666666666666666 ) ;^152^^^^^137^167^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^p1 =  ( r1 - 0.2 )  *  ( r2 - 0.2 )  *  ( r3 - 0.2 ) ;^152^^^^^137^167^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p1 =  ( y0 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^152^^^^^137^167^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p1 =  ( r1 - 1.0 )  *  ( y1 - 1.0 )  *  ( r3 - 1.0 ) ;^152^^^^^137^167^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( tolerance - 1.0 ) ;^152^^^^^137^167^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p1 =  ( r3 - 1.0 )  *  ( r2 - 1.0 )  *  ( r1 - 1.0 ) ;^152^^^^^137^167^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p1 =  ( r2 - 1.0 )  *  ( r1 - 1.0 )  *  ( r3 - 1.0 ) ;^152^^^^^137^167^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^p1 =  ( r1 - 1.0D )  *  ( r2 - 1.0D )  *  ( r3 - 1.0D ) ;^152^^^^^137^167^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^152^^^^^137^167^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^r3 = -p1;^155^^^^^140^170^p1 = -p1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^p1 =  -tolerance;^155^^^^^140^170^p1 = -p1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^r3 = -p;^157^^^^^142^172^p = -p;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^p =  -tolerance;^157^^^^^142^172^p = -p;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^p1 = -p1;p = -p;^157^^^^^142^172^p = -p;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^delta - = 0.5 * dx;^164^^^^^149^179^delta = 0.5 * dx;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^delta = 0.08333333333333333 * dx;^164^^^^^149^179^delta = 0.5 * dx;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^delta = 0.5 * x2;^164^^^^^149^179^delta = 0.5 * dx;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^delta = 4.0d * dx;^164^^^^^149^179^delta = 0.5 * dx;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^delta = x1 - x0;delta = 0.5 * dx;^164^^^^^149^179^delta = 0.5 * dx;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^delta = p / p1;delta = 0.5 * dx;^164^^^^^149^179^delta = 0.5 * dx;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^oldDelta = x1;^165^^^^^150^180^oldDelta = delta;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^oldDelta =  tolerance;^165^^^^^150^180^oldDelta = delta;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^oldDelta = r3;^167^^^^^152^182^oldDelta = delta;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^oldDelta =  tolerance;^167^^^^^152^182^oldDelta = delta;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^delta = p * p1;^168^^^^^153^183^delta = p / p1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^delta = tolerance / p1;^168^^^^^153^183^delta = p / p1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^delta = p / tolerance;^168^^^^^153^183^delta = p / p1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^delta = p1 / p;^168^^^^^153^183^delta = p / p1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^delta =  x0 / x01;^168^^^^^153^183^delta = p / p1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^delta = 0.5 * dx;delta = p / p1;^168^^^^^153^183^delta = p / p1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^delta = x1 - x0;delta = p / p1;^168^^^^^153^183^delta = p / p1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P1_Replace_Type]^float r3 = y1 / y0;^140^^^^^125^155^double r3 = y1 / y0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^double r3 = y1 - y0;^140^^^^^125^155^double r3 = y1 / y0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^double r3 = r2 / y0;^140^^^^^125^155^double r3 = y1 / y0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^double r3 = y1 / r2;^140^^^^^125^155^double r3 = y1 / y0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^double r3 = y0 / y1;^140^^^^^125^155^double r3 = y1 / y0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^double r3 = y2 / y0;^140^^^^^125^155^double r3 = y1 / y0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double x1 = max;double r3 = y1 / y0;^140^^^^^125^155^double r3 = y1 / y0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double r2 = y1 / y2;double r3 = y1 / y0;^140^^^^^125^155^double r3 = y1 / y0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double delta = x1 - x0;double r3 = y1 / y0;^140^^^^^125^155^double r3 = y1 / y0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double x2 = x0;double r3 = y1 / y0;^140^^^^^125^155^double r3 = y1 / y0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double r1 = y0 / y2;double r3 = y1 / y0;^140^^^^^125^155^double r3 = y1 / y0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double x0 = min;double r3 = y1 / y0;^140^^^^^125^155^double r3 = y1 / y0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double y2 = y0;double r3 = y1 / y0;^140^^^^^125^155^double r3 = y1 / y0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P1_Replace_Type]^int p;^141^^^^^126^156^double p;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double y0;double p;^141^^^^^126^156^double p;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double y1;double p;^141^^^^^126^156^double p;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double x2 = x0;double p;^141^^^^^126^156^double p;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double p1;double p;^141^^^^^126^156^double p;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double y2 = y0;double p;^141^^^^^126^156^double p;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P1_Replace_Type]^float p1;^142^^^^^127^157^double p1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double x1 = max;double p1;^142^^^^^127^157^double p1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double y0;double p1;^142^^^^^127^157^double p1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double y1;double p1;^142^^^^^127^157^double p1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double p;double p1;^142^^^^^127^157^double p1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double x2 = x0;double p1;^142^^^^^127^157^double p1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double y2 = y0;double p1;^142^^^^^127^157^double p1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P1_Replace_Type]^int r1 = y0 / y2;^149^^^^^134^164^double r1 = y0 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^double r1 = y0 + y2;^149^^^^^134^164^double r1 = y0 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^double r1 = x1 / y2;^149^^^^^134^164^double r1 = y0 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^double r1 = y0 / y0;^149^^^^^134^164^double r1 = y0 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^double r1 = y2 / y0;^149^^^^^134^164^double r1 = y0 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^double r1 = y0 / y1;^149^^^^^134^164^double r1 = y0 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double x1 = max;double r1 = y0 / y2;^149^^^^^134^164^double r1 = y0 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double r2 = y1 / y2;double r1 = y0 / y2;^149^^^^^134^164^double r1 = y0 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double delta = x1 - x0;double r1 = y0 / y2;^149^^^^^134^164^double r1 = y0 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double x2 = x0;double r1 = y0 / y2;^149^^^^^134^164^double r1 = y0 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double x0 = min;double r1 = y0 / y2;^149^^^^^134^164^double r1 = y0 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double y2 = y0;double r1 = y0 / y2;^149^^^^^134^164^double r1 = y0 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double r3 = y1 / y0;double r1 = y0 / y2;^149^^^^^134^164^double r1 = y0 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P1_Replace_Type]^int r2 = y1 / y2;^150^^^^^135^165^double r2 = y1 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^double r2 = y1 * y2;^150^^^^^135^165^double r2 = y1 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^double r2 = x2 / y2;^150^^^^^135^165^double r2 = y1 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^double r2 = y1 / tolerance;^150^^^^^135^165^double r2 = y1 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^double r2 = y2 / y1;^150^^^^^135^165^double r2 = y1 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^double r2 = y1 / r3;^150^^^^^135^165^double r2 = y1 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double x1 = max;double r2 = y1 / y2;^150^^^^^135^165^double r2 = y1 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double delta = x1 - x0;double r2 = y1 / y2;^150^^^^^135^165^double r2 = y1 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double x2 = x0;double r2 = y1 / y2;^150^^^^^135^165^double r2 = y1 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double r1 = y0 / y2;double r2 = y1 / y2;^150^^^^^135^165^double r2 = y1 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double x0 = min;double r2 = y1 / y2;^150^^^^^135^165^double r2 = y1 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double y2 = y0;double r2 = y1 / y2;^150^^^^^135^165^double r2 = y1 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double r3 = y1 / y0;double r2 = y1 / y2;^150^^^^^135^165^double r2 = y1 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  ( 2.0 * p >= 1.5 * dx * y2 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  ( 2.0 * p >= 1.5 * dx * tolerance - Math.abs ( p1 * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.max ( x1 * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p >= Math.abs ( 0.5 + oldDelta + p1 )  )  {^160^^^^^145^175^p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p >= Math.abs ( 0.5 - oldDelta * p1 )  )  {^160^^^^^145^175^p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^p >= Math.abs ( 0.25 * oldDelta * p1 )  )  {^160^^^^^145^175^p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p >= Math.abs ( 0.5 * x1 * p1 )  )  {^160^^^^^145^175^p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p >= Math.abs ( 0.5 * oldDelta * y2 )  )  {^160^^^^^145^175^p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p >= Math.abs ( 0.5 * p1 * oldDelta )  )  {^160^^^^^145^175^p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^p >= Math.abs ( 0.5 * oldDelta * x2 )  )  {^160^^^^^145^175^p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^delta + = 0.5 * dx;^137^^^^^122^152^delta = 0.5 * dx;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^delta = 0.07142857142857142 * dx;^137^^^^^122^152^delta = 0.5 * dx;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^delta = 0.5 * x1;^137^^^^^122^152^delta = 0.5 * dx;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^delta = 0.5D * dx;^137^^^^^122^152^delta = 0.5 * dx;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^delta = x1 - x0;delta = 0.5 * dx;^137^^^^^122^152^delta = 0.5 * dx;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^delta = p / p1;delta = 0.5 * dx;^137^^^^^122^152^delta = 0.5 * dx;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^oldDelta = tolerance;^138^^^^^123^153^oldDelta = delta;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^oldDelta =  x1;^138^^^^^123^153^oldDelta = delta;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^if  ( x0 >= x2 )  {^143^^^^^128^158^if  ( x0 == x2 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  ( r3 == x2 )  {^143^^^^^128^158^if  ( x0 == x2 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  ( x0 == tolerance )  {^143^^^^^128^158^if  ( x0 == x2 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  ( x2 == x0 )  {^143^^^^^128^158^if  ( x0 == x2 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^if  ( x0 == x1 )  {^143^^^^^128^158^if  ( x0 == x2 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p = r3 *  ( dx * r1 *  ( r1  |  r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^143^153^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p = r3 *  ( dx * r1 *  ( r1  <=  r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^143^153^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p - = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^143^153^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1  &  x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^143^153^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2  |  1.0 )  ) ;^151^^^^^143^153^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 7.0 )  ) ;^151^^^^^143^153^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p = tolerance *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^143^153^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p = r3 *  ( y0 * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^143^153^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p = r3 *  ( dx * x2 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^143^153^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p = r3 *  ( dx * r1 *  ( r1 - x2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^143^153^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( y1 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^143^153^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p = dx *  ( r3 * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^143^153^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p = r1 *  ( dx * r3 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^143^153^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p = r3 *  ( dx * r2 *  ( r1 - r1 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^143^153^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p = r3 *  ( x1 * r1 *  ( r1 - r2 )  -  ( dx - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^143^153^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p = x0 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - r3 )  *  ( r2 - 1.0 )  ) ;^151^^^^^143^153^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 2.0d )  ) ;^151^^^^^143^153^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p1 - =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^152^^^^^143^153^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p1 =  ( r1  <  1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^152^^^^^143^153^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p1 =  ( r1 - 1.0 )  *  ( r2  &  1.0 )  *  ( r3 - 1.0 ) ;^152^^^^^143^153^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3  <  1.0 ) ;^152^^^^^143^153^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^p1 =  ( r1 - 0.125 )  *  ( r2 - 0.125 )  *  ( r3 - 0.125 ) ;^152^^^^^143^153^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^p1 =  ( r1 - 8.0 )  *  ( r2 - 8.0 )  *  ( r3 - 8.0 ) ;^152^^^^^143^153^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^p1 =  ( r1 - 0.1111111111111111 )  *  ( r2 - 0.1111111111111111 )  *  ( r3 - 0.1111111111111111 ) ;^152^^^^^143^153^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p1 =  ( tolerance - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^152^^^^^143^153^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p1 =  ( r1 - 1.0 )  *  ( x1 - 1.0 )  *  ( r3 - 1.0 ) ;^152^^^^^143^153^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p1 =  ( r2 - 1.0 )  *  ( r1 - 1.0 )  *  ( r3 - 1.0 ) ;^152^^^^^143^153^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^double r1 = y0 * y2;^149^^^^^143^153^double r1 = y0 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^double r1 = x0 / y2;^149^^^^^143^153^double r1 = y0 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P1_Replace_Type]^int r2 = y1 / y2;^150^^^^^143^153^double r2 = y1 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^double r2 = x1 / y2;^150^^^^^143^153^double r2 = y1 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^double r2 = y1 / tolerance;^150^^^^^143^153^double r2 = y1 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^double r2 = y1 / x1;^150^^^^^143^153^double r2 = y1 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p - = dx * r3;^145^^^^^130^160^p = dx * r3;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p1 = 1.0  &&  r3;^146^^^^^131^161^p1 = 1.0 - r3;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^p1 = 0.3333333333333333 - r3;^146^^^^^131^161^p1 = 1.0 - r3;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p1 = 1.0 - y1;^146^^^^^131^161^p1 = 1.0 - r3;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^p1 = 0.0d - r3;^146^^^^^131^161^p1 = 1.0 - r3;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^if  ( p >= 0.0 )  {^154^^^^^139^169^if  ( p > 0.0 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  ( x0 > 0.0 )  {^154^^^^^139^169^if  ( p > 0.0 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^if  ( p > 0.0d )  {^154^^^^^139^169^if  ( p > 0.0 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^r3 = -p;^157^^^^^154^158^p = -p;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^p =  -x0;^157^^^^^154^158^p = -p;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^y1 = -p1;^155^^^^^140^170^p1 = -p1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^if  ( 2.0 * p >= 1.5 * dx * p1  <=  Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^if  ( 2.0 * p >= 1.5 / dx / p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance / p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 + oldDelta + p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 + oldDelta * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^if + ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^if  ( 0.2857142857142857 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^if  ( 2.0 * p >= 0.21428571428571427 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.08333333333333333 * oldDelta * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  ( 2.0 * tolerance >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  ( 2.0 * p >= 1.5 * y2 * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  ( 2.0 * p >= 1.5 * dx * tolerance - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( r3 * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * x2 * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  ( 2.0 * oldDelta >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * p * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^if  ( 0.0d * p >= 1.5 * y2 * p1 - Math.abs ( tolerance * p1 )  ) {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^oldDelta = r3;^167^^^^^159^169^oldDelta = delta;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^oldDelta =  x0;^167^^^^^159^169^oldDelta = delta;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^delta = p + p1;^168^^^^^159^169^delta = p / p1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^delta = y2 / p1;^168^^^^^159^169^delta = p / p1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^delta = p / x0;^168^^^^^159^169^delta = p / p1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^delta =  tolerance / tolerance1;^168^^^^^159^169^delta = p / p1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^delta + = 0.5 * dx;^164^^^^^159^169^delta = 0.5 * dx;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^delta = 0.0 * dx;^164^^^^^159^169^delta = 0.5 * dx;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^delta = 0.5 * x0;^164^^^^^159^169^delta = 0.5 * dx;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^delta = 0.5D * dx;^164^^^^^159^169^delta = 0.5 * dx;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^if  ( Math.abs ( delta )  >= tolerance )  {^175^^^^^160^190^if  ( Math.abs ( delta )  > tolerance )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  ( Math.abs ( y2 )  > tolerance )  {^175^^^^^160^190^if  ( Math.abs ( delta )  > tolerance )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  ( Math.abs ( delta )  > y2 )  {^175^^^^^160^190^if  ( Math.abs ( delta )  > tolerance )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  ( Math.abs ( tolerance )  > delta )  {^175^^^^^160^190^if  ( Math.abs ( delta )  > tolerance )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  ( x1 + delta )  {^175^^^^^160^190^if  ( Math.abs ( delta )  > tolerance )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  ( dx > 0.0 )  {^175^^^^^160^190^if  ( Math.abs ( delta )  > tolerance )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  ( x1 + 0.5 * tolerance )  {^175^^^^^160^190^if  ( Math.abs ( delta )  > tolerance )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  ( 0.5 * tolerance )  {^175^^^^^160^190^if  ( Math.abs ( delta )  > tolerance )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  ( dx <= 0.0 )  {^175^^^^^160^190^if  ( Math.abs ( delta )  > tolerance )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  ( x1 - 0.5 * tolerance )  {^175^^^^^160^190^if  ( Math.abs ( delta )  > tolerance )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^if  ( Math.abs ( delta )  > r2 )  {^175^^^^^160^190^if  ( Math.abs ( delta )  > tolerance )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P9_Replace_Statement]^if  ( Math.abs ( dx )  <= tolerance )  {^175^^^^^160^190^if  ( Math.abs ( delta )  > tolerance )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P13_Insert_Block]^if  ( dx > 0.0 )  {     x1 = x1 +  ( 0.5 * tolerance ) ; }else     if  ( dx <= 0.0 )  {         x1 = x1 -  ( 0.5 * tolerance ) ;     }^175^^^^^160^190^[Delete]^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^} else if  ( dx == 0.0 )  {^177^^^^^162^192^} else if  ( dx > 0.0 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^} else if  ( tolerance > 0.0 )  {^177^^^^^162^192^} else if  ( dx > 0.0 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^} else if  ( x1 + 0.5 * tolerance )  {^177^^^^^162^192^} else if  ( dx > 0.0 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^} else if  ( 0.5 * tolerance )  {^177^^^^^162^192^} else if  ( dx > 0.0 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^} else if  ( dx <= 0.0 )  {^177^^^^^162^192^} else if  ( dx > 0.0 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^} else if  ( x1 - 0.5 * tolerance )  {^177^^^^^162^192^} else if  ( dx > 0.0 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^} else {^177^^^^^162^192^} else if  ( dx > 0.0 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^}  if  ( dx > 1.0d )  {^177^^^^^162^192^} else if  ( dx > 0.0 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P15_Unwrap_Block]^x1 = x1 + (0.5 * tolerance);^177^178^179^180^181^162^192^} else if  ( dx > 0.0 )  { x1 = x1 + 0.5 * tolerance; } else if  ( dx <= 0.0 )  { x1 = x1 - 0.5 * tolerance; }^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P16_Remove_Block]^^177^178^179^180^181^162^192^} else if  ( dx > 0.0 )  { x1 = x1 + 0.5 * tolerance; } else if  ( dx <= 0.0 )  { x1 = x1 - 0.5 * tolerance; }^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^} else if  ( dx < 0.0 )  {^179^^^^^164^194^} else if  ( dx <= 0.0 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^} else if  ( dx <= NaN )  {^179^^^^^164^194^} else if  ( dx <= 0.0 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^} else if  ( r3 <= 0.0 )  {^179^^^^^164^194^} else if  ( dx <= 0.0 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^} else if  ( x1 - 0.5 * tolerance )  {^179^^^^^164^194^} else if  ( dx <= 0.0 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^} else if  ( 0.5 * tolerance )  {^179^^^^^164^194^} else if  ( dx <= 0.0 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^} else {^179^^^^^164^194^} else if  ( dx <= 0.0 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^}  if  ( tolerance <= 4.0d )  {^179^^^^^164^194^} else if  ( dx <= 0.0 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P9_Replace_Statement]^} else if  ( dx > 0.0 )  {^179^^^^^164^194^} else if  ( dx <= 0.0 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P15_Unwrap_Block]^x1 = x1 - (0.5 * tolerance);^179^180^181^^^164^194^} else if  ( dx <= 0.0 )  { x1 = x1 - 0.5 * tolerance; }^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P16_Remove_Block]^^179^180^181^^^164^194^} else if  ( dx <= 0.0 )  { x1 = x1 - 0.5 * tolerance; }^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^x1 = x1  >=  0.5 * tolerance;^180^^^^^165^195^x1 = x1 - 0.5 * tolerance;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^x1 - = x1 - 0.5 * tolerance;^180^^^^^165^195^x1 = x1 - 0.5 * tolerance;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^x1 = x1 - 0.07142857142857142 * tolerance;^180^^^^^165^195^x1 = x1 - 0.5 * tolerance;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^x1 = r3 - 0.5 * tolerance;^180^^^^^165^195^x1 = x1 - 0.5 * tolerance;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^x1 = x1 - 0.5 * r2;^180^^^^^165^195^x1 = x1 - 0.5 * tolerance;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^x1 = tolerance - 0.5 * x1;^180^^^^^165^195^x1 = x1 - 0.5 * tolerance;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^x1 = x1 - 4.0d * tolerance;^180^^^^^165^195^x1 = x1 - 0.5 * tolerance;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^x1 = x1 + 0.5 * tolerance;x1 = x1 - 0.5 * tolerance;^180^^^^^165^195^x1 = x1 - 0.5 * tolerance;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P13_Insert_Block]^if  ( dx <= 0.0 )  {     x1 = x1 -  ( 0.5 * tolerance ) ; }^180^^^^^165^195^[Delete]^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^x1 = x1  &  0.5 * tolerance;^180^^^^^165^195^x1 = x1 - 0.5 * tolerance;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^x1 + = x1 - 0.5 * tolerance;^180^^^^^165^195^x1 = x1 - 0.5 * tolerance;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^x1 = x1 - 4.0 * tolerance;^180^^^^^165^195^x1 = x1 - 0.5 * tolerance;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^x1 = r2 - 0.5 * tolerance;^180^^^^^165^195^x1 = x1 - 0.5 * tolerance;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^x1 = x1 - 0.5 * r3;^180^^^^^165^195^x1 = x1 - 0.5 * tolerance;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^x1 = x1 - 0.5D * tolerance;^180^^^^^165^195^x1 = x1 - 0.5 * tolerance;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^x1 + = x1 + 0.5 * tolerance;^178^^^^^163^193^x1 = x1 + 0.5 * tolerance;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^x1 = x1 + 0.0625 * tolerance;^178^^^^^163^193^x1 = x1 + 0.5 * tolerance;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^x1 = x0 + 0.5 * tolerance;^178^^^^^163^193^x1 = x1 + 0.5 * tolerance;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^x1 = x1 + 0.5 * y2;^178^^^^^163^193^x1 = x1 + 0.5 * tolerance;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^x1 = tolerance + 0.5 * x1;^178^^^^^163^193^x1 = x1 + 0.5 * tolerance;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^x1 = x1 + 3.0d * tolerance;^178^^^^^163^193^x1 = x1 + 0.5 * tolerance;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^x1 = x1 - 0.5 * tolerance;x1 = x1 + 0.5 * tolerance;^178^^^^^163^193^x1 = x1 + 0.5 * tolerance;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P13_Insert_Block]^if  ( dx <= 0.0 )  {     x1 = x1 -  ( 0.5 * tolerance ) ; }^178^^^^^163^193^[Delete]^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^} else if  ( tolerance <= 0.0 )  {^179^^^^^164^194^} else if  ( dx <= 0.0 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^}  if  ( dx <= 3.0d )  {^179^^^^^164^194^} else if  ( dx <= 0.0 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^x1 = x1  &&  0.5 * tolerance;^180^^^^^165^195^x1 = x1 - 0.5 * tolerance;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^x1 / = x1 - 0.5 * tolerance;^180^^^^^165^195^x1 = x1 - 0.5 * tolerance;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^x1 = x1 - 0.08333333333333333 * tolerance;^180^^^^^165^195^x1 = x1 - 0.5 * tolerance;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^x1 / = x1 + 0.5 * tolerance;^178^^^^^163^193^x1 = x1 + 0.5 * tolerance;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^x1 = x1 + 4.5 * tolerance;^178^^^^^163^193^x1 = x1 + 0.5 * tolerance;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^x1 = x2 + 0.5 * tolerance;^178^^^^^163^193^x1 = x1 + 0.5 * tolerance;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^x1 = x1 + 0.5 * r3;^178^^^^^163^193^x1 = x1 + 0.5 * tolerance;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^x1 = x1 + 2.0d * tolerance;^178^^^^^163^193^x1 = x1 + 0.5 * tolerance;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^x1 = x1  >  0.5 * tolerance;^180^^^^^165^195^x1 = x1 - 0.5 * tolerance;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^x1 = x1 - 3.0 * tolerance;^180^^^^^165^195^x1 = x1 - 0.5 * tolerance;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^x1 = y0 - 0.5 * tolerance;^180^^^^^165^195^x1 = x1 - 0.5 * tolerance;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^x1 = x1 - 0.5 * x0;^180^^^^^165^195^x1 = x1 - 0.5 * tolerance;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^x1 = r3 + delta;^176^^^^^161^191^x1 = x1 + delta;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^x1 = x1 + x0;^176^^^^^161^191^x1 = x1 + delta;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^x1 = delta + x1;^176^^^^^161^191^x1 = x1 + delta;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^x1 =  r2 + delta;^176^^^^^161^191^x1 = x1 + delta;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^} else if  ( dx >= 0.0 )  {^177^^^^^162^192^} else if  ( dx > 0.0 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^} else if  ( y1 > 0.0 )  {^177^^^^^162^192^} else if  ( dx > 0.0 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^}  if  ( tolerance <= 0.0D )  {^179^^^^^164^194^} else if  ( dx <= 0.0 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^x1 = x1  <=  0.5 * tolerance;^180^^^^^165^195^x1 = x1 - 0.5 * tolerance;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^x1 = r3 + 0.5 * tolerance;^178^^^^^163^193^x1 = x1 + 0.5 * tolerance;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^x1 = x1 + 0.5 * r2;^178^^^^^163^193^x1 = x1 + 0.5 * tolerance;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^x1 = x1 + 4.0d * tolerance;^178^^^^^163^193^x1 = x1 + 0.5 * tolerance;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^} else if  ( x2 <= 0.0 )  {^179^^^^^164^194^} else if  ( dx <= 0.0 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^}  if  ( dx <= 4.0d )  {^179^^^^^164^194^} else if  ( dx <= 0.0 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^x1 = x1 - 0.25 * tolerance;^180^^^^^165^195^x1 = x1 - 0.5 * tolerance;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^if  (  ( y1 > 0 )  >=  ( y2 > 0 )  )  {^183^^^^^168^198^if  (  ( y1 > 0 )  ==  ( y2 > 0 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^if  (  ( y1 >= 0 )  ==  ( y2 > 0 )  )  {^183^^^^^168^198^if  (  ( y1 > 0 )  ==  ( y2 > 0 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^if  (  ( y1 > 0 )  ==  ( y2 < 0 )  )  {^183^^^^^168^198^if  (  ( y1 > 0 )  ==  ( y2 > 0 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^if  (  ( y1 > i )  ==  ( y2 > i )  )  {^183^^^^^168^198^if  (  ( y1 > 0 )  ==  ( y2 > 0 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^if  (  ( y1 > 6 )  ==  ( y2 > 6 )  )  {^183^^^^^168^198^if  (  ( y1 > 0 )  ==  ( y2 > 0 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  (  ( y1 > 0 )  ==  ( x0 > 0 )  )  {^183^^^^^168^198^if  (  ( y1 > 0 )  ==  ( y2 > 0 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  ( y1 > 0 )  {^183^^^^^168^198^if  (  ( y1 > 0 )  ==  ( y2 > 0 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  ( y2 > 0 )  {^183^^^^^168^198^if  (  ( y1 > 0 )  ==  ( y2 > 0 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P6_Replace_Expression]^if  ( x1 - x0 )  {^183^^^^^168^198^if  (  ( y1 > 0 )  ==  ( y2 > 0 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^if  (  ( r2 > 2 )  ==  ( y2 > 2 )  )  {^183^^^^^168^198^if  (  ( y1 > 0 )  ==  ( y2 > 0 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P15_Unwrap_Block]^x2 = x0; y2 = y0; delta = x1 - x0; oldDelta = delta;^183^184^185^186^187^168^198^if  (  ( y1 > 0 )  ==  ( y2 > 0 )  )  { x2 = x0; y2 = y0; delta = x1 - x0; oldDelta = delta; }^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P16_Remove_Block]^^183^184^185^186^187^168^198^if  (  ( y1 > 0 )  ==  ( y2 > 0 )  )  { x2 = x0; y2 = y0; delta = x1 - x0; oldDelta = delta; }^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^x2 = y1;^184^^^^^169^199^x2 = x0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^x2 =  r2;^184^^^^^169^199^x2 = x0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^x1 = x2;x2 = x0;^184^^^^^169^199^x2 = x0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^y2 = y0;x2 = x0;^184^^^^^169^199^x2 = x0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^x0 = x1;x2 = x0;^184^^^^^169^199^x2 = x0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^y2 = r2;^185^^^^^170^200^y2 = y0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^y2 =  tolerance;^185^^^^^170^200^y2 = y0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^x2 = x0;y2 = y0;^185^^^^^170^200^y2 = y0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^y1 = y2;y2 = y0;^185^^^^^170^200^y2 = y0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^y0 = y1;y2 = y0;^185^^^^^170^200^y2 = y0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^delta = x1  ==  x0;^186^^^^^171^201^delta = x1 - x0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^delta = y0 - x0;^186^^^^^171^201^delta = x1 - x0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^delta = x1 - r2;^186^^^^^171^201^delta = x1 - x0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^delta = x0 - x1;^186^^^^^171^201^delta = x1 - x0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^delta =  null - x0;^186^^^^^171^201^delta = x1 - x0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^delta = 0.5 * dx;delta = x1 - x0;^186^^^^^171^201^delta = x1 - x0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^delta = p / p1;delta = x1 - x0;^186^^^^^171^201^delta = x1 - x0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^oldDelta =  y2;^187^^^^^172^202^oldDelta = delta;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^x0 = r3;^113^^^^^98^128^x0 = x1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^x1 = r3;^114^^^^^99^129^x1 = x2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^x2 = tolerance;^115^^^^^100^130^x2 = x0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^x2 =  y2;^115^^^^^100^130^x2 = x0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^y0 =  y2;^116^^^^^101^131^y0 = y1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^y2 = x1;^118^^^^^103^133^y2 = y0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^delta - = 0.5 * dx;^137^^^^^122^152^delta = 0.5 * dx;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^delta = 2.5 * dx;^137^^^^^122^152^delta = 0.5 * dx;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^delta = 0.5 * r3;^137^^^^^122^152^delta = 0.5 * dx;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^delta = 3.0d * dx;^137^^^^^122^152^delta = 0.5 * dx;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^oldDelta = x2;^138^^^^^123^153^oldDelta = delta;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^oldDelta =  null;^138^^^^^123^153^oldDelta = delta;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^p1 = 0.14285714285714285 - r3;^146^^^^^131^161^p1 = 1.0 - r3;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p = r3 *  ( dx * r1 *  ( r1  !=  r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^136^166^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p + = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^136^166^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p = r3 *  ( dx + r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^136^166^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p = r3 *  ( dx * r1 *  ( r1  >  r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^136^166^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1  &  x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^136^166^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2   instanceof   1.0 )  ) ;^151^^^^^136^166^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 9.0 )  ) ;^151^^^^^136^166^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p = r2 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^136^166^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p = r3 *  ( tolerance * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^136^166^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p = r3 *  ( dx * tolerance *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^136^166^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p = r3 *  ( dx * r1 *  ( r1 - x0 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^136^166^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( r2 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^136^166^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - r3 )  *  ( r2 - 1.0 )  ) ;^151^^^^^136^166^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p = r3 *  ( dx * r2 *  ( r1 - r1 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^136^166^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p = r3 *  ( r2 * r1 *  ( r1 - dx )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^136^166^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p = r3 *  ( dx * r1 *  ( r1 - x1 )  -  ( r2 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^136^166^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p = r3 *  ( dx * r1 *  ( r1 - x0 )  -  ( x1 - r2 )  *  ( r2 - 1.0 )  ) ;^151^^^^^136^166^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 2.0d )  ) ;^151^^^^^136^166^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p1 =  ( r1  !=  1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^152^^^^^137^167^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p1 =  ( r1 - 1.0 )  *  ( r2  ==  1.0 )  *  ( r3 - 1.0 ) ;^152^^^^^137^167^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3  <=  1.0 ) ;^152^^^^^137^167^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^p1 =  ( r1 - Infinity )  *  ( r2 - Infinity )  *  ( r3 - Infinity ) ;^152^^^^^137^167^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^p1 =  ( r1 - 9.0 )  *  ( r2 - 9.0 )  *  ( r3 - 9.0 ) ;^152^^^^^137^167^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^p1 =  ( r1 - 3.0 )  *  ( r2 - 3.0 )  *  ( r3 - 3.0 ) ;^152^^^^^137^167^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p1 =  ( tolerance - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^152^^^^^137^167^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p1 =  ( r1 - 1.0 )  *  ( y2 - 1.0 )  *  ( r3 - 1.0 ) ;^152^^^^^137^167^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( y1 - 1.0 ) ;^152^^^^^137^167^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p1 =  ( r1 - 1.0 )  *  ( r3 - 1.0 )  *  ( r2 - 1.0 ) ;^152^^^^^137^167^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^p1 =  ( r1 - 2.0d )  *  ( r2 - 2.0d )  *  ( r3 - 2.0d ) ;^152^^^^^137^167^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^p =  -r3;^157^^^^^142^172^p = -p;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^delta + = 0.5 * dx;^164^^^^^149^179^delta = 0.5 * dx;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^delta = 4.0 * dx;^164^^^^^149^179^delta = 0.5 * dx;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^delta = 0.5 * x0;^164^^^^^149^179^delta = 0.5 * dx;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^delta = 3.0d * dx;^164^^^^^149^179^delta = 0.5 * dx;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^oldDelta = r3;^165^^^^^150^180^oldDelta = delta;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^oldDelta =  y2;^167^^^^^152^182^oldDelta = delta;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^delta = p + p1;^168^^^^^153^183^delta = p / p1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^delta = x1 / p1;^168^^^^^153^183^delta = p / p1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^delta = p / y2;^168^^^^^153^183^delta = p / p1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^x0 = y2;^172^^^^^157^187^x0 = x1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^x0 =  tolerance;^172^^^^^157^187^x0 = x1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^x2 = x0;x0 = x1;^172^^^^^157^187^x0 = x1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^x1 = x2;x0 = x1;^172^^^^^157^187^x0 = x1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^y0 = y1;x0 = x1;^172^^^^^157^187^x0 = x1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^p1 = -p1;x0 = x1;^172^^^^^157^187^x0 = x1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^y0 = y2;^173^^^^^158^188^y0 = y1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^y0 =  null;^173^^^^^158^188^y0 = y1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^y1 = y2;y0 = y1;^173^^^^^158^188^y0 = y1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^y2 = y0;y0 = y1;^173^^^^^158^188^y0 = y1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^x0 = x1;y0 = y1;^173^^^^^158^188^y0 = y1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^p1 = -p1;y0 = y1;^173^^^^^158^188^y0 = y1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^x1 = x1 + y2;^176^^^^^161^191^x1 = x1 + delta;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^x1 =  null + delta;^176^^^^^161^191^x1 = x1 + delta;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^x1 - = x1 + 0.5 * tolerance;^178^^^^^163^193^x1 = x1 + 0.5 * tolerance;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^x1 = x1 + 0.1 * tolerance;^178^^^^^163^193^x1 = x1 + 0.5 * tolerance;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^x1 = y1 + 0.5 * tolerance;^178^^^^^163^193^x1 = x1 + 0.5 * tolerance;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^x1 = x1 + 0.5D * tolerance;^178^^^^^163^193^x1 = x1 + 0.5 * tolerance;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^x1 = x1  ||  0.5 * tolerance;^180^^^^^165^195^x1 = x1 - 0.5 * tolerance;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^x1 = x1 - 2.0d * tolerance;^180^^^^^165^195^x1 = x1 - 0.5 * tolerance;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^y1 = f.value ( r2 ) ;^182^^^^^167^197^y1 = f.value ( x1 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^y1 = x1.value ( f ) ;^182^^^^^167^197^y1 = f.value ( x1 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^y1 =  f.value ( r3 ) ;^182^^^^^167^197^y1 = f.value ( x1 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^y0 = f.value ( x0 ) ;y1 = f.value ( x1 ) ;^182^^^^^167^197^y1 = f.value ( x1 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^x2 = tolerance;^184^^^^^169^199^x2 = x0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^y2 = y2;^185^^^^^170^200^y2 = y0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^delta = x1  |  x0;^186^^^^^171^201^delta = x1 - x0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^delta = r2 - x0;^186^^^^^171^201^delta = x1 - x0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^delta =  r3 - x0;^186^^^^^171^201^delta = x1 - x0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^return 0;^125^^^^^110^140^return result;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^return this;^132^^^^^117^147^return result;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P1_Replace_Type]^int dx =  ( x2 - x1 ) ;^127^^^^^112^142^double dx =  ( x2 - x1 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^double dx =  ( x2   instanceof   x1 ) ;^127^^^^^112^142^double dx =  ( x2 - x1 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^double dx =  ( x1 - x1 ) ;^127^^^^^112^142^double dx =  ( x2 - x1 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^double dx =  ( x2 - r3 ) ;^127^^^^^112^142^double dx =  ( x2 - x1 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^double dx =  ( x1 - x2 ) ;^127^^^^^112^142^double dx =  ( x2 - x1 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^double dx =  ( r3 - x1 ) ;^127^^^^^112^142^double dx =  ( x2 - x1 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P11_Insert_Donor_Statement]^double delta = x1 - x0;double dx =  ( x2 - x1 ) ;^127^^^^^112^142^double dx =  ( x2 - x1 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P1_Replace_Type]^int tolerance = Math.max ( relativeAccuracy * Math.abs ( x1 ) , absoluteAccuracy ) ;^128^129^^^^113^143^double tolerance = Math.max ( relativeAccuracy * Math.abs ( x1 ) , absoluteAccuracy ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^double / tolerance = Math.max ( relativeAccuracy * Math.abs ( x1 ) , absoluteAccuracy ) ;^128^129^^^^113^143^double tolerance = Math.max ( relativeAccuracy * Math.abs ( x1 ) , absoluteAccuracy ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^double tolerance = Math.max ( relativeAccuracy * Math.abs ( r2 ) , absoluteAccuracy ) ;^128^129^^^^113^143^double tolerance = Math.max ( relativeAccuracy * Math.abs ( x1 ) , absoluteAccuracy ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^double tolerance = Math.max ( relativeAccuracy * Math.abs ( x1 )  ) ;^128^129^^^^113^143^double tolerance = Math.max ( relativeAccuracy * Math.abs ( x1 ) , absoluteAccuracy ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^double tolerance = Math.max ( x1 * Math.abs ( relativeAccuracy ) , absoluteAccuracy ) ;^128^129^^^^113^143^double tolerance = Math.max ( relativeAccuracy * Math.abs ( x1 ) , absoluteAccuracy ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^double tolerance = Math.max ( absoluteAccuracy * Math.abs ( x1 ) , relativeAccuracy ) ;^128^129^^^^113^143^double tolerance = Math.max ( relativeAccuracy * Math.abs ( x1 ) , absoluteAccuracy ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P7_Replace_Invocation]^double tolerance = Math.abs ( relativeAccuracy * Math.abs ( x1 ) , absoluteAccuracy ) ;^128^129^^^^113^143^double tolerance = Math.max ( relativeAccuracy * Math.abs ( x1 ) , absoluteAccuracy ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P1_Replace_Type]^int r3 = y1 / y0;^140^^^^^125^155^double r3 = y1 / y0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^double r3 = y1 + y0;^140^^^^^125^155^double r3 = y1 / y0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^double r3 = x0 / y0;^140^^^^^125^155^double r3 = y1 / y0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^double r3 = y1 / tolerance;^140^^^^^125^155^double r3 = y1 / y0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P1_Replace_Type]^int p1;^142^^^^^127^157^double p1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^double r1 = r3 / y2;^149^^^^^134^164^double r1 = y0 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^double r1 = y0 / x0;^149^^^^^134^164^double r1 = y0 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^double r2 = y1 + y2;^150^^^^^135^165^double r2 = y1 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  ( Math.abs ( y2 )  < Math.abs ( x1 )  )  {^112^^^^^97^127^if  ( Math.abs ( y2 )  < Math.abs ( y1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^if  ( Math.abs ( y2 )  < Math.abs ( r2 )  )  {^112^^^^^97^127^if  ( Math.abs ( y2 )  < Math.abs ( y1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^setResult ( y0, i ) ;^124^^^^^109^139^setResult ( x1, i ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^setResult ( x0, i ) ;^124^^^^^109^139^setResult ( x1, i ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P14_Delete_Statement]^^124^125^^^^109^139^setResult ( x1, i ) ; return result;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^Math.max + ( relativeAccuracy * Math.abs ( x1 ) , absoluteAccuracy ) ;^129^^^^^114^144^Math.max ( relativeAccuracy * Math.abs ( x1 ) , absoluteAccuracy ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^Math.max ( relativeAccuracy * Math.abs ( y0 ) , absoluteAccuracy ) ;^129^^^^^114^144^Math.max ( relativeAccuracy * Math.abs ( x1 ) , absoluteAccuracy ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^Math.max ( relativeAccuracy * Math.abs ( x1 )  ) ;^129^^^^^114^144^Math.max ( relativeAccuracy * Math.abs ( x1 ) , absoluteAccuracy ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^Math.max ( x1 * Math.abs ( relativeAccuracy ) , absoluteAccuracy ) ;^129^^^^^114^144^Math.max ( relativeAccuracy * Math.abs ( x1 ) , absoluteAccuracy ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^Math.max ( relativeAccuracy * Math.abs ( absoluteAccuracy ) , x1 ) ;^129^^^^^114^144^Math.max ( relativeAccuracy * Math.abs ( x1 ) , absoluteAccuracy ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P7_Replace_Invocation]^Math.abs ( relativeAccuracy * Math.abs ( x1 ) , absoluteAccuracy ) ;^129^^^^^114^144^Math.max ( relativeAccuracy * Math.abs ( x1 ) , absoluteAccuracy ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^Math.abs ( relativeAccuracy * Math.abs ( r3 ) , absoluteAccuracy ) ;^129^^^^^114^144^Math.max ( relativeAccuracy * Math.abs ( x1 ) , absoluteAccuracy ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P14_Delete_Statement]^^129^^^^^114^144^Math.max ( relativeAccuracy * Math.abs ( x1 ) , absoluteAccuracy ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^Math.max ( relativeAccuracy * Math.abs ( x2 ) , absoluteAccuracy ) ;^129^^^^^114^144^Math.max ( relativeAccuracy * Math.abs ( x1 ) , absoluteAccuracy ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^Math.max ( relativeAccuracy * Math.abs ( r2 ) , absoluteAccuracy ) ;^129^^^^^114^144^Math.max ( relativeAccuracy * Math.abs ( x1 ) , absoluteAccuracy ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  ( Math.abs ( y0 )  <= tolerance )  {^130^^^^^115^145^if  ( Math.abs ( dx )  <= tolerance )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^if  ( Math.abs ( y2 )  <= tolerance )  {^130^^^^^115^145^if  ( Math.abs ( dx )  <= tolerance )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^setResult ( r3, i ) ;^131^^^^^116^146^setResult ( x1, i ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^setResult ( y2, i ) ;^131^^^^^116^146^setResult ( x1, i ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  (  ( Math.abs ( x2 )  < tolerance )  || ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^134^135^^^^119^149^if  (  ( Math.abs ( oldDelta )  < tolerance )  || ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^if  (  ( Math.abs ( y2 )  < tolerance )  || ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^134^135^^^^119^149^if  (  ( Math.abs ( oldDelta )  < tolerance )  || ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^( Math.abs ( r2 )  <= Math.abs ( y1 )  )  )  {^135^^^^^120^150^( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P14_Delete_Statement]^^135^136^137^^^120^150^( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {  delta = 0.5 * dx;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^( Math.abs ( y0 )  <= Math.abs ( r3 )  )  )  {^135^^^^^120^150^( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( x2 * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  ( 2.0 * p >= 1.5 * dx * x0 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p >= Math.abs ( 0.5 - oldDelta - p1 )  )  {^160^^^^^145^175^p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p >= Math.abs ( 0.5 / oldDelta * p1 )  )  {^160^^^^^145^175^p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^p >= Math.abs ( 1.5 * oldDelta * p1 )  )  {^160^^^^^145^175^p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p >= Math.abs ( 0.5 * tolerance * p1 )  )  {^160^^^^^145^175^p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  ( Math.abs ( r3 )  > tolerance )  {^175^^^^^160^190^if  ( Math.abs ( delta )  > tolerance )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^y1 = f.value ( y2 ) ;^182^^^^^167^197^y1 = f.value ( x1 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^y1 = null.value ( x1 ) ;^182^^^^^167^197^y1 = f.value ( x1 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P14_Delete_Statement]^^182^^^^^167^197^y1 = f.value ( x1 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^if  ( Math.abs ( y2 )  <= Math.abs ( y1 )  )  {^112^^^^^97^127^if  ( Math.abs ( y2 )  < Math.abs ( y1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  ( Math.abs ( r3 )  < Math.abs ( y1 )  )  {^112^^^^^97^127^if  ( Math.abs ( y2 )  < Math.abs ( y1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  ( Math.abs ( y1 )  < Math.abs ( y2 )  )  {^112^^^^^97^127^if  ( Math.abs ( y2 )  < Math.abs ( y1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^if  ( Math.abs ( y2 )  < Math.abs ( x0 )  )  {^112^^^^^97^127^if  ( Math.abs ( y2 )  < Math.abs ( y1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^x0 =  x2;^113^^^^^98^128^x0 = x1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^x1 = x1;^114^^^^^99^129^x1 = x2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^x1 =  tolerance;^114^^^^^99^129^x1 = x2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^x2 =  r3;^115^^^^^100^130^x2 = x0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^y1 =  null;^117^^^^^102^132^y1 = y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^if  ( Math.abs ( y1 )  == functionValueAccuracy )  {^120^^^^^105^135^if  ( Math.abs ( y1 )  <= functionValueAccuracy )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  ( Math.abs ( y0 )  <= functionValueAccuracy )  {^120^^^^^105^135^if  ( Math.abs ( y1 )  <= functionValueAccuracy )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^if  ( Math.abs ( tolerance )  <= functionValueAccuracy )  {^120^^^^^105^135^if  ( Math.abs ( y1 )  <= functionValueAccuracy )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^setResult ( r3, i ) ;^124^^^^^109^139^setResult ( x1, i ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^if  ( Math.abs ( dx )  == tolerance )  {^130^^^^^115^145^if  ( Math.abs ( dx )  <= tolerance )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  ( Math.abs ( tolerance )  <= tolerance )  {^130^^^^^115^145^if  ( Math.abs ( dx )  <= tolerance )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  ( Math.abs ( dx )  <= r3 )  {^130^^^^^115^145^if  ( Math.abs ( dx )  <= tolerance )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P14_Delete_Statement]^^131^^^^^116^146^setResult ( x1, i ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^if  (  ( Math.abs ( oldDelta )  <= tolerance )  || ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^134^135^^^^119^149^if  (  ( Math.abs ( oldDelta )  < tolerance )  || ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  (  ( Math.abs ( x1 )  < tolerance )  || ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^134^135^^^^119^149^if  (  ( Math.abs ( oldDelta )  < tolerance )  || ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  (  ( Math.abs ( oldDelta )  < x2 )  || ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^134^135^^^^119^149^if  (  ( Math.abs ( oldDelta )  < tolerance )  || ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  (  ( Math.abs ( oldDelta )  < tolerance )  || ( Math.abs ( tolerance )  <= Math.abs ( y1 )  )  )  {^134^135^^^^119^149^if  (  ( Math.abs ( oldDelta )  < tolerance )  || ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  (  ( Math.abs ( oldDelta )  < tolerance )  || ( Math.abs ( y0 )  <= Math.abs ( y0 )  )  )  {^134^135^^^^119^149^if  (  ( Math.abs ( oldDelta )  < tolerance )  || ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  (  ( Math.abs ( oldDelta )  < y0 )  || ( Math.abs ( tolerance )  <= Math.abs ( y1 )  )  )  {^134^135^^^^119^149^if  (  ( Math.abs ( oldDelta )  < tolerance )  || ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^if  ( y2 == x2 )  {^143^^^^^128^158^if  ( x0 == x2 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p = r3 *  ( dx * r1 *  ( r1  ==  r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^143^153^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p = r3 *  ( dx / r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^143^153^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p = r3 *  ( dx * r1 *  ( r1  !=  r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^143^153^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1  >>  x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^143^153^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2  ^  1.0 )  ) ;^151^^^^^143^153^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p = r3 *  ( x1 * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^143^153^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p = r3 *  ( dx * y1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^143^153^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p = r3 *  ( dx * r1 *  ( r1 - tolerance )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^143^153^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( y0 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^143^153^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - y1 )  *  ( r2 - 1.0 )  ) ;^151^^^^^143^153^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p = r3 *  ( r2 * r1 *  ( r1 - dx )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^143^153^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p1 =  ( r1  ^  1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^152^^^^^143^153^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p1 =  ( r1 - 1.0 )  *  ( r2  ||  1.0 )  *  ( r3 - 1.0 ) ;^152^^^^^143^153^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^p1 =  ( r1 - 4.0 )  *  ( r2 - 4.0 )  *  ( r3 - 4.0 ) ;^152^^^^^143^153^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^p1 =  ( r1 - 9.0 )  *  ( r2 - 9.0 )  *  ( r3 - 9.0 ) ;^152^^^^^143^153^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^p1 =  ( r1 - 3.0 )  *  ( r2 - 3.0 )  *  ( r3 - 3.0 ) ;^152^^^^^143^153^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p1 =  ( x1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^152^^^^^143^153^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( tolerance - 1.0 ) ;^152^^^^^143^153^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^p1 =  ( r1 - 4.0d )  *  ( r2 - 4.0d )  *  ( r3 - 4.0d ) ;^152^^^^^143^153^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P1_Replace_Type]^float r1 = y0 / y2;^149^^^^^143^153^double r1 = y0 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^double r1 = x1 / y2;^149^^^^^143^153^double r1 = y0 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^double r1 = y0 / y0;^149^^^^^143^153^double r1 = y0 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^double r2 = y1 * y2;^150^^^^^143^153^double r2 = y1 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^double r2 = r3 / y2;^150^^^^^143^153^double r2 = y1 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p + = dx * r3;^145^^^^^130^160^p = dx * r3;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p = x0 * r3;^145^^^^^130^160^p = dx * r3;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p = dx * x1;^145^^^^^130^160^p = dx * r3;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^p =  x2 * r3;^145^^^^^130^160^p = dx * r3;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^p1 = 0.16666666666666666 - r3;^146^^^^^131^161^p1 = 1.0 - r3;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p1 = 1.0 - tolerance;^146^^^^^131^161^p1 = 1.0 - r3;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^p1 = 4.0d - r3;^146^^^^^131^161^p1 = 1.0 - r3;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  ( x1 > 0.0 )  {^154^^^^^139^169^if  ( p > 0.0 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^if  ( p > 3.0d )  {^154^^^^^139^169^if  ( p > 0.0 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^x2 = -p;^157^^^^^154^158^p = -p;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^p =  -tolerance;^157^^^^^154^158^p = -p;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^if  ( 2.0 * p >= 1.5 * dx * p1  >  Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^if  ( 2.0 * p >= 1.5 + dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance + p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^if  ( 1.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^if  ( 2.0 * p >= 0.16666666666666666 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 2.5 * oldDelta * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.25 * oldDelta * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  ( 2.0 * p >= 1.5 * tolerance * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  ( 2.0 * p >= 1.5 * dx * oldDelta - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * p1 * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( oldDelta * p1 )  || p >= Math.abs ( 0.5 * tolerance * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^if  (  p >= Math.abs ( 0.5 * olfelta * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^oldDelta =  x1;^167^^^^^159^169^oldDelta = delta;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^delta = x0 / p1;^168^^^^^159^169^delta = p / p1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^delta =  y0 / y01;^168^^^^^159^169^delta = p / p1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^delta = 0.0625 * dx;^164^^^^^159^169^delta = 0.5 * dx;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^delta = 0.5 * r3;^164^^^^^159^169^delta = 0.5 * dx;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^oldDelta = x2;^165^^^^^159^169^oldDelta = delta;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p = y0 * r3;^145^^^^^130^160^p = dx * r3;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p1 = 1.0  <<  r3;^146^^^^^131^161^p1 = 1.0 - r3;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^p1 = 2.0 - r3;^146^^^^^131^161^p1 = 1.0 - r3;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p = r3 *  ( dx * r1 *  ( r1  >=  r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^136^166^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p = r3 *  ( dx / r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^136^166^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p = r3 *  ( dx * r1 *  ( r1  |  r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^136^166^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1  <  x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^136^166^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2  ^  1.0 )  ) ;^151^^^^^136^166^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 0.25 )  ) ;^151^^^^^136^166^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p = x1 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^136^166^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p = r3 *  ( y0 * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^136^166^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p = r3 *  ( dx * r1 *  ( r1 - tolerance )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^136^166^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p = x0 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - r3 )  *  ( r2 - 1.0 )  ) ;^151^^^^^136^166^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x0 - x1 )  *  ( r2 - 1.0 )  ) ;^151^^^^^136^166^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 4.0d )  ) ;^151^^^^^136^166^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p1 + =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^152^^^^^137^167^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p1 =  ( r1  >>  1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^152^^^^^137^167^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p1 =  ( r1 - 1.0 )  *  ( r2  >>  1.0 )  *  ( r3 - 1.0 ) ;^152^^^^^137^167^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3  >=  1.0 ) ;^152^^^^^137^167^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^p1 =  ( r1 - 8.0 )  *  ( r2 - 8.0 )  *  ( r3 - 8.0 ) ;^152^^^^^137^167^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^p1 =  ( r1 - 4.0 )  *  ( r2 - 4.0 )  *  ( r3 - 4.0 ) ;^152^^^^^137^167^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p1 =  ( x1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^152^^^^^137^167^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( x0 - 1.0 ) ;^152^^^^^137^167^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^x2 = -p1;^155^^^^^140^170^p1 = -p1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^tolerance = -p;^157^^^^^142^172^p = -p;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^delta / = 0.5 * dx;^164^^^^^149^179^delta = 0.5 * dx;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^delta = 0.1 * dx;^164^^^^^149^179^delta = 0.5 * dx;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^delta = 0.5 * r3;^164^^^^^149^179^delta = 0.5 * dx;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^delta = 0.5D * dx;^164^^^^^149^179^delta = 0.5 * dx;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^oldDelta = y0;^167^^^^^152^182^oldDelta = delta;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^oldDelta =  y1;^167^^^^^152^182^oldDelta = delta;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^delta = p - p1;^168^^^^^153^183^delta = p / p1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^delta = y1 / p1;^168^^^^^153^183^delta = p / p1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^delta = p / x2;^168^^^^^153^183^delta = p / p1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^delta =  y0 / y01;^168^^^^^153^183^delta = p / p1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^double r3 = y1 * y0;^140^^^^^125^155^double r3 = y1 / y0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^double r3 = y0 / y0;^140^^^^^125^155^double r3 = y1 / y0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^double r3 = y1 / x1;^140^^^^^125^155^double r3 = y1 / y0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^double r1 = y0 - y2;^149^^^^^134^164^double r1 = y0 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^double r1 = tolerance / y2;^149^^^^^134^164^double r1 = y0 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^double r1 = y0 / r3;^149^^^^^134^164^double r1 = y0 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^double r1 = x2 / y2;^149^^^^^134^164^double r1 = y0 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^double r2 = x1 / y2;^150^^^^^135^165^double r2 = y1 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( y2 * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  ( 2.0 * p >= 1.5 * dx * x1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^if  ( 2.0 * p >= 1.5 * dx * x1 - Math.max ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p >= Math.abs ( 0.5 / oldDelta / p1 )  )  {^160^^^^^145^175^p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p >= Math.abs ( 0.5 + oldDelta * p1 )  )  {^160^^^^^145^175^p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^p >= Math.abs ( 1.0 * oldDelta * p1 )  )  {^160^^^^^145^175^p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p >= Math.abs ( 0.5 * y0 * p1 )  )  {^160^^^^^145^175^p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p >= Math.abs ( 0.5 * oldDelta * x0 )  )  {^160^^^^^145^175^p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^p >= Math.abs ( 0.5 * y2 * p1 )  )  {^160^^^^^145^175^p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^delta = 1.5 * dx;^137^^^^^122^152^delta = 0.5 * dx;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^oldDelta = r3;^138^^^^^123^153^oldDelta = delta;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  ( y1 == x2 )  {^143^^^^^128^158^if  ( x0 == x2 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  ( x0 == x0 )  {^143^^^^^128^158^if  ( x0 == x2 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p = r3 *  ( dx * r1 *  ( r1  <  r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^143^153^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p = r3 *  ( dx + r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^143^153^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p = r3 *  ( dx * r1 *  ( r1   instanceof   r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^143^153^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p = x0 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^143^153^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( y2 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^143^153^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x2 )  *  ( r2 - 1.0 )  ) ;^151^^^^^143^153^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p = r3 *  ( dx * r1 *  ( r1 - x0 )  -  ( x1 - r2 )  *  ( r2 - 1.0 )  ) ;^151^^^^^143^153^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0d )  ) ;^151^^^^^143^153^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p1 =  ( r1  ||  1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^152^^^^^143^153^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p1 =  ( r1 - 1.0 )  *  ( r2  >  1.0 )  *  ( r3 - 1.0 ) ;^152^^^^^143^153^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3  <=  1.0 ) ;^152^^^^^143^153^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^p1 =  ( r1 - 6.0 )  *  ( r2 - 6.0 )  *  ( r3 - 6.0 ) ;^152^^^^^143^153^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^p1 =  ( r1 - 0.16666666666666666 )  *  ( r2 - 0.16666666666666666 )  *  ( r3 - 0.16666666666666666 ) ;^152^^^^^143^153^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^p1 =  ( r1 - 0.5 )  *  ( r2 - 0.5 )  *  ( r3 - 0.5 ) ;^152^^^^^143^153^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p1 =  ( x2 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^152^^^^^143^153^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p1 =  ( r1 - 1.0 )  *  ( tolerance - 1.0 )  *  ( r3 - 1.0 ) ;^152^^^^^143^153^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^double r1 = y0 + y2;^149^^^^^143^153^double r1 = y0 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^double r1 = y0 / r3;^149^^^^^143^153^double r1 = y0 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^p =  y2 * r3;^145^^^^^130^160^p = dx * r3;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p1 = 1.0  <=  r3;^146^^^^^131^161^p1 = 1.0 - r3;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p1 = 1.0 - x1;^146^^^^^131^161^p1 = 1.0 - r3;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  ( y1 > 0.0 )  {^154^^^^^139^169^if  ( p > 0.0 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^x1 = -p;^157^^^^^154^158^p = -p;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^p =  -x1;^157^^^^^154^158^p = -p;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^p1 =  -null;^155^^^^^140^170^p1 = -p1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^if  ( 2.0 * p == 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^if  ( 2.0 + p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^if  ( 2.0 * p >= 1.5 * dx * p1  |  Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 - oldDelta * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^if  ( 10.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^if  ( 2.0 * p >= 7.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.0625 * oldDelta * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  ( 2.0 * p >= 1.5 * y0 * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  ( 2.0 * p >= 1.5 * dx * x2 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( x0 * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * x0 * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  ( 2.0 * tolerance >= 1.5 * dx * p1 - Math.abs ( p * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^oldDelta = x2;^167^^^^^159^169^oldDelta = delta;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^delta = p - p1;^168^^^^^159^169^delta = p / p1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^delta = p / x2;^168^^^^^159^169^delta = p / p1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^delta - = 0.5 * dx;^164^^^^^159^169^delta = 0.5 * dx;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^delta = 3.5 * dx;^164^^^^^159^169^delta = 0.5 * dx;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^if  ( Math.abs ( delta )  < tolerance )  {^175^^^^^160^190^if  ( Math.abs ( delta )  > tolerance )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^} else if  ( x1 > 0.0 )  {^177^^^^^162^192^} else if  ( dx > 0.0 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^}  if  ( dx > 0.0D )  {^177^^^^^162^192^} else if  ( dx > 0.0 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^}  if  ( dx <= 0.0d )  {^179^^^^^164^194^} else if  ( dx <= 0.0 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^x1 = x1 - 0.125 * tolerance;^180^^^^^165^195^x1 = x1 - 0.5 * tolerance;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^x1 = x2 - 0.5 * tolerance;^180^^^^^165^195^x1 = x1 - 0.5 * tolerance;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^x1 = x1 - 0.5 * y0;^180^^^^^165^195^x1 = x1 - 0.5 * tolerance;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^x1 = x1 - 0.0d * tolerance;^180^^^^^165^195^x1 = x1 - 0.5 * tolerance;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^x1 = x1 + 0.05555555555555555 * tolerance;^178^^^^^163^193^x1 = x1 + 0.5 * tolerance;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^x1 = y2 + 0.5 * tolerance;^178^^^^^163^193^x1 = x1 + 0.5 * tolerance;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^x1 = x1 + 0.0d * tolerance;^178^^^^^163^193^x1 = x1 + 0.5 * tolerance;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^x1 = x1   instanceof   0.5 * tolerance;^180^^^^^165^195^x1 = x1 - 0.5 * tolerance;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^x1 = x1 - 0.0625 * tolerance;^180^^^^^165^195^x1 = x1 - 0.5 * tolerance;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^x1 = x0 - 0.5 * tolerance;^180^^^^^165^195^x1 = x1 - 0.5 * tolerance;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^x1 = x1 + 4.0 * tolerance;^178^^^^^163^193^x1 = x1 + 0.5 * tolerance;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^x1 = x1 - 1.5 * tolerance;^180^^^^^165^195^x1 = x1 - 0.5 * tolerance;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^x1 = y2 + delta;^176^^^^^161^191^x1 = x1 + delta;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^x1 = x1 + r3;^176^^^^^161^191^x1 = x1 + delta;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^x1 =  x2 + delta;^176^^^^^161^191^x1 = x1 + delta;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^}  if  ( dx > 4.0d )  {^177^^^^^162^192^} else if  ( dx > 0.0 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^} else if  ( x1 <= 0.0 )  {^179^^^^^164^194^} else if  ( dx <= 0.0 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^x1 = x1 - 4.5 * tolerance;^180^^^^^165^195^x1 = x1 - 0.5 * tolerance;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^x1 = x1 - 0.16666666666666666 * tolerance;^180^^^^^165^195^x1 = x1 - 0.5 * tolerance;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^}  if  ( r3 <= 0.0D )  {^179^^^^^164^194^} else if  ( dx <= 0.0 )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^x1 = x1  !=  0.5 * tolerance;^180^^^^^165^195^x1 = x1 - 0.5 * tolerance;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^x1 = x1 - 0.1 * tolerance;^180^^^^^165^195^x1 = x1 - 0.5 * tolerance;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^if  (  ( y1 > 0 )  !=  ( y2 > 0 )  )  {^183^^^^^168^198^if  (  ( y1 > 0 )  ==  ( y2 > 0 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^if  (  ( y1 < 0 )  ==  ( y2 > 0 )  )  {^183^^^^^168^198^if  (  ( y1 > 0 )  ==  ( y2 > 0 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^if  (  ( y1 > 0 )  ==  ( y2 >= 0 )  )  {^183^^^^^168^198^if  (  ( y1 > 0 )  ==  ( y2 > 0 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^if  (  ( y1 >  )  ==  ( y2 >  )  )  {^183^^^^^168^198^if  (  ( y1 > 0 )  ==  ( y2 > 0 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  (  ( r2 > 0 )  ==  ( y2 > 0 )  )  {^183^^^^^168^198^if  (  ( y1 > 0 )  ==  ( y2 > 0 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  (  ( y1 > 0 )  ==  ( x2 > 0 )  )  {^183^^^^^168^198^if  (  ( y1 > 0 )  ==  ( y2 > 0 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  (  ( y2 > 0 )  ==  ( y1 > 0 )  )  {^183^^^^^168^198^if  (  ( y1 > 0 )  ==  ( y2 > 0 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^if  (  ( y1 > 0L )  ==  ( y2 > 0L )  )  {^183^^^^^168^198^if  (  ( y1 > 0 )  ==  ( y2 > 0 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^delta = x1  ||  x0;^186^^^^^171^201^delta = x1 - x0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^delta = x2 - x0;^186^^^^^171^201^delta = x1 - x0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^delta = x1 - r3;^186^^^^^171^201^delta = x1 - x0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^oldDelta = x1;^187^^^^^172^202^oldDelta = delta;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^oldDelta =  x2;^187^^^^^172^202^oldDelta = delta;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^x1 = r2;^114^^^^^99^129^x1 = x2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^x2 = x2;^115^^^^^100^130^x2 = x0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^x2 =  y0;^115^^^^^100^130^x2 = x0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^y1 = r3;^117^^^^^102^132^y1 = y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^y2 = y1;^118^^^^^103^133^y2 = y0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^delta = 0.08333333333333333 * dx;^137^^^^^122^152^delta = 0.5 * dx;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^delta = 0.5 * tolerance;^137^^^^^122^152^delta = 0.5 * dx;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^p1 = 0.125 - r3;^146^^^^^131^161^p1 = 1.0 - r3;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p = r3 *  ( dx * r1 *  ( r1  ^  r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^136^166^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p = r3 *  ( dx * r1 *  ( r1  ||  r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^136^166^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1  ||  x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^136^166^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2  >  1.0 )  ) ;^151^^^^^136^166^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 0.2 )  ) ;^151^^^^^136^166^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p = tolerance *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^136^166^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - r2 )  *  ( r2 - 1.0 )  ) ;^151^^^^^136^166^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p = r1 *  ( dx * r3 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^151^^^^^136^166^p = r3 *  ( dx * r1 *  ( r1 - r2 )  -  ( x1 - x0 )  *  ( r2 - 1.0 )  ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^p1 =  ( r1  <<  1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^152^^^^^137^167^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^p1 =  ( r1 - 0.125 )  *  ( r2 - 0.125 )  *  ( r3 - 0.125 ) ;^152^^^^^137^167^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p1 =  ( r1 - 1.0 )  *  ( y0 - 1.0 )  *  ( r3 - 1.0 ) ;^152^^^^^137^167^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( y0 - 1.0 ) ;^152^^^^^137^167^p1 =  ( r1 - 1.0 )  *  ( r2 - 1.0 )  *  ( r3 - 1.0 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^x2 = -p;^157^^^^^142^172^p = -p;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^delta = 0.5 * x1;^164^^^^^149^179^delta = 0.5 * dx;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^oldDelta = y2;^165^^^^^150^180^oldDelta = delta;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^oldDelta =  null;^165^^^^^150^180^oldDelta = delta;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^oldDelta = x0;^167^^^^^152^182^oldDelta = delta;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^delta =  null / null1;^168^^^^^153^183^delta = p / p1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^x0 = r3;^172^^^^^157^187^x0 = x1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^y0 = y0;^173^^^^^158^188^y0 = y1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^y0 =  x1;^173^^^^^158^188^y0 = y1;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^x1 =  y0 + delta;^176^^^^^161^191^x1 = x1 + delta;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^x1 = x1 - 3.5 * tolerance;^180^^^^^165^195^x1 = x1 - 0.5 * tolerance;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^x1 = y2 - 0.5 * tolerance;^180^^^^^165^195^x1 = x1 - 0.5 * tolerance;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^y2 = x1;^185^^^^^170^200^y2 = y0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^y2 =  x0;^185^^^^^170^200^y2 = y0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^delta =  x0 - x0;^186^^^^^171^201^delta = x1 - x0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^oldDelta =  x0;^187^^^^^172^202^oldDelta = delta;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^double dx =  ( x2  ||  x1 ) ;^127^^^^^112^142^double dx =  ( x2 - x1 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^double dx =  ( x2 - y2 ) ;^127^^^^^112^142^double dx =  ( x2 - x1 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^double dx =  ( y1 - x1 ) ;^127^^^^^112^142^double dx =  ( x2 - x1 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^double tolerance = Math.max ( relativeAccuracy * Math.abs ( absoluteAccuracy ) , x1 ) ;^128^129^^^^113^143^double tolerance = Math.max ( relativeAccuracy * Math.abs ( x1 ) , absoluteAccuracy ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^double tolerance = Math.max ( relativeAccuracy * Math.abs ( x2 ) , absoluteAccuracy ) ;^128^129^^^^113^143^double tolerance = Math.max ( relativeAccuracy * Math.abs ( x1 ) , absoluteAccuracy ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^double r3 = tolerance / y0;^140^^^^^125^155^double r3 = y1 / y0;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P1_Replace_Type]^float r1 = y0 / y2;^149^^^^^134^164^double r1 = y0 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^double r2 = y1 - y2;^150^^^^^135^165^double r2 = y1 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^double r2 = tolerance / y2;^150^^^^^135^165^double r2 = y1 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^double r2 = y1 / x1;^150^^^^^135^165^double r2 = y1 / y2;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  ( Math.abs ( x2 )  <= functionValueAccuracy )  {^120^^^^^105^135^if  ( Math.abs ( y1 )  <= functionValueAccuracy )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P2_Replace_Operator]^Math.max / ( relativeAccuracy * Math.abs ( x1 ) , absoluteAccuracy ) ;^129^^^^^114^144^Math.max ( relativeAccuracy * Math.abs ( x1 ) , absoluteAccuracy ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^Math.max ( absoluteAccuracy * Math.abs ( x1 ) , relativeAccuracy ) ;^129^^^^^114^144^Math.max ( relativeAccuracy * Math.abs ( x1 ) , absoluteAccuracy ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^Math.max ( relativeAccuracy * Math.abs ( r3 ) , absoluteAccuracy ) ;^129^^^^^114^144^Math.max ( relativeAccuracy * Math.abs ( x1 ) , absoluteAccuracy ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^setResult ( y0, i ) ;^131^^^^^116^146^setResult ( x1, i ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  (  ( Math.abs ( x0 )  < tolerance )  || ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^134^135^^^^119^149^if  (  ( Math.abs ( oldDelta )  < tolerance )  || ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^if  (  ( Math.abs ( r3 )  < tolerance )  || ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^134^135^^^^119^149^if  (  ( Math.abs ( oldDelta )  < tolerance )  || ( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^( Math.abs ( x2 )  <= Math.abs ( y1 )  )  )  {^135^^^^^120^150^( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^( Math.abs ( tolerance )  <= Math.abs ( y1 )  )  )  {^135^^^^^120^150^( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^( Math.abs ( y0 )  <= Math.abs ( tolerance )  )  )  {^135^^^^^120^150^( Math.abs ( y0 )  <= Math.abs ( y1 )  )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  ( 2.0 * p >= 1.5 * dx * r3 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.max ( x2 * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^159^160^^^^144^174^if  ( 2.0 * p >= 1.5 * dx * p1 - Math.abs ( tolerance * p1 )  || p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P3_Replace_Literal]^p >= Math.abs ( 3.0 * oldDelta * p1 )  )  {^160^^^^^145^175^p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^p >= Math.abs ( 0.5 * oldDelta * tolerance )  )  {^160^^^^^145^175^p >= Math.abs ( 0.5 * oldDelta * p1 )  )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P5_Replace_Variable]^if  ( Math.abs ( tolerance )  > tolerance )  {^175^^^^^160^190^if  ( Math.abs ( delta )  > tolerance )  {^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
[P8_Replace_Mix]^y1 = f.value ( x2 ) ;^182^^^^^167^197^y1 = f.value ( x1 ) ;^[CLASS] BrentSolver  [METHOD] solve [RETURN_TYPE] double   double min double max [VARIABLES] boolean  long  serialVersionUID  double  delta  dx  max  min  oldDelta  p  p1  r1  r2  r3  tolerance  x0  x1  x2  y0  y1  y2  int  i  
