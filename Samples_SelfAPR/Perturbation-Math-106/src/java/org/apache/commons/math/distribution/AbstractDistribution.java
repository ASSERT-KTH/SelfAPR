[P1_Replace_Type]^private static final  int  serialVersionUID = -38038050983108802L;^31^^^^^26^36^private static final long serialVersionUID = -38038050983108802L;^[CLASS] AbstractDistribution   [VARIABLES] 
[P8_Replace_Mix]^private static final long serialVersionUID = -38038050983108802;^31^^^^^26^36^private static final long serialVersionUID = -38038050983108802L;^[CLASS] AbstractDistribution   [VARIABLES] 
[P14_Delete_Statement]^^37^^^^^36^38^super (  ) ;^[CLASS] AbstractDistribution  [METHOD] <init> [RETURN_TYPE] AbstractDistribution()   [VARIABLES] long  serialVersionUID  boolean  
[P2_Replace_Operator]^if  ( x0 >= x1 )  {^59^^^^^57^64^if  ( x0 > x1 )  {^[CLASS] AbstractDistribution  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x0 double x1 [VARIABLES] long  serialVersionUID  double  x0  x1  boolean  
[P5_Replace_Variable]^if  ( x1 > x0 )  {^59^^^^^57^64^if  ( x0 > x1 )  {^[CLASS] AbstractDistribution  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x0 double x1 [VARIABLES] long  serialVersionUID  double  x0  x1  boolean  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("lower endpoint must be less than or equal to upper endpoint");^59^60^61^62^^57^64^if  ( x0 > x1 )  { throw new IllegalArgumentException ( "lower endpoint must be less than or equal to upper endpoint" ) ; }^[CLASS] AbstractDistribution  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x0 double x1 [VARIABLES] long  serialVersionUID  double  x0  x1  boolean  
[P16_Remove_Block]^^59^60^61^62^^57^64^if  ( x0 > x1 )  { throw new IllegalArgumentException ( "lower endpoint must be less than or equal to upper endpoint" ) ; }^[CLASS] AbstractDistribution  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x0 double x1 [VARIABLES] long  serialVersionUID  double  x0  x1  boolean  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "lower endpoint must be less than or equal to upper endpointr endpoi" ) ;^60^61^^^^57^64^throw new IllegalArgumentException ( "lower endpoint must be less than or equal to upper endpoint" ) ;^[CLASS] AbstractDistribution  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x0 double x1 [VARIABLES] long  serialVersionUID  double  x0  x1  boolean  
[P13_Insert_Block]^if  ( x0 > x1 )  {     throw new IllegalArgumentException ( "lower endpoint must be less than or equal to upper endpoint" ) ; }^60^^^^^57^64^[Delete]^[CLASS] AbstractDistribution  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x0 double x1 [VARIABLES] long  serialVersionUID  double  x0  x1  boolean  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "ss than or equal to upper end" ) ;^60^61^^^^57^64^throw new IllegalArgumentException ( "lower endpoint must be less than or equal to upper endpoint" ) ;^[CLASS] AbstractDistribution  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x0 double x1 [VARIABLES] long  serialVersionUID  double  x0  x1  boolean  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "lower endpoint must be less than or equal to upper endpointpoint mu" ) ;^60^61^^^^57^64^throw new IllegalArgumentException ( "lower endpoint must be less than or equal to upper endpoint" ) ;^[CLASS] AbstractDistribution  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x0 double x1 [VARIABLES] long  serialVersionUID  double  x0  x1  boolean  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "lower endpoint must be less than or equal to upper endpointss than or equal to upper endpoi" ) ;^60^61^^^^57^64^throw new IllegalArgumentException ( "lower endpoint must be less than or equal to upper endpoint" ) ;^[CLASS] AbstractDistribution  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x0 double x1 [VARIABLES] long  serialVersionUID  double  x0  x1  boolean  
[P2_Replace_Operator]^return cumulativeProbability ( x1 )   >  cumulativeProbability ( x0 ) ;^63^^^^^57^64^return cumulativeProbability ( x1 )  - cumulativeProbability ( x0 ) ;^[CLASS] AbstractDistribution  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x0 double x1 [VARIABLES] long  serialVersionUID  double  x0  x1  boolean  
[P5_Replace_Variable]^return cumulativeProbability ( x0 )  - cumulativeProbability ( x1 ) ;^63^^^^^57^64^return cumulativeProbability ( x1 )  - cumulativeProbability ( x0 ) ;^[CLASS] AbstractDistribution  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x0 double x1 [VARIABLES] long  serialVersionUID  double  x0  x1  boolean  
[P8_Replace_Mix]^return cumulativeProbability ( x1 )   ;^63^^^^^57^64^return cumulativeProbability ( x1 )  - cumulativeProbability ( x0 ) ;^[CLASS] AbstractDistribution  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x0 double x1 [VARIABLES] long  serialVersionUID  double  x0  x1  boolean  
[P5_Replace_Variable]^return cumulativeProbability ( x0 )  - cumulativeProbability ( x0 ) ;^63^^^^^57^64^return cumulativeProbability ( x1 )  - cumulativeProbability ( x0 ) ;^[CLASS] AbstractDistribution  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x0 double x1 [VARIABLES] long  serialVersionUID  double  x0  x1  boolean  
[P14_Delete_Statement]^^63^^^^^57^64^return cumulativeProbability ( x1 )  - cumulativeProbability ( x0 ) ;^[CLASS] AbstractDistribution  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x0 double x1 [VARIABLES] long  serialVersionUID  double  x0  x1  boolean  
[P5_Replace_Variable]^return cumulativeProbability ( x1 )  - cumulativeProbability ( x1 ) ;^63^^^^^57^64^return cumulativeProbability ( x1 )  - cumulativeProbability ( x0 ) ;^[CLASS] AbstractDistribution  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x0 double x1 [VARIABLES] long  serialVersionUID  double  x0  x1  boolean  
