[P1_Replace_Type]^private static final  short  serialVersionUID = 1L;^34^^^^^29^39^private static final long serialVersionUID = 1L;^[CLASS] ViewMatcher Empty Single Multi   [VARIABLES] 
[P8_Replace_Mix]^private  final  short  serialVersionUID = 1;^34^^^^^29^39^private static final long serialVersionUID = 1L;^[CLASS] ViewMatcher Empty Single Multi   [VARIABLES] 
[P4_Replace_Constructor]^final static Empty instance = final static new Multi ( views )  ;^36^^^^^31^41^final static Empty instance = new Empty (  ) ;^[CLASS] ViewMatcher Empty Single Multi   [VARIABLES] 
[P8_Replace_Mix]^final  Empty instance = new Empty (  ) ;^36^^^^^31^41^final static Empty instance = new Empty (  ) ;^[CLASS] ViewMatcher Empty Single Multi   [VARIABLES] 
[P1_Replace_Type]^private static final  int  serialVersionUID = 1L;^46^^^^^41^51^private static final long serialVersionUID = 1L;^[CLASS] ViewMatcher Empty Single Multi   [VARIABLES] 
[P8_Replace_Mix]^private static final long serialVersionUID = 1;^46^^^^^41^51^private static final long serialVersionUID = 1L;^[CLASS] ViewMatcher Empty Single Multi   [VARIABLES] 
[P8_Replace_Mix]^private  Class<?> _view;^48^^^^^43^53^private final Class<?> _view;^[CLASS] ViewMatcher Empty Single Multi   [VARIABLES] 
[P1_Replace_Type]^private static final  short  serialVersionUID = 1L;^59^^^^^54^64^private static final long serialVersionUID = 1L;^[CLASS] ViewMatcher Empty Single Multi   [VARIABLES] 
[P8_Replace_Mix]^private static final long serialVersionUID ;^59^^^^^54^64^private static final long serialVersionUID = 1L;^[CLASS] ViewMatcher Empty Single Multi   [VARIABLES] 
[P8_Replace_Mix]^private  Class<?>[] _views;^61^^^^^56^66^private final Class<?>[] _views;^[CLASS] ViewMatcher Empty Single Multi   [VARIABLES] 
[P8_Replace_Mix]^public Single ( Class<?> v )  { _view =  null; }^49^^^^^44^54^public Single ( Class<?> v )  { _view = v; }^[CLASS] ViewMatcher Empty Single Multi  [METHOD] <init> [RETURN_TYPE] Class)   Class<?> v [VARIABLES] Empty  instance  Class  _view  v  Class[]  _views  boolean  long  serialVersionUID  
[P5_Replace_Variable]^public Multi ( Class<?>[] null )  { _views = v; }^63^^^^^58^68^public Multi ( Class<?>[] v )  { _views = v; }^[CLASS] ViewMatcher Empty Single Multi  [METHOD] <init> [RETURN_TYPE] Class[])   Class<?>[] v [VARIABLES] Empty  instance  Class  _view  v  Class[]  _views  v  boolean  long  serialVersionUID  
[P8_Replace_Mix]^public Multi ( Class<?>[] v )  { _views =  null; }^63^^^^^58^68^public Multi ( Class<?>[] v )  { _views = v; }^[CLASS] ViewMatcher Empty Single Multi  [METHOD] <init> [RETURN_TYPE] Class[])   Class<?>[] v [VARIABLES] Empty  instance  Class  _view  v  Class[]  _views  v  boolean  long  serialVersionUID  
[P2_Replace_Operator]^if  ( views != null )  {^13^^^^^11^23^if  ( views == null )  {^[CLASS] ViewMatcher Empty Single Multi  [METHOD] construct [RETURN_TYPE] ViewMatcher   Class<?>[] views [VARIABLES] Empty  instance  Class  _view  activeView  v  Class[]  _views  v  views  boolean  long  serialVersionUID  
[P8_Replace_Mix]^if  ( views == this )  {^13^^^^^11^23^if  ( views == null )  {^[CLASS] ViewMatcher Empty Single Multi  [METHOD] construct [RETURN_TYPE] ViewMatcher   Class<?>[] views [VARIABLES] Empty  instance  Class  _view  activeView  v  Class[]  _views  v  views  boolean  long  serialVersionUID  
[P15_Unwrap_Block]^return com.fasterxml.jackson.databind.util.ViewMatcher.Empty.instance;^13^14^15^^^11^23^if  ( views == null )  { return Empty.instance; }^[CLASS] ViewMatcher Empty Single Multi  [METHOD] construct [RETURN_TYPE] ViewMatcher   Class<?>[] views [VARIABLES] Empty  instance  Class  _view  activeView  v  Class[]  _views  v  views  boolean  long  serialVersionUID  
[P16_Remove_Block]^^13^14^15^^^11^23^if  ( views == null )  { return Empty.instance; }^[CLASS] ViewMatcher Empty Single Multi  [METHOD] construct [RETURN_TYPE] ViewMatcher   Class<?>[] views [VARIABLES] Empty  instance  Class  _view  activeView  v  Class[]  _views  v  views  boolean  long  serialVersionUID  
[P13_Insert_Block]^if  ( views == null )  {     return instance; }^14^^^^^11^23^[Delete]^[CLASS] ViewMatcher Empty Single Multi  [METHOD] construct [RETURN_TYPE] ViewMatcher   Class<?>[] views [VARIABLES] Empty  instance  Class  _view  activeView  v  Class[]  _views  v  views  boolean  long  serialVersionUID  
[P4_Replace_Constructor]^return return  new Multi ( views )  ;^20^^^^^11^23^return new Single ( views[0] ) ;^[CLASS] ViewMatcher Empty Single Multi  [METHOD] construct [RETURN_TYPE] ViewMatcher   Class<?>[] views [VARIABLES] Empty  instance  Class  _view  activeView  v  Class[]  _views  v  views  boolean  long  serialVersionUID  
[P8_Replace_Mix]^return  new Multi ( views )  ;^20^^^^^11^23^return new Single ( views[0] ) ;^[CLASS] ViewMatcher Empty Single Multi  [METHOD] construct [RETURN_TYPE] ViewMatcher   Class<?>[] views [VARIABLES] Empty  instance  Class  _view  activeView  v  Class[]  _views  v  views  boolean  long  serialVersionUID  
[P3_Replace_Literal]^return new Single ( views[9] ) ;^20^^^^^11^23^return new Single ( views[0] ) ;^[CLASS] ViewMatcher Empty Single Multi  [METHOD] construct [RETURN_TYPE] ViewMatcher   Class<?>[] views [VARIABLES] Empty  instance  Class  _view  activeView  v  Class[]  _views  v  views  boolean  long  serialVersionUID  
[P4_Replace_Constructor]^return return  new Single ( views[0] )  ;^22^^^^^11^23^return new Multi ( views ) ;^[CLASS] ViewMatcher Empty Single Multi  [METHOD] construct [RETURN_TYPE] ViewMatcher   Class<?>[] views [VARIABLES] Empty  instance  Class  _view  activeView  v  Class[]  _views  v  views  boolean  long  serialVersionUID  
[P8_Replace_Mix]^return  new Single ( views[0] )  ;^22^^^^^11^23^return new Multi ( views ) ;^[CLASS] ViewMatcher Empty Single Multi  [METHOD] construct [RETURN_TYPE] ViewMatcher   Class<?>[] views [VARIABLES] Empty  instance  Class  _view  activeView  v  Class[]  _views  v  views  boolean  long  serialVersionUID  
[P3_Replace_Literal]^return true;^39^^^^^38^40^return false;^[CLASS] ViewMatcher Empty Single Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Empty  instance  Class  _view  activeView  v  Class[]  _views  v  views  boolean  long  serialVersionUID  
[P2_Replace_Operator]^return  ( activeView == _view )  && _view.isAssignableFrom ( activeView ) ;^52^^^^^51^53^return  ( activeView == _view )  || _view.isAssignableFrom ( activeView ) ;^[CLASS] ViewMatcher Empty Single Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Empty  instance  Class  _view  activeView  v  Class[]  _views  v  views  boolean  long  serialVersionUID  
[P2_Replace_Operator]^return  ( activeView < _view )  || _view.isAssignableFrom ( activeView ) ;^52^^^^^51^53^return  ( activeView == _view )  || _view.isAssignableFrom ( activeView ) ;^[CLASS] ViewMatcher Empty Single Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Empty  instance  Class  _view  activeView  v  Class[]  _views  v  views  boolean  long  serialVersionUID  
[P5_Replace_Variable]^return  ( _view == activeView )  || _view.isAssignableFrom ( activeView ) ;^52^^^^^51^53^return  ( activeView == _view )  || _view.isAssignableFrom ( activeView ) ;^[CLASS] ViewMatcher Empty Single Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Empty  instance  Class  _view  activeView  v  Class[]  _views  v  views  boolean  long  serialVersionUID  
[P8_Replace_Mix]^return   _view.isAssignableFrom ( activeView ) ;^52^^^^^51^53^return  ( activeView == _view )  || _view.isAssignableFrom ( activeView ) ;^[CLASS] ViewMatcher Empty Single Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Empty  instance  Class  _view  activeView  v  Class[]  _views  v  views  boolean  long  serialVersionUID  
[P12_Insert_Condition]^if  (  ( activeView == view )  || view.isAssignableFrom ( activeView )  )  { return  ( activeView == _view )  || _view.isAssignableFrom ( activeView ) ; }^52^^^^^51^53^return  ( activeView == _view )  || _view.isAssignableFrom ( activeView ) ;^[CLASS] ViewMatcher Empty Single Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Empty  instance  Class  _view  activeView  v  Class[]  _views  v  views  boolean  long  serialVersionUID  
[P14_Delete_Statement]^^52^^^^^51^53^return  ( activeView == _view )  || _view.isAssignableFrom ( activeView ) ;^[CLASS] ViewMatcher Empty Single Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Empty  instance  Class  _view  activeView  v  Class[]  _views  v  views  boolean  long  serialVersionUID  
[P2_Replace_Operator]^if  (  ( activeView == view )  && view.isAssignableFrom ( activeView )  )  {^70^^^^^66^75^if  (  ( activeView == view )  || view.isAssignableFrom ( activeView )  )  {^[CLASS] ViewMatcher Empty Single Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Empty  instance  Class  _view  activeView  v  view  Class[]  _views  v  views  boolean  long  serialVersionUID  int  i  len  
[P2_Replace_Operator]^if  (  ( activeView != view )  || view.isAssignableFrom ( activeView )  )  {^70^^^^^66^75^if  (  ( activeView == view )  || view.isAssignableFrom ( activeView )  )  {^[CLASS] ViewMatcher Empty Single Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Empty  instance  Class  _view  activeView  v  view  Class[]  _views  v  views  boolean  long  serialVersionUID  int  i  len  
[P5_Replace_Variable]^if  (  ( null == view )  || view.isAssignableFrom ( activeView )  )  {^70^^^^^66^75^if  (  ( activeView == view )  || view.isAssignableFrom ( activeView )  )  {^[CLASS] ViewMatcher Empty Single Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Empty  instance  Class  _view  activeView  v  view  Class[]  _views  v  views  boolean  long  serialVersionUID  int  i  len  
[P5_Replace_Variable]^if  (  ( view == activeView )  || view.isAssignableFrom ( activeView )  )  {^70^^^^^66^75^if  (  ( activeView == view )  || view.isAssignableFrom ( activeView )  )  {^[CLASS] ViewMatcher Empty Single Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Empty  instance  Class  _view  activeView  v  view  Class[]  _views  v  views  boolean  long  serialVersionUID  int  i  len  
[P6_Replace_Expression]^if  (  ( activeView == view )  ) {^70^^^^^66^75^if  (  ( activeView == view )  || view.isAssignableFrom ( activeView )  )  {^[CLASS] ViewMatcher Empty Single Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Empty  instance  Class  _view  activeView  v  view  Class[]  _views  v  views  boolean  long  serialVersionUID  int  i  len  
[P6_Replace_Expression]^if  (  view.isAssignableFrom ( activeView )  )  {^70^^^^^66^75^if  (  ( activeView == view )  || view.isAssignableFrom ( activeView )  )  {^[CLASS] ViewMatcher Empty Single Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Empty  instance  Class  _view  activeView  v  view  Class[]  _views  v  views  boolean  long  serialVersionUID  int  i  len  
[P6_Replace_Expression]^if  ( activeView == view )  {^70^^^^^66^75^if  (  ( activeView == view )  || view.isAssignableFrom ( activeView )  )  {^[CLASS] ViewMatcher Empty Single Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Empty  instance  Class  _view  activeView  v  view  Class[]  _views  v  views  boolean  long  serialVersionUID  int  i  len  
[P15_Unwrap_Block]^return true;^70^71^72^^^66^75^if  (  ( activeView == view )  || view.isAssignableFrom ( activeView )  )  { return true; }^[CLASS] ViewMatcher Empty Single Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Empty  instance  Class  _view  activeView  v  view  Class[]  _views  v  views  boolean  long  serialVersionUID  int  i  len  
[P16_Remove_Block]^^70^71^72^^^66^75^if  (  ( activeView == view )  || view.isAssignableFrom ( activeView )  )  { return true; }^[CLASS] ViewMatcher Empty Single Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Empty  instance  Class  _view  activeView  v  view  Class[]  _views  v  views  boolean  long  serialVersionUID  int  i  len  
[P3_Replace_Literal]^return false;^71^^^^^66^75^return true;^[CLASS] ViewMatcher Empty Single Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Empty  instance  Class  _view  activeView  v  view  Class[]  _views  v  views  boolean  long  serialVersionUID  int  i  len  
[P1_Replace_Type]^for  (  short  i = 0, len = _views.length; i < len; ++i )  {^68^^^^^66^75^for  ( int i = 0, len = _views.length; i < len; ++i )  {^[CLASS] ViewMatcher Empty Single Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Empty  instance  Class  _view  activeView  v  view  Class[]  _views  v  views  boolean  long  serialVersionUID  int  i  len  
[P2_Replace_Operator]^for  ( int i = 0, len = _views.length; i <= len; ++i )  {^68^^^^^66^75^for  ( int i = 0, len = _views.length; i < len; ++i )  {^[CLASS] ViewMatcher Empty Single Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Empty  instance  Class  _view  activeView  v  view  Class[]  _views  v  views  boolean  long  serialVersionUID  int  i  len  
[P3_Replace_Literal]^for  ( int i = i, len = _views.length; i < len; ++i )  {^68^^^^^66^75^for  ( int i = 0, len = _views.length; i < len; ++i )  {^[CLASS] ViewMatcher Empty Single Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Empty  instance  Class  _view  activeView  v  view  Class[]  _views  v  views  boolean  long  serialVersionUID  int  i  len  
[P5_Replace_Variable]^for  ( lennt i = 0, len = _views.length; i < len; ++i )  {^68^^^^^66^75^for  ( int i = 0, len = _views.length; i < len; ++i )  {^[CLASS] ViewMatcher Empty Single Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Empty  instance  Class  _view  activeView  v  view  Class[]  _views  v  views  boolean  long  serialVersionUID  int  i  len  
[P5_Replace_Variable]^for  ( int i = 0, len = len; i < len; ++i )  {^68^^^^^66^75^for  ( int i = 0, len = _views.length; i < len; ++i )  {^[CLASS] ViewMatcher Empty Single Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Empty  instance  Class  _view  activeView  v  view  Class[]  _views  v  views  boolean  long  serialVersionUID  int  i  len  
[P5_Replace_Variable]^for  ( int i = 0 = _views.length; i < len; ++i )  {^68^^^^^66^75^for  ( int i = 0, len = _views.length; i < len; ++i )  {^[CLASS] ViewMatcher Empty Single Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Empty  instance  Class  _view  activeView  v  view  Class[]  _views  v  views  boolean  long  serialVersionUID  int  i  len  
[P5_Replace_Variable]^for  ( _viewsnt i = 0, len = i.length; i < len; ++i )  {^68^^^^^66^75^for  ( int i = 0, len = _views.length; i < len; ++i )  {^[CLASS] ViewMatcher Empty Single Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Empty  instance  Class  _view  activeView  v  view  Class[]  _views  v  views  boolean  long  serialVersionUID  int  i  len  
[P5_Replace_Variable]^for  ( int i = 0, _views.length = len; i < len; ++i )  {^68^^^^^66^75^for  ( int i = 0, len = _views.length; i < len; ++i )  {^[CLASS] ViewMatcher Empty Single Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Empty  instance  Class  _view  activeView  v  view  Class[]  _views  v  views  boolean  long  serialVersionUID  int  i  len  
[P2_Replace_Operator]^if  (  ( activeView < view )  || view.isAssignableFrom ( activeView )  )  {^70^^^^^66^75^if  (  ( activeView == view )  || view.isAssignableFrom ( activeView )  )  {^[CLASS] ViewMatcher Empty Single Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Empty  instance  Class  _view  activeView  v  view  Class[]  _views  v  views  boolean  long  serialVersionUID  int  i  len  
[P8_Replace_Mix]^if  (  ( 0 == view )  ) {^70^^^^^66^75^if  (  ( activeView == view )  || view.isAssignableFrom ( activeView )  )  {^[CLASS] ViewMatcher Empty Single Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Empty  instance  Class  _view  activeView  v  view  Class[]  _views  v  views  boolean  long  serialVersionUID  int  i  len  
[P1_Replace_Type]^for  (  long  i = 0, len = _views.length; i < len; ++i )  {^68^^^^^66^75^for  ( int i = 0, len = _views.length; i < len; ++i )  {^[CLASS] ViewMatcher Empty Single Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Empty  instance  Class  _view  activeView  v  view  Class[]  _views  v  views  boolean  long  serialVersionUID  int  i  len  
[P5_Replace_Variable]^for  ( int i = 0, len = i; i < len; ++i )  {^68^^^^^66^75^for  ( int i = 0, len = _views.length; i < len; ++i )  {^[CLASS] ViewMatcher Empty Single Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Empty  instance  Class  _view  activeView  v  view  Class[]  _views  v  views  boolean  long  serialVersionUID  int  i  len  
[P5_Replace_Variable]^for  ( int i = 0, len = _views; i < len; ++i )  {^68^^^^^66^75^for  ( int i = 0, len = _views.length; i < len; ++i )  {^[CLASS] ViewMatcher Empty Single Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Empty  instance  Class  _view  activeView  v  view  Class[]  _views  v  views  boolean  long  serialVersionUID  int  i  len  
[P5_Replace_Variable]^for  ( int i = 0, len = _views.length.length; i < len; ++i )  {^68^^^^^66^75^for  ( int i = 0, len = _views.length; i < len; ++i )  {^[CLASS] ViewMatcher Empty Single Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Empty  instance  Class  _view  activeView  v  view  Class[]  _views  v  views  boolean  long  serialVersionUID  int  i  len  
[P3_Replace_Literal]^return true;^74^^^^^66^75^return false;^[CLASS] ViewMatcher Empty Single Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Empty  instance  Class  _view  activeView  v  view  Class[]  _views  v  views  boolean  long  serialVersionUID  int  i  len  
[P1_Replace_Type]^private static final  short  serialVersionUID = 1L;^34^^^^^29^39^private static final long serialVersionUID = 1L;^[CLASS] Empty  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Empty  instance  Class  _view  activeView  v  view  Class[]  _views  v  views  boolean  long  serialVersionUID  int  i  len  
[P8_Replace_Mix]^private static  long serialVersionUID = 1;^34^^^^^29^39^private static final long serialVersionUID = 1L;^[CLASS] Empty  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Empty  instance  Class  _view  activeView  v  view  Class[]  _views  v  views  boolean  long  serialVersionUID  int  i  len  
[P3_Replace_Literal]^return true;^39^^^^^38^40^return false;^[CLASS] Empty  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Empty  instance  Class  activeView  boolean  long  serialVersionUID  
[P1_Replace_Type]^private static final  short  serialVersionUID = 1L;^46^^^^^41^51^private static final long serialVersionUID = 1L;^[CLASS] Single  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Empty  instance  Class  activeView  boolean  long  serialVersionUID  
[P8_Replace_Mix]^private static final  short  serialVersionUID = 1;^46^^^^^41^51^private static final long serialVersionUID = 1L;^[CLASS] Single  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Empty  instance  Class  activeView  boolean  long  serialVersionUID  
[P8_Replace_Mix]^public Single ( Class<?> v )  { _view =  null; }^49^^^^^44^54^public Single ( Class<?> v )  { _view = v; }^[CLASS] Single  [METHOD] <init> [RETURN_TYPE] Class)   Class<?> v [VARIABLES] Class  _view  v  long  serialVersionUID  boolean  
[P2_Replace_Operator]^return  ( activeView == _view )  && _view.isAssignableFrom ( activeView ) ;^52^^^^^51^53^return  ( activeView == _view )  || _view.isAssignableFrom ( activeView ) ;^[CLASS] Single  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Class  _view  activeView  v  long  serialVersionUID  boolean  
[P2_Replace_Operator]^return  ( activeView != _view )  || _view.isAssignableFrom ( activeView ) ;^52^^^^^51^53^return  ( activeView == _view )  || _view.isAssignableFrom ( activeView ) ;^[CLASS] Single  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Class  _view  activeView  v  long  serialVersionUID  boolean  
[P5_Replace_Variable]^return  ( _view == activeView )  || _view.isAssignableFrom ( activeView ) ;^52^^^^^51^53^return  ( activeView == _view )  || _view.isAssignableFrom ( activeView ) ;^[CLASS] Single  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Class  _view  activeView  v  long  serialVersionUID  boolean  
[P8_Replace_Mix]^return  ( activeView ;^52^^^^^51^53^return  ( activeView == _view )  || _view.isAssignableFrom ( activeView ) ;^[CLASS] Single  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Class  _view  activeView  v  long  serialVersionUID  boolean  
[P14_Delete_Statement]^^52^^^^^51^53^return  ( activeView == _view )  || _view.isAssignableFrom ( activeView ) ;^[CLASS] Single  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Class  _view  activeView  v  long  serialVersionUID  boolean  
[P1_Replace_Type]^private static final  short  serialVersionUID = 1L;^59^^^^^54^64^private static final long serialVersionUID = 1L;^[CLASS] Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Class  _view  activeView  v  long  serialVersionUID  boolean  
[P8_Replace_Mix]^private static final long serialVersionUID = 1;^59^^^^^54^64^private static final long serialVersionUID = 1L;^[CLASS] Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Class  _view  activeView  v  long  serialVersionUID  boolean  
[P8_Replace_Mix]^private  Class<?>[] _views;^61^^^^^56^66^private final Class<?>[] _views;^[CLASS] Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Class  _view  activeView  v  long  serialVersionUID  boolean  
[P8_Replace_Mix]^public Multi ( Class<?>[] v )  { _views =  null; }^63^^^^^58^68^public Multi ( Class<?>[] v )  { _views = v; }^[CLASS] Multi  [METHOD] <init> [RETURN_TYPE] Class[])   Class<?>[] v [VARIABLES] long  serialVersionUID  Class[]  _views  v  boolean  
[P2_Replace_Operator]^if  (  ( activeView == view )  && view.isAssignableFrom ( activeView )  )  {^70^^^^^66^75^if  (  ( activeView == view )  || view.isAssignableFrom ( activeView )  )  {^[CLASS] Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Class  activeView  view  Class[]  _views  v  boolean  long  serialVersionUID  int  i  len  
[P2_Replace_Operator]^if  (  ( activeView != view )  || view.isAssignableFrom ( activeView )  )  {^70^^^^^66^75^if  (  ( activeView == view )  || view.isAssignableFrom ( activeView )  )  {^[CLASS] Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Class  activeView  view  Class[]  _views  v  boolean  long  serialVersionUID  int  i  len  
[P5_Replace_Variable]^if  (  ( view == activeView )  || view.isAssignableFrom ( activeView )  )  {^70^^^^^66^75^if  (  ( activeView == view )  || view.isAssignableFrom ( activeView )  )  {^[CLASS] Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Class  activeView  view  Class[]  _views  v  boolean  long  serialVersionUID  int  i  len  
[P6_Replace_Expression]^if  (  ( activeView == view )  ) {^70^^^^^66^75^if  (  ( activeView == view )  || view.isAssignableFrom ( activeView )  )  {^[CLASS] Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Class  activeView  view  Class[]  _views  v  boolean  long  serialVersionUID  int  i  len  
[P6_Replace_Expression]^if  (  view.isAssignableFrom ( activeView )  )  {^70^^^^^66^75^if  (  ( activeView == view )  || view.isAssignableFrom ( activeView )  )  {^[CLASS] Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Class  activeView  view  Class[]  _views  v  boolean  long  serialVersionUID  int  i  len  
[P6_Replace_Expression]^if  ( activeView == view )  {^70^^^^^66^75^if  (  ( activeView == view )  || view.isAssignableFrom ( activeView )  )  {^[CLASS] Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Class  activeView  view  Class[]  _views  v  boolean  long  serialVersionUID  int  i  len  
[P15_Unwrap_Block]^return true;^70^71^72^^^66^75^if  (  ( activeView == view )  || view.isAssignableFrom ( activeView )  )  { return true; }^[CLASS] Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Class  activeView  view  Class[]  _views  v  boolean  long  serialVersionUID  int  i  len  
[P16_Remove_Block]^^70^71^72^^^66^75^if  (  ( activeView == view )  || view.isAssignableFrom ( activeView )  )  { return true; }^[CLASS] Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Class  activeView  view  Class[]  _views  v  boolean  long  serialVersionUID  int  i  len  
[P3_Replace_Literal]^return false;^71^^^^^66^75^return true;^[CLASS] Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Class  activeView  view  Class[]  _views  v  boolean  long  serialVersionUID  int  i  len  
[P1_Replace_Type]^for  (  long  i = 0, len = _views.length; i < len; ++i )  {^68^^^^^66^75^for  ( int i = 0, len = _views.length; i < len; ++i )  {^[CLASS] Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Class  activeView  view  Class[]  _views  v  boolean  long  serialVersionUID  int  i  len  
[P2_Replace_Operator]^for  ( int i = 0, len = _views.length; i <= len; ++i )  {^68^^^^^66^75^for  ( int i = 0, len = _views.length; i < len; ++i )  {^[CLASS] Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Class  activeView  view  Class[]  _views  v  boolean  long  serialVersionUID  int  i  len  
[P3_Replace_Literal]^for  ( int i = 4, len = _views.length; i < len; ++i )  {^68^^^^^66^75^for  ( int i = 0, len = _views.length; i < len; ++i )  {^[CLASS] Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Class  activeView  view  Class[]  _views  v  boolean  long  serialVersionUID  int  i  len  
[P5_Replace_Variable]^for  ( lennt i = 0, len = _views.length; i < len; ++i )  {^68^^^^^66^75^for  ( int i = 0, len = _views.length; i < len; ++i )  {^[CLASS] Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Class  activeView  view  Class[]  _views  v  boolean  long  serialVersionUID  int  i  len  
[P5_Replace_Variable]^for  ( int i = 0, len = len; i < len; ++i )  {^68^^^^^66^75^for  ( int i = 0, len = _views.length; i < len; ++i )  {^[CLASS] Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Class  activeView  view  Class[]  _views  v  boolean  long  serialVersionUID  int  i  len  
[P5_Replace_Variable]^for  ( int i = 0 = _views.length; i < len; ++i )  {^68^^^^^66^75^for  ( int i = 0, len = _views.length; i < len; ++i )  {^[CLASS] Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Class  activeView  view  Class[]  _views  v  boolean  long  serialVersionUID  int  i  len  
[P5_Replace_Variable]^for  ( lennt i = 0, i = _views.length; i < len; ++i )  {^68^^^^^66^75^for  ( int i = 0, len = _views.length; i < len; ++i )  {^[CLASS] Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Class  activeView  view  Class[]  _views  v  boolean  long  serialVersionUID  int  i  len  
[P5_Replace_Variable]^for  ( int i = 0, _views.length = len; i < len; ++i )  {^68^^^^^66^75^for  ( int i = 0, len = _views.length; i < len; ++i )  {^[CLASS] Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Class  activeView  view  Class[]  _views  v  boolean  long  serialVersionUID  int  i  len  
[P5_Replace_Variable]^for  ( int i = 0, _views = len.length; i < len; ++i )  {^68^^^^^66^75^for  ( int i = 0, len = _views.length; i < len; ++i )  {^[CLASS] Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Class  activeView  view  Class[]  _views  v  boolean  long  serialVersionUID  int  i  len  
[P8_Replace_Mix]^if  (  ( activeView == 2 )  ) {^70^^^^^66^75^if  (  ( activeView == view )  || view.isAssignableFrom ( activeView )  )  {^[CLASS] Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Class  activeView  view  Class[]  _views  v  boolean  long  serialVersionUID  int  i  len  
[P3_Replace_Literal]^for  ( int i = i, len = _views.length; i < len; ++i )  {^68^^^^^66^75^for  ( int i = 0, len = _views.length; i < len; ++i )  {^[CLASS] Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Class  activeView  view  Class[]  _views  v  boolean  long  serialVersionUID  int  i  len  
[P1_Replace_Type]^for  (  short  i = 0, len = _views.length; i < len; ++i )  {^68^^^^^66^75^for  ( int i = 0, len = _views.length; i < len; ++i )  {^[CLASS] Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Class  activeView  view  Class[]  _views  v  boolean  long  serialVersionUID  int  i  len  
[P5_Replace_Variable]^for  ( int i = 0, len = i; i < len; ++i )  {^68^^^^^66^75^for  ( int i = 0, len = _views.length; i < len; ++i )  {^[CLASS] Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Class  activeView  view  Class[]  _views  v  boolean  long  serialVersionUID  int  i  len  
[P5_Replace_Variable]^for  ( int i = 0, len = _views; i < len; ++i )  {^68^^^^^66^75^for  ( int i = 0, len = _views.length; i < len; ++i )  {^[CLASS] Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Class  activeView  view  Class[]  _views  v  boolean  long  serialVersionUID  int  i  len  
[P5_Replace_Variable]^for  ( int i = 0, len = _views.length.length; i < len; ++i )  {^68^^^^^66^75^for  ( int i = 0, len = _views.length; i < len; ++i )  {^[CLASS] Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Class  activeView  view  Class[]  _views  v  boolean  long  serialVersionUID  int  i  len  
[P3_Replace_Literal]^return true;^74^^^^^66^75^return false;^[CLASS] Multi  [METHOD] isVisibleForView [RETURN_TYPE] boolean   Class<?> activeView [VARIABLES] Class  activeView  view  Class[]  _views  v  boolean  long  serialVersionUID  int  i  len  
