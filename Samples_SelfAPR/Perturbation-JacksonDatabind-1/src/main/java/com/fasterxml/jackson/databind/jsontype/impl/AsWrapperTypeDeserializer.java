[P1_Replace_Type]^private static final  int  serialVersionUID = 5345570420394408290L;^27^^^^^22^32^private static final long serialVersionUID = 5345570420394408290L;^[CLASS] AsWrapperTypeDeserializer   [VARIABLES] 
[P8_Replace_Mix]^private static final long serialVersionUID = 5345570420394408290;^27^^^^^22^32^private static final long serialVersionUID = 5345570420394408290L;^[CLASS] AsWrapperTypeDeserializer   [VARIABLES] 
[P5_Replace_Variable]^super (  idRes, typePropertyName, typeIdVisible, null ) ;^32^^^^^29^33^super ( bt, idRes, typePropertyName, typeIdVisible, null ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] <init> [RETURN_TYPE] Class)   JavaType bt TypeIdResolver idRes String typePropertyName boolean typeIdVisible Class<?> defaultImpl [VARIABLES] JavaType  bt  Class  defaultImpl  String  typePropertyName  boolean  typeIdVisible  long  serialVersionUID  TypeIdResolver  idRes  
[P5_Replace_Variable]^super ( bt,  typePropertyName, typeIdVisible, null ) ;^32^^^^^29^33^super ( bt, idRes, typePropertyName, typeIdVisible, null ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] <init> [RETURN_TYPE] Class)   JavaType bt TypeIdResolver idRes String typePropertyName boolean typeIdVisible Class<?> defaultImpl [VARIABLES] JavaType  bt  Class  defaultImpl  String  typePropertyName  boolean  typeIdVisible  long  serialVersionUID  TypeIdResolver  idRes  
[P5_Replace_Variable]^super ( bt, idRes,  typeIdVisible, null ) ;^32^^^^^29^33^super ( bt, idRes, typePropertyName, typeIdVisible, null ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] <init> [RETURN_TYPE] Class)   JavaType bt TypeIdResolver idRes String typePropertyName boolean typeIdVisible Class<?> defaultImpl [VARIABLES] JavaType  bt  Class  defaultImpl  String  typePropertyName  boolean  typeIdVisible  long  serialVersionUID  TypeIdResolver  idRes  
[P5_Replace_Variable]^super ( bt, idRes, typePropertyName,  null ) ;^32^^^^^29^33^super ( bt, idRes, typePropertyName, typeIdVisible, null ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] <init> [RETURN_TYPE] Class)   JavaType bt TypeIdResolver idRes String typePropertyName boolean typeIdVisible Class<?> defaultImpl [VARIABLES] JavaType  bt  Class  defaultImpl  String  typePropertyName  boolean  typeIdVisible  long  serialVersionUID  TypeIdResolver  idRes  
[P5_Replace_Variable]^super ( typePropertyName, idRes, bt, typeIdVisible, null ) ;^32^^^^^29^33^super ( bt, idRes, typePropertyName, typeIdVisible, null ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] <init> [RETURN_TYPE] Class)   JavaType bt TypeIdResolver idRes String typePropertyName boolean typeIdVisible Class<?> defaultImpl [VARIABLES] JavaType  bt  Class  defaultImpl  String  typePropertyName  boolean  typeIdVisible  long  serialVersionUID  TypeIdResolver  idRes  
[P5_Replace_Variable]^super ( idRes, bt, typePropertyName, typeIdVisible, null ) ;^32^^^^^29^33^super ( bt, idRes, typePropertyName, typeIdVisible, null ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] <init> [RETURN_TYPE] Class)   JavaType bt TypeIdResolver idRes String typePropertyName boolean typeIdVisible Class<?> defaultImpl [VARIABLES] JavaType  bt  Class  defaultImpl  String  typePropertyName  boolean  typeIdVisible  long  serialVersionUID  TypeIdResolver  idRes  
[P5_Replace_Variable]^super ( bt, idRes, typeIdVisible, typePropertyName, null ) ;^32^^^^^29^33^super ( bt, idRes, typePropertyName, typeIdVisible, null ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] <init> [RETURN_TYPE] Class)   JavaType bt TypeIdResolver idRes String typePropertyName boolean typeIdVisible Class<?> defaultImpl [VARIABLES] JavaType  bt  Class  defaultImpl  String  typePropertyName  boolean  typeIdVisible  long  serialVersionUID  TypeIdResolver  idRes  
[P14_Delete_Statement]^^32^^^^^29^33^super ( bt, idRes, typePropertyName, typeIdVisible, null ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] <init> [RETURN_TYPE] Class)   JavaType bt TypeIdResolver idRes String typePropertyName boolean typeIdVisible Class<?> defaultImpl [VARIABLES] JavaType  bt  Class  defaultImpl  String  typePropertyName  boolean  typeIdVisible  long  serialVersionUID  TypeIdResolver  idRes  
[P5_Replace_Variable]^super (  property ) ;^36^^^^^35^37^super ( src, property ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] <init> [RETURN_TYPE] BeanProperty)   AsWrapperTypeDeserializer src BeanProperty property [VARIABLES] boolean  long  serialVersionUID  AsWrapperTypeDeserializer  src  BeanProperty  property  
[P5_Replace_Variable]^super ( src ) ;^36^^^^^35^37^super ( src, property ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] <init> [RETURN_TYPE] BeanProperty)   AsWrapperTypeDeserializer src BeanProperty property [VARIABLES] boolean  long  serialVersionUID  AsWrapperTypeDeserializer  src  BeanProperty  property  
[P5_Replace_Variable]^super ( property, src ) ;^36^^^^^35^37^super ( src, property ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] <init> [RETURN_TYPE] BeanProperty)   AsWrapperTypeDeserializer src BeanProperty property [VARIABLES] boolean  long  serialVersionUID  AsWrapperTypeDeserializer  src  BeanProperty  property  
[P14_Delete_Statement]^^36^^^^^35^37^super ( src, property ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] <init> [RETURN_TYPE] BeanProperty)   AsWrapperTypeDeserializer src BeanProperty property [VARIABLES] boolean  long  serialVersionUID  AsWrapperTypeDeserializer  src  BeanProperty  property  
[P2_Replace_Operator]^if  ( prop != _property )  {^42^^^^^40^46^if  ( prop == _property )  {^[CLASS] AsWrapperTypeDeserializer  [METHOD] forProperty [RETURN_TYPE] TypeDeserializer   BeanProperty prop [VARIABLES] long  serialVersionUID  BeanProperty  prop  boolean  
[P5_Replace_Variable]^if  ( _property == prop )  {^42^^^^^40^46^if  ( prop == _property )  {^[CLASS] AsWrapperTypeDeserializer  [METHOD] forProperty [RETURN_TYPE] TypeDeserializer   BeanProperty prop [VARIABLES] long  serialVersionUID  BeanProperty  prop  boolean  
[P15_Unwrap_Block]^return this;^42^43^44^^^40^46^if  ( prop == _property )  { return this; }^[CLASS] AsWrapperTypeDeserializer  [METHOD] forProperty [RETURN_TYPE] TypeDeserializer   BeanProperty prop [VARIABLES] long  serialVersionUID  BeanProperty  prop  boolean  
[P16_Remove_Block]^^42^43^44^^^40^46^if  ( prop == _property )  { return this; }^[CLASS] AsWrapperTypeDeserializer  [METHOD] forProperty [RETURN_TYPE] TypeDeserializer   BeanProperty prop [VARIABLES] long  serialVersionUID  BeanProperty  prop  boolean  
[P8_Replace_Mix]^return null;^43^^^^^40^46^return this;^[CLASS] AsWrapperTypeDeserializer  [METHOD] forProperty [RETURN_TYPE] TypeDeserializer   BeanProperty prop [VARIABLES] long  serialVersionUID  BeanProperty  prop  boolean  
[P8_Replace_Mix]^return new AsWrapperTypeDeserializer ( null, prop ) ;^45^^^^^40^46^return new AsWrapperTypeDeserializer ( this, prop ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] forProperty [RETURN_TYPE] TypeDeserializer   BeanProperty prop [VARIABLES] long  serialVersionUID  BeanProperty  prop  boolean  
[P5_Replace_Variable]^return _deserialize (  ctxt ) ;^60^^^^^57^61^return _deserialize ( jp, ctxt ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] deserializeTypedFromObject [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] DeserializationContext  ctxt  boolean  long  serialVersionUID  JsonParser  jp  
[P5_Replace_Variable]^return _deserialize ( jp ) ;^60^^^^^57^61^return _deserialize ( jp, ctxt ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] deserializeTypedFromObject [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] DeserializationContext  ctxt  boolean  long  serialVersionUID  JsonParser  jp  
[P5_Replace_Variable]^return _deserialize ( ctxt, jp ) ;^60^^^^^57^61^return _deserialize ( jp, ctxt ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] deserializeTypedFromObject [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] DeserializationContext  ctxt  boolean  long  serialVersionUID  JsonParser  jp  
[P7_Replace_Invocation]^return deserializeTypedFromAny ( jp, ctxt ) ;^60^^^^^57^61^return _deserialize ( jp, ctxt ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] deserializeTypedFromObject [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] DeserializationContext  ctxt  boolean  long  serialVersionUID  JsonParser  jp  
[P14_Delete_Statement]^^60^^^^^57^61^return _deserialize ( jp, ctxt ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] deserializeTypedFromObject [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] DeserializationContext  ctxt  boolean  long  serialVersionUID  JsonParser  jp  
[P5_Replace_Variable]^return _deserialize (  ctxt ) ;^67^^^^^64^68^return _deserialize ( jp, ctxt ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] deserializeTypedFromArray [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] DeserializationContext  ctxt  boolean  long  serialVersionUID  JsonParser  jp  
[P5_Replace_Variable]^return _deserialize ( jp ) ;^67^^^^^64^68^return _deserialize ( jp, ctxt ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] deserializeTypedFromArray [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] DeserializationContext  ctxt  boolean  long  serialVersionUID  JsonParser  jp  
[P5_Replace_Variable]^return _deserialize ( ctxt, jp ) ;^67^^^^^64^68^return _deserialize ( jp, ctxt ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] deserializeTypedFromArray [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] DeserializationContext  ctxt  boolean  long  serialVersionUID  JsonParser  jp  
[P7_Replace_Invocation]^return deserializeTypedFromAny ( jp, ctxt ) ;^67^^^^^64^68^return _deserialize ( jp, ctxt ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] deserializeTypedFromArray [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] DeserializationContext  ctxt  boolean  long  serialVersionUID  JsonParser  jp  
[P14_Delete_Statement]^^67^^^^^64^68^return _deserialize ( jp, ctxt ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] deserializeTypedFromArray [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] DeserializationContext  ctxt  boolean  long  serialVersionUID  JsonParser  jp  
[P5_Replace_Variable]^return _deserialize (  ctxt ) ;^74^^^^^71^75^return _deserialize ( jp, ctxt ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] deserializeTypedFromScalar [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] DeserializationContext  ctxt  boolean  long  serialVersionUID  JsonParser  jp  
[P5_Replace_Variable]^return _deserialize ( jp ) ;^74^^^^^71^75^return _deserialize ( jp, ctxt ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] deserializeTypedFromScalar [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] DeserializationContext  ctxt  boolean  long  serialVersionUID  JsonParser  jp  
[P5_Replace_Variable]^return _deserialize ( ctxt, jp ) ;^74^^^^^71^75^return _deserialize ( jp, ctxt ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] deserializeTypedFromScalar [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] DeserializationContext  ctxt  boolean  long  serialVersionUID  JsonParser  jp  
[P7_Replace_Invocation]^return deserializeTypedFromAny ( jp, ctxt ) ;^74^^^^^71^75^return _deserialize ( jp, ctxt ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] deserializeTypedFromScalar [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] DeserializationContext  ctxt  boolean  long  serialVersionUID  JsonParser  jp  
[P14_Delete_Statement]^^74^^^^^71^75^return _deserialize ( jp, ctxt ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] deserializeTypedFromScalar [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] DeserializationContext  ctxt  boolean  long  serialVersionUID  JsonParser  jp  
[P5_Replace_Variable]^return _deserialize (  ctxt ) ;^81^^^^^78^82^return _deserialize ( jp, ctxt ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] deserializeTypedFromAny [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] DeserializationContext  ctxt  boolean  long  serialVersionUID  JsonParser  jp  
[P5_Replace_Variable]^return _deserialize ( jp ) ;^81^^^^^78^82^return _deserialize ( jp, ctxt ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] deserializeTypedFromAny [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] DeserializationContext  ctxt  boolean  long  serialVersionUID  JsonParser  jp  
[P5_Replace_Variable]^return _deserialize ( ctxt, jp ) ;^81^^^^^78^82^return _deserialize ( jp, ctxt ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] deserializeTypedFromAny [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] DeserializationContext  ctxt  boolean  long  serialVersionUID  JsonParser  jp  
[P7_Replace_Invocation]^return deserializeTypedFromAny ( jp, ctxt ) ;^81^^^^^78^82^return _deserialize ( jp, ctxt ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] deserializeTypedFromAny [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] DeserializationContext  ctxt  boolean  long  serialVersionUID  JsonParser  jp  
[P14_Delete_Statement]^^81^^^^^78^82^return _deserialize ( jp, ctxt ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] deserializeTypedFromAny [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] DeserializationContext  ctxt  boolean  long  serialVersionUID  JsonParser  jp  
[P2_Replace_Operator]^if  ( jp.getCurrentToken (  )  == JsonToken.START_OBJECT )  {^99^^^^^84^114^if  ( jp.getCurrentToken (  )  != JsonToken.START_OBJECT )  {^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P5_Replace_Variable]^if  ( JsonToken.START_OBJECT.getCurrentToken (  )  != jp )  {^99^^^^^84^114^if  ( jp.getCurrentToken (  )  != JsonToken.START_OBJECT )  {^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P6_Replace_Expression]^if  ( "need JSON Object to contain As.WRAPPER_OBJECT type information for class " + baseTypeName (  ) )  {^99^^^^^84^114^if  ( jp.getCurrentToken (  )  != JsonToken.START_OBJECT )  {^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P8_Replace_Mix]^if  ( jp .nextToken (  )   != JsonToken.START_OBJECT )  {^99^^^^^84^114^if  ( jp.getCurrentToken (  )  != JsonToken.START_OBJECT )  {^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P9_Replace_Statement]^if  ( jp.nextToken (  )  != JsonToken.END_OBJECT )  {^99^^^^^84^114^if  ( jp.getCurrentToken (  )  != JsonToken.START_OBJECT )  {^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P9_Replace_Statement]^if  ( _typeIdVisible && jp.getCurrentToken (  )  == JsonToken.START_OBJECT )  {^99^^^^^84^114^if  ( jp.getCurrentToken (  )  != JsonToken.START_OBJECT )  {^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P9_Replace_Statement]^if  ( jp.nextToken (  )  != JsonToken.FIELD_NAME )  {^99^^^^^84^114^if  ( jp.getCurrentToken (  )  != JsonToken.START_OBJECT )  {^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P15_Unwrap_Block]^throw ctxt.wrongTokenException(jp, JsonToken.START_OBJECT, ("need JSON Object to contain As.WRAPPER_OBJECT type information for class " + (baseTypeName())));^99^100^101^102^^84^114^if  ( jp.getCurrentToken (  )  != JsonToken.START_OBJECT )  { throw ctxt.wrongTokenException ( jp, JsonToken.START_OBJECT, "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName (  )  ) ; }^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P16_Remove_Block]^^99^100^101^102^^84^114^if  ( jp.getCurrentToken (  )  != JsonToken.START_OBJECT )  { throw ctxt.wrongTokenException ( jp, JsonToken.START_OBJECT, "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName (  )  ) ; }^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P13_Insert_Block]^if  (  ( jp.nextToken (  )  )  !=  ( JsonToken.FIELD_NAME )  )  {     throw ctxt.wrongTokenException ( jp, JsonToken.FIELD_NAME,  (  ( "need JSON String that contains type id  ( for subtype of " +  ( baseTypeName (  )  )  )  + " ) " )  ) ; }^99^^^^^84^114^[Delete]^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P13_Insert_Block]^if  (  ( jp.nextToken (  )  )  !=  ( JsonToken.END_OBJECT )  )  {     throw ctxt.wrongTokenException ( jp, JsonToken.END_OBJECT, "expected closing END_OBJECT after type information and deserialized value" ) ; }^99^^^^^84^114^[Delete]^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P2_Replace_Operator]^throw ctxt.wrongTokenException ( jp, JsonToken.START_OBJECT, "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName (  ^  )  ) ;^100^101^^^^85^115^throw ctxt.wrongTokenException ( jp, JsonToken.START_OBJECT, "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName (  )  ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P3_Replace_Literal]^throw ctxt.wrongTokenException ( jp, JsonToken.START_OBJECT, "ct to contain As.WRAPPER_OBJE"+baseTypeName (  )  ) ;^100^101^^^^85^115^throw ctxt.wrongTokenException ( jp, JsonToken.START_OBJECT, "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName (  )  ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P5_Replace_Variable]^throw ctxt.wrongTokenException (  JsonToken.START_OBJECT, "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName (  )  ) ;^100^101^^^^85^115^throw ctxt.wrongTokenException ( jp, JsonToken.START_OBJECT, "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName (  )  ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P5_Replace_Variable]^throw jp.wrongTokenException ( ctxt, JsonToken.START_OBJECT, "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName (  )  ) ;^100^101^^^^85^115^throw ctxt.wrongTokenException ( jp, JsonToken.START_OBJECT, "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName (  )  ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P11_Insert_Donor_Statement]^throw ctxt.wrongTokenException ( jp, JsonToken.END_OBJECT, "expected closing END_OBJECT after type information and deserialized value" ) ;throw ctxt.wrongTokenException ( jp, JsonToken.START_OBJECT, "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName (  )  ) ;^100^101^^^^85^115^throw ctxt.wrongTokenException ( jp, JsonToken.START_OBJECT, "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName (  )  ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P11_Insert_Donor_Statement]^throw ctxt.wrongTokenException ( jp, JsonToken.FIELD_NAME, "need JSON String that contains type id  ( for subtype of "+baseTypeName (  ) +" ) " ) ;throw ctxt.wrongTokenException ( jp, JsonToken.START_OBJECT, "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName (  )  ) ;^100^101^^^^85^115^throw ctxt.wrongTokenException ( jp, JsonToken.START_OBJECT, "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName (  )  ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P13_Insert_Block]^if  (  ( jp.getCurrentToken (  )  )  !=  ( JsonToken.START_OBJECT )  )  {     throw ctxt.wrongTokenException ( jp, JsonToken.START_OBJECT,  ( "need JSON Object to contain As.WRAPPER_OBJECT type information for class " +  ( baseTypeName (  )  )  )  ) ; }^100^^^^^85^115^[Delete]^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P2_Replace_Operator]^throw ctxt.wrongTokenException ( jp, JsonToken.START_OBJECT, "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName (  >  )  ) ;^100^101^^^^85^115^throw ctxt.wrongTokenException ( jp, JsonToken.START_OBJECT, "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName (  )  ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P3_Replace_Literal]^throw ctxt.wrongTokenException ( jp, JsonToken.START_OBJECT, "Object to contain As.WRAPPER_OBJECT type information for c"+baseTypeName (  )  ) ;^100^101^^^^85^115^throw ctxt.wrongTokenException ( jp, JsonToken.START_OBJECT, "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName (  )  ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P8_Replace_Mix]^throw ctxt .wrongTokenException ( jp )  ;^100^101^^^^85^115^throw ctxt.wrongTokenException ( jp, JsonToken.START_OBJECT, "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName (  )  ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P14_Delete_Statement]^^100^101^^^^85^115^throw ctxt.wrongTokenException ( jp, JsonToken.START_OBJECT, "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName (  )  ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P11_Insert_Donor_Statement]^"need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName (  )  ) ;throw ctxt.wrongTokenException ( jp, JsonToken.START_OBJECT, "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName (  )  ) ;^100^101^^^^85^115^throw ctxt.wrongTokenException ( jp, JsonToken.START_OBJECT, "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName (  )  ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P14_Delete_Statement]^^101^102^^^^86^116^"need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName (  )  ) ; }^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P11_Insert_Donor_Statement]^throw ctxt.wrongTokenException ( jp, JsonToken.START_OBJECT, "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName (  )  ) ;"need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName (  )  ) ;^101^^^^^86^116^"need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName (  )  ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P2_Replace_Operator]^throw ctxt.wrongTokenException ( jp, JsonToken.START_OBJECT, "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName (  &  )  ) ;^100^101^^^^85^115^throw ctxt.wrongTokenException ( jp, JsonToken.START_OBJECT, "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName (  )  ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P3_Replace_Literal]^throw ctxt.wrongTokenException ( jp, JsonToken.START_OBJECT, "need JSON Object to contain As.WRAPPER_OBJECT type information for class N"+baseTypeName (  )  ) ;^100^101^^^^85^115^throw ctxt.wrongTokenException ( jp, JsonToken.START_OBJECT, "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName (  )  ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P2_Replace_Operator]^throw ctxt.wrongTokenException ( jp, JsonToken.START_OBJECT, "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName (  !=  )  ) ;^100^101^^^^85^115^throw ctxt.wrongTokenException ( jp, JsonToken.START_OBJECT, "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName (  )  ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P3_Replace_Literal]^throw ctxt.wrongTokenException ( jp, JsonToken.START_OBJECT, " to containeed JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName (  )  ) ;^100^101^^^^85^115^throw ctxt.wrongTokenException ( jp, JsonToken.START_OBJECT, "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName (  )  ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P2_Replace_Operator]^if  ( jp.nextToken (  )  == JsonToken.FIELD_NAME )  {^104^^^^^89^119^if  ( jp.nextToken (  )  != JsonToken.FIELD_NAME )  {^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P5_Replace_Variable]^if  ( JsonToken.FIELD_NAME.nextToken (  )  != jp )  {^104^^^^^89^119^if  ( jp.nextToken (  )  != JsonToken.FIELD_NAME )  {^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P6_Replace_Expression]^if  ( "need JSON String that contains type id  ( for subtype of " +  ( baseTypeName (  )  )  + " ) " )  {^104^^^^^89^119^if  ( jp.nextToken (  )  != JsonToken.FIELD_NAME )  {^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P6_Replace_Expression]^if  ( "need JSON String that contains type id  ( for subtype of " + baseTypeName (  ) )  {^104^^^^^89^119^if  ( jp.nextToken (  )  != JsonToken.FIELD_NAME )  {^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P7_Replace_Invocation]^if  ( jp .getCurrentToken (  )   != JsonToken.FIELD_NAME )  {^104^^^^^89^119^if  ( jp.nextToken (  )  != JsonToken.FIELD_NAME )  {^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P9_Replace_Statement]^if  ( jp.nextToken (  )  != JsonToken.END_OBJECT )  {^104^^^^^89^119^if  ( jp.nextToken (  )  != JsonToken.FIELD_NAME )  {^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P9_Replace_Statement]^if  ( jp.getCurrentToken (  )  != JsonToken.START_OBJECT )  {^104^^^^^89^119^if  ( jp.nextToken (  )  != JsonToken.FIELD_NAME )  {^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P15_Unwrap_Block]^throw ctxt.wrongTokenException(jp, JsonToken.FIELD_NAME, (("need JSON String that contains type id (for subtype of " + (baseTypeName())) + ")"));^104^105^106^107^^89^119^if  ( jp.nextToken (  )  != JsonToken.FIELD_NAME )  { throw ctxt.wrongTokenException ( jp, JsonToken.FIELD_NAME, "need JSON String that contains type id  ( for subtype of "+baseTypeName (  ) +" ) " ) ; }^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P16_Remove_Block]^^104^105^106^107^^89^119^if  ( jp.nextToken (  )  != JsonToken.FIELD_NAME )  { throw ctxt.wrongTokenException ( jp, JsonToken.FIELD_NAME, "need JSON String that contains type id  ( for subtype of "+baseTypeName (  ) +" ) " ) ; }^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P13_Insert_Block]^if  (  ( jp.nextToken (  )  )  !=  ( JsonToken.END_OBJECT )  )  {     throw ctxt.wrongTokenException ( jp, JsonToken.END_OBJECT, "expected closing END_OBJECT after type information and deserialized value" ) ; }^104^^^^^89^119^[Delete]^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P13_Insert_Block]^if  (  ( jp.getCurrentToken (  )  )  !=  ( JsonToken.START_OBJECT )  )  {     throw ctxt.wrongTokenException ( jp, JsonToken.START_OBJECT,  ( "need JSON Object to contain As.WRAPPER_OBJECT type information for class " +  ( baseTypeName (  )  )  )  ) ; }^104^^^^^89^119^[Delete]^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P2_Replace_Operator]^throw ctxt.wrongTokenException ( jp, JsonToken.FIELD_NAME, "need JSON String that contains type id  ==  ( for subtype of "+baseTypeName (  ) +" ) " ) ;^105^106^^^^90^120^throw ctxt.wrongTokenException ( jp, JsonToken.FIELD_NAME, "need JSON String that contains type id  ( for subtype of "+baseTypeName (  ) +" ) " ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P2_Replace_Operator]^throw ctxt.wrongTokenException ( jp, JsonToken.FIELD_NAME, "need JSON String that contains type id  ||  ( for subtype of "+baseTypeName (  ) +" ) " ) ;^105^106^^^^90^120^throw ctxt.wrongTokenException ( jp, JsonToken.FIELD_NAME, "need JSON String that contains type id  ( for subtype of "+baseTypeName (  ) +" ) " ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P5_Replace_Variable]^throw ctxt.wrongTokenException (  JsonToken.FIELD_NAME, "need JSON String that contains type id  ( for subtype of "+baseTypeName (  ) +" ) " ) ;^105^106^^^^90^120^throw ctxt.wrongTokenException ( jp, JsonToken.FIELD_NAME, "need JSON String that contains type id  ( for subtype of "+baseTypeName (  ) +" ) " ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P5_Replace_Variable]^throw jp.wrongTokenException ( ctxt, JsonToken.FIELD_NAME, "need JSON String that contains type id  ( for subtype of "+baseTypeName (  ) +" ) " ) ;^105^106^^^^90^120^throw ctxt.wrongTokenException ( jp, JsonToken.FIELD_NAME, "need JSON String that contains type id  ( for subtype of "+baseTypeName (  ) +" ) " ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P7_Replace_Invocation]^throw ctxt .wrongTokenException ( jp )  " ) ;^105^106^^^^90^120^throw ctxt.wrongTokenException ( jp, JsonToken.FIELD_NAME, "need JSON String that contains type id  ( for subtype of "+baseTypeName (  ) +" ) " ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P11_Insert_Donor_Statement]^throw ctxt.wrongTokenException ( jp, JsonToken.END_OBJECT, "expected closing END_OBJECT after type information and deserialized value" ) ;throw ctxt.wrongTokenException ( jp, JsonToken.FIELD_NAME, "need JSON String that contains type id  ( for subtype of "+baseTypeName (  ) +" ) " ) ;^105^106^^^^90^120^throw ctxt.wrongTokenException ( jp, JsonToken.FIELD_NAME, "need JSON String that contains type id  ( for subtype of "+baseTypeName (  ) +" ) " ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P11_Insert_Donor_Statement]^throw ctxt.wrongTokenException ( jp, JsonToken.START_OBJECT, "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName (  )  ) ;throw ctxt.wrongTokenException ( jp, JsonToken.FIELD_NAME, "need JSON String that contains type id  ( for subtype of "+baseTypeName (  ) +" ) " ) ;^105^106^^^^90^120^throw ctxt.wrongTokenException ( jp, JsonToken.FIELD_NAME, "need JSON String that contains type id  ( for subtype of "+baseTypeName (  ) +" ) " ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P13_Insert_Block]^if  (  ( jp.nextToken (  )  )  !=  ( JsonToken.FIELD_NAME )  )  {     throw ctxt.wrongTokenException ( jp, JsonToken.FIELD_NAME,  (  ( "need JSON String that contains type id  ( for subtype of " +  ( baseTypeName (  )  )  )  + " ) " )  ) ; }^105^^^^^90^120^[Delete]^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P2_Replace_Operator]^throw ctxt.wrongTokenException ( jp, JsonToken.FIELD_NAME, "need JSON String that contains type id  &&  ( for subtype of "+baseTypeName (  ) +" ) " ) ;^105^106^^^^90^120^throw ctxt.wrongTokenException ( jp, JsonToken.FIELD_NAME, "need JSON String that contains type id  ( for subtype of "+baseTypeName (  ) +" ) " ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P2_Replace_Operator]^throw ctxt.wrongTokenException ( jp, JsonToken.FIELD_NAME, "need JSON String that contains type id  <  ( for subtype of "+baseTypeName (  ) +" ) " ) ;^105^106^^^^90^120^throw ctxt.wrongTokenException ( jp, JsonToken.FIELD_NAME, "need JSON String that contains type id  ( for subtype of "+baseTypeName (  ) +" ) " ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P14_Delete_Statement]^^105^106^^^^90^120^throw ctxt.wrongTokenException ( jp, JsonToken.FIELD_NAME, "need JSON String that contains type id  ( for subtype of "+baseTypeName (  ) +" ) " ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P11_Insert_Donor_Statement]^"need JSON String that contains type id  ( for subtype of "+baseTypeName (  ) +" ) " ) ;throw ctxt.wrongTokenException ( jp, JsonToken.FIELD_NAME, "need JSON String that contains type id  ( for subtype of "+baseTypeName (  ) +" ) " ) ;^105^106^^^^90^120^throw ctxt.wrongTokenException ( jp, JsonToken.FIELD_NAME, "need JSON String that contains type id  ( for subtype of "+baseTypeName (  ) +" ) " ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P14_Delete_Statement]^^106^107^^^^91^121^"need JSON String that contains type id  ( for subtype of "+baseTypeName (  ) +" ) " ) ; }^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P11_Insert_Donor_Statement]^throw ctxt.wrongTokenException ( jp, JsonToken.FIELD_NAME, "need JSON String that contains type id  ( for subtype of "+baseTypeName (  ) +" ) " ) ;"need JSON String that contains type id  ( for subtype of "+baseTypeName (  ) +" ) " ) ;^106^^^^^91^121^"need JSON String that contains type id  ( for subtype of "+baseTypeName (  ) +" ) " ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P2_Replace_Operator]^throw ctxt.wrongTokenException ( jp, JsonToken.FIELD_NAME, "need JSON String that contains type id  <<  ( for subtype of "+baseTypeName (  ) +" ) " ) ;^105^106^^^^90^120^throw ctxt.wrongTokenException ( jp, JsonToken.FIELD_NAME, "need JSON String that contains type id  ( for subtype of "+baseTypeName (  ) +" ) " ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P8_Replace_Mix]^throw ctxt.wrongTokenException ( jp, JsonToken.END_OBJECT, "expected closing END_OBJECT after type information and deserialized value" ) ; ;^105^106^^^^90^120^throw ctxt.wrongTokenException ( jp, JsonToken.FIELD_NAME, "need JSON String that contains type id  ( for subtype of "+baseTypeName (  ) +" ) " ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P2_Replace_Operator]^throw ctxt.wrongTokenException ( jp, JsonToken.FIELD_NAME, "need JSON String that contains type id  ^  ( for subtype of "+baseTypeName (  ) +" ) " ) ;^105^106^^^^90^120^throw ctxt.wrongTokenException ( jp, JsonToken.FIELD_NAME, "need JSON String that contains type id  ( for subtype of "+baseTypeName (  ) +" ) " ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P1_Replace_Type]^final char typeId = jp.getText (  ) ;^108^^^^^93^123^final String typeId = jp.getText (  ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P14_Delete_Statement]^^108^^^^^93^123^final String typeId = jp.getText (  ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P5_Replace_Variable]^JsonDeserializer<Object> deser = _findDeserializer (  typeId ) ;^109^^^^^94^124^JsonDeserializer<Object> deser = _findDeserializer ( ctxt, typeId ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P5_Replace_Variable]^JsonDeserializer<Object> deser = _findDeserializer ( ctxt ) ;^109^^^^^94^124^JsonDeserializer<Object> deser = _findDeserializer ( ctxt, typeId ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P5_Replace_Variable]^JsonDeserializer<Object> deser = _findDeserializer ( typeId, ctxt ) ;^109^^^^^94^124^JsonDeserializer<Object> deser = _findDeserializer ( ctxt, typeId ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P14_Delete_Statement]^^109^^^^^94^124^JsonDeserializer<Object> deser = _findDeserializer ( ctxt, typeId ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P7_Replace_Invocation]^jp .getCurrentToken (  )  ;^110^^^^^95^125^jp.nextToken (  ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P14_Delete_Statement]^^110^^^^^95^125^jp.nextToken (  ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P2_Replace_Operator]^if  ( _typeIdVisible || jp.getCurrentToken (  )  == JsonToken.START_OBJECT )  {^113^^^^^98^128^if  ( _typeIdVisible && jp.getCurrentToken (  )  == JsonToken.START_OBJECT )  {^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P2_Replace_Operator]^if  ( _typeIdVisible && jp.getCurrentToken (  )  > JsonToken.START_OBJECT )  {^113^^^^^98^128^if  ( _typeIdVisible && jp.getCurrentToken (  )  == JsonToken.START_OBJECT )  {^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P5_Replace_Variable]^if  ( JsonToken.START_OBJECT && jp.getCurrentToken (  )  == _typeIdVisible )  {^113^^^^^98^128^if  ( _typeIdVisible && jp.getCurrentToken (  )  == JsonToken.START_OBJECT )  {^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P6_Replace_Expression]^if  ( _typeIdVisible ) {^113^^^^^98^128^if  ( _typeIdVisible && jp.getCurrentToken (  )  == JsonToken.START_OBJECT )  {^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P6_Replace_Expression]^if  (  jp.getCurrentToken (  )  == JsonToken.START_OBJECT )  {^113^^^^^98^128^if  ( _typeIdVisible && jp.getCurrentToken (  )  == JsonToken.START_OBJECT )  {^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P8_Replace_Mix]^if  ( _typeIdVisible && jp .nextToken (  )   == JsonToken.START_OBJECT )  {^113^^^^^98^128^if  ( _typeIdVisible && jp.getCurrentToken (  )  == JsonToken.START_OBJECT )  {^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P9_Replace_Statement]^if  ( jp.getCurrentToken (  )  != JsonToken.START_OBJECT )  {^113^^^^^98^128^if  ( _typeIdVisible && jp.getCurrentToken (  )  == JsonToken.START_OBJECT )  {^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P5_Replace_Variable]^jp = JsonParserSequence.createFlattened ( tb.asParser ( jp )  ) ;^120^^^^^105^135^jp = JsonParserSequence.createFlattened ( tb.asParser ( jp ) , jp ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P5_Replace_Variable]^jp = JsonParserSequence.createFlattened ( jp.asParser ( tb ) , jp ) ;^120^^^^^105^135^jp = JsonParserSequence.createFlattened ( tb.asParser ( jp ) , jp ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P7_Replace_Invocation]^jp = JsonParserSequence.createFlattened ( tb .writeStartObject (  )  , jp ) ;^120^^^^^105^135^jp = JsonParserSequence.createFlattened ( tb.asParser ( jp ) , jp ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P8_Replace_Mix]^jp =  JsonParserSequence.createFlattened ( null.asParser ( jp ) , jp ) ;^120^^^^^105^135^jp = JsonParserSequence.createFlattened ( tb.asParser ( jp ) , jp ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P7_Replace_Invocation]^tb.writeString (  ) ;^117^^^^^102^132^tb.writeStartObject (  ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P14_Delete_Statement]^^117^118^^^^102^132^tb.writeStartObject (  ) ; tb.writeFieldName ( _typePropertyName ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P11_Insert_Donor_Statement]^tb.writeString ( typeId ) ;tb.writeStartObject (  ) ;^117^^^^^102^132^tb.writeStartObject (  ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P7_Replace_Invocation]^tb.TokenBuffer ( _typePropertyName ) ;^118^^^^^103^133^tb.writeFieldName ( _typePropertyName ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P7_Replace_Invocation]^tb .writeString ( typeId )  ;^118^^^^^103^133^tb.writeFieldName ( _typePropertyName ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P14_Delete_Statement]^^118^^^^^103^133^tb.writeFieldName ( _typePropertyName ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P8_Replace_Mix]^tb .writeStartObject (  )  ;^119^^^^^104^134^tb.writeString ( typeId ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P14_Delete_Statement]^^119^^^^^104^134^tb.writeString ( typeId ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P11_Insert_Donor_Statement]^tb.writeStartObject (  ) ;tb.writeString ( typeId ) ;^119^^^^^104^134^tb.writeString ( typeId ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P14_Delete_Statement]^^120^121^^^^105^135^jp = JsonParserSequence.createFlattened ( tb.asParser ( jp ) , jp ) ; jp.nextToken (  ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P14_Delete_Statement]^^120^^^^^105^135^jp = JsonParserSequence.createFlattened ( tb.asParser ( jp ) , jp ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P7_Replace_Invocation]^jp .getCurrentToken (  )  ;^121^^^^^106^136^jp.nextToken (  ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P14_Delete_Statement]^^121^^^^^106^136^jp.nextToken (  ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P14_Delete_Statement]^^119^120^^^^104^134^tb.writeString ( typeId ) ; jp = JsonParserSequence.createFlattened ( tb.asParser ( jp ) , jp ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P5_Replace_Variable]^Object value = deser.deserialize (  ctxt ) ;^124^^^^^109^139^Object value = deser.deserialize ( jp, ctxt ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P5_Replace_Variable]^Object value = deser.deserialize ( jp ) ;^124^^^^^109^139^Object value = deser.deserialize ( jp, ctxt ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P5_Replace_Variable]^Object value = jp.deserialize ( deser, ctxt ) ;^124^^^^^109^139^Object value = deser.deserialize ( jp, ctxt ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P5_Replace_Variable]^Object value = deser.deserialize ( ctxt, jp ) ;^124^^^^^109^139^Object value = deser.deserialize ( jp, ctxt ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P5_Replace_Variable]^Object value = ctxt.deserialize ( jp, deser ) ;^124^^^^^109^139^Object value = deser.deserialize ( jp, ctxt ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P14_Delete_Statement]^^124^^^^^109^139^Object value = deser.deserialize ( jp, ctxt ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P11_Insert_Donor_Statement]^return _deserialize ( jp, ctxt ) ;Object value = deser.deserialize ( jp, ctxt ) ;^124^^^^^109^139^Object value = deser.deserialize ( jp, ctxt ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P2_Replace_Operator]^if  ( jp.nextToken (  )  < JsonToken.END_OBJECT )  {^126^^^^^111^141^if  ( jp.nextToken (  )  != JsonToken.END_OBJECT )  {^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P5_Replace_Variable]^if  ( JsonToken.END_OBJECT.nextToken (  )  != jp )  {^126^^^^^111^141^if  ( jp.nextToken (  )  != JsonToken.END_OBJECT )  {^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P8_Replace_Mix]^if  ( jp.nextToken (  )  != this )  {^126^^^^^111^141^if  ( jp.nextToken (  )  != JsonToken.END_OBJECT )  {^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P9_Replace_Statement]^if  ( jp.getCurrentToken (  )  != JsonToken.START_OBJECT )  {^126^^^^^111^141^if  ( jp.nextToken (  )  != JsonToken.END_OBJECT )  {^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P9_Replace_Statement]^if  ( jp.nextToken (  )  != JsonToken.FIELD_NAME )  {^126^^^^^111^141^if  ( jp.nextToken (  )  != JsonToken.END_OBJECT )  {^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P15_Unwrap_Block]^throw ctxt.wrongTokenException(jp, JsonToken.END_OBJECT, "expected closing END_OBJECT after type information and deserialized value");^126^127^128^129^^111^141^if  ( jp.nextToken (  )  != JsonToken.END_OBJECT )  { throw ctxt.wrongTokenException ( jp, JsonToken.END_OBJECT, "expected closing END_OBJECT after type information and deserialized value" ) ; }^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P16_Remove_Block]^^126^127^128^129^^111^141^if  ( jp.nextToken (  )  != JsonToken.END_OBJECT )  { throw ctxt.wrongTokenException ( jp, JsonToken.END_OBJECT, "expected closing END_OBJECT after type information and deserialized value" ) ; }^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P13_Insert_Block]^if  (  ( jp.nextToken (  )  )  !=  ( JsonToken.FIELD_NAME )  )  {     throw ctxt.wrongTokenException ( jp, JsonToken.FIELD_NAME,  (  ( "need JSON String that contains type id  ( for subtype of " +  ( baseTypeName (  )  )  )  + " ) " )  ) ; }^126^^^^^111^141^[Delete]^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P13_Insert_Block]^if  (  ( jp.getCurrentToken (  )  )  !=  ( JsonToken.START_OBJECT )  )  {     throw ctxt.wrongTokenException ( jp, JsonToken.START_OBJECT,  ( "need JSON Object to contain As.WRAPPER_OBJECT type information for class " +  ( baseTypeName (  )  )  )  ) ; }^126^^^^^111^141^[Delete]^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P3_Replace_Literal]^throw ctxt.wrongTokenException ( jp, JsonToken.END_OBJECT, " type " ) ;^127^128^^^^112^142^throw ctxt.wrongTokenException ( jp, JsonToken.END_OBJECT, "expected closing END_OBJECT after type information and deserialized value" ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P5_Replace_Variable]^throw ctxt.wrongTokenException (  JsonToken.END_OBJECT, "expected closing END_OBJECT after type information and deserialized value" ) ;^127^128^^^^112^142^throw ctxt.wrongTokenException ( jp, JsonToken.END_OBJECT, "expected closing END_OBJECT after type information and deserialized value" ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P5_Replace_Variable]^throw jp.wrongTokenException ( ctxt, JsonToken.END_OBJECT, "expected closing END_OBJECT after type information and deserialized value" ) ;^127^128^^^^112^142^throw ctxt.wrongTokenException ( jp, JsonToken.END_OBJECT, "expected closing END_OBJECT after type information and deserialized value" ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P7_Replace_Invocation]^throw ctxt .wrongTokenException ( jp )  ;^127^128^^^^112^142^throw ctxt.wrongTokenException ( jp, JsonToken.END_OBJECT, "expected closing END_OBJECT after type information and deserialized value" ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P8_Replace_Mix]^return false;^127^128^^^^112^142^throw ctxt.wrongTokenException ( jp, JsonToken.END_OBJECT, "expected closing END_OBJECT after type information and deserialized value" ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P11_Insert_Donor_Statement]^throw ctxt.wrongTokenException ( jp, JsonToken.START_OBJECT, "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName (  )  ) ;throw ctxt.wrongTokenException ( jp, JsonToken.END_OBJECT, "expected closing END_OBJECT after type information and deserialized value" ) ;^127^128^^^^112^142^throw ctxt.wrongTokenException ( jp, JsonToken.END_OBJECT, "expected closing END_OBJECT after type information and deserialized value" ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P11_Insert_Donor_Statement]^throw ctxt.wrongTokenException ( jp, JsonToken.FIELD_NAME, "need JSON String that contains type id  ( for subtype of "+baseTypeName (  ) +" ) " ) ;throw ctxt.wrongTokenException ( jp, JsonToken.END_OBJECT, "expected closing END_OBJECT after type information and deserialized value" ) ;^127^128^^^^112^142^throw ctxt.wrongTokenException ( jp, JsonToken.END_OBJECT, "expected closing END_OBJECT after type information and deserialized value" ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P13_Insert_Block]^if  (  ( jp.nextToken (  )  )  !=  ( JsonToken.END_OBJECT )  )  {     throw ctxt.wrongTokenException ( jp, JsonToken.END_OBJECT, "expected closing END_OBJECT after type information and deserialized value" ) ; }^127^^^^^112^142^[Delete]^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P3_Replace_Literal]^throw ctxt.wrongTokenException ( jp, JsonToken.END_OBJECT, "rializ" ) ;^127^128^^^^112^142^throw ctxt.wrongTokenException ( jp, JsonToken.END_OBJECT, "expected closing END_OBJECT after type information and deserialized value" ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P14_Delete_Statement]^^127^128^^^^112^142^throw ctxt.wrongTokenException ( jp, JsonToken.END_OBJECT, "expected closing END_OBJECT after type information and deserialized value" ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P3_Replace_Literal]^throw ctxt.wrongTokenException ( jp, JsonToken.END_OBJECT, "e" ) ;^127^128^^^^112^142^throw ctxt.wrongTokenException ( jp, JsonToken.END_OBJECT, "expected closing END_OBJECT after type information and deserialized value" ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P7_Replace_Invocation]^if  ( jp .getCurrentToken (  )   != JsonToken.END_OBJECT )  {^126^^^^^111^141^if  ( jp.nextToken (  )  != JsonToken.END_OBJECT )  {^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
[P3_Replace_Literal]^throw ctxt.wrongTokenException ( jp, JsonToken.END_OBJECT, "expected closing END_OBJECT after type information and deserialized valued" ) ;^127^128^^^^112^142^throw ctxt.wrongTokenException ( jp, JsonToken.END_OBJECT, "expected closing END_OBJECT after type information and deserialized value" ) ;^[CLASS] AsWrapperTypeDeserializer  [METHOD] _deserialize [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt [VARIABLES] boolean  TokenBuffer  tb  DeserializationContext  ctxt  Object  value  String  typeId  JsonDeserializer  deser  long  serialVersionUID  JsonParser  jp  
