[P1_Replace_Type]^private static final  short  serialVersionUID = 8635483102371490919L;^33^^^^^28^38^private static final long serialVersionUID = 8635483102371490919L;^[CLASS] SimpleAbstractTypeResolver   [VARIABLES] 
[P8_Replace_Mix]^private static final  int  serialVersionUID = 8635483102371490919;^33^^^^^28^38^private static final long serialVersionUID = 8635483102371490919L;^[CLASS] SimpleAbstractTypeResolver   [VARIABLES] 
[P8_Replace_Mix]^protected  HashMap<ClassKey,Class<?>> _mappings = new HashMap<ClassKey,Class<?>> (  ) ;^38^^^^^33^43^protected final HashMap<ClassKey,Class<?>> _mappings = new HashMap<ClassKey,Class<?>> (  ) ;^[CLASS] SimpleAbstractTypeResolver   [VARIABLES] 
[P2_Replace_Operator]^if  ( superType <= subType )  {^55^^^^^52^68^if  ( superType == subType )  {^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[P5_Replace_Variable]^if  ( subType == superType )  {^55^^^^^52^68^if  ( superType == subType )  {^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("Can not add mapping from class to itself");^55^56^57^^^52^68^if  ( superType == subType )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[P16_Remove_Block]^^55^56^57^^^52^68^if  ( superType == subType )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[P13_Insert_Block]^if  ( superType == subType )  {     throw new IllegalArgumentException ( "Can not add mapping from class to itself" ) ; }^56^^^^^52^68^[Delete]^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException  (" ") +" since it is not abstract" ) ;throw new IllegalArgumentException  (" ")  ;^56^^^^^52^68^throw new IllegalArgumentException  (" ")  ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[P8_Replace_Mix]^throw new IllegalArgumentException  (" ") +" since it is not abstract" ) ; ;^56^^^^^52^68^throw new IllegalArgumentException  (" ")  ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[P6_Replace_Expression]^if  (  ( "Can not add mapping from class " +  ( superType.getName (  )  )  )  + " to " + subType.getName (  ) )  {^58^^^^^52^68^if  ( !superType.isAssignableFrom ( subType )  )  {^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[P6_Replace_Expression]^if  ( "Can not add mapping from class " +  ( superType.getName (  )  )  + " to " )  {^58^^^^^52^68^if  ( !superType.isAssignableFrom ( subType )  )  {^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[P6_Replace_Expression]^if  ( "Can not add mapping from class " + superType.getName (  ) )  {^58^^^^^52^68^if  ( !superType.isAssignableFrom ( subType )  )  {^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[P7_Replace_Invocation]^if  ( !superType .getName (  )   )  {^58^^^^^52^68^if  ( !superType.isAssignableFrom ( subType )  )  {^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException((((("Can not add mapping from class " + (superType.getName())) + " to ") + (subType.getName())) + ", as latter is not a subtype of former"));^58^59^60^61^^52^68^if  ( !superType.isAssignableFrom ( subType )  )  { throw new IllegalArgumentException  (" ") +" to "+subType.getName (  ) +", as latter is not a subtype of former" ) ; }^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[P16_Remove_Block]^^58^59^60^61^^52^68^if  ( !superType.isAssignableFrom ( subType )  )  { throw new IllegalArgumentException  (" ") +" to "+subType.getName (  ) +", as latter is not a subtype of former" ) ; }^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[P13_Insert_Block]^if  ( ! ( isAbstract ( superType.getModifiers (  )  )  )  )  {     throw new IllegalArgumentException (  (  ( "Can not add mapping from class " +  ( superType.getName (  )  )  )  + " since it is not abstract" )  ) ; }^58^^^^^52^68^[Delete]^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[P2_Replace_Operator]^throw new IllegalArgumentException   instanceof   (" ") +" to "+subType.getName (  ) +", as latter is not a subtype of former" ) ;^59^60^^^^52^68^throw new IllegalArgumentException  (" ") +" to "+subType.getName (  ) +", as latter is not a subtype of former" ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[P2_Replace_Operator]^throw new IllegalArgumentException  <<  (" ") +" to "+subType.getName (  ) +", as latter is not a subtype of former" ) ;^59^60^^^^52^68^throw new IllegalArgumentException  (" ") +" to "+subType.getName (  ) +", as latter is not a subtype of former" ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[P2_Replace_Operator]^throw new IllegalArgumentException  <  (" ") +" to "+subType.getName (  ) +", as latter is not a subtype of former" ) ;^59^60^^^^52^68^throw new IllegalArgumentException  (" ") +" to "+subType.getName (  ) +", as latter is not a subtype of former" ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[P2_Replace_Operator]^throw new IllegalArgumentException  >=  (" ") +" to "+subType.getName (  ) +", as latter is not a subtype of former" ) ;^59^60^^^^52^68^throw new IllegalArgumentException  (" ") +" to "+subType.getName (  ) +", as latter is not a subtype of former" ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[P3_Replace_Literal]^throw new IllegalArgumentException  (" ") +" to "+subType.getName (  ) +"r is not" ) ;^59^60^^^^52^68^throw new IllegalArgumentException  (" ") +" to "+subType.getName (  ) +", as latter is not a subtype of former" ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[P7_Replace_Invocation]^throw new IllegalArgumentException  (" ") +" to "+subType.isAssignableFrom (  ) +", as latter is not a subtype of former" ) ;^59^60^^^^52^68^throw new IllegalArgumentException  (" ") +" to "+subType.getName (  ) +", as latter is not a subtype of former" ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[P13_Insert_Block]^if  ( ! ( superType.isAssignableFrom ( subType )  )  )  {     throw new IllegalArgumentException (  (  (  (  ( "Can not add mapping from class " +  ( superType.getName (  )  )  )  + " to " )  +  ( subType.getName (  )  )  )  + ", as latter is not a subtype of former" )  ) ; }^59^^^^^52^68^[Delete]^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[P2_Replace_Operator]^throw new IllegalArgumentException  >  (" ") +" to "+subType.getName (  ) +", as latter is not a subtype of former" ) ;^59^60^^^^52^68^throw new IllegalArgumentException  (" ") +" to "+subType.getName (  ) +", as latter is not a subtype of former" ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[P2_Replace_Operator]^throw new IllegalArgumentException  &&  (" ") +" to "+subType.getName (  ) +", as latter is not a subtype of former" ) ;^59^60^^^^52^68^throw new IllegalArgumentException  (" ") +" to "+subType.getName (  ) +", as latter is not a subtype of former" ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[P3_Replace_Literal]^throw new IllegalArgumentException  (" ") +" to  t"+subType.getName (  ) +", as latter is not a subtype of former" ) ;^59^60^^^^52^68^throw new IllegalArgumentException  (" ") +" to "+subType.getName (  ) +", as latter is not a subtype of former" ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[P3_Replace_Literal]^throw new IllegalArgumentException  (" ") +" to "+subType.getName (  ) +"a s as latter is not a subtype of former" ) ;^59^60^^^^52^68^throw new IllegalArgumentException  (" ") +" to "+subType.getName (  ) +", as latter is not a subtype of former" ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[P7_Replace_Invocation]^throw new IllegalArgumentException  (" ") +" to "+subType .getModifiers (  )  +", as latter is not a subtype of former" ) ;^59^60^^^^52^68^throw new IllegalArgumentException  (" ") +" to "+subType.getName (  ) +", as latter is not a subtype of former" ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[P8_Replace_Mix]^throw new IllegalArgumentException  (" ") +" since it is not abstract" ) ; ;^59^60^^^^52^68^throw new IllegalArgumentException  (" ") +" to "+subType.getName (  ) +", as latter is not a subtype of former" ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException  (" ") +" since it is not abstract" ) ;throw new IllegalArgumentException  (" ") +" to "+subType.getName (  ) +", as latter is not a subtype of former" ) ;^59^60^^^^52^68^throw new IllegalArgumentException  (" ") +" to "+subType.getName (  ) +", as latter is not a subtype of former" ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[P14_Delete_Statement]^^59^60^^^^52^68^throw new IllegalArgumentException  (" ") +" to "+subType.getName (  ) +", as latter is not a subtype of former" ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[P11_Insert_Donor_Statement]^+" to "+subType.getName (  ) +", as latter is not a subtype of former" ) ;throw new IllegalArgumentException  (" ") +" to "+subType.getName (  ) +", as latter is not a subtype of former" ) ;^59^60^^^^52^68^throw new IllegalArgumentException  (" ") +" to "+subType.getName (  ) +", as latter is not a subtype of former" ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[P7_Replace_Invocation]^+" to "+subType.isAssignableFrom (  ) +", as latter is not a subtype of former" ) ;^60^^^^^52^68^+" to "+subType.getName (  ) +", as latter is not a subtype of former" ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[P7_Replace_Invocation]^+" to "+subType .getModifiers (  )  +", as latter is not a subtype of former" ) ;^60^^^^^52^68^+" to "+subType.getName (  ) +", as latter is not a subtype of former" ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[P14_Delete_Statement]^^60^61^^^^52^68^+" to "+subType.getName (  ) +", as latter is not a subtype of former" ) ; }^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException  (" ") +" to "+subType.getName (  ) +", as latter is not a subtype of former" ) ;+" to "+subType.getName (  ) +", as latter is not a subtype of former" ) ;^60^^^^^52^68^+" to "+subType.getName (  ) +", as latter is not a subtype of former" ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[P2_Replace_Operator]^throw new IllegalArgumentException  ||  (" ") +" to "+subType.getName (  ) +", as latter is not a subtype of former" ) ;^59^60^^^^52^68^throw new IllegalArgumentException  (" ") +" to "+subType.getName (  ) +", as latter is not a subtype of former" ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[P2_Replace_Operator]^throw new IllegalArgumentException  |  (" ") +" to "+subType.getName (  ) +", as latter is not a subtype of former" ) ;^59^60^^^^52^68^throw new IllegalArgumentException  (" ") +" to "+subType.getName (  ) +", as latter is not a subtype of former" ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[P2_Replace_Operator]^throw new IllegalArgumentException  >>  (" ") +" to "+subType.getName (  ) +", as latter is not a subtype of former" ) ;^59^60^^^^52^68^throw new IllegalArgumentException  (" ") +" to "+subType.getName (  ) +", as latter is not a subtype of former" ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[P3_Replace_Literal]^throw new IllegalArgumentException  (" ") +"to "+subType.getName (  ) +", as latter is not a subtype of former" ) ;^59^60^^^^52^68^throw new IllegalArgumentException  (" ") +" to "+subType.getName (  ) +", as latter is not a subtype of former" ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[P3_Replace_Literal]^throw new IllegalArgumentException  (" ") +" to "+subType.getName (  ) +" as la as latter is not a subtype of former" ) ;^59^60^^^^52^68^throw new IllegalArgumentException  (" ") +" to "+subType.getName (  ) +", as latter is not a subtype of former" ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[P2_Replace_Operator]^throw new IllegalArgumentException  ==  (" ") +" to "+subType.getName (  ) +", as latter is not a subtype of former" ) ;^59^60^^^^52^68^throw new IllegalArgumentException  (" ") +" to "+subType.getName (  ) +", as latter is not a subtype of former" ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[P3_Replace_Literal]^throw new IllegalArgumentException  (" ") +" to "+subType.getName (  ) +", as latter is not a subtype of former as" ) ;^59^60^^^^52^68^throw new IllegalArgumentException  (" ") +" to "+subType.getName (  ) +", as latter is not a subtype of former" ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[P6_Replace_Expression]^if  ( "Can not add mapping from class " + superType.getName (  ) )  {^62^^^^^52^68^if  ( !Modifier.isAbstract ( superType.getModifiers (  )  )  )  {^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[P7_Replace_Invocation]^if  ( !Modifier.isAbstract ( superType.isAssignableFrom (  )  )  )  {^62^^^^^52^68^if  ( !Modifier.isAbstract ( superType.getModifiers (  )  )  )  {^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException((("Can not add mapping from class " + (superType.getName())) + " since it is not abstract"));^62^63^64^65^^52^68^if  ( !Modifier.isAbstract ( superType.getModifiers (  )  )  )  { throw new IllegalArgumentException  (" ") +" since it is not abstract" ) ; }^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[P16_Remove_Block]^^62^63^64^65^^52^68^if  ( !Modifier.isAbstract ( superType.getModifiers (  )  )  )  { throw new IllegalArgumentException  (" ") +" since it is not abstract" ) ; }^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[P13_Insert_Block]^if  ( ! ( superType.isAssignableFrom ( subType )  )  )  {     throw new IllegalArgumentException (  (  (  (  ( "Can not add mapping from class " +  ( superType.getName (  )  )  )  + " to " )  +  ( subType.getName (  )  )  )  + ", as latter is not a subtype of former" )  ) ; }^62^^^^^52^68^[Delete]^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[P2_Replace_Operator]^throw new IllegalArgumentException  ^  (" ") +" since it is not abstract" ) ;^63^64^^^^52^68^throw new IllegalArgumentException  (" ") +" since it is not abstract" ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[P2_Replace_Operator]^throw new IllegalArgumentException   instanceof   (" ") +" since it is not abstract" ) ;^63^64^^^^52^68^throw new IllegalArgumentException  (" ") +" since it is not abstract" ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[P3_Replace_Literal]^throw new IllegalArgumentException  (" ") +" it is not abstrasince it is not abstract" ) ;^63^64^^^^52^68^throw new IllegalArgumentException  (" ") +" since it is not abstract" ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[P13_Insert_Block]^if  ( ! ( isAbstract ( superType.getModifiers (  )  )  )  )  {     throw new IllegalArgumentException (  (  ( "Can not add mapping from class " +  ( superType.getName (  )  )  )  + " since it is not abstract" )  ) ; }^63^^^^^52^68^[Delete]^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[P13_Insert_Block]^if  ( ! ( superType.isAssignableFrom ( subType )  )  )  {     throw new IllegalArgumentException (  (  (  (  ( "Can not add mapping from class " +  ( superType.getName (  )  )  )  + " to " )  +  ( subType.getName (  )  )  )  + ", as latter is not a subtype of former" )  ) ; }^63^^^^^52^68^[Delete]^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[P3_Replace_Literal]^throw new IllegalArgumentException  (" ") +"t absince it is not abstract" ) ;^63^64^^^^52^68^throw new IllegalArgumentException  (" ") +" since it is not abstract" ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException  (" ")  ;throw new IllegalArgumentException  (" ") +" since it is not abstract" ) ;^63^64^^^^52^68^throw new IllegalArgumentException  (" ") +" since it is not abstract" ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException  (" ") +" to "+subType.getName (  ) +", as latter is not a subtype of former" ) ;throw new IllegalArgumentException  (" ") +" since it is not abstract" ) ;^63^64^^^^52^68^throw new IllegalArgumentException  (" ") +" since it is not abstract" ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[P14_Delete_Statement]^^63^64^^^^52^68^throw new IllegalArgumentException  (" ") +" since it is not abstract" ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[P2_Replace_Operator]^throw new IllegalArgumentException  ||  (" ") +" since it is not abstract" ) ;^63^64^^^^52^68^throw new IllegalArgumentException  (" ") +" since it is not abstract" ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[P2_Replace_Operator]^throw new IllegalArgumentException  <  (" ") +" since it is not abstract" ) ;^63^64^^^^52^68^throw new IllegalArgumentException  (" ") +" since it is not abstract" ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[P3_Replace_Literal]^throw new IllegalArgumentException  (" ") +"since it is" ) ;^63^64^^^^52^68^throw new IllegalArgumentException  (" ") +" since it is not abstract" ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[P3_Replace_Literal]^throw new IllegalArgumentException  (" ") +" since it is not abstractnot abstra" ) ;^63^64^^^^52^68^throw new IllegalArgumentException  (" ") +" since it is not abstract" ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[P8_Replace_Mix]^return ;^63^64^^^^52^68^throw new IllegalArgumentException  (" ") +" since it is not abstract" ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[P4_Replace_Constructor]^_mappings.put ( _mappings.put (  new ClassKey ( src )  , subType ) ;^66^^^^^52^68^_mappings.put ( new ClassKey ( superType ) , subType ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[P4_Replace_Constructor]^_mappings.put ( new ClassKey ( superType )  ) ;^66^^^^^52^68^_mappings.put ( new ClassKey ( superType ) , subType ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[P5_Replace_Variable]^_mappings.put ( new ClassKey ( superType ) , 1 ) ;^66^^^^^52^68^_mappings.put ( new ClassKey ( superType ) , subType ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[P5_Replace_Variable]^_mappings.put ( new ClassKey ( subType ) , superType ) ;^66^^^^^52^68^_mappings.put ( new ClassKey ( superType ) , subType ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[P14_Delete_Statement]^^66^^^^^52^68^_mappings.put ( new ClassKey ( superType ) , subType ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[P8_Replace_Mix]^return null;^67^^^^^52^68^return this;^[CLASS] SimpleAbstractTypeResolver  [METHOD] addMapping [RETURN_TYPE] <T>   Class<T> superType Class<? extends T> subType [VARIABLES] Class  subType  superType  boolean  HashMap  _mappings  long  serialVersionUID  
[P7_Replace_Invocation]^Class<?> src = type.narrowBy (  ) ;^74^^^^^71^80^Class<?> src = type.getRawClass (  ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] findTypeMapping [RETURN_TYPE] JavaType   DeserializationConfig config JavaType type [VARIABLES] DeserializationConfig  config  JavaType  type  Class  dst  src  boolean  HashMap  _mappings  long  serialVersionUID  
[P11_Insert_Donor_Statement]^Class<?> dst = _mappings.get ( new ClassKey ( src )  ) ;Class<?> src = type.getRawClass (  ) ;^74^^^^^71^80^Class<?> src = type.getRawClass (  ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] findTypeMapping [RETURN_TYPE] JavaType   DeserializationConfig config JavaType type [VARIABLES] DeserializationConfig  config  JavaType  type  Class  dst  src  boolean  HashMap  _mappings  long  serialVersionUID  
[P14_Delete_Statement]^^74^75^^^^71^80^Class<?> src = type.getRawClass (  ) ; Class<?> dst = _mappings.get ( new ClassKey ( src )  ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] findTypeMapping [RETURN_TYPE] JavaType   DeserializationConfig config JavaType type [VARIABLES] DeserializationConfig  config  JavaType  type  Class  dst  src  boolean  HashMap  _mappings  long  serialVersionUID  
[P4_Replace_Constructor]^Class<?> dst = _mappings.get ( Class<?> dst = _mappings.get (  new ClassKey ( superType )   ) ;^75^^^^^71^80^Class<?> dst = _mappings.get ( new ClassKey ( src )  ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] findTypeMapping [RETURN_TYPE] JavaType   DeserializationConfig config JavaType type [VARIABLES] DeserializationConfig  config  JavaType  type  Class  dst  src  boolean  HashMap  _mappings  long  serialVersionUID  
[P5_Replace_Variable]^Class<?> dst = src.get ( new ClassKey ( _mappings )  ) ;^75^^^^^71^80^Class<?> dst = _mappings.get ( new ClassKey ( src )  ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] findTypeMapping [RETURN_TYPE] JavaType   DeserializationConfig config JavaType type [VARIABLES] DeserializationConfig  config  JavaType  type  Class  dst  src  boolean  HashMap  _mappings  long  serialVersionUID  
[P11_Insert_Donor_Statement]^Class<?> src = type.getRawClass (  ) ;Class<?> dst = _mappings.get ( new ClassKey ( src )  ) ;^75^^^^^71^80^Class<?> dst = _mappings.get ( new ClassKey ( src )  ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] findTypeMapping [RETURN_TYPE] JavaType   DeserializationConfig config JavaType type [VARIABLES] DeserializationConfig  config  JavaType  type  Class  dst  src  boolean  HashMap  _mappings  long  serialVersionUID  
[P8_Replace_Mix]^Class<?> dst = _mappings.get ( new ClassKey ( 0 )  ) ;^75^^^^^71^80^Class<?> dst = _mappings.get ( new ClassKey ( src )  ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] findTypeMapping [RETURN_TYPE] JavaType   DeserializationConfig config JavaType type [VARIABLES] DeserializationConfig  config  JavaType  type  Class  dst  src  boolean  HashMap  _mappings  long  serialVersionUID  
[P14_Delete_Statement]^^75^^^^^71^80^Class<?> dst = _mappings.get ( new ClassKey ( src )  ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] findTypeMapping [RETURN_TYPE] JavaType   DeserializationConfig config JavaType type [VARIABLES] DeserializationConfig  config  JavaType  type  Class  dst  src  boolean  HashMap  _mappings  long  serialVersionUID  
[P2_Replace_Operator]^if  ( dst != null )  {^76^^^^^71^80^if  ( dst == null )  {^[CLASS] SimpleAbstractTypeResolver  [METHOD] findTypeMapping [RETURN_TYPE] JavaType   DeserializationConfig config JavaType type [VARIABLES] DeserializationConfig  config  JavaType  type  Class  dst  src  boolean  HashMap  _mappings  long  serialVersionUID  
[P8_Replace_Mix]^if  ( dst == false )  {^76^^^^^71^80^if  ( dst == null )  {^[CLASS] SimpleAbstractTypeResolver  [METHOD] findTypeMapping [RETURN_TYPE] JavaType   DeserializationConfig config JavaType type [VARIABLES] DeserializationConfig  config  JavaType  type  Class  dst  src  boolean  HashMap  _mappings  long  serialVersionUID  
[P15_Unwrap_Block]^return null;^76^77^78^^^71^80^if  ( dst == null )  { return null; }^[CLASS] SimpleAbstractTypeResolver  [METHOD] findTypeMapping [RETURN_TYPE] JavaType   DeserializationConfig config JavaType type [VARIABLES] DeserializationConfig  config  JavaType  type  Class  dst  src  boolean  HashMap  _mappings  long  serialVersionUID  
[P16_Remove_Block]^^76^77^78^^^71^80^if  ( dst == null )  { return null; }^[CLASS] SimpleAbstractTypeResolver  [METHOD] findTypeMapping [RETURN_TYPE] JavaType   DeserializationConfig config JavaType type [VARIABLES] DeserializationConfig  config  JavaType  type  Class  dst  src  boolean  HashMap  _mappings  long  serialVersionUID  
[P8_Replace_Mix]^return this;^77^^^^^71^80^return null;^[CLASS] SimpleAbstractTypeResolver  [METHOD] findTypeMapping [RETURN_TYPE] JavaType   DeserializationConfig config JavaType type [VARIABLES] DeserializationConfig  config  JavaType  type  Class  dst  src  boolean  HashMap  _mappings  long  serialVersionUID  
[P8_Replace_Mix]^return false;^77^^^^^71^80^return null;^[CLASS] SimpleAbstractTypeResolver  [METHOD] findTypeMapping [RETURN_TYPE] JavaType   DeserializationConfig config JavaType type [VARIABLES] DeserializationConfig  config  JavaType  type  Class  dst  src  boolean  HashMap  _mappings  long  serialVersionUID  
[P5_Replace_Variable]^return dst.narrowBy ( type ) ;^79^^^^^71^80^return type.narrowBy ( dst ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] findTypeMapping [RETURN_TYPE] JavaType   DeserializationConfig config JavaType type [VARIABLES] DeserializationConfig  config  JavaType  type  Class  dst  src  boolean  HashMap  _mappings  long  serialVersionUID  
[P8_Replace_Mix]^return type.narrowBy ( 0 ) ;^79^^^^^71^80^return type.narrowBy ( dst ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] findTypeMapping [RETURN_TYPE] JavaType   DeserializationConfig config JavaType type [VARIABLES] DeserializationConfig  config  JavaType  type  Class  dst  src  boolean  HashMap  _mappings  long  serialVersionUID  
[P14_Delete_Statement]^^79^^^^^71^80^return type.narrowBy ( dst ) ;^[CLASS] SimpleAbstractTypeResolver  [METHOD] findTypeMapping [RETURN_TYPE] JavaType   DeserializationConfig config JavaType type [VARIABLES] DeserializationConfig  config  JavaType  type  Class  dst  src  boolean  HashMap  _mappings  long  serialVersionUID  
[P8_Replace_Mix]^return true;^87^^^^^84^88^return null;^[CLASS] SimpleAbstractTypeResolver  [METHOD] resolveAbstractType [RETURN_TYPE] JavaType   DeserializationConfig config JavaType type [VARIABLES] DeserializationConfig  config  JavaType  type  boolean  HashMap  _mappings  long  serialVersionUID  
