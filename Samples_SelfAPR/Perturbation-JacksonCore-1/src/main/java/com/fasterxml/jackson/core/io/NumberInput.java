[P1_Replace_Type]^public final static char NASTY_SMALL_DOUBLE = "2.2250738585072012e-308";^11^^^^^6^16^public final static String NASTY_SMALL_DOUBLE = "2.2250738585072012e-308";^[CLASS] NumberInput   [VARIABLES] 
[P3_Replace_Literal]^public final static String NASTY_SMALL_DOUBLE = "5072";^11^^^^^6^16^public final static String NASTY_SMALL_DOUBLE = "2.2250738585072012e-308";^[CLASS] NumberInput   [VARIABLES] 
[P8_Replace_Mix]^public final static String NASTY_SMALL_DOUBLE ;^11^^^^^6^16^public final static String NASTY_SMALL_DOUBLE = "2.2250738585072012e-308";^[CLASS] NumberInput   [VARIABLES] 
[P1_Replace_Type]^final static  int  L_BILLION = 1000000000;^16^^^^^11^21^final static long L_BILLION = 1000000000;^[CLASS] NumberInput   [VARIABLES] 
[P3_Replace_Literal]^final static long L_BILLION = ;^16^^^^^11^21^final static long L_BILLION = 1000000000;^[CLASS] NumberInput   [VARIABLES] 
[P8_Replace_Mix]^final static long L_BILLION = 3;^16^^^^^11^21^final static long L_BILLION = 1000000000;^[CLASS] NumberInput   [VARIABLES] 
[P1_Replace_Type]^final static char MIN_LONG_STR_NO_SIGN = String.valueOf ( Long.MIN_VALUE ) .substring ( 1 ) ;^18^^^^^13^23^final static String MIN_LONG_STR_NO_SIGN = String.valueOf ( Long.MIN_VALUE ) .substring ( 1 ) ;^[CLASS] NumberInput   [VARIABLES] 
[P7_Replace_Invocation]^final static String MIN_LONG_STR_NO_SIGN = String.valueOf ( Long.MIN_VALUE ) .charAt ( 1 ) ;^18^^^^^13^23^final static String MIN_LONG_STR_NO_SIGN = String.valueOf ( Long.MIN_VALUE ) .substring ( 1 ) ;^[CLASS] NumberInput   [VARIABLES] 
[P7_Replace_Invocation]^final static String MIN_LONG_STR_NO_SIGN = String.length ( Long.MIN_VALUE ) .substring ( 1 ) ;^18^^^^^13^23^final static String MIN_LONG_STR_NO_SIGN = String.valueOf ( Long.MIN_VALUE ) .substring ( 1 ) ;^[CLASS] NumberInput   [VARIABLES] 
[P8_Replace_Mix]^final static String MIN_LONG_STR_NO_SIGN = String.valueOf ( Long.MIN_VALUE ) .substring ( 3 ) ;^18^^^^^13^23^final static String MIN_LONG_STR_NO_SIGN = String.valueOf ( Long.MIN_VALUE ) .substring ( 1 ) ;^[CLASS] NumberInput   [VARIABLES] 
[P1_Replace_Type]^final static char MAX_LONG_STR = String.valueOf ( Long.MAX_VALUE ) ;^19^^^^^14^24^final static String MAX_LONG_STR = String.valueOf ( Long.MAX_VALUE ) ;^[CLASS] NumberInput   [VARIABLES] 
[P7_Replace_Invocation]^final static String MAX_LONG_STR = String.length ( Long.MAX_VALUE ) ;^19^^^^^14^24^final static String MAX_LONG_STR = String.valueOf ( Long.MAX_VALUE ) ;^[CLASS] NumberInput   [VARIABLES] 
[P8_Replace_Mix]^static char MAX_LONG_STR = String.valueOf ( Long.MAX_VALUE ) ;^19^^^^^14^24^final static String MAX_LONG_STR = String.valueOf ( Long.MAX_VALUE ) ;^[CLASS] NumberInput   [VARIABLES] 
[P1_Replace_Type]^short  num = digitChars[offset] - '0';^30^^^^^29^58^int num = digitChars[offset] - '0';^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^int num = digitChars[offset]  &&  '0';^30^^^^^29^58^int num = digitChars[offset] - '0';^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P11_Insert_Donor_Statement]^int num = c - '0';int num = digitChars[offset] - '0';^30^^^^^29^58^int num = digitChars[offset] - '0';^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P5_Replace_Variable]^len += num;^31^^^^^29^58^len += offset;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  ( ++offset > len )  {^33^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  ^  ( ++offset < len )  {^33^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  ( ++offset <= len )  {^33^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  <=  ( ++offset < len )  {^33^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  ( ++offset == len )  {^33^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  &  ( ++offset < len )  {^33^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  !=  ( ++offset < len )  {^33^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  <<  ( ++offset < len )  {^33^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  |  ( ++offset < len )  {^33^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P5_Replace_Variable]^if  ( ++offset < offset )  {^33^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P5_Replace_Variable]^if  ( ++num < len )  {^33^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P6_Replace_Expression]^if  ( num * 10 + digitChars[offset] - '0' )  {^33^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P6_Replace_Expression]^if  ( num * 10 )  {^33^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P6_Replace_Expression]^if  ( digitChars[offset] - '0' )  {^33^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P9_Replace_Statement]^if  ( i < len )  {^33^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P9_Replace_Statement]^if  ( offset < length )  {^33^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  ( ++offset <= len )  {^35^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  ^  ( ++offset < len )  {^35^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  <<  ( ++offset < len )  {^35^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  &  ( ++offset < len )  {^35^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  ( ++offset == len )  {^35^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  <=  ( ++offset < len )  {^35^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  |  ( ++offset < len )  {^35^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  >>  ( ++offset < len )  {^35^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  >=  ( ++offset < len )  {^35^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P5_Replace_Variable]^if  ( ++offset < offset )  {^35^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P5_Replace_Variable]^if  ( ++num < len )  {^35^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P6_Replace_Expression]^if  ( num * 10 + digitChars[offset] - '0' )  {^35^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P6_Replace_Expression]^if  ( num * 10 )  {^35^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P6_Replace_Expression]^if  ( digitChars[offset] - '0' )  {^35^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P9_Replace_Statement]^if  ( i < len )  {^35^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P9_Replace_Statement]^if  ( offset < length )  {^35^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  ( ++offset > len )  {^37^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  !=  ( ++offset < len )  {^37^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  ( ++offset <= len )  {^37^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  ==  ( ++offset < len )  {^37^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  <  ( ++offset < len )  {^37^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  >>  ( ++offset < len )  {^37^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if   instanceof   ( ++offset < len )  {^37^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P5_Replace_Variable]^if  ( ++offset < num )  {^37^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P5_Replace_Variable]^if  ( ++len < len )  {^37^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P6_Replace_Expression]^if  ( num * 10 + digitChars[offset] - '0' )  {^37^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P6_Replace_Expression]^if  ( num * 10 )  {^37^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P6_Replace_Expression]^if  ( digitChars[offset] - '0' )  {^37^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P9_Replace_Statement]^if  ( i < len )  {^37^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P9_Replace_Statement]^if  ( offset < length )  {^37^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  ( ++offset <= len )  {^39^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  ^  ( ++offset < len )  {^39^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  &&  ( ++offset < len )  {^39^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  <<  ( ++offset < len )  {^39^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  !=  ( ++offset < len )  {^39^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  ( ++offset > len )  {^39^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P5_Replace_Variable]^if  ( ++len < len )  {^39^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P6_Replace_Expression]^if  ( num * 10 + digitChars[offset] - '0' )  {^39^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P6_Replace_Expression]^if  ( num * 10 )  {^39^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P6_Replace_Expression]^if  ( digitChars[offset] - '0' )  {^39^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P9_Replace_Statement]^if  ( i < len )  {^39^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P9_Replace_Statement]^if  ( offset < length )  {^39^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  ( ++offset <= len )  {^41^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  ==  ( ++offset < len )  {^41^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  <  ( ++offset < len )  {^41^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  &  ( ++offset < len )  {^41^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  ( ++offset > len )  {^41^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P5_Replace_Variable]^if  ( ++offset < num )  {^41^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P5_Replace_Variable]^if  ( ++num < len )  {^41^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P6_Replace_Expression]^if  ( num * 10 + digitChars[offset] - '0' )  {^41^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P6_Replace_Expression]^if  ( num * 10 )  {^41^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P6_Replace_Expression]^if  ( digitChars[offset] - '0' )  {^41^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P9_Replace_Statement]^if  ( i < len )  {^41^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P9_Replace_Statement]^if  ( offset < length )  {^41^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  ( ++offset <= len )  {^43^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  ^  ( ++offset < len )  {^43^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  |  ( ++offset < len )  {^43^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  ( ++offset == len )  {^43^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  !=  ( ++offset < len )  {^43^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P5_Replace_Variable]^if  ( ++offset < num )  {^43^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P6_Replace_Expression]^if  ( num * 10 + digitChars[offset] - '0' )  {^43^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P6_Replace_Expression]^if  ( num * 10 )  {^43^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P6_Replace_Expression]^if  ( digitChars[offset] - '0' )  {^43^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P9_Replace_Statement]^if  ( i < len )  {^43^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P9_Replace_Statement]^if  ( offset < length )  {^43^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  ( ++offset <= len )  {^45^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  >>  ( ++offset < len )  {^45^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  |  ( ++offset < len )  {^45^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P5_Replace_Variable]^if  ( ++offset < offset )  {^45^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P5_Replace_Variable]^if  ( ++num < len )  {^45^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P6_Replace_Expression]^if  ( num * 10 + digitChars[offset] - '0' )  {^45^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P6_Replace_Expression]^if  ( num * 10 )  {^45^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P6_Replace_Expression]^if  ( digitChars[offset] - '0' )  {^45^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P9_Replace_Statement]^if  ( i < len )  {^45^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P9_Replace_Statement]^if  ( offset < length )  {^45^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P15_Unwrap_Block]^num = (num * 10) + ((digitChars[offset]) - '0'); if ((++offset) < len) {    num = (num * 10) + ((digitChars[offset]) - '0');};^45^46^47^48^49^29^58^if  ( ++offset < len )  { num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ; if  ( ++offset < len )  { num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ; }^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P16_Remove_Block]^^45^46^47^48^49^29^58^if  ( ++offset < len )  { num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ; if  ( ++offset < len )  { num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ; }^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P13_Insert_Block]^if  (  ( ++offset )  < len )  {     num =  ( num * 10 )  +  (  ( digitChars[offset] )  - '0' ) ;     if  (  ( ++offset )  < len )  {         num =  ( num * 10 )  +  (  ( digitChars[offset] )  - '0' ) ;         if  (  ( ++offset )  < len )  {             num =  ( num * 10 )  +  (  ( digitChars[offset] )  - '0' ) ;         }     } }^45^^^^^29^58^[Delete]^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  ( ++offset <= len )  {^47^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  >=  ( ++offset < len )  {^47^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P5_Replace_Variable]^if  ( ++offset < num )  {^47^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P5_Replace_Variable]^if  ( ++len < len )  {^47^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P6_Replace_Expression]^if  ( num * 10 + digitChars[offset] - '0' )  {^47^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P6_Replace_Expression]^if  ( num * 10 )  {^47^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P6_Replace_Expression]^if  ( digitChars[offset] - '0' )  {^47^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P9_Replace_Statement]^if  ( i < len )  {^47^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P9_Replace_Statement]^if  ( offset < length )  {^47^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P15_Unwrap_Block]^num = (num * 10) + ((digitChars[offset]) - '0');^47^48^49^^^29^58^if  ( ++offset < len )  { num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ; }^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P16_Remove_Block]^^47^48^49^^^29^58^if  ( ++offset < len )  { num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ; }^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  >  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num / 10 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  <<  '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P5_Replace_Variable]^num =  ( offset * 10 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 % 1 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P11_Insert_Donor_Statement]^num =  ( num * 10 )  +  ( c - '0' ) ;num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P13_Insert_Block]^if  (  ( ++offset )  < len )  {     num =  ( num * 10 )  +  (  ( digitChars[offset] )  - '0' ) ; }^48^^^^^29^58^[Delete]^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  <  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num / 10 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  &&  '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P3_Replace_Literal]^num =  ( num * num )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P5_Replace_Variable]^num =  ( len * 10 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 1 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P11_Insert_Donor_Statement]^num =  ( num * 10 )  +  ( c - '0' ) ;num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P13_Insert_Block]^if  (  ( ++offset )  < len )  {     num =  ( num * 10 )  +  (  ( digitChars[offset] )  - '0' ) ; }^46^^^^^29^58^[Delete]^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =   instanceof   ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num - 10 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  >=  '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P3_Replace_Literal]^num =  ( num * num )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 6 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  ==  ( ++offset < len )  {^47^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P5_Replace_Variable]^if  ( ++num < len )  {^47^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ^  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  >>  '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P3_Replace_Literal]^num =  ( num * offset )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P5_Replace_Variable]^num =  ( digitChars * 10 )  +  ( num[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 3 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  <=  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num - 10 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  <<  '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P3_Replace_Literal]^num =  ( num * num )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P5_Replace_Variable]^num =  ( len * 10 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P5_Replace_Variable]^num =  ( digitChars * 10 )  +  ( num[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 2 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P11_Insert_Donor_Statement]^num =  ( num * 10 )  +  ( c - '0' ) ;num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P13_Insert_Block]^if  (  ( ++offset )  < len )  {     num =  ( num * 10 )  +  (  ( digitChars[offset] )  - '0' ) ; }^44^^^^^29^58^[Delete]^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  <=  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  >=  '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P3_Replace_Literal]^num =  ( num *  )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P5_Replace_Variable]^num =  ( digitChars * 10 )  +  ( num[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 >> 0 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ||  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  |  '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P3_Replace_Literal]^num =  ( num * 17 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P5_Replace_Variable]^num =  ( len * 10 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 5 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  >=  ( ++offset < len )  {^45^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  ==  ( ++offset < len )  {^45^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P5_Replace_Variable]^if  ( ++offset < num )  {^45^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^if  ( ++len < len )  {^45^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P5_Replace_Variable]^if  ( ++offset < offset )  {^47^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  &  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  <  '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P3_Replace_Literal]^num =  ( num * len )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 1 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  >  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num - 10 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P3_Replace_Literal]^num =  ( num * 8 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P5_Replace_Variable]^num =  ( offset * 10 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 11 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  !=  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num + 10 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  <=  '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 + 4 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  ( ++offset > len )  {^47^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  <<  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 4 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  !=  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num / 10 )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  >=  '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P3_Replace_Literal]^num =  ( num * len )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P5_Replace_Variable]^num =  ( len * 10 )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 11 )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P11_Insert_Donor_Statement]^num =  ( num * 10 )  +  ( c - '0' ) ;num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P13_Insert_Block]^if  (  ( ++offset )  < len )  {     num =  ( num * 10 )  +  (  ( digitChars[offset] )  - '0' ) ; }^42^^^^^29^58^[Delete]^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  ^  '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 12 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 << 1 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  &&  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  !=  '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 2 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  <<  ( ++offset < len )  {^43^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P5_Replace_Variable]^if  ( ++offset < offset )  {^43^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P5_Replace_Variable]^if  ( ++num < len )  {^43^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  &&  ( ++offset < len )  {^45^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  ( ++offset > len )  {^45^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  >=  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  &  '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P3_Replace_Literal]^num =  ( num * 18 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10L )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  &&  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 4 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  ^  ( ++offset < len )  {^47^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P3_Replace_Literal]^num =  ( num *  )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  |  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num / 10 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  &&  '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P3_Replace_Literal]^num =  ( num * 18 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 >>> 3 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  &  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num + 10 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  <  '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P3_Replace_Literal]^num =  ( num * 7 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 3 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  &&  '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  ||  ( ++offset < len )  {^45^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  <=  ( ++offset < len )  {^47^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  <  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  ==  '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P3_Replace_Literal]^num =  ( num * 8 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  <<  '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  <=  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]   instanceof   '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  ^  '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  &&  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num + 10 )  +  ( digitChars[offset] - '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  <<  '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P3_Replace_Literal]^num =  ( num * offset )  +  ( digitChars[offset] - '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P5_Replace_Variable]^num =  ( offset * 10 )  +  ( digitChars[offset] - '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 8 )  +  ( digitChars[offset] - '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P11_Insert_Donor_Statement]^num =  ( num * 10 )  +  ( c - '0' ) ;num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P13_Insert_Block]^if  (  ( ++offset )  < len )  {     num =  ( num * 10 )  +  (  ( digitChars[offset] )  - '0' ) ; }^40^^^^^29^58^[Delete]^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  <  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num - 10 )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  &  '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P3_Replace_Literal]^num =  ( num * 14 )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P5_Replace_Variable]^num =  ( offset * 10 )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P5_Replace_Variable]^num =  ( digitChars * 10 )  +  ( num[offset] - '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 0 )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ||  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  <=  '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P3_Replace_Literal]^num =  ( num * 8 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 6 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  >=  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P3_Replace_Literal]^num =  ( num * offset )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  >=  ( ++offset < len )  {^41^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  ^  ( ++offset < len )  {^41^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  <  ( ++offset < len )  {^43^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  <=  ( ++offset < len )  {^45^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  !=  ( ++offset < len )  {^47^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ==  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 0 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ==  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P3_Replace_Literal]^num =  ( num * len )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 0 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P3_Replace_Literal]^num =  ( num * 13 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 >> 4 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  ||  ( ++offset < len )  {^47^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 9 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num + 10 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  <  '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P5_Replace_Variable]^num =  ( offset * 10 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 7 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  <=  '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 << 0 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  !=  ( ++offset < len )  {^45^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  >  '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 - 3 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =   instanceof   ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  ||  '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P3_Replace_Literal]^num =  ( num * 14 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 + 0 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  >>  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num + 10 )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]   instanceof   '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P3_Replace_Literal]^num =  ( num * offset )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 1 )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  >  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  ==  '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P3_Replace_Literal]^num =  ( num *  )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 4 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 >> 3 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  ||  ( ++offset < len )  {^43^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  >  ( ++offset < len )  {^45^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  ( ++offset == len )  {^47^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  |  ( ++offset < len )  {^47^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  >  '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 % 2 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  >=  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P3_Replace_Literal]^num =  ( num * len )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 3 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  >>  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  >>  '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 2 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P3_Replace_Literal]^num =  ( num * 7 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  <  ( ++offset < len )  {^45^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if   instanceof   ( ++offset < len )  {^47^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  >>  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ^  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P3_Replace_Literal]^num =  ( num * 16 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P3_Replace_Literal]^num =  ( num * 16 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 * 3 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  >  ( ++offset < len )  {^47^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ||  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^38^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num / 10 )  +  ( digitChars[offset] - '0' ) ;^38^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  |  '0' ) ;^38^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P3_Replace_Literal]^num =  ( num * 5 )  +  ( digitChars[offset] - '0' ) ;^38^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P5_Replace_Variable]^num =  ( len * 10 )  +  ( digitChars[offset] - '0' ) ;^38^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P5_Replace_Variable]^num =  ( digitChars * 10 )  +  ( num[offset] - '0' ) ;^38^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 + 1 )  +  ( digitChars[offset] - '0' ) ;^38^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P11_Insert_Donor_Statement]^num =  ( num * 10 )  +  ( c - '0' ) ;num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^38^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P13_Insert_Block]^if  (  ( ++offset )  < len )  {     num =  ( num * 10 )  +  (  ( digitChars[offset] )  - '0' ) ; }^38^^^^^29^58^[Delete]^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ||  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num - 10 )  +  ( digitChars[offset] - '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  &  '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P3_Replace_Literal]^num =  ( num * num )  +  ( digitChars[offset] - '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P5_Replace_Variable]^num =  ( len * 10 )  +  ( digitChars[offset] - '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10L )  +  ( digitChars[offset] - '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P3_Replace_Literal]^num =  ( num * num )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 8 )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ^  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10L )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  ==  '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P3_Replace_Literal]^num =  ( num * 15 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  &  ( ++offset < len )  {^39^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  ||  ( ++offset < len )  {^39^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  ( ++offset == len )  {^39^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P5_Replace_Variable]^if  ( ++offset < offset )  {^39^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  |  ( ++offset < len )  {^41^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  ( ++offset == len )  {^41^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  <=  ( ++offset < len )  {^41^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P5_Replace_Variable]^if  ( ++len < len )  {^41^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  ( ++offset > len )  {^43^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  ==  ( ++offset < len )  {^43^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  >  ( ++offset < len )  {^43^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]   instanceof   '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P3_Replace_Literal]^num =  ( num * 15 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 - 3 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  &  ( ++offset < len )  {^47^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  |  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  !=  '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P3_Replace_Literal]^num =  ( num * 13 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 >>> 2 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P3_Replace_Literal]^num =  ( num * 11 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  ( ++offset == len )  {^45^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  <<  ( ++offset < len )  {^45^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 + 2 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 * 3 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  ==  '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P3_Replace_Literal]^num =  ( num * offset )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 - 4 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  !=  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  |  '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  >=  ( ++offset < len )  {^43^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  ^  '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 9 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 << 0 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  &&  ( ++offset < len )  {^47^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  >  '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P3_Replace_Literal]^num =  ( num * 17 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 6 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  >>  ( ++offset < len )  {^47^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P3_Replace_Literal]^num =  ( num * 5 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10L )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 12 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  |  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  ||  '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P5_Replace_Variable]^num =  ( digitChars * 10 )  +  ( num[offset] - '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ^  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =   instanceof   ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  !=  '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  |  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 + 1 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  >>  ( ++offset < len )  {^41^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  ||  ( ++offset < len )  {^41^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  &  ( ++offset < len )  {^43^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P3_Replace_Literal]^num =  ( num * 19 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 >>> 4 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  <<  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 * 0 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  &  ( ++offset < len )  {^45^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  &&  '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P3_Replace_Literal]^num =  ( num * 7 )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 * 4 )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  <<  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P5_Replace_Variable]^if  ( ++len < len )  {^43^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  ^  ( ++offset < len )  {^45^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 * 2 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P3_Replace_Literal]^num =  ( num * 17 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 << 2 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  <  ( ++offset < len )  {^47^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  &  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]   instanceof   '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 + 4 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 >>> 3 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 % 4 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  <<  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^36^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num + 10 )  +  ( digitChars[offset] - '0' ) ;^36^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  &&  '0' ) ;^36^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P3_Replace_Literal]^num =  ( num * num )  +  ( digitChars[offset] - '0' ) ;^36^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P5_Replace_Variable]^num =  ( len * 10 )  +  ( digitChars[offset] - '0' ) ;^36^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10L )  +  ( digitChars[offset] - '0' ) ;^36^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P11_Insert_Donor_Statement]^num =  ( num * 10 )  +  ( c - '0' ) ;num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^36^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P13_Insert_Block]^if  (  ( ++offset )  < len )  {     num =  ( num * 10 )  +  (  ( digitChars[offset] )  - '0' ) ; }^36^^^^^29^58^[Delete]^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]   instanceof   '0' ) ;^38^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P3_Replace_Literal]^num =  ( num * len )  +  ( digitChars[offset] - '0' ) ;^38^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 % 0 )  +  ( digitChars[offset] - '0' ) ;^38^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  <<  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 6 )  +  ( digitChars[offset] - '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  &&  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10L )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 - 0 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  &&  ( ++offset < len )  {^37^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  ( ++offset == len )  {^37^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  <<  ( ++offset < len )  {^37^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  ^  ( ++offset < len )  {^37^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  |  ( ++offset < len )  {^37^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P5_Replace_Variable]^if  ( ++offset < offset )  {^37^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P5_Replace_Variable]^if  ( ++num < len )  {^37^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  >=  ( ++offset < len )  {^39^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if   instanceof   ( ++offset < len )  {^39^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  <=  ( ++offset < len )  {^39^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P5_Replace_Variable]^if  ( ++num < len )  {^39^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  >  ( ++offset < len )  {^41^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  !=  ( ++offset < len )  {^41^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  >>  ( ++offset < len )  {^43^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 - 2 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  |  '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 5 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P3_Replace_Literal]^num =  ( num * 14 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  <<  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P3_Replace_Literal]^num =  ( num * 4 )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 9 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  <=  ( ++offset < len )  {^43^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  <  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  &  '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P3_Replace_Literal]^num =  ( num * 14 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 / 0 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 - 4 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  >>  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num / 10 )  +  ( digitChars[offset] - '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  ==  '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P3_Replace_Literal]^num =  ( num * len )  +  ( digitChars[offset] - '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  >  '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 3 )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if   instanceof   ( ++offset < len )  {^41^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  <<  ( ++offset < len )  {^41^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P5_Replace_Variable]^if  ( ++offset < offset )  {^41^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if   instanceof   ( ++offset < len )  {^43^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  ||  '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ||  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  ||  '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 * 1 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  ^  '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P3_Replace_Literal]^num =  ( num * 5 )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P3_Replace_Literal]^num =  ( num * 1 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 - 1 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  <<  ( ++offset < len )  {^47^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 0 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 / 4 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 >> 0 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num + 10 )  +  ( digitChars[offset] - '0' ) ;^38^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  ==  '0' ) ;^38^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 + 4 )  +  ( digitChars[offset] - '0' ) ;^38^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ==  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 / 2 )  +  ( digitChars[offset] - '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  <<  '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P3_Replace_Literal]^num =  ( num *  )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 + 3 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 << 4 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  |  ( ++offset < len )  {^39^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  ==  ( ++offset < len )  {^39^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P5_Replace_Variable]^if  ( ++offset < num )  {^39^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  &&  ( ++offset < len )  {^43^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 >> 2 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 - 0 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P3_Replace_Literal]^num =  ( num * 19 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  >=  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  &&  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  >>  '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 - 2 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 << 4 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 * 2 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 - 0 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  >=  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 1 )  +  ( digitChars[offset] - '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ||  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 11 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  |  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P3_Replace_Literal]^num =  ( num * 12 )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 2 )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  >>  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 * 2 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 / 4 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if   instanceof   ( ++offset < len )  {^45^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 * 1 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  <<  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^34^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num + 10 )  +  ( digitChars[offset] - '0' ) ;^34^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  ||  '0' ) ;^34^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P3_Replace_Literal]^num =  ( num *  )  +  ( digitChars[offset] - '0' ) ;^34^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P5_Replace_Variable]^num =  ( len * 10 )  +  ( digitChars[offset] - '0' ) ;^34^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P5_Replace_Variable]^num =  ( digitChars * 10 )  +  ( num[offset] - '0' ) ;^34^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 3 )  +  ( digitChars[offset] - '0' ) ;^34^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P11_Insert_Donor_Statement]^num =  ( num * 10 )  +  ( c - '0' ) ;num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^34^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P13_Insert_Block]^if  (  ( ++offset )  < len )  {     num =  ( num * 10 )  +  (  ( digitChars[offset] )  - '0' ) ; }^34^^^^^29^58^[Delete]^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  <=  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^36^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num / 10 )  +  ( digitChars[offset] - '0' ) ;^36^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  <=  '0' ) ;^36^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P5_Replace_Variable]^num =  ( offset * 10 )  +  ( digitChars[offset] - '0' ) ;^36^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  |  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^38^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  <=  '0' ) ;^38^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P3_Replace_Literal]^num =  ( num * offset )  +  ( digitChars[offset] - '0' ) ;^38^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 << 3 )  +  ( digitChars[offset] - '0' ) ;^38^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  <=  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P3_Replace_Literal]^num =  ( num * 2 )  +  ( digitChars[offset] - '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 9 )  +  ( digitChars[offset] - '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P3_Replace_Literal]^num =  ( num * 16 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 / 4 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  ( ++offset > len )  {^35^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  >  ( ++offset < len )  {^35^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if   instanceof   ( ++offset < len )  {^35^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  ||  ( ++offset < len )  {^35^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P5_Replace_Variable]^if  ( ++offset < num )  {^35^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  &  ( ++offset < len )  {^37^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  ||  ( ++offset < len )  {^37^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  >  ( ++offset < len )  {^39^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  >>  ( ++offset < len )  {^39^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P3_Replace_Literal]^num =  ( num * 18 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  |  '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P3_Replace_Literal]^num =  ( num * 12 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 % 2 )  +  ( digitChars[offset] - '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  ||  '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 6 )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ==  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 - 1 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 >> 3 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 % 0 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 - 2 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  &  '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 / 1 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 / 0 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  &  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^38^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num - 10 )  +  ( digitChars[offset] - '0' ) ;^38^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  >>  '0' ) ;^38^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 4 )  +  ( digitChars[offset] - '0' ) ;^38^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ^  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 / 1 )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  &&  ( ++offset < len )  {^41^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  >=  '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 / 1 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 - 4 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  <  '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P3_Replace_Literal]^num =  ( num * 16 )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 / 2 )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 >>> 1 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  &&  '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 + 2 )  +  ( digitChars[offset] - '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P3_Replace_Literal]^num =  ( num * 19 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 * 4 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  >  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  >>  '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  >=  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^36^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num - 10 )  +  ( digitChars[offset] - '0' ) ;^36^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  &  '0' ) ;^36^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P3_Replace_Literal]^num =  ( num * 3 )  +  ( digitChars[offset] - '0' ) ;^36^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P5_Replace_Variable]^num =  ( digitChars * 10 )  +  ( num[offset] - '0' ) ;^36^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 0 )  +  ( digitChars[offset] - '0' ) ;^36^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =   instanceof   ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^38^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  &  '0' ) ;^38^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P3_Replace_Literal]^num =  ( num * num )  +  ( digitChars[offset] - '0' ) ;^38^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 % 1 )  +  ( digitChars[offset] - '0' ) ;^38^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  <  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P3_Replace_Literal]^num =  ( num * 17 )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  >  ( ++offset < len )  {^37^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^if  >=  ( ++offset < len )  {^37^^^^^29^58^if  ( ++offset < len )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  !=  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 / 1 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ==  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 + 2 )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 % 4 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 / 2 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  >  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 0 )  +  ( digitChars[offset] - '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 + 3 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 >>> 0 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  <<  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^38^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 + 3 )  +  ( digitChars[offset] - '0' ) ;^38^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  !=  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  |  '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P3_Replace_Literal]^num =  ( num * 5 )  +  ( digitChars[offset] - '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 << 1 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 << 2 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 * 0 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P3_Replace_Literal]^num =  ( num * 19 )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 * 0 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  >=  '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 3 )  +  ( digitChars[offset] - '0' ) ;^40^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P3_Replace_Literal]^num =  ( num * 18 )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 << 1 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 * 4 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 / 3 )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 << 3 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10 % 3 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =   instanceof   ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^34^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num - 10 )  +  ( digitChars[offset] - '0' ) ;^34^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  <  '0' ) ;^34^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P3_Replace_Literal]^num =  ( num * 13 )  +  ( digitChars[offset] - '0' ) ;^34^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 5 )  +  ( digitChars[offset] - '0' ) ;^34^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  !=  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^36^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( digitChars[offset]  |  '0' ) ;^36^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P3_Replace_Literal]^num =  ( num * 18 )  +  ( digitChars[offset] - '0' ) ;^36^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =  <  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^38^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P8_Replace_Mix]^num =  ( num * 10L )  +  ( digitChars[offset] - '0' ) ;^38^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P2_Replace_Operator]^num =   instanceof   ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P5_Replace_Variable]^return offset;^57^^^^^29^58^return num;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  boolean  long  L_BILLION  int  len  num  offset  char[]  digitChars  
[P1_Replace_Type]^int c = str.charAt ( 0 ) ;^70^^^^^55^85^char c = str.charAt ( 0 ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P3_Replace_Literal]^char c = str.charAt ( num ) ;^70^^^^^55^85^char c = str.charAt ( 0 ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P5_Replace_Variable]^char c = NASTY_SMALL_DOUBLE.charAt ( 0 ) ;^70^^^^^55^85^char c = str.charAt ( 0 ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P7_Replace_Invocation]^char c = str .trim (  )  ;^70^^^^^55^85^char c = str.charAt ( 0 ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P11_Insert_Donor_Statement]^char c = input.charAt ( 0 ) ;char c = str.charAt ( 0 ) ;^70^^^^^55^85^char c = str.charAt ( 0 ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P11_Insert_Donor_Statement]^char c = input.charAt ( i ) ;char c = str.charAt ( 0 ) ;^70^^^^^55^85^char c = str.charAt ( 0 ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P3_Replace_Literal]^char c = str.charAt ( offset ) ;^70^^^^^55^85^char c = str.charAt ( 0 ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P14_Delete_Statement]^^70^^^^^55^85^char c = str.charAt ( 0 ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P11_Insert_Donor_Statement]^c = str.charAt ( offset++ ) ;char c = str.charAt ( 0 ) ;^70^^^^^55^85^char c = str.charAt ( 0 ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P1_Replace_Type]^long  length = str.length (  ) ;^71^^^^^56^86^int length = str.length (  ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P3_Replace_Literal]^int length = str.length() + 8 ;^71^^^^^56^86^int length = str.length (  ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P7_Replace_Invocation]^int length = str.charAt (  ) ;^71^^^^^56^86^int length = str.length (  ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P8_Replace_Mix]^int length = NASTY_SMALL_DOUBLE.length (  ) ;^71^^^^^56^86^int length = str.length (  ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P11_Insert_Donor_Statement]^int actualLen = numberStr.length (  ) ;int length = str.length (  ) ;^71^^^^^56^86^int length = str.length (  ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P11_Insert_Donor_Statement]^int len = input.length (  ) ;int length = str.length (  ) ;^71^^^^^56^86^int length = str.length (  ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P11_Insert_Donor_Statement]^int cmpLen = cmpStr.length (  ) ;int length = str.length (  ) ;^71^^^^^56^86^int length = str.length (  ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P3_Replace_Literal]^int length = str.length() - 6 ;^71^^^^^56^86^int length = str.length (  ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P7_Replace_Invocation]^int length = str .substring ( offset )  ;^71^^^^^56^86^int length = str.length (  ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P14_Delete_Statement]^^71^^^^^56^86^int length = str.length (  ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P11_Insert_Donor_Statement]^len = input.length (  ) ;int length = str.length (  ) ;^71^^^^^56^86^int length = str.length (  ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P2_Replace_Operator]^boolean negative =  ( c != '-' ) ;^72^^^^^57^87^boolean negative =  ( c == '-' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P1_Replace_Type]^long  offset = 1;^73^^^^^58^88^int offset = 1;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P3_Replace_Literal]^int offset = 10;^73^^^^^58^88^int offset = 1;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P11_Insert_Donor_Statement]^int i = 0;int offset = 1;^73^^^^^58^88^int offset = 1;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P6_Replace_Expression]^if  ( length == 1 )  {^76^^^^^61^91^if  ( negative )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P6_Replace_Expression]^if  ( length > 10 )  {^76^^^^^61^91^if  ( negative )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P6_Replace_Expression]^if  ( length > 9 )  {^76^^^^^61^91^if  ( negative )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P15_Unwrap_Block]^if ((length == 1) || (length > 10)) {    return java.lang.Integer.parseInt(str);}; c = str.charAt((offset++));^76^77^78^79^^61^91^if  ( negative )  { if  ( length == 1 || length > 10 )  { return Integer.parseInt ( str ) ; }^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P16_Remove_Block]^^76^77^78^79^^61^91^if  ( negative )  { if  ( length == 1 || length > 10 )  { return Integer.parseInt ( str ) ; }^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P2_Replace_Operator]^if  ( length >= 9 )  {^82^^^^^76^85^if  ( length > 9 )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P3_Replace_Literal]^if  ( length > 5 )  {^82^^^^^76^85^if  ( length > 9 )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P5_Replace_Variable]^if  ( offset > 9 )  {^82^^^^^76^85^if  ( length > 9 )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P8_Replace_Mix]^if  ( length > 0  )  {^82^^^^^76^85^if  ( length > 9 )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P9_Replace_Statement]^if  ( length >= 9 )  {^82^^^^^76^85^if  ( length > 9 )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P9_Replace_Statement]^if  ( len == 0 )  {^82^^^^^76^85^if  ( length > 9 )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P15_Unwrap_Block]^return java.lang.Integer.parseInt(str);^82^83^84^^^76^85^if  ( length > 9 )  { return Integer.parseInt ( str ) ; }^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P16_Remove_Block]^^82^83^84^^^76^85^if  ( length > 9 )  { return Integer.parseInt ( str ) ; }^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P13_Insert_Block]^if  (  ( length == 1 )  ||  ( length > 10 )  )  {     return parseInt ( str ) ; }^82^^^^^76^85^[Delete]^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P13_Insert_Block]^if  ( length <= 9 )  {     return  (  ( long )   ( parseInt ( str )  )  ) ; }^82^^^^^76^85^[Delete]^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P13_Insert_Block]^if  (  ( c > '9' )  ||  ( c < '0' )  )  {     return parseInt ( str ) ; }^82^^^^^76^85^[Delete]^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P5_Replace_Variable]^return Integer.parseInt ( NASTY_SMALL_DOUBLE ) ;^83^^^^^76^85^return Integer.parseInt ( str ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P13_Insert_Block]^if  ( length > 9 )  {     return parseInt ( str ) ; }^83^^^^^76^85^[Delete]^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P13_Insert_Block]^if  (  ( c > '9' )  ||  ( c < '0' )  )  {     return parseInt ( str ) ; }^83^^^^^76^85^[Delete]^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P14_Delete_Statement]^^83^^^^^76^85^return Integer.parseInt ( str ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P2_Replace_Operator]^if  ( length == 1 && length > 10 )  {^77^^^^^62^92^if  ( length == 1 || length > 10 )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P2_Replace_Operator]^if  ( length >= 1 || length > 10 )  {^77^^^^^62^92^if  ( length == 1 || length > 10 )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P2_Replace_Operator]^if  ( length == 1 || length < 10 )  {^77^^^^^62^92^if  ( length == 1 || length > 10 )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P3_Replace_Literal]^if  ( length == length || length > length0 )  {^77^^^^^62^92^if  ( length == 1 || length > 10 )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P6_Replace_Expression]^if  ( length == 1 ) {^77^^^^^62^92^if  ( length == 1 || length > 10 )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P6_Replace_Expression]^if  (  length > 10 )  {^77^^^^^62^92^if  ( length == 1 || length > 10 )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P8_Replace_Mix]^if  ( length == 0  ) {^77^^^^^62^92^if  ( length == 1 || length > 10 )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P15_Unwrap_Block]^return java.lang.Integer.parseInt(str);^77^78^79^^^62^92^if  ( length == 1 || length > 10 )  { return Integer.parseInt ( str ) ; }^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P16_Remove_Block]^^77^78^79^^^62^92^if  ( length == 1 || length > 10 )  { return Integer.parseInt ( str ) ; }^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P13_Insert_Block]^if  ( length > 9 )  {     return parseInt ( str ) ; }^77^^^^^62^92^[Delete]^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P13_Insert_Block]^if  (  ( c > '9' )  ||  ( c < '0' )  )  {     return parseInt ( str ) ; }^77^^^^^62^92^[Delete]^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P5_Replace_Variable]^return Integer.parseInt ( NASTY_SMALL_DOUBLE ) ;^78^^^^^63^93^return Integer.parseInt ( str ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P13_Insert_Block]^if  ( length > 9 )  {     return parseInt ( str ) ; }^78^^^^^63^93^[Delete]^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P13_Insert_Block]^if  (  ( c > '9' )  ||  ( c < '0' )  )  {     return parseInt ( str ) ; }^78^^^^^63^93^[Delete]^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P14_Delete_Statement]^^78^^^^^63^93^return Integer.parseInt ( str ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P5_Replace_Variable]^c = NASTY_SMALL_DOUBLE.charAt ( offset++ ) ;^80^^^^^65^95^c = str.charAt ( offset++ ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P7_Replace_Invocation]^c = str.substring ( offset++ ) ;^80^^^^^65^95^c = str.charAt ( offset++ ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P7_Replace_Invocation]^c = str .trim (  )  ;^80^^^^^65^95^c = str.charAt ( offset++ ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P14_Delete_Statement]^^80^^^^^65^95^c = str.charAt ( offset++ ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P11_Insert_Donor_Statement]^char c = str.charAt ( 0 ) ;c = str.charAt ( offset++ ) ;^80^^^^^65^95^c = str.charAt ( offset++ ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P2_Replace_Operator]^if  ( length != 1 || length > 10 )  {^77^^^^^62^92^if  ( length == 1 || length > 10 )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P2_Replace_Operator]^if  ( length == 1 || length >= 10 )  {^77^^^^^62^92^if  ( length == 1 || length > 10 )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P3_Replace_Literal]^if  ( length == -7 || length > -70 )  {^77^^^^^62^92^if  ( length == 1 || length > 10 )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P3_Replace_Literal]^if  ( length == 1 || length > num )  {^77^^^^^62^92^if  ( length == 1 || length > 10 )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P5_Replace_Variable]^if  ( offset == 1 || length > 10 )  {^77^^^^^62^92^if  ( length == 1 || length > 10 )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P8_Replace_Mix]^if  ( offset == 0  ) {^77^^^^^62^92^if  ( length == 1 || length > 10 )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P2_Replace_Operator]^if  ( length >= 9 )  {^82^^^^^67^97^if  ( length > 9 )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P3_Replace_Literal]^if  ( length > offset )  {^82^^^^^67^97^if  ( length > 9 )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P5_Replace_Variable]^if  ( offset > 9 )  {^82^^^^^67^97^if  ( length > 9 )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P8_Replace_Mix]^if  ( length > 0  )  {^82^^^^^67^97^if  ( length > 9 )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P9_Replace_Statement]^if  ( length <= 9 )  {^82^^^^^67^97^if  ( length > 9 )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P9_Replace_Statement]^if  ( len == 0 )  {^82^^^^^67^97^if  ( length > 9 )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P15_Unwrap_Block]^return java.lang.Integer.parseInt(str);^82^83^84^^^67^97^if  ( length > 9 )  { return Integer.parseInt ( str ) ; }^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P16_Remove_Block]^^82^83^84^^^67^97^if  ( length > 9 )  { return Integer.parseInt ( str ) ; }^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P13_Insert_Block]^if  (  ( length == 1 )  ||  ( length > 10 )  )  {     return parseInt ( str ) ; }^82^^^^^67^97^[Delete]^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P13_Insert_Block]^if  ( length <= 9 )  {     return  (  ( long )   ( parseInt ( str )  )  ) ; }^82^^^^^67^97^[Delete]^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P13_Insert_Block]^if  (  ( c > '9' )  ||  ( c < '0' )  )  {     return parseInt ( str ) ; }^82^^^^^67^97^[Delete]^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P5_Replace_Variable]^return Integer.parseInt ( NASTY_SMALL_DOUBLE ) ;^83^^^^^68^98^return Integer.parseInt ( str ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P13_Insert_Block]^if  ( length > 9 )  {     return parseInt ( str ) ; }^83^^^^^68^98^[Delete]^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P13_Insert_Block]^if  (  ( c > '9' )  ||  ( c < '0' )  )  {     return parseInt ( str ) ; }^83^^^^^68^98^[Delete]^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P14_Delete_Statement]^^83^^^^^68^98^return Integer.parseInt ( str ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P8_Replace_Mix]^c = str.charAt ( offset ) ;^80^^^^^65^95^c = str.charAt ( offset++ ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P2_Replace_Operator]^if  ( c > '9' && c < '0' )  {^86^^^^^71^101^if  ( c > '9' || c < '0' )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P2_Replace_Operator]^if  ( c >= '9' || c < '0' )  {^86^^^^^71^101^if  ( c > '9' || c < '0' )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P2_Replace_Operator]^if  ( c > '9' || c <= '0' )  {^86^^^^^71^101^if  ( c > '9' || c < '0' )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P6_Replace_Expression]^if  ( c > '9' ) {^86^^^^^71^101^if  ( c > '9' || c < '0' )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P6_Replace_Expression]^if  (  c < '0' )  {^86^^^^^71^101^if  ( c > '9' || c < '0' )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P15_Unwrap_Block]^return java.lang.Integer.parseInt(str);^86^87^88^^^71^101^if  ( c > '9' || c < '0' )  { return Integer.parseInt ( str ) ; }^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P16_Remove_Block]^^86^87^88^^^71^101^if  ( c > '9' || c < '0' )  { return Integer.parseInt ( str ) ; }^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P13_Insert_Block]^if  (  ( length == 1 )  ||  ( length > 10 )  )  {     return parseInt ( str ) ; }^86^^^^^71^101^[Delete]^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P13_Insert_Block]^if  ( length > 9 )  {     return parseInt ( str ) ; }^86^^^^^71^101^[Delete]^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P5_Replace_Variable]^return Integer.parseInt ( NASTY_SMALL_DOUBLE ) ;^87^^^^^72^102^return Integer.parseInt ( str ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P13_Insert_Block]^if  ( length > 9 )  {     return parseInt ( str ) ; }^87^^^^^72^102^[Delete]^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P13_Insert_Block]^if  (  ( c > '9' )  ||  ( c < '0' )  )  {     return parseInt ( str ) ; }^87^^^^^72^102^[Delete]^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P14_Delete_Statement]^^87^^^^^72^102^return Integer.parseInt ( str ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P1_Replace_Type]^short  num = c - '0';^89^^^^^74^104^int num = c - '0';^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P2_Replace_Operator]^int num = c  <=  '0';^89^^^^^74^104^int num = c - '0';^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P11_Insert_Donor_Statement]^int num = digitChars[offset] - '0';int num = c - '0';^89^^^^^74^104^int num = c - '0';^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P2_Replace_Operator]^if  ( offset <= length )  {^90^^^^^75^105^if  ( offset < length )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P2_Replace_Operator]^if  ( offset == length )  {^90^^^^^75^105^if  ( offset < length )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P5_Replace_Variable]^if  ( length < length )  {^90^^^^^75^105^if  ( offset < length )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P5_Replace_Variable]^if  ( offset < offset )  {^90^^^^^75^105^if  ( offset < length )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P5_Replace_Variable]^if  ( length < offset )  {^90^^^^^75^105^if  ( offset < length )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P6_Replace_Expression]^if  ( c > '9' || c < '0' )  {^90^^^^^75^105^if  ( offset < length )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P6_Replace_Expression]^if  ( c > '9' )  {^90^^^^^75^105^if  ( offset < length )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P6_Replace_Expression]^if  ( c < '0' )  {^90^^^^^75^105^if  ( offset < length )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P6_Replace_Expression]^if  ( num * 10 + c - '0' )  {^90^^^^^75^105^if  ( offset < length )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P6_Replace_Expression]^if  ( num * 10 )  {^90^^^^^75^105^if  ( offset < length )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P6_Replace_Expression]^if  ( c - '0' )  {^90^^^^^75^105^if  ( offset < length )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P8_Replace_Mix]^if  ( offset < num )  {^90^^^^^75^105^if  ( offset < length )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P9_Replace_Statement]^if  ( i < len )  {^90^^^^^75^105^if  ( offset < length )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P9_Replace_Statement]^if  ( ++offset < len )  {^90^^^^^75^105^if  ( offset < length )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P15_Unwrap_Block]^c = str.charAt((offset++)); if ((c > '9') || (c < '0')) {    return java.lang.Integer.parseInt(str);}; num = (num * 10) + (c - '0'); if (offset < length) {    c = str.charAt((offset++));    if ((c > '9') || (c < '0')) {        return java.lang.Integer.parseInt(str);    }    num = (num * 10) + (c - '0');    if (offset < length) {        do {            c = str.charAt((offset++));            if ((c > '9') || (c < '0')) {                return java.lang.Integer.parseInt(str);            }            num = (num * 10) + (c - '0');        } while (offset < length );    }};^90^91^92^93^94^75^105^if  ( offset < length )  { c = str.charAt ( offset++ ) ; if  ( c > '9' || c < '0' )  { return Integer.parseInt ( str ) ; }^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P16_Remove_Block]^^90^91^92^93^94^75^105^if  ( offset < length )  { c = str.charAt ( offset++ ) ; if  ( c > '9' || c < '0' )  { return Integer.parseInt ( str ) ; }^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P2_Replace_Operator]^if  ( c > '9' && c < '0' )  {^92^^^^^77^107^if  ( c > '9' || c < '0' )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P2_Replace_Operator]^if  ( c >= '9' || c < '0' )  {^92^^^^^77^107^if  ( c > '9' || c < '0' )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P2_Replace_Operator]^if  ( c > '9' || c <= '0' )  {^92^^^^^77^107^if  ( c > '9' || c < '0' )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P6_Replace_Expression]^if  ( c > '9' ) {^92^^^^^77^107^if  ( c > '9' || c < '0' )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P6_Replace_Expression]^if  (  c < '0' )  {^92^^^^^77^107^if  ( c > '9' || c < '0' )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P15_Unwrap_Block]^return java.lang.Integer.parseInt(str);^92^93^94^^^77^107^if  ( c > '9' || c < '0' )  { return Integer.parseInt ( str ) ; }^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P16_Remove_Block]^^92^93^94^^^77^107^if  ( c > '9' || c < '0' )  { return Integer.parseInt ( str ) ; }^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P13_Insert_Block]^if  (  ( length == 1 )  ||  ( length > 10 )  )  {     return parseInt ( str ) ; }^92^^^^^77^107^[Delete]^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P13_Insert_Block]^if  ( length > 9 )  {     return parseInt ( str ) ; }^92^^^^^77^107^[Delete]^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P5_Replace_Variable]^return Integer.parseInt ( NASTY_SMALL_DOUBLE ) ;^93^^^^^78^108^return Integer.parseInt ( str ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P13_Insert_Block]^if  ( length > 9 )  {     return parseInt ( str ) ; }^93^^^^^78^108^[Delete]^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P13_Insert_Block]^if  (  ( c > '9' )  ||  ( c < '0' )  )  {     return parseInt ( str ) ; }^93^^^^^78^108^[Delete]^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P14_Delete_Statement]^^93^^^^^78^108^return Integer.parseInt ( str ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P2_Replace_Operator]^if  ( offset > length )  {^96^^^^^81^111^if  ( offset < length )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P2_Replace_Operator]^if  ( offset == length )  {^96^^^^^81^111^if  ( offset < length )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P2_Replace_Operator]^if  ( offset <= length )  {^96^^^^^81^111^if  ( offset < length )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P5_Replace_Variable]^if  ( offset < offset )  {^96^^^^^81^111^if  ( offset < length )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P6_Replace_Expression]^if  ( c > '9' || c < '0' )  {^96^^^^^81^111^if  ( offset < length )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P6_Replace_Expression]^if  ( c > '9' )  {^96^^^^^81^111^if  ( offset < length )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P6_Replace_Expression]^if  ( c < '0' )  {^96^^^^^81^111^if  ( offset < length )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P6_Replace_Expression]^if  ( num * 10 + c - '0' )  {^96^^^^^81^111^if  ( offset < length )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P6_Replace_Expression]^if  ( num * 10 )  {^96^^^^^81^111^if  ( offset < length )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P6_Replace_Expression]^if  ( c - '0' )  {^96^^^^^81^111^if  ( offset < length )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P8_Replace_Mix]^if  ( offset < num )  {^96^^^^^81^111^if  ( offset < length )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P9_Replace_Statement]^if  ( i < len )  {^96^^^^^81^111^if  ( offset < length )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P9_Replace_Statement]^if  ( ++offset < len )  {^96^^^^^81^111^if  ( offset < length )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P15_Unwrap_Block]^c = str.charAt((offset++)); if ((c > '9') || (c < '0')) {    return java.lang.Integer.parseInt(str);}; num = (num * 10) + (c - '0'); if (offset < length) {    do {        c = str.charAt((offset++));        if ((c > '9') || (c < '0')) {            return java.lang.Integer.parseInt(str);        }        num = (num * 10) + (c - '0');    } while (offset < length );};^96^97^98^99^100^81^111^if  ( offset < length )  { c = str.charAt ( offset++ ) ; if  ( c > '9' || c < '0' )  { return Integer.parseInt ( str ) ; }^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P16_Remove_Block]^^96^97^98^99^100^81^111^if  ( offset < length )  { c = str.charAt ( offset++ ) ; if  ( c > '9' || c < '0' )  { return Integer.parseInt ( str ) ; }^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P2_Replace_Operator]^if  ( c > '9' && c < '0' )  {^98^^^^^83^113^if  ( c > '9' || c < '0' )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P2_Replace_Operator]^if  ( c < '9' || c < '0' )  {^98^^^^^83^113^if  ( c > '9' || c < '0' )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P2_Replace_Operator]^if  ( c > '9' || c <= '0' )  {^98^^^^^83^113^if  ( c > '9' || c < '0' )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P6_Replace_Expression]^if  ( c > '9' ) {^98^^^^^83^113^if  ( c > '9' || c < '0' )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P6_Replace_Expression]^if  (  c < '0' )  {^98^^^^^83^113^if  ( c > '9' || c < '0' )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P15_Unwrap_Block]^return java.lang.Integer.parseInt(str);^98^99^100^^^83^113^if  ( c > '9' || c < '0' )  { return Integer.parseInt ( str ) ; }^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P16_Remove_Block]^^98^99^100^^^83^113^if  ( c > '9' || c < '0' )  { return Integer.parseInt ( str ) ; }^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P13_Insert_Block]^if  (  ( length == 1 )  ||  ( length > 10 )  )  {     return parseInt ( str ) ; }^98^^^^^83^113^[Delete]^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P13_Insert_Block]^if  ( length > 9 )  {     return parseInt ( str ) ; }^98^^^^^83^113^[Delete]^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P5_Replace_Variable]^return Integer.parseInt ( NASTY_SMALL_DOUBLE ) ;^99^^^^^84^114^return Integer.parseInt ( str ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P13_Insert_Block]^if  ( length > 9 )  {     return parseInt ( str ) ; }^99^^^^^84^114^[Delete]^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P13_Insert_Block]^if  (  ( c > '9' )  ||  ( c < '0' )  )  {     return parseInt ( str ) ; }^99^^^^^84^114^[Delete]^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P14_Delete_Statement]^^99^^^^^84^114^return Integer.parseInt ( str ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P2_Replace_Operator]^if  ( offset > length )  {^103^^^^^88^118^if  ( offset < length )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P2_Replace_Operator]^if  ( offset == length )  {^103^^^^^88^118^if  ( offset < length )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P2_Replace_Operator]^if  ( offset <= length )  {^103^^^^^88^118^if  ( offset < length )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P5_Replace_Variable]^if  ( num < length )  {^103^^^^^88^118^if  ( offset < length )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P5_Replace_Variable]^if  ( offset < num )  {^103^^^^^88^118^if  ( offset < length )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P5_Replace_Variable]^if  ( length < offset )  {^103^^^^^88^118^if  ( offset < length )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P6_Replace_Expression]^if  ( c > '9' || c < '0' )  {^103^^^^^88^118^if  ( offset < length )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P6_Replace_Expression]^if  ( c > '9' )  {^103^^^^^88^118^if  ( offset < length )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P6_Replace_Expression]^if  ( c < '0' )  {^103^^^^^88^118^if  ( offset < length )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P6_Replace_Expression]^if  ( num * 10 + c - '0' )  {^103^^^^^88^118^if  ( offset < length )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P6_Replace_Expression]^if  ( num * 10 )  {^103^^^^^88^118^if  ( offset < length )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P6_Replace_Expression]^if  ( c - '0' )  {^103^^^^^88^118^if  ( offset < length )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P9_Replace_Statement]^if  ( i < len )  {^103^^^^^88^118^if  ( offset < length )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P9_Replace_Statement]^if  ( ++offset < len )  {^103^^^^^88^118^if  ( offset < length )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P15_Unwrap_Block]^do {    c = str.charAt((offset++));    if ((c > '9') || (c < '0')) {        return java.lang.Integer.parseInt(str);    }    num = (num * 10) + (c - '0');} while (offset < length );^103^104^105^106^107^88^118^if  ( offset < length )  { do { c = str.charAt ( offset++ ) ; if  ( c > '9' || c < '0' )  { return Integer.parseInt ( str ) ; }^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P16_Remove_Block]^^103^104^105^106^107^88^118^if  ( offset < length )  { do { c = str.charAt ( offset++ ) ; if  ( c > '9' || c < '0' )  { return Integer.parseInt ( str ) ; }^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P2_Replace_Operator]^if  ( c > '9' && c < '0' )  {^106^^^^^91^121^if  ( c > '9' || c < '0' )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P2_Replace_Operator]^if  ( c == '9' || c < '0' )  {^106^^^^^91^121^if  ( c > '9' || c < '0' )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P2_Replace_Operator]^if  ( c > '9' || c <= '0' )  {^106^^^^^91^121^if  ( c > '9' || c < '0' )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P6_Replace_Expression]^if  ( c > '9' ) {^106^^^^^91^121^if  ( c > '9' || c < '0' )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P6_Replace_Expression]^if  (  c < '0' )  {^106^^^^^91^121^if  ( c > '9' || c < '0' )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P15_Unwrap_Block]^return java.lang.Integer.parseInt(str);^106^107^108^^^91^121^if  ( c > '9' || c < '0' )  { return Integer.parseInt ( str ) ; }^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P16_Remove_Block]^^106^107^108^^^91^121^if  ( c > '9' || c < '0' )  { return Integer.parseInt ( str ) ; }^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P13_Insert_Block]^if  (  ( length == 1 )  ||  ( length > 10 )  )  {     return parseInt ( str ) ; }^106^^^^^91^121^[Delete]^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P13_Insert_Block]^if  ( length > 9 )  {     return parseInt ( str ) ; }^106^^^^^91^121^[Delete]^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P5_Replace_Variable]^return Integer.parseInt ( NASTY_SMALL_DOUBLE ) ;^107^^^^^92^122^return Integer.parseInt ( str ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P13_Insert_Block]^if  ( length > 9 )  {     return parseInt ( str ) ; }^107^^^^^92^122^[Delete]^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P13_Insert_Block]^if  (  ( c > '9' )  ||  ( c < '0' )  )  {     return parseInt ( str ) ; }^107^^^^^92^122^[Delete]^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P14_Delete_Statement]^^107^^^^^92^122^return Integer.parseInt ( str ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P5_Replace_Variable]^c = str.charAt ( offset ) ;^105^^^^^90^120^c = str.charAt ( offset++ ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P7_Replace_Invocation]^c = str.substring ( offset++ ) ;^105^^^^^90^120^c = str.charAt ( offset++ ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P2_Replace_Operator]^num =  &&  ( num * 10 )  +  ( c - '0' ) ;^109^^^^^94^124^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P2_Replace_Operator]^num =  ( num / 10 )  +  ( c - '0' ) ;^109^^^^^94^124^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( c  ||  '0' ) ;^109^^^^^94^124^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P3_Replace_Literal]^num =  ( num * length )  +  ( c - '0' ) ;^109^^^^^94^124^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P5_Replace_Variable]^num =  ( offset * 10 )  +  ( c - '0' ) ;^109^^^^^94^124^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P5_Replace_Variable]^num =  ( c * 10 )  +  ( num - '0' ) ;^109^^^^^94^124^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P8_Replace_Mix]^num =  ( num * 9 )  +  ( c - '0' ) ;^109^^^^^94^124^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P11_Insert_Donor_Statement]^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;num =  ( num * 10 )  +  ( c - '0' ) ;^109^^^^^94^124^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P8_Replace_Mix]^c = str.charAt ( offset ) ;^105^^^^^90^120^c = str.charAt ( offset++ ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P14_Delete_Statement]^^105^^^^^90^120^c = str.charAt ( offset++ ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P11_Insert_Donor_Statement]^char c = str.charAt ( 0 ) ;c = str.charAt ( offset++ ) ;^105^^^^^90^120^c = str.charAt ( offset++ ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P5_Replace_Variable]^c = NASTY_SMALL_DOUBLE.charAt ( offset++ ) ;^97^^^^^82^112^c = str.charAt ( offset++ ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P7_Replace_Invocation]^c = str.substring ( offset++ ) ;^97^^^^^82^112^c = str.charAt ( offset++ ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P2_Replace_Operator]^num =  <<  ( num * 10 )  +  ( c - '0' ) ;^101^^^^^86^116^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P2_Replace_Operator]^num =  ( num + 10 )  +  ( c - '0' ) ;^101^^^^^86^116^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( c  ^  '0' ) ;^101^^^^^86^116^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P3_Replace_Literal]^num =  ( num * num )  +  ( c - '0' ) ;^101^^^^^86^116^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P5_Replace_Variable]^num =  ( offset * 10 )  +  ( c - '0' ) ;^101^^^^^86^116^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P5_Replace_Variable]^num =  ( c * 10 )  +  ( num - '0' ) ;^101^^^^^86^116^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P8_Replace_Mix]^num =  ( num * 9 )  +  ( c - '0' ) ;^101^^^^^86^116^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P11_Insert_Donor_Statement]^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;num =  ( num * 10 )  +  ( c - '0' ) ;^101^^^^^86^116^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P7_Replace_Invocation]^c = str .trim (  )  ;^105^^^^^90^120^c = str.charAt ( offset++ ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P2_Replace_Operator]^num =  &  ( num * 10 )  +  ( c - '0' ) ;^109^^^^^94^124^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P2_Replace_Operator]^num =  ( num + 10 )  +  ( c - '0' ) ;^109^^^^^94^124^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P3_Replace_Literal]^num =  ( num * 1 )  +  ( c - '0' ) ;^109^^^^^94^124^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P8_Replace_Mix]^num =  ( num * 5 )  +  ( c - '0' ) ;^109^^^^^94^124^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P7_Replace_Invocation]^c = str .trim (  )  ;^97^^^^^82^112^c = str.charAt ( offset++ ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P8_Replace_Mix]^c = NASTY_SMALL_DOUBLE.substring ( offset++ ) ;^97^^^^^82^112^c = str.charAt ( offset++ ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P14_Delete_Statement]^^97^^^^^82^112^c = str.charAt ( offset++ ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P11_Insert_Donor_Statement]^char c = str.charAt ( 0 ) ;c = str.charAt ( offset++ ) ;^97^^^^^82^112^c = str.charAt ( offset++ ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P2_Replace_Operator]^if  ( c >= '9' || c < '0' )  {^106^^^^^91^121^if  ( c > '9' || c < '0' )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P2_Replace_Operator]^if  ( c > '9' || c == '0' )  {^106^^^^^91^121^if  ( c > '9' || c < '0' )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P2_Replace_Operator]^num =   instanceof   ( num * 10 )  +  ( c - '0' ) ;^109^^^^^94^124^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( c   instanceof   '0' ) ;^109^^^^^94^124^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P3_Replace_Literal]^num =  ( num * 3 )  +  ( c - '0' ) ;^109^^^^^94^124^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P8_Replace_Mix]^num =  ( num * 10L )  +  ( c - '0' ) ;^109^^^^^94^124^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P8_Replace_Mix]^return Integer .parseInt ( null , length , num )  ;^107^^^^^92^122^return Integer.parseInt ( str ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P5_Replace_Variable]^c = NASTY_SMALL_DOUBLE.charAt ( offset++ ) ;^91^^^^^76^106^c = str.charAt ( offset++ ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P7_Replace_Invocation]^c = str.substring ( offset++ ) ;^91^^^^^76^106^c = str.charAt ( offset++ ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P7_Replace_Invocation]^c = str .trim (  )  ;^91^^^^^76^106^c = str.charAt ( offset++ ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P2_Replace_Operator]^num =  &&  ( num * 10 )  +  ( c - '0' ) ;^95^^^^^80^110^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P2_Replace_Operator]^num =  ( num - 10 )  +  ( c - '0' ) ;^95^^^^^80^110^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( c  |  '0' ) ;^95^^^^^80^110^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P3_Replace_Literal]^num =  ( num * num )  +  ( c - '0' ) ;^95^^^^^80^110^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P5_Replace_Variable]^num =  ( offset * 10 )  +  ( c - '0' ) ;^95^^^^^80^110^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P5_Replace_Variable]^num =  ( c * 10 )  +  ( num - '0' ) ;^95^^^^^80^110^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P8_Replace_Mix]^num =  ( num * 4 )  +  ( c - '0' ) ;^95^^^^^80^110^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P11_Insert_Donor_Statement]^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;num =  ( num * 10 )  +  ( c - '0' ) ;^95^^^^^80^110^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P2_Replace_Operator]^num =  ^  ( num * 10 )  +  ( c - '0' ) ;^101^^^^^86^116^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P2_Replace_Operator]^num =  ( num / 10 )  +  ( c - '0' ) ;^101^^^^^86^116^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P8_Replace_Mix]^num =  ( num * 0 )  +  ( c - '0' ) ;^101^^^^^86^116^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P2_Replace_Operator]^num =  ||  ( num * 10 )  +  ( c - '0' ) ;^109^^^^^94^124^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( c  >=  '0' ) ;^109^^^^^94^124^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P3_Replace_Literal]^num =  ( num * num )  +  ( c - '0' ) ;^109^^^^^94^124^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P8_Replace_Mix]^num =  ( num * 10 / 4 )  +  ( c - '0' ) ;^109^^^^^94^124^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P7_Replace_Invocation]^return Integer .parseInt ( 0 , offset , offset )  ;^93^^^^^78^108^return Integer.parseInt ( str ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P8_Replace_Mix]^c = NASTY_SMALL_DOUBLE .trim (  )  ;^91^^^^^76^106^c = str.charAt ( offset++ ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P14_Delete_Statement]^^91^^^^^76^106^c = str.charAt ( offset++ ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P11_Insert_Donor_Statement]^char c = str.charAt ( 0 ) ;c = str.charAt ( offset++ ) ;^91^^^^^76^106^c = str.charAt ( offset++ ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P5_Replace_Variable]^if  ( length < length )  {^96^^^^^81^111^if  ( offset < length )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P5_Replace_Variable]^if  ( length < offset )  {^96^^^^^81^111^if  ( offset < length )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P8_Replace_Mix]^if  ( num < length )  {^96^^^^^81^111^if  ( offset < length )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P2_Replace_Operator]^if  ( c >= '9' || c < '0' )  {^98^^^^^83^113^if  ( c > '9' || c < '0' )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P5_Replace_Variable]^if  ( length < length )  {^103^^^^^88^118^if  ( offset < length )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P2_Replace_Operator]^num =  |  ( num * 10 )  +  ( c - '0' ) ;^109^^^^^94^124^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( c  <  '0' ) ;^109^^^^^94^124^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P8_Replace_Mix]^c =  null.charAt ( offset++ ) ;^97^^^^^82^112^c = str.charAt ( offset++ ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P2_Replace_Operator]^num =   instanceof   ( num * 10 )  +  ( c - '0' ) ;^101^^^^^86^116^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( c  >  '0' ) ;^101^^^^^86^116^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P3_Replace_Literal]^num =  ( num *  )  +  ( c - '0' ) ;^101^^^^^86^116^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P8_Replace_Mix]^num =  ( num * 10 * 4 )  +  ( c - '0' ) ;^101^^^^^86^116^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( c  <=  '0' ) ;^109^^^^^94^124^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P5_Replace_Variable]^if  ( offset < offset )  {^103^^^^^88^118^if  ( offset < length )  {^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P3_Replace_Literal]^num =  ( num * offset )  +  ( c - '0' ) ;^109^^^^^94^124^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P2_Replace_Operator]^num =  >>  ( num * 10 )  +  ( c - '0' ) ;^95^^^^^80^110^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P2_Replace_Operator]^num =  ( num / 10 )  +  ( c - '0' ) ;^95^^^^^80^110^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( c  <=  '0' ) ;^95^^^^^80^110^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P3_Replace_Literal]^num =  ( num * 19 )  +  ( c - '0' ) ;^95^^^^^80^110^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P8_Replace_Mix]^num =  ( num * 10 - 3 )  +  ( c - '0' ) ;^95^^^^^80^110^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P2_Replace_Operator]^num =  ||  ( num * 10 )  +  ( c - '0' ) ;^101^^^^^86^116^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( c  ==  '0' ) ;^101^^^^^86^116^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P3_Replace_Literal]^num =  ( num * offset )  +  ( c - '0' ) ;^101^^^^^86^116^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P8_Replace_Mix]^num =  ( num * 7 )  +  ( c - '0' ) ;^101^^^^^86^116^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P2_Replace_Operator]^num =  ( num * 10 )  +  ( c  <<  '0' ) ;^109^^^^^94^124^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P8_Replace_Mix]^num =  ( num * 10 / 3 )  +  ( c - '0' ) ;^109^^^^^94^124^num =  ( num * 10 )  +  ( c - '0' ) ;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P5_Replace_Variable]^return negative ? -num : offset;^114^^^^^99^129^return negative ? -num : num;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P5_Replace_Variable]^return num ? -num : negative;^114^^^^^99^129^return negative ? -num : num;^[CLASS] NumberInput  [METHOD] parseInt [RETURN_TYPE] int   String str [VARIABLES] char  c  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  negative  long  L_BILLION  int  length  num  offset  
[P1_Replace_Type]^short  len1 = len-9;^120^^^^^117^123^int len1 = len-9;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  len  len1  offset  char[]  digitChars  
[P3_Replace_Literal]^int len1 = len-;^120^^^^^117^123^int len1 = len-9;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  len  len1  offset  char[]  digitChars  
[P5_Replace_Variable]^int offset1 = len-9;^120^^^^^117^123^int len1 = len-9;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  len  len1  offset  char[]  digitChars  
[P1_Replace_Type]^int  val = parseInt ( digitChars, offset, len1 )  * L_BILLION;^121^^^^^117^123^long val = parseInt ( digitChars, offset, len1 )  * L_BILLION;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  len  len1  offset  char[]  digitChars  
[P2_Replace_Operator]^long / val = parseInt ( digitChars, offset, len1 )  * L_BILLION;^121^^^^^117^123^long val = parseInt ( digitChars, offset, len1 )  * L_BILLION;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  len  len1  offset  char[]  digitChars  
[P5_Replace_Variable]^long val = parseInt ( digitChars, len1, len1 )  * L_BILLION;^121^^^^^117^123^long val = parseInt ( digitChars, offset, len1 )  * L_BILLION;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  len  len1  offset  char[]  digitChars  
[P5_Replace_Variable]^long val = parseInt ( digitChars, offset, offset )  * L_BILLION;^121^^^^^117^123^long val = parseInt ( digitChars, offset, len1 )  * L_BILLION;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  len  len1  offset  char[]  digitChars  
[P5_Replace_Variable]^long val = parseInt (  offset, len1 )  * L_BILLION;^121^^^^^117^123^long val = parseInt ( digitChars, offset, len1 )  * L_BILLION;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  len  len1  offset  char[]  digitChars  
[P5_Replace_Variable]^long val = parseInt ( digitChars,  len1 )  * L_BILLION;^121^^^^^117^123^long val = parseInt ( digitChars, offset, len1 )  * L_BILLION;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  len  len1  offset  char[]  digitChars  
[P5_Replace_Variable]^long val = parseInt ( digitChars, offset )  * L_BILLION;^121^^^^^117^123^long val = parseInt ( digitChars, offset, len1 )  * L_BILLION;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  len  len1  offset  char[]  digitChars  
[P5_Replace_Variable]^long val = parseInt ( len1, offset, digitChars )  * L_BILLION;^121^^^^^117^123^long val = parseInt ( digitChars, offset, len1 )  * L_BILLION;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  len  len1  offset  char[]  digitChars  
[P5_Replace_Variable]^long val = parseInt ( digitChars, len1, offset )  * L_BILLION;^121^^^^^117^123^long val = parseInt ( digitChars, offset, len1 )  * L_BILLION;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  len  len1  offset  char[]  digitChars  
[P5_Replace_Variable]^long val = parseInt ( digitChars, offset, L_BILLION )  * len1;^121^^^^^117^123^long val = parseInt ( digitChars, offset, len1 )  * L_BILLION;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  len  len1  offset  char[]  digitChars  
[P7_Replace_Invocation]^long val = parseLong ( digitChars, offset, len1 )  * L_BILLION;^121^^^^^117^123^long val = parseInt ( digitChars, offset, len1 )  * L_BILLION;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  len  len1  offset  char[]  digitChars  
[P8_Replace_Mix]^long val = parseLong ( digitChars, len1, len1 )  * L_BILLION;^121^^^^^117^123^long val = parseInt ( digitChars, offset, len1 )  * L_BILLION;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  len  len1  offset  char[]  digitChars  
[P5_Replace_Variable]^long val = parseInt ( digitChars, len, len1 )  * L_BILLION;^121^^^^^117^123^long val = parseInt ( digitChars, offset, len1 )  * L_BILLION;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  len  len1  offset  char[]  digitChars  
[P5_Replace_Variable]^long val = parseInt ( digitChars, offset, len )  * L_BILLION;^121^^^^^117^123^long val = parseInt ( digitChars, offset, len1 )  * L_BILLION;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  len  len1  offset  char[]  digitChars  
[P8_Replace_Mix]^long val = parseLong ( digitChars, offset, len )  * L_BILLION;^121^^^^^117^123^long val = parseInt ( digitChars, offset, len1 )  * L_BILLION;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  len  len1  offset  char[]  digitChars  
[P14_Delete_Statement]^^121^122^^^^117^123^long val = parseInt ( digitChars, offset, len1 )  * L_BILLION; return val +  ( long )  parseInt ( digitChars, offset+len1, 9 ) ;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  len  len1  offset  char[]  digitChars  
[P1_Replace_Type]^return val +  (  short  )  parseInt ( digitChars, offset+len1, 9 ) ;^122^^^^^117^123^return val +  ( long )  parseInt ( digitChars, offset+len1, 9 ) ;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  len  len1  offset  char[]  digitChars  
[P2_Replace_Operator]^return val +  <=  ( long )  parseInt ( digitChars, offset+len1, 9 ) ;^122^^^^^117^123^return val +  ( long )  parseInt ( digitChars, offset+len1, 9 ) ;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  len  len1  offset  char[]  digitChars  
[P2_Replace_Operator]^return val +   instanceof   ( long )  parseInt ( digitChars, offset+len1, 9 ) ;^122^^^^^117^123^return val +  ( long )  parseInt ( digitChars, offset+len1, 9 ) ;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  len  len1  offset  char[]  digitChars  
[P3_Replace_Literal]^return val +  ( long )  parseInt ( digitChars, offset+len1, 12 ) ;^122^^^^^117^123^return val +  ( long )  parseInt ( digitChars, offset+len1, 9 ) ;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  len  len1  offset  char[]  digitChars  
[P5_Replace_Variable]^return L_BILLION +  ( long )  parseInt ( digitChars, offset+len1, 9 ) ;^122^^^^^117^123^return val +  ( long )  parseInt ( digitChars, offset+len1, 9 ) ;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  len  len1  offset  char[]  digitChars  
[P5_Replace_Variable]^return val +  ( long )  parseInt ( digitChars, len+len1, 9 ) ;^122^^^^^117^123^return val +  ( long )  parseInt ( digitChars, offset+len1, 9 ) ;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  len  len1  offset  char[]  digitChars  
[P5_Replace_Variable]^return val +  ( long )  parseInt (  offset+len1, 9 ) ;^122^^^^^117^123^return val +  ( long )  parseInt ( digitChars, offset+len1, 9 ) ;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  len  len1  offset  char[]  digitChars  
[P5_Replace_Variable]^return val +  ( long )  parseInt ( digitChars+len1, 9 ) ;^122^^^^^117^123^return val +  ( long )  parseInt ( digitChars, offset+len1, 9 ) ;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  len  len1  offset  char[]  digitChars  
[P5_Replace_Variable]^return val +  ( long )  parseInt ( digitChars, offset+ 9 ) ;^122^^^^^117^123^return val +  ( long )  parseInt ( digitChars, offset+len1, 9 ) ;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  len  len1  offset  char[]  digitChars  
[P5_Replace_Variable]^return digitChars +  ( long )  parseInt ( val, offset+len1, 9 ) ;^122^^^^^117^123^return val +  ( long )  parseInt ( digitChars, offset+len1, 9 ) ;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  len  len1  offset  char[]  digitChars  
[P5_Replace_Variable]^return offset +  ( long )  parseInt ( digitChars, val+len1, 9 ) ;^122^^^^^117^123^return val +  ( long )  parseInt ( digitChars, offset+len1, 9 ) ;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  len  len1  offset  char[]  digitChars  
[P7_Replace_Invocation]^return val +  ( long )  inLongRange ( digitChars, offset+len1, 9 ) ;^122^^^^^117^123^return val +  ( long )  parseInt ( digitChars, offset+len1, 9 ) ;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  len  len1  offset  char[]  digitChars  
[P8_Replace_Mix]^return val +  ( long )  inLongRange ( digitChars, offset+len1, 0 ) ;^122^^^^^117^123^return val +  ( long )  parseInt ( digitChars, offset+len1, 9 ) ;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  len  len1  offset  char[]  digitChars  
[P1_Replace_Type]^return val +  (  int  )  parseInt ( digitChars, offset+len1, 9 ) ;^122^^^^^117^123^return val +  ( long )  parseInt ( digitChars, offset+len1, 9 ) ;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  len  len1  offset  char[]  digitChars  
[P2_Replace_Operator]^return val +  <<  ( long )  parseInt ( digitChars, offset+len1, 9 ) ;^122^^^^^117^123^return val +  ( long )  parseInt ( digitChars, offset+len1, 9 ) ;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  len  len1  offset  char[]  digitChars  
[P3_Replace_Literal]^return val +  ( long )  parseInt ( digitChars, offset+len1, len ) ;^122^^^^^117^123^return val +  ( long )  parseInt ( digitChars, offset+len1, 9 ) ;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  len  len1  offset  char[]  digitChars  
[P8_Replace_Mix]^return val +  ( long )  inLongRange ( digitChars, len1+len1, 9 ) ;^122^^^^^117^123^return val +  ( long )  parseInt ( digitChars, offset+len1, 9 ) ;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  len  len1  offset  char[]  digitChars  
[P14_Delete_Statement]^^122^^^^^117^123^return val +  ( long )  parseInt ( digitChars, offset+len1, 9 ) ;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   char[] digitChars int offset int len [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  len  len1  offset  char[]  digitChars  
[P1_Replace_Type]^short  length = str.length (  ) ;^130^^^^^125^136^int length = str.length (  ) ;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   String str [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  length  
[P3_Replace_Literal]^int length = str.length() - 9 ;^130^^^^^125^136^int length = str.length (  ) ;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   String str [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  length  
[P5_Replace_Variable]^int length = NASTY_SMALL_DOUBLE.length (  ) ;^130^^^^^125^136^int length = str.length (  ) ;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   String str [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  length  
[P7_Replace_Invocation]^int length = str.charAt (  ) ;^130^^^^^125^136^int length = str.length (  ) ;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   String str [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  length  
[P11_Insert_Donor_Statement]^int actualLen = numberStr.length (  ) ;int length = str.length (  ) ;^130^^^^^125^136^int length = str.length (  ) ;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   String str [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  length  
[P11_Insert_Donor_Statement]^int len = input.length (  ) ;int length = str.length (  ) ;^130^^^^^125^136^int length = str.length (  ) ;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   String str [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  length  
[P11_Insert_Donor_Statement]^int cmpLen = cmpStr.length (  ) ;int length = str.length (  ) ;^130^^^^^125^136^int length = str.length (  ) ;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   String str [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  length  
[P12_Insert_Condition]^if  ( length == 1 || length > 10 )  { int length = str.length (  ) ; }^130^^^^^125^136^int length = str.length (  ) ;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   String str [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  length  
[P3_Replace_Literal]^int length = str.length() - 6 ;^130^^^^^125^136^int length = str.length (  ) ;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   String str [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  length  
[P14_Delete_Statement]^^130^^^^^125^136^int length = str.length (  ) ;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   String str [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  length  
[P11_Insert_Donor_Statement]^len = input.length (  ) ;int length = str.length (  ) ;^130^^^^^125^136^int length = str.length (  ) ;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   String str [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  length  
[P2_Replace_Operator]^if  ( length == 9 )  {^131^^^^^125^136^if  ( length <= 9 )  {^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   String str [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  length  
[P3_Replace_Literal]^if  ( length <= 17 )  {^131^^^^^125^136^if  ( length <= 9 )  {^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   String str [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  length  
[P8_Replace_Mix]^if  ( length <= 0  )  {^131^^^^^125^136^if  ( length <= 9 )  {^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   String str [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  length  
[P9_Replace_Statement]^if  ( len == 0 )  {^131^^^^^125^136^if  ( length <= 9 )  {^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   String str [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  length  
[P9_Replace_Statement]^if  ( length > 9 )  {^131^^^^^125^136^if  ( length <= 9 )  {^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   String str [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  length  
[P15_Unwrap_Block]^return ((long) (com.fasterxml.jackson.core.io.NumberInput.parseInt(str)));^131^132^133^^^125^136^if  ( length <= 9 )  { return  ( long )  parseInt ( str ) ; }^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   String str [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  length  
[P16_Remove_Block]^^131^132^133^^^125^136^if  ( length <= 9 )  { return  ( long )  parseInt ( str ) ; }^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   String str [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  length  
[P13_Insert_Block]^if  ( length > 9 )  {     return parseInt ( str ) ; }^131^^^^^125^136^[Delete]^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   String str [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  length  
[P1_Replace_Type]^return  (  int  )  parseInt ( str ) ;^132^^^^^125^136^return  ( long )  parseInt ( str ) ;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   String str [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  length  
[P5_Replace_Variable]^return  ( long )  parseInt ( NASTY_SMALL_DOUBLE ) ;^132^^^^^125^136^return  ( long )  parseInt ( str ) ;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   String str [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  length  
[P7_Replace_Invocation]^return  ( long )  parseLong ( str ) ;^132^^^^^125^136^return  ( long )  parseInt ( str ) ;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   String str [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  length  
[P13_Insert_Block]^if  ( length <= 9 )  {     return  (  ( long )   ( parseInt ( str )  )  ) ; }^132^^^^^125^136^[Delete]^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   String str [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  length  
[P14_Delete_Statement]^^132^^^^^125^136^return  ( long )  parseInt ( str ) ;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   String str [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  length  
[P1_Replace_Type]^return  (  short  )  parseInt ( str ) ;^132^^^^^125^136^return  ( long )  parseInt ( str ) ;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   String str [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  length  
[P5_Replace_Variable]^return Long.parseLong ( NASTY_SMALL_DOUBLE ) ;^135^^^^^125^136^return Long.parseLong ( str ) ;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   String str [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  length  
[P14_Delete_Statement]^^135^^^^^125^136^return Long.parseLong ( str ) ;^[CLASS] NumberInput  [METHOD] parseLong [RETURN_TYPE] long   String str [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  boolean  long  L_BILLION  val  int  length  
[P1_Replace_Type]^char cmpStr = negative ? MIN_LONG_STR_NO_SIGN : MAX_LONG_STR;^150^^^^^147^162^String cmpStr = negative ? MIN_LONG_STR_NO_SIGN : MAX_LONG_STR;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P5_Replace_Variable]^String cmpStr = negative ? str : MAX_LONG_STR;^150^^^^^147^162^String cmpStr = negative ? MIN_LONG_STR_NO_SIGN : MAX_LONG_STR;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P5_Replace_Variable]^String cmpStr = negative ? MIN_LONG_STR_NO_SIGN : str;^150^^^^^147^162^String cmpStr = negative ? MIN_LONG_STR_NO_SIGN : MAX_LONG_STR;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P5_Replace_Variable]^String cmpStr = MAX_LONG_STR ? MIN_LONG_STR_NO_SIGN : negative;^150^^^^^147^162^String cmpStr = negative ? MIN_LONG_STR_NO_SIGN : MAX_LONG_STR;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P5_Replace_Variable]^String cmpStr = MIN_LONG_STR_NO_SIGN ? negative : MAX_LONG_STR;^150^^^^^147^162^String cmpStr = negative ? MIN_LONG_STR_NO_SIGN : MAX_LONG_STR;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P5_Replace_Variable]^String cmpStr = negative ? MAX_LONG_STR : MIN_LONG_STR_NO_SIGN;^150^^^^^147^162^String cmpStr = negative ? MIN_LONG_STR_NO_SIGN : MAX_LONG_STR;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P6_Replace_Expression]^String cmpStr  =  MAX_LONG_STR;^150^^^^^147^162^String cmpStr = negative ? MIN_LONG_STR_NO_SIGN : MAX_LONG_STR;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P6_Replace_Expression]^String cmpStr  =  MIN_LONG_STR_NO_SIGN ;^150^^^^^147^162^String cmpStr = negative ? MIN_LONG_STR_NO_SIGN : MAX_LONG_STR;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P1_Replace_Type]^short  cmpLen = cmpStr.length (  ) ;^151^^^^^147^162^int cmpLen = cmpStr.length (  ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P3_Replace_Literal]^int cmpLen = cmpStr.length() + 5 ;^151^^^^^147^162^int cmpLen = cmpStr.length (  ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P7_Replace_Invocation]^int cmpLen = cmpStr.charAt (  ) ;^151^^^^^147^162^int cmpLen = cmpStr.length (  ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P8_Replace_Mix]^int cmpLen = NASTY_SMALL_DOUBLE.length (  ) ;^151^^^^^147^162^int cmpLen = cmpStr.length (  ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P11_Insert_Donor_Statement]^int actualLen = numberStr.length (  ) ;int cmpLen = cmpStr.length (  ) ;^151^^^^^147^162^int cmpLen = cmpStr.length (  ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P11_Insert_Donor_Statement]^int len = input.length (  ) ;int cmpLen = cmpStr.length (  ) ;^151^^^^^147^162^int cmpLen = cmpStr.length (  ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P11_Insert_Donor_Statement]^int length = str.length (  ) ;int cmpLen = cmpStr.length (  ) ;^151^^^^^147^162^int cmpLen = cmpStr.length (  ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P5_Replace_Variable]^int cmpLen = str.length (  ) ;^151^^^^^147^162^int cmpLen = cmpStr.length (  ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P14_Delete_Statement]^^151^152^^^^147^162^int cmpLen = cmpStr.length (  ) ; if  ( len < cmpLen )  return true;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P11_Insert_Donor_Statement]^len = input.length (  ) ;int cmpLen = cmpStr.length (  ) ;^151^^^^^147^162^int cmpLen = cmpStr.length (  ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P2_Replace_Operator]^if  ( len <= cmpLen )  return true;^152^^^^^147^162^if  ( len < cmpLen )  return true;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P3_Replace_Literal]^if  ( len < cmpLen )  return false;^152^^^^^147^162^if  ( len < cmpLen )  return true;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P5_Replace_Variable]^if  ( offset < cmpLen )  return true;^152^^^^^147^162^if  ( len < cmpLen )  return true;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P5_Replace_Variable]^if  ( len < offset )  return true;^152^^^^^147^162^if  ( len < cmpLen )  return true;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P5_Replace_Variable]^if  ( cmpLen < len )  return true;^152^^^^^147^162^if  ( len < cmpLen )  return true;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P8_Replace_Mix]^if  ( offset < cmpLen )  return false;^152^^^^^147^162^if  ( len < cmpLen )  return true;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P2_Replace_Operator]^if  ( len < cmpLen )  return false;^153^^^^^147^162^if  ( len > cmpLen )  return false;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P3_Replace_Literal]^if  ( len > cmpLen )  return true;^153^^^^^147^162^if  ( len > cmpLen )  return false;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P5_Replace_Variable]^if  ( len > offset )  return false;^153^^^^^147^162^if  ( len > cmpLen )  return false;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P5_Replace_Variable]^if  ( cmpLen > len )  return false;^153^^^^^147^162^if  ( len > cmpLen )  return false;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P2_Replace_Operator]^if  ( diff <= 0 )  {^157^^^^^147^162^if  ( diff != 0 )  {^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P3_Replace_Literal]^if  ( diff != 2 )  {^157^^^^^147^162^if  ( diff != 0 )  {^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P3_Replace_Literal]^if  ( diff != 7 )  {^157^^^^^147^162^if  ( diff != 0 )  {^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P5_Replace_Variable]^if  ( offset != 0 )  {^157^^^^^147^162^if  ( diff != 0 )  {^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P6_Replace_Expression]^if  ( diff < 0 )  {^157^^^^^147^162^if  ( diff != 0 )  {^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P8_Replace_Mix]^if  ( offset != 0L )  {^157^^^^^147^162^if  ( diff != 0 )  {^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P9_Replace_Statement]^if  ( len == 0 )  {^157^^^^^147^162^if  ( diff != 0 )  {^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P15_Unwrap_Block]^return diff < 0;^157^158^159^^^147^162^if  ( diff != 0 )  { return  ( diff < 0 ) ; }^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P16_Remove_Block]^^157^158^159^^^147^162^if  ( diff != 0 )  { return  ( diff < 0 ) ; }^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P13_Insert_Block]^if  ( len == 0 )  {     return defaultValue; }^157^^^^^147^162^[Delete]^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P13_Insert_Block]^if  ( input == null )  {     return defaultValue; }^157^^^^^147^162^[Delete]^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P2_Replace_Operator]^return  ( diff <= 0 ) ;^158^^^^^147^162^return  ( diff < 0 ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P3_Replace_Literal]^return  ( diff < 4 ) ;^158^^^^^147^162^return  ( diff < 0 ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P5_Replace_Variable]^return  ( offset < 0 ) ;^158^^^^^147^162^return  ( diff < 0 ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P8_Replace_Mix]^return false ;^158^^^^^147^162^return  ( diff < 0 ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P12_Insert_Condition]^if  ( diff != 0 )  { return  ( diff < 0 ) ; }^158^^^^^147^162^return  ( diff < 0 ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P1_Replace_Type]^for  (  short  i = 0; i < cmpLen; ++i )  {^155^^^^^147^162^for  ( int i = 0; i < cmpLen; ++i )  {^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P2_Replace_Operator]^for  ( int i = 0; i > cmpLen; ++i )  {^155^^^^^147^162^for  ( int i = 0; i < cmpLen; ++i )  {^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P2_Replace_Operator]^for  |  ( int i = 0; i < cmpLen; ++i )  {^155^^^^^147^162^for  ( int i = 0; i < cmpLen; ++i )  {^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P3_Replace_Literal]^for  ( int i = 2; i < cmpLen; ++i )  {^155^^^^^147^162^for  ( int i = 0; i < cmpLen; ++i )  {^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P3_Replace_Literal]^for  ( int i = offset; i < cmpLen; ++i )  {^155^^^^^147^162^for  ( int i = 0; i < cmpLen; ++i )  {^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P3_Replace_Literal]^for  ( int i = -3; i < cmpLen; ++i )  {^155^^^^^147^162^for  ( int i = 0; i < cmpLen; ++i )  {^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P5_Replace_Variable]^for  ( offsetnt i = 0; i < cmpLen; ++i )  {^155^^^^^147^162^for  ( int i = 0; i < cmpLen; ++i )  {^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P5_Replace_Variable]^for  ( int i = 0; i < offset; ++i )  {^155^^^^^147^162^for  ( int i = 0; i < cmpLen; ++i )  {^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P5_Replace_Variable]^for  ( cmpLennt i = 0; i < i; ++i )  {^155^^^^^147^162^for  ( int i = 0; i < cmpLen; ++i )  {^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P3_Replace_Literal]^if  ( diff != offset )  {^157^^^^^147^162^if  ( diff != 0 )  {^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P3_Replace_Literal]^if  ( diff != -4 )  {^157^^^^^147^162^if  ( diff != 0 )  {^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P8_Replace_Mix]^if  ( diff != 4 )  {^157^^^^^147^162^if  ( diff != 0 )  {^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P3_Replace_Literal]^return  ( diff <  ) ;^158^^^^^147^162^return  ( diff < 0 ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P8_Replace_Mix]^return  ( diff  ;^158^^^^^147^162^return  ( diff < 0 ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P3_Replace_Literal]^return  ( diff < offset ) ;^158^^^^^147^162^return  ( diff < 0 ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P8_Replace_Mix]^return  ( diff  !=  0 ) ;;^158^^^^^147^162^return  ( diff < 0 ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P1_Replace_Type]^short  diff = digitChars[offset+i] - cmpStr.charAt ( i ) ;^156^^^^^147^162^int diff = digitChars[offset+i] - cmpStr.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P2_Replace_Operator]^int diff = digitChars[offset+i]  +  cmpStr.charAt ( i ) ;^156^^^^^147^162^int diff = digitChars[offset+i] - cmpStr.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P2_Replace_Operator]^int diff = digitChars[offset+i]  -  cmpStr.charAt ( i++ ) ;^156^^^^^147^162^int diff = digitChars[offset+i] - cmpStr.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P2_Replace_Operator]^int diff = digitChars[offset+i]  -  cmpStr.charAt ( i-- ) ;^156^^^^^147^162^int diff = digitChars[offset+i] - cmpStr.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P2_Replace_Operator]^int diff = digitChars[offset+i++]  -  cmpStr.charAt ( i ) ;^156^^^^^147^162^int diff = digitChars[offset+i] - cmpStr.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P5_Replace_Variable]^int diff = digitChars[offset+i] - cmpStr.charAt ( offset ) ;^156^^^^^147^162^int diff = digitChars[offset+i] - cmpStr.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P5_Replace_Variable]^int diff = digitChars[offset+i] - str.charAt ( i ) ;^156^^^^^147^162^int diff = digitChars[offset+i] - cmpStr.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P5_Replace_Variable]^int diff = cmpStr[offset+i] - digitChars.charAt ( i ) ;^156^^^^^147^162^int diff = digitChars[offset+i] - cmpStr.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P7_Replace_Invocation]^int diff = digitChars[offset+i] - cmpStr .trim (  )  ;^156^^^^^147^162^int diff = digitChars[offset+i] - cmpStr.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P5_Replace_Variable]^int diff = digitChars[offset+i] - NASTY_SMALL_DOUBLE.charAt ( i ) ;^156^^^^^147^162^int diff = digitChars[offset+i] - cmpStr.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P14_Delete_Statement]^^156^157^158^159^^147^162^int diff = digitChars[offset+i] - cmpStr.charAt ( i ) ; if  ( diff != 0 )  { return  ( diff < 0 ) ; }^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P2_Replace_Operator]^return  ( diff > 0 ) ;^158^^^^^147^162^return  ( diff < 0 ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P3_Replace_Literal]^return  ( diff < cmpLen ) ;^158^^^^^147^162^return  ( diff < 0 ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P8_Replace_Mix]^return  ( len  !=  0 ) ;;^158^^^^^147^162^return  ( diff < 0 ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P3_Replace_Literal]^for  ( int i = -7; i < cmpLen; ++i )  {^155^^^^^147^162^for  ( int i = 0; i < cmpLen; ++i )  {^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P2_Replace_Operator]^int diff = digitChars[offset+i]  &  cmpStr.charAt ( i ) ;^156^^^^^147^162^int diff = digitChars[offset+i] - cmpStr.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P8_Replace_Mix]^int diff = digitChars[offset+i] - cmpStr.charAt ( len ) ;^156^^^^^147^162^int diff = digitChars[offset+i] - cmpStr.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P3_Replace_Literal]^return false;^161^^^^^147^162^return true;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   char[] digitChars int offset int len boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  boolean  negative  long  L_BILLION  val  int  cmpLen  diff  i  len  offset  char[]  digitChars  
[P1_Replace_Type]^char cmpStr = negative ? MIN_LONG_STR_NO_SIGN : MAX_LONG_STR;^173^^^^^171^187^String cmpStr = negative ? MIN_LONG_STR_NO_SIGN : MAX_LONG_STR;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P5_Replace_Variable]^String cmpStr = negative ? str : MAX_LONG_STR;^173^^^^^171^187^String cmpStr = negative ? MIN_LONG_STR_NO_SIGN : MAX_LONG_STR;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P5_Replace_Variable]^String cmpStr = negative ? MIN_LONG_STR_NO_SIGN : str;^173^^^^^171^187^String cmpStr = negative ? MIN_LONG_STR_NO_SIGN : MAX_LONG_STR;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P5_Replace_Variable]^String cmpStr = MIN_LONG_STR_NO_SIGN ? negative : MAX_LONG_STR;^173^^^^^171^187^String cmpStr = negative ? MIN_LONG_STR_NO_SIGN : MAX_LONG_STR;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P5_Replace_Variable]^String cmpStr = negative ? MAX_LONG_STR : MIN_LONG_STR_NO_SIGN;^173^^^^^171^187^String cmpStr = negative ? MIN_LONG_STR_NO_SIGN : MAX_LONG_STR;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P5_Replace_Variable]^String cmpStr = MAX_LONG_STR ? MIN_LONG_STR_NO_SIGN : negative;^173^^^^^171^187^String cmpStr = negative ? MIN_LONG_STR_NO_SIGN : MAX_LONG_STR;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P6_Replace_Expression]^String cmpStr  =  MAX_LONG_STR;^173^^^^^171^187^String cmpStr = negative ? MIN_LONG_STR_NO_SIGN : MAX_LONG_STR;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P6_Replace_Expression]^String cmpStr  =  MIN_LONG_STR_NO_SIGN ;^173^^^^^171^187^String cmpStr = negative ? MIN_LONG_STR_NO_SIGN : MAX_LONG_STR;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P1_Replace_Type]^short  cmpLen = cmpStr.length (  ) ;^174^^^^^171^187^int cmpLen = cmpStr.length (  ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P3_Replace_Literal]^int cmpLen = cmpStr.length() + 1 ;^174^^^^^171^187^int cmpLen = cmpStr.length (  ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P5_Replace_Variable]^int cmpLen = str.length (  ) ;^174^^^^^171^187^int cmpLen = cmpStr.length (  ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P7_Replace_Invocation]^int cmpLen = cmpStr.charAt (  ) ;^174^^^^^171^187^int cmpLen = cmpStr.length (  ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P11_Insert_Donor_Statement]^int actualLen = numberStr.length (  ) ;int cmpLen = cmpStr.length (  ) ;^174^^^^^171^187^int cmpLen = cmpStr.length (  ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P11_Insert_Donor_Statement]^int len = input.length (  ) ;int cmpLen = cmpStr.length (  ) ;^174^^^^^171^187^int cmpLen = cmpStr.length (  ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P11_Insert_Donor_Statement]^int length = str.length (  ) ;int cmpLen = cmpStr.length (  ) ;^174^^^^^171^187^int cmpLen = cmpStr.length (  ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P3_Replace_Literal]^int cmpLen = cmpStr.length() + 0 ;^174^^^^^171^187^int cmpLen = cmpStr.length (  ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P7_Replace_Invocation]^int cmpLen = cmpStr .substring ( cmpLen )  ;^174^^^^^171^187^int cmpLen = cmpStr.length (  ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P14_Delete_Statement]^^174^^^^^171^187^int cmpLen = cmpStr.length (  ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P11_Insert_Donor_Statement]^len = input.length (  ) ;int cmpLen = cmpStr.length (  ) ;^174^^^^^171^187^int cmpLen = cmpStr.length (  ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P1_Replace_Type]^short  actualLen = numberStr.length (  ) ;^175^^^^^171^187^int actualLen = numberStr.length (  ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P3_Replace_Literal]^int actualLen = numberStr.length() + 8 ;^175^^^^^171^187^int actualLen = numberStr.length (  ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P7_Replace_Invocation]^int actualLen = numberStr.charAt (  ) ;^175^^^^^171^187^int actualLen = numberStr.length (  ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P8_Replace_Mix]^int actualLen = str.length (  ) ;^175^^^^^171^187^int actualLen = numberStr.length (  ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P11_Insert_Donor_Statement]^int len = input.length (  ) ;int actualLen = numberStr.length (  ) ;^175^^^^^171^187^int actualLen = numberStr.length (  ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P11_Insert_Donor_Statement]^int length = str.length (  ) ;int actualLen = numberStr.length (  ) ;^175^^^^^171^187^int actualLen = numberStr.length (  ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P11_Insert_Donor_Statement]^int cmpLen = cmpStr.length (  ) ;int actualLen = numberStr.length (  ) ;^175^^^^^171^187^int actualLen = numberStr.length (  ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P3_Replace_Literal]^int actualLen = numberStr.length() + 9 ;^175^^^^^171^187^int actualLen = numberStr.length (  ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P14_Delete_Statement]^^175^^^^^171^187^int actualLen = numberStr.length (  ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P11_Insert_Donor_Statement]^len = input.length (  ) ;int actualLen = numberStr.length (  ) ;^175^^^^^171^187^int actualLen = numberStr.length (  ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P2_Replace_Operator]^if  ( actualLen == cmpLen )  return true;^176^^^^^171^187^if  ( actualLen < cmpLen )  return true;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P3_Replace_Literal]^if  ( actualLen < cmpLen )  return false;^176^^^^^171^187^if  ( actualLen < cmpLen )  return true;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P5_Replace_Variable]^if  ( i < cmpLen )  return true;^176^^^^^171^187^if  ( actualLen < cmpLen )  return true;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P5_Replace_Variable]^if  ( actualLen < i )  return true;^176^^^^^171^187^if  ( actualLen < cmpLen )  return true;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P5_Replace_Variable]^if  ( cmpLen < actualLen )  return true;^176^^^^^171^187^if  ( actualLen < cmpLen )  return true;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P8_Replace_Mix]^if  ( actualLen < i )  return false;^176^^^^^171^187^if  ( actualLen < cmpLen )  return true;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P2_Replace_Operator]^if  ( actualLen >= cmpLen )  return false;^177^^^^^171^187^if  ( actualLen > cmpLen )  return false;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P3_Replace_Literal]^if  ( actualLen > cmpLen )  return true;^177^^^^^171^187^if  ( actualLen > cmpLen )  return false;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P5_Replace_Variable]^if  ( actualLen > i )  return false;^177^^^^^171^187^if  ( actualLen > cmpLen )  return false;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P5_Replace_Variable]^if  ( cmpLen > actualLen )  return false;^177^^^^^171^187^if  ( actualLen > cmpLen )  return false;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P2_Replace_Operator]^if  ( diff == 0 )  {^182^^^^^171^187^if  ( diff != 0 )  {^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P3_Replace_Literal]^if  ( diff != i )  {^182^^^^^171^187^if  ( diff != 0 )  {^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P3_Replace_Literal]^if  ( diff != 4 )  {^182^^^^^171^187^if  ( diff != 0 )  {^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P5_Replace_Variable]^if  ( i != 0 )  {^182^^^^^171^187^if  ( diff != 0 )  {^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P6_Replace_Expression]^if  ( diff < 0 )  {^182^^^^^171^187^if  ( diff != 0 )  {^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P8_Replace_Mix]^if  ( i != 0L )  {^182^^^^^171^187^if  ( diff != 0 )  {^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P9_Replace_Statement]^if  ( len == 0 )  {^182^^^^^171^187^if  ( diff != 0 )  {^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P15_Unwrap_Block]^return diff < 0;^182^183^184^^^171^187^if  ( diff != 0 )  { return  ( diff < 0 ) ; }^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P16_Remove_Block]^^182^183^184^^^171^187^if  ( diff != 0 )  { return  ( diff < 0 ) ; }^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P13_Insert_Block]^if  ( len == 0 )  {     return defaultValue; }^182^^^^^171^187^[Delete]^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P13_Insert_Block]^if  ( input == null )  {     return defaultValue; }^182^^^^^171^187^[Delete]^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P2_Replace_Operator]^return  ( diff <= 0 ) ;^183^^^^^171^187^return  ( diff < 0 ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P3_Replace_Literal]^return  ( diff < 9 ) ;^183^^^^^171^187^return  ( diff < 0 ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P5_Replace_Variable]^return  ( i < 0 ) ;^183^^^^^171^187^return  ( diff < 0 ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P8_Replace_Mix]^return  ( i  ;^183^^^^^171^187^return  ( diff < 0 ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P12_Insert_Condition]^if  ( diff != 0 )  { return  ( diff < 0 ) ; }^183^^^^^171^187^return  ( diff < 0 ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P1_Replace_Type]^for  (  short  i = 0; i < cmpLen; ++i )  {^180^^^^^171^187^for  ( int i = 0; i < cmpLen; ++i )  {^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P2_Replace_Operator]^for  ( int i = 0; i <= cmpLen; ++i )  {^180^^^^^171^187^for  ( int i = 0; i < cmpLen; ++i )  {^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P3_Replace_Literal]^for  ( int i = -2; i < cmpLen; ++i )  {^180^^^^^171^187^for  ( int i = 0; i < cmpLen; ++i )  {^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P3_Replace_Literal]^for  ( int i = diff; i < cmpLen; ++i )  {^180^^^^^171^187^for  ( int i = 0; i < cmpLen; ++i )  {^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P5_Replace_Variable]^for  ( diffnt i = 0; i < cmpLen; ++i )  {^180^^^^^171^187^for  ( int i = 0; i < cmpLen; ++i )  {^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P5_Replace_Variable]^for  ( int i = 0; i < diff; ++i )  {^180^^^^^171^187^for  ( int i = 0; i < cmpLen; ++i )  {^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P2_Replace_Operator]^if  ( diff >= 0 )  {^182^^^^^171^187^if  ( diff != 0 )  {^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P3_Replace_Literal]^if  ( diff != 1 )  {^182^^^^^171^187^if  ( diff != 0 )  {^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P3_Replace_Literal]^if  ( diff != diff )  {^182^^^^^171^187^if  ( diff != 0 )  {^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P8_Replace_Mix]^if  ( i != 2 )  {^182^^^^^171^187^if  ( diff != 0 )  {^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P3_Replace_Literal]^return  ( diff < -5 ) ;^183^^^^^171^187^return  ( diff < 0 ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P8_Replace_Mix]^return false ;^183^^^^^171^187^return  ( diff < 0 ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P3_Replace_Literal]^return  ( diff < diff ) ;^183^^^^^171^187^return  ( diff < 0 ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P1_Replace_Type]^long  diff = numberStr.charAt ( i )  - cmpStr.charAt ( i ) ;^181^^^^^171^187^int diff = numberStr.charAt ( i )  - cmpStr.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P2_Replace_Operator]^int diff = numberStr.charAt ( i++ )   -  cmpStr.charAt ( i ) ;^181^^^^^171^187^int diff = numberStr.charAt ( i )  - cmpStr.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P2_Replace_Operator]^int diff = numberStr.charAt ( i )   -  cmpStr.charAt ( i++ ) ;^181^^^^^171^187^int diff = numberStr.charAt ( i )  - cmpStr.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P2_Replace_Operator]^int diff = numberStr.charAt ( i-- )   -  cmpStr.charAt ( i-- ) ;^181^^^^^171^187^int diff = numberStr.charAt ( i )  - cmpStr.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P5_Replace_Variable]^int diff = str.charAt ( i )  - cmpStr.charAt ( i ) ;^181^^^^^171^187^int diff = numberStr.charAt ( i )  - cmpStr.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P5_Replace_Variable]^int diff = numberStr.charAt ( cmpLen )  - cmpStr.charAt ( i ) ;^181^^^^^171^187^int diff = numberStr.charAt ( i )  - cmpStr.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P5_Replace_Variable]^int diff = cmpStr.charAt ( i )  - numberStr.charAt ( i ) ;^181^^^^^171^187^int diff = numberStr.charAt ( i )  - cmpStr.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P5_Replace_Variable]^int diff = i.charAt ( numberStr )  - cmpStr.charAt ( i ) ;^181^^^^^171^187^int diff = numberStr.charAt ( i )  - cmpStr.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P5_Replace_Variable]^int diff = numberStr.charAt ( cmpStr )  - i.charAt ( i ) ;^181^^^^^171^187^int diff = numberStr.charAt ( i )  - cmpStr.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P8_Replace_Mix]^int diff = cmpStr .trim (  )   - cmpStr^181^^^^^171^187^int diff = numberStr.charAt ( i )  - cmpStr.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P5_Replace_Variable]^int diff = numberStr.charAt ( diff )  - cmpStr.charAt ( i ) ;^181^^^^^171^187^int diff = numberStr.charAt ( i )  - cmpStr.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P8_Replace_Mix]^int diff = cmpStr.charAt ( i )  - cmpStr.charAt ( i ) ;^181^^^^^171^187^int diff = numberStr.charAt ( i )  - cmpStr.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P14_Delete_Statement]^^181^182^183^184^^171^187^int diff = numberStr.charAt ( i )  - cmpStr.charAt ( i ) ; if  ( diff != 0 )  { return  ( diff < 0 ) ; }^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P5_Replace_Variable]^int diff = numberStr.charAt ( i )  - numberStr.charAt ( i ) ;^181^^^^^171^187^int diff = numberStr.charAt ( i )  - cmpStr.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P7_Replace_Invocation]^int diff = numberStr .trim (  )   - cmpStr^181^^^^^171^187^int diff = numberStr.charAt ( i )  - cmpStr.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P1_Replace_Type]^for  (  long  i = 0; i < cmpLen; ++i )  {^180^^^^^171^187^for  ( int i = 0; i < cmpLen; ++i )  {^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P3_Replace_Literal]^for  ( int i = cmpLen; i < cmpLen; ++i )  {^180^^^^^171^187^for  ( int i = 0; i < cmpLen; ++i )  {^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P1_Replace_Type]^short  diff = numberStr.charAt ( i )  - cmpStr.charAt ( i ) ;^181^^^^^171^187^int diff = numberStr.charAt ( i )  - cmpStr.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P2_Replace_Operator]^int diff = numberStr.charAt ( i++ )   -  cmpStr.charAt ( i++ ) ;^181^^^^^171^187^int diff = numberStr.charAt ( i )  - cmpStr.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P2_Replace_Operator]^int diff = numberStr.charAt ( i++ )   -  cmpStr.charAt ( i ) ;^181^^^^^171^187^int diff = numberStr.charAt ( i )  - cmpStr.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P2_Replace_Operator]^int diff = numberStr.charAt ( i )   -  cmpStr.charAt ( i++ ) ;^181^^^^^171^187^int diff = numberStr.charAt ( i )  - cmpStr.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P2_Replace_Operator]^int diff = numberStr.charAt ( i--)   -  cmpStr.charAt ( i-- ) ;^181^^^^^171^187^int diff = numberStr.charAt ( i )  - cmpStr.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P2_Replace_Operator]^int diff = numberStr.charAt ( i++)   -  cmpStr.charAt ( i++ ) ;^181^^^^^171^187^int diff = numberStr.charAt ( i )  - cmpStr.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P5_Replace_Variable]^int diff = numberStr.charAt ( i )  - str.charAt ( i ) ;^181^^^^^171^187^int diff = numberStr.charAt ( i )  - cmpStr.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P3_Replace_Literal]^return false;^186^^^^^171^187^return true;^[CLASS] NumberInput  [METHOD] inLongRange [RETURN_TYPE] boolean   String numberStr boolean negative [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  boolean  negative  long  L_BILLION  val  int  actualLen  cmpLen  diff  i  
[P2_Replace_Operator]^if  ( input != null )  {^191^^^^^176^206^if  ( input == null )  {^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P5_Replace_Variable]^if  ( numberStr == null )  {^191^^^^^176^206^if  ( input == null )  {^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P8_Replace_Mix]^if  ( cmpStr == this )  {^191^^^^^176^206^if  ( input == null )  {^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P15_Unwrap_Block]^return defaultValue;^191^192^193^^^176^206^if  ( input == null )  { return defaultValue; }^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P16_Remove_Block]^^191^192^193^^^176^206^if  ( input == null )  { return defaultValue; }^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P8_Replace_Mix]^return len;^192^^^^^177^207^return defaultValue;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P5_Replace_Variable]^input = str.trim (  ) ;^194^^^^^179^209^input = input.trim (  ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P7_Replace_Invocation]^input = input.charAt (  ) ;^194^^^^^179^209^input = input.trim (  ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P7_Replace_Invocation]^input = input .String ( this , len , defaultValue )  ;^194^^^^^179^209^input = input.trim (  ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P11_Insert_Donor_Statement]^input = input.substring ( 1 ) ;input = input.trim (  ) ;^194^^^^^179^209^input = input.trim (  ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P11_Insert_Donor_Statement]^len = input.length (  ) ;input = input.trim (  ) ;^194^^^^^179^209^input = input.trim (  ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P8_Replace_Mix]^input = numberStr.trim (  ) ;^194^^^^^179^209^input = input.trim (  ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P14_Delete_Statement]^^194^^^^^179^209^input = input.trim (  ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P11_Insert_Donor_Statement]^char c = input.charAt ( 0 ) ;input = input.trim (  ) ;^194^^^^^179^209^input = input.trim (  ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P11_Insert_Donor_Statement]^int len = input.length (  ) ;input = input.trim (  ) ;^194^^^^^179^209^input = input.trim (  ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P11_Insert_Donor_Statement]^char c = input.charAt ( i ) ;input = input.trim (  ) ;^194^^^^^179^209^input = input.trim (  ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P1_Replace_Type]^long  len = input.length (  ) ;^195^^^^^180^210^int len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P3_Replace_Literal]^int len = input.length() - 3 ;^195^^^^^180^210^int len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P5_Replace_Variable]^int len = str.length (  ) ;^195^^^^^180^210^int len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P7_Replace_Invocation]^int len = input.charAt (  ) ;^195^^^^^180^210^int len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P8_Replace_Mix]^int len = cmpStr.length (  ) ;^195^^^^^180^210^int len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P11_Insert_Donor_Statement]^int actualLen = numberStr.length (  ) ;int len = input.length (  ) ;^195^^^^^180^210^int len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P11_Insert_Donor_Statement]^char c = input.charAt ( 0 ) ;int len = input.length (  ) ;^195^^^^^180^210^int len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P11_Insert_Donor_Statement]^int length = str.length (  ) ;int len = input.length (  ) ;^195^^^^^180^210^int len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P11_Insert_Donor_Statement]^int cmpLen = cmpStr.length (  ) ;int len = input.length (  ) ;^195^^^^^180^210^int len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P11_Insert_Donor_Statement]^char c = input.charAt ( i ) ;int len = input.length (  ) ;^195^^^^^180^210^int len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P3_Replace_Literal]^int len = input.length() - 6 ;^195^^^^^180^210^int len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P14_Delete_Statement]^^195^^^^^180^210^int len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P11_Insert_Donor_Statement]^input = input.substring ( 1 ) ;int len = input.length (  ) ;^195^^^^^180^210^int len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P11_Insert_Donor_Statement]^input = input.trim (  ) ;int len = input.length (  ) ;^195^^^^^180^210^int len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P11_Insert_Donor_Statement]^len = input.length (  ) ;int len = input.length (  ) ;^195^^^^^180^210^int len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P2_Replace_Operator]^if  ( len >= 0 )  {^196^^^^^181^211^if  ( len == 0 )  {^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P3_Replace_Literal]^if  ( len ==  )  {^196^^^^^181^211^if  ( len == 0 )  {^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P5_Replace_Variable]^if  ( i == 0 )  {^196^^^^^181^211^if  ( len == 0 )  {^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P8_Replace_Mix]^if  ( len == 2 )  {^196^^^^^181^211^if  ( len == 0 )  {^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P9_Replace_Statement]^if  ( length <= 9 )  {^196^^^^^181^211^if  ( len == 0 )  {^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P9_Replace_Statement]^if  ( diff != 0 )  {^196^^^^^181^211^if  ( len == 0 )  {^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P9_Replace_Statement]^if  ( c == '+' )  {^196^^^^^181^211^if  ( len == 0 )  {^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P9_Replace_Statement]^if  ( length > 9 )  {^196^^^^^181^211^if  ( len == 0 )  {^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P15_Unwrap_Block]^return defaultValue;^196^197^198^^^181^211^if  ( len == 0 )  { return defaultValue; }^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P16_Remove_Block]^^196^197^198^^^181^211^if  ( len == 0 )  { return defaultValue; }^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P5_Replace_Variable]^return len;^197^^^^^182^212^return defaultValue;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P1_Replace_Type]^short  i = 0;^200^^^^^185^215^int i = 0;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P3_Replace_Literal]^int i = i;^200^^^^^185^215^int i = 0;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P11_Insert_Donor_Statement]^int offset = 1;int i = 0;^200^^^^^185^215^int i = 0;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P2_Replace_Operator]^if  ( i > len )  {^201^^^^^186^216^if  ( i < len )  {^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P5_Replace_Variable]^if  ( len < len )  {^201^^^^^186^216^if  ( i < len )  {^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P5_Replace_Variable]^if  ( i < i )  {^201^^^^^186^216^if  ( i < len )  {^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P6_Replace_Expression]^if  ( c == '+' )  {^201^^^^^186^216^if  ( i < len )  {^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P6_Replace_Expression]^if  ( c == '-' )  {^201^^^^^186^216^if  ( i < len )  {^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P9_Replace_Statement]^if  ( offset < length )  {^201^^^^^186^216^if  ( i < len )  {^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P9_Replace_Statement]^if  ( ++offset < len )  {^201^^^^^186^216^if  ( i < len )  {^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P13_Insert_Block]^if  ( c == '+' )  {     input = input.substring ( 1 ) ;     len = input.length (  ) ; }else     if  ( c == '-' )  {         ++i;     }^201^^^^^186^216^[Delete]^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P2_Replace_Operator]^if  ( c != '+' )  {^203^^^^^188^218^if  ( c == '+' )  {^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P6_Replace_Expression]^if  ( c == '-' )  {^203^^^^^188^218^if  ( c == '+' )  {^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P9_Replace_Statement]^if  ( i < len )  {^203^^^^^188^218^if  ( c == '+' )  {^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P15_Unwrap_Block]^input = input.substring(1); len = input.length();^203^204^205^206^207^188^218^if  ( c == '+' )  { input = input.substring ( 1 ) ; len = input.length (  ) ; } else if  ( c == '-' )  { ++i; }^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P16_Remove_Block]^^203^204^205^206^207^188^218^if  ( c == '+' )  { input = input.substring ( 1 ) ; len = input.length (  ) ; } else if  ( c == '-' )  { ++i; }^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P13_Insert_Block]^if  ( i < len )  {     char c = input.charAt ( 0 ) ;     if  ( c == '+' )  {         input = input.substring ( 1 ) ;         len = input.length (  ) ;     }else         if  ( c == '-' )  {             ++i;         }      }^203^^^^^188^218^[Delete]^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P2_Replace_Operator]^} else if  ( c != '-' )  {^206^^^^^191^221^} else if  ( c == '-' )  {^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P6_Replace_Expression]^} else {^206^^^^^191^221^} else if  ( c == '-' )  {^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P15_Unwrap_Block]^++i;^206^207^208^^^191^221^} else if  ( c == '-' )  { ++i; }^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P16_Remove_Block]^^206^207^208^^^191^221^} else if  ( c == '-' )  { ++i; }^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P3_Replace_Literal]^input = input.substring ( 2 ) ;^204^^^^^189^219^input = input.substring ( 1 ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P5_Replace_Variable]^input = str.substring ( 1 ) ;^204^^^^^189^219^input = input.substring ( 1 ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P8_Replace_Mix]^input = input.substring ( 3 ) ;^204^^^^^189^219^input = input.substring ( 1 ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P11_Insert_Donor_Statement]^input = input.trim (  ) ;input = input.substring ( 1 ) ;^204^^^^^189^219^input = input.substring ( 1 ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P11_Insert_Donor_Statement]^len = input.length (  ) ;input = input.substring ( 1 ) ;^204^^^^^189^219^input = input.substring ( 1 ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P3_Replace_Literal]^len = input.length() + 8 ;^205^^^^^190^220^len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P5_Replace_Variable]^len = str.length (  ) ;^205^^^^^190^220^len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P7_Replace_Invocation]^len = input.charAt (  ) ;^205^^^^^190^220^len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P7_Replace_Invocation]^len = input .substring ( defaultValue )  ;^205^^^^^190^220^len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P8_Replace_Mix]^len =  null.length (  ) ;^205^^^^^190^220^len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P11_Insert_Donor_Statement]^input = input.trim (  ) ;len = input.length (  ) ;^205^^^^^190^220^len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P11_Insert_Donor_Statement]^input = input.substring ( 1 ) ;len = input.length (  ) ;^205^^^^^190^220^len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P3_Replace_Literal]^input = input.substring ( 7 ) ;^204^^^^^189^219^input = input.substring ( 1 ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P14_Delete_Statement]^^204^205^^^^189^219^input = input.substring ( 1 ) ; len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P11_Insert_Donor_Statement]^char c = input.charAt ( 0 ) ;input = input.substring ( 1 ) ;^204^^^^^189^219^input = input.substring ( 1 ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P11_Insert_Donor_Statement]^int len = input.length (  ) ;input = input.substring ( 1 ) ;^204^^^^^189^219^input = input.substring ( 1 ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P11_Insert_Donor_Statement]^char c = input.charAt ( i ) ;input = input.substring ( 1 ) ;^204^^^^^189^219^input = input.substring ( 1 ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P3_Replace_Literal]^len = input.length() - 1 ;^205^^^^^190^220^len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P8_Replace_Mix]^len = numberStr.length (  ) ;^205^^^^^190^220^len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P14_Delete_Statement]^^205^^^^^190^220^len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P11_Insert_Donor_Statement]^int actualLen = numberStr.length (  ) ;len = input.length (  ) ;^205^^^^^190^220^len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P11_Insert_Donor_Statement]^char c = input.charAt ( 0 ) ;len = input.length (  ) ;^205^^^^^190^220^len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P11_Insert_Donor_Statement]^int len = input.length (  ) ;len = input.length (  ) ;^205^^^^^190^220^len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P11_Insert_Donor_Statement]^int length = str.length (  ) ;len = input.length (  ) ;^205^^^^^190^220^len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P11_Insert_Donor_Statement]^int cmpLen = cmpStr.length (  ) ;len = input.length (  ) ;^205^^^^^190^220^len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P11_Insert_Donor_Statement]^char c = input.charAt ( i ) ;len = input.length (  ) ;^205^^^^^190^220^len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P3_Replace_Literal]^input = input.substring ( defaultValue ) ;^204^^^^^189^219^input = input.substring ( 1 ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P8_Replace_Mix]^input = input.substring ( 1 + 2 ) ;^204^^^^^189^219^input = input.substring ( 1 ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P3_Replace_Literal]^len = input.length() + 3 ;^205^^^^^190^220^len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P5_Replace_Variable]^len = cmpStr.length (  ) ;^205^^^^^190^220^len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P1_Replace_Type]^int c = input.charAt ( 0 ) ;^202^^^^^187^217^char c = input.charAt ( 0 ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P3_Replace_Literal]^char c = input.charAt ( 8 ) ;^202^^^^^187^217^char c = input.charAt ( 0 ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P5_Replace_Variable]^char c = str.charAt ( 0 ) ;^202^^^^^187^217^char c = input.charAt ( 0 ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P8_Replace_Mix]^char c = numberStr.charAt ( 0 ) ;^202^^^^^187^217^char c = input.charAt ( 0 ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P11_Insert_Donor_Statement]^int len = input.length (  ) ;char c = input.charAt ( 0 ) ;^202^^^^^187^217^char c = input.charAt ( 0 ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P11_Insert_Donor_Statement]^char c = str.charAt ( 0 ) ;char c = input.charAt ( 0 ) ;^202^^^^^187^217^char c = input.charAt ( 0 ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P11_Insert_Donor_Statement]^char c = input.charAt ( i ) ;char c = input.charAt ( 0 ) ;^202^^^^^187^217^char c = input.charAt ( 0 ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P3_Replace_Literal]^char c = input.charAt ( i ) ;^202^^^^^187^217^char c = input.charAt ( 0 ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P7_Replace_Invocation]^char c = input .trim (  )  ;^202^^^^^187^217^char c = input.charAt ( 0 ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P14_Delete_Statement]^^202^^^^^187^217^char c = input.charAt ( 0 ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P11_Insert_Donor_Statement]^input = input.substring ( 1 ) ;char c = input.charAt ( 0 ) ;^202^^^^^187^217^char c = input.charAt ( 0 ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P11_Insert_Donor_Statement]^input = input.trim (  ) ;char c = input.charAt ( 0 ) ;^202^^^^^187^217^char c = input.charAt ( 0 ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P11_Insert_Donor_Statement]^len = input.length (  ) ;char c = input.charAt ( 0 ) ;^202^^^^^187^217^char c = input.charAt ( 0 ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P8_Replace_Mix]^input = cmpStr.substring ( 1 ) ;^204^^^^^189^219^input = input.substring ( 1 ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P3_Replace_Literal]^len = input.length() - 9 ;^205^^^^^190^220^len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P3_Replace_Literal]^input = input.substring ( -8 ) ;^204^^^^^189^219^input = input.substring ( 1 ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P8_Replace_Mix]^input = input.substring ( 1 + 1 ) ;^204^^^^^189^219^input = input.substring ( 1 ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P3_Replace_Literal]^len = input.length() + 5 ;^205^^^^^190^220^len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P3_Replace_Literal]^input = input.substring (  ) ;^204^^^^^189^219^input = input.substring ( 1 ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P14_Delete_Statement]^^204^^^^^189^219^input = input.substring ( 1 ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P3_Replace_Literal]^len = input.length() + 1 ;^205^^^^^190^220^len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P8_Replace_Mix]^len = str.charAt (  ) ;^205^^^^^190^220^len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P2_Replace_Operator]^} else if  ( c > '-' )  {^206^^^^^191^221^} else if  ( c == '-' )  {^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P8_Replace_Mix]^}  if  ( c == '-' )  {^206^^^^^191^221^} else if  ( c == '-' )  {^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P3_Replace_Literal]^input = input.substring ( -6 ) ;^204^^^^^189^219^input = input.substring ( 1 ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P5_Replace_Variable]^input = numberStr.substring ( 1 ) ;^204^^^^^189^219^input = input.substring ( 1 ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P8_Replace_Mix]^input = input.substring ( 0 ) ;^204^^^^^189^219^input = input.substring ( 1 ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P3_Replace_Literal]^len = input.length() - 3 ;^205^^^^^190^220^len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P7_Replace_Invocation]^len = input .substring ( len )  ;^205^^^^^190^220^len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P1_Replace_Type]^String c = input.charAt ( 0 ) ;^202^^^^^187^217^char c = input.charAt ( 0 ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P3_Replace_Literal]^char c = input.charAt ( 6 ) ;^202^^^^^187^217^char c = input.charAt ( 0 ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P3_Replace_Literal]^char c = input.charAt ( len ) ;^202^^^^^187^217^char c = input.charAt ( 0 ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P3_Replace_Literal]^input = input.substring ( 8 ) ;^204^^^^^189^219^input = input.substring ( 1 ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P7_Replace_Invocation]^len = input .substring ( i )  ;^205^^^^^190^220^len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P2_Replace_Operator]^if  ( c > '9' && c < '0' )  {^213^^^^^198^228^if  ( c > '9' || c < '0' )  {^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P2_Replace_Operator]^if  ( c == '9' || c < '0' )  {^213^^^^^198^228^if  ( c > '9' || c < '0' )  {^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P2_Replace_Operator]^if  ( c > '9' || c <= '0' )  {^213^^^^^198^228^if  ( c > '9' || c < '0' )  {^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P6_Replace_Expression]^if  ( c > '9' ) {^213^^^^^198^228^if  ( c > '9' || c < '0' )  {^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P6_Replace_Expression]^if  (  c < '0' )  {^213^^^^^198^228^if  ( c > '9' || c < '0' )  {^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P15_Unwrap_Block]^try {    return ((int) (com.fasterxml.jackson.core.io.NumberInput.parseDouble(input)));} catch (java.lang.NumberFormatException e) {    return defaultValue;};^213^214^215^216^217^198^228^if  ( c > '9' || c < '0' )  { try { return  ( int )  parseDouble ( input ) ; } catch  ( NumberFormatException e )  { return defaultValue; }^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P16_Remove_Block]^^213^214^215^216^217^198^228^if  ( c > '9' || c < '0' )  { try { return  ( int )  parseDouble ( input ) ; } catch  ( NumberFormatException e )  { return defaultValue; }^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P1_Replace_Type]^return  (  short  )  parseDouble ( input ) ;^215^^^^^200^230^return  ( int )  parseDouble ( input ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P5_Replace_Variable]^return  ( int )  parseDouble ( str ) ;^215^^^^^200^230^return  ( int )  parseDouble ( input ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P7_Replace_Invocation]^return  ( int )  parseLong ( input ) ;^215^^^^^200^230^return  ( int )  parseDouble ( input ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P5_Replace_Variable]^return  ( int )  parseDouble ( cmpStr ) ;^215^^^^^200^230^return  ( int )  parseDouble ( input ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P8_Replace_Mix]^return  ( int )  parseLong ( str ) ;^215^^^^^200^230^return  ( int )  parseDouble ( input ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P14_Delete_Statement]^^215^^^^^200^230^return  ( int )  parseDouble ( input ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P5_Replace_Variable]^return len;^217^^^^^202^232^return defaultValue;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P2_Replace_Operator]^for  ( ; i <= len; ++i )  {^210^^^^^195^225^for  ( ; i < len; ++i )  {^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P5_Replace_Variable]^for  ( ; len < len; ++i )  {^210^^^^^195^225^for  ( ; i < len; ++i )  {^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P5_Replace_Variable]^for  ( ; i < i; ++i )  {^210^^^^^195^225^for  ( ; i < len; ++i )  {^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P5_Replace_Variable]^for  ( ; len < i; ++i )  {^210^^^^^195^225^for  ( ; i < len; ++i )  {^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P2_Replace_Operator]^if  ( c >= '9' || c < '0' )  {^213^^^^^198^228^if  ( c > '9' || c < '0' )  {^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P2_Replace_Operator]^if  ( c > '9' || c > '0' )  {^213^^^^^198^228^if  ( c > '9' || c < '0' )  {^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P5_Replace_Variable]^return  ( int )  parseDouble ( numberStr ) ;^215^^^^^200^230^return  ( int )  parseDouble ( input ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P1_Replace_Type]^return  (  long  )  parseDouble ( input ) ;^215^^^^^200^230^return  ( int )  parseDouble ( input ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P8_Replace_Mix]^return  ( int )  parseLong ( numberStr ) ;^215^^^^^200^230^return  ( int )  parseDouble ( input ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P1_Replace_Type]^int c = input.charAt ( i ) ;^211^^^^^196^226^char c = input.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P2_Replace_Operator]^char c = input.charAt ( i++ ) ;^211^^^^^196^226^char c = input.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P2_Replace_Operator]^char c = input.charAt ( i-- ) ;^211^^^^^196^226^char c = input.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P5_Replace_Variable]^char c = str.charAt ( i ) ;^211^^^^^196^226^char c = input.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P5_Replace_Variable]^char c = lennput.charAt ( i ) ;^211^^^^^196^226^char c = input.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P5_Replace_Variable]^char c = i.charAt ( input ) ;^211^^^^^196^226^char c = input.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P5_Replace_Variable]^char c = inputnput.charAt ( i ) ;^211^^^^^196^226^char c = input.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P11_Insert_Donor_Statement]^char c = input.charAt ( 0 ) ;char c = input.charAt ( i ) ;^211^^^^^196^226^char c = input.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P11_Insert_Donor_Statement]^int len = input.length (  ) ;char c = input.charAt ( i ) ;^211^^^^^196^226^char c = input.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P2_Replace_Operator]^char c = input.charAt ( i++ ) ;^211^^^^^196^226^char c = input.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len 
[P2_Replace_Operator]^char c = input.charAt ( i-- ) ;^211^^^^^196^226^char c = input.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P5_Replace_Variable]^char c = cmpStr.charAt ( i ) ;^211^^^^^196^226^char c = input.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P14_Delete_Statement]^^211^^^^^196^226^char c = input.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P11_Insert_Donor_Statement]^input = input.substring ( 1 ) ;char c = input.charAt ( i ) ;^211^^^^^196^226^char c = input.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P11_Insert_Donor_Statement]^input = input.trim (  ) ;char c = input.charAt ( i ) ;^211^^^^^196^226^char c = input.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P11_Insert_Donor_Statement]^len = input.length (  ) ;char c = input.charAt ( i ) ;^211^^^^^196^226^char c = input.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P7_Replace_Invocation]^char c = input .trim (  )  ;^211^^^^^196^226^char c = input.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P5_Replace_Variable]^return Integer.parseInt ( str ) ;^222^^^^^207^237^return Integer.parseInt ( input ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P5_Replace_Variable]^return Integer.parseInt ( numberStr ) ;^222^^^^^207^237^return Integer.parseInt ( input ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P8_Replace_Mix]^return Integer.parseInt ( cmpStr ) ;^222^^^^^207^237^return Integer.parseInt ( input ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P14_Delete_Statement]^^222^^^^^207^237^return Integer.parseInt ( input ) ;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P5_Replace_Variable]^return len;^224^^^^^209^239^return defaultValue;^[CLASS] NumberInput  [METHOD] parseAsInt [RETURN_TYPE] int   String input int defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  val  int  defaultValue  i  len  
[P2_Replace_Operator]^if  ( input != null )  {^229^^^^^214^244^if  ( input == null )  {^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P5_Replace_Variable]^if  ( cmpStr == null )  {^229^^^^^214^244^if  ( input == null )  {^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P8_Replace_Mix]^if  ( numberStr == this )  {^229^^^^^214^244^if  ( input == null )  {^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P15_Unwrap_Block]^return defaultValue;^229^230^231^^^214^244^if  ( input == null )  { return defaultValue; }^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P16_Remove_Block]^^229^230^231^^^214^244^if  ( input == null )  { return defaultValue; }^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P5_Replace_Variable]^return val;^230^^^^^215^245^return defaultValue;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P5_Replace_Variable]^input = str.trim (  ) ;^232^^^^^217^247^input = input.trim (  ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P7_Replace_Invocation]^input = input.charAt (  ) ;^232^^^^^217^247^input = input.trim (  ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P8_Replace_Mix]^input =  null.trim (  ) ;^232^^^^^217^247^input = input.trim (  ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P11_Insert_Donor_Statement]^input = input.substring ( 1 ) ;input = input.trim (  ) ;^232^^^^^217^247^input = input.trim (  ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P11_Insert_Donor_Statement]^len = input.length (  ) ;input = input.trim (  ) ;^232^^^^^217^247^input = input.trim (  ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P14_Delete_Statement]^^232^233^^^^217^247^input = input.trim (  ) ; int len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P11_Insert_Donor_Statement]^char c = input.charAt ( 0 ) ;input = input.trim (  ) ;^232^^^^^217^247^input = input.trim (  ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P11_Insert_Donor_Statement]^int len = input.length (  ) ;input = input.trim (  ) ;^232^^^^^217^247^input = input.trim (  ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P11_Insert_Donor_Statement]^char c = input.charAt ( i ) ;input = input.trim (  ) ;^232^^^^^217^247^input = input.trim (  ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P1_Replace_Type]^long  len = input.length (  ) ;^233^^^^^218^248^int len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P3_Replace_Literal]^int len = input.length() - 0 ;^233^^^^^218^248^int len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P5_Replace_Variable]^int len = numberStr.length (  ) ;^233^^^^^218^248^int len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P7_Replace_Invocation]^int len = input.charAt (  ) ;^233^^^^^218^248^int len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P8_Replace_Mix]^int len = str.length (  ) ;^233^^^^^218^248^int len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P11_Insert_Donor_Statement]^int actualLen = numberStr.length (  ) ;int len = input.length (  ) ;^233^^^^^218^248^int len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P11_Insert_Donor_Statement]^char c = input.charAt ( 0 ) ;int len = input.length (  ) ;^233^^^^^218^248^int len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P11_Insert_Donor_Statement]^int length = str.length (  ) ;int len = input.length (  ) ;^233^^^^^218^248^int len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P11_Insert_Donor_Statement]^int cmpLen = cmpStr.length (  ) ;int len = input.length (  ) ;^233^^^^^218^248^int len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P14_Delete_Statement]^^233^^^^^218^248^int len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P11_Insert_Donor_Statement]^input = input.substring ( 1 ) ;int len = input.length (  ) ;^233^^^^^218^248^int len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P11_Insert_Donor_Statement]^input = input.trim (  ) ;int len = input.length (  ) ;^233^^^^^218^248^int len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P11_Insert_Donor_Statement]^len = input.length (  ) ;int len = input.length (  ) ;^233^^^^^218^248^int len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P2_Replace_Operator]^if  ( len != 0 )  {^234^^^^^219^249^if  ( len == 0 )  {^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P3_Replace_Literal]^if  ( len ==  )  {^234^^^^^219^249^if  ( len == 0 )  {^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P5_Replace_Variable]^if  ( i == 0 )  {^234^^^^^219^249^if  ( len == 0 )  {^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P8_Replace_Mix]^if  ( i == 4 )  {^234^^^^^219^249^if  ( len == 0 )  {^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P9_Replace_Statement]^if  ( length <= 9 )  {^234^^^^^219^249^if  ( len == 0 )  {^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P9_Replace_Statement]^if  ( len >= 0 )  {^234^^^^^219^249^if  ( len == 0 )  {^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P9_Replace_Statement]^if  ( c == '+' )  {^234^^^^^219^249^if  ( len == 0 )  {^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P9_Replace_Statement]^if  ( length > 9 )  {^234^^^^^219^249^if  ( len == 0 )  {^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P15_Unwrap_Block]^return defaultValue;^234^235^236^^^219^249^if  ( len == 0 )  { return defaultValue; }^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P16_Remove_Block]^^234^235^236^^^219^249^if  ( len == 0 )  { return defaultValue; }^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P8_Replace_Mix]^return val;^235^^^^^220^250^return defaultValue;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P1_Replace_Type]^short  i = 0;^238^^^^^223^253^int i = 0;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P3_Replace_Literal]^int i = len;^238^^^^^223^253^int i = 0;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P11_Insert_Donor_Statement]^int offset = 1;int i = 0;^238^^^^^223^253^int i = 0;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P2_Replace_Operator]^if  ( i <= len )  {^239^^^^^224^254^if  ( i < len )  {^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P5_Replace_Variable]^if  ( len < len )  {^239^^^^^224^254^if  ( i < len )  {^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P5_Replace_Variable]^if  ( i < i )  {^239^^^^^224^254^if  ( i < len )  {^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P5_Replace_Variable]^if  ( len < i )  {^239^^^^^224^254^if  ( i < len )  {^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P6_Replace_Expression]^if  ( c == '+' )  {^239^^^^^224^254^if  ( i < len )  {^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P6_Replace_Expression]^if  ( c == '-' )  {^239^^^^^224^254^if  ( i < len )  {^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P9_Replace_Statement]^if  ( offset < length )  {^239^^^^^224^254^if  ( i < len )  {^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P9_Replace_Statement]^if  ( ++offset < len )  {^239^^^^^224^254^if  ( i < len )  {^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P13_Insert_Block]^if  ( c == '+' )  {     input = input.substring ( 1 ) ;     len = input.length (  ) ; }else     if  ( c == '-' )  {         ++i;     }^239^^^^^224^254^[Delete]^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P2_Replace_Operator]^if  ( c != '+' )  {^241^^^^^226^256^if  ( c == '+' )  {^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P6_Replace_Expression]^if  ( c == '-' )  {^241^^^^^226^256^if  ( c == '+' )  {^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P9_Replace_Statement]^if  ( i < len )  {^241^^^^^226^256^if  ( c == '+' )  {^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P15_Unwrap_Block]^input = input.substring(1); len = input.length();^241^242^243^244^245^226^256^if  ( c == '+' )  { input = input.substring ( 1 ) ; len = input.length (  ) ; } else if  ( c == '-' )  { ++i; }^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P16_Remove_Block]^^241^242^243^244^245^226^256^if  ( c == '+' )  { input = input.substring ( 1 ) ; len = input.length (  ) ; } else if  ( c == '-' )  { ++i; }^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P13_Insert_Block]^if  ( i < len )  {     char c = input.charAt ( 0 ) ;     if  ( c == '+' )  {         input = input.substring ( 1 ) ;         len = input.length (  ) ;     }else         if  ( c == '-' )  {             ++i;         }      }^241^^^^^226^256^[Delete]^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P2_Replace_Operator]^} else if  ( c <= '-' )  {^244^^^^^229^259^} else if  ( c == '-' )  {^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P6_Replace_Expression]^} else {^244^^^^^229^259^} else if  ( c == '-' )  {^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P15_Unwrap_Block]^++i;^244^245^246^^^229^259^} else if  ( c == '-' )  { ++i; }^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P16_Remove_Block]^^244^245^246^^^229^259^} else if  ( c == '-' )  { ++i; }^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P3_Replace_Literal]^input = input.substring ( 4 ) ;^242^^^^^227^257^input = input.substring ( 1 ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P5_Replace_Variable]^input = cmpStr.substring ( 1 ) ;^242^^^^^227^257^input = input.substring ( 1 ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P8_Replace_Mix]^input = input.substring ( 1 + 3 ) ;^242^^^^^227^257^input = input.substring ( 1 ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P11_Insert_Donor_Statement]^input = input.trim (  ) ;input = input.substring ( 1 ) ;^242^^^^^227^257^input = input.substring ( 1 ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P11_Insert_Donor_Statement]^len = input.length (  ) ;input = input.substring ( 1 ) ;^242^^^^^227^257^input = input.substring ( 1 ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P3_Replace_Literal]^len = input.length() - 2 ;^243^^^^^228^258^len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P5_Replace_Variable]^len = str.length (  ) ;^243^^^^^228^258^len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P7_Replace_Invocation]^len = input.charAt (  ) ;^243^^^^^228^258^len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P8_Replace_Mix]^len =  cmpStr.length (  ) ;^243^^^^^228^258^len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P11_Insert_Donor_Statement]^input = input.trim (  ) ;len = input.length (  ) ;^243^^^^^228^258^len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P11_Insert_Donor_Statement]^input = input.substring ( 1 ) ;len = input.length (  ) ;^243^^^^^228^258^len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P3_Replace_Literal]^input = input.substring ( i ) ;^242^^^^^227^257^input = input.substring ( 1 ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P8_Replace_Mix]^input = str.substring ( 1 ) ;^242^^^^^227^257^input = input.substring ( 1 ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P14_Delete_Statement]^^242^243^^^^227^257^input = input.substring ( 1 ) ; len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P11_Insert_Donor_Statement]^char c = input.charAt ( 0 ) ;input = input.substring ( 1 ) ;^242^^^^^227^257^input = input.substring ( 1 ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P11_Insert_Donor_Statement]^int len = input.length (  ) ;input = input.substring ( 1 ) ;^242^^^^^227^257^input = input.substring ( 1 ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P3_Replace_Literal]^len = input.length() - 6 ;^243^^^^^228^258^len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P5_Replace_Variable]^len = numberStr.length (  ) ;^243^^^^^228^258^len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P7_Replace_Invocation]^len = input .substring ( len )  ;^243^^^^^228^258^len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P14_Delete_Statement]^^243^^^^^228^258^len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P11_Insert_Donor_Statement]^int actualLen = numberStr.length (  ) ;len = input.length (  ) ;^243^^^^^228^258^len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P11_Insert_Donor_Statement]^char c = input.charAt ( 0 ) ;len = input.length (  ) ;^243^^^^^228^258^len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P11_Insert_Donor_Statement]^int len = input.length (  ) ;len = input.length (  ) ;^243^^^^^228^258^len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P11_Insert_Donor_Statement]^int length = str.length (  ) ;len = input.length (  ) ;^243^^^^^228^258^len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P11_Insert_Donor_Statement]^int cmpLen = cmpStr.length (  ) ;len = input.length (  ) ;^243^^^^^228^258^len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P11_Insert_Donor_Statement]^char c = input.charAt ( i ) ;len = input.length (  ) ;^243^^^^^228^258^len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P2_Replace_Operator]^} else if  ( c > '-' )  {^244^^^^^229^259^} else if  ( c == '-' )  {^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P3_Replace_Literal]^input = input.substring ( len ) ;^242^^^^^227^257^input = input.substring ( 1 ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P8_Replace_Mix]^input = input.substring ( 1 / 0 ) ;^242^^^^^227^257^input = input.substring ( 1 ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P3_Replace_Literal]^len = input.length() - 7 ;^243^^^^^228^258^len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P1_Replace_Type]^int c = input.charAt ( 0 ) ;^240^^^^^225^255^char c = input.charAt ( 0 ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P3_Replace_Literal]^char c = input.charAt ( len ) ;^240^^^^^225^255^char c = input.charAt ( 0 ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P3_Replace_Literal]^char c = input.charAt ( i ) ;^240^^^^^225^255^char c = input.charAt ( 0 ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P5_Replace_Variable]^char c = cmpStr.charAt ( 0 ) ;^240^^^^^225^255^char c = input.charAt ( 0 ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P8_Replace_Mix]^char c = str.charAt ( 0 ) ;^240^^^^^225^255^char c = input.charAt ( 0 ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P11_Insert_Donor_Statement]^int len = input.length (  ) ;char c = input.charAt ( 0 ) ;^240^^^^^225^255^char c = input.charAt ( 0 ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P11_Insert_Donor_Statement]^char c = str.charAt ( 0 ) ;char c = input.charAt ( 0 ) ;^240^^^^^225^255^char c = input.charAt ( 0 ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P11_Insert_Donor_Statement]^char c = input.charAt ( i ) ;char c = input.charAt ( 0 ) ;^240^^^^^225^255^char c = input.charAt ( 0 ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P3_Replace_Literal]^char c = input.charAt ( 5 ) ;^240^^^^^225^255^char c = input.charAt ( 0 ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P14_Delete_Statement]^^240^^^^^225^255^char c = input.charAt ( 0 ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P11_Insert_Donor_Statement]^input = input.substring ( 1 ) ;char c = input.charAt ( 0 ) ;^240^^^^^225^255^char c = input.charAt ( 0 ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P11_Insert_Donor_Statement]^input = input.trim (  ) ;char c = input.charAt ( 0 ) ;^240^^^^^225^255^char c = input.charAt ( 0 ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P11_Insert_Donor_Statement]^len = input.length (  ) ;char c = input.charAt ( 0 ) ;^240^^^^^225^255^char c = input.charAt ( 0 ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P14_Delete_Statement]^^242^^^^^227^257^input = input.substring ( 1 ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P3_Replace_Literal]^len = input.length() + 2 ;^243^^^^^228^258^len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P2_Replace_Operator]^if  ( c != '+' )  {^241^^^^^226^256^if  ( c == '+' )  {^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P2_Replace_Operator]^} else if  ( c != '-' )  {^244^^^^^229^259^} else if  ( c == '-' )  {^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P3_Replace_Literal]^input = input.substring ( 2 ) ;^242^^^^^227^257^input = input.substring ( 1 ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P8_Replace_Mix]^input = input.substring ( 1 - 3 ) ;^242^^^^^227^257^input = input.substring ( 1 ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P3_Replace_Literal]^len = input.length() + 1 ;^243^^^^^228^258^len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P7_Replace_Invocation]^len = input .substring ( i )  ;^243^^^^^228^258^len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P8_Replace_Mix]^len =  input.length (  ) - 1 ;^243^^^^^228^258^len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P8_Replace_Mix]^input = numberStr.substring ( 1 ) ;^242^^^^^227^257^input = input.substring ( 1 ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P8_Replace_Mix]^}  if  ( c == '-' )  {^244^^^^^229^259^} else if  ( c == '-' )  {^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P3_Replace_Literal]^input = input.substring ( 9 ) ;^242^^^^^227^257^input = input.substring ( 1 ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P8_Replace_Mix]^input = input.substring ( 3 ) ;^242^^^^^227^257^input = input.substring ( 1 ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P3_Replace_Literal]^len = input.length() - 0 ;^243^^^^^228^258^len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P3_Replace_Literal]^char c = input.charAt ( 4 ) ;^240^^^^^225^255^char c = input.charAt ( 0 ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P8_Replace_Mix]^char c = numberStr.charAt ( 0 ) ;^240^^^^^225^255^char c = input.charAt ( 0 ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P3_Replace_Literal]^len = input.length() + 1 ;^243^^^^^228^258^len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P8_Replace_Mix]^len = cmpStr.charAt (  ) ;^243^^^^^228^258^len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P2_Replace_Operator]^if  ( c > '9' && c < '0' )  {^251^^^^^236^266^if  ( c > '9' || c < '0' )  {^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P2_Replace_Operator]^if  ( c >= '9' || c < '0' )  {^251^^^^^236^266^if  ( c > '9' || c < '0' )  {^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P2_Replace_Operator]^if  ( c > '9' || c <= '0' )  {^251^^^^^236^266^if  ( c > '9' || c < '0' )  {^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P6_Replace_Expression]^if  ( c > '9' ) {^251^^^^^236^266^if  ( c > '9' || c < '0' )  {^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P6_Replace_Expression]^if  (  c < '0' )  {^251^^^^^236^266^if  ( c > '9' || c < '0' )  {^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P15_Unwrap_Block]^try {    return ((long) (com.fasterxml.jackson.core.io.NumberInput.parseDouble(input)));} catch (java.lang.NumberFormatException e) {    return defaultValue;};^251^252^253^254^255^236^266^if  ( c > '9' || c < '0' )  { try { return  ( long )  parseDouble ( input ) ; } catch  ( NumberFormatException e )  { return defaultValue; }^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P16_Remove_Block]^^251^252^253^254^255^236^266^if  ( c > '9' || c < '0' )  { try { return  ( long )  parseDouble ( input ) ; } catch  ( NumberFormatException e )  { return defaultValue; }^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P1_Replace_Type]^return  (  int  )  parseDouble ( input ) ;^253^^^^^238^268^return  ( long )  parseDouble ( input ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P5_Replace_Variable]^return  ( long )  parseDouble ( str ) ;^253^^^^^238^268^return  ( long )  parseDouble ( input ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P7_Replace_Invocation]^return  ( long )  parseLong ( input ) ;^253^^^^^238^268^return  ( long )  parseDouble ( input ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P8_Replace_Mix]^return  ( long )  parseLong ( str ) ;^253^^^^^238^268^return  ( long )  parseDouble ( input ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P1_Replace_Type]^return  (  short  )  parseDouble ( input ) ;^253^^^^^238^268^return  ( long )  parseDouble ( input ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P8_Replace_Mix]^return  ( long )  parseDouble ( cmpStr ) ;^253^^^^^238^268^return  ( long )  parseDouble ( input ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P14_Delete_Statement]^^253^^^^^238^268^return  ( long )  parseDouble ( input ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P5_Replace_Variable]^return val;^255^^^^^240^270^return defaultValue;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P8_Replace_Mix]^return  ( long )  parseDouble ( numberStr ) ;^253^^^^^238^268^return  ( long )  parseDouble ( input ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P2_Replace_Operator]^for  ( ; i <= len; ++i )  {^248^^^^^233^263^for  ( ; i < len; ++i )  {^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P5_Replace_Variable]^for  ( ; len < len; ++i )  {^248^^^^^233^263^for  ( ; i < len; ++i )  {^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P5_Replace_Variable]^for  ( ; i < i; ++i )  {^248^^^^^233^263^for  ( ; i < len; ++i )  {^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P5_Replace_Variable]^for  ( ; len < i; ++i )  {^248^^^^^233^263^for  ( ; i < len; ++i )  {^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P2_Replace_Operator]^if  ( c < '9' || c < '0' )  {^251^^^^^236^266^if  ( c > '9' || c < '0' )  {^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P8_Replace_Mix]^return  ( long )  parseLong ( cmpStr ) ;^253^^^^^238^268^return  ( long )  parseDouble ( input ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P1_Replace_Type]^int c = input.charAt ( i ) ;^249^^^^^234^264^char c = input.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P5_Replace_Variable]^char c = cmpStr.charAt ( i ) ;^249^^^^^234^264^char c = input.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P5_Replace_Variable]^char c = lennput.charAt ( i ) ;^249^^^^^234^264^char c = input.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P5_Replace_Variable]^char c = i.charAt ( input ) ;^249^^^^^234^264^char c = input.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P5_Replace_Variable]^char c = inputnput.charAt ( i ) ;^249^^^^^234^264^char c = input.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P7_Replace_Invocation]^char c = input .trim (  )  ;^249^^^^^234^264^char c = input.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P8_Replace_Mix]^char c = input.charAt ( i++ ) ;^249^^^^^234^264^char c = input.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P8_Replace_Mix]^char c = input.charAt ( i-- ) ;^249^^^^^234^264^char c = input.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P11_Insert_Donor_Statement]^char c = input.charAt ( 0 ) ;char c = input.charAt ( i ) ;^249^^^^^234^264^char c = input.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P11_Insert_Donor_Statement]^int len = input.length (  ) ;char c = input.charAt ( i ) ;^249^^^^^234^264^char c = input.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P11_Insert_Donor_Statement]^char c = str.charAt ( 0 ) ;char c = input.charAt ( i ) ;^249^^^^^234^264^char c = input.charAt ( i ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P8_Replace_Mix]^return  ( long )  parseLong ( numberStr ) ;^253^^^^^238^268^return  ( long )  parseDouble ( input ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P5_Replace_Variable]^return Long.parseLong ( str ) ;^260^^^^^245^275^return Long.parseLong ( input ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P7_Replace_Invocation]^return Long .parseLong ( 3 , len , len )  ;^260^^^^^245^275^return Long.parseLong ( input ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P5_Replace_Variable]^return Long.parseLong ( cmpStr ) ;^260^^^^^245^275^return Long.parseLong ( input ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P8_Replace_Mix]^return Long.parseLong ( numberStr ) ;^260^^^^^245^275^return Long.parseLong ( input ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P14_Delete_Statement]^^260^^^^^245^275^return Long.parseLong ( input ) ;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P5_Replace_Variable]^return val;^262^^^^^247^277^return defaultValue;^[CLASS] NumberInput  [METHOD] parseAsLong [RETURN_TYPE] long   String input long defaultValue [VARIABLES] char  c  NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  i  len  
[P2_Replace_Operator]^if  ( input != null )  {^267^^^^^265^279^if  ( input == null )  {^[CLASS] NumberInput  [METHOD] parseAsDouble [RETURN_TYPE] double   String input double defaultValue [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  double  defaultValue  int  len  
[P5_Replace_Variable]^if  ( numberStr == null )  {^267^^^^^265^279^if  ( input == null )  {^[CLASS] NumberInput  [METHOD] parseAsDouble [RETURN_TYPE] double   String input double defaultValue [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  double  defaultValue  int  len  
[P8_Replace_Mix]^if  ( input == true )  {^267^^^^^265^279^if  ( input == null )  {^[CLASS] NumberInput  [METHOD] parseAsDouble [RETURN_TYPE] double   String input double defaultValue [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  double  defaultValue  int  len  
[P15_Unwrap_Block]^return defaultValue;^267^268^269^^^265^279^if  ( input == null )  { return defaultValue; }^[CLASS] NumberInput  [METHOD] parseAsDouble [RETURN_TYPE] double   String input double defaultValue [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  double  defaultValue  int  len  
[P16_Remove_Block]^^267^268^269^^^265^279^if  ( input == null )  { return defaultValue; }^[CLASS] NumberInput  [METHOD] parseAsDouble [RETURN_TYPE] double   String input double defaultValue [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  double  defaultValue  int  len  
[P5_Replace_Variable]^input = str.trim (  ) ;^270^^^^^265^279^input = input.trim (  ) ;^[CLASS] NumberInput  [METHOD] parseAsDouble [RETURN_TYPE] double   String input double defaultValue [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  double  defaultValue  int  len  
[P7_Replace_Invocation]^input = input.charAt (  ) ;^270^^^^^265^279^input = input.trim (  ) ;^[CLASS] NumberInput  [METHOD] parseAsDouble [RETURN_TYPE] double   String input double defaultValue [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  double  defaultValue  int  len  
[P11_Insert_Donor_Statement]^input = input.substring ( 1 ) ;input = input.trim (  ) ;^270^^^^^265^279^input = input.trim (  ) ;^[CLASS] NumberInput  [METHOD] parseAsDouble [RETURN_TYPE] double   String input double defaultValue [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  double  defaultValue  int  len  
[P11_Insert_Donor_Statement]^len = input.length (  ) ;input = input.trim (  ) ;^270^^^^^265^279^input = input.trim (  ) ;^[CLASS] NumberInput  [METHOD] parseAsDouble [RETURN_TYPE] double   String input double defaultValue [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  double  defaultValue  int  len  
[P14_Delete_Statement]^^270^271^^^^265^279^input = input.trim (  ) ; int len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsDouble [RETURN_TYPE] double   String input double defaultValue [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  double  defaultValue  int  len  
[P11_Insert_Donor_Statement]^char c = input.charAt ( 0 ) ;input = input.trim (  ) ;^270^^^^^265^279^input = input.trim (  ) ;^[CLASS] NumberInput  [METHOD] parseAsDouble [RETURN_TYPE] double   String input double defaultValue [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  double  defaultValue  int  len  
[P11_Insert_Donor_Statement]^int len = input.length (  ) ;input = input.trim (  ) ;^270^^^^^265^279^input = input.trim (  ) ;^[CLASS] NumberInput  [METHOD] parseAsDouble [RETURN_TYPE] double   String input double defaultValue [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  double  defaultValue  int  len  
[P11_Insert_Donor_Statement]^char c = input.charAt ( i ) ;input = input.trim (  ) ;^270^^^^^265^279^input = input.trim (  ) ;^[CLASS] NumberInput  [METHOD] parseAsDouble [RETURN_TYPE] double   String input double defaultValue [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  double  defaultValue  int  len  
[P1_Replace_Type]^short  len = input.length (  ) ;^271^^^^^265^279^int len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsDouble [RETURN_TYPE] double   String input double defaultValue [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  double  defaultValue  int  len  
[P3_Replace_Literal]^int len = input.length() + 0 ;^271^^^^^265^279^int len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsDouble [RETURN_TYPE] double   String input double defaultValue [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  double  defaultValue  int  len  
[P5_Replace_Variable]^int len = str.length (  ) ;^271^^^^^265^279^int len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsDouble [RETURN_TYPE] double   String input double defaultValue [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  double  defaultValue  int  len  
[P7_Replace_Invocation]^int len = input.charAt (  ) ;^271^^^^^265^279^int len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsDouble [RETURN_TYPE] double   String input double defaultValue [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  double  defaultValue  int  len  
[P7_Replace_Invocation]^int len = input .substring ( len )  ;^271^^^^^265^279^int len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsDouble [RETURN_TYPE] double   String input double defaultValue [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  double  defaultValue  int  len  
[P11_Insert_Donor_Statement]^int actualLen = numberStr.length (  ) ;int len = input.length (  ) ;^271^^^^^265^279^int len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsDouble [RETURN_TYPE] double   String input double defaultValue [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  double  defaultValue  int  len  
[P11_Insert_Donor_Statement]^char c = input.charAt ( 0 ) ;int len = input.length (  ) ;^271^^^^^265^279^int len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsDouble [RETURN_TYPE] double   String input double defaultValue [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  double  defaultValue  int  len  
[P11_Insert_Donor_Statement]^int length = str.length (  ) ;int len = input.length (  ) ;^271^^^^^265^279^int len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsDouble [RETURN_TYPE] double   String input double defaultValue [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  double  defaultValue  int  len  
[P11_Insert_Donor_Statement]^int cmpLen = cmpStr.length (  ) ;int len = input.length (  ) ;^271^^^^^265^279^int len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsDouble [RETURN_TYPE] double   String input double defaultValue [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  double  defaultValue  int  len  
[P11_Insert_Donor_Statement]^char c = input.charAt ( i ) ;int len = input.length (  ) ;^271^^^^^265^279^int len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsDouble [RETURN_TYPE] double   String input double defaultValue [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  double  defaultValue  int  len  
[P3_Replace_Literal]^int len = input.length() + 2 ;^271^^^^^265^279^int len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsDouble [RETURN_TYPE] double   String input double defaultValue [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  double  defaultValue  int  len  
[P14_Delete_Statement]^^271^^^^^265^279^int len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsDouble [RETURN_TYPE] double   String input double defaultValue [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  double  defaultValue  int  len  
[P11_Insert_Donor_Statement]^input = input.substring ( 1 ) ;int len = input.length (  ) ;^271^^^^^265^279^int len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsDouble [RETURN_TYPE] double   String input double defaultValue [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  double  defaultValue  int  len  
[P11_Insert_Donor_Statement]^input = input.trim (  ) ;int len = input.length (  ) ;^271^^^^^265^279^int len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsDouble [RETURN_TYPE] double   String input double defaultValue [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  double  defaultValue  int  len  
[P11_Insert_Donor_Statement]^len = input.length (  ) ;int len = input.length (  ) ;^271^^^^^265^279^int len = input.length (  ) ;^[CLASS] NumberInput  [METHOD] parseAsDouble [RETURN_TYPE] double   String input double defaultValue [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  double  defaultValue  int  len  
[P2_Replace_Operator]^if  ( len != 0 )  {^272^^^^^265^279^if  ( len == 0 )  {^[CLASS] NumberInput  [METHOD] parseAsDouble [RETURN_TYPE] double   String input double defaultValue [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  double  defaultValue  int  len  
[P3_Replace_Literal]^if  ( len == len )  {^272^^^^^265^279^if  ( len == 0 )  {^[CLASS] NumberInput  [METHOD] parseAsDouble [RETURN_TYPE] double   String input double defaultValue [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  double  defaultValue  int  len  
[P8_Replace_Mix]^if  ( len == 0 - 4 )  {^272^^^^^265^279^if  ( len == 0 )  {^[CLASS] NumberInput  [METHOD] parseAsDouble [RETURN_TYPE] double   String input double defaultValue [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  double  defaultValue  int  len  
[P9_Replace_Statement]^if  ( length <= 9 )  {^272^^^^^265^279^if  ( len == 0 )  {^[CLASS] NumberInput  [METHOD] parseAsDouble [RETURN_TYPE] double   String input double defaultValue [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  double  defaultValue  int  len  
[P9_Replace_Statement]^if  ( diff != 0 )  {^272^^^^^265^279^if  ( len == 0 )  {^[CLASS] NumberInput  [METHOD] parseAsDouble [RETURN_TYPE] double   String input double defaultValue [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  double  defaultValue  int  len  
[P9_Replace_Statement]^if  ( c == '+' )  {^272^^^^^265^279^if  ( len == 0 )  {^[CLASS] NumberInput  [METHOD] parseAsDouble [RETURN_TYPE] double   String input double defaultValue [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  double  defaultValue  int  len  
[P9_Replace_Statement]^if  ( length > 9 )  {^272^^^^^265^279^if  ( len == 0 )  {^[CLASS] NumberInput  [METHOD] parseAsDouble [RETURN_TYPE] double   String input double defaultValue [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  double  defaultValue  int  len  
[P15_Unwrap_Block]^return defaultValue;^272^273^274^^^265^279^if  ( len == 0 )  { return defaultValue; }^[CLASS] NumberInput  [METHOD] parseAsDouble [RETURN_TYPE] double   String input double defaultValue [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  double  defaultValue  int  len  
[P16_Remove_Block]^^272^273^274^^^265^279^if  ( len == 0 )  { return defaultValue; }^[CLASS] NumberInput  [METHOD] parseAsDouble [RETURN_TYPE] double   String input double defaultValue [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  double  defaultValue  int  len  
[P5_Replace_Variable]^return parseDouble ( cmpStr ) ;^276^^^^^265^279^return parseDouble ( input ) ;^[CLASS] NumberInput  [METHOD] parseAsDouble [RETURN_TYPE] double   String input double defaultValue [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  double  defaultValue  int  len  
[P7_Replace_Invocation]^return parseLong ( input ) ;^276^^^^^265^279^return parseDouble ( input ) ;^[CLASS] NumberInput  [METHOD] parseAsDouble [RETURN_TYPE] double   String input double defaultValue [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  double  defaultValue  int  len  
[P5_Replace_Variable]^return parseDouble ( numberStr ) ;^276^^^^^265^279^return parseDouble ( input ) ;^[CLASS] NumberInput  [METHOD] parseAsDouble [RETURN_TYPE] double   String input double defaultValue [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  double  defaultValue  int  len  
[P8_Replace_Mix]^return parseLong ( cmpStr ) ;^276^^^^^265^279^return parseDouble ( input ) ;^[CLASS] NumberInput  [METHOD] parseAsDouble [RETURN_TYPE] double   String input double defaultValue [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  double  defaultValue  int  len  
[P14_Delete_Statement]^^276^^^^^265^279^return parseDouble ( input ) ;^[CLASS] NumberInput  [METHOD] parseAsDouble [RETURN_TYPE] double   String input double defaultValue [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  double  defaultValue  int  len  
[P5_Replace_Variable]^return parseDouble ( str ) ;^276^^^^^265^279^return parseDouble ( input ) ;^[CLASS] NumberInput  [METHOD] parseAsDouble [RETURN_TYPE] double   String input double defaultValue [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  boolean  long  L_BILLION  defaultValue  val  double  defaultValue  int  len  
[P5_Replace_Variable]^if  ( NASTY_SMALL_DOUBLE.equals ( str )  )  {^287^^^^^281^291^if  ( NASTY_SMALL_DOUBLE.equals ( numStr )  )  {^[CLASS] NumberInput  [METHOD] parseDouble [RETURN_TYPE] double   String numStr [VARIABLES] long  L_BILLION  defaultValue  val  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  boolean  
[P5_Replace_Variable]^if  ( str.equals ( numStr )  )  {^287^^^^^281^291^if  ( NASTY_SMALL_DOUBLE.equals ( numStr )  )  {^[CLASS] NumberInput  [METHOD] parseDouble [RETURN_TYPE] double   String numStr [VARIABLES] long  L_BILLION  defaultValue  val  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  boolean  
[P5_Replace_Variable]^if  ( numStr.equals ( NASTY_SMALL_DOUBLE )  )  {^287^^^^^281^291^if  ( NASTY_SMALL_DOUBLE.equals ( numStr )  )  {^[CLASS] NumberInput  [METHOD] parseDouble [RETURN_TYPE] double   String numStr [VARIABLES] long  L_BILLION  defaultValue  val  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  boolean  
[P7_Replace_Invocation]^if  ( NASTY_SMALL_DOUBLE.substring ( numStr )  )  {^287^^^^^281^291^if  ( NASTY_SMALL_DOUBLE.equals ( numStr )  )  {^[CLASS] NumberInput  [METHOD] parseDouble [RETURN_TYPE] double   String numStr [VARIABLES] long  L_BILLION  defaultValue  val  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  boolean  
[P15_Unwrap_Block]^return java.lang.Double.MIN_VALUE;^287^288^289^^^281^291^if  ( NASTY_SMALL_DOUBLE.equals ( numStr )  )  { return Double.MIN_VALUE; }^[CLASS] NumberInput  [METHOD] parseDouble [RETURN_TYPE] double   String numStr [VARIABLES] long  L_BILLION  defaultValue  val  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  boolean  
[P16_Remove_Block]^^287^288^289^^^281^291^if  ( NASTY_SMALL_DOUBLE.equals ( numStr )  )  { return Double.MIN_VALUE; }^[CLASS] NumberInput  [METHOD] parseDouble [RETURN_TYPE] double   String numStr [VARIABLES] long  L_BILLION  defaultValue  val  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  boolean  
[P8_Replace_Mix]^if  ( str.substring ( numStr )  )  {^287^^^^^281^291^if  ( NASTY_SMALL_DOUBLE.equals ( numStr )  )  {^[CLASS] NumberInput  [METHOD] parseDouble [RETURN_TYPE] double   String numStr [VARIABLES] long  L_BILLION  defaultValue  val  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  boolean  
[P13_Insert_Block]^if  ( equals ( numStr )  )  {     return MIN_VALUE; }^287^^^^^281^291^[Delete]^[CLASS] NumberInput  [METHOD] parseDouble [RETURN_TYPE] double   String numStr [VARIABLES] long  L_BILLION  defaultValue  val  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  boolean  
[P5_Replace_Variable]^return Double.parseDouble ( str ) ;^290^^^^^281^291^return Double.parseDouble ( numStr ) ;^[CLASS] NumberInput  [METHOD] parseDouble [RETURN_TYPE] double   String numStr [VARIABLES] long  L_BILLION  defaultValue  val  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  boolean  
[P8_Replace_Mix]^return Double.parseDouble ( input ) ;^290^^^^^281^291^return Double.parseDouble ( numStr ) ;^[CLASS] NumberInput  [METHOD] parseDouble [RETURN_TYPE] double   String numStr [VARIABLES] long  L_BILLION  defaultValue  val  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  boolean  
[P14_Delete_Statement]^^290^^^^^281^291^return Double.parseDouble ( numStr ) ;^[CLASS] NumberInput  [METHOD] parseDouble [RETURN_TYPE] double   String numStr [VARIABLES] long  L_BILLION  defaultValue  val  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  boolean  
[P5_Replace_Variable]^return new BigDecimal ( numberStr ) ;^296^^^^^293^300^return new BigDecimal ( numStr ) ;^[CLASS] NumberInput  [METHOD] parseBigDecimal [RETURN_TYPE] BigDecimal   String numStr [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  boolean  long  L_BILLION  defaultValue  val  
[P8_Replace_Mix]^return new BigDecimal ( input ) ;^296^^^^^293^300^return new BigDecimal ( numStr ) ;^[CLASS] NumberInput  [METHOD] parseBigDecimal [RETURN_TYPE] BigDecimal   String numStr [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  boolean  long  L_BILLION  defaultValue  val  
[P5_Replace_Variable]^return new BigDecimal ( str ) ;^296^^^^^293^300^return new BigDecimal ( numStr ) ;^[CLASS] NumberInput  [METHOD] parseBigDecimal [RETURN_TYPE] BigDecimal   String numStr [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  boolean  long  L_BILLION  defaultValue  val  
[P5_Replace_Variable]^throw _badBigDecimal ( str ) ;^298^^^^^293^300^throw _badBigDecimal ( numStr ) ;^[CLASS] NumberInput  [METHOD] parseBigDecimal [RETURN_TYPE] BigDecimal   String numStr [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  boolean  long  L_BILLION  defaultValue  val  
[P7_Replace_Invocation]^throw parseBigDecimal ( numStr ) ;^298^^^^^293^300^throw _badBigDecimal ( numStr ) ;^[CLASS] NumberInput  [METHOD] parseBigDecimal [RETURN_TYPE] BigDecimal   String numStr [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  boolean  long  L_BILLION  defaultValue  val  
[P8_Replace_Mix]^throw parseBigDecimal ( str ) ;^298^^^^^293^300^throw _badBigDecimal ( numStr ) ;^[CLASS] NumberInput  [METHOD] parseBigDecimal [RETURN_TYPE] BigDecimal   String numStr [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  boolean  long  L_BILLION  defaultValue  val  
[P14_Delete_Statement]^^298^^^^^293^300^throw _badBigDecimal ( numStr ) ;^[CLASS] NumberInput  [METHOD] parseBigDecimal [RETURN_TYPE] BigDecimal   String numStr [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  boolean  long  L_BILLION  defaultValue  val  
[P3_Replace_Literal]^return parseBigDecimal ( buffer, -3, buffer.length ) ;^303^^^^^302^304^return parseBigDecimal ( buffer, 0, buffer.length ) ;^[CLASS] NumberInput  [METHOD] parseBigDecimal [RETURN_TYPE] BigDecimal   char[] buffer [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  boolean  long  L_BILLION  defaultValue  val  char[]  buffer  
[P5_Replace_Variable]^return parseBigDecimal (  0, buffer.length ) ;^303^^^^^302^304^return parseBigDecimal ( buffer, 0, buffer.length ) ;^[CLASS] NumberInput  [METHOD] parseBigDecimal [RETURN_TYPE] BigDecimal   char[] buffer [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  boolean  long  L_BILLION  defaultValue  val  char[]  buffer  
[P5_Replace_Variable]^return parseBigDecimal ( buffer, 0 ) ;^303^^^^^302^304^return parseBigDecimal ( buffer, 0, buffer.length ) ;^[CLASS] NumberInput  [METHOD] parseBigDecimal [RETURN_TYPE] BigDecimal   char[] buffer [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  boolean  long  L_BILLION  defaultValue  val  char[]  buffer  
[P5_Replace_Variable]^return parseBigDecimal ( buffer.length, 0, buffer ) ;^303^^^^^302^304^return parseBigDecimal ( buffer, 0, buffer.length ) ;^[CLASS] NumberInput  [METHOD] parseBigDecimal [RETURN_TYPE] BigDecimal   char[] buffer [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  boolean  long  L_BILLION  defaultValue  val  char[]  buffer  
[P7_Replace_Invocation]^return parseInt ( buffer, 0, buffer.length ) ;^303^^^^^302^304^return parseBigDecimal ( buffer, 0, buffer.length ) ;^[CLASS] NumberInput  [METHOD] parseBigDecimal [RETURN_TYPE] BigDecimal   char[] buffer [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  boolean  long  L_BILLION  defaultValue  val  char[]  buffer  
[P14_Delete_Statement]^^303^^^^^302^304^return parseBigDecimal ( buffer, 0, buffer.length ) ;^[CLASS] NumberInput  [METHOD] parseBigDecimal [RETURN_TYPE] BigDecimal   char[] buffer [VARIABLES] String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  boolean  long  L_BILLION  defaultValue  val  char[]  buffer  
[P4_Replace_Constructor]^return return  new String ( buffer, offset, len )  ;^310^^^^^306^314^return new BigDecimal ( buffer, offset, len ) ;^[CLASS] NumberInput  [METHOD] parseBigDecimal [RETURN_TYPE] BigDecimal   char[] buffer int offset int len [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  len  offset  char[]  buffer  
[P4_Replace_Constructor]^return new BigDecimal (  offset, len ) ;^310^^^^^306^314^return new BigDecimal ( buffer, offset, len ) ;^[CLASS] NumberInput  [METHOD] parseBigDecimal [RETURN_TYPE] BigDecimal   char[] buffer int offset int len [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  len  offset  char[]  buffer  
[P4_Replace_Constructor]^return new BigDecimal ( buffer,  len ) ;^310^^^^^306^314^return new BigDecimal ( buffer, offset, len ) ;^[CLASS] NumberInput  [METHOD] parseBigDecimal [RETURN_TYPE] BigDecimal   char[] buffer int offset int len [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  len  offset  char[]  buffer  
[P4_Replace_Constructor]^return new BigDecimal ( buffer, offset ) ;^310^^^^^306^314^return new BigDecimal ( buffer, offset, len ) ;^[CLASS] NumberInput  [METHOD] parseBigDecimal [RETURN_TYPE] BigDecimal   char[] buffer int offset int len [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  len  offset  char[]  buffer  
[P5_Replace_Variable]^return new BigDecimal ( buffer, offset, offset ) ;^310^^^^^306^314^return new BigDecimal ( buffer, offset, len ) ;^[CLASS] NumberInput  [METHOD] parseBigDecimal [RETURN_TYPE] BigDecimal   char[] buffer int offset int len [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  len  offset  char[]  buffer  
[P5_Replace_Variable]^return new BigDecimal ( len, offset, buffer ) ;^310^^^^^306^314^return new BigDecimal ( buffer, offset, len ) ;^[CLASS] NumberInput  [METHOD] parseBigDecimal [RETURN_TYPE] BigDecimal   char[] buffer int offset int len [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  len  offset  char[]  buffer  
[P5_Replace_Variable]^return new BigDecimal ( buffer, len, offset ) ;^310^^^^^306^314^return new BigDecimal ( buffer, offset, len ) ;^[CLASS] NumberInput  [METHOD] parseBigDecimal [RETURN_TYPE] BigDecimal   char[] buffer int offset int len [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  len  offset  char[]  buffer  
[P8_Replace_Mix]^return  new String ( buffer, offset, len )  ;^310^^^^^306^314^return new BigDecimal ( buffer, offset, len ) ;^[CLASS] NumberInput  [METHOD] parseBigDecimal [RETURN_TYPE] BigDecimal   char[] buffer int offset int len [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  len  offset  char[]  buffer  
[P5_Replace_Variable]^return new BigDecimal ( offset, buffer, len ) ;^310^^^^^306^314^return new BigDecimal ( buffer, offset, len ) ;^[CLASS] NumberInput  [METHOD] parseBigDecimal [RETURN_TYPE] BigDecimal   char[] buffer int offset int len [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  len  offset  char[]  buffer  
[P8_Replace_Mix]^return new BigDecimal ( buffer, len, len ) ;^310^^^^^306^314^return new BigDecimal ( buffer, offset, len ) ;^[CLASS] NumberInput  [METHOD] parseBigDecimal [RETURN_TYPE] BigDecimal   char[] buffer int offset int len [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  len  offset  char[]  buffer  
[P1_Replace_Type]^throw _badBigDecimal ( new char ( buffer, offset, len )  ) ;^312^^^^^306^314^throw _badBigDecimal ( new String ( buffer, offset, len )  ) ;^[CLASS] NumberInput  [METHOD] parseBigDecimal [RETURN_TYPE] BigDecimal   char[] buffer int offset int len [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  len  offset  char[]  buffer  
[P4_Replace_Constructor]^throw _badBigDecimal ( throw _badBigDecimal (  new BigDecimal ( buffer, offset, len )   ) ;^312^^^^^306^314^throw _badBigDecimal ( new String ( buffer, offset, len )  ) ;^[CLASS] NumberInput  [METHOD] parseBigDecimal [RETURN_TYPE] BigDecimal   char[] buffer int offset int len [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  len  offset  char[]  buffer  
[P4_Replace_Constructor]^throw _badBigDecimal ( new String (  offset, len )  ) ;^312^^^^^306^314^throw _badBigDecimal ( new String ( buffer, offset, len )  ) ;^[CLASS] NumberInput  [METHOD] parseBigDecimal [RETURN_TYPE] BigDecimal   char[] buffer int offset int len [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  len  offset  char[]  buffer  
[P4_Replace_Constructor]^throw _badBigDecimal ( new String ( buffer,  len )  ) ;^312^^^^^306^314^throw _badBigDecimal ( new String ( buffer, offset, len )  ) ;^[CLASS] NumberInput  [METHOD] parseBigDecimal [RETURN_TYPE] BigDecimal   char[] buffer int offset int len [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  len  offset  char[]  buffer  
[P4_Replace_Constructor]^throw _badBigDecimal ( new String ( buffer, offset )  ) ;^312^^^^^306^314^throw _badBigDecimal ( new String ( buffer, offset, len )  ) ;^[CLASS] NumberInput  [METHOD] parseBigDecimal [RETURN_TYPE] BigDecimal   char[] buffer int offset int len [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  len  offset  char[]  buffer  
[P5_Replace_Variable]^throw _badBigDecimal ( new String ( buffer, len, len )  ) ;^312^^^^^306^314^throw _badBigDecimal ( new String ( buffer, offset, len )  ) ;^[CLASS] NumberInput  [METHOD] parseBigDecimal [RETURN_TYPE] BigDecimal   char[] buffer int offset int len [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  len  offset  char[]  buffer  
[P5_Replace_Variable]^throw _badBigDecimal ( new String ( offset, buffer, len )  ) ;^312^^^^^306^314^throw _badBigDecimal ( new String ( buffer, offset, len )  ) ;^[CLASS] NumberInput  [METHOD] parseBigDecimal [RETURN_TYPE] BigDecimal   char[] buffer int offset int len [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  len  offset  char[]  buffer  
[P5_Replace_Variable]^throw _badBigDecimal ( new String ( buffer, len, offset )  ) ;^312^^^^^306^314^throw _badBigDecimal ( new String ( buffer, offset, len )  ) ;^[CLASS] NumberInput  [METHOD] parseBigDecimal [RETURN_TYPE] BigDecimal   char[] buffer int offset int len [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  len  offset  char[]  buffer  
[P5_Replace_Variable]^throw _badBigDecimal ( new String ( len, offset, buffer )  ) ;^312^^^^^306^314^throw _badBigDecimal ( new String ( buffer, offset, len )  ) ;^[CLASS] NumberInput  [METHOD] parseBigDecimal [RETURN_TYPE] BigDecimal   char[] buffer int offset int len [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  len  offset  char[]  buffer  
[P7_Replace_Invocation]^throw parseBigDecimal ( new String ( buffer, offset, len )  ) ;^312^^^^^306^314^throw _badBigDecimal ( new String ( buffer, offset, len )  ) ;^[CLASS] NumberInput  [METHOD] parseBigDecimal [RETURN_TYPE] BigDecimal   char[] buffer int offset int len [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  len  offset  char[]  buffer  
[P14_Delete_Statement]^^312^^^^^306^314^throw _badBigDecimal ( new String ( buffer, offset, len )  ) ;^[CLASS] NumberInput  [METHOD] parseBigDecimal [RETURN_TYPE] BigDecimal   char[] buffer int offset int len [VARIABLES] NumberFormatException  e  String  MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  boolean  long  L_BILLION  defaultValue  val  int  len  offset  char[]  buffer  