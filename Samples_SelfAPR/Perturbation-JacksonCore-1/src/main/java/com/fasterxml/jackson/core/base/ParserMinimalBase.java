[P1_Replace_Type]^protected final static  short  INT_TAB = '\t';^26^^^^^21^31^protected final static int INT_TAB = '\t';^[CLASS] ParserMinimalBase   [VARIABLES] 
[P8_Replace_Mix]^protected  static  short  INT_TAB = '\t';^26^^^^^21^31^protected final static int INT_TAB = '\t';^[CLASS] ParserMinimalBase   [VARIABLES] 
[P1_Replace_Type]^protected final static  short  INT_LF = '\n';^27^^^^^22^32^protected final static int INT_LF = '\n';^[CLASS] ParserMinimalBase   [VARIABLES] 
[P8_Replace_Mix]^protected final static int INT_LF  = null ;^27^^^^^22^32^protected final static int INT_LF = '\n';^[CLASS] ParserMinimalBase   [VARIABLES] 
[P1_Replace_Type]^protected final static  short  INT_CR = '\r';^28^^^^^23^33^protected final static int INT_CR = '\r';^[CLASS] ParserMinimalBase   [VARIABLES] 
[P1_Replace_Type]^protected final static  long  INT_SPACE = 0x0020;^29^^^^^24^34^protected final static int INT_SPACE = 0x0020;^[CLASS] ParserMinimalBase   [VARIABLES] 
[P1_Replace_Type]^protected final static  short  INT_LBRACKET = '[';^32^^^^^27^37^protected final static int INT_LBRACKET = '[';^[CLASS] ParserMinimalBase   [VARIABLES] 
[P8_Replace_Mix]^protected final static int INT_LBRACKET  = null ;^32^^^^^27^37^protected final static int INT_LBRACKET = '[';^[CLASS] ParserMinimalBase   [VARIABLES] 
[P1_Replace_Type]^protected final static  short  INT_RBRACKET = ']';^33^^^^^28^38^protected final static int INT_RBRACKET = ']';^[CLASS] ParserMinimalBase   [VARIABLES] 
[P1_Replace_Type]^protected final static  short  INT_LCURLY = '{';^34^^^^^29^39^protected final static int INT_LCURLY = '{';^[CLASS] ParserMinimalBase   [VARIABLES] 
[P1_Replace_Type]^protected final static  long  INT_RCURLY = '}';^35^^^^^30^40^protected final static int INT_RCURLY = '}';^[CLASS] ParserMinimalBase   [VARIABLES] 
[P8_Replace_Mix]^protected final static  short  INT_RCURLY = '}';^35^^^^^30^40^protected final static int INT_RCURLY = '}';^[CLASS] ParserMinimalBase   [VARIABLES] 
[P1_Replace_Type]^protected final static  long  INT_QUOTE = '"';^36^^^^^31^41^protected final static int INT_QUOTE = '"';^[CLASS] ParserMinimalBase   [VARIABLES] 
[P8_Replace_Mix]^protected final   short  INT_QUOTE = '"';^36^^^^^31^41^protected final static int INT_QUOTE = '"';^[CLASS] ParserMinimalBase   [VARIABLES] 
[P1_Replace_Type]^protected final static  long  INT_BACKSLASH = '\\';^37^^^^^32^42^protected final static int INT_BACKSLASH = '\\';^[CLASS] ParserMinimalBase   [VARIABLES] 
[P8_Replace_Mix]^protected final static  short  INT_BACKSLASH = '\\';^37^^^^^32^42^protected final static int INT_BACKSLASH = '\\';^[CLASS] ParserMinimalBase   [VARIABLES] 
[P1_Replace_Type]^protected final static  short  INT_SLASH = '/';^38^^^^^33^43^protected final static int INT_SLASH = '/';^[CLASS] ParserMinimalBase   [VARIABLES] 
[P8_Replace_Mix]^protected final static  long  INT_SLASH = '/';^38^^^^^33^43^protected final static int INT_SLASH = '/';^[CLASS] ParserMinimalBase   [VARIABLES] 
[P1_Replace_Type]^protected final static  short  INT_COLON = ':';^39^^^^^34^44^protected final static int INT_COLON = ':';^[CLASS] ParserMinimalBase   [VARIABLES] 
[P8_Replace_Mix]^protected final static int INT_COLON  = null ;^39^^^^^34^44^protected final static int INT_COLON = ':';^[CLASS] ParserMinimalBase   [VARIABLES] 
[P1_Replace_Type]^protected final static  long  INT_COMMA = ',';^40^^^^^35^45^protected final static int INT_COMMA = ',';^[CLASS] ParserMinimalBase   [VARIABLES] 
[P8_Replace_Mix]^protected final static  short  INT_COMMA = ',';^40^^^^^35^45^protected final static int INT_COMMA = ',';^[CLASS] ParserMinimalBase   [VARIABLES] 
[P1_Replace_Type]^protected final static  long  INT_ASTERISK = '*';^41^^^^^36^46^protected final static int INT_ASTERISK = '*';^[CLASS] ParserMinimalBase   [VARIABLES] 
[P8_Replace_Mix]^protected final static int INT_ASTERISK ;^41^^^^^36^46^protected final static int INT_ASTERISK = '*';^[CLASS] ParserMinimalBase   [VARIABLES] 
[P1_Replace_Type]^protected final static  short  INT_APOSTROPHE = '\'';^42^^^^^37^47^protected final static int INT_APOSTROPHE = '\'';^[CLASS] ParserMinimalBase   [VARIABLES] 
[P1_Replace_Type]^protected final static  long  INT_b = 'b';^45^^^^^40^50^protected final static int INT_b = 'b';^[CLASS] ParserMinimalBase   [VARIABLES] 
[P8_Replace_Mix]^protected  static  long  INT_b = 'b';^45^^^^^40^50^protected final static int INT_b = 'b';^[CLASS] ParserMinimalBase   [VARIABLES] 
[P1_Replace_Type]^protected final static  short  INT_f = 'f';^46^^^^^41^51^protected final static int INT_f = 'f';^[CLASS] ParserMinimalBase   [VARIABLES] 
[P1_Replace_Type]^protected final static  short  INT_n = 'n';^47^^^^^42^52^protected final static int INT_n = 'n';^[CLASS] ParserMinimalBase   [VARIABLES] 
[P8_Replace_Mix]^protected final static  long  INT_n = 'n';^47^^^^^42^52^protected final static int INT_n = 'n';^[CLASS] ParserMinimalBase   [VARIABLES] 
[P1_Replace_Type]^protected final static  short  INT_r = 'r';^48^^^^^43^53^protected final static int INT_r = 'r';^[CLASS] ParserMinimalBase   [VARIABLES] 
[P1_Replace_Type]^protected final static  long  INT_t = 't';^49^^^^^44^54^protected final static int INT_t = 't';^[CLASS] ParserMinimalBase   [VARIABLES] 
[P8_Replace_Mix]^protected final static int INT_t  = null ;^49^^^^^44^54^protected final static int INT_t = 't';^[CLASS] ParserMinimalBase   [VARIABLES] 
[P1_Replace_Type]^protected final static  short  INT_u = 'u';^50^^^^^45^55^protected final static int INT_u = 'u';^[CLASS] ParserMinimalBase   [VARIABLES] 
[P8_Replace_Mix]^private JsonToken _lastClearedToken;^70^^^^^65^75^protected JsonToken _lastClearedToken;^[CLASS] ParserMinimalBase   [VARIABLES] 
[P5_Replace_Variable]^super ( INT_SLASH ) ;^80^^^^^79^81^super ( features ) ;^[CLASS] ParserMinimalBase  [METHOD] <init> [RETURN_TYPE] ParserMinimalBase(int)   int features [VARIABLES] JsonToken  _currToken  _lastClearedToken  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  boolean  
[P8_Replace_Mix]^super ( INT_RCURLY ) ;^80^^^^^79^81^super ( features ) ;^[CLASS] ParserMinimalBase  [METHOD] <init> [RETURN_TYPE] ParserMinimalBase(int)   int features [VARIABLES] JsonToken  _currToken  _lastClearedToken  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  boolean  
[P14_Delete_Statement]^^80^^^^^79^81^super ( features ) ;^[CLASS] ParserMinimalBase  [METHOD] <init> [RETURN_TYPE] ParserMinimalBase(int)   int features [VARIABLES] JsonToken  _currToken  _lastClearedToken  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  boolean  
[P7_Replace_Invocation]^return VersionUtil.throwInternal ( getClass (  )  ) ;^85^^^^^84^86^return VersionUtil.versionFor ( getClass (  )  ) ;^[CLASS] ParserMinimalBase  [METHOD] version [RETURN_TYPE] Version   [VARIABLES] JsonToken  _currToken  _lastClearedToken  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  boolean  
[P7_Replace_Invocation]^return VersionUtil .throwInternal (  )  ;^85^^^^^84^86^return VersionUtil.versionFor ( getClass (  )  ) ;^[CLASS] ParserMinimalBase  [METHOD] version [RETURN_TYPE] Version   [VARIABLES] JsonToken  _currToken  _lastClearedToken  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  boolean  
[P7_Replace_Invocation]^return VersionUtil.versionFor ( Object (  )  ) ;^85^^^^^84^86^return VersionUtil.versionFor ( getClass (  )  ) ;^[CLASS] ParserMinimalBase  [METHOD] version [RETURN_TYPE] Version   [VARIABLES] JsonToken  _currToken  _lastClearedToken  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  boolean  
[P14_Delete_Statement]^^85^^^^^84^86^return VersionUtil.versionFor ( getClass (  )  ) ;^[CLASS] ParserMinimalBase  [METHOD] version [RETURN_TYPE] Version   [VARIABLES] JsonToken  _currToken  _lastClearedToken  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  boolean  
[P5_Replace_Variable]^return _lastClearedToken;^112^^^^^111^113^return _currToken;^[CLASS] ParserMinimalBase  [METHOD] getCurrentToken [RETURN_TYPE] JsonToken   [VARIABLES] JsonToken  _currToken  _lastClearedToken  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  boolean  
[P2_Replace_Operator]^return _currToken == null;^117^^^^^116^118^return _currToken != null;^[CLASS] ParserMinimalBase  [METHOD] hasCurrentToken [RETURN_TYPE] boolean   [VARIABLES] JsonToken  _currToken  _lastClearedToken  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  boolean  
[P5_Replace_Variable]^return _lastClearedToken != null;^117^^^^^116^118^return _currToken != null;^[CLASS] ParserMinimalBase  [METHOD] hasCurrentToken [RETURN_TYPE] boolean   [VARIABLES] JsonToken  _currToken  _lastClearedToken  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  boolean  
[P8_Replace_Mix]^return _currToken ;^117^^^^^116^118^return _currToken != null;^[CLASS] ParserMinimalBase  [METHOD] hasCurrentToken [RETURN_TYPE] boolean   [VARIABLES] JsonToken  _currToken  _lastClearedToken  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  boolean  
[P12_Insert_Condition]^if  ( _currToken != null )  { return _currToken != null; }^117^^^^^116^118^return _currToken != null;^[CLASS] ParserMinimalBase  [METHOD] hasCurrentToken [RETURN_TYPE] boolean   [VARIABLES] JsonToken  _currToken  _lastClearedToken  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  boolean  
[P7_Replace_Invocation]^JsonToken t = getText (  ) ;^128^^^^^121^133^JsonToken t = nextToken (  ) ;^[CLASS] ParserMinimalBase  [METHOD] nextValue [RETURN_TYPE] JsonToken   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  boolean  
[P14_Delete_Statement]^^128^^^^^121^133^JsonToken t = nextToken (  ) ;^[CLASS] ParserMinimalBase  [METHOD] nextValue [RETURN_TYPE] JsonToken   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  boolean  
[P11_Insert_Donor_Statement]^t = nextToken (  ) ;JsonToken t = nextToken (  ) ;^128^^^^^121^133^JsonToken t = nextToken (  ) ;^[CLASS] ParserMinimalBase  [METHOD] nextValue [RETURN_TYPE] JsonToken   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  boolean  
[P2_Replace_Operator]^if  ( t != JsonToken.FIELD_NAME )  {^129^^^^^121^133^if  ( t == JsonToken.FIELD_NAME )  {^[CLASS] ParserMinimalBase  [METHOD] nextValue [RETURN_TYPE] JsonToken   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  boolean  
[P5_Replace_Variable]^if  ( JsonToken.FIELD_NAME == t )  {^129^^^^^121^133^if  ( t == JsonToken.FIELD_NAME )  {^[CLASS] ParserMinimalBase  [METHOD] nextValue [RETURN_TYPE] JsonToken   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  boolean  
[P8_Replace_Mix]^if  ( _lastClearedToken == JsonToken.FIELD_NAME )  {^129^^^^^121^133^if  ( t == JsonToken.FIELD_NAME )  {^[CLASS] ParserMinimalBase  [METHOD] nextValue [RETURN_TYPE] JsonToken   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  boolean  
[P15_Unwrap_Block]^t = nextToken();^129^130^131^^^121^133^if  ( t == JsonToken.FIELD_NAME )  { t = nextToken (  ) ; }^[CLASS] ParserMinimalBase  [METHOD] nextValue [RETURN_TYPE] JsonToken   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  boolean  
[P16_Remove_Block]^^129^130^131^^^121^133^if  ( t == JsonToken.FIELD_NAME )  { t = nextToken (  ) ; }^[CLASS] ParserMinimalBase  [METHOD] nextValue [RETURN_TYPE] JsonToken   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  boolean  
[P7_Replace_Invocation]^t = getText (  ) ;^130^^^^^121^133^t = nextToken (  ) ;^[CLASS] ParserMinimalBase  [METHOD] nextValue [RETURN_TYPE] JsonToken   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  boolean  
[P8_Replace_Mix]^t ;^130^^^^^121^133^t = nextToken (  ) ;^[CLASS] ParserMinimalBase  [METHOD] nextValue [RETURN_TYPE] JsonToken   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  boolean  
[P14_Delete_Statement]^^130^^^^^121^133^t = nextToken (  ) ;^[CLASS] ParserMinimalBase  [METHOD] nextValue [RETURN_TYPE] JsonToken   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  boolean  
[P11_Insert_Donor_Statement]^JsonToken t = nextToken (  ) ;t = nextToken (  ) ;^130^^^^^121^133^t = nextToken (  ) ;^[CLASS] ParserMinimalBase  [METHOD] nextValue [RETURN_TYPE] JsonToken   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  boolean  
[P8_Replace_Mix]^t  =  t ;^130^^^^^121^133^t = nextToken (  ) ;^[CLASS] ParserMinimalBase  [METHOD] nextValue [RETURN_TYPE] JsonToken   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  boolean  
[P5_Replace_Variable]^return _lastClearedToken;^132^^^^^121^133^return t;^[CLASS] ParserMinimalBase  [METHOD] nextValue [RETURN_TYPE] JsonToken   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  boolean  
[P2_Replace_Operator]^if  ( _currToken != JsonToken.START_OBJECT || _currToken != JsonToken.START_ARRAY )  {^139^140^^^^124^154^if  ( _currToken != JsonToken.START_OBJECT && _currToken != JsonToken.START_ARRAY )  {^[CLASS] ParserMinimalBase  [METHOD] skipChildren [RETURN_TYPE] JsonParser   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[P2_Replace_Operator]^if  ( _currToken == JsonToken.START_OBJECT && _currToken != JsonToken.START_ARRAY )  {^139^140^^^^124^154^if  ( _currToken != JsonToken.START_OBJECT && _currToken != JsonToken.START_ARRAY )  {^[CLASS] ParserMinimalBase  [METHOD] skipChildren [RETURN_TYPE] JsonParser   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[P2_Replace_Operator]^if  ( _currToken != JsonToken.START_OBJECT && _currToken >= JsonToken.START_ARRAY )  {^139^140^^^^124^154^if  ( _currToken != JsonToken.START_OBJECT && _currToken != JsonToken.START_ARRAY )  {^[CLASS] ParserMinimalBase  [METHOD] skipChildren [RETURN_TYPE] JsonParser   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[P5_Replace_Variable]^if  ( t != JsonToken.START_OBJECT && _currToken != JsonToken.START_ARRAY )  {^139^140^^^^124^154^if  ( _currToken != JsonToken.START_OBJECT && _currToken != JsonToken.START_ARRAY )  {^[CLASS] ParserMinimalBase  [METHOD] skipChildren [RETURN_TYPE] JsonParser   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[P5_Replace_Variable]^if  ( JsonToken.START_OBJECT != _currToken && _currToken != JsonToken.START_ARRAY )  {^139^140^^^^124^154^if  ( _currToken != JsonToken.START_OBJECT && _currToken != JsonToken.START_ARRAY )  {^[CLASS] ParserMinimalBase  [METHOD] skipChildren [RETURN_TYPE] JsonParser   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[P5_Replace_Variable]^if  ( _currToken != JsonToken.START_ARRAY && _currToken != JsonToken.START_OBJECT )  {^139^140^^^^124^154^if  ( _currToken != JsonToken.START_OBJECT && _currToken != JsonToken.START_ARRAY )  {^[CLASS] ParserMinimalBase  [METHOD] skipChildren [RETURN_TYPE] JsonParser   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[P6_Replace_Expression]^if  ( _currToken != JsonToken.START_OBJECT ) {^139^140^^^^124^154^if  ( _currToken != JsonToken.START_OBJECT && _currToken != JsonToken.START_ARRAY )  {^[CLASS] ParserMinimalBase  [METHOD] skipChildren [RETURN_TYPE] JsonParser   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[P6_Replace_Expression]^if  (  _currToken != JsonToken.START_ARRAY )  {^139^140^^^^124^154^if  ( _currToken != JsonToken.START_OBJECT && _currToken != JsonToken.START_ARRAY )  {^[CLASS] ParserMinimalBase  [METHOD] skipChildren [RETURN_TYPE] JsonParser   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[P8_Replace_Mix]^if  ( _currToken != null && _currToken != JsonToken.START_ARRAY )  {^139^140^^^^124^154^if  ( _currToken != JsonToken.START_OBJECT && _currToken != JsonToken.START_ARRAY )  {^[CLASS] ParserMinimalBase  [METHOD] skipChildren [RETURN_TYPE] JsonParser   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[P15_Unwrap_Block]^return this;^139^140^141^142^^124^154^if  ( _currToken != JsonToken.START_OBJECT && _currToken != JsonToken.START_ARRAY )  { return this; }^[CLASS] ParserMinimalBase  [METHOD] skipChildren [RETURN_TYPE] JsonParser   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[P16_Remove_Block]^^139^140^141^142^^124^154^if  ( _currToken != JsonToken.START_OBJECT && _currToken != JsonToken.START_ARRAY )  { return this; }^[CLASS] ParserMinimalBase  [METHOD] skipChildren [RETURN_TYPE] JsonParser   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[P8_Replace_Mix]^return null;^141^^^^^139^142^return this;^[CLASS] ParserMinimalBase  [METHOD] skipChildren [RETURN_TYPE] JsonParser   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[P8_Replace_Mix]^return null;^141^^^^^126^156^return this;^[CLASS] ParserMinimalBase  [METHOD] skipChildren [RETURN_TYPE] JsonParser   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[P1_Replace_Type]^long  open = 1;^143^^^^^128^158^int open = 1;^[CLASS] ParserMinimalBase  [METHOD] skipChildren [RETURN_TYPE] JsonParser   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[P3_Replace_Literal]^int open = 4;^143^^^^^128^158^int open = 1;^[CLASS] ParserMinimalBase  [METHOD] skipChildren [RETURN_TYPE] JsonParser   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[P3_Replace_Literal]^while  ( false )  {^148^^^^^133^163^while  ( true )  {^[CLASS] ParserMinimalBase  [METHOD] skipChildren [RETURN_TYPE] JsonParser   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[P5_Replace_Variable]^while  ( _lastClearedTokenrue )  {^148^^^^^133^163^while  ( true )  {^[CLASS] ParserMinimalBase  [METHOD] skipChildren [RETURN_TYPE] JsonParser   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[P2_Replace_Operator]^if  ( t != null )  {^150^^^^^135^165^if  ( t == null )  {^[CLASS] ParserMinimalBase  [METHOD] skipChildren [RETURN_TYPE] JsonParser   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[P5_Replace_Variable]^if  ( _lastClearedToken == null )  {^150^^^^^135^165^if  ( t == null )  {^[CLASS] ParserMinimalBase  [METHOD] skipChildren [RETURN_TYPE] JsonParser   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[P8_Replace_Mix]^if  ( t == true )  {^150^^^^^135^165^if  ( t == null )  {^[CLASS] ParserMinimalBase  [METHOD] skipChildren [RETURN_TYPE] JsonParser   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[P9_Replace_Statement]^if  ( comment != null )  {^150^^^^^135^165^if  ( t == null )  {^[CLASS] ParserMinimalBase  [METHOD] skipChildren [RETURN_TYPE] JsonParser   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[P9_Replace_Statement]^if  ( msg != null )  {^150^^^^^135^165^if  ( t == null )  {^[CLASS] ParserMinimalBase  [METHOD] skipChildren [RETURN_TYPE] JsonParser   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[P9_Replace_Statement]^if  ( _currToken != null )  {^150^^^^^135^165^if  ( t == null )  {^[CLASS] ParserMinimalBase  [METHOD] skipChildren [RETURN_TYPE] JsonParser   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[P13_Insert_Block]^if  (  ( --open )  == 0 )  {     return this; }^150^^^^^135^165^[Delete]^[CLASS] ParserMinimalBase  [METHOD] skipChildren [RETURN_TYPE] JsonParser   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[P8_Replace_Mix]^return null;^156^^^^^141^171^return this;^[CLASS] ParserMinimalBase  [METHOD] skipChildren [RETURN_TYPE] JsonParser   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[P7_Replace_Invocation]^nextToken (  ) ;^151^^^^^136^166^_handleEOF (  ) ;^[CLASS] ParserMinimalBase  [METHOD] skipChildren [RETURN_TYPE] JsonParser   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[P14_Delete_Statement]^^151^^^^^136^166^_handleEOF (  ) ;^[CLASS] ParserMinimalBase  [METHOD] skipChildren [RETURN_TYPE] JsonParser   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[P2_Replace_Operator]^if  ( --open != 0 )  {^165^^^^^150^180^if  ( --open == 0 )  {^[CLASS] ParserMinimalBase  [METHOD] skipChildren [RETURN_TYPE] JsonParser   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[P3_Replace_Literal]^if  ( --open == INT_COMMA )  {^165^^^^^150^180^if  ( --open == 0 )  {^[CLASS] ParserMinimalBase  [METHOD] skipChildren [RETURN_TYPE] JsonParser   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[P8_Replace_Mix]^if  ( --open == 2 )  {^165^^^^^150^180^if  ( --open == 0 )  {^[CLASS] ParserMinimalBase  [METHOD] skipChildren [RETURN_TYPE] JsonParser   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[P15_Unwrap_Block]^return this;^165^166^167^^^150^180^if  ( --open == 0 )  { return this; }^[CLASS] ParserMinimalBase  [METHOD] skipChildren [RETURN_TYPE] JsonParser   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[P16_Remove_Block]^^165^166^167^^^150^180^if  ( --open == 0 )  { return this; }^[CLASS] ParserMinimalBase  [METHOD] skipChildren [RETURN_TYPE] JsonParser   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[P13_Insert_Block]^if  ( "true".equals ( str )  )  {     return true; }^165^^^^^150^180^[Delete]^[CLASS] ParserMinimalBase  [METHOD] skipChildren [RETURN_TYPE] JsonParser   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[P13_Insert_Block]^if  ( t == null )  {     _handleEOF (  ) ;     return this; }^165^^^^^150^180^[Delete]^[CLASS] ParserMinimalBase  [METHOD] skipChildren [RETURN_TYPE] JsonParser   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[P13_Insert_Block]^if  ( _hasTextualNull ( str )  )  {     return false; }^165^^^^^150^180^[Delete]^[CLASS] ParserMinimalBase  [METHOD] skipChildren [RETURN_TYPE] JsonParser   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[P8_Replace_Mix]^return null;^166^^^^^151^181^return this;^[CLASS] ParserMinimalBase  [METHOD] skipChildren [RETURN_TYPE] JsonParser   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[P7_Replace_Invocation]^JsonToken t = getText (  ) ;^149^^^^^134^164^JsonToken t = nextToken (  ) ;^[CLASS] ParserMinimalBase  [METHOD] skipChildren [RETURN_TYPE] JsonParser   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[P14_Delete_Statement]^^149^^^^^134^164^JsonToken t = nextToken (  ) ;^[CLASS] ParserMinimalBase  [METHOD] skipChildren [RETURN_TYPE] JsonParser   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[P11_Insert_Donor_Statement]^t = nextToken (  ) ;JsonToken t = nextToken (  ) ;^149^^^^^134^164^JsonToken t = nextToken (  ) ;^[CLASS] ParserMinimalBase  [METHOD] skipChildren [RETURN_TYPE] JsonParser   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[P8_Replace_Mix]^if  ( t == false )  {^150^^^^^135^165^if  ( t == null )  {^[CLASS] ParserMinimalBase  [METHOD] skipChildren [RETURN_TYPE] JsonParser   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[P3_Replace_Literal]^if  ( --open == INT_SLASH )  {^165^^^^^150^180^if  ( --open == 0 )  {^[CLASS] ParserMinimalBase  [METHOD] skipChildren [RETURN_TYPE] JsonParser   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[P8_Replace_Mix]^if  ( --open == 0L )  {^165^^^^^150^180^if  ( --open == 0 )  {^[CLASS] ParserMinimalBase  [METHOD] skipChildren [RETURN_TYPE] JsonParser   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[P2_Replace_Operator]^if  ( _currToken == null )  {^206^^^^^205^210^if  ( _currToken != null )  {^[CLASS] ParserMinimalBase  [METHOD] clearCurrentToken [RETURN_TYPE] void   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[P5_Replace_Variable]^if  ( t != null )  {^206^^^^^205^210^if  ( _currToken != null )  {^[CLASS] ParserMinimalBase  [METHOD] clearCurrentToken [RETURN_TYPE] void   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[P8_Replace_Mix]^if  ( _currToken != true )  {^206^^^^^205^210^if  ( _currToken != null )  {^[CLASS] ParserMinimalBase  [METHOD] clearCurrentToken [RETURN_TYPE] void   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[P9_Replace_Statement]^if  ( comment != null )  {^206^^^^^205^210^if  ( _currToken != null )  {^[CLASS] ParserMinimalBase  [METHOD] clearCurrentToken [RETURN_TYPE] void   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[P9_Replace_Statement]^if  ( msg != null )  {^206^^^^^205^210^if  ( _currToken != null )  {^[CLASS] ParserMinimalBase  [METHOD] clearCurrentToken [RETURN_TYPE] void   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[P9_Replace_Statement]^if  ( t == null )  {^206^^^^^205^210^if  ( _currToken != null )  {^[CLASS] ParserMinimalBase  [METHOD] clearCurrentToken [RETURN_TYPE] void   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[P15_Unwrap_Block]^_lastClearedToken = _currToken; _currToken = null;^206^207^208^209^^205^210^if  ( _currToken != null )  { _lastClearedToken = _currToken; _currToken = null; }^[CLASS] ParserMinimalBase  [METHOD] clearCurrentToken [RETURN_TYPE] void   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[P16_Remove_Block]^^206^207^208^209^^205^210^if  ( _currToken != null )  { _lastClearedToken = _currToken; _currToken = null; }^[CLASS] ParserMinimalBase  [METHOD] clearCurrentToken [RETURN_TYPE] void   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[P5_Replace_Variable]^_lastClearedToken = t;^207^^^^^205^210^_lastClearedToken = _currToken;^[CLASS] ParserMinimalBase  [METHOD] clearCurrentToken [RETURN_TYPE] void   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[P8_Replace_Mix]^_lastClearedToken  = null ;^207^^^^^205^210^_lastClearedToken = _currToken;^[CLASS] ParserMinimalBase  [METHOD] clearCurrentToken [RETURN_TYPE] void   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[P8_Replace_Mix]^_currToken = true;^208^^^^^205^210^_currToken = null;^[CLASS] ParserMinimalBase  [METHOD] clearCurrentToken [RETURN_TYPE] void   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[P12_Insert_Condition]^if  ( _currToken != null )  { _currToken = null; }^208^^^^^205^210^_currToken = null;^[CLASS] ParserMinimalBase  [METHOD] clearCurrentToken [RETURN_TYPE] void   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[P8_Replace_Mix]^_lastClearedToken ;^207^^^^^205^210^_lastClearedToken = _currToken;^[CLASS] ParserMinimalBase  [METHOD] clearCurrentToken [RETURN_TYPE] void   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[P8_Replace_Mix]^_currToken = this;^208^^^^^205^210^_currToken = null;^[CLASS] ParserMinimalBase  [METHOD] clearCurrentToken [RETURN_TYPE] void   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[P5_Replace_Variable]^return t;^214^^^^^213^215^return _lastClearedToken;^[CLASS] ParserMinimalBase  [METHOD] getLastClearedToken [RETURN_TYPE] JsonToken   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  boolean  
[P2_Replace_Operator]^if  ( _currToken == null )  {^261^^^^^260^289^if  ( _currToken != null )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsBoolean [RETURN_TYPE] boolean   boolean defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  boolean  defaultValue  String  str  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  
[P5_Replace_Variable]^if  ( t != null )  {^261^^^^^260^289^if  ( _currToken != null )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsBoolean [RETURN_TYPE] boolean   boolean defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  boolean  defaultValue  String  str  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  
[P6_Replace_Expression]^if  ( getIntValue() != 0 )  {^261^^^^^260^289^if  ( _currToken != null )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsBoolean [RETURN_TYPE] boolean   boolean defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  boolean  defaultValue  String  str  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  
[P6_Replace_Expression]^if  ( value instanceof Boolean )  {^261^^^^^260^289^if  ( _currToken != null )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsBoolean [RETURN_TYPE] boolean   boolean defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  boolean  defaultValue  String  str  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  
[P8_Replace_Mix]^if  ( _currToken != true )  {^261^^^^^260^289^if  ( _currToken != null )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsBoolean [RETURN_TYPE] boolean   boolean defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  boolean  defaultValue  String  str  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  
[P9_Replace_Statement]^if  ( comment != null )  {^261^^^^^260^289^if  ( _currToken != null )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsBoolean [RETURN_TYPE] boolean   boolean defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  boolean  defaultValue  String  str  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  
[P9_Replace_Statement]^if  ( msg != null )  {^261^^^^^260^289^if  ( _currToken != null )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsBoolean [RETURN_TYPE] boolean   boolean defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  boolean  defaultValue  String  str  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  
[P9_Replace_Statement]^if  ( t == null )  {^261^^^^^260^289^if  ( _currToken != null )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsBoolean [RETURN_TYPE] boolean   boolean defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  boolean  defaultValue  String  str  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  
[P2_Replace_Operator]^if  ( value  |  Boolean )  {^273^^^^^260^289^if  ( value instanceof Boolean )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsBoolean [RETURN_TYPE] boolean   boolean defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  boolean  defaultValue  String  str  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  
[P9_Replace_Statement]^if  ( value instanceof Number )  {^273^^^^^260^289^if  ( value instanceof Boolean )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsBoolean [RETURN_TYPE] boolean   boolean defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  boolean  defaultValue  String  str  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  
[P15_Unwrap_Block]^return ((java.lang.Boolean) (value));^273^274^275^^^260^289^if  ( value instanceof Boolean )  { return  ( Boolean )  value; }^[CLASS] ParserMinimalBase  [METHOD] getValueAsBoolean [RETURN_TYPE] boolean   boolean defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  boolean  defaultValue  String  str  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  
[P16_Remove_Block]^^273^274^275^^^260^289^if  ( value instanceof Boolean )  { return  ( Boolean )  value; }^[CLASS] ParserMinimalBase  [METHOD] getValueAsBoolean [RETURN_TYPE] boolean   boolean defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  boolean  defaultValue  String  str  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  
[P13_Insert_Block]^if  ( value instanceof Number )  {     return  (  ( Number )   ( value )  ) .doubleValue (  ) ; }^273^^^^^260^289^[Delete]^[CLASS] ParserMinimalBase  [METHOD] getValueAsBoolean [RETURN_TYPE] boolean   boolean defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  boolean  defaultValue  String  str  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  
[P13_Insert_Block]^if  ( value instanceof Number )  {     return  (  ( Number )   ( value )  ) .longValue (  ) ; }^273^^^^^260^289^[Delete]^[CLASS] ParserMinimalBase  [METHOD] getValueAsBoolean [RETURN_TYPE] boolean   boolean defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  boolean  defaultValue  String  str  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  
[P13_Insert_Block]^if  ( value instanceof Number )  {     return  (  ( Number )   ( value )  ) .intValue (  ) ; }^273^^^^^260^289^[Delete]^[CLASS] ParserMinimalBase  [METHOD] getValueAsBoolean [RETURN_TYPE] boolean   boolean defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  boolean  defaultValue  String  str  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  
[P3_Replace_Literal]^if  ( "false".equals ( str )  )  {^279^^^^^260^289^if  ( "true".equals ( str )  )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsBoolean [RETURN_TYPE] boolean   boolean defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  boolean  defaultValue  String  str  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  
[P15_Unwrap_Block]^return true;^279^280^281^^^260^289^if  ( "true".equals ( str )  )  { return true; }^[CLASS] ParserMinimalBase  [METHOD] getValueAsBoolean [RETURN_TYPE] boolean   boolean defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  boolean  defaultValue  String  str  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  
[P16_Remove_Block]^^279^280^281^^^260^289^if  ( "true".equals ( str )  )  { return true; }^[CLASS] ParserMinimalBase  [METHOD] getValueAsBoolean [RETURN_TYPE] boolean   boolean defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  boolean  defaultValue  String  str  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  
[P13_Insert_Block]^if  ( _hasTextualNull ( str )  )  {     return 0L; }^279^^^^^260^289^[Delete]^[CLASS] ParserMinimalBase  [METHOD] getValueAsBoolean [RETURN_TYPE] boolean   boolean defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  boolean  defaultValue  String  str  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  
[P13_Insert_Block]^if  (  ( --open )  == 0 )  {     return this; }^279^^^^^260^289^[Delete]^[CLASS] ParserMinimalBase  [METHOD] getValueAsBoolean [RETURN_TYPE] boolean   boolean defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  boolean  defaultValue  String  str  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  
[P13_Insert_Block]^if  ( _hasTextualNull ( str )  )  {     return 0; }^279^^^^^260^289^[Delete]^[CLASS] ParserMinimalBase  [METHOD] getValueAsBoolean [RETURN_TYPE] boolean   boolean defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  boolean  defaultValue  String  str  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  
[P13_Insert_Block]^if  ( _hasTextualNull ( str )  )  {     return false; }^279^^^^^260^289^[Delete]^[CLASS] ParserMinimalBase  [METHOD] getValueAsBoolean [RETURN_TYPE] boolean   boolean defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  boolean  defaultValue  String  str  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  
[P3_Replace_Literal]^return false;^280^^^^^260^289^return true;^[CLASS] ParserMinimalBase  [METHOD] getValueAsBoolean [RETURN_TYPE] boolean   boolean defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  boolean  defaultValue  String  str  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  
[P7_Replace_Invocation]^if  ( _reportError ( str )  )  {^282^^^^^260^289^if  ( _hasTextualNull ( str )  )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsBoolean [RETURN_TYPE] boolean   boolean defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  boolean  defaultValue  String  str  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  
[P15_Unwrap_Block]^return false;^282^283^284^^^260^289^if  ( _hasTextualNull ( str )  )  { return false; }^[CLASS] ParserMinimalBase  [METHOD] getValueAsBoolean [RETURN_TYPE] boolean   boolean defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  boolean  defaultValue  String  str  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  
[P16_Remove_Block]^^282^283^284^^^260^289^if  ( _hasTextualNull ( str )  )  { return false; }^[CLASS] ParserMinimalBase  [METHOD] getValueAsBoolean [RETURN_TYPE] boolean   boolean defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  boolean  defaultValue  String  str  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  
[P13_Insert_Block]^if  ( _hasTextualNull ( str )  )  {     return 0L; }^282^^^^^260^289^[Delete]^[CLASS] ParserMinimalBase  [METHOD] getValueAsBoolean [RETURN_TYPE] boolean   boolean defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  boolean  defaultValue  String  str  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  
[P13_Insert_Block]^if  (  ( --open )  == 0 )  {     return this; }^282^^^^^260^289^[Delete]^[CLASS] ParserMinimalBase  [METHOD] getValueAsBoolean [RETURN_TYPE] boolean   boolean defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  boolean  defaultValue  String  str  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  
[P13_Insert_Block]^if  ( _hasTextualNull ( str )  )  {     return 0; }^282^^^^^260^289^[Delete]^[CLASS] ParserMinimalBase  [METHOD] getValueAsBoolean [RETURN_TYPE] boolean   boolean defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  boolean  defaultValue  String  str  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  
[P13_Insert_Block]^if  ( "true".equals ( str )  )  {     return true; }^282^^^^^260^289^[Delete]^[CLASS] ParserMinimalBase  [METHOD] getValueAsBoolean [RETURN_TYPE] boolean   boolean defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  boolean  defaultValue  String  str  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  
[P3_Replace_Literal]^return true;^283^^^^^260^289^return false;^[CLASS] ParserMinimalBase  [METHOD] getValueAsBoolean [RETURN_TYPE] boolean   boolean defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  boolean  defaultValue  String  str  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  
[P2_Replace_Operator]^return getIntValue (  )  <= 0;^264^^^^^260^289^return getIntValue (  )  != 0;^[CLASS] ParserMinimalBase  [METHOD] getValueAsBoolean [RETURN_TYPE] boolean   boolean defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  boolean  defaultValue  String  str  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  
[P3_Replace_Literal]^return getIntValue (  )  != -3;^264^^^^^260^289^return getIntValue (  )  != 0;^[CLASS] ParserMinimalBase  [METHOD] getValueAsBoolean [RETURN_TYPE] boolean   boolean defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  boolean  defaultValue  String  str  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  
[P7_Replace_Invocation]^return getLongValue (  )  != 0;^264^^^^^260^289^return getIntValue (  )  != 0;^[CLASS] ParserMinimalBase  [METHOD] getValueAsBoolean [RETURN_TYPE] boolean   boolean defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  boolean  defaultValue  String  str  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  
[P3_Replace_Literal]^return false;^266^^^^^260^289^return true;^[CLASS] ParserMinimalBase  [METHOD] getValueAsBoolean [RETURN_TYPE] boolean   boolean defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  boolean  defaultValue  String  str  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  
[P3_Replace_Literal]^return true;^269^^^^^260^289^return false;^[CLASS] ParserMinimalBase  [METHOD] getValueAsBoolean [RETURN_TYPE] boolean   boolean defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  boolean  defaultValue  String  str  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  
[P7_Replace_Invocation]^Object value = this.getDoubleValue (  ) ;^272^^^^^260^289^Object value = this.getEmbeddedObject (  ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsBoolean [RETURN_TYPE] boolean   boolean defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  boolean  defaultValue  String  str  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  
[P1_Replace_Type]^char str = getText (  ) .trim (  ) ;^278^^^^^260^289^String str = getText (  ) .trim (  ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsBoolean [RETURN_TYPE] boolean   boolean defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  boolean  defaultValue  String  str  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  
[P7_Replace_Invocation]^String str = nextToken (  ) .trim (  ) ;^278^^^^^260^289^String str = getText (  ) .trim (  ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsBoolean [RETURN_TYPE] boolean   boolean defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  boolean  defaultValue  String  str  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  
[P11_Insert_Donor_Statement]^String str = getText (  ) ;String str = getText (  ) .trim (  ) ;^278^^^^^260^289^String str = getText (  ) .trim (  ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsBoolean [RETURN_TYPE] boolean   boolean defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  boolean  defaultValue  String  str  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  
[P14_Delete_Statement]^^264^^^^^260^289^return getIntValue (  )  != 0;^[CLASS] ParserMinimalBase  [METHOD] getValueAsBoolean [RETURN_TYPE] boolean   boolean defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  boolean  defaultValue  String  str  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  
[P14_Delete_Statement]^^272^^^^^260^289^Object value = this.getEmbeddedObject (  ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsBoolean [RETURN_TYPE] boolean   boolean defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  boolean  defaultValue  String  str  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  
[P14_Delete_Statement]^^278^^^^^260^289^String str = getText (  ) .trim (  ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsBoolean [RETURN_TYPE] boolean   boolean defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  boolean  defaultValue  String  str  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  
[P3_Replace_Literal]^if  ( "rrue".equals ( str )  )  {^279^^^^^260^289^if  ( "true".equals ( str )  )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsBoolean [RETURN_TYPE] boolean   boolean defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  boolean  defaultValue  String  str  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  
[P2_Replace_Operator]^if  ( value  <=  Boolean )  {^273^^^^^260^289^if  ( value instanceof Boolean )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsBoolean [RETURN_TYPE] boolean   boolean defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  boolean  defaultValue  String  str  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  
[P2_Replace_Operator]^return getIntValue (  )  == 0;^264^^^^^260^289^return getIntValue (  )  != 0;^[CLASS] ParserMinimalBase  [METHOD] getValueAsBoolean [RETURN_TYPE] boolean   boolean defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  boolean  defaultValue  String  str  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  
[P3_Replace_Literal]^return getIntValue (  )  != INT_CR;^264^^^^^260^289^return getIntValue (  )  != 0;^[CLASS] ParserMinimalBase  [METHOD] getValueAsBoolean [RETURN_TYPE] boolean   boolean defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  boolean  defaultValue  String  str  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  
[P3_Replace_Literal]^if  ( "truetru".equals ( str )  )  {^279^^^^^260^289^if  ( "true".equals ( str )  )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsBoolean [RETURN_TYPE] boolean   boolean defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  boolean  defaultValue  String  str  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  features  open  
[P2_Replace_Operator]^if  ( _currToken == null )  {^295^^^^^294^321^if  ( _currToken != null )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P5_Replace_Variable]^if  ( t != null )  {^295^^^^^294^321^if  ( _currToken != null )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P6_Replace_Expression]^if  ( value instanceof Number )  {^295^^^^^294^321^if  ( _currToken != null )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P8_Replace_Mix]^if  ( _currToken != this )  {^295^^^^^294^321^if  ( _currToken != null )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P9_Replace_Statement]^if  ( comment != null )  {^295^^^^^294^321^if  ( _currToken != null )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P9_Replace_Statement]^if  ( msg != null )  {^295^^^^^294^321^if  ( _currToken != null )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P9_Replace_Statement]^if  ( t == null )  {^295^^^^^294^321^if  ( _currToken != null )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P7_Replace_Invocation]^if  ( _reportError ( str )  )  {^307^^^^^294^321^if  ( _hasTextualNull ( str )  )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P15_Unwrap_Block]^return 0;^307^308^309^^^294^321^if  ( _hasTextualNull ( str )  )  { return 0; }^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P16_Remove_Block]^^307^308^309^^^294^321^if  ( _hasTextualNull ( str )  )  { return 0; }^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P13_Insert_Block]^if  ( _hasTextualNull ( str )  )  {     return 0L; }^307^^^^^294^321^[Delete]^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P13_Insert_Block]^if  ( "true".equals ( str )  )  {     return true; }^307^^^^^294^321^[Delete]^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P13_Insert_Block]^if  ( _hasTextualNull ( str )  )  {     return false; }^307^^^^^294^321^[Delete]^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P3_Replace_Literal]^return INT_COMMA;^308^^^^^294^321^return 0;^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P8_Replace_Mix]^return 4;^308^^^^^294^321^return 0;^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P2_Replace_Operator]^if  ( value  >  Number )  {^314^^^^^294^321^if  ( value instanceof Number )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P9_Replace_Statement]^if  ( value instanceof Boolean )  {^314^^^^^294^321^if  ( value instanceof Number )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P15_Unwrap_Block]^return ((java.lang.Number) (value)).intValue();^314^315^316^^^294^321^if  ( value instanceof Number )  { return  (  ( Number )  value ) .intValue (  ) ; }^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P16_Remove_Block]^^314^315^316^^^294^321^if  ( value instanceof Number )  { return  (  ( Number )  value ) .intValue (  ) ; }^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P13_Insert_Block]^if  ( value instanceof Number )  {     return  (  ( Number )   ( value )  ) .doubleValue (  ) ; }^314^^^^^294^321^[Delete]^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P13_Insert_Block]^if  ( value instanceof Number )  {     return  (  ( Number )   ( value )  ) .longValue (  ) ; }^314^^^^^294^321^[Delete]^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P13_Insert_Block]^if  ( value instanceof Boolean )  {     return  (  ( Boolean )   ( value )  ) ; }^314^^^^^294^321^[Delete]^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P8_Replace_Mix]^return  (  ( Number )  value )  .longValue (  )  ;^315^^^^^294^321^return  (  ( Number )  value ) .intValue (  ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P14_Delete_Statement]^^315^^^^^294^321^return  (  ( Number )  value ) .intValue (  ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P7_Replace_Invocation]^return getLongValue (  ) ;^299^^^^^294^321^return getIntValue (  ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P3_Replace_Literal]^return 2;^301^^^^^294^321^return 1;^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P8_Replace_Mix]^return 3;^301^^^^^294^321^return 1;^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P3_Replace_Literal]^return 5;^304^^^^^294^321^return 0;^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P8_Replace_Mix]^return 0 % 1;^304^^^^^294^321^return 0;^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P3_Replace_Literal]^return INT_f;^308^^^^^294^321^return 0;^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P8_Replace_Mix]^return 0 / 4;^308^^^^^294^321^return 0;^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P5_Replace_Variable]^return NumberInput.parseAsInt ( str, INT_b ) ;^310^^^^^294^321^return NumberInput.parseAsInt ( str, defaultValue ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P5_Replace_Variable]^return NumberInput.parseAsInt (  defaultValue ) ;^310^^^^^294^321^return NumberInput.parseAsInt ( str, defaultValue ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P5_Replace_Variable]^return NumberInput.parseAsInt ( str ) ;^310^^^^^294^321^return NumberInput.parseAsInt ( str, defaultValue ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P5_Replace_Variable]^return NumberInput.parseAsInt ( defaultValue, str ) ;^310^^^^^294^321^return NumberInput.parseAsInt ( str, defaultValue ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P7_Replace_Invocation]^return NumberInput.parseAsLong ( str, defaultValue ) ;^310^^^^^294^321^return NumberInput.parseAsInt ( str, defaultValue ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P1_Replace_Type]^char str = getText (  ) ;^306^^^^^294^321^String str = getText (  ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P7_Replace_Invocation]^String str = nextToken (  ) ;^306^^^^^294^321^String str = getText (  ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P11_Insert_Donor_Statement]^String str = getText (  ) .trim (  ) ;String str = getText (  ) ;^306^^^^^294^321^String str = getText (  ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P7_Replace_Invocation]^Object value = this.getDoubleValue (  ) ;^313^^^^^294^321^Object value = this.getEmbeddedObject (  ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P14_Delete_Statement]^^299^^^^^294^321^return getIntValue (  ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P14_Delete_Statement]^^306^^^^^294^321^String str = getText (  ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P11_Insert_Donor_Statement]^return getText (  ) ;String str = getText (  ) ;^306^^^^^294^321^String str = getText (  ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P8_Replace_Mix]^return NumberInput.parseAsLong ( str, INT_TAB ) ;^310^^^^^294^321^return NumberInput.parseAsInt ( str, defaultValue ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P14_Delete_Statement]^^310^^^^^294^321^return NumberInput.parseAsInt ( str, defaultValue ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P14_Delete_Statement]^^313^^^^^294^321^Object value = this.getEmbeddedObject (  ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P3_Replace_Literal]^return INT_LBRACKET;^308^^^^^294^321^return 0;^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P8_Replace_Mix]^return 0 >> 1;^308^^^^^294^321^return 0;^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P2_Replace_Operator]^if  ( value  ^  Number )  {^314^^^^^294^321^if  ( value instanceof Number )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P8_Replace_Mix]^return 4;^301^^^^^294^321^return 1;^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P3_Replace_Literal]^return INT_CR;^304^^^^^294^321^return 0;^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P8_Replace_Mix]^return 0L;^304^^^^^294^321^return 0;^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P3_Replace_Literal]^return -8;^308^^^^^294^321^return 0;^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P8_Replace_Mix]^return 0 * 2;^308^^^^^294^321^return 0;^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P5_Replace_Variable]^return NumberInput.parseAsInt ( str, INT_f ) ;^310^^^^^294^321^return NumberInput.parseAsInt ( str, defaultValue ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P5_Replace_Variable]^return NumberInput.parseAsInt ( str, INT_SLASH ) ;^310^^^^^294^321^return NumberInput.parseAsInt ( str, defaultValue ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P5_Replace_Variable]^return INT_SPACE;^320^^^^^294^321^return defaultValue;^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P8_Replace_Mix]^return INT_SLASH;^320^^^^^294^321^return defaultValue;^[CLASS] ParserMinimalBase  [METHOD] getValueAsInt [RETURN_TYPE] int   int defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P2_Replace_Operator]^if  ( _currToken == null )  {^326^^^^^325^353^if  ( _currToken != null )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsLong [RETURN_TYPE] long   long defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  long  defaultValue  
[P5_Replace_Variable]^if  ( t != null )  {^326^^^^^325^353^if  ( _currToken != null )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsLong [RETURN_TYPE] long   long defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  long  defaultValue  
[P6_Replace_Expression]^if  ( value instanceof Number )  {^326^^^^^325^353^if  ( _currToken != null )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsLong [RETURN_TYPE] long   long defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  long  defaultValue  
[P8_Replace_Mix]^if  ( _currToken != true )  {^326^^^^^325^353^if  ( _currToken != null )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsLong [RETURN_TYPE] long   long defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  long  defaultValue  
[P9_Replace_Statement]^if  ( comment != null )  {^326^^^^^325^353^if  ( _currToken != null )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsLong [RETURN_TYPE] long   long defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  long  defaultValue  
[P9_Replace_Statement]^if  ( msg != null )  {^326^^^^^325^353^if  ( _currToken != null )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsLong [RETURN_TYPE] long   long defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  long  defaultValue  
[P9_Replace_Statement]^if  ( t == null )  {^326^^^^^325^353^if  ( _currToken != null )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsLong [RETURN_TYPE] long   long defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  long  defaultValue  
[P7_Replace_Invocation]^if  ( _reportError ( str )  )  {^338^^^^^325^353^if  ( _hasTextualNull ( str )  )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsLong [RETURN_TYPE] long   long defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  long  defaultValue  
[P15_Unwrap_Block]^return 0L;^338^339^340^^^325^353^if  ( _hasTextualNull ( str )  )  { return 0L; }^[CLASS] ParserMinimalBase  [METHOD] getValueAsLong [RETURN_TYPE] long   long defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  long  defaultValue  
[P16_Remove_Block]^^338^339^340^^^325^353^if  ( _hasTextualNull ( str )  )  { return 0L; }^[CLASS] ParserMinimalBase  [METHOD] getValueAsLong [RETURN_TYPE] long   long defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  long  defaultValue  
[P13_Insert_Block]^if  ( _hasTextualNull ( str )  )  {     return 0; }^338^^^^^325^353^[Delete]^[CLASS] ParserMinimalBase  [METHOD] getValueAsLong [RETURN_TYPE] long   long defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  long  defaultValue  
[P13_Insert_Block]^if  ( "true".equals ( str )  )  {     return true; }^338^^^^^325^353^[Delete]^[CLASS] ParserMinimalBase  [METHOD] getValueAsLong [RETURN_TYPE] long   long defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  long  defaultValue  
[P13_Insert_Block]^if  ( _hasTextualNull ( str )  )  {     return false; }^338^^^^^325^353^[Delete]^[CLASS] ParserMinimalBase  [METHOD] getValueAsLong [RETURN_TYPE] long   long defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  long  defaultValue  
[P8_Replace_Mix]^return 0;^339^^^^^325^353^return 0L;^[CLASS] ParserMinimalBase  [METHOD] getValueAsLong [RETURN_TYPE] long   long defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  long  defaultValue  
[P2_Replace_Operator]^if  ( value  ^  Number )  {^345^^^^^325^353^if  ( value instanceof Number )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsLong [RETURN_TYPE] long   long defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  long  defaultValue  
[P9_Replace_Statement]^if  ( value instanceof Boolean )  {^345^^^^^325^353^if  ( value instanceof Number )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsLong [RETURN_TYPE] long   long defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  long  defaultValue  
[P15_Unwrap_Block]^return ((java.lang.Number) (value)).longValue();^345^346^347^^^325^353^if  ( value instanceof Number )  { return  (  ( Number )  value ) .longValue (  ) ; }^[CLASS] ParserMinimalBase  [METHOD] getValueAsLong [RETURN_TYPE] long   long defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  long  defaultValue  
[P16_Remove_Block]^^345^346^347^^^325^353^if  ( value instanceof Number )  { return  (  ( Number )  value ) .longValue (  ) ; }^[CLASS] ParserMinimalBase  [METHOD] getValueAsLong [RETURN_TYPE] long   long defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  long  defaultValue  
[P13_Insert_Block]^if  ( value instanceof Number )  {     return  (  ( Number )   ( value )  ) .doubleValue (  ) ; }^345^^^^^325^353^[Delete]^[CLASS] ParserMinimalBase  [METHOD] getValueAsLong [RETURN_TYPE] long   long defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  long  defaultValue  
[P13_Insert_Block]^if  ( value instanceof Number )  {     return  (  ( Number )   ( value )  ) .intValue (  ) ; }^345^^^^^325^353^[Delete]^[CLASS] ParserMinimalBase  [METHOD] getValueAsLong [RETURN_TYPE] long   long defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  long  defaultValue  
[P13_Insert_Block]^if  ( value instanceof Boolean )  {     return  (  ( Boolean )   ( value )  ) ; }^345^^^^^325^353^[Delete]^[CLASS] ParserMinimalBase  [METHOD] getValueAsLong [RETURN_TYPE] long   long defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  long  defaultValue  
[P7_Replace_Invocation]^return  (  ( Number )  value )  .intValue (  )  ;^346^^^^^325^353^return  (  ( Number )  value ) .longValue (  ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsLong [RETURN_TYPE] long   long defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  long  defaultValue  
[P14_Delete_Statement]^^346^^^^^325^353^return  (  ( Number )  value ) .longValue (  ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsLong [RETURN_TYPE] long   long defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  long  defaultValue  
[P7_Replace_Invocation]^return getIntValue (  ) ;^330^^^^^325^353^return getLongValue (  ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsLong [RETURN_TYPE] long   long defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  long  defaultValue  
[P3_Replace_Literal]^return INT_LBRACKET;^332^^^^^325^353^return 1;^[CLASS] ParserMinimalBase  [METHOD] getValueAsLong [RETURN_TYPE] long   long defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  long  defaultValue  
[P8_Replace_Mix]^return 1L;^332^^^^^325^353^return 1;^[CLASS] ParserMinimalBase  [METHOD] getValueAsLong [RETURN_TYPE] long   long defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  long  defaultValue  
[P3_Replace_Literal]^return INT_t;^335^^^^^325^353^return 0;^[CLASS] ParserMinimalBase  [METHOD] getValueAsLong [RETURN_TYPE] long   long defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  long  defaultValue  
[P8_Replace_Mix]^return 0 / 3;^335^^^^^325^353^return 0;^[CLASS] ParserMinimalBase  [METHOD] getValueAsLong [RETURN_TYPE] long   long defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  long  defaultValue  
[P5_Replace_Variable]^return NumberInput.parseAsLong (  defaultValue ) ;^341^^^^^325^353^return NumberInput.parseAsLong ( str, defaultValue ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsLong [RETURN_TYPE] long   long defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  long  defaultValue  
[P5_Replace_Variable]^return NumberInput.parseAsLong ( str ) ;^341^^^^^325^353^return NumberInput.parseAsLong ( str, defaultValue ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsLong [RETURN_TYPE] long   long defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  long  defaultValue  
[P5_Replace_Variable]^return NumberInput.parseAsLong ( defaultValue, str ) ;^341^^^^^325^353^return NumberInput.parseAsLong ( str, defaultValue ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsLong [RETURN_TYPE] long   long defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  long  defaultValue  
[P7_Replace_Invocation]^return NumberInput.parseAsDouble ( str, defaultValue ) ;^341^^^^^325^353^return NumberInput.parseAsLong ( str, defaultValue ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsLong [RETURN_TYPE] long   long defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  long  defaultValue  
[P1_Replace_Type]^char str = getText (  ) ;^337^^^^^325^353^String str = getText (  ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsLong [RETURN_TYPE] long   long defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  long  defaultValue  
[P7_Replace_Invocation]^String str = nextToken (  ) ;^337^^^^^325^353^String str = getText (  ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsLong [RETURN_TYPE] long   long defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  long  defaultValue  
[P11_Insert_Donor_Statement]^String str = getText (  ) .trim (  ) ;String str = getText (  ) ;^337^^^^^325^353^String str = getText (  ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsLong [RETURN_TYPE] long   long defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  long  defaultValue  
[P7_Replace_Invocation]^Object value = this.getDoubleValue (  ) ;^344^^^^^325^353^Object value = this.getEmbeddedObject (  ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsLong [RETURN_TYPE] long   long defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  long  defaultValue  
[P14_Delete_Statement]^^330^^^^^325^353^return getLongValue (  ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsLong [RETURN_TYPE] long   long defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  long  defaultValue  
[P14_Delete_Statement]^^337^^^^^325^353^String str = getText (  ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsLong [RETURN_TYPE] long   long defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  long  defaultValue  
[P11_Insert_Donor_Statement]^return getText (  ) ;String str = getText (  ) ;^337^^^^^325^353^String str = getText (  ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsLong [RETURN_TYPE] long   long defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  long  defaultValue  
[P7_Replace_Invocation]^return NumberInput .parseAsInt ( str , open )  ;^341^^^^^325^353^return NumberInput.parseAsLong ( str, defaultValue ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsLong [RETURN_TYPE] long   long defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  long  defaultValue  
[P14_Delete_Statement]^^341^^^^^325^353^return NumberInput.parseAsLong ( str, defaultValue ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsLong [RETURN_TYPE] long   long defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  long  defaultValue  
[P14_Delete_Statement]^^344^^^^^325^353^Object value = this.getEmbeddedObject (  ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsLong [RETURN_TYPE] long   long defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  long  defaultValue  
[P2_Replace_Operator]^if  ( value  ==  Number )  {^345^^^^^325^353^if  ( value instanceof Number )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsLong [RETURN_TYPE] long   long defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  long  defaultValue  
[P3_Replace_Literal]^return INT_QUOTE;^332^^^^^325^353^return 1;^[CLASS] ParserMinimalBase  [METHOD] getValueAsLong [RETURN_TYPE] long   long defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  long  defaultValue  
[P8_Replace_Mix]^return 1 + 4;^332^^^^^325^353^return 1;^[CLASS] ParserMinimalBase  [METHOD] getValueAsLong [RETURN_TYPE] long   long defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  long  defaultValue  
[P3_Replace_Literal]^return INT_n;^335^^^^^325^353^return 0;^[CLASS] ParserMinimalBase  [METHOD] getValueAsLong [RETURN_TYPE] long   long defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  long  defaultValue  
[P8_Replace_Mix]^return 0 >> 0;^335^^^^^325^353^return 0;^[CLASS] ParserMinimalBase  [METHOD] getValueAsLong [RETURN_TYPE] long   long defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  long  defaultValue  
[P2_Replace_Operator]^if  ( _currToken == null )  {^359^^^^^358^385^if  ( _currToken != null )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsDouble [RETURN_TYPE] double   double defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  double  defaultValue  
[P5_Replace_Variable]^if  ( t != null )  {^359^^^^^358^385^if  ( _currToken != null )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsDouble [RETURN_TYPE] double   double defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  double  defaultValue  
[P6_Replace_Expression]^if  ( value instanceof Number )  {^359^^^^^358^385^if  ( _currToken != null )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsDouble [RETURN_TYPE] double   double defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  double  defaultValue  
[P8_Replace_Mix]^if  ( _currToken != this )  {^359^^^^^358^385^if  ( _currToken != null )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsDouble [RETURN_TYPE] double   double defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  double  defaultValue  
[P9_Replace_Statement]^if  ( comment != null )  {^359^^^^^358^385^if  ( _currToken != null )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsDouble [RETURN_TYPE] double   double defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  double  defaultValue  
[P9_Replace_Statement]^if  ( msg != null )  {^359^^^^^358^385^if  ( _currToken != null )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsDouble [RETURN_TYPE] double   double defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  double  defaultValue  
[P9_Replace_Statement]^if  ( t == null )  {^359^^^^^358^385^if  ( _currToken != null )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsDouble [RETURN_TYPE] double   double defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  double  defaultValue  
[P7_Replace_Invocation]^if  ( _reportError ( str )  )  {^371^^^^^358^385^if  ( _hasTextualNull ( str )  )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsDouble [RETURN_TYPE] double   double defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  double  defaultValue  
[P15_Unwrap_Block]^return 0;^371^372^373^^^358^385^if  ( _hasTextualNull ( str )  )  { return 0; }^[CLASS] ParserMinimalBase  [METHOD] getValueAsDouble [RETURN_TYPE] double   double defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  double  defaultValue  
[P16_Remove_Block]^^371^372^373^^^358^385^if  ( _hasTextualNull ( str )  )  { return 0; }^[CLASS] ParserMinimalBase  [METHOD] getValueAsDouble [RETURN_TYPE] double   double defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  double  defaultValue  
[P13_Insert_Block]^if  ( _hasTextualNull ( str )  )  {     return 0L; }^371^^^^^358^385^[Delete]^[CLASS] ParserMinimalBase  [METHOD] getValueAsDouble [RETURN_TYPE] double   double defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  double  defaultValue  
[P13_Insert_Block]^if  ( "true".equals ( str )  )  {     return true; }^371^^^^^358^385^[Delete]^[CLASS] ParserMinimalBase  [METHOD] getValueAsDouble [RETURN_TYPE] double   double defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  double  defaultValue  
[P13_Insert_Block]^if  ( _hasTextualNull ( str )  )  {     return false; }^371^^^^^358^385^[Delete]^[CLASS] ParserMinimalBase  [METHOD] getValueAsDouble [RETURN_TYPE] double   double defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  double  defaultValue  
[P3_Replace_Literal]^return INT_LBRACKET;^372^^^^^358^385^return 0;^[CLASS] ParserMinimalBase  [METHOD] getValueAsDouble [RETURN_TYPE] double   double defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  double  defaultValue  
[P8_Replace_Mix]^return 3;^372^^^^^358^385^return 0;^[CLASS] ParserMinimalBase  [METHOD] getValueAsDouble [RETURN_TYPE] double   double defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  double  defaultValue  
[P2_Replace_Operator]^if  ( value  &  Number )  {^378^^^^^358^385^if  ( value instanceof Number )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsDouble [RETURN_TYPE] double   double defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  double  defaultValue  
[P9_Replace_Statement]^if  ( value instanceof Boolean )  {^378^^^^^358^385^if  ( value instanceof Number )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsDouble [RETURN_TYPE] double   double defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  double  defaultValue  
[P15_Unwrap_Block]^return ((java.lang.Number) (value)).doubleValue();^378^379^380^^^358^385^if  ( value instanceof Number )  { return  (  ( Number )  value ) .doubleValue (  ) ; }^[CLASS] ParserMinimalBase  [METHOD] getValueAsDouble [RETURN_TYPE] double   double defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  double  defaultValue  
[P16_Remove_Block]^^378^379^380^^^358^385^if  ( value instanceof Number )  { return  (  ( Number )  value ) .doubleValue (  ) ; }^[CLASS] ParserMinimalBase  [METHOD] getValueAsDouble [RETURN_TYPE] double   double defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  double  defaultValue  
[P13_Insert_Block]^if  ( value instanceof Number )  {     return  (  ( Number )   ( value )  ) .longValue (  ) ; }^378^^^^^358^385^[Delete]^[CLASS] ParserMinimalBase  [METHOD] getValueAsDouble [RETURN_TYPE] double   double defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  double  defaultValue  
[P13_Insert_Block]^if  ( value instanceof Number )  {     return  (  ( Number )   ( value )  ) .intValue (  ) ; }^378^^^^^358^385^[Delete]^[CLASS] ParserMinimalBase  [METHOD] getValueAsDouble [RETURN_TYPE] double   double defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  double  defaultValue  
[P13_Insert_Block]^if  ( value instanceof Boolean )  {     return  (  ( Boolean )   ( value )  ) ; }^378^^^^^358^385^[Delete]^[CLASS] ParserMinimalBase  [METHOD] getValueAsDouble [RETURN_TYPE] double   double defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  double  defaultValue  
[P7_Replace_Invocation]^return  (  ( Number )  value )  .longValue (  )  ;^379^^^^^358^385^return  (  ( Number )  value ) .doubleValue (  ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsDouble [RETURN_TYPE] double   double defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  double  defaultValue  
[P13_Insert_Block]^if  ( value instanceof Number )  {     return  (  ( Number )   ( value )  ) .doubleValue (  ) ; }^379^^^^^358^385^[Delete]^[CLASS] ParserMinimalBase  [METHOD] getValueAsDouble [RETURN_TYPE] double   double defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  double  defaultValue  
[P14_Delete_Statement]^^379^^^^^358^385^return  (  ( Number )  value ) .doubleValue (  ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsDouble [RETURN_TYPE] double   double defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  double  defaultValue  
[P7_Replace_Invocation]^return getLongValue (  ) ;^363^^^^^358^385^return getDoubleValue (  ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsDouble [RETURN_TYPE] double   double defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  double  defaultValue  
[P3_Replace_Literal]^return INT_COLON;^365^^^^^358^385^return 1;^[CLASS] ParserMinimalBase  [METHOD] getValueAsDouble [RETURN_TYPE] double   double defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  double  defaultValue  
[P8_Replace_Mix]^return 3;^365^^^^^358^385^return 1;^[CLASS] ParserMinimalBase  [METHOD] getValueAsDouble [RETURN_TYPE] double   double defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  double  defaultValue  
[P3_Replace_Literal]^return 9;^368^^^^^358^385^return 0;^[CLASS] ParserMinimalBase  [METHOD] getValueAsDouble [RETURN_TYPE] double   double defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  double  defaultValue  
[P8_Replace_Mix]^return 0 + 2;^368^^^^^358^385^return 0;^[CLASS] ParserMinimalBase  [METHOD] getValueAsDouble [RETURN_TYPE] double   double defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  double  defaultValue  
[P8_Replace_Mix]^return 4;^372^^^^^358^385^return 0;^[CLASS] ParserMinimalBase  [METHOD] getValueAsDouble [RETURN_TYPE] double   double defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  double  defaultValue  
[P5_Replace_Variable]^return NumberInput.parseAsDouble (  defaultValue ) ;^374^^^^^358^385^return NumberInput.parseAsDouble ( str, defaultValue ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsDouble [RETURN_TYPE] double   double defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  double  defaultValue  
[P5_Replace_Variable]^return NumberInput.parseAsDouble ( str ) ;^374^^^^^358^385^return NumberInput.parseAsDouble ( str, defaultValue ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsDouble [RETURN_TYPE] double   double defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  double  defaultValue  
[P5_Replace_Variable]^return NumberInput.parseAsDouble ( defaultValue, str ) ;^374^^^^^358^385^return NumberInput.parseAsDouble ( str, defaultValue ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsDouble [RETURN_TYPE] double   double defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  double  defaultValue  
[P7_Replace_Invocation]^return NumberInput.parseAsLong ( str, defaultValue ) ;^374^^^^^358^385^return NumberInput.parseAsDouble ( str, defaultValue ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsDouble [RETURN_TYPE] double   double defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  double  defaultValue  
[P1_Replace_Type]^char str = getText (  ) ;^370^^^^^358^385^String str = getText (  ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsDouble [RETURN_TYPE] double   double defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  double  defaultValue  
[P7_Replace_Invocation]^String str = nextToken (  ) ;^370^^^^^358^385^String str = getText (  ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsDouble [RETURN_TYPE] double   double defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  double  defaultValue  
[P11_Insert_Donor_Statement]^String str = getText (  ) .trim (  ) ;String str = getText (  ) ;^370^^^^^358^385^String str = getText (  ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsDouble [RETURN_TYPE] double   double defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  double  defaultValue  
[P7_Replace_Invocation]^Object value = this.getDoubleValue (  ) ;^377^^^^^358^385^Object value = this.getEmbeddedObject (  ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsDouble [RETURN_TYPE] double   double defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  double  defaultValue  
[P14_Delete_Statement]^^363^^^^^358^385^return getDoubleValue (  ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsDouble [RETURN_TYPE] double   double defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  double  defaultValue  
[P14_Delete_Statement]^^370^^^^^358^385^String str = getText (  ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsDouble [RETURN_TYPE] double   double defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  double  defaultValue  
[P11_Insert_Donor_Statement]^return getText (  ) ;String str = getText (  ) ;^370^^^^^358^385^String str = getText (  ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsDouble [RETURN_TYPE] double   double defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  double  defaultValue  
[P14_Delete_Statement]^^374^^^^^358^385^return NumberInput.parseAsDouble ( str, defaultValue ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsDouble [RETURN_TYPE] double   double defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  double  defaultValue  
[P14_Delete_Statement]^^377^^^^^358^385^Object value = this.getEmbeddedObject (  ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsDouble [RETURN_TYPE] double   double defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  double  defaultValue  
[P3_Replace_Literal]^return -7;^372^^^^^358^385^return 0;^[CLASS] ParserMinimalBase  [METHOD] getValueAsDouble [RETURN_TYPE] double   double defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  double  defaultValue  
[P8_Replace_Mix]^return 0L;^372^^^^^358^385^return 0;^[CLASS] ParserMinimalBase  [METHOD] getValueAsDouble [RETURN_TYPE] double   double defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  double  defaultValue  
[P2_Replace_Operator]^if  ( value  ^  Number )  {^378^^^^^358^385^if  ( value instanceof Number )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsDouble [RETURN_TYPE] double   double defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  double  defaultValue  
[P3_Replace_Literal]^return -5;^365^^^^^358^385^return 1;^[CLASS] ParserMinimalBase  [METHOD] getValueAsDouble [RETURN_TYPE] double   double defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  double  defaultValue  
[P8_Replace_Mix]^return 1 >>> 0;^365^^^^^358^385^return 1;^[CLASS] ParserMinimalBase  [METHOD] getValueAsDouble [RETURN_TYPE] double   double defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  double  defaultValue  
[P3_Replace_Literal]^return 2;^368^^^^^358^385^return 0;^[CLASS] ParserMinimalBase  [METHOD] getValueAsDouble [RETURN_TYPE] double   double defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  double  defaultValue  
[P3_Replace_Literal]^return INT_RBRACKET;^372^^^^^358^385^return 0;^[CLASS] ParserMinimalBase  [METHOD] getValueAsDouble [RETURN_TYPE] double   double defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  double  defaultValue  
[P8_Replace_Mix]^return 1;^372^^^^^358^385^return 0;^[CLASS] ParserMinimalBase  [METHOD] getValueAsDouble [RETURN_TYPE] double   double defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  Object  value  String  str  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  double  defaultValue  
[P2_Replace_Operator]^if  ( _currToken == JsonToken.VALUE_STRING )  {^390^^^^^388^396^if  ( _currToken != JsonToken.VALUE_STRING )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsString [RETURN_TYPE] String   String defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  defaultValue  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P5_Replace_Variable]^if  ( _currToken != 1 )  {^390^^^^^388^396^if  ( _currToken != JsonToken.VALUE_STRING )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsString [RETURN_TYPE] String   String defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  defaultValue  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P6_Replace_Expression]^if  ( (_currToken == null) || (_currToken == JsonToken.VALUE_NULL) || !(_currToken.isScalarValue()) )  {^390^^^^^388^396^if  ( _currToken != JsonToken.VALUE_STRING )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsString [RETURN_TYPE] String   String defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  defaultValue  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P6_Replace_Expression]^if  ( (_currToken == null || _currToken == JsonToken.VALUE_NULL) )  {^390^^^^^388^396^if  ( _currToken != JsonToken.VALUE_STRING )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsString [RETURN_TYPE] String   String defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  defaultValue  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P6_Replace_Expression]^if  ( _currToken == null )  {^390^^^^^388^396^if  ( _currToken != JsonToken.VALUE_STRING )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsString [RETURN_TYPE] String   String defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  defaultValue  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P6_Replace_Expression]^if  ( _currToken == JsonToken.VALUE_NULL )  {^390^^^^^388^396^if  ( _currToken != JsonToken.VALUE_STRING )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsString [RETURN_TYPE] String   String defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  defaultValue  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P15_Unwrap_Block]^if ((((_currToken) == null) || ((_currToken) == (JsonToken.VALUE_NULL))) || (!(_currToken.isScalarValue()))) {    return defaultValue;};^390^391^392^393^^388^396^if  ( _currToken != JsonToken.VALUE_STRING )  { if  ( _currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue (  )  )  { return defaultValue; }^[CLASS] ParserMinimalBase  [METHOD] getValueAsString [RETURN_TYPE] String   String defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  defaultValue  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P16_Remove_Block]^^390^391^392^393^^388^396^if  ( _currToken != JsonToken.VALUE_STRING )  { if  ( _currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue (  )  )  { return defaultValue; }^[CLASS] ParserMinimalBase  [METHOD] getValueAsString [RETURN_TYPE] String   String defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  defaultValue  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P13_Insert_Block]^if  (  (  (  ( _currToken )  == null )  ||  (  ( _currToken )  ==  ( JsonToken.VALUE_NULL )  )  )  ||  ( ! ( _currToken.isScalarValue (  )  )  )  )  {     return defaultValue; }^390^^^^^388^396^[Delete]^[CLASS] ParserMinimalBase  [METHOD] getValueAsString [RETURN_TYPE] String   String defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  defaultValue  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P2_Replace_Operator]^if  ( _currToken == null && _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue (  )  )  {^391^^^^^388^396^if  ( _currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue (  )  )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsString [RETURN_TYPE] String   String defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  defaultValue  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P2_Replace_Operator]^if  ( _currToken != null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue (  )  )  {^391^^^^^388^396^if  ( _currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue (  )  )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsString [RETURN_TYPE] String   String defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  defaultValue  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P2_Replace_Operator]^if  ( _currToken == null || _currToken != JsonToken.VALUE_NULL || !_currToken.isScalarValue (  )  )  {^391^^^^^388^396^if  ( _currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue (  )  )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsString [RETURN_TYPE] String   String defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  defaultValue  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P5_Replace_Variable]^if  ( t == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue (  )  )  {^391^^^^^388^396^if  ( _currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue (  )  )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsString [RETURN_TYPE] String   String defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  defaultValue  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P5_Replace_Variable]^if  ( JsonToken.VALUE_NULL == null || _currToken == _currToken || !_currToken.isScalarValue (  )  )  {^391^^^^^388^396^if  ( _currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue (  )  )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsString [RETURN_TYPE] String   String defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  defaultValue  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P6_Replace_Expression]^if  ( _currToken == null ) {^391^^^^^388^396^if  ( _currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue (  )  )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsString [RETURN_TYPE] String   String defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  defaultValue  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P6_Replace_Expression]^if  (  _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue (  )  )  {^391^^^^^388^396^if  ( _currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue (  )  )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsString [RETURN_TYPE] String   String defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  defaultValue  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P6_Replace_Expression]^if  ( (_currToken == null || _currToken == JsonToken.VALUE_NULL) )  {^391^^^^^388^396^if  ( _currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue (  )  )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsString [RETURN_TYPE] String   String defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  defaultValue  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P6_Replace_Expression]^if  ( _currToken == JsonToken.VALUE_NULL )  {^391^^^^^388^396^if  ( _currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue (  )  )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsString [RETURN_TYPE] String   String defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  defaultValue  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P8_Replace_Mix]^if  ( _currToken == this ) {^391^^^^^388^396^if  ( _currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue (  )  )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsString [RETURN_TYPE] String   String defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  defaultValue  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P15_Unwrap_Block]^return defaultValue;^391^392^393^^^388^396^if  ( _currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue (  )  )  { return defaultValue; }^[CLASS] ParserMinimalBase  [METHOD] getValueAsString [RETURN_TYPE] String   String defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  defaultValue  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P16_Remove_Block]^^391^392^393^^^388^396^if  ( _currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue (  )  )  { return defaultValue; }^[CLASS] ParserMinimalBase  [METHOD] getValueAsString [RETURN_TYPE] String   String defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  defaultValue  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P13_Insert_Block]^if  (  ( _currToken )  !=  ( JsonToken.VALUE_STRING )  )  {     if  (  (  (  ( _currToken )  == null )  ||  (  ( _currToken )  ==  ( JsonToken.VALUE_NULL )  )  )  ||  ( ! ( _currToken.isScalarValue (  )  )  )  )  {         return defaultValue;     } }^391^^^^^388^396^[Delete]^[CLASS] ParserMinimalBase  [METHOD] getValueAsString [RETURN_TYPE] String   String defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  defaultValue  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P8_Replace_Mix]^if  ( _currToken == false ) {^391^^^^^388^396^if  ( _currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue (  )  )  {^[CLASS] ParserMinimalBase  [METHOD] getValueAsString [RETURN_TYPE] String   String defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  defaultValue  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P7_Replace_Invocation]^return nextToken (  ) ;^395^^^^^388^396^return getText (  ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsString [RETURN_TYPE] String   String defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  defaultValue  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P14_Delete_Statement]^^395^^^^^388^396^return getText (  ) ;^[CLASS] ParserMinimalBase  [METHOD] getValueAsString [RETURN_TYPE] String   String defaultValue [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  defaultValue  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  
[P5_Replace_Variable]^b64variant.decode (  builder ) ;^413^^^^^408^417^b64variant.decode ( str, builder ) ;^[CLASS] ParserMinimalBase  [METHOD] _decodeBase64 [RETURN_TYPE] void   String str ByteArrayBuilder builder Base64Variant b64variant [VARIABLES] boolean  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  str  ByteArrayBuilder  builder  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  IllegalArgumentException  e  
[P5_Replace_Variable]^b64variant.decode ( str ) ;^413^^^^^408^417^b64variant.decode ( str, builder ) ;^[CLASS] ParserMinimalBase  [METHOD] _decodeBase64 [RETURN_TYPE] void   String str ByteArrayBuilder builder Base64Variant b64variant [VARIABLES] boolean  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  str  ByteArrayBuilder  builder  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  IllegalArgumentException  e  
[P5_Replace_Variable]^b64variant.decode ( builder, str ) ;^413^^^^^408^417^b64variant.decode ( str, builder ) ;^[CLASS] ParserMinimalBase  [METHOD] _decodeBase64 [RETURN_TYPE] void   String str ByteArrayBuilder builder Base64Variant b64variant [VARIABLES] boolean  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  str  ByteArrayBuilder  builder  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  IllegalArgumentException  e  
[P14_Delete_Statement]^^413^^^^^408^417^b64variant.decode ( str, builder ) ;^[CLASS] ParserMinimalBase  [METHOD] _decodeBase64 [RETURN_TYPE] void   String str ByteArrayBuilder builder Base64Variant b64variant [VARIABLES] boolean  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  str  ByteArrayBuilder  builder  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  IllegalArgumentException  e  
[P7_Replace_Invocation]^b64variant .getPaddingChar (  )  ;^413^^^^^408^417^b64variant.decode ( str, builder ) ;^[CLASS] ParserMinimalBase  [METHOD] _decodeBase64 [RETURN_TYPE] void   String str ByteArrayBuilder builder Base64Variant b64variant [VARIABLES] boolean  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  str  ByteArrayBuilder  builder  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  IllegalArgumentException  e  
[P7_Replace_Invocation]^_reportInvalidEOF ( e.getMessage (  )  ) ;^415^^^^^408^417^_reportError ( e.getMessage (  )  ) ;^[CLASS] ParserMinimalBase  [METHOD] _decodeBase64 [RETURN_TYPE] void   String str ByteArrayBuilder builder Base64Variant b64variant [VARIABLES] boolean  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  str  ByteArrayBuilder  builder  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  IllegalArgumentException  e  
[P14_Delete_Statement]^^415^^^^^408^417^_reportError ( e.getMessage (  )  ) ;^[CLASS] ParserMinimalBase  [METHOD] _decodeBase64 [RETURN_TYPE] void   String str ByteArrayBuilder builder Base64Variant b64variant [VARIABLES] boolean  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  str  ByteArrayBuilder  builder  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  IllegalArgumentException  e  
[P11_Insert_Donor_Statement]^_reportError ( msg ) ;_reportError ( e.getMessage (  )  ) ;^415^^^^^408^417^_reportError ( e.getMessage (  )  ) ;^[CLASS] ParserMinimalBase  [METHOD] _decodeBase64 [RETURN_TYPE] void   String str ByteArrayBuilder builder Base64Variant b64variant [VARIABLES] boolean  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  str  ByteArrayBuilder  builder  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  defaultValue  features  open  IllegalArgumentException  e  
[P1_Replace_Type]^char base;^429^^^^^426^444^String base;^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P2_Replace_Operator]^if  ( ch < INT_SPACE )  {^430^^^^^426^444^if  ( ch <= INT_SPACE )  {^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P5_Replace_Variable]^if  ( ch <= INT_SLASH )  {^430^^^^^426^444^if  ( ch <= INT_SPACE )  {^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P5_Replace_Variable]^if  ( INT_SPACE <= ch )  {^430^^^^^426^444^if  ( ch <= INT_SPACE )  {^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P6_Replace_Expression]^if  ( (("Illegal white space character (code 0x" + toHexString(ch)) + ") as character #") + (bindex + 1) + " of 4-char base64 unit: can only used between units" )  {^430^^^^^426^444^if  ( ch <= INT_SPACE )  {^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P6_Replace_Expression]^if  (  ( "Illegal white space character  ( code 0x" +  ( toHexString ( ch )  )  )  + " )  as character #" + bindex + 1 )  {^430^^^^^426^444^if  ( ch <= INT_SPACE )  {^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P6_Replace_Expression]^if  ( "Illegal white space character  ( code 0x" +  ( toHexString ( ch )  )  + " )  as character #" )  {^430^^^^^426^444^if  ( ch <= INT_SPACE )  {^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P6_Replace_Expression]^if  ( "Illegal white space character  ( code 0x" + toHexString ( ch ) )  {^430^^^^^426^444^if  ( ch <= INT_SPACE )  {^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P6_Replace_Expression]^if  ( bindex + 1 )  {^430^^^^^426^444^if  ( ch <= INT_SPACE )  {^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P6_Replace_Expression]^if  ( (("Unexpected padding character ('" + b64variant.getPaddingChar()) + "') as character #") + (bindex + 1) + " of 4-char base64 unit: padding only legal as 3rd or 4th character" )  {^430^^^^^426^444^if  ( ch <= INT_SPACE )  {^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P6_Replace_Expression]^if  (  ( "Unexpected padding character  ( '" +  ( b64variant.getPaddingChar (  )  )  )  + "' )  as character #" + bindex + 1 )  {^430^^^^^426^444^if  ( ch <= INT_SPACE )  {^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P6_Replace_Expression]^if  ( "Unexpected padding character  ( '" +  ( b64variant.getPaddingChar (  )  )  + "' )  as character #" )  {^430^^^^^426^444^if  ( ch <= INT_SPACE )  {^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P6_Replace_Expression]^if  ( "Unexpected padding character  ( '" + b64variant.getPaddingChar (  ) )  {^430^^^^^426^444^if  ( ch <= INT_SPACE )  {^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P6_Replace_Expression]^if  ( isDefined(ch)) || isISOControl(ch) )  {^430^^^^^426^444^if  ( ch <= INT_SPACE )  {^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P6_Replace_Expression]^if  ( "Illegal character (code 0x" + toHexString(ch) + ") in base64 content" )  {^430^^^^^426^444^if  ( ch <= INT_SPACE )  {^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P6_Replace_Expression]^if  ( "Illegal character  ( code 0x" + toHexString ( ch ) )  {^430^^^^^426^444^if  ( ch <= INT_SPACE )  {^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P6_Replace_Expression]^if  ( (("Illegal character '" + ch) + "' (code 0x") + toHexString(ch) + ") in base64 content" )  {^430^^^^^426^444^if  ( ch <= INT_SPACE )  {^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P6_Replace_Expression]^if  (  ( "Illegal character '" + ch )  + "'  ( code 0x" + toHexString ( ch ) )  {^430^^^^^426^444^if  ( ch <= INT_SPACE )  {^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P6_Replace_Expression]^if  ( "Illegal character '" + ch + "'  ( code 0x" )  {^430^^^^^426^444^if  ( ch <= INT_SPACE )  {^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P6_Replace_Expression]^if  ( "Illegal character '" + ch )  {^430^^^^^426^444^if  ( ch <= INT_SPACE )  {^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P8_Replace_Mix]^if  ( ch <= INT_TAB )  {^430^^^^^426^444^if  ( ch <= INT_SPACE )  {^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P6_Replace_Expression]^} else if  (  ( "Unexpected padding character  ( '" +  ( b64variant.getPaddingChar (  )  )  )  + "' )  as character #" + bindex + 1 )  {^432^^^^^426^444^} else if  ( b64variant.usesPaddingChar ( ch )  )  {^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P6_Replace_Expression]^} else if  ( "Unexpected padding character  ( '" +  ( b64variant.getPaddingChar (  )  )  + "' )  as character #" )  {^432^^^^^426^444^} else if  ( b64variant.usesPaddingChar ( ch )  )  {^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P6_Replace_Expression]^} else if  ( "Unexpected padding character  ( '" + b64variant.getPaddingChar (  ) )  {^432^^^^^426^444^} else if  ( b64variant.usesPaddingChar ( ch )  )  {^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P6_Replace_Expression]^} else if  ( bindex + 1 )  {^432^^^^^426^444^} else if  ( b64variant.usesPaddingChar ( ch )  )  {^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P6_Replace_Expression]^} else if  ( isDefined(ch)) || isISOControl(ch) )  {^432^^^^^426^444^} else if  ( b64variant.usesPaddingChar ( ch )  )  {^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P6_Replace_Expression]^} else if  ( "Illegal character (code 0x" + toHexString(ch) + ") in base64 content" )  {^432^^^^^426^444^} else if  ( b64variant.usesPaddingChar ( ch )  )  {^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P6_Replace_Expression]^} else if  ( "Illegal character  ( code 0x" + toHexString ( ch ) )  {^432^^^^^426^444^} else if  ( b64variant.usesPaddingChar ( ch )  )  {^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P6_Replace_Expression]^} else if  ( (("Illegal character '" + ch) + "' (code 0x") + toHexString(ch) + ") in base64 content" )  {^432^^^^^426^444^} else if  ( b64variant.usesPaddingChar ( ch )  )  {^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P6_Replace_Expression]^} else if  (  ( "Illegal character '" + ch )  + "'  ( code 0x" + toHexString ( ch ) )  {^432^^^^^426^444^} else if  ( b64variant.usesPaddingChar ( ch )  )  {^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P6_Replace_Expression]^} else if  ( "Illegal character '" + ch + "'  ( code 0x" )  {^432^^^^^426^444^} else if  ( b64variant.usesPaddingChar ( ch )  )  {^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P6_Replace_Expression]^} else if  ( "Illegal character '" + ch )  {^432^^^^^426^444^} else if  ( b64variant.usesPaddingChar ( ch )  )  {^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P6_Replace_Expression]^} else {^432^^^^^426^444^} else if  ( b64variant.usesPaddingChar ( ch )  )  {^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P7_Replace_Invocation]^} else if  ( b64variant.decode ( ch )  )  {^432^^^^^426^444^} else if  ( b64variant.usesPaddingChar ( ch )  )  {^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P13_Insert_Block]^if  ( ch <=  ( INT_SPACE )  )  {     base =  (  (  ( "Illegal white space character  ( code 0x" +  ( toHexString ( ch )  )  )  + " )  as character #" )  +  ( bindex + 1 )  )  + " of 4-char base64 unit: can only used between units"; }else     if  ( b64variant.usesPaddingChar ( ch )  )  {         base =  (  (  ( "Unexpected padding character  ( '" +  ( b64variant.getPaddingChar (  )  )  )  + "' )  as character #" )  +  ( bindex + 1 )  )  + " of 4-char base64 unit: padding only legal as 3rd or 4th character";     }else         if  (  ( ! ( isDefined ( ch )  )  )  ||  ( isISOControl ( ch )  )  )  {             base =  ( "Illegal character  ( code 0x" +  ( toHexString ( ch )  )  )  + " )  in base64 content";         }else {             base =  (  (  ( "Illegal character '" + ch )  + "'  ( code 0x" )  +  ( toHexString ( ch )  )  )  + " )  in base64 content";         }^432^^^^^426^444^[Delete]^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P13_Insert_Block]^if  (  ( ! ( isDefined ( ch )  )  )  ||  ( isISOControl ( ch )  )  )  {     base =  ( "Illegal character  ( code 0x" +  ( toHexString ( ch )  )  )  + " )  in base64 content"; }else {     base =  (  (  ( "Illegal character '" + ch )  + "'  ( code 0x" )  +  ( toHexString ( ch )  )  )  + " )  in base64 content"; }^432^^^^^426^444^[Delete]^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P2_Replace_Operator]^} else if  ( !Character.isDefined ( ch )  && Character.isISOControl ( ch )  )  {^434^^^^^426^444^} else if  ( !Character.isDefined ( ch )  || Character.isISOControl ( ch )  )  {^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P6_Replace_Expression]^} else if  ( !Character.isDefined ( ch )  ) {^434^^^^^426^444^} else if  ( !Character.isDefined ( ch )  || Character.isISOControl ( ch )  )  {^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P6_Replace_Expression]^} else if  (  Character.isISOControl ( ch )  )  {^434^^^^^426^444^} else if  ( !Character.isDefined ( ch )  || Character.isISOControl ( ch )  )  {^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P6_Replace_Expression]^} else if  ( "Illegal character (code 0x" + toHexString(ch) + ") in base64 content" )  {^434^^^^^426^444^} else if  ( !Character.isDefined ( ch )  || Character.isISOControl ( ch )  )  {^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P6_Replace_Expression]^} else if  ( "Illegal character  ( code 0x" + toHexString ( ch ) )  {^434^^^^^426^444^} else if  ( !Character.isDefined ( ch )  || Character.isISOControl ( ch )  )  {^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P6_Replace_Expression]^} else if  ( (("Illegal character '" + ch) + "' (code 0x") + toHexString(ch) + ") in base64 content" )  {^434^^^^^426^444^} else if  ( !Character.isDefined ( ch )  || Character.isISOControl ( ch )  )  {^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P6_Replace_Expression]^} else if  (  ( "Illegal character '" + ch )  + "'  ( code 0x" + toHexString ( ch ) )  {^434^^^^^426^444^} else if  ( !Character.isDefined ( ch )  || Character.isISOControl ( ch )  )  {^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P6_Replace_Expression]^} else if  ( "Illegal character '" + ch + "'  ( code 0x" )  {^434^^^^^426^444^} else if  ( !Character.isDefined ( ch )  || Character.isISOControl ( ch )  )  {^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P6_Replace_Expression]^} else if  ( "Illegal character '" + ch )  {^434^^^^^426^444^} else if  ( !Character.isDefined ( ch )  || Character.isISOControl ( ch )  )  {^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P6_Replace_Expression]^} else {^434^^^^^426^444^} else if  ( !Character.isDefined ( ch )  || Character.isISOControl ( ch )  )  {^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P7_Replace_Invocation]^} else if  ( !Character.isISOControl ( ch )  || Character.isISOControl ( ch )  )  {^434^^^^^426^444^} else if  ( !Character.isDefined ( ch )  || Character.isISOControl ( ch )  )  {^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P7_Replace_Invocation]^} else if  ( !Character.isDefined ( ch )  || Character.isDefined ( ch )  )  {^434^^^^^426^444^} else if  ( !Character.isDefined ( ch )  || Character.isISOControl ( ch )  )  {^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P8_Replace_Mix]^} else if  (  Character.isDefined ( ch )  )  {^434^^^^^426^444^} else if  ( !Character.isDefined ( ch )  || Character.isISOControl ( ch )  )  {^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P15_Unwrap_Block]^base = ("Illegal character (code 0x" + (java.lang.Integer.toHexString(ch))) + ") in base64 content";^434^435^436^437^438^426^444^} else if  ( !Character.isDefined ( ch )  || Character.isISOControl ( ch )  )  {  base = "Illegal character  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content"; } else { base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content"; }^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P16_Remove_Block]^^434^435^436^437^438^426^444^} else if  ( !Character.isDefined ( ch )  || Character.isISOControl ( ch )  )  {  base = "Illegal character  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content"; } else { base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content"; }^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P13_Insert_Block]^if  ( b64variant.usesPaddingChar ( ch )  )  {     base =  (  (  ( "Unexpected padding character  ( '" +  ( b64variant.getPaddingChar (  )  )  )  + "' )  as character #" )  +  ( bindex + 1 )  )  + " of 4-char base64 unit: padding only legal as 3rd or 4th character"; }else     if  (  ( ! ( isDefined ( ch )  )  )  ||  ( isISOControl ( ch )  )  )  {         base =  ( "Illegal character  ( code 0x" +  ( toHexString ( ch )  )  )  + " )  in base64 content";     }else {         base =  (  (  ( "Illegal character '" + ch )  + "'  ( code 0x" )  +  ( toHexString ( ch )  )  )  + " )  in base64 content";     }^434^^^^^426^444^[Delete]^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P1_Replace_Type]^base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexchar ( ch ) +" )  in base64 content";^438^^^^^426^444^base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P2_Replace_Operator]^base = "Illegal character '"+ch+"'  ||  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^438^^^^^426^444^base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P2_Replace_Operator]^base = "Illegal character '"+ch+"'  >>  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^438^^^^^426^444^base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P2_Replace_Operator]^base = "Illegal character '"+ch+"'  ^  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^438^^^^^426^444^base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P2_Replace_Operator]^base = "Illegal character '"+ch+"'  ==  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^438^^^^^426^444^base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P3_Replace_Literal]^base = "egal character"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^438^^^^^426^444^base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P8_Replace_Mix]^base =  "Illegal nullaracter '"+null+"'  ( code 0x"+Integer.toHexString ( null ) +" )  in base64 content";^438^^^^^426^444^base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P11_Insert_Donor_Statement]^base = "Illegal character  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^438^^^^^426^444^base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P14_Delete_Statement]^^438^^^^^426^444^base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P11_Insert_Donor_Statement]^return "'"+c+"'  ( code "+ch+" / 0x"+Integer.toHexString ( ch ) +" ) ";base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^438^^^^^426^444^base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P1_Replace_Type]^base = "Illegal character  ( code 0x"+Integer.toHexchar ( ch ) +" )  in base64 content";^436^^^^^426^444^base = "Illegal character  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P2_Replace_Operator]^base = "Illegal character  ||  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^436^^^^^426^444^base = "Illegal character  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P2_Replace_Operator]^base = "Illegal character  <=  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^436^^^^^426^444^base = "Illegal character  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P8_Replace_Mix]^base =  "Illegal nullaracter  ( code 0x"+Integer.toHexString ( null ) +" )  in base64 content";^436^^^^^426^444^base = "Illegal character  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P11_Insert_Donor_Statement]^base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";base = "Illegal character  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^436^^^^^426^444^base = "Illegal character  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P11_Insert_Donor_Statement]^base = "Illegal white space character  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";base = "Illegal character  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^436^^^^^426^444^base = "Illegal character  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P14_Delete_Statement]^^436^^^^^426^444^base = "Illegal character  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P2_Replace_Operator]^base = "Illegal character  >>  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^436^^^^^426^444^base = "Illegal character  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P2_Replace_Operator]^base = "Illegal character  !=  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^436^^^^^426^444^base = "Illegal character  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P2_Replace_Operator]^base = "Illegal character '"+ch+"'  |  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^438^^^^^426^444^base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P2_Replace_Operator]^base = "Illegal character '"+ch+"'  >  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^438^^^^^426^444^base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P2_Replace_Operator]^base = "Illegal character '"+ch+"'   instanceof   ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^438^^^^^426^444^base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P3_Replace_Literal]^base = "Illegal character 'al char"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^438^^^^^426^444^base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P2_Replace_Operator]^base = "Unexpected padding character  ==  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^433^^^^^426^444^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P2_Replace_Operator]^base = "Unexpected padding character  >  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^433^^^^^426^444^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P2_Replace_Operator]^base = "Unexpected padding character  &  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^433^^^^^426^444^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P2_Replace_Operator]^base = "Unexpected padding character  !=  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^433^^^^^426^444^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P2_Replace_Operator]^base = "Unexpected padding character  ||  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^433^^^^^426^444^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P3_Replace_Literal]^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +"c";^433^^^^^426^444^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P5_Replace_Variable]^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( INT_SLASH+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^433^^^^^426^444^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P7_Replace_Invocation]^base = "Unexpected padding character  ( '"+b64variant.usesPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^433^^^^^426^444^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P8_Replace_Mix]^base =  "Unexpected padding character  ( '"+null.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^433^^^^^426^444^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P11_Insert_Donor_Statement]^base = "Illegal white space character  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^433^^^^^426^444^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P14_Delete_Statement]^^433^^^^^426^444^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P2_Replace_Operator]^base = "Illegal character '"+ch+"'  <  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^438^^^^^426^444^base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P3_Replace_Literal]^base = "Illegal character 'Illegal charact"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^438^^^^^426^444^base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P2_Replace_Operator]^base = "Illegal character  &  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^436^^^^^426^444^base = "Illegal character  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P2_Replace_Operator]^base = "Illegal character  <<  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^436^^^^^426^444^base = "Illegal character  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P2_Replace_Operator]^base = "Unexpected padding character   instanceof   ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^433^^^^^426^444^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P2_Replace_Operator]^base = "Unexpected padding character  |  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^433^^^^^426^444^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P2_Replace_Operator]^base = "Unexpected padding character  &&  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^433^^^^^426^444^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P3_Replace_Literal]^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+-4 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^433^^^^^426^444^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P3_Replace_Literal]^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +"har base64 unit: p";^433^^^^^426^444^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P5_Replace_Variable]^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( INT_SPACE+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^433^^^^^426^444^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P2_Replace_Operator]^base = "Illegal character  &&  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^436^^^^^426^444^base = "Illegal character  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P2_Replace_Operator]^base = "Illegal character '"+ch+"'  <=  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^438^^^^^426^444^base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P2_Replace_Operator]^base = "Illegal character '"+ch+"'  >=  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^438^^^^^426^444^base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P3_Replace_Literal]^base = "Illegal character "+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^438^^^^^426^444^base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P5_Replace_Variable]^} else if  ( ch.usesPaddingChar ( b64variant )  )  {^432^^^^^426^444^} else if  ( b64variant.usesPaddingChar ( ch )  )  {^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P8_Replace_Mix]^} else if  ( b64variant .getPaddingChar (  )   )  {^432^^^^^426^444^} else if  ( b64variant.usesPaddingChar ( ch )  )  {^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P7_Replace_Invocation]^base = "Unexpected padding character  ( '"+b64variant .usesPaddingChar ( ch )  +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^433^^^^^426^444^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P1_Replace_Type]^base = "Illegal white space character  ( code 0x"+Integer.toHexchar ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^431^^^^^426^444^base = "Illegal white space character  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P2_Replace_Operator]^base = "Illegal white space character  <  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^431^^^^^426^444^base = "Illegal white space character  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P2_Replace_Operator]^base = "Illegal white space character  >=  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^431^^^^^426^444^base = "Illegal white space character  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P2_Replace_Operator]^base = "Illegal white space character  &  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^431^^^^^426^444^base = "Illegal white space character  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P2_Replace_Operator]^base = "Illegal white space character   instanceof   ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^431^^^^^426^444^base = "Illegal white space character  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P3_Replace_Literal]^base = "Illegal white space character  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+INT_SPACE ) +" of 4-char base64 unit: can only used between units";^431^^^^^426^444^base = "Illegal white space character  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P3_Replace_Literal]^base = "Illegal white space character  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units 4-char base64 unit: can onl";^431^^^^^426^444^base = "Illegal white space character  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P5_Replace_Variable]^base = "Illegal white space character  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( INT_TAB+1 ) +" of 4-char base64 unit: can only used between units";^431^^^^^426^444^base = "Illegal white space character  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P5_Replace_Variable]^base = "Illegal white space bindexaracter  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( ch+1 ) +" of 4-char base64 unit: can only used between units";^431^^^^^426^444^base = "Illegal white space character  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P8_Replace_Mix]^base =  "Illegal white space nullaracter  ( code 0x"+Integer.toHexString ( null ) +" )  as nullaracter #"+ ( bindex+1 ) +" of 4-nullar base64 unit: can only used between units";^431^^^^^426^444^base = "Illegal white space character  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P11_Insert_Donor_Statement]^base = "Illegal character  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";base = "Illegal white space character  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^431^^^^^426^444^base = "Illegal white space character  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P11_Insert_Donor_Statement]^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";base = "Illegal white space character  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^431^^^^^426^444^base = "Illegal white space character  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P14_Delete_Statement]^^431^^^^^426^444^base = "Illegal white space character  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P8_Replace_Mix]^}  if  ( !Character.isDefined ( ch )  || Character.isDefined ( ch )  )  {^434^^^^^426^444^} else if  ( !Character.isDefined ( ch )  || Character.isISOControl ( ch )  )  {^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P2_Replace_Operator]^base = "Illegal character '"+ch+"'  &  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^438^^^^^426^444^base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P3_Replace_Literal]^base = "racter "+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^438^^^^^426^444^base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P2_Replace_Operator]^base = "Illegal character  ^  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^436^^^^^426^444^base = "Illegal character  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P2_Replace_Operator]^base = "Illegal character '"+ch+"'  <<  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^438^^^^^426^444^base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P3_Replace_Literal]^base = "har"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^438^^^^^426^444^base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P2_Replace_Operator]^base = "Unexpected padding character  <=  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^433^^^^^426^444^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P2_Replace_Operator]^base = "Unexpected padding character  >>  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^433^^^^^426^444^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P3_Replace_Literal]^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+10 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^433^^^^^426^444^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P3_Replace_Literal]^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +"f 4-char base64 unit: padding only legal as 3rd or 4th charaof 4-char base64 unit: padding only legal as 3rd or 4th character";^433^^^^^426^444^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P5_Replace_Variable]^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( features+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^433^^^^^426^444^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P3_Replace_Literal]^base = "gal characterllegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^438^^^^^426^444^base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P2_Replace_Operator]^base = "Illegal character   instanceof   ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^436^^^^^426^444^base = "Illegal character  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P2_Replace_Operator]^base = "Illegal white space character  !=  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^431^^^^^426^444^base = "Illegal white space character  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P2_Replace_Operator]^base = "Illegal white space character  >  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^431^^^^^426^444^base = "Illegal white space character  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P2_Replace_Operator]^base = "Illegal white space character  >>  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^431^^^^^426^444^base = "Illegal white space character  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P3_Replace_Literal]^base = "Illegal white space character  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+ ) +" of 4-char base64 unit: can only used between units";^431^^^^^426^444^base = "Illegal white space character  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P3_Replace_Literal]^base = "Illegal white space character  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between unitsnly us";^431^^^^^426^444^base = "Illegal white space character  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P2_Replace_Operator]^base = "Unexpected padding character  ^  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^433^^^^^426^444^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P3_Replace_Literal]^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+INT_QUOTE ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^433^^^^^426^444^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P3_Replace_Literal]^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character or";^433^^^^^426^444^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P5_Replace_Variable]^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( INT_b+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^433^^^^^426^444^base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P2_Replace_Operator]^base = "Illegal character '"+ch+"'  !=  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^438^^^^^426^444^base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P3_Replace_Literal]^base = "aracter"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^438^^^^^426^444^base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P2_Replace_Operator]^if  ( msg == null )  {^440^^^^^426^444^if  ( msg != null )  {^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P6_Replace_Expression]^if  ( base + ": " + msg )  {^440^^^^^426^444^if  ( msg != null )  {^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P6_Replace_Expression]^if  ( base + ": " )  {^440^^^^^426^444^if  ( msg != null )  {^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P8_Replace_Mix]^if  ( msg != true )  {^440^^^^^426^444^if  ( msg != null )  {^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P9_Replace_Statement]^if  ( comment != null )  {^440^^^^^426^444^if  ( msg != null )  {^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P9_Replace_Statement]^if  ( t == null )  {^440^^^^^426^444^if  ( msg != null )  {^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P9_Replace_Statement]^if  ( _currToken != null )  {^440^^^^^426^444^if  ( msg != null )  {^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P15_Unwrap_Block]^base = (base + ": ") + msg;^440^441^442^^^426^444^if  ( msg != null )  { base = base + ": " + msg; }^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P16_Remove_Block]^^440^441^442^^^426^444^if  ( msg != null )  { base = base + ": " + msg; }^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P13_Insert_Block]^if  ( comment != null )  {     msg += ": " + comment; }^440^^^^^426^444^[Delete]^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P2_Replace_Operator]^base = base  |  ": " + msg;^441^^^^^426^444^base = base + ": " + msg;^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P3_Replace_Literal]^base = base + " " + msg;^441^^^^^426^444^base = base + ": " + msg;^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P5_Replace_Variable]^base = msg + ": " + base;^441^^^^^426^444^base = base + ": " + msg;^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P8_Replace_Mix]^base =  msg + ": " + msg;^441^^^^^426^444^base = base + ": " + msg;^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P2_Replace_Operator]^base = base  ||  ": " + msg;^441^^^^^426^444^base = base + ": " + msg;^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P7_Replace_Invocation]^throw _reportError ( base ) ;^443^^^^^426^444^throw _constructError ( base ) ;^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P11_Insert_Donor_Statement]^throw _constructError ( msg ) ;throw _constructError ( base ) ;^443^^^^^426^444^throw _constructError ( base ) ;^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P11_Insert_Donor_Statement]^throw _constructError ( msg, t ) ;throw _constructError ( base ) ;^443^^^^^426^444^throw _constructError ( base ) ;^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P5_Replace_Variable]^throw _constructError ( msg ) ;^443^^^^^426^444^throw _constructError ( base ) ;^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P14_Delete_Statement]^^443^^^^^426^444^throw _constructError ( base ) ;^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P11_Insert_Donor_Statement]^_reportError ( msg ) ;throw _constructError ( base ) ;^443^^^^^426^444^throw _constructError ( base ) ;^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidBase64 [RETURN_TYPE] void   Base64Variant b64variant char ch int bindex String msg [VARIABLES] char  ch  Base64Variant  b64variant  JsonToken  _currToken  _lastClearedToken  t  String  base  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P3_Replace_Literal]^throw _constructError ( "Unexpected end-of-String in base64 content bas" ) ;^452^^^^^451^453^throw _constructError ( "Unexpected end-of-String in base64 content" ) ;^[CLASS] ParserMinimalBase  [METHOD] _reportBase64EOF [RETURN_TYPE] void   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  boolean  
[P7_Replace_Invocation]^throw _reportError ( "Unexpected end-of-String in base64 content" ) ;^452^^^^^451^453^throw _constructError ( "Unexpected end-of-String in base64 content" ) ;^[CLASS] ParserMinimalBase  [METHOD] _reportBase64EOF [RETURN_TYPE] void   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  boolean  
[P3_Replace_Literal]^throw _constructError ( "Unexpected end-of-String in base64 contentUnexpected end-of-" ) ;^452^^^^^451^453^throw _constructError ( "Unexpected end-of-String in base64 content" ) ;^[CLASS] ParserMinimalBase  [METHOD] _reportBase64EOF [RETURN_TYPE] void   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  boolean  
[P14_Delete_Statement]^^452^^^^^451^453^throw _constructError ( "Unexpected end-of-String in base64 content" ) ;^[CLASS] ParserMinimalBase  [METHOD] _reportBase64EOF [RETURN_TYPE] void   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  boolean  
[P11_Insert_Donor_Statement]^_reportError ( "Unexpected end-of-input"+msg ) ;throw _constructError ( "Unexpected end-of-String in base64 content" ) ;^452^^^^^451^453^throw _constructError ( "Unexpected end-of-String in base64 content" ) ;^[CLASS] ParserMinimalBase  [METHOD] _reportBase64EOF [RETURN_TYPE] void   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  boolean  
[P3_Replace_Literal]^return "nulll".equals ( value ) ;^469^^^^^468^470^return "null".equals ( value ) ;^[CLASS] ParserMinimalBase  [METHOD] _hasTextualNull [RETURN_TYPE] boolean   String value [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  value  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P8_Replace_Mix]^return "this".equals ( value ) ;^469^^^^^468^470^return "null".equals ( value ) ;^[CLASS] ParserMinimalBase  [METHOD] _hasTextualNull [RETURN_TYPE] boolean   String value [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  value  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P3_Replace_Literal]^return "ull".equals ( value ) ;^469^^^^^468^470^return "null".equals ( value ) ;^[CLASS] ParserMinimalBase  [METHOD] _hasTextualNull [RETURN_TYPE] boolean   String value [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  value  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P14_Delete_Statement]^^469^^^^^468^470^return "null".equals ( value ) ;^[CLASS] ParserMinimalBase  [METHOD] _hasTextualNull [RETURN_TYPE] boolean   String value [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  value  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  defaultValue  features  open  
[P1_Replace_Type]^char msg = "Unexpected character  ( "+_getCharDesc ( ch ) +" ) ";^481^^^^^478^486^String msg = "Unexpected character  ( "+_getCharDesc ( ch ) +" ) ";^[CLASS] ParserMinimalBase  [METHOD] _reportUnexpectedChar [RETURN_TYPE] void   int ch String comment [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  comment  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  open  
[P2_Replace_Operator]^String msg = "Unexpected character  <=  ( "+_getCharDesc ( ch ) +" ) ";^481^^^^^478^486^String msg = "Unexpected character  ( "+_getCharDesc ( ch ) +" ) ";^[CLASS] ParserMinimalBase  [METHOD] _reportUnexpectedChar [RETURN_TYPE] void   int ch String comment [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  comment  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  open  
[P2_Replace_Operator]^String msg = "Unexpected character  !=  ( "+_getCharDesc ( ch ) +" ) ";^481^^^^^478^486^String msg = "Unexpected character  ( "+_getCharDesc ( ch ) +" ) ";^[CLASS] ParserMinimalBase  [METHOD] _reportUnexpectedChar [RETURN_TYPE] void   int ch String comment [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  comment  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  open  
[P5_Replace_Variable]^String msg = "Unexpected INT_TABaracter  ( "+_getCharDesc ( ch ) +" ) ";^481^^^^^478^486^String msg = "Unexpected character  ( "+_getCharDesc ( ch ) +" ) ";^[CLASS] ParserMinimalBase  [METHOD] _reportUnexpectedChar [RETURN_TYPE] void   int ch String comment [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  comment  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  open  
[P7_Replace_Invocation]^String msg = "Unexpected character  ( "+getValueAsInt ( ch ) +" ) ";^481^^^^^478^486^String msg = "Unexpected character  ( "+_getCharDesc ( ch ) +" ) ";^[CLASS] ParserMinimalBase  [METHOD] _reportUnexpectedChar [RETURN_TYPE] void   int ch String comment [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  comment  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  open  
[P8_Replace_Mix]^String msg = "Unexpected INT_faracter  ( "+_getCharDesc ( ch ) +" ) ";^481^^^^^478^486^String msg = "Unexpected character  ( "+_getCharDesc ( ch ) +" ) ";^[CLASS] ParserMinimalBase  [METHOD] _reportUnexpectedChar [RETURN_TYPE] void   int ch String comment [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  comment  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  open  
[P8_Replace_Mix]^String msg = "Unexpected INT_baracter  ( "+getValueAsInt ( ch ) +" ) ";^481^^^^^478^486^String msg = "Unexpected character  ( "+_getCharDesc ( ch ) +" ) ";^[CLASS] ParserMinimalBase  [METHOD] _reportUnexpectedChar [RETURN_TYPE] void   int ch String comment [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  comment  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  open  
[P14_Delete_Statement]^^481^^^^^478^486^String msg = "Unexpected character  ( "+_getCharDesc ( ch ) +" ) ";^[CLASS] ParserMinimalBase  [METHOD] _reportUnexpectedChar [RETURN_TYPE] void   int ch String comment [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  comment  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  open  
[P11_Insert_Donor_Statement]^_reportError ( "Unrecognized character escape "+_getCharDesc ( ch )  ) ;String msg = "Unexpected character  ( "+_getCharDesc ( ch ) +" ) ";^481^^^^^478^486^String msg = "Unexpected character  ( "+_getCharDesc ( ch ) +" ) ";^[CLASS] ParserMinimalBase  [METHOD] _reportUnexpectedChar [RETURN_TYPE] void   int ch String comment [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  comment  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  open  
[P2_Replace_Operator]^if  ( comment == null )  {^482^^^^^478^486^if  ( comment != null )  {^[CLASS] ParserMinimalBase  [METHOD] _reportUnexpectedChar [RETURN_TYPE] void   int ch String comment [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  comment  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  open  
[P5_Replace_Variable]^if  ( msg != null )  {^482^^^^^478^486^if  ( comment != null )  {^[CLASS] ParserMinimalBase  [METHOD] _reportUnexpectedChar [RETURN_TYPE] void   int ch String comment [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  comment  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  open  
[P6_Replace_Expression]^if  ( ": " + comment )  {^482^^^^^478^486^if  ( comment != null )  {^[CLASS] ParserMinimalBase  [METHOD] _reportUnexpectedChar [RETURN_TYPE] void   int ch String comment [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  comment  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  open  
[P8_Replace_Mix]^if  ( comment != this )  {^482^^^^^478^486^if  ( comment != null )  {^[CLASS] ParserMinimalBase  [METHOD] _reportUnexpectedChar [RETURN_TYPE] void   int ch String comment [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  comment  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  open  
[P9_Replace_Statement]^if  ( t == null )  {^482^^^^^478^486^if  ( comment != null )  {^[CLASS] ParserMinimalBase  [METHOD] _reportUnexpectedChar [RETURN_TYPE] void   int ch String comment [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  comment  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  open  
[P9_Replace_Statement]^if  ( _currToken != null )  {^482^^^^^478^486^if  ( comment != null )  {^[CLASS] ParserMinimalBase  [METHOD] _reportUnexpectedChar [RETURN_TYPE] void   int ch String comment [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  comment  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  open  
[P15_Unwrap_Block]^msg += ": " + comment;^482^483^484^^^478^486^if  ( comment != null )  { msg += ": "+comment; }^[CLASS] ParserMinimalBase  [METHOD] _reportUnexpectedChar [RETURN_TYPE] void   int ch String comment [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  comment  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  open  
[P16_Remove_Block]^^482^483^484^^^478^486^if  ( comment != null )  { msg += ": "+comment; }^[CLASS] ParserMinimalBase  [METHOD] _reportUnexpectedChar [RETURN_TYPE] void   int ch String comment [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  comment  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  open  
[P13_Insert_Block]^if  ( msg != null )  {     base =  ( base + ": " )  + msg; }^482^^^^^478^486^[Delete]^[CLASS] ParserMinimalBase  [METHOD] _reportUnexpectedChar [RETURN_TYPE] void   int ch String comment [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  comment  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  open  
[P3_Replace_Literal]^msg += ": :"+comment;^483^^^^^478^486^msg += ": "+comment;^[CLASS] ParserMinimalBase  [METHOD] _reportUnexpectedChar [RETURN_TYPE] void   int ch String comment [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  comment  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  open  
[P8_Replace_Mix]^msg +=  ": "+null;^483^^^^^478^486^msg += ": "+comment;^[CLASS] ParserMinimalBase  [METHOD] _reportUnexpectedChar [RETURN_TYPE] void   int ch String comment [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  comment  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  open  
[P5_Replace_Variable]^_reportError ( comment ) ;^485^^^^^478^486^_reportError ( msg ) ;^[CLASS] ParserMinimalBase  [METHOD] _reportUnexpectedChar [RETURN_TYPE] void   int ch String comment [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  comment  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  open  
[P7_Replace_Invocation]^_reportInvalidEOF ( msg ) ;^485^^^^^478^486^_reportError ( msg ) ;^[CLASS] ParserMinimalBase  [METHOD] _reportUnexpectedChar [RETURN_TYPE] void   int ch String comment [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  comment  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  open  
[P14_Delete_Statement]^^485^^^^^478^486^_reportError ( msg ) ;^[CLASS] ParserMinimalBase  [METHOD] _reportUnexpectedChar [RETURN_TYPE] void   int ch String comment [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  comment  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  open  
[P11_Insert_Donor_Statement]^throw _constructError ( base ) ;_reportError ( msg ) ;^485^^^^^478^486^_reportError ( msg ) ;^[CLASS] ParserMinimalBase  [METHOD] _reportUnexpectedChar [RETURN_TYPE] void   int ch String comment [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  comment  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  open  
[P11_Insert_Donor_Statement]^throw _constructError ( msg ) ;_reportError ( msg ) ;^485^^^^^478^486^_reportError ( msg ) ;^[CLASS] ParserMinimalBase  [METHOD] _reportUnexpectedChar [RETURN_TYPE] void   int ch String comment [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  comment  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  open  
[P11_Insert_Donor_Statement]^_reportError ( e.getMessage (  )  ) ;_reportError ( msg ) ;^485^^^^^478^486^_reportError ( msg ) ;^[CLASS] ParserMinimalBase  [METHOD] _reportUnexpectedChar [RETURN_TYPE] void   int ch String comment [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  comment  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  open  
[P11_Insert_Donor_Statement]^throw _constructError ( msg, t ) ;_reportError ( msg ) ;^485^^^^^478^486^_reportError ( msg ) ;^[CLASS] ParserMinimalBase  [METHOD] _reportUnexpectedChar [RETURN_TYPE] void   int ch String comment [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  comment  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  open  
[P3_Replace_Literal]^_reportInvalidEOF ( " in in"+_currToken ) ;^491^^^^^488^492^_reportInvalidEOF ( " in "+_currToken ) ;^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidEOF [RETURN_TYPE] void   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  open  boolean  
[P7_Replace_Invocation]^_reportError ( " in "+_currToken ) ;^491^^^^^488^492^_reportInvalidEOF ( " in "+_currToken ) ;^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidEOF [RETURN_TYPE] void   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  open  boolean  
[P8_Replace_Mix]^_reportError ( " in "+t ) ;^491^^^^^488^492^_reportInvalidEOF ( " in "+_currToken ) ;^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidEOF [RETURN_TYPE] void   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  open  boolean  
[P14_Delete_Statement]^^491^^^^^488^492^_reportInvalidEOF ( " in "+_currToken ) ;^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidEOF [RETURN_TYPE] void   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  open  boolean  
[P11_Insert_Donor_Statement]^_reportInvalidEOF ( " in a value" ) ;_reportInvalidEOF ( " in "+_currToken ) ;^491^^^^^488^492^_reportInvalidEOF ( " in "+_currToken ) ;^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidEOF [RETURN_TYPE] void   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  open  boolean  
[P3_Replace_Literal]^_reportError ( "nexpected end-of-input"+msg ) ;^497^^^^^494^498^_reportError ( "Unexpected end-of-input"+msg ) ;^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidEOF [RETURN_TYPE] void   String msg [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  open  
[P7_Replace_Invocation]^_reportUnexpectedChar ( "Unexpected end-of-input"+msg ) ;^497^^^^^494^498^_reportError ( "Unexpected end-of-input"+msg ) ;^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidEOF [RETURN_TYPE] void   String msg [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  open  
[P14_Delete_Statement]^^497^^^^^494^498^_reportError ( "Unexpected end-of-input"+msg ) ;^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidEOF [RETURN_TYPE] void   String msg [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  open  
[P11_Insert_Donor_Statement]^throw _constructError ( "Unexpected end-of-String in base64 content" ) ;_reportError ( "Unexpected end-of-input"+msg ) ;^497^^^^^494^498^_reportError ( "Unexpected end-of-input"+msg ) ;^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidEOF [RETURN_TYPE] void   String msg [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  open  
[P3_Replace_Literal]^_reportInvalidEOF ( "a va" ) ;^502^^^^^500^503^_reportInvalidEOF ( " in a value" ) ;^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidEOFInValue [RETURN_TYPE] void   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  open  boolean  
[P7_Replace_Invocation]^_reportError ( " in a value" ) ;^502^^^^^500^503^_reportInvalidEOF ( " in a value" ) ;^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidEOFInValue [RETURN_TYPE] void   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  open  boolean  
[P14_Delete_Statement]^^502^^^^^500^503^_reportInvalidEOF ( " in a value" ) ;^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidEOFInValue [RETURN_TYPE] void   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  open  boolean  
[P11_Insert_Donor_Statement]^_reportInvalidEOF ( " in "+_currToken ) ;_reportInvalidEOF ( " in a value" ) ;^502^^^^^500^503^_reportInvalidEOF ( " in a value" ) ;^[CLASS] ParserMinimalBase  [METHOD] _reportInvalidEOFInValue [RETURN_TYPE] void   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  open  boolean  
[P1_Replace_Type]^String c =  ( String )  i;^508^^^^^505^511^char c =  ( char )  i;^[CLASS] ParserMinimalBase  [METHOD] _throwInvalidSpace [RETURN_TYPE] void   int i [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  String  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P11_Insert_Donor_Statement]^char c =  ( char )  ch;char c =  ( char )  i;^508^^^^^505^511^char c =  ( char )  i;^[CLASS] ParserMinimalBase  [METHOD] _throwInvalidSpace [RETURN_TYPE] void   int i [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  String  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P1_Replace_Type]^char msg = "Illegal character  ( "+_getCharDesc ( c ) +" ) : only regular white space  ( \\r, \\n, \\t )  is allowed between tokens";^509^^^^^505^511^String msg = "Illegal character  ( "+_getCharDesc ( c ) +" ) : only regular white space  ( \\r, \\n, \\t )  is allowed between tokens";^[CLASS] ParserMinimalBase  [METHOD] _throwInvalidSpace [RETURN_TYPE] void   int i [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  String  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P2_Replace_Operator]^String msg = "Illegal character  <<  ( "+_getCharDesc ( c ) +" ) : only regular white space  ( \\r, \\n, \\t )  is allowed between tokens";^509^^^^^505^511^String msg = "Illegal character  ( "+_getCharDesc ( c ) +" ) : only regular white space  ( \\r, \\n, \\t )  is allowed between tokens";^[CLASS] ParserMinimalBase  [METHOD] _throwInvalidSpace [RETURN_TYPE] void   int i [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  String  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P2_Replace_Operator]^String msg = "Illegal character  &&  ( "+_getCharDesc ( c ) +" ) : only regular white space  ( \\r, \\n, \\t )  is allowed between tokens";^509^^^^^505^511^String msg = "Illegal character  ( "+_getCharDesc ( c ) +" ) : only regular white space  ( \\r, \\n, \\t )  is allowed between tokens";^[CLASS] ParserMinimalBase  [METHOD] _throwInvalidSpace [RETURN_TYPE] void   int i [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  String  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P7_Replace_Invocation]^String msg = "Illegal character  ( "+getValueAsInt ( c ) +" ) : only regular white space  ( \\r, \\n, \\t )  is allowed between tokens";^509^^^^^505^511^String msg = "Illegal character  ( "+_getCharDesc ( c ) +" ) : only regular white space  ( \\r, \\n, \\t )  is allowed between tokens";^[CLASS] ParserMinimalBase  [METHOD] _throwInvalidSpace [RETURN_TYPE] void   int i [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  String  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P11_Insert_Donor_Statement]^String msg = "Illegal unquoted character  ( "+_getCharDesc ( c ) +" ) : has to be escaped using backslash to be included in "+ctxtDesc;String msg = "Illegal character  ( "+_getCharDesc ( c ) +" ) : only regular white space  ( \\r, \\n, \\t )  is allowed between tokens";^509^^^^^505^511^String msg = "Illegal character  ( "+_getCharDesc ( c ) +" ) : only regular white space  ( \\r, \\n, \\t )  is allowed between tokens";^[CLASS] ParserMinimalBase  [METHOD] _throwInvalidSpace [RETURN_TYPE] void   int i [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  String  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P14_Delete_Statement]^^509^510^^^^505^511^String msg = "Illegal character  ( "+_getCharDesc ( c ) +" ) : only regular white space  ( \\r, \\n, \\t )  is allowed between tokens"; _reportError ( msg ) ;^[CLASS] ParserMinimalBase  [METHOD] _throwInvalidSpace [RETURN_TYPE] void   int i [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  String  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P7_Replace_Invocation]^_reportInvalidEOF ( msg ) ;^510^^^^^505^511^_reportError ( msg ) ;^[CLASS] ParserMinimalBase  [METHOD] _throwInvalidSpace [RETURN_TYPE] void   int i [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  String  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P14_Delete_Statement]^^510^^^^^505^511^_reportError ( msg ) ;^[CLASS] ParserMinimalBase  [METHOD] _throwInvalidSpace [RETURN_TYPE] void   int i [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  String  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P11_Insert_Donor_Statement]^throw _constructError ( base ) ;_reportError ( msg ) ;^510^^^^^505^511^_reportError ( msg ) ;^[CLASS] ParserMinimalBase  [METHOD] _throwInvalidSpace [RETURN_TYPE] void   int i [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  String  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P11_Insert_Donor_Statement]^throw _constructError ( msg ) ;_reportError ( msg ) ;^510^^^^^505^511^_reportError ( msg ) ;^[CLASS] ParserMinimalBase  [METHOD] _throwInvalidSpace [RETURN_TYPE] void   int i [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  String  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P11_Insert_Donor_Statement]^_reportError ( e.getMessage (  )  ) ;_reportError ( msg ) ;^510^^^^^505^511^_reportError ( msg ) ;^[CLASS] ParserMinimalBase  [METHOD] _throwInvalidSpace [RETURN_TYPE] void   int i [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  String  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P11_Insert_Donor_Statement]^throw _constructError ( msg, t ) ;_reportError ( msg ) ;^510^^^^^505^511^_reportError ( msg ) ;^[CLASS] ParserMinimalBase  [METHOD] _throwInvalidSpace [RETURN_TYPE] void   int i [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  String  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P2_Replace_Operator]^if  ( !isEnabled ( Feature.ALLOW_UNQUOTED_CONTROL_CHARS )  && i >= INT_SPACE )  {^522^^^^^518^527^if  ( !isEnabled ( Feature.ALLOW_UNQUOTED_CONTROL_CHARS )  || i >= INT_SPACE )  {^[CLASS] ParserMinimalBase  [METHOD] _throwUnquotedSpace [RETURN_TYPE] void   int i String ctxtDesc [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  String  ctxtDesc  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P2_Replace_Operator]^if  ( !isEnabled ( Feature.ALLOW_UNQUOTED_CONTROL_CHARS )  || i > INT_SPACE )  {^522^^^^^518^527^if  ( !isEnabled ( Feature.ALLOW_UNQUOTED_CONTROL_CHARS )  || i >= INT_SPACE )  {^[CLASS] ParserMinimalBase  [METHOD] _throwUnquotedSpace [RETURN_TYPE] void   int i String ctxtDesc [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  String  ctxtDesc  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P5_Replace_Variable]^if  ( !isEnabled ( Feature.ALLOW_UNQUOTED_CONTROL_CHARS )  || INT_f >= INT_SPACE )  {^522^^^^^518^527^if  ( !isEnabled ( Feature.ALLOW_UNQUOTED_CONTROL_CHARS )  || i >= INT_SPACE )  {^[CLASS] ParserMinimalBase  [METHOD] _throwUnquotedSpace [RETURN_TYPE] void   int i String ctxtDesc [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  String  ctxtDesc  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P5_Replace_Variable]^if  ( !isEnabled ( Feature.ALLOW_UNQUOTED_CONTROL_CHARS )  || i >= INT_TAB )  {^522^^^^^518^527^if  ( !isEnabled ( Feature.ALLOW_UNQUOTED_CONTROL_CHARS )  || i >= INT_SPACE )  {^[CLASS] ParserMinimalBase  [METHOD] _throwUnquotedSpace [RETURN_TYPE] void   int i String ctxtDesc [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  String  ctxtDesc  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P5_Replace_Variable]^if  ( !isEnabled ( Feature.ALLOW_UNQUOTED_CONTROL_CHARS )  || INT_SPACE >= i )  {^522^^^^^518^527^if  ( !isEnabled ( Feature.ALLOW_UNQUOTED_CONTROL_CHARS )  || i >= INT_SPACE )  {^[CLASS] ParserMinimalBase  [METHOD] _throwUnquotedSpace [RETURN_TYPE] void   int i String ctxtDesc [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  String  ctxtDesc  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P6_Replace_Expression]^if  ( !isEnabled ( Feature.ALLOW_UNQUOTED_CONTROL_CHARS )  ) {^522^^^^^518^527^if  ( !isEnabled ( Feature.ALLOW_UNQUOTED_CONTROL_CHARS )  || i >= INT_SPACE )  {^[CLASS] ParserMinimalBase  [METHOD] _throwUnquotedSpace [RETURN_TYPE] void   int i String ctxtDesc [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  String  ctxtDesc  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P6_Replace_Expression]^if  (  i >= INT_SPACE )  {^522^^^^^518^527^if  ( !isEnabled ( Feature.ALLOW_UNQUOTED_CONTROL_CHARS )  || i >= INT_SPACE )  {^[CLASS] ParserMinimalBase  [METHOD] _throwUnquotedSpace [RETURN_TYPE] void   int i String ctxtDesc [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  String  ctxtDesc  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P6_Replace_Expression]^if  ( ("Illegal unquoted character (" + _getCharDesc(c)) + "): has to be escaped using backslash to be included in " + ctxtDesc )  {^522^^^^^518^527^if  ( !isEnabled ( Feature.ALLOW_UNQUOTED_CONTROL_CHARS )  || i >= INT_SPACE )  {^[CLASS] ParserMinimalBase  [METHOD] _throwUnquotedSpace [RETURN_TYPE] void   int i String ctxtDesc [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  String  ctxtDesc  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P6_Replace_Expression]^if  ( "Illegal unquoted character  ( " +  ( _getCharDesc ( c )  )  + " ) : has to be escaped using backslash to be included in " )  {^522^^^^^518^527^if  ( !isEnabled ( Feature.ALLOW_UNQUOTED_CONTROL_CHARS )  || i >= INT_SPACE )  {^[CLASS] ParserMinimalBase  [METHOD] _throwUnquotedSpace [RETURN_TYPE] void   int i String ctxtDesc [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  String  ctxtDesc  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P6_Replace_Expression]^if  ( "Illegal unquoted character  ( " + _getCharDesc ( c ) )  {^522^^^^^518^527^if  ( !isEnabled ( Feature.ALLOW_UNQUOTED_CONTROL_CHARS )  || i >= INT_SPACE )  {^[CLASS] ParserMinimalBase  [METHOD] _throwUnquotedSpace [RETURN_TYPE] void   int i String ctxtDesc [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  String  ctxtDesc  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P7_Replace_Invocation]^if  ( !getEmbeddedObject ( Feature.ALLOW_UNQUOTED_CONTROL_CHARS )  || i >= INT_SPACE )  {^522^^^^^518^527^if  ( !isEnabled ( Feature.ALLOW_UNQUOTED_CONTROL_CHARS )  || i >= INT_SPACE )  {^[CLASS] ParserMinimalBase  [METHOD] _throwUnquotedSpace [RETURN_TYPE] void   int i String ctxtDesc [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  String  ctxtDesc  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P8_Replace_Mix]^if  ( !isEnabled ( Feature.ALLOW_UNQUOTED_CONTROL_CHARS )  || i >= INT_b )  {^522^^^^^518^527^if  ( !isEnabled ( Feature.ALLOW_UNQUOTED_CONTROL_CHARS )  || i >= INT_SPACE )  {^[CLASS] ParserMinimalBase  [METHOD] _throwUnquotedSpace [RETURN_TYPE] void   int i String ctxtDesc [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  String  ctxtDesc  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P15_Unwrap_Block]^char c = ((char) (i)); java.lang.String msg = (("Illegal unquoted character (" + (com.fasterxml.jackson.core.base.ParserMinimalBase._getCharDesc(c))) + "): has to be escaped using backslash to be included in ") + ctxtDesc; _reportError(msg);^522^523^524^525^526^518^527^if  ( !isEnabled ( Feature.ALLOW_UNQUOTED_CONTROL_CHARS )  || i >= INT_SPACE )  { char c =  ( char )  i; String msg = "Illegal unquoted character  ( "+_getCharDesc ( c ) +" ) : has to be escaped using backslash to be included in "+ctxtDesc; _reportError ( msg ) ; }^[CLASS] ParserMinimalBase  [METHOD] _throwUnquotedSpace [RETURN_TYPE] void   int i String ctxtDesc [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  String  ctxtDesc  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P16_Remove_Block]^^522^523^524^525^526^518^527^if  ( !isEnabled ( Feature.ALLOW_UNQUOTED_CONTROL_CHARS )  || i >= INT_SPACE )  { char c =  ( char )  i; String msg = "Illegal unquoted character  ( "+_getCharDesc ( c ) +" ) : has to be escaped using backslash to be included in "+ctxtDesc; _reportError ( msg ) ; }^[CLASS] ParserMinimalBase  [METHOD] _throwUnquotedSpace [RETURN_TYPE] void   int i String ctxtDesc [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  String  ctxtDesc  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P1_Replace_Type]^int c =  ( int )  i;^523^^^^^518^527^char c =  ( char )  i;^[CLASS] ParserMinimalBase  [METHOD] _throwUnquotedSpace [RETURN_TYPE] void   int i String ctxtDesc [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  String  ctxtDesc  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P11_Insert_Donor_Statement]^char c =  ( char )  ch;char c =  ( char )  i;^523^^^^^518^527^char c =  ( char )  i;^[CLASS] ParserMinimalBase  [METHOD] _throwUnquotedSpace [RETURN_TYPE] void   int i String ctxtDesc [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  String  ctxtDesc  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P1_Replace_Type]^char msg = "Illegal unquoted character  ( "+_getCharDesc ( c ) +" ) : has to be escaped using backslash to be included in "+ctxtDesc;^524^^^^^518^527^String msg = "Illegal unquoted character  ( "+_getCharDesc ( c ) +" ) : has to be escaped using backslash to be included in "+ctxtDesc;^[CLASS] ParserMinimalBase  [METHOD] _throwUnquotedSpace [RETURN_TYPE] void   int i String ctxtDesc [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  String  ctxtDesc  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P2_Replace_Operator]^String msg = "Illegal unquoted character  &&  ( "+_getCharDesc ( c ) +" ) : has to be escaped using backslash to be included in "+ctxtDesc;^524^^^^^518^527^String msg = "Illegal unquoted character  ( "+_getCharDesc ( c ) +" ) : has to be escaped using backslash to be included in "+ctxtDesc;^[CLASS] ParserMinimalBase  [METHOD] _throwUnquotedSpace [RETURN_TYPE] void   int i String ctxtDesc [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  String  ctxtDesc  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P2_Replace_Operator]^String msg = "Illegal unquoted character  ^  ( "+_getCharDesc ( c ) +" ) : has to be escaped using backslash to be included in "+ctxtDesc;^524^^^^^518^527^String msg = "Illegal unquoted character  ( "+_getCharDesc ( c ) +" ) : has to be escaped using backslash to be included in "+ctxtDesc;^[CLASS] ParserMinimalBase  [METHOD] _throwUnquotedSpace [RETURN_TYPE] void   int i String ctxtDesc [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  String  ctxtDesc  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P2_Replace_Operator]^String msg = "Illegal unquoted character  <=  ( "+_getCharDesc ( c ) +" ) : has to be escaped using backslash to be included in "+ctxtDesc;^524^^^^^518^527^String msg = "Illegal unquoted character  ( "+_getCharDesc ( c ) +" ) : has to be escaped using backslash to be included in "+ctxtDesc;^[CLASS] ParserMinimalBase  [METHOD] _throwUnquotedSpace [RETURN_TYPE] void   int i String ctxtDesc [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  String  ctxtDesc  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P7_Replace_Invocation]^String msg = "Illegal unquoted character  ( "+getValueAsInt ( c ) +" ) : has to be escaped using backslash to be included in "+ctxtDesc;^524^^^^^518^527^String msg = "Illegal unquoted character  ( "+_getCharDesc ( c ) +" ) : has to be escaped using backslash to be included in "+ctxtDesc;^[CLASS] ParserMinimalBase  [METHOD] _throwUnquotedSpace [RETURN_TYPE] void   int i String ctxtDesc [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  String  ctxtDesc  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P11_Insert_Donor_Statement]^String msg = "Illegal character  ( "+_getCharDesc ( c ) +" ) : only regular white space  ( \\r, \\n, \\t )  is allowed between tokens";String msg = "Illegal unquoted character  ( "+_getCharDesc ( c ) +" ) : has to be escaped using backslash to be included in "+ctxtDesc;^524^^^^^518^527^String msg = "Illegal unquoted character  ( "+_getCharDesc ( c ) +" ) : has to be escaped using backslash to be included in "+ctxtDesc;^[CLASS] ParserMinimalBase  [METHOD] _throwUnquotedSpace [RETURN_TYPE] void   int i String ctxtDesc [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  String  ctxtDesc  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P14_Delete_Statement]^^524^^^^^518^527^String msg = "Illegal unquoted character  ( "+_getCharDesc ( c ) +" ) : has to be escaped using backslash to be included in "+ctxtDesc;^[CLASS] ParserMinimalBase  [METHOD] _throwUnquotedSpace [RETURN_TYPE] void   int i String ctxtDesc [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  String  ctxtDesc  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P5_Replace_Variable]^_reportError ( ctxtDesc ) ;^525^^^^^518^527^_reportError ( msg ) ;^[CLASS] ParserMinimalBase  [METHOD] _throwUnquotedSpace [RETURN_TYPE] void   int i String ctxtDesc [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  String  ctxtDesc  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P7_Replace_Invocation]^_reportInvalidEOF ( msg ) ;^525^^^^^518^527^_reportError ( msg ) ;^[CLASS] ParserMinimalBase  [METHOD] _throwUnquotedSpace [RETURN_TYPE] void   int i String ctxtDesc [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  String  ctxtDesc  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P8_Replace_Mix]^_reportInvalidEOF ( ctxtDesc ) ;^525^^^^^518^527^_reportError ( msg ) ;^[CLASS] ParserMinimalBase  [METHOD] _throwUnquotedSpace [RETURN_TYPE] void   int i String ctxtDesc [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  String  ctxtDesc  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P14_Delete_Statement]^^525^^^^^518^527^_reportError ( msg ) ;^[CLASS] ParserMinimalBase  [METHOD] _throwUnquotedSpace [RETURN_TYPE] void   int i String ctxtDesc [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  String  ctxtDesc  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P11_Insert_Donor_Statement]^throw _constructError ( base ) ;_reportError ( msg ) ;^525^^^^^518^527^_reportError ( msg ) ;^[CLASS] ParserMinimalBase  [METHOD] _throwUnquotedSpace [RETURN_TYPE] void   int i String ctxtDesc [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  String  ctxtDesc  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P11_Insert_Donor_Statement]^throw _constructError ( msg ) ;_reportError ( msg ) ;^525^^^^^518^527^_reportError ( msg ) ;^[CLASS] ParserMinimalBase  [METHOD] _throwUnquotedSpace [RETURN_TYPE] void   int i String ctxtDesc [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  String  ctxtDesc  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P11_Insert_Donor_Statement]^_reportError ( e.getMessage (  )  ) ;_reportError ( msg ) ;^525^^^^^518^527^_reportError ( msg ) ;^[CLASS] ParserMinimalBase  [METHOD] _throwUnquotedSpace [RETURN_TYPE] void   int i String ctxtDesc [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  String  ctxtDesc  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P11_Insert_Donor_Statement]^throw _constructError ( msg, t ) ;_reportError ( msg ) ;^525^^^^^518^527^_reportError ( msg ) ;^[CLASS] ParserMinimalBase  [METHOD] _throwUnquotedSpace [RETURN_TYPE] void   int i String ctxtDesc [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  String  ctxtDesc  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P2_Replace_Operator]^String msg = "Illegal unquoted character  !=  ( "+_getCharDesc ( c ) +" ) : has to be escaped using backslash to be included in "+ctxtDesc;^524^^^^^518^527^String msg = "Illegal unquoted character  ( "+_getCharDesc ( c ) +" ) : has to be escaped using backslash to be included in "+ctxtDesc;^[CLASS] ParserMinimalBase  [METHOD] _throwUnquotedSpace [RETURN_TYPE] void   int i String ctxtDesc [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  String  ctxtDesc  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P2_Replace_Operator]^String msg = "Illegal unquoted character  >=  ( "+_getCharDesc ( c ) +" ) : has to be escaped using backslash to be included in "+ctxtDesc;^524^^^^^518^527^String msg = "Illegal unquoted character  ( "+_getCharDesc ( c ) +" ) : has to be escaped using backslash to be included in "+ctxtDesc;^[CLASS] ParserMinimalBase  [METHOD] _throwUnquotedSpace [RETURN_TYPE] void   int i String ctxtDesc [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  String  ctxtDesc  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P7_Replace_Invocation]^if  ( getEmbeddedObject ( Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER )  )  {^532^^^^^529^541^if  ( isEnabled ( Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER )  )  {^[CLASS] ParserMinimalBase  [METHOD] _handleUnrecognizedCharacterEscape [RETURN_TYPE] char   char ch [VARIABLES] char  ch  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P15_Unwrap_Block]^return ch;^532^533^534^^^529^541^if  ( isEnabled ( Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER )  )  { return ch; }^[CLASS] ParserMinimalBase  [METHOD] _handleUnrecognizedCharacterEscape [RETURN_TYPE] char   char ch [VARIABLES] char  ch  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P16_Remove_Block]^^532^533^534^^^529^541^if  ( isEnabled ( Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER )  )  { return ch; }^[CLASS] ParserMinimalBase  [METHOD] _handleUnrecognizedCharacterEscape [RETURN_TYPE] char   char ch [VARIABLES] char  ch  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P13_Insert_Block]^if  ( isEnabled ( Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER )  )  {     return ch; }^532^^^^^529^541^[Delete]^[CLASS] ParserMinimalBase  [METHOD] _handleUnrecognizedCharacterEscape [RETURN_TYPE] char   char ch [VARIABLES] char  ch  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P2_Replace_Operator]^if  ( ch == '\'' || isEnabled ( Feature.ALLOW_SINGLE_QUOTES )  )  {^536^^^^^529^541^if  ( ch == '\'' && isEnabled ( Feature.ALLOW_SINGLE_QUOTES )  )  {^[CLASS] ParserMinimalBase  [METHOD] _handleUnrecognizedCharacterEscape [RETURN_TYPE] char   char ch [VARIABLES] char  ch  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P2_Replace_Operator]^if  ( ch >= '\'' && isEnabled ( Feature.ALLOW_SINGLE_QUOTES )  )  {^536^^^^^529^541^if  ( ch == '\'' && isEnabled ( Feature.ALLOW_SINGLE_QUOTES )  )  {^[CLASS] ParserMinimalBase  [METHOD] _handleUnrecognizedCharacterEscape [RETURN_TYPE] char   char ch [VARIABLES] char  ch  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P6_Replace_Expression]^if  ( ch == '\'' ) {^536^^^^^529^541^if  ( ch == '\'' && isEnabled ( Feature.ALLOW_SINGLE_QUOTES )  )  {^[CLASS] ParserMinimalBase  [METHOD] _handleUnrecognizedCharacterEscape [RETURN_TYPE] char   char ch [VARIABLES] char  ch  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P6_Replace_Expression]^if  (  isEnabled ( Feature.ALLOW_SINGLE_QUOTES )  )  {^536^^^^^529^541^if  ( ch == '\'' && isEnabled ( Feature.ALLOW_SINGLE_QUOTES )  )  {^[CLASS] ParserMinimalBase  [METHOD] _handleUnrecognizedCharacterEscape [RETURN_TYPE] char   char ch [VARIABLES] char  ch  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P7_Replace_Invocation]^if  ( ch == '\'' && getEmbeddedObject ( Feature.ALLOW_SINGLE_QUOTES )  )  {^536^^^^^529^541^if  ( ch == '\'' && isEnabled ( Feature.ALLOW_SINGLE_QUOTES )  )  {^[CLASS] ParserMinimalBase  [METHOD] _handleUnrecognizedCharacterEscape [RETURN_TYPE] char   char ch [VARIABLES] char  ch  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P8_Replace_Mix]^if  (  getEmbeddedObject ( Feature.ALLOW_SINGLE_QUOTES )  )  {^536^^^^^529^541^if  ( ch == '\'' && isEnabled ( Feature.ALLOW_SINGLE_QUOTES )  )  {^[CLASS] ParserMinimalBase  [METHOD] _handleUnrecognizedCharacterEscape [RETURN_TYPE] char   char ch [VARIABLES] char  ch  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P15_Unwrap_Block]^return ch;^536^537^538^^^529^541^if  ( ch == '\'' && isEnabled ( Feature.ALLOW_SINGLE_QUOTES )  )  { return ch; }^[CLASS] ParserMinimalBase  [METHOD] _handleUnrecognizedCharacterEscape [RETURN_TYPE] char   char ch [VARIABLES] char  ch  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P16_Remove_Block]^^536^537^538^^^529^541^if  ( ch == '\'' && isEnabled ( Feature.ALLOW_SINGLE_QUOTES )  )  { return ch; }^[CLASS] ParserMinimalBase  [METHOD] _handleUnrecognizedCharacterEscape [RETURN_TYPE] char   char ch [VARIABLES] char  ch  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P2_Replace_Operator]^_reportError ( "Unrecognized character escape "+_getCharDesc ( ch )  &  ) ;^539^^^^^529^541^_reportError ( "Unrecognized character escape "+_getCharDesc ( ch )  ) ;^[CLASS] ParserMinimalBase  [METHOD] _handleUnrecognizedCharacterEscape [RETURN_TYPE] char   char ch [VARIABLES] char  ch  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P3_Replace_Literal]^_reportError ( "e"+_getCharDesc ( ch )  ) ;^539^^^^^529^541^_reportError ( "Unrecognized character escape "+_getCharDesc ( ch )  ) ;^[CLASS] ParserMinimalBase  [METHOD] _handleUnrecognizedCharacterEscape [RETURN_TYPE] char   char ch [VARIABLES] char  ch  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P7_Replace_Invocation]^_reportUnexpectedChar ( "Unrecognized character escape "+_getCharDesc ( ch )  ) ;^539^^^^^529^541^_reportError ( "Unrecognized character escape "+_getCharDesc ( ch )  ) ;^[CLASS] ParserMinimalBase  [METHOD] _handleUnrecognizedCharacterEscape [RETURN_TYPE] char   char ch [VARIABLES] char  ch  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P7_Replace_Invocation]^_reportError ( "Unrecognized character escape "+getValueAsInt ( ch )  ) ;^539^^^^^529^541^_reportError ( "Unrecognized character escape "+_getCharDesc ( ch )  ) ;^[CLASS] ParserMinimalBase  [METHOD] _handleUnrecognizedCharacterEscape [RETURN_TYPE] char   char ch [VARIABLES] char  ch  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P14_Delete_Statement]^^539^540^^^^529^541^_reportError ( "Unrecognized character escape "+_getCharDesc ( ch )  ) ; return ch;^[CLASS] ParserMinimalBase  [METHOD] _handleUnrecognizedCharacterEscape [RETURN_TYPE] char   char ch [VARIABLES] char  ch  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P11_Insert_Donor_Statement]^String msg = "Unexpected character  ( "+_getCharDesc ( ch ) +" ) ";_reportError ( "Unrecognized character escape "+_getCharDesc ( ch )  ) ;^539^^^^^529^541^_reportError ( "Unrecognized character escape "+_getCharDesc ( ch )  ) ;^[CLASS] ParserMinimalBase  [METHOD] _handleUnrecognizedCharacterEscape [RETURN_TYPE] char   char ch [VARIABLES] char  ch  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P14_Delete_Statement]^^539^^^^^529^541^_reportError ( "Unrecognized character escape "+_getCharDesc ( ch )  ) ;^[CLASS] ParserMinimalBase  [METHOD] _handleUnrecognizedCharacterEscape [RETURN_TYPE] char   char ch [VARIABLES] char  ch  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P1_Replace_Type]^int c =  ( int )  ch;^551^^^^^549^559^char c =  ( char )  ch;^[CLASS] ParserMinimalBase  [METHOD] _getCharDesc [RETURN_TYPE] String   int ch [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P11_Insert_Donor_Statement]^char c =  ( char )  i;char c =  ( char )  ch;^551^^^^^549^559^char c =  ( char )  ch;^[CLASS] ParserMinimalBase  [METHOD] _getCharDesc [RETURN_TYPE] String   int ch [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P6_Replace_Expression]^if  ( " ( CTRL-CHAR, code " + ch )  {^552^^^^^549^559^if  ( Character.isISOControl ( c )  )  {^[CLASS] ParserMinimalBase  [METHOD] _getCharDesc [RETURN_TYPE] String   int ch [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P7_Replace_Invocation]^if  ( Character.isDefined ( c )  )  {^552^^^^^549^559^if  ( Character.isISOControl ( c )  )  {^[CLASS] ParserMinimalBase  [METHOD] _getCharDesc [RETURN_TYPE] String   int ch [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P15_Unwrap_Block]^return ("(CTRL-CHAR, code " + ch) + ")";^552^553^554^^^549^559^if  ( Character.isISOControl ( c )  )  { return " ( CTRL-CHAR, code "+ch+" ) "; }^[CLASS] ParserMinimalBase  [METHOD] _getCharDesc [RETURN_TYPE] String   int ch [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P16_Remove_Block]^^552^553^554^^^549^559^if  ( Character.isISOControl ( c )  )  { return " ( CTRL-CHAR, code "+ch+" ) "; }^[CLASS] ParserMinimalBase  [METHOD] _getCharDesc [RETURN_TYPE] String   int ch [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P8_Replace_Mix]^return " ( CTRL-CHAR, code " ^ ch ^ " ) ";^553^^^^^549^559^return " ( CTRL-CHAR, code "+ch+" ) ";^[CLASS] ParserMinimalBase  [METHOD] _getCharDesc [RETURN_TYPE] String   int ch [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P8_Replace_Mix]^return " ( CTRL-CHAR, code " ;^553^^^^^549^559^return " ( CTRL-CHAR, code "+ch+" ) ";^[CLASS] ParserMinimalBase  [METHOD] _getCharDesc [RETURN_TYPE] String   int ch [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P2_Replace_Operator]^if  ( ch == 255 )  {^555^^^^^549^559^if  ( ch > 255 )  {^[CLASS] ParserMinimalBase  [METHOD] _getCharDesc [RETURN_TYPE] String   int ch [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P3_Replace_Literal]^if  ( ch > 253 )  {^555^^^^^549^559^if  ( ch > 255 )  {^[CLASS] ParserMinimalBase  [METHOD] _getCharDesc [RETURN_TYPE] String   int ch [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P5_Replace_Variable]^if  ( c > 255 )  {^555^^^^^549^559^if  ( ch > 255 )  {^[CLASS] ParserMinimalBase  [METHOD] _getCharDesc [RETURN_TYPE] String   int ch [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P5_Replace_Variable]^if  ( chh > 255 )  {^555^^^^^549^559^if  ( ch > 255 )  {^[CLASS] ParserMinimalBase  [METHOD] _getCharDesc [RETURN_TYPE] String   int ch [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P6_Replace_Expression]^if  ( (((("'" + c) + "' (code ") + ch) + " / 0x") + toHexString(ch) + ")" )  {^555^^^^^549^559^if  ( ch > 255 )  {^[CLASS] ParserMinimalBase  [METHOD] _getCharDesc [RETURN_TYPE] String   int ch [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P6_Replace_Expression]^if  (  (  (  ( "'" + c )  + "'  ( code " )  + ch )  + " / 0x" + toHexString ( ch ) )  {^555^^^^^549^559^if  ( ch > 255 )  {^[CLASS] ParserMinimalBase  [METHOD] _getCharDesc [RETURN_TYPE] String   int ch [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P6_Replace_Expression]^if  (  (  ( "'" + c )  + "'  ( code " )  + ch + " / 0x" )  {^555^^^^^549^559^if  ( ch > 255 )  {^[CLASS] ParserMinimalBase  [METHOD] _getCharDesc [RETURN_TYPE] String   int ch [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P6_Replace_Expression]^if  (  ( "'" + c )  + "'  ( code " + ch )  {^555^^^^^549^559^if  ( ch > 255 )  {^[CLASS] ParserMinimalBase  [METHOD] _getCharDesc [RETURN_TYPE] String   int ch [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P6_Replace_Expression]^if  ( "'" + c + "'  ( code " )  {^555^^^^^549^559^if  ( ch > 255 )  {^[CLASS] ParserMinimalBase  [METHOD] _getCharDesc [RETURN_TYPE] String   int ch [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P6_Replace_Expression]^if  ( "'" + c )  {^555^^^^^549^559^if  ( ch > 255 )  {^[CLASS] ParserMinimalBase  [METHOD] _getCharDesc [RETURN_TYPE] String   int ch [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P8_Replace_Mix]^if  ( ch > 71 )  {^555^^^^^549^559^if  ( ch > 255 )  {^[CLASS] ParserMinimalBase  [METHOD] _getCharDesc [RETURN_TYPE] String   int ch [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P15_Unwrap_Block]^return ((((("'" + c) + "' (code ") + ch) + " / 0x") + (java.lang.Integer.toHexString(ch))) + ")";^555^556^557^^^549^559^if  ( ch > 255 )  { return "'"+c+"'  ( code "+ch+" / 0x"+Integer.toHexString ( ch ) +" ) "; }^[CLASS] ParserMinimalBase  [METHOD] _getCharDesc [RETURN_TYPE] String   int ch [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P16_Remove_Block]^^555^556^557^^^549^559^if  ( ch > 255 )  { return "'"+c+"'  ( code "+ch+" / 0x"+Integer.toHexString ( ch ) +" ) "; }^[CLASS] ParserMinimalBase  [METHOD] _getCharDesc [RETURN_TYPE] String   int ch [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P1_Replace_Type]^return "'"+c+"'  ( code "+ch+" / 0x"+Integer.toHexchar ( ch ) +" ) ";^556^^^^^549^559^return "'"+c+"'  ( code "+ch+" / 0x"+Integer.toHexString ( ch ) +" ) ";^[CLASS] ParserMinimalBase  [METHOD] _getCharDesc [RETURN_TYPE] String   int ch [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P2_Replace_Operator]^return "'"+c+"'  ==  ( code "+ch+" / 0x"+Integer.toHexString ( ch ) +" ) ";^556^^^^^549^559^return "'"+c+"'  ( code "+ch+" / 0x"+Integer.toHexString ( ch ) +" ) ";^[CLASS] ParserMinimalBase  [METHOD] _getCharDesc [RETURN_TYPE] String   int ch [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P2_Replace_Operator]^return "'"+c+"'  &&  ( code "+ch+" / 0x"+Integer.toHexString ( ch ) +" ) ";^556^^^^^549^559^return "'"+c+"'  ( code "+ch+" / 0x"+Integer.toHexString ( ch ) +" ) ";^[CLASS] ParserMinimalBase  [METHOD] _getCharDesc [RETURN_TYPE] String   int ch [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P2_Replace_Operator]^return "'"+c+"'  >=  ( code "+ch+" / 0x"+Integer.toHexString ( ch ) +" ) ";^556^^^^^549^559^return "'"+c+"'  ( code "+ch+" / 0x"+Integer.toHexString ( ch ) +" ) ";^[CLASS] ParserMinimalBase  [METHOD] _getCharDesc [RETURN_TYPE] String   int ch [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P2_Replace_Operator]^return "'"+c+"'  <  ( code "+ch+" / 0x"+Integer.toHexString ( ch ) +" ) ";^556^^^^^549^559^return "'"+c+"'  ( code "+ch+" / 0x"+Integer.toHexString ( ch ) +" ) ";^[CLASS] ParserMinimalBase  [METHOD] _getCharDesc [RETURN_TYPE] String   int ch [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P2_Replace_Operator]^return "'"+c+"'  ||  ( code "+ch+" / 0x"+Integer.toHexString ( ch ) +" ) ";^556^^^^^549^559^return "'"+c+"'  ( code "+ch+" / 0x"+Integer.toHexString ( ch ) +" ) ";^[CLASS] ParserMinimalBase  [METHOD] _getCharDesc [RETURN_TYPE] String   int ch [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P3_Replace_Literal]^return ""+c+"'  ( code "+ch+" / 0x"+Integer.toHexString ( ch ) +" ) ";^556^^^^^549^559^return "'"+c+"'  ( code "+ch+" / 0x"+Integer.toHexString ( ch ) +" ) ";^[CLASS] ParserMinimalBase  [METHOD] _getCharDesc [RETURN_TYPE] String   int ch [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P3_Replace_Literal]^return "'"+c+"'  ( code "+ch+" / 0x "+Integer.toHexString ( ch ) +" ) ";^556^^^^^549^559^return "'"+c+"'  ( code "+ch+" / 0x"+Integer.toHexString ( ch ) +" ) ";^[CLASS] ParserMinimalBase  [METHOD] _getCharDesc [RETURN_TYPE] String   int ch [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P5_Replace_Variable]^return "'"+c+"'  ( code "+ch+" / 0x"+Integer.toHexString ( INT_TAB ) +" ) ";^556^^^^^549^559^return "'"+c+"'  ( code "+ch+" / 0x"+Integer.toHexString ( ch ) +" ) ";^[CLASS] ParserMinimalBase  [METHOD] _getCharDesc [RETURN_TYPE] String   int ch [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P5_Replace_Variable]^return "'"+c+"'  ( chode "+ch+" / 0x"+Integer.toHexString ( c ) +" ) ";^556^^^^^549^559^return "'"+c+"'  ( code "+ch+" / 0x"+Integer.toHexString ( ch ) +" ) ";^[CLASS] ParserMinimalBase  [METHOD] _getCharDesc [RETURN_TYPE] String   int ch [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P8_Replace_Mix]^return "'" ;^556^^^^^549^559^return "'"+c+"'  ( code "+ch+" / 0x"+Integer.toHexString ( ch ) +" ) ";^[CLASS] ParserMinimalBase  [METHOD] _getCharDesc [RETURN_TYPE] String   int ch [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P13_Insert_Block]^if  ( ch > 255 )  {     return  (  (  (  (  ( "'" + c )  + "'  ( code " )  + ch )  + " / 0x" )  +  ( toHexString ( ch )  )  )  + " ) "; }^556^^^^^549^559^[Delete]^[CLASS] ParserMinimalBase  [METHOD] _getCharDesc [RETURN_TYPE] String   int ch [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P5_Replace_Variable]^return "'"+c+"'  ( code "+ch+" / 0x"+Integer.toHexString ( INT_r ) +" ) ";^556^^^^^549^559^return "'"+c+"'  ( code "+ch+" / 0x"+Integer.toHexString ( ch ) +" ) ";^[CLASS] ParserMinimalBase  [METHOD] _getCharDesc [RETURN_TYPE] String   int ch [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P8_Replace_Mix]^return "'"+c+"'  ( code "+ch+" / 0x"+Integer.toHexString ( INT_SPACE ) +" ) ";^556^^^^^549^559^return "'"+c+"'  ( code "+ch+" / 0x"+Integer.toHexString ( ch ) +" ) ";^[CLASS] ParserMinimalBase  [METHOD] _getCharDesc [RETURN_TYPE] String   int ch [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P14_Delete_Statement]^^556^^^^^549^559^return "'"+c+"'  ( code "+ch+" / 0x"+Integer.toHexString ( ch ) +" ) ";^[CLASS] ParserMinimalBase  [METHOD] _getCharDesc [RETURN_TYPE] String   int ch [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P2_Replace_Operator]^return "'"+c+"'  &  ( code "+ch+" / 0x"+Integer.toHexString ( ch ) +" ) ";^556^^^^^549^559^return "'"+c+"'  ( code "+ch+" / 0x"+Integer.toHexString ( ch ) +" ) ";^[CLASS] ParserMinimalBase  [METHOD] _getCharDesc [RETURN_TYPE] String   int ch [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P2_Replace_Operator]^return "'"+c+"'  <<  ( code "+ch+" / 0x"+Integer.toHexString ( ch ) +" ) ";^556^^^^^549^559^return "'"+c+"'  ( code "+ch+" / 0x"+Integer.toHexString ( ch ) +" ) ";^[CLASS] ParserMinimalBase  [METHOD] _getCharDesc [RETURN_TYPE] String   int ch [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P5_Replace_Variable]^return "'"+c+"'  ( code "+ch+" / 0x"+Integer.toHexString ( INT_b ) +" ) ";^556^^^^^549^559^return "'"+c+"'  ( code "+ch+" / 0x"+Integer.toHexString ( ch ) +" ) ";^[CLASS] ParserMinimalBase  [METHOD] _getCharDesc [RETURN_TYPE] String   int ch [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P2_Replace_Operator]^return "'"+c+"'  ||  ( code "+ch+" ) ";^558^^^^^549^559^return "'"+c+"'  ( code "+ch+" ) ";^[CLASS] ParserMinimalBase  [METHOD] _getCharDesc [RETURN_TYPE] String   int ch [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P2_Replace_Operator]^return "'"+c+"'   instanceof   ( code "+ch+" ) ";^558^^^^^549^559^return "'"+c+"'  ( code "+ch+" ) ";^[CLASS] ParserMinimalBase  [METHOD] _getCharDesc [RETURN_TYPE] String   int ch [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P2_Replace_Operator]^return "'"+c+"'  >=  ( code "+ch+" ) ";^558^^^^^549^559^return "'"+c+"'  ( code "+ch+" ) ";^[CLASS] ParserMinimalBase  [METHOD] _getCharDesc [RETURN_TYPE] String   int ch [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P2_Replace_Operator]^return "'"+c+"'  >  ( code "+ch+" ) ";^558^^^^^549^559^return "'"+c+"'  ( code "+ch+" ) ";^[CLASS] ParserMinimalBase  [METHOD] _getCharDesc [RETURN_TYPE] String   int ch [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P8_Replace_Mix]^return "'" ;^558^^^^^549^559^return "'"+c+"'  ( code "+ch+" ) ";^[CLASS] ParserMinimalBase  [METHOD] _getCharDesc [RETURN_TYPE] String   int ch [VARIABLES] char  c  JsonToken  _currToken  _lastClearedToken  t  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P7_Replace_Invocation]^throw _reportError ( msg ) ;^564^^^^^561^565^throw _constructError ( msg ) ;^[CLASS] ParserMinimalBase  [METHOD] _reportError [RETURN_TYPE] void   String msg [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P11_Insert_Donor_Statement]^throw _constructError ( base ) ;throw _constructError ( msg ) ;^564^^^^^561^565^throw _constructError ( msg ) ;^[CLASS] ParserMinimalBase  [METHOD] _reportError [RETURN_TYPE] void   String msg [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P11_Insert_Donor_Statement]^throw _constructError ( msg, t ) ;throw _constructError ( msg ) ;^564^^^^^561^565^throw _constructError ( msg ) ;^[CLASS] ParserMinimalBase  [METHOD] _reportError [RETURN_TYPE] void   String msg [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P14_Delete_Statement]^^564^^^^^561^565^throw _constructError ( msg ) ;^[CLASS] ParserMinimalBase  [METHOD] _reportError [RETURN_TYPE] void   String msg [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P11_Insert_Donor_Statement]^_reportError ( msg ) ;throw _constructError ( msg ) ;^564^^^^^561^565^throw _constructError ( msg ) ;^[CLASS] ParserMinimalBase  [METHOD] _reportError [RETURN_TYPE] void   String msg [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  String  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P5_Replace_Variable]^throw _constructError (  t ) ;^570^^^^^567^571^throw _constructError ( msg, t ) ;^[CLASS] ParserMinimalBase  [METHOD] _wrapError [RETURN_TYPE] void   String msg Throwable t [VARIABLES] Throwable  t  JsonToken  _currToken  _lastClearedToken  t  String  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P5_Replace_Variable]^throw _constructError ( msg ) ;^570^^^^^567^571^throw _constructError ( msg, t ) ;^[CLASS] ParserMinimalBase  [METHOD] _wrapError [RETURN_TYPE] void   String msg Throwable t [VARIABLES] Throwable  t  JsonToken  _currToken  _lastClearedToken  t  String  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P5_Replace_Variable]^throw _constructError ( t, msg ) ;^570^^^^^567^571^throw _constructError ( msg, t ) ;^[CLASS] ParserMinimalBase  [METHOD] _wrapError [RETURN_TYPE] void   String msg Throwable t [VARIABLES] Throwable  t  JsonToken  _currToken  _lastClearedToken  t  String  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P7_Replace_Invocation]^throw _wrapError ( msg, t ) ;^570^^^^^567^571^throw _constructError ( msg, t ) ;^[CLASS] ParserMinimalBase  [METHOD] _wrapError [RETURN_TYPE] void   String msg Throwable t [VARIABLES] Throwable  t  JsonToken  _currToken  _lastClearedToken  t  String  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P8_Replace_Mix]^throw _constructError ( base ) ; ;^570^^^^^567^571^throw _constructError ( msg, t ) ;^[CLASS] ParserMinimalBase  [METHOD] _wrapError [RETURN_TYPE] void   String msg Throwable t [VARIABLES] Throwable  t  JsonToken  _currToken  _lastClearedToken  t  String  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P11_Insert_Donor_Statement]^throw _constructError ( base ) ;throw _constructError ( msg, t ) ;^570^^^^^567^571^throw _constructError ( msg, t ) ;^[CLASS] ParserMinimalBase  [METHOD] _wrapError [RETURN_TYPE] void   String msg Throwable t [VARIABLES] Throwable  t  JsonToken  _currToken  _lastClearedToken  t  String  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P11_Insert_Donor_Statement]^throw _constructError ( msg ) ;throw _constructError ( msg, t ) ;^570^^^^^567^571^throw _constructError ( msg, t ) ;^[CLASS] ParserMinimalBase  [METHOD] _wrapError [RETURN_TYPE] void   String msg Throwable t [VARIABLES] Throwable  t  JsonToken  _currToken  _lastClearedToken  t  String  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P14_Delete_Statement]^^570^^^^^567^571^throw _constructError ( msg, t ) ;^[CLASS] ParserMinimalBase  [METHOD] _wrapError [RETURN_TYPE] void   String msg Throwable t [VARIABLES] Throwable  t  JsonToken  _currToken  _lastClearedToken  t  String  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P11_Insert_Donor_Statement]^_reportError ( msg ) ;throw _constructError ( msg, t ) ;^570^^^^^567^571^throw _constructError ( msg, t ) ;^[CLASS] ParserMinimalBase  [METHOD] _wrapError [RETURN_TYPE] void   String msg Throwable t [VARIABLES] Throwable  t  JsonToken  _currToken  _lastClearedToken  t  String  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P14_Delete_Statement]^^574^^^^^573^575^VersionUtil.throwInternal (  ) ;^[CLASS] ParserMinimalBase  [METHOD] _throwInternal [RETURN_TYPE] void   [VARIABLES] JsonToken  _currToken  _lastClearedToken  t  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  boolean  
[P4_Replace_Constructor]^return new JsonParseException (  getCurrentLocation (  ) , t ) ;^579^^^^^577^580^return new JsonParseException ( msg, getCurrentLocation (  ) , t ) ;^[CLASS] ParserMinimalBase  [METHOD] _constructError [RETURN_TYPE] JsonParseException   String msg Throwable t [VARIABLES] Throwable  t  JsonToken  _currToken  _lastClearedToken  t  String  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P4_Replace_Constructor]^return new JsonParseException ( msg, getCurrentLocation (  )  ) ;^579^^^^^577^580^return new JsonParseException ( msg, getCurrentLocation (  ) , t ) ;^[CLASS] ParserMinimalBase  [METHOD] _constructError [RETURN_TYPE] JsonParseException   String msg Throwable t [VARIABLES] Throwable  t  JsonToken  _currToken  _lastClearedToken  t  String  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P5_Replace_Variable]^return new JsonParseException ( t, getCurrentLocation (  ) , msg ) ;^579^^^^^577^580^return new JsonParseException ( msg, getCurrentLocation (  ) , t ) ;^[CLASS] ParserMinimalBase  [METHOD] _constructError [RETURN_TYPE] JsonParseException   String msg Throwable t [VARIABLES] Throwable  t  JsonToken  _currToken  _lastClearedToken  t  String  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P7_Replace_Invocation]^return new JsonParseException ( msg, getIntValue (  ) , t ) ;^579^^^^^577^580^return new JsonParseException ( msg, getCurrentLocation (  ) , t ) ;^[CLASS] ParserMinimalBase  [METHOD] _constructError [RETURN_TYPE] JsonParseException   String msg Throwable t [VARIABLES] Throwable  t  JsonToken  _currToken  _lastClearedToken  t  String  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
[P14_Delete_Statement]^^579^^^^^577^580^return new JsonParseException ( msg, getCurrentLocation (  ) , t ) ;^[CLASS] ParserMinimalBase  [METHOD] _constructError [RETURN_TYPE] JsonParseException   String msg Throwable t [VARIABLES] Throwable  t  JsonToken  _currToken  _lastClearedToken  t  String  msg  boolean  int  INT_APOSTROPHE  INT_ASTERISK  INT_BACKSLASH  INT_COLON  INT_COMMA  INT_CR  INT_LBRACKET  INT_LCURLY  INT_LF  INT_QUOTE  INT_RBRACKET  INT_RCURLY  INT_SLASH  INT_SPACE  INT_TAB  INT_b  INT_f  INT_n  INT_r  INT_t  INT_u  bindex  ch  defaultValue  features  i  open  
