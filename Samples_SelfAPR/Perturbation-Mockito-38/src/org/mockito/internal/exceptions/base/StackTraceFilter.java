[P3_Replace_Literal]^boolean fromMockObject = e.getClassName (  ) .contains ( "Enhan$EnhancerByMockitoWithCGLIB$$" ) ;^15^^^^^14^20^boolean fromMockObject = e.getClassName (  ) .contains ( "$$EnhancerByMockitoWithCGLIB$$" ) ;^[CLASS] StackTraceFilter  [METHOD] isBad [RETURN_TYPE] boolean   StackTraceElement e [VARIABLES] boolean  fromMockObject  fromOrgMockito  isInternalRunner  isRunner  StackTraceElement  e  
[P11_Insert_Donor_Statement]^boolean isRunner = e.getClassName (  ) .startsWith ( "org.mockito.runners." ) ;boolean fromMockObject = e.getClassName (  ) .contains ( "$$EnhancerByMockitoWithCGLIB$$" ) ;^15^^^^^14^20^boolean fromMockObject = e.getClassName (  ) .contains ( "$$EnhancerByMockitoWithCGLIB$$" ) ;^[CLASS] StackTraceFilter  [METHOD] isBad [RETURN_TYPE] boolean   StackTraceElement e [VARIABLES] boolean  fromMockObject  fromOrgMockito  isInternalRunner  isRunner  StackTraceElement  e  
[P11_Insert_Donor_Statement]^boolean fromOrgMockito = e.getClassName (  ) .startsWith ( "org.mockito." ) ;boolean fromMockObject = e.getClassName (  ) .contains ( "$$EnhancerByMockitoWithCGLIB$$" ) ;^15^^^^^14^20^boolean fromMockObject = e.getClassName (  ) .contains ( "$$EnhancerByMockitoWithCGLIB$$" ) ;^[CLASS] StackTraceFilter  [METHOD] isBad [RETURN_TYPE] boolean   StackTraceElement e [VARIABLES] boolean  fromMockObject  fromOrgMockito  isInternalRunner  isRunner  StackTraceElement  e  
[P3_Replace_Literal]^boolean fromMockObject = e.getClassName (  ) .contains ( "LI$EnhancerByMockitoWithCGLIB$$" ) ;^15^^^^^14^20^boolean fromMockObject = e.getClassName (  ) .contains ( "$$EnhancerByMockitoWithCGLIB$$" ) ;^[CLASS] StackTraceFilter  [METHOD] isBad [RETURN_TYPE] boolean   StackTraceElement e [VARIABLES] boolean  fromMockObject  fromOrgMockito  isInternalRunner  isRunner  StackTraceElement  e  
[P14_Delete_Statement]^^15^16^^^^14^20^boolean fromMockObject = e.getClassName (  ) .contains ( "$$EnhancerByMockitoWithCGLIB$$" ) ; boolean fromOrgMockito = e.getClassName (  ) .startsWith ( "org.mockito." ) ;^[CLASS] StackTraceFilter  [METHOD] isBad [RETURN_TYPE] boolean   StackTraceElement e [VARIABLES] boolean  fromMockObject  fromOrgMockito  isInternalRunner  isRunner  StackTraceElement  e  
[P3_Replace_Literal]^boolean fromOrgMockito = e.getClassName (  ) .startsWith ( "org.mockito.org.moc" ) ;^16^^^^^14^20^boolean fromOrgMockito = e.getClassName (  ) .startsWith ( "org.mockito." ) ;^[CLASS] StackTraceFilter  [METHOD] isBad [RETURN_TYPE] boolean   StackTraceElement e [VARIABLES] boolean  fromMockObject  fromOrgMockito  isInternalRunner  isRunner  StackTraceElement  e  
[P11_Insert_Donor_Statement]^boolean isInternalRunner = e.getClassName (  ) .startsWith ( "org.mockito.internal.runners." ) ;boolean fromOrgMockito = e.getClassName (  ) .startsWith ( "org.mockito." ) ;^16^^^^^14^20^boolean fromOrgMockito = e.getClassName (  ) .startsWith ( "org.mockito." ) ;^[CLASS] StackTraceFilter  [METHOD] isBad [RETURN_TYPE] boolean   StackTraceElement e [VARIABLES] boolean  fromMockObject  fromOrgMockito  isInternalRunner  isRunner  StackTraceElement  e  
[P11_Insert_Donor_Statement]^boolean isRunner = e.getClassName (  ) .startsWith ( "org.mockito.runners." ) ;boolean fromOrgMockito = e.getClassName (  ) .startsWith ( "org.mockito." ) ;^16^^^^^14^20^boolean fromOrgMockito = e.getClassName (  ) .startsWith ( "org.mockito." ) ;^[CLASS] StackTraceFilter  [METHOD] isBad [RETURN_TYPE] boolean   StackTraceElement e [VARIABLES] boolean  fromMockObject  fromOrgMockito  isInternalRunner  isRunner  StackTraceElement  e  
[P11_Insert_Donor_Statement]^boolean fromMockObject = e.getClassName (  ) .contains ( "$$EnhancerByMockitoWithCGLIB$$" ) ;boolean fromOrgMockito = e.getClassName (  ) .startsWith ( "org.mockito." ) ;^16^^^^^14^20^boolean fromOrgMockito = e.getClassName (  ) .startsWith ( "org.mockito." ) ;^[CLASS] StackTraceFilter  [METHOD] isBad [RETURN_TYPE] boolean   StackTraceElement e [VARIABLES] boolean  fromMockObject  fromOrgMockito  isInternalRunner  isRunner  StackTraceElement  e  
[P3_Replace_Literal]^boolean fromOrgMockito = e.getClassName (  ) .startsWith ( "rg.mockitrg.mockito." ) ;^16^^^^^14^20^boolean fromOrgMockito = e.getClassName (  ) .startsWith ( "org.mockito." ) ;^[CLASS] StackTraceFilter  [METHOD] isBad [RETURN_TYPE] boolean   StackTraceElement e [VARIABLES] boolean  fromMockObject  fromOrgMockito  isInternalRunner  isRunner  StackTraceElement  e  
[P7_Replace_Invocation]^boolean fromOrgMockito = e.getClassName (  )  .contains ( 4 )  ;^16^^^^^14^20^boolean fromOrgMockito = e.getClassName (  ) .startsWith ( "org.mockito." ) ;^[CLASS] StackTraceFilter  [METHOD] isBad [RETURN_TYPE] boolean   StackTraceElement e [VARIABLES] boolean  fromMockObject  fromOrgMockito  isInternalRunner  isRunner  StackTraceElement  e  
[P14_Delete_Statement]^^16^^^^^14^20^boolean fromOrgMockito = e.getClassName (  ) .startsWith ( "org.mockito." ) ;^[CLASS] StackTraceFilter  [METHOD] isBad [RETURN_TYPE] boolean   StackTraceElement e [VARIABLES] boolean  fromMockObject  fromOrgMockito  isInternalRunner  isRunner  StackTraceElement  e  
[P14_Delete_Statement]^^16^17^^^^14^20^boolean fromOrgMockito = e.getClassName (  ) .startsWith ( "org.mockito." ) ; boolean isRunner = e.getClassName (  ) .startsWith ( "org.mockito.runners." ) ;^[CLASS] StackTraceFilter  [METHOD] isBad [RETURN_TYPE] boolean   StackTraceElement e [VARIABLES] boolean  fromMockObject  fromOrgMockito  isInternalRunner  isRunner  StackTraceElement  e  
[P3_Replace_Literal]^boolean isRunner = e.getClassName (  ) .startsWith ( "" ) ;^17^^^^^14^20^boolean isRunner = e.getClassName (  ) .startsWith ( "org.mockito.runners." ) ;^[CLASS] StackTraceFilter  [METHOD] isBad [RETURN_TYPE] boolean   StackTraceElement e [VARIABLES] boolean  fromMockObject  fromOrgMockito  isInternalRunner  isRunner  StackTraceElement  e  
[P11_Insert_Donor_Statement]^boolean isInternalRunner = e.getClassName (  ) .startsWith ( "org.mockito.internal.runners." ) ;boolean isRunner = e.getClassName (  ) .startsWith ( "org.mockito.runners." ) ;^17^^^^^14^20^boolean isRunner = e.getClassName (  ) .startsWith ( "org.mockito.runners." ) ;^[CLASS] StackTraceFilter  [METHOD] isBad [RETURN_TYPE] boolean   StackTraceElement e [VARIABLES] boolean  fromMockObject  fromOrgMockito  isInternalRunner  isRunner  StackTraceElement  e  
[P11_Insert_Donor_Statement]^boolean fromOrgMockito = e.getClassName (  ) .startsWith ( "org.mockito." ) ;boolean isRunner = e.getClassName (  ) .startsWith ( "org.mockito.runners." ) ;^17^^^^^14^20^boolean isRunner = e.getClassName (  ) .startsWith ( "org.mockito.runners." ) ;^[CLASS] StackTraceFilter  [METHOD] isBad [RETURN_TYPE] boolean   StackTraceElement e [VARIABLES] boolean  fromMockObject  fromOrgMockito  isInternalRunner  isRunner  StackTraceElement  e  
[P11_Insert_Donor_Statement]^boolean fromMockObject = e.getClassName (  ) .contains ( "$$EnhancerByMockitoWithCGLIB$$" ) ;boolean isRunner = e.getClassName (  ) .startsWith ( "org.mockito.runners." ) ;^17^^^^^14^20^boolean isRunner = e.getClassName (  ) .startsWith ( "org.mockito.runners." ) ;^[CLASS] StackTraceFilter  [METHOD] isBad [RETURN_TYPE] boolean   StackTraceElement e [VARIABLES] boolean  fromMockObject  fromOrgMockito  isInternalRunner  isRunner  StackTraceElement  e  
[P3_Replace_Literal]^boolean isRunner = e.getClassName (  ) .startsWith ( ".mrg.mockito.runners." ) ;^17^^^^^14^20^boolean isRunner = e.getClassName (  ) .startsWith ( "org.mockito.runners." ) ;^[CLASS] StackTraceFilter  [METHOD] isBad [RETURN_TYPE] boolean   StackTraceElement e [VARIABLES] boolean  fromMockObject  fromOrgMockito  isInternalRunner  isRunner  StackTraceElement  e  
[P14_Delete_Statement]^^17^18^^^^14^20^boolean isRunner = e.getClassName (  ) .startsWith ( "org.mockito.runners." ) ; boolean isInternalRunner = e.getClassName (  ) .startsWith ( "org.mockito.internal.runners." ) ;^[CLASS] StackTraceFilter  [METHOD] isBad [RETURN_TYPE] boolean   StackTraceElement e [VARIABLES] boolean  fromMockObject  fromOrgMockito  isInternalRunner  isRunner  StackTraceElement  e  
[P14_Delete_Statement]^^17^^^^^14^20^boolean isRunner = e.getClassName (  ) .startsWith ( "org.mockito.runners." ) ;^[CLASS] StackTraceFilter  [METHOD] isBad [RETURN_TYPE] boolean   StackTraceElement e [VARIABLES] boolean  fromMockObject  fromOrgMockito  isInternalRunner  isRunner  StackTraceElement  e  
[P3_Replace_Literal]^boolean isInternalRunner = e.getClassName (  ) .startsWith ( "nternal.runnersrg.mockito.internal.runners." ) ;^18^^^^^14^20^boolean isInternalRunner = e.getClassName (  ) .startsWith ( "org.mockito.internal.runners." ) ;^[CLASS] StackTraceFilter  [METHOD] isBad [RETURN_TYPE] boolean   StackTraceElement e [VARIABLES] boolean  fromMockObject  fromOrgMockito  isInternalRunner  isRunner  StackTraceElement  e  
[P11_Insert_Donor_Statement]^boolean isRunner = e.getClassName (  ) .startsWith ( "org.mockito.runners." ) ;boolean isInternalRunner = e.getClassName (  ) .startsWith ( "org.mockito.internal.runners." ) ;^18^^^^^14^20^boolean isInternalRunner = e.getClassName (  ) .startsWith ( "org.mockito.internal.runners." ) ;^[CLASS] StackTraceFilter  [METHOD] isBad [RETURN_TYPE] boolean   StackTraceElement e [VARIABLES] boolean  fromMockObject  fromOrgMockito  isInternalRunner  isRunner  StackTraceElement  e  
[P11_Insert_Donor_Statement]^boolean fromOrgMockito = e.getClassName (  ) .startsWith ( "org.mockito." ) ;boolean isInternalRunner = e.getClassName (  ) .startsWith ( "org.mockito.internal.runners." ) ;^18^^^^^14^20^boolean isInternalRunner = e.getClassName (  ) .startsWith ( "org.mockito.internal.runners." ) ;^[CLASS] StackTraceFilter  [METHOD] isBad [RETURN_TYPE] boolean   StackTraceElement e [VARIABLES] boolean  fromMockObject  fromOrgMockito  isInternalRunner  isRunner  StackTraceElement  e  
[P3_Replace_Literal]^boolean isInternalRunner = e.getClassName (  ) .startsWith ( ".interg.mockito.internal.runners." ) ;^18^^^^^14^20^boolean isInternalRunner = e.getClassName (  ) .startsWith ( "org.mockito.internal.runners." ) ;^[CLASS] StackTraceFilter  [METHOD] isBad [RETURN_TYPE] boolean   StackTraceElement e [VARIABLES] boolean  fromMockObject  fromOrgMockito  isInternalRunner  isRunner  StackTraceElement  e  
[P14_Delete_Statement]^^18^^^^^14^20^boolean isInternalRunner = e.getClassName (  ) .startsWith ( "org.mockito.internal.runners." ) ;^[CLASS] StackTraceFilter  [METHOD] isBad [RETURN_TYPE] boolean   StackTraceElement e [VARIABLES] boolean  fromMockObject  fromOrgMockito  isInternalRunner  isRunner  StackTraceElement  e  
[P2_Replace_Operator]^return  ( fromMockObject || fromOrgMockito )  || !isRunner && !isInternalRunner;^19^^^^^14^20^return  ( fromMockObject || fromOrgMockito )  && !isRunner && !isInternalRunner;^[CLASS] StackTraceFilter  [METHOD] isBad [RETURN_TYPE] boolean   StackTraceElement e [VARIABLES] boolean  fromMockObject  fromOrgMockito  isInternalRunner  isRunner  StackTraceElement  e  
[P2_Replace_Operator]^return  ( fromMockObject && fromOrgMockito )  && !isRunner && !isInternalRunner;^19^^^^^14^20^return  ( fromMockObject || fromOrgMockito )  && !isRunner && !isInternalRunner;^[CLASS] StackTraceFilter  [METHOD] isBad [RETURN_TYPE] boolean   StackTraceElement e [VARIABLES] boolean  fromMockObject  fromOrgMockito  isInternalRunner  isRunner  StackTraceElement  e  
[P5_Replace_Variable]^return  ( isRunner || fromOrgMockito )  && !isRunner && !isInternalRunner;^19^^^^^14^20^return  ( fromMockObject || fromOrgMockito )  && !isRunner && !isInternalRunner;^[CLASS] StackTraceFilter  [METHOD] isBad [RETURN_TYPE] boolean   StackTraceElement e [VARIABLES] boolean  fromMockObject  fromOrgMockito  isInternalRunner  isRunner  StackTraceElement  e  
[P5_Replace_Variable]^return  ( fromMockObject || fromOrgMockito )  && !isInternalRunner && !isInternalRunner;^19^^^^^14^20^return  ( fromMockObject || fromOrgMockito )  && !isRunner && !isInternalRunner;^[CLASS] StackTraceFilter  [METHOD] isBad [RETURN_TYPE] boolean   StackTraceElement e [VARIABLES] boolean  fromMockObject  fromOrgMockito  isInternalRunner  isRunner  StackTraceElement  e  
[P8_Replace_Mix]^return  ( fromMockObject || fromOrgMockito )  ;^19^^^^^14^20^return  ( fromMockObject || fromOrgMockito )  && !isRunner && !isInternalRunner;^[CLASS] StackTraceFilter  [METHOD] isBad [RETURN_TYPE] boolean   StackTraceElement e [VARIABLES] boolean  fromMockObject  fromOrgMockito  isInternalRunner  isRunner  StackTraceElement  e  
[P11_Insert_Donor_Statement]^List<StackTraceElement> bottom = unfilteredStackTrace.subList ( lastBad + 1, unfilteredStackTrace.size (  )  ) ;List<StackTraceElement> unfilteredStackTrace = Arrays.asList ( target ) ;^29^^^^^27^54^List<StackTraceElement> unfilteredStackTrace = Arrays.asList ( target ) ;^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P11_Insert_Donor_Statement]^List<StackTraceElement> filtered = new ArrayList<StackTraceElement> ( top ) ;List<StackTraceElement> unfilteredStackTrace = Arrays.asList ( target ) ;^29^^^^^27^54^List<StackTraceElement> unfilteredStackTrace = Arrays.asList ( target ) ;^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P14_Delete_Statement]^^29^^^^^27^54^List<StackTraceElement> unfilteredStackTrace = Arrays.asList ( target ) ;^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P1_Replace_Type]^long  lastBad = -1;^31^^^^^27^54^int lastBad = -1;^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P3_Replace_Literal]^int lastBad = -firstBad;^31^^^^^27^54^int lastBad = -1;^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P11_Insert_Donor_Statement]^int firstBad = -1;int lastBad = -1;^31^^^^^27^54^int lastBad = -1;^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P1_Replace_Type]^short  firstBad = -1;^32^^^^^27^54^int firstBad = -1;^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P11_Insert_Donor_Statement]^int lastBad = -1;int firstBad = -1;^32^^^^^27^54^int firstBad = -1;^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P12_Insert_Condition]^if  ( firstBad == -1 )  { int firstBad = -1; }^32^^^^^27^54^int firstBad = -1;^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P5_Replace_Variable]^if  ( !this.isBad ( unfilteredStackTrace.get ( lastBad )  )  )  {^34^^^^^27^54^if  ( !this.isBad ( unfilteredStackTrace.get ( i )  )  )  {^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P5_Replace_Variable]^if  ( !this.isBad ( i.get ( unfilteredStackTrace )  )  )  {^34^^^^^27^54^if  ( !this.isBad ( unfilteredStackTrace.get ( i )  )  )  {^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P7_Replace_Invocation]^if  ( !this.filter ( unfilteredStackTrace.get ( i )  )  )  {^34^^^^^27^54^if  ( !this.isBad ( unfilteredStackTrace.get ( i )  )  )  {^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P7_Replace_Invocation]^if  ( !this .filter ( target , keepTop )   )  {^34^^^^^27^54^if  ( !this.isBad ( unfilteredStackTrace.get ( i )  )  )  {^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P7_Replace_Invocation]^if  ( !this.isBad ( unfilteredStackTrace.subList ( i )  )  )  {^34^^^^^27^54^if  ( !this.isBad ( unfilteredStackTrace.get ( i )  )  )  {^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P7_Replace_Invocation]^if  ( !this.isBad ( unfilteredStackTrace .subList ( lastBad , i )   )  )  {^34^^^^^27^54^if  ( !this.isBad ( unfilteredStackTrace.get ( i )  )  )  {^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P15_Unwrap_Block]^continue;^34^35^36^^^27^54^if  ( !this.isBad ( unfilteredStackTrace.get ( i )  )  )  { continue; }^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P16_Remove_Block]^^34^35^36^^^27^54^if  ( !this.isBad ( unfilteredStackTrace.get ( i )  )  )  { continue; }^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P2_Replace_Operator]^if  ( firstBad != -1 )  {^38^^^^^27^54^if  ( firstBad == -1 )  {^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P3_Replace_Literal]^if  ( firstBad == -lastBad )  {^38^^^^^27^54^if  ( firstBad == -1 )  {^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P8_Replace_Mix]^if  ( firstBad == -3 )  {^38^^^^^27^54^if  ( firstBad == -1 )  {^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P9_Replace_Statement]^if  ( keepTop && firstBad != -1 )  {^38^^^^^27^54^if  ( firstBad == -1 )  {^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P15_Unwrap_Block]^firstBad = i;^38^39^40^^^27^54^if  ( firstBad == -1 )  { firstBad = i; }^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P16_Remove_Block]^^38^39^40^^^27^54^if  ( firstBad == -1 )  { firstBad = i; }^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P5_Replace_Variable]^firstBad = lastBad;^39^^^^^27^54^firstBad = i;^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P11_Insert_Donor_Statement]^lastBad = i;firstBad = i;^39^^^^^27^54^firstBad = i;^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P1_Replace_Type]^for  (  short  i = 0; i < unfilteredStackTrace.size (  ) ; i++ )  {^33^^^^^27^54^for  ( int i = 0; i < unfilteredStackTrace.size (  ) ; i++ )  {^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P2_Replace_Operator]^for  ( int i = 0; i == unfilteredStackTrace.size (  ) ; i++ )  {^33^^^^^27^54^for  ( int i = 0; i < unfilteredStackTrace.size (  ) ; i++ )  {^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P3_Replace_Literal]^for  ( int i = firstBad; i < unfilteredStackTrace.size (  ) ; i++ )  {^33^^^^^27^54^for  ( int i = 0; i < unfilteredStackTrace.size (  ) ; i++ )  {^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P3_Replace_Literal]^for  ( int i = 0; i < unfilteredStackTrace.size() - 7 ; i++ )  {^33^^^^^27^54^for  ( int i = 0; i < unfilteredStackTrace.size (  ) ; i++ )  {^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P5_Replace_Variable]^for  ( lastBadnt i = 0; i < unfilteredStackTrace.size (  ) ; i++ )  {^33^^^^^27^54^for  ( int i = 0; i < unfilteredStackTrace.size (  ) ; i++ )  {^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P5_Replace_Variable]^for  ( unfilteredStackTracent i = 0; i < i.size (  ) ; i++ )  {^33^^^^^27^54^for  ( int i = 0; i < unfilteredStackTrace.size (  ) ; i++ )  {^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P7_Replace_Invocation]^for  ( int i = 0; i < unfilteredStackTrace.get (  ) ; i++ )  {^33^^^^^27^54^for  ( int i = 0; i < unfilteredStackTrace.size (  ) ; i++ )  {^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P7_Replace_Invocation]^if  ( !this.isBad ( unfilteredStackTrace .subList ( firstBad , firstBad )   )  )  {^34^^^^^27^54^if  ( !this.isBad ( unfilteredStackTrace.get ( i )  )  )  {^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P3_Replace_Literal]^if  ( firstBad == --6 )  {^38^^^^^27^54^if  ( firstBad == -1 )  {^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P5_Replace_Variable]^if  ( lastBad == -1 )  {^38^^^^^27^54^if  ( firstBad == -1 )  {^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P8_Replace_Mix]^if  ( firstBad == -1L )  {^38^^^^^27^54^if  ( firstBad == -1 )  {^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P5_Replace_Variable]^lastBad = lastBad;^37^^^^^27^54^lastBad = i;^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P8_Replace_Mix]^lastBad =  firstBad;^37^^^^^27^54^lastBad = i;^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P11_Insert_Donor_Statement]^firstBad = i;lastBad = i;^37^^^^^27^54^lastBad = i;^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P13_Insert_Block]^if  ( ! ( this.isBad ( unfilteredStackTrace.get ( i )  )  )  )  {     continue; }^34^^^^^27^54^[Delete]^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P7_Replace_Invocation]^if  ( !this.isBad ( unfilteredStackTrace .subList ( firstBad , i )   )  )  {^34^^^^^27^54^if  ( !this.isBad ( unfilteredStackTrace.get ( i )  )  )  {^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P3_Replace_Literal]^for  ( int i = 0; i < unfilteredStackTrace.size() - 1 ; i++ )  {^33^^^^^27^54^for  ( int i = 0; i < unfilteredStackTrace.size (  ) ; i++ )  {^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P3_Replace_Literal]^for  ( int i = 0; i < unfilteredStackTrace.size() - 5 ; i++ )  {^33^^^^^27^54^for  ( int i = 0; i < unfilteredStackTrace.size (  ) ; i++ )  {^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P14_Delete_Statement]^^33^34^35^36^^27^54^for  ( int i = 0; i < unfilteredStackTrace.size (  ) ; i++ )  { if  ( !this.isBad ( unfilteredStackTrace.get ( i )  )  )  { continue; }^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P5_Replace_Variable]^if  ( !this.isBad ( null.get ( i )  )  )  {^34^^^^^27^54^if  ( !this.isBad ( unfilteredStackTrace.get ( i )  )  )  {^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P2_Replace_Operator]^if  ( keepTop || firstBad != -1 )  {^44^^^^^27^54^if  ( keepTop && firstBad != -1 )  {^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P2_Replace_Operator]^if  ( keepTop && firstBad == -1 )  {^44^^^^^27^54^if  ( keepTop && firstBad != -1 )  {^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P3_Replace_Literal]^if  ( keepTop && firstBad != -4 )  {^44^^^^^27^54^if  ( keepTop && firstBad != -1 )  {^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P5_Replace_Variable]^if  ( keepTop && lastBad != -1 )  {^44^^^^^27^54^if  ( keepTop && firstBad != -1 )  {^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P5_Replace_Variable]^if  ( firstBad && keepTop != -1 )  {^44^^^^^27^54^if  ( keepTop && firstBad != -1 )  {^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P6_Replace_Expression]^if  ( keepTop ) {^44^^^^^27^54^if  ( keepTop && firstBad != -1 )  {^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P6_Replace_Expression]^if  (  firstBad != -1 )  {^44^^^^^27^54^if  ( keepTop && firstBad != -1 )  {^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P9_Replace_Statement]^if  ( firstBad == -1 )  {^44^^^^^27^54^if  ( keepTop && firstBad != -1 )  {^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P15_Unwrap_Block]^top = unfilteredStackTrace.subList(0, firstBad);^44^45^46^47^48^27^54^if  ( keepTop && firstBad != -1 )  { top = unfilteredStackTrace.subList ( 0, firstBad ) ; } else { top = new LinkedList<StackTraceElement> (  ) ; }^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P16_Remove_Block]^^44^45^46^47^48^27^54^if  ( keepTop && firstBad != -1 )  { top = unfilteredStackTrace.subList ( 0, firstBad ) ; } else { top = new LinkedList<StackTraceElement> (  ) ; }^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P4_Replace_Constructor]^top = top =  new StackTraceElement> ( top )  ;^47^^^^^44^48^top = new LinkedList<StackTraceElement> (  ) ;^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P8_Replace_Mix]^top =  new StackTraceElement> ( top )  ;^47^^^^^44^48^top = new LinkedList<StackTraceElement> (  ) ;^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P1_Replace_Type]^top = new  List <StackTraceElement> (  ) ;^47^^^^^44^48^top = new LinkedList<StackTraceElement> (  ) ;^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P3_Replace_Literal]^top = unfilteredStackTrace.subList ( i, firstBad ) ;^45^^^^^27^54^top = unfilteredStackTrace.subList ( 0, firstBad ) ;^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P5_Replace_Variable]^top = unfilteredStackTrace.subList ( 0, lastBad ) ;^45^^^^^27^54^top = unfilteredStackTrace.subList ( 0, firstBad ) ;^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P5_Replace_Variable]^top = unfilteredStackTrace.subList ( 0 ) ;^45^^^^^27^54^top = unfilteredStackTrace.subList ( 0, firstBad ) ;^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P5_Replace_Variable]^top = firstBad.subList ( 0, unfilteredStackTrace ) ;^45^^^^^27^54^top = unfilteredStackTrace.subList ( 0, firstBad ) ;^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P7_Replace_Invocation]^top = unfilteredStackTrace .size (  )  ;^45^^^^^27^54^top = unfilteredStackTrace.subList ( 0, firstBad ) ;^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P8_Replace_Mix]^top = unfilteredStackTrace.subList ( 0L, firstBad ) ;^45^^^^^27^54^top = unfilteredStackTrace.subList ( 0, firstBad ) ;^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P3_Replace_Literal]^top = unfilteredStackTrace.subList ( 2, firstBad ) ;^45^^^^^27^54^top = unfilteredStackTrace.subList ( 0, firstBad ) ;^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P14_Delete_Statement]^^45^^^^^27^54^top = unfilteredStackTrace.subList ( 0, firstBad ) ;^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P3_Replace_Literal]^top = unfilteredStackTrace.subList ( -6, firstBad ) ;^45^^^^^27^54^top = unfilteredStackTrace.subList ( 0, firstBad ) ;^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P8_Replace_Mix]^top = unfilteredStackTrace.subList ( 1, firstBad ) ;^45^^^^^27^54^top = unfilteredStackTrace.subList ( 0, firstBad ) ;^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P4_Replace_Constructor]^top = top =  new StackTraceElement> ( top )  ;^47^^^^^27^54^top = new LinkedList<StackTraceElement> (  ) ;^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P8_Replace_Mix]^top =  new StackTraceElement> ( top )  ;^47^^^^^27^54^top = new LinkedList<StackTraceElement> (  ) ;^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P1_Replace_Type]^top = new  ArrayList <StackTraceElement> (  ) ;^47^^^^^27^54^top = new LinkedList<StackTraceElement> (  ) ;^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P5_Replace_Variable]^top = 0.subList ( 0, firstBad ) ;^45^^^^^27^54^top = unfilteredStackTrace.subList ( 0, firstBad ) ;^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P2_Replace_Operator]^List<StackTraceElement> bottom = unfilteredStackTrace.subList ( lastBad + 1, unfilteredStackTrace.size (  &&  )  ) ;^50^^^^^27^54^List<StackTraceElement> bottom = unfilteredStackTrace.subList ( lastBad + 1, unfilteredStackTrace.size (  )  ) ;^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P3_Replace_Literal]^List<StackTraceElement> bottom = unfilteredStackTrace.subList ( lastBad , unfilteredStackTrace.size (  )  ) ;^50^^^^^27^54^List<StackTraceElement> bottom = unfilteredStackTrace.subList ( lastBad + 1, unfilteredStackTrace.size (  )  ) ;^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P3_Replace_Literal]^List<StackTraceElement> bottom = unfilteredStackTrace.subList ( lastBad + 1, unfilteredStackTrace.size() + 3  ) ;^50^^^^^27^54^List<StackTraceElement> bottom = unfilteredStackTrace.subList ( lastBad + 1, unfilteredStackTrace.size (  )  ) ;^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P5_Replace_Variable]^List<StackTraceElement> bottom = unfilteredStackTrace.subList ( i + 1, unfilteredStackTrace.size (  )  ) ;^50^^^^^27^54^List<StackTraceElement> bottom = unfilteredStackTrace.subList ( lastBad + 1, unfilteredStackTrace.size (  )  ) ;^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P5_Replace_Variable]^List<StackTraceElement> bottom = unfilteredStackTrace.subList ( lastBad + 1.size (  )  ) ;^50^^^^^27^54^List<StackTraceElement> bottom = unfilteredStackTrace.subList ( lastBad + 1, unfilteredStackTrace.size (  )  ) ;^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P5_Replace_Variable]^List<StackTraceElement> bottom = lastBad.subList ( unfilteredStackTrace + 1, unfilteredStackTrace.size (  )  ) ;^50^^^^^27^54^List<StackTraceElement> bottom = unfilteredStackTrace.subList ( lastBad + 1, unfilteredStackTrace.size (  )  ) ;^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P7_Replace_Invocation]^List<StackTraceElement> bottom = unfilteredStackTrace.subList ( lastBad + 1, unfilteredStackTrace.get (  )  ) ;^50^^^^^27^54^List<StackTraceElement> bottom = unfilteredStackTrace.subList ( lastBad + 1, unfilteredStackTrace.size (  )  ) ;^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P8_Replace_Mix]^List<StackTraceElement> bottom = unfilteredStackTrace.subList ( i + 1, unfilteredStackTrace.get (  )  ) ;^50^^^^^27^54^List<StackTraceElement> bottom = unfilteredStackTrace.subList ( lastBad + 1, unfilteredStackTrace.size (  )  ) ;^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P11_Insert_Donor_Statement]^List<StackTraceElement> unfilteredStackTrace = Arrays.asList ( target ) ;List<StackTraceElement> bottom = unfilteredStackTrace.subList ( lastBad + 1, unfilteredStackTrace.size (  )  ) ;^50^^^^^27^54^List<StackTraceElement> bottom = unfilteredStackTrace.subList ( lastBad + 1, unfilteredStackTrace.size (  )  ) ;^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P2_Replace_Operator]^List<StackTraceElement> bottom = unfilteredStackTrace.subList ( lastBad + 1, unfilteredStackTrace.size (  <  )  ) ;^50^^^^^27^54^List<StackTraceElement> bottom = unfilteredStackTrace.subList ( lastBad + 1, unfilteredStackTrace.size (  )  ) ;^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P3_Replace_Literal]^List<StackTraceElement> bottom = unfilteredStackTrace.subList ( lastBad + lastBad, unfilteredStackTrace.size (  )  ) ;^50^^^^^27^54^List<StackTraceElement> bottom = unfilteredStackTrace.subList ( lastBad + 1, unfilteredStackTrace.size (  )  ) ;^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P3_Replace_Literal]^List<StackTraceElement> bottom = unfilteredStackTrace.subList ( lastBad + 1, unfilteredStackTrace.size() - 4  ) ;^50^^^^^27^54^List<StackTraceElement> bottom = unfilteredStackTrace.subList ( lastBad + 1, unfilteredStackTrace.size (  )  ) ;^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P14_Delete_Statement]^^50^51^^^^27^54^List<StackTraceElement> bottom = unfilteredStackTrace.subList ( lastBad + 1, unfilteredStackTrace.size (  )  ) ; List<StackTraceElement> filtered = new ArrayList<StackTraceElement> ( top ) ;^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P3_Replace_Literal]^List<StackTraceElement> bottom = unfilteredStackTrace.subList ( lastBad + 1, unfilteredStackTrace.size() - 1  ) ;^50^^^^^27^54^List<StackTraceElement> bottom = unfilteredStackTrace.subList ( lastBad + 1, unfilteredStackTrace.size (  )  ) ;^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P7_Replace_Invocation]^List<StackTraceElement> bottom = unfilteredStackTrace.subList ( lastBad + 1, unfilteredStackTrace .subList ( firstBad , lastBad )   ) ;^50^^^^^27^54^List<StackTraceElement> bottom = unfilteredStackTrace.subList ( lastBad + 1, unfilteredStackTrace.size (  )  ) ;^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P8_Replace_Mix]^List<StackTraceElement> bottom = unfilteredStackTrace.subList ( lastBad + 1, unfilteredStackTrace .subList ( lastBad , lastBad )   ) ;^50^^^^^27^54^List<StackTraceElement> bottom = unfilteredStackTrace.subList ( lastBad + 1, unfilteredStackTrace.size (  )  ) ;^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P1_Replace_Type]^List<StackTraceElement> filtered = new  List <StackTraceElement> ( top ) ;^51^^^^^27^54^List<StackTraceElement> filtered = new ArrayList<StackTraceElement> ( top ) ;^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P4_Replace_Constructor]^List<StackTraceElement> filtered = List<StackTraceElement> filtered =  new StackTraceElement> (  )  ;^51^^^^^27^54^List<StackTraceElement> filtered = new ArrayList<StackTraceElement> ( top ) ;^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P11_Insert_Donor_Statement]^List<StackTraceElement> unfilteredStackTrace = Arrays.asList ( target ) ;List<StackTraceElement> filtered = new ArrayList<StackTraceElement> ( top ) ;^51^^^^^27^54^List<StackTraceElement> filtered = new ArrayList<StackTraceElement> ( top ) ;^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P7_Replace_Invocation]^filtered.subList ( bottom ) ;^52^^^^^27^54^filtered.addAll ( bottom ) ;^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P14_Delete_Statement]^^52^^^^^27^54^filtered.addAll ( bottom ) ;^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P5_Replace_Variable]^return null.toArray ( new StackTraceElement[]{} ) ;^53^^^^^27^54^return filtered.toArray ( new StackTraceElement[]{} ) ;^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P7_Replace_Invocation]^return filtered.get ( new StackTraceElement[]{} ) ;^53^^^^^27^54^return filtered.toArray ( new StackTraceElement[]{} ) ;^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P8_Replace_Mix]^return filtered .addAll ( 2 )  ;^53^^^^^27^54^return filtered.toArray ( new StackTraceElement[]{} ) ;^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
[P14_Delete_Statement]^^53^^^^^27^54^return filtered.toArray ( new StackTraceElement[]{} ) ;^[CLASS] StackTraceFilter  [METHOD] filter [RETURN_TYPE] StackTraceElement[]   StackTraceElement[] target boolean keepTop [VARIABLES] boolean  keepTop  StackTraceElement[]  target  List  bottom  filtered  top  unfilteredStackTrace  int  firstBad  i  lastBad  
