[P6_Replace_Expression]^if  ( "Mock for " +  ( classNameForMock ( mock )  )  + ", hashCode: " )  {^56^^^^^55^68^if  ( Invocation.isToString ( invocation )  )  {^[CLASS] ReturnsEmptyValues  [METHOD] answer [RETURN_TYPE] Object   InvocationOnMock invocation [VARIABLES] MockName  name  boolean  InvocationOnMock  invocation  Object  mock  Class  returnType  
[P6_Replace_Expression]^if  ( "Mock for " + classNameForMock ( mock ) )  {^56^^^^^55^68^if  ( Invocation.isToString ( invocation )  )  {^[CLASS] ReturnsEmptyValues  [METHOD] answer [RETURN_TYPE] Object   InvocationOnMock invocation [VARIABLES] MockName  name  boolean  InvocationOnMock  invocation  Object  mock  Class  returnType  
[P6_Replace_Expression]^if  ( "Mock for " +  ( classNameForMock ( mock )  )  + ", hashCode: " )  {^59^^^^^55^68^if  ( name.isSurrogate (  )  )  {^[CLASS] ReturnsEmptyValues  [METHOD] answer [RETURN_TYPE] Object   InvocationOnMock invocation [VARIABLES] MockName  name  boolean  InvocationOnMock  invocation  Object  mock  Class  returnType  
[P6_Replace_Expression]^if  ( "Mock for " + classNameForMock ( mock ) )  {^59^^^^^55^68^if  ( name.isSurrogate (  )  )  {^[CLASS] ReturnsEmptyValues  [METHOD] answer [RETURN_TYPE] Object   InvocationOnMock invocation [VARIABLES] MockName  name  boolean  InvocationOnMock  invocation  Object  mock  Class  returnType  
[P9_Replace_Statement]^if  ( type.isPrimitive (  )  )  {^59^^^^^55^68^if  ( name.isSurrogate (  )  )  {^[CLASS] ReturnsEmptyValues  [METHOD] answer [RETURN_TYPE] Object   InvocationOnMock invocation [VARIABLES] MockName  name  boolean  InvocationOnMock  invocation  Object  mock  Class  returnType  
[P15_Unwrap_Block]^return (("Mock for " + (org.mockito.internal.creation.ClassNameFinder.classNameForMock(mock))) + ", hashCode: ") + (mock.hashCode());^59^60^61^62^63^55^68^if  ( name.isSurrogate (  )  )  { return "Mock for " + ClassNameFinder.classNameForMock ( mock )  + ", hashCode: " + mock.hashCode (  ) ; } else { return name.toString (  ) ; }^[CLASS] ReturnsEmptyValues  [METHOD] answer [RETURN_TYPE] Object   InvocationOnMock invocation [VARIABLES] MockName  name  boolean  InvocationOnMock  invocation  Object  mock  Class  returnType  
[P16_Remove_Block]^^59^60^61^62^63^55^68^if  ( name.isSurrogate (  )  )  { return "Mock for " + ClassNameFinder.classNameForMock ( mock )  + ", hashCode: " + mock.hashCode (  ) ; } else { return name.toString (  ) ; }^[CLASS] ReturnsEmptyValues  [METHOD] answer [RETURN_TYPE] Object   InvocationOnMock invocation [VARIABLES] MockName  name  boolean  InvocationOnMock  invocation  Object  mock  Class  returnType  
[P7_Replace_Invocation]^return name .isSurrogate (  )  ;^62^^^^^55^68^return name.toString (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] answer [RETURN_TYPE] Object   InvocationOnMock invocation [VARIABLES] MockName  name  boolean  InvocationOnMock  invocation  Object  mock  Class  returnType  
[P14_Delete_Statement]^^62^^^^^55^68^return name.toString (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] answer [RETURN_TYPE] Object   InvocationOnMock invocation [VARIABLES] MockName  name  boolean  InvocationOnMock  invocation  Object  mock  Class  returnType  
[P2_Replace_Operator]^return "Mock for " + ClassNameFinder.classNameForMock ( mock )  <  + ", hashCode: " + mock.hashCode (  ) ;^60^^^^^55^68^return "Mock for " + ClassNameFinder.classNameForMock ( mock )  + ", hashCode: " + mock.hashCode (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] answer [RETURN_TYPE] Object   InvocationOnMock invocation [VARIABLES] MockName  name  boolean  InvocationOnMock  invocation  Object  mock  Class  returnType  
[P2_Replace_Operator]^return "Mock for " + ClassNameFinder.classNameForMock ( mock )  &&  + ", hashCode: " + mock.hashCode (  ) ;^60^^^^^55^68^return "Mock for " + ClassNameFinder.classNameForMock ( mock )  + ", hashCode: " + mock.hashCode (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] answer [RETURN_TYPE] Object   InvocationOnMock invocation [VARIABLES] MockName  name  boolean  InvocationOnMock  invocation  Object  mock  Class  returnType  
[P2_Replace_Operator]^return "Mock for " + ClassNameFinder.classNameForMock ( mock )  ==  + ", hashCode: " + mock.hashCode (  ) ;^60^^^^^55^68^return "Mock for " + ClassNameFinder.classNameForMock ( mock )  + ", hashCode: " + mock.hashCode (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] answer [RETURN_TYPE] Object   InvocationOnMock invocation [VARIABLES] MockName  name  boolean  InvocationOnMock  invocation  Object  mock  Class  returnType  
[P3_Replace_Literal]^return "Mock for k fo" + ClassNameFinder.classNameForMock ( mock )  + ", hashCode: " + mock.hashCode (  ) ;^60^^^^^55^68^return "Mock for " + ClassNameFinder.classNameForMock ( mock )  + ", hashCode: " + mock.hashCode (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] answer [RETURN_TYPE] Object   InvocationOnMock invocation [VARIABLES] MockName  name  boolean  InvocationOnMock  invocation  Object  mock  Class  returnType  
[P3_Replace_Literal]^return "Mock for " + ClassNameFinder.classNameForMock ( mock )  + " ha hashCode: " + mock.hashCode (  ) ;^60^^^^^55^68^return "Mock for " + ClassNameFinder.classNameForMock ( mock )  + ", hashCode: " + mock.hashCode (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] answer [RETURN_TYPE] Object   InvocationOnMock invocation [VARIABLES] MockName  name  boolean  InvocationOnMock  invocation  Object  mock  Class  returnType  
[P8_Replace_Mix]^return "Mock for " + ClassNameFinder.classNameForMock ( mock )  + ", hashCode: " + mock .Object (  )  ;^60^^^^^55^68^return "Mock for " + ClassNameFinder.classNameForMock ( mock )  + ", hashCode: " + mock.hashCode (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] answer [RETURN_TYPE] Object   InvocationOnMock invocation [VARIABLES] MockName  name  boolean  InvocationOnMock  invocation  Object  mock  Class  returnType  
[P13_Insert_Block]^if  ( name.isSurrogate (  )  )  {     return  (  ( "Mock for " +  ( classNameForMock ( mock )  )  )  + ", hashCode: " )  +  ( mock.hashCode (  )  ) ; }else {     return name.toString (  ) ; }^60^^^^^55^68^[Delete]^[CLASS] ReturnsEmptyValues  [METHOD] answer [RETURN_TYPE] Object   InvocationOnMock invocation [VARIABLES] MockName  name  boolean  InvocationOnMock  invocation  Object  mock  Class  returnType  
[P14_Delete_Statement]^^60^61^62^63^^55^68^return "Mock for " + ClassNameFinder.classNameForMock ( mock )  + ", hashCode: " + mock.hashCode (  ) ; } else { return name.toString (  ) ; }^[CLASS] ReturnsEmptyValues  [METHOD] answer [RETURN_TYPE] Object   InvocationOnMock invocation [VARIABLES] MockName  name  boolean  InvocationOnMock  invocation  Object  mock  Class  returnType  
[P2_Replace_Operator]^return "Mock for " + ClassNameFinder.classNameForMock ( mock )  <<  + ", hashCode: " + mock.hashCode (  ) ;^60^^^^^55^68^return "Mock for " + ClassNameFinder.classNameForMock ( mock )  + ", hashCode: " + mock.hashCode (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] answer [RETURN_TYPE] Object   InvocationOnMock invocation [VARIABLES] MockName  name  boolean  InvocationOnMock  invocation  Object  mock  Class  returnType  
[P2_Replace_Operator]^return "Mock for " + ClassNameFinder.classNameForMock ( mock )  |  + ", hashCode: " + mock.hashCode (  ) ;^60^^^^^55^68^return "Mock for " + ClassNameFinder.classNameForMock ( mock )  + ", hashCode: " + mock.hashCode (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] answer [RETURN_TYPE] Object   InvocationOnMock invocation [VARIABLES] MockName  name  boolean  InvocationOnMock  invocation  Object  mock  Class  returnType  
[P3_Replace_Literal]^return "o" + ClassNameFinder.classNameForMock ( mock )  + ", hashCode: " + mock.hashCode (  ) ;^60^^^^^55^68^return "Mock for " + ClassNameFinder.classNameForMock ( mock )  + ", hashCode: " + mock.hashCode (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] answer [RETURN_TYPE] Object   InvocationOnMock invocation [VARIABLES] MockName  name  boolean  InvocationOnMock  invocation  Object  mock  Class  returnType  
[P3_Replace_Literal]^return "Mock for " + ClassNameFinder.classNameForMock ( mock )  + "" + mock.hashCode (  ) ;^60^^^^^55^68^return "Mock for " + ClassNameFinder.classNameForMock ( mock )  + ", hashCode: " + mock.hashCode (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] answer [RETURN_TYPE] Object   InvocationOnMock invocation [VARIABLES] MockName  name  boolean  InvocationOnMock  invocation  Object  mock  Class  returnType  
[P8_Replace_Mix]^return true ;^60^^^^^55^68^return "Mock for " + ClassNameFinder.classNameForMock ( mock )  + ", hashCode: " + mock.hashCode (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] answer [RETURN_TYPE] Object   InvocationOnMock invocation [VARIABLES] MockName  name  boolean  InvocationOnMock  invocation  Object  mock  Class  returnType  
[P7_Replace_Invocation]^Object mock = invocation .getMethod (  )  ;^57^^^^^55^68^Object mock = invocation.getMock (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] answer [RETURN_TYPE] Object   InvocationOnMock invocation [VARIABLES] MockName  name  boolean  InvocationOnMock  invocation  Object  mock  Class  returnType  
[P7_Replace_Invocation]^MockName name = new MockUtil (  )  .MockUtil (  )  ;^58^^^^^55^68^MockName name = new MockUtil (  ) .getMockName ( mock ) ;^[CLASS] ReturnsEmptyValues  [METHOD] answer [RETURN_TYPE] Object   InvocationOnMock invocation [VARIABLES] MockName  name  boolean  InvocationOnMock  invocation  Object  mock  Class  returnType  
[P14_Delete_Statement]^^57^^^^^55^68^Object mock = invocation.getMock (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] answer [RETURN_TYPE] Object   InvocationOnMock invocation [VARIABLES] MockName  name  boolean  InvocationOnMock  invocation  Object  mock  Class  returnType  
[P14_Delete_Statement]^^58^^^^^55^68^MockName name = new MockUtil (  ) .getMockName ( mock ) ;^[CLASS] ReturnsEmptyValues  [METHOD] answer [RETURN_TYPE] Object   InvocationOnMock invocation [VARIABLES] MockName  name  boolean  InvocationOnMock  invocation  Object  mock  Class  returnType  
[P2_Replace_Operator]^return "Mock for " + ClassNameFinder.classNameForMock ( mock )   instanceof   + ", hashCode: " + mock.hashCode (  ) ;^60^^^^^55^68^return "Mock for " + ClassNameFinder.classNameForMock ( mock )  + ", hashCode: " + mock.hashCode (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] answer [RETURN_TYPE] Object   InvocationOnMock invocation [VARIABLES] MockName  name  boolean  InvocationOnMock  invocation  Object  mock  Class  returnType  
[P2_Replace_Operator]^return "Mock for " + ClassNameFinder.classNameForMock ( mock )  >=  + ", hashCode: " + mock.hashCode (  ) ;^60^^^^^55^68^return "Mock for " + ClassNameFinder.classNameForMock ( mock )  + ", hashCode: " + mock.hashCode (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] answer [RETURN_TYPE] Object   InvocationOnMock invocation [VARIABLES] MockName  name  boolean  InvocationOnMock  invocation  Object  mock  Class  returnType  
[P3_Replace_Literal]^return "ock for " + ClassNameFinder.classNameForMock ( mock )  + ", hashCode: " + mock.hashCode (  ) ;^60^^^^^55^68^return "Mock for " + ClassNameFinder.classNameForMock ( mock )  + ", hashCode: " + mock.hashCode (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] answer [RETURN_TYPE] Object   InvocationOnMock invocation [VARIABLES] MockName  name  boolean  InvocationOnMock  invocation  Object  mock  Class  returnType  
[P3_Replace_Literal]^return "Mock for " + ClassNameFinder.classNameForMock ( mock )  + ", hashCode: ashC" + mock.hashCode (  ) ;^60^^^^^55^68^return "Mock for " + ClassNameFinder.classNameForMock ( mock )  + ", hashCode: " + mock.hashCode (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] answer [RETURN_TYPE] Object   InvocationOnMock invocation [VARIABLES] MockName  name  boolean  InvocationOnMock  invocation  Object  mock  Class  returnType  
[P8_Replace_Mix]^return "Mock for "  ;^60^^^^^55^68^return "Mock for " + ClassNameFinder.classNameForMock ( mock )  + ", hashCode: " + mock.hashCode (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] answer [RETURN_TYPE] Object   InvocationOnMock invocation [VARIABLES] MockName  name  boolean  InvocationOnMock  invocation  Object  mock  Class  returnType  
[P2_Replace_Operator]^return "Mock for " + ClassNameFinder.classNameForMock ( mock )  >>  + ", hashCode: " + mock.hashCode (  ) ;^60^^^^^55^68^return "Mock for " + ClassNameFinder.classNameForMock ( mock )  + ", hashCode: " + mock.hashCode (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] answer [RETURN_TYPE] Object   InvocationOnMock invocation [VARIABLES] MockName  name  boolean  InvocationOnMock  invocation  Object  mock  Class  returnType  
[P2_Replace_Operator]^return "Mock for " + ClassNameFinder.classNameForMock ( mock )  !=  + ", hashCode: " + mock.hashCode (  ) ;^60^^^^^55^68^return "Mock for " + ClassNameFinder.classNameForMock ( mock )  + ", hashCode: " + mock.hashCode (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] answer [RETURN_TYPE] Object   InvocationOnMock invocation [VARIABLES] MockName  name  boolean  InvocationOnMock  invocation  Object  mock  Class  returnType  
[P3_Replace_Literal]^return "Mock for M" + ClassNameFinder.classNameForMock ( mock )  + ", hashCode: " + mock.hashCode (  ) ;^60^^^^^55^68^return "Mock for " + ClassNameFinder.classNameForMock ( mock )  + ", hashCode: " + mock.hashCode (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] answer [RETURN_TYPE] Object   InvocationOnMock invocation [VARIABLES] MockName  name  boolean  InvocationOnMock  invocation  Object  mock  Class  returnType  
[P8_Replace_Mix]^return "Mock for "  ^  ClassNameFinder.classNameForMock ( mock )   ^  ", hashCode: "  ^  mock .Object (  )  ;^60^^^^^55^68^return "Mock for " + ClassNameFinder.classNameForMock ( mock )  + ", hashCode: " + mock.hashCode (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] answer [RETURN_TYPE] Object   InvocationOnMock invocation [VARIABLES] MockName  name  boolean  InvocationOnMock  invocation  Object  mock  Class  returnType  
[P14_Delete_Statement]^^57^58^^^^55^68^Object mock = invocation.getMock (  ) ; MockName name = new MockUtil (  ) .getMockName ( mock ) ;^[CLASS] ReturnsEmptyValues  [METHOD] answer [RETURN_TYPE] Object   InvocationOnMock invocation [VARIABLES] MockName  name  boolean  InvocationOnMock  invocation  Object  mock  Class  returnType  
[P7_Replace_Invocation]^Class<?> returnType = invocation .getMock (  )  .getReturnType (  ) ;^66^^^^^55^68^Class<?> returnType = invocation.getMethod (  ) .getReturnType (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] answer [RETURN_TYPE] Object   InvocationOnMock invocation [VARIABLES] MockName  name  boolean  InvocationOnMock  invocation  Object  mock  Class  returnType  
[P14_Delete_Statement]^^66^^^^^55^68^Class<?> returnType = invocation.getMethod (  ) .getReturnType (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] answer [RETURN_TYPE] Object   InvocationOnMock invocation [VARIABLES] MockName  name  boolean  InvocationOnMock  invocation  Object  mock  Class  returnType  
[P14_Delete_Statement]^^66^67^^^^55^68^Class<?> returnType = invocation.getMethod (  ) .getReturnType (  ) ; return returnValueFor ( returnType ) ;^[CLASS] ReturnsEmptyValues  [METHOD] answer [RETURN_TYPE] Object   InvocationOnMock invocation [VARIABLES] MockName  name  boolean  InvocationOnMock  invocation  Object  mock  Class  returnType  
[P7_Replace_Invocation]^return primitiveOf ( returnType ) ;^67^^^^^55^68^return returnValueFor ( returnType ) ;^[CLASS] ReturnsEmptyValues  [METHOD] answer [RETURN_TYPE] Object   InvocationOnMock invocation [VARIABLES] MockName  name  boolean  InvocationOnMock  invocation  Object  mock  Class  returnType  
[P14_Delete_Statement]^^67^^^^^55^68^return returnValueFor ( returnType ) ;^[CLASS] ReturnsEmptyValues  [METHOD] answer [RETURN_TYPE] Object   InvocationOnMock invocation [VARIABLES] MockName  name  boolean  InvocationOnMock  invocation  Object  mock  Class  returnType  
[P6_Replace_Expression]^if  ( type == class )  {^71^^^^^56^86^if  ( type.isPrimitive (  )  )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P8_Replace_Mix]^if  ( 3.isPrimitive (  )  )  {^71^^^^^56^86^if  ( type.isPrimitive (  )  )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^if  ( name.isSurrogate (  )  )  {^71^^^^^56^86^if  ( type.isPrimitive (  )  )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P5_Replace_Variable]^} else if  ( Primitives.isPrimitiveWrapper ( null )  )  {^73^^^^^58^88^} else if  ( Primitives.isPrimitiveWrapper ( type )  )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P6_Replace_Expression]^} else if  ( type == class )  {^73^^^^^58^88^} else if  ( Primitives.isPrimitiveWrapper ( type )  )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P6_Replace_Expression]^} else {^73^^^^^58^88^} else if  ( Primitives.isPrimitiveWrapper ( type )  )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P7_Replace_Invocation]^} else if  ( Primitives.primitiveWrapperOf ( type )  )  {^73^^^^^58^88^} else if  ( Primitives.isPrimitiveWrapper ( type )  )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P2_Replace_Operator]^} else if  ( type != Collection.class )  {^77^^^^^62^92^} else if  ( type == Collection.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P2_Replace_Operator]^} else if  ( type > Collection.class )  {^77^^^^^62^92^} else if  ( type == Collection.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P2_Replace_Operator]^} else if  ( type <= Collection.class )  {^77^^^^^62^92^} else if  ( type == Collection.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P2_Replace_Operator]^} else if  ( type >= Collection.class )  {^77^^^^^62^92^} else if  ( type == Collection.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P5_Replace_Variable]^} else if  ( type == Collection.type )  {^77^^^^^62^92^} else if  ( type == Collection.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P6_Replace_Expression]^} else if  ( type == class )  {^77^^^^^62^92^} else if  ( type == Collection.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P6_Replace_Expression]^} else {^77^^^^^62^92^} else if  ( type == Collection.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == Set.class )  {^77^^^^^62^92^} else if  ( type == Collection.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == LinkedHashMap.class )  {^77^^^^^62^92^} else if  ( type == Collection.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == TreeSet.class )  {^77^^^^^62^92^} else if  ( type == Collection.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == List.class )  {^77^^^^^62^92^} else if  ( type == Collection.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == LinkedHashSet.class )  {^77^^^^^62^92^} else if  ( type == Collection.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == Map.class )  {^77^^^^^62^92^} else if  ( type == Collection.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == Character.TYPE )  {^77^^^^^62^92^} else if  ( type == Collection.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == LinkedList.class )  {^77^^^^^62^92^} else if  ( type == Collection.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == HashMap.class )  {^77^^^^^62^92^} else if  ( type == Collection.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == SortedMap.class )  {^77^^^^^62^92^} else if  ( type == Collection.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == TreeMap.class )  {^77^^^^^62^92^} else if  ( type == Collection.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == HashSet.class )  {^77^^^^^62^92^} else if  ( type == Collection.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == SortedSet.class )  {^77^^^^^62^92^} else if  ( type == Collection.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == ArrayList.class )  {^77^^^^^62^92^} else if  ( type == Collection.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P2_Replace_Operator]^} else if  ( type <= Set.class )  {^79^^^^^64^94^} else if  ( type == Set.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P2_Replace_Operator]^} else if  ( type >= Set.class )  {^79^^^^^64^94^} else if  ( type == Set.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P2_Replace_Operator]^} else if  ( type != Set.class )  {^79^^^^^64^94^} else if  ( type == Set.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P2_Replace_Operator]^} else if  ( type < Set.class )  {^79^^^^^64^94^} else if  ( type == Set.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P5_Replace_Variable]^} else if  ( null == Set.class )  {^79^^^^^64^94^} else if  ( type == Set.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P5_Replace_Variable]^} else if  ( type == Set.type )  {^79^^^^^64^94^} else if  ( type == Set.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P6_Replace_Expression]^} else if  ( type == class )  {^79^^^^^64^94^} else if  ( type == Set.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P6_Replace_Expression]^} else {^79^^^^^64^94^} else if  ( type == Set.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P8_Replace_Mix]^}  if  ( type == Set.type )  {^79^^^^^64^94^} else if  ( type == Set.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == Collection.class )  {^79^^^^^64^94^} else if  ( type == Set.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == LinkedHashMap.class )  {^79^^^^^64^94^} else if  ( type == Set.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == TreeSet.class )  {^79^^^^^64^94^} else if  ( type == Set.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == List.class )  {^79^^^^^64^94^} else if  ( type == Set.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == LinkedHashSet.class )  {^79^^^^^64^94^} else if  ( type == Set.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == Map.class )  {^79^^^^^64^94^} else if  ( type == Set.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == Character.TYPE )  {^79^^^^^64^94^} else if  ( type == Set.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == LinkedList.class )  {^79^^^^^64^94^} else if  ( type == Set.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == HashMap.class )  {^79^^^^^64^94^} else if  ( type == Set.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == SortedMap.class )  {^79^^^^^64^94^} else if  ( type == Set.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == TreeMap.class )  {^79^^^^^64^94^} else if  ( type == Set.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == HashSet.class )  {^79^^^^^64^94^} else if  ( type == Set.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == SortedSet.class )  {^79^^^^^64^94^} else if  ( type == Set.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == ArrayList.class )  {^79^^^^^64^94^} else if  ( type == Set.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P2_Replace_Operator]^} else if  ( type != HashSet.class )  {^81^^^^^66^96^} else if  ( type == HashSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P2_Replace_Operator]^} else if  ( type >= HashSet.class )  {^81^^^^^66^96^} else if  ( type == HashSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P2_Replace_Operator]^} else if  ( type <= HashSet.class )  {^81^^^^^66^96^} else if  ( type == HashSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P5_Replace_Variable]^} else if  ( type == HashSet.type )  {^81^^^^^66^96^} else if  ( type == HashSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P6_Replace_Expression]^} else if  ( type == class )  {^81^^^^^66^96^} else if  ( type == HashSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P6_Replace_Expression]^} else {^81^^^^^66^96^} else if  ( type == HashSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == Set.class )  {^81^^^^^66^96^} else if  ( type == HashSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == Collection.class )  {^81^^^^^66^96^} else if  ( type == HashSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == LinkedHashMap.class )  {^81^^^^^66^96^} else if  ( type == HashSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == TreeSet.class )  {^81^^^^^66^96^} else if  ( type == HashSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == List.class )  {^81^^^^^66^96^} else if  ( type == HashSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == LinkedHashSet.class )  {^81^^^^^66^96^} else if  ( type == HashSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == Map.class )  {^81^^^^^66^96^} else if  ( type == HashSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == Character.TYPE )  {^81^^^^^66^96^} else if  ( type == HashSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == LinkedList.class )  {^81^^^^^66^96^} else if  ( type == HashSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == HashMap.class )  {^81^^^^^66^96^} else if  ( type == HashSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == SortedMap.class )  {^81^^^^^66^96^} else if  ( type == HashSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == TreeMap.class )  {^81^^^^^66^96^} else if  ( type == HashSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == SortedSet.class )  {^81^^^^^66^96^} else if  ( type == HashSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == ArrayList.class )  {^81^^^^^66^96^} else if  ( type == HashSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P2_Replace_Operator]^} else if  ( type >= SortedSet.class )  {^83^^^^^68^98^} else if  ( type == SortedSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P2_Replace_Operator]^} else if  ( type != SortedSet.class )  {^83^^^^^68^98^} else if  ( type == SortedSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P2_Replace_Operator]^} else if  ( type < SortedSet.class )  {^83^^^^^68^98^} else if  ( type == SortedSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P5_Replace_Variable]^} else if  ( type == SortedSet.type )  {^83^^^^^68^98^} else if  ( type == SortedSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P6_Replace_Expression]^} else if  ( type == class )  {^83^^^^^68^98^} else if  ( type == SortedSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P6_Replace_Expression]^} else {^83^^^^^68^98^} else if  ( type == SortedSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P8_Replace_Mix]^}  if  ( type == SortedSet.type )  {^83^^^^^68^98^} else if  ( type == SortedSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == Set.class )  {^83^^^^^68^98^} else if  ( type == SortedSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == Collection.class )  {^83^^^^^68^98^} else if  ( type == SortedSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == LinkedHashMap.class )  {^83^^^^^68^98^} else if  ( type == SortedSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == TreeSet.class )  {^83^^^^^68^98^} else if  ( type == SortedSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == List.class )  {^83^^^^^68^98^} else if  ( type == SortedSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == LinkedHashSet.class )  {^83^^^^^68^98^} else if  ( type == SortedSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == Map.class )  {^83^^^^^68^98^} else if  ( type == SortedSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == Character.TYPE )  {^83^^^^^68^98^} else if  ( type == SortedSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == LinkedList.class )  {^83^^^^^68^98^} else if  ( type == SortedSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == HashMap.class )  {^83^^^^^68^98^} else if  ( type == SortedSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == SortedMap.class )  {^83^^^^^68^98^} else if  ( type == SortedSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == TreeMap.class )  {^83^^^^^68^98^} else if  ( type == SortedSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == HashSet.class )  {^83^^^^^68^98^} else if  ( type == SortedSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == ArrayList.class )  {^83^^^^^68^98^} else if  ( type == SortedSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P2_Replace_Operator]^} else if  ( type != TreeSet.class )  {^85^^^^^70^100^} else if  ( type == TreeSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P2_Replace_Operator]^} else if  ( type >= TreeSet.class )  {^85^^^^^70^100^} else if  ( type == TreeSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P2_Replace_Operator]^} else if  ( type < TreeSet.class )  {^85^^^^^70^100^} else if  ( type == TreeSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P5_Replace_Variable]^} else if  ( type == TreeSet.type )  {^85^^^^^70^100^} else if  ( type == TreeSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P6_Replace_Expression]^} else if  ( type == class )  {^85^^^^^70^100^} else if  ( type == TreeSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P6_Replace_Expression]^} else {^85^^^^^70^100^} else if  ( type == TreeSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == Set.class )  {^85^^^^^70^100^} else if  ( type == TreeSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == Collection.class )  {^85^^^^^70^100^} else if  ( type == TreeSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == LinkedHashMap.class )  {^85^^^^^70^100^} else if  ( type == TreeSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == List.class )  {^85^^^^^70^100^} else if  ( type == TreeSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == LinkedHashSet.class )  {^85^^^^^70^100^} else if  ( type == TreeSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == Map.class )  {^85^^^^^70^100^} else if  ( type == TreeSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == Character.TYPE )  {^85^^^^^70^100^} else if  ( type == TreeSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == LinkedList.class )  {^85^^^^^70^100^} else if  ( type == TreeSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == HashMap.class )  {^85^^^^^70^100^} else if  ( type == TreeSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == SortedMap.class )  {^85^^^^^70^100^} else if  ( type == TreeSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == TreeMap.class )  {^85^^^^^70^100^} else if  ( type == TreeSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == HashSet.class )  {^85^^^^^70^100^} else if  ( type == TreeSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == SortedSet.class )  {^85^^^^^70^100^} else if  ( type == TreeSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == ArrayList.class )  {^85^^^^^70^100^} else if  ( type == TreeSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P2_Replace_Operator]^} else if  ( type != LinkedHashSet.class )  {^87^^^^^72^102^} else if  ( type == LinkedHashSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P2_Replace_Operator]^} else if  ( type > LinkedHashSet.class )  {^87^^^^^72^102^} else if  ( type == LinkedHashSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P2_Replace_Operator]^} else if  ( type < LinkedHashSet.class )  {^87^^^^^72^102^} else if  ( type == LinkedHashSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P5_Replace_Variable]^} else if  ( type == LinkedHashSet.type )  {^87^^^^^72^102^} else if  ( type == LinkedHashSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P6_Replace_Expression]^} else if  ( type == class )  {^87^^^^^72^102^} else if  ( type == LinkedHashSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P6_Replace_Expression]^} else {^87^^^^^72^102^} else if  ( type == LinkedHashSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == Set.class )  {^87^^^^^72^102^} else if  ( type == LinkedHashSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == Collection.class )  {^87^^^^^72^102^} else if  ( type == LinkedHashSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == LinkedHashMap.class )  {^87^^^^^72^102^} else if  ( type == LinkedHashSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == TreeSet.class )  {^87^^^^^72^102^} else if  ( type == LinkedHashSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == List.class )  {^87^^^^^72^102^} else if  ( type == LinkedHashSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == Map.class )  {^87^^^^^72^102^} else if  ( type == LinkedHashSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == LinkedList.class )  {^87^^^^^72^102^} else if  ( type == LinkedHashSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == HashMap.class )  {^87^^^^^72^102^} else if  ( type == LinkedHashSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == SortedMap.class )  {^87^^^^^72^102^} else if  ( type == LinkedHashSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == TreeMap.class )  {^87^^^^^72^102^} else if  ( type == LinkedHashSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == HashSet.class )  {^87^^^^^72^102^} else if  ( type == LinkedHashSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == SortedSet.class )  {^87^^^^^72^102^} else if  ( type == LinkedHashSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == ArrayList.class )  {^87^^^^^72^102^} else if  ( type == LinkedHashSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P2_Replace_Operator]^} else if  ( type != List.class )  {^89^^^^^74^104^} else if  ( type == List.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P2_Replace_Operator]^} else if  ( type >= List.class )  {^89^^^^^74^104^} else if  ( type == List.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P5_Replace_Variable]^} else if  ( null == List.class )  {^89^^^^^74^104^} else if  ( type == List.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P5_Replace_Variable]^} else if  ( type == List.type )  {^89^^^^^74^104^} else if  ( type == List.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P6_Replace_Expression]^} else if  ( type == class )  {^89^^^^^74^104^} else if  ( type == List.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P6_Replace_Expression]^} else {^89^^^^^74^104^} else if  ( type == List.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == Set.class )  {^89^^^^^74^104^} else if  ( type == List.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == Collection.class )  {^89^^^^^74^104^} else if  ( type == List.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == LinkedHashMap.class )  {^89^^^^^74^104^} else if  ( type == List.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == TreeSet.class )  {^89^^^^^74^104^} else if  ( type == List.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == LinkedHashSet.class )  {^89^^^^^74^104^} else if  ( type == List.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == Map.class )  {^89^^^^^74^104^} else if  ( type == List.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == Character.TYPE )  {^89^^^^^74^104^} else if  ( type == List.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == LinkedList.class )  {^89^^^^^74^104^} else if  ( type == List.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == HashMap.class )  {^89^^^^^74^104^} else if  ( type == List.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == SortedMap.class )  {^89^^^^^74^104^} else if  ( type == List.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == TreeMap.class )  {^89^^^^^74^104^} else if  ( type == List.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == HashSet.class )  {^89^^^^^74^104^} else if  ( type == List.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == SortedSet.class )  {^89^^^^^74^104^} else if  ( type == List.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == ArrayList.class )  {^89^^^^^74^104^} else if  ( type == List.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P2_Replace_Operator]^} else if  ( type != LinkedList.class )  {^91^^^^^76^106^} else if  ( type == LinkedList.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P2_Replace_Operator]^} else if  ( type >= LinkedList.class )  {^91^^^^^76^106^} else if  ( type == LinkedList.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P2_Replace_Operator]^} else if  ( type <= LinkedList.class )  {^91^^^^^76^106^} else if  ( type == LinkedList.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P5_Replace_Variable]^} else if  ( type == LinkedList.type )  {^91^^^^^76^106^} else if  ( type == LinkedList.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P6_Replace_Expression]^} else if  ( type == class )  {^91^^^^^76^106^} else if  ( type == LinkedList.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P6_Replace_Expression]^} else {^91^^^^^76^106^} else if  ( type == LinkedList.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P8_Replace_Mix]^}  if  ( type == LinkedList.type )  {^91^^^^^76^106^} else if  ( type == LinkedList.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == Set.class )  {^91^^^^^76^106^} else if  ( type == LinkedList.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == Collection.class )  {^91^^^^^76^106^} else if  ( type == LinkedList.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == LinkedHashMap.class )  {^91^^^^^76^106^} else if  ( type == LinkedList.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == TreeSet.class )  {^91^^^^^76^106^} else if  ( type == LinkedList.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == List.class )  {^91^^^^^76^106^} else if  ( type == LinkedList.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == LinkedHashSet.class )  {^91^^^^^76^106^} else if  ( type == LinkedList.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == Map.class )  {^91^^^^^76^106^} else if  ( type == LinkedList.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == HashMap.class )  {^91^^^^^76^106^} else if  ( type == LinkedList.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == SortedMap.class )  {^91^^^^^76^106^} else if  ( type == LinkedList.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == TreeMap.class )  {^91^^^^^76^106^} else if  ( type == LinkedList.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == HashSet.class )  {^91^^^^^76^106^} else if  ( type == LinkedList.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == SortedSet.class )  {^91^^^^^76^106^} else if  ( type == LinkedList.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == ArrayList.class )  {^91^^^^^76^106^} else if  ( type == LinkedList.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P2_Replace_Operator]^} else if  ( type >= ArrayList.class )  {^93^^^^^78^108^} else if  ( type == ArrayList.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P2_Replace_Operator]^} else if  ( type != ArrayList.class )  {^93^^^^^78^108^} else if  ( type == ArrayList.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P2_Replace_Operator]^} else if  ( type > ArrayList.class )  {^93^^^^^78^108^} else if  ( type == ArrayList.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P5_Replace_Variable]^} else if  ( type == ArrayList.type )  {^93^^^^^78^108^} else if  ( type == ArrayList.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P6_Replace_Expression]^} else if  ( type == class )  {^93^^^^^78^108^} else if  ( type == ArrayList.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P6_Replace_Expression]^} else {^93^^^^^78^108^} else if  ( type == ArrayList.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == Set.class )  {^93^^^^^78^108^} else if  ( type == ArrayList.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == Collection.class )  {^93^^^^^78^108^} else if  ( type == ArrayList.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == LinkedHashMap.class )  {^93^^^^^78^108^} else if  ( type == ArrayList.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == TreeSet.class )  {^93^^^^^78^108^} else if  ( type == ArrayList.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == List.class )  {^93^^^^^78^108^} else if  ( type == ArrayList.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == LinkedHashSet.class )  {^93^^^^^78^108^} else if  ( type == ArrayList.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == Map.class )  {^93^^^^^78^108^} else if  ( type == ArrayList.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == Character.TYPE )  {^93^^^^^78^108^} else if  ( type == ArrayList.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == LinkedList.class )  {^93^^^^^78^108^} else if  ( type == ArrayList.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == HashMap.class )  {^93^^^^^78^108^} else if  ( type == ArrayList.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == SortedMap.class )  {^93^^^^^78^108^} else if  ( type == ArrayList.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == TreeMap.class )  {^93^^^^^78^108^} else if  ( type == ArrayList.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == HashSet.class )  {^93^^^^^78^108^} else if  ( type == ArrayList.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == SortedSet.class )  {^93^^^^^78^108^} else if  ( type == ArrayList.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P2_Replace_Operator]^} else if  ( type != Map.class )  {^95^^^^^80^110^} else if  ( type == Map.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P2_Replace_Operator]^} else if  ( type <= Map.class )  {^95^^^^^80^110^} else if  ( type == Map.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P5_Replace_Variable]^} else if  ( type == Map.type )  {^95^^^^^80^110^} else if  ( type == Map.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P6_Replace_Expression]^} else if  ( type == class )  {^95^^^^^80^110^} else if  ( type == Map.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P6_Replace_Expression]^} else {^95^^^^^80^110^} else if  ( type == Map.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P8_Replace_Mix]^}  if  ( type == Map.type )  {^95^^^^^80^110^} else if  ( type == Map.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == Set.class )  {^95^^^^^80^110^} else if  ( type == Map.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == Collection.class )  {^95^^^^^80^110^} else if  ( type == Map.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == LinkedHashMap.class )  {^95^^^^^80^110^} else if  ( type == Map.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == TreeSet.class )  {^95^^^^^80^110^} else if  ( type == Map.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == List.class )  {^95^^^^^80^110^} else if  ( type == Map.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == LinkedHashSet.class )  {^95^^^^^80^110^} else if  ( type == Map.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == Character.TYPE )  {^95^^^^^80^110^} else if  ( type == Map.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == LinkedList.class )  {^95^^^^^80^110^} else if  ( type == Map.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == HashMap.class )  {^95^^^^^80^110^} else if  ( type == Map.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == SortedMap.class )  {^95^^^^^80^110^} else if  ( type == Map.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == TreeMap.class )  {^95^^^^^80^110^} else if  ( type == Map.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == HashSet.class )  {^95^^^^^80^110^} else if  ( type == Map.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == SortedSet.class )  {^95^^^^^80^110^} else if  ( type == Map.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == ArrayList.class )  {^95^^^^^80^110^} else if  ( type == Map.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P2_Replace_Operator]^} else if  ( type != HashMap.class )  {^97^^^^^82^112^} else if  ( type == HashMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P2_Replace_Operator]^} else if  ( type < HashMap.class )  {^97^^^^^82^112^} else if  ( type == HashMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P5_Replace_Variable]^} else if  ( type == HashMap.type )  {^97^^^^^82^112^} else if  ( type == HashMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P6_Replace_Expression]^} else if  ( type == class )  {^97^^^^^82^112^} else if  ( type == HashMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P6_Replace_Expression]^} else {^97^^^^^82^112^} else if  ( type == HashMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P8_Replace_Mix]^}  if  ( type == HashMap.type )  {^97^^^^^82^112^} else if  ( type == HashMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == Set.class )  {^97^^^^^82^112^} else if  ( type == HashMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == Collection.class )  {^97^^^^^82^112^} else if  ( type == HashMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == LinkedHashMap.class )  {^97^^^^^82^112^} else if  ( type == HashMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == TreeSet.class )  {^97^^^^^82^112^} else if  ( type == HashMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == List.class )  {^97^^^^^82^112^} else if  ( type == HashMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == LinkedHashSet.class )  {^97^^^^^82^112^} else if  ( type == HashMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == Map.class )  {^97^^^^^82^112^} else if  ( type == HashMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == Character.TYPE )  {^97^^^^^82^112^} else if  ( type == HashMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == LinkedList.class )  {^97^^^^^82^112^} else if  ( type == HashMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == SortedMap.class )  {^97^^^^^82^112^} else if  ( type == HashMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == TreeMap.class )  {^97^^^^^82^112^} else if  ( type == HashMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == HashSet.class )  {^97^^^^^82^112^} else if  ( type == HashMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == SortedSet.class )  {^97^^^^^82^112^} else if  ( type == HashMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == ArrayList.class )  {^97^^^^^82^112^} else if  ( type == HashMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P2_Replace_Operator]^} else if  ( type >= SortedMap.class )  {^99^^^^^84^114^} else if  ( type == SortedMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P2_Replace_Operator]^} else if  ( type != SortedMap.class )  {^99^^^^^84^114^} else if  ( type == SortedMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P2_Replace_Operator]^} else if  ( type <= SortedMap.class )  {^99^^^^^84^114^} else if  ( type == SortedMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P5_Replace_Variable]^} else if  ( type == SortedMap.type )  {^99^^^^^84^114^} else if  ( type == SortedMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P6_Replace_Expression]^} else if  ( type == class )  {^99^^^^^84^114^} else if  ( type == SortedMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P6_Replace_Expression]^} else {^99^^^^^84^114^} else if  ( type == SortedMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == Set.class )  {^99^^^^^84^114^} else if  ( type == SortedMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == Collection.class )  {^99^^^^^84^114^} else if  ( type == SortedMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == LinkedHashMap.class )  {^99^^^^^84^114^} else if  ( type == SortedMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == TreeSet.class )  {^99^^^^^84^114^} else if  ( type == SortedMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == List.class )  {^99^^^^^84^114^} else if  ( type == SortedMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == LinkedHashSet.class )  {^99^^^^^84^114^} else if  ( type == SortedMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == Map.class )  {^99^^^^^84^114^} else if  ( type == SortedMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == Character.TYPE )  {^99^^^^^84^114^} else if  ( type == SortedMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == LinkedList.class )  {^99^^^^^84^114^} else if  ( type == SortedMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == HashMap.class )  {^99^^^^^84^114^} else if  ( type == SortedMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == TreeMap.class )  {^99^^^^^84^114^} else if  ( type == SortedMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == HashSet.class )  {^99^^^^^84^114^} else if  ( type == SortedMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == SortedSet.class )  {^99^^^^^84^114^} else if  ( type == SortedMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == ArrayList.class )  {^99^^^^^84^114^} else if  ( type == SortedMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P2_Replace_Operator]^} else if  ( type >= TreeMap.class )  {^101^^^^^86^116^} else if  ( type == TreeMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P2_Replace_Operator]^} else if  ( type != TreeMap.class )  {^101^^^^^86^116^} else if  ( type == TreeMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P5_Replace_Variable]^} else if  ( type == TreeMap.type )  {^101^^^^^86^116^} else if  ( type == TreeMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P6_Replace_Expression]^} else if  ( type == class )  {^101^^^^^86^116^} else if  ( type == TreeMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P6_Replace_Expression]^} else {^101^^^^^86^116^} else if  ( type == TreeMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P8_Replace_Mix]^}  if  ( type == TreeMap.class )  {^101^^^^^86^116^} else if  ( type == TreeMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == Set.class )  {^101^^^^^86^116^} else if  ( type == TreeMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == Collection.class )  {^101^^^^^86^116^} else if  ( type == TreeMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == LinkedHashMap.class )  {^101^^^^^86^116^} else if  ( type == TreeMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == TreeSet.class )  {^101^^^^^86^116^} else if  ( type == TreeMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == List.class )  {^101^^^^^86^116^} else if  ( type == TreeMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == LinkedHashSet.class )  {^101^^^^^86^116^} else if  ( type == TreeMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == Map.class )  {^101^^^^^86^116^} else if  ( type == TreeMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == Character.TYPE )  {^101^^^^^86^116^} else if  ( type == TreeMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == LinkedList.class )  {^101^^^^^86^116^} else if  ( type == TreeMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == HashMap.class )  {^101^^^^^86^116^} else if  ( type == TreeMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == SortedMap.class )  {^101^^^^^86^116^} else if  ( type == TreeMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == HashSet.class )  {^101^^^^^86^116^} else if  ( type == TreeMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == SortedSet.class )  {^101^^^^^86^116^} else if  ( type == TreeMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == ArrayList.class )  {^101^^^^^86^116^} else if  ( type == TreeMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P15_Unwrap_Block]^return new java.util.TreeMap<java.lang.Object, java.lang.Object>();^101^102^103^104^105^86^116^} else if  ( type == TreeMap.class )  { return new TreeMap<Object, Object> (  ) ; } else if  ( type == LinkedHashMap.class )  { return new LinkedHashMap<Object, Object> (  ) ; }^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P16_Remove_Block]^^101^102^103^104^105^86^116^} else if  ( type == TreeMap.class )  { return new TreeMap<Object, Object> (  ) ; } else if  ( type == LinkedHashMap.class )  { return new LinkedHashMap<Object, Object> (  ) ; }^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P13_Insert_Block]^if  ( type ==  ( class )  )  {     return new Object, Object> (  ) ; }else     if  ( type ==  ( class )  )  {         return new Object, Object> (  ) ;     }else         if  ( type ==  ( class )  )  {             return new Object, Object> (  ) ;         }^101^^^^^86^116^[Delete]^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P2_Replace_Operator]^} else if  ( type != LinkedHashMap.class )  {^103^^^^^88^118^} else if  ( type == LinkedHashMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P6_Replace_Expression]^} else {^103^^^^^88^118^} else if  ( type == LinkedHashMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P8_Replace_Mix]^}  if  ( type == LinkedHashMap.class )  {^103^^^^^88^118^} else if  ( type == LinkedHashMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == Set.class )  {^103^^^^^88^118^} else if  ( type == LinkedHashMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == Collection.class )  {^103^^^^^88^118^} else if  ( type == LinkedHashMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == TreeSet.class )  {^103^^^^^88^118^} else if  ( type == LinkedHashMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == List.class )  {^103^^^^^88^118^} else if  ( type == LinkedHashMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == LinkedHashSet.class )  {^103^^^^^88^118^} else if  ( type == LinkedHashMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == Map.class )  {^103^^^^^88^118^} else if  ( type == LinkedHashMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == LinkedList.class )  {^103^^^^^88^118^} else if  ( type == LinkedHashMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == HashMap.class )  {^103^^^^^88^118^} else if  ( type == LinkedHashMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == SortedMap.class )  {^103^^^^^88^118^} else if  ( type == LinkedHashMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == TreeMap.class )  {^103^^^^^88^118^} else if  ( type == LinkedHashMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == HashSet.class )  {^103^^^^^88^118^} else if  ( type == LinkedHashMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == SortedSet.class )  {^103^^^^^88^118^} else if  ( type == LinkedHashMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P9_Replace_Statement]^} else if  ( type == ArrayList.class )  {^103^^^^^88^118^} else if  ( type == LinkedHashMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P15_Unwrap_Block]^return new java.util.LinkedHashMap<java.lang.Object, java.lang.Object>();^103^104^105^^^88^118^} else if  ( type == LinkedHashMap.class )  { return new LinkedHashMap<Object, Object> (  ) ; }^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P16_Remove_Block]^^103^104^105^^^88^118^} else if  ( type == LinkedHashMap.class )  { return new LinkedHashMap<Object, Object> (  ) ; }^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P4_Replace_Constructor]^return return  new Object, Object> (  )  ;^104^^^^^89^119^return new LinkedHashMap<Object, Object> (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P8_Replace_Mix]^return  new Object, Object> (  )  ;^104^^^^^89^119^return new LinkedHashMap<Object, Object> (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P13_Insert_Block]^if  ( type ==  ( class )  )  {     return new Object, Object> (  ) ; }^104^^^^^89^119^[Delete]^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P4_Replace_Constructor]^return return  new Object, Object> (  )  ;^102^^^^^87^117^return new TreeMap<Object, Object> (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P8_Replace_Mix]^return  new Object, Object> (  )  ;^102^^^^^87^117^return new TreeMap<Object, Object> (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P2_Replace_Operator]^} else if  ( type < LinkedHashMap.class )  {^103^^^^^88^118^} else if  ( type == LinkedHashMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P4_Replace_Constructor]^return return  new Object, Object> (  )  ;^100^^^^^85^115^return new TreeMap<Object, Object> (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P8_Replace_Mix]^return  new Object, Object> (  )  ;^100^^^^^85^115^return new TreeMap<Object, Object> (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P2_Replace_Operator]^} else if  ( type <= TreeMap.class )  {^101^^^^^86^116^} else if  ( type == TreeMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P2_Replace_Operator]^} else if  ( type <= LinkedHashMap.class )  {^103^^^^^88^118^} else if  ( type == LinkedHashMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P2_Replace_Operator]^} else if  ( type > LinkedHashMap.class )  {^103^^^^^88^118^} else if  ( type == LinkedHashMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P8_Replace_Mix]^}  if  ( null == LinkedHashMap.class )  {^103^^^^^88^118^} else if  ( type == LinkedHashMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P4_Replace_Constructor]^return return  new Object, Object> (  )  ;^98^^^^^83^113^return new HashMap<Object, Object> (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P8_Replace_Mix]^return  new Object, Object> (  )  ;^98^^^^^83^113^return new HashMap<Object, Object> (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P13_Insert_Block]^if  ( type ==  ( class )  )  {     return new Object, Object> (  ) ; }^98^^^^^83^113^[Delete]^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P8_Replace_Mix]^}  if  ( type == SortedMap.type )  {^99^^^^^84^114^} else if  ( type == SortedMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P2_Replace_Operator]^} else if  ( type > TreeMap.class )  {^101^^^^^86^116^} else if  ( type == TreeMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P4_Replace_Constructor]^return return  new Object, Object> (  )  ;^96^^^^^81^111^return new HashMap<Object, Object> (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P8_Replace_Mix]^return  new Object, Object> (  )  ;^96^^^^^81^111^return new HashMap<Object, Object> (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P13_Insert_Block]^if  ( type ==  ( class )  )  {     return new Object, Object> (  ) ; }^96^^^^^81^111^[Delete]^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P2_Replace_Operator]^} else if  ( type <= HashMap.class )  {^97^^^^^82^112^} else if  ( type == HashMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P5_Replace_Variable]^} else if  ( 4 == HashMap.class )  {^97^^^^^82^112^} else if  ( type == HashMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P5_Replace_Variable]^} else if  ( null == LinkedHashMap.class )  {^103^^^^^88^118^} else if  ( type == LinkedHashMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P8_Replace_Mix]^}  if  ( 0 == LinkedHashMap.class )  {^103^^^^^88^118^} else if  ( type == LinkedHashMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P8_Replace_Mix]^}  if  ( type == TreeMap.type )  {^101^^^^^86^116^} else if  ( type == TreeMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P2_Replace_Operator]^} else if  ( type >= LinkedHashMap.class )  {^103^^^^^88^118^} else if  ( type == LinkedHashMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P5_Replace_Variable]^} else if  ( 2 == TreeMap.class )  {^101^^^^^86^116^} else if  ( type == TreeMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P8_Replace_Mix]^}  if  ( this == LinkedHashMap.class )  {^103^^^^^88^118^} else if  ( type == LinkedHashMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P1_Replace_Type]^return new  List <Object> (  ) ;^94^^^^^79^109^return new ArrayList<Object> (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P4_Replace_Constructor]^return return  new Object> (  )  ;^94^^^^^79^109^return new ArrayList<Object> (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P8_Replace_Mix]^return  new Object> (  )  ;^94^^^^^79^109^return new ArrayList<Object> (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P1_Replace_Type]^return new  LinkedList <Object> (  ) ;^94^^^^^79^109^return new ArrayList<Object> (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P2_Replace_Operator]^} else if  ( type > Map.class )  {^95^^^^^80^110^} else if  ( type == Map.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P2_Replace_Operator]^} else if  ( type >= Map.class )  {^95^^^^^80^110^} else if  ( type == Map.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P2_Replace_Operator]^} else if  ( type >= HashMap.class )  {^97^^^^^82^112^} else if  ( type == HashMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P2_Replace_Operator]^} else if  ( type < SortedMap.class )  {^99^^^^^84^114^} else if  ( type == SortedMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P2_Replace_Operator]^} else if  ( type > SortedMap.class )  {^99^^^^^84^114^} else if  ( type == SortedMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P2_Replace_Operator]^} else if  ( type < TreeMap.class )  {^101^^^^^86^116^} else if  ( type == TreeMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P5_Replace_Variable]^} else if  ( this == LinkedHashMap.class )  {^103^^^^^88^118^} else if  ( type == LinkedHashMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P5_Replace_Variable]^} else if  ( null == TreeMap.class )  {^101^^^^^86^116^} else if  ( type == TreeMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P5_Replace_Variable]^} else if  ( 4 == TreeMap.class )  {^101^^^^^86^116^} else if  ( type == TreeMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P1_Replace_Type]^return new  Set <Object> (  ) ;^94^^^^^79^109^return new ArrayList<Object> (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P1_Replace_Type]^return new  Set <Object> (  ) ;^92^^^^^77^107^return new LinkedList<Object> (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P4_Replace_Constructor]^return return  new Object> (  )  ;^92^^^^^77^107^return new LinkedList<Object> (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P8_Replace_Mix]^return  new Object> (  )  ;^92^^^^^77^107^return new LinkedList<Object> (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P1_Replace_Type]^return new  ArrayList <Object> (  ) ;^92^^^^^77^107^return new LinkedList<Object> (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P2_Replace_Operator]^} else if  ( type <= ArrayList.class )  {^93^^^^^78^108^} else if  ( type == ArrayList.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P2_Replace_Operator]^} else if  ( type < Map.class )  {^95^^^^^80^110^} else if  ( type == Map.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P5_Replace_Variable]^} else if  ( 1 == SortedMap.class )  {^99^^^^^84^114^} else if  ( type == SortedMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P8_Replace_Mix]^}  if  ( 3 == LinkedHashMap.class )  {^103^^^^^88^118^} else if  ( type == LinkedHashMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P5_Replace_Variable]^} else if  ( null == HashMap.class )  {^97^^^^^82^112^} else if  ( type == HashMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P8_Replace_Mix]^} else if  ( 2 == LinkedHashMap.class )  {^103^^^^^88^118^} else if  ( type == LinkedHashMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P1_Replace_Type]^return new  LinkedHashSet <Object> (  ) ;^92^^^^^77^107^return new LinkedList<Object> (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P1_Replace_Type]^return new  LinkedHashSet <Object> (  ) ;^94^^^^^79^109^return new ArrayList<Object> (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P1_Replace_Type]^return new  ArrayList <Object> (  ) ;^90^^^^^75^105^return new LinkedList<Object> (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P4_Replace_Constructor]^return return  new Object> (  )  ;^90^^^^^75^105^return new LinkedList<Object> (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P8_Replace_Mix]^return  new Object> (  )  ;^90^^^^^75^105^return new LinkedList<Object> (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P2_Replace_Operator]^} else if  ( type < LinkedList.class )  {^91^^^^^76^106^} else if  ( type == LinkedList.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P2_Replace_Operator]^} else if  ( type > LinkedList.class )  {^91^^^^^76^106^} else if  ( type == LinkedList.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P8_Replace_Mix]^}  if  ( null == TreeMap.class )  {^101^^^^^86^116^} else if  ( type == TreeMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P5_Replace_Variable]^} else if  ( null == SortedMap.class )  {^99^^^^^84^114^} else if  ( type == SortedMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P5_Replace_Variable]^} else if  ( this == TreeMap.class )  {^101^^^^^86^116^} else if  ( type == TreeMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P5_Replace_Variable]^} else if  ( 3 == LinkedHashMap.class )  {^103^^^^^88^118^} else if  ( type == LinkedHashMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P5_Replace_Variable]^} else if  ( 1 == LinkedHashMap.class )  {^103^^^^^88^118^} else if  ( type == LinkedHashMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P5_Replace_Variable]^} else if  ( 0 == SortedMap.class )  {^99^^^^^84^114^} else if  ( type == SortedMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P1_Replace_Type]^return new  List <Object> (  ) ;^92^^^^^77^107^return new LinkedList<Object> (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P8_Replace_Mix]^}  if  ( type == ArrayList.type )  {^93^^^^^78^108^} else if  ( type == ArrayList.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P2_Replace_Operator]^} else if  ( type > HashMap.class )  {^97^^^^^82^112^} else if  ( type == HashMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P5_Replace_Variable]^} else if  ( 1 == TreeMap.class )  {^101^^^^^86^116^} else if  ( type == TreeMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P5_Replace_Variable]^} else if  ( null == Map.class )  {^95^^^^^80^110^} else if  ( type == Map.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P1_Replace_Type]^return new  Set <Object> (  ) ;^90^^^^^75^105^return new LinkedList<Object> (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P1_Replace_Type]^return new  Set <Object> (  ) ;^88^^^^^73^103^return new LinkedHashSet<Object> (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P4_Replace_Constructor]^return return  new Object> (  )  ;^88^^^^^73^103^return new LinkedHashSet<Object> (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P8_Replace_Mix]^return  new Object> (  )  ;^88^^^^^73^103^return new LinkedHashSet<Object> (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P1_Replace_Type]^return new  LinkedList <Object> (  ) ;^88^^^^^73^103^return new LinkedHashSet<Object> (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P2_Replace_Operator]^} else if  ( type <= List.class )  {^89^^^^^74^104^} else if  ( type == List.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P5_Replace_Variable]^} else if  ( 0 == LinkedHashMap.class )  {^103^^^^^88^118^} else if  ( type == LinkedHashMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P8_Replace_Mix]^}  if  ( this == TreeMap.class )  {^101^^^^^86^116^} else if  ( type == TreeMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P5_Replace_Variable]^} else if  ( 0 == TreeMap.class )  {^101^^^^^86^116^} else if  ( type == TreeMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P1_Replace_Type]^return new  List <Object> (  ) ;^90^^^^^75^105^return new LinkedList<Object> (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P5_Replace_Variable]^} else if  ( this == Map.class )  {^95^^^^^80^110^} else if  ( type == Map.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P5_Replace_Variable]^} else if  ( 4 == SortedMap.class )  {^99^^^^^84^114^} else if  ( type == SortedMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P5_Replace_Variable]^} else if  ( 1 == HashMap.class )  {^97^^^^^82^112^} else if  ( type == HashMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P8_Replace_Mix]^}  if  ( 4 == SortedMap.class )  {^99^^^^^84^114^} else if  ( type == SortedMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P1_Replace_Type]^return new  List <Object> (  ) ;^88^^^^^73^103^return new LinkedHashSet<Object> (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P1_Replace_Type]^return new  List <Object> (  ) ;^86^^^^^71^101^return new TreeSet<Object> (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P4_Replace_Constructor]^return return  new Object> (  )  ;^86^^^^^71^101^return new TreeSet<Object> (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P8_Replace_Mix]^return  new Object> (  )  ;^86^^^^^71^101^return new TreeSet<Object> (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P1_Replace_Type]^return new  LinkedHashSet <Object> (  ) ;^86^^^^^71^101^return new TreeSet<Object> (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P2_Replace_Operator]^} else if  ( type <= LinkedHashSet.class )  {^87^^^^^72^102^} else if  ( type == LinkedHashSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P2_Replace_Operator]^} else if  ( type >= LinkedHashSet.class )  {^87^^^^^72^102^} else if  ( type == LinkedHashSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P2_Replace_Operator]^} else if  ( type > List.class )  {^89^^^^^74^104^} else if  ( type == List.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P5_Replace_Variable]^} else if  ( 2 == List.class )  {^89^^^^^74^104^} else if  ( type == List.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P8_Replace_Mix]^}  if  ( 3 == ArrayList.class )  {^93^^^^^78^108^} else if  ( type == ArrayList.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P2_Replace_Operator]^} else if  ( type < ArrayList.class )  {^93^^^^^78^108^} else if  ( type == ArrayList.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P5_Replace_Variable]^} else if  ( 4 == LinkedHashMap.class )  {^103^^^^^88^118^} else if  ( type == LinkedHashMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P8_Replace_Mix]^}  if  ( 1 == TreeMap.class )  {^101^^^^^86^116^} else if  ( type == TreeMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P1_Replace_Type]^return new  LinkedHashSet <Object> (  ) ;^90^^^^^75^105^return new LinkedList<Object> (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P8_Replace_Mix]^}  if  ( 2 == SortedMap.class )  {^99^^^^^84^114^} else if  ( type == SortedMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P8_Replace_Mix]^}  if  ( 1 == LinkedHashMap.class )  {^103^^^^^88^118^} else if  ( type == LinkedHashMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P5_Replace_Variable]^} else if  ( 2 == Map.class )  {^95^^^^^80^110^} else if  ( type == Map.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P8_Replace_Mix]^}  if  ( 0 == SortedMap.class )  {^99^^^^^84^114^} else if  ( type == SortedMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P5_Replace_Variable]^} else if  ( this == SortedMap.class )  {^99^^^^^84^114^} else if  ( type == SortedMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P5_Replace_Variable]^} else if  ( 3 == SortedMap.class )  {^99^^^^^84^114^} else if  ( type == SortedMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P8_Replace_Mix]^}  if  ( 2 == HashMap.class )  {^97^^^^^82^112^} else if  ( type == HashMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P1_Replace_Type]^return new  Set <Object> (  ) ;^86^^^^^71^101^return new TreeSet<Object> (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P1_Replace_Type]^return new  LinkedList <Object> (  ) ;^86^^^^^71^101^return new TreeSet<Object> (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P1_Replace_Type]^return new  ArrayList <Object> (  ) ;^88^^^^^73^103^return new LinkedHashSet<Object> (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P1_Replace_Type]^return new  LinkedHashSet <Object> (  ) ;^84^^^^^69^99^return new TreeSet<Object> (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P4_Replace_Constructor]^return return  new Object> (  )  ;^84^^^^^69^99^return new TreeSet<Object> (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P8_Replace_Mix]^return  new Object> (  )  ;^84^^^^^69^99^return new TreeSet<Object> (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P2_Replace_Operator]^} else if  ( type <= TreeSet.class )  {^85^^^^^70^100^} else if  ( type == TreeSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P8_Replace_Mix]^}  if  ( type == TreeSet.type )  {^85^^^^^70^100^} else if  ( type == TreeSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P8_Replace_Mix]^}  if  ( type == List.type )  {^89^^^^^74^104^} else if  ( type == List.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P8_Replace_Mix]^} else if  ( null == ArrayList.class )  {^93^^^^^78^108^} else if  ( type == ArrayList.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P5_Replace_Variable]^} else if  ( 3 == LinkedList.class )  {^91^^^^^76^106^} else if  ( type == LinkedList.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P5_Replace_Variable]^} else if  ( 0 == ArrayList.class )  {^93^^^^^78^108^} else if  ( type == ArrayList.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P8_Replace_Mix]^}  if  ( 4 == LinkedHashMap.class )  {^103^^^^^88^118^} else if  ( type == LinkedHashMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P5_Replace_Variable]^} else if  ( this == HashMap.class )  {^97^^^^^82^112^} else if  ( type == HashMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P8_Replace_Mix]^}  if  ( 4 == Map.class )  {^95^^^^^80^110^} else if  ( type == Map.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P8_Replace_Mix]^}  if  ( type == SortedMap.class )  {^99^^^^^84^114^} else if  ( type == SortedMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P8_Replace_Mix]^}  if  ( this == SortedMap.class )  {^99^^^^^84^114^} else if  ( type == SortedMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P5_Replace_Variable]^} else if  ( 3 == HashMap.class )  {^97^^^^^82^112^} else if  ( type == HashMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P5_Replace_Variable]^} else if  ( 3 == TreeMap.class )  {^101^^^^^86^116^} else if  ( type == TreeMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P5_Replace_Variable]^} else if  ( 0 == HashMap.class )  {^97^^^^^82^112^} else if  ( type == HashMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P5_Replace_Variable]^} else if  ( 2 == SortedMap.class )  {^99^^^^^84^114^} else if  ( type == SortedMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P1_Replace_Type]^return new  Set <Object> (  ) ;^84^^^^^69^99^return new TreeSet<Object> (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P1_Replace_Type]^return new  List <Object> (  ) ;^84^^^^^69^99^return new TreeSet<Object> (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P4_Replace_Constructor]^return return  new Object> (  )  ;^82^^^^^67^97^return new HashSet<Object> (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P8_Replace_Mix]^return  new Object> (  )  ;^82^^^^^67^97^return new HashSet<Object> (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P2_Replace_Operator]^} else if  ( type <= SortedSet.class )  {^83^^^^^68^98^} else if  ( type == SortedSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P2_Replace_Operator]^} else if  ( type > SortedSet.class )  {^83^^^^^68^98^} else if  ( type == SortedSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P2_Replace_Operator]^} else if  ( type > TreeSet.class )  {^85^^^^^70^100^} else if  ( type == TreeSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P5_Replace_Variable]^} else if  ( null == TreeSet.class )  {^85^^^^^70^100^} else if  ( type == TreeSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P2_Replace_Operator]^} else if  ( type < List.class )  {^89^^^^^74^104^} else if  ( type == List.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P5_Replace_Variable]^} else if  ( 4 == ArrayList.class )  {^93^^^^^78^108^} else if  ( type == ArrayList.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P8_Replace_Mix]^}  if  ( 2 == LinkedHashMap.class )  {^103^^^^^88^118^} else if  ( type == LinkedHashMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P8_Replace_Mix]^}  if  ( this == HashMap.class )  {^97^^^^^82^112^} else if  ( type == HashMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P8_Replace_Mix]^}  if  ( 3 == HashMap.class )  {^97^^^^^82^112^} else if  ( type == HashMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P8_Replace_Mix]^}  if  ( 1 == SortedMap.class )  {^99^^^^^84^114^} else if  ( type == SortedMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P8_Replace_Mix]^}  if  ( null == SortedMap.class )  {^99^^^^^84^114^} else if  ( type == SortedMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P8_Replace_Mix]^}  if  ( 2 == TreeMap.class )  {^101^^^^^86^116^} else if  ( type == TreeMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P1_Replace_Type]^return new  ArrayList <Object> (  ) ;^86^^^^^71^101^return new TreeSet<Object> (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P1_Replace_Type]^return new  ArrayList <Object> (  ) ;^84^^^^^69^99^return new TreeSet<Object> (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P5_Replace_Variable]^} else if  ( this == ArrayList.class )  {^93^^^^^78^108^} else if  ( type == ArrayList.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P5_Replace_Variable]^} else if  ( 0 == List.class )  {^89^^^^^74^104^} else if  ( type == List.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P5_Replace_Variable]^} else if  ( 1 == ArrayList.class )  {^93^^^^^78^108^} else if  ( type == ArrayList.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P5_Replace_Variable]^} else if  ( 4 == Map.class )  {^95^^^^^80^110^} else if  ( type == Map.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P8_Replace_Mix]^}  if  ( 3 == TreeMap.class )  {^101^^^^^86^116^} else if  ( type == TreeMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P5_Replace_Variable]^} else if  ( this == List.class )  {^89^^^^^74^104^} else if  ( type == List.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P4_Replace_Constructor]^return return  new Object> (  )  ;^80^^^^^65^95^return new HashSet<Object> (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P8_Replace_Mix]^return  new Object> (  )  ;^80^^^^^65^95^return new HashSet<Object> (  ) ;^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P2_Replace_Operator]^} else if  ( type > HashSet.class )  {^81^^^^^66^96^} else if  ( type == HashSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P2_Replace_Operator]^} else if  ( type < HashSet.class )  {^81^^^^^66^96^} else if  ( type == HashSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P8_Replace_Mix]^}  if  ( type == HashSet.type )  {^81^^^^^66^96^} else if  ( type == HashSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P5_Replace_Variable]^} else if  ( 2 == HashMap.class )  {^97^^^^^82^112^} else if  ( type == HashMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P5_Replace_Variable]^} else if  ( 1 == LinkedHashSet.class )  {^87^^^^^72^102^} else if  ( type == LinkedHashSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P8_Replace_Mix]^}  if  ( type == LinkedHashSet.type )  {^87^^^^^72^102^} else if  ( type == LinkedHashSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P5_Replace_Variable]^} else if  ( 2 == ArrayList.class )  {^93^^^^^78^108^} else if  ( type == ArrayList.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P5_Replace_Variable]^} else if  ( 0 == Map.class )  {^95^^^^^80^110^} else if  ( type == Map.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P8_Replace_Mix]^}  if  ( this == Map.class )  {^95^^^^^80^110^} else if  ( type == Map.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P5_Replace_Variable]^} else if  ( 2 == LinkedList.class )  {^91^^^^^76^106^} else if  ( type == LinkedList.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P5_Replace_Variable]^} else if  ( 4 == LinkedList.class )  {^91^^^^^76^106^} else if  ( type == LinkedList.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P5_Replace_Variable]^} else if  ( 3 == Map.class )  {^95^^^^^80^110^} else if  ( type == Map.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P8_Replace_Mix]^}  if  ( null == HashMap.class )  {^97^^^^^82^112^} else if  ( type == HashMap.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P5_Replace_Variable]^} else if  ( this == LinkedHashSet.class )  {^87^^^^^72^102^} else if  ( type == LinkedHashSet.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
[P5_Replace_Variable]^} else if  ( 1 == Map.class )  {^95^^^^^80^110^} else if  ( type == Map.class )  {^[CLASS] ReturnsEmptyValues  [METHOD] returnValueFor [RETURN_TYPE] Object   Class<?> type [VARIABLES] boolean  Class  type  
