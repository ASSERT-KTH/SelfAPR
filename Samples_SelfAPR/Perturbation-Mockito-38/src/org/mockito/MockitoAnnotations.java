[P2_Replace_Operator]^if  ( testClass != null )  {^81^^^^^80^90^if  ( testClass == null )  {^[CLASS] MockitoAnnotations  [METHOD] initMocks [RETURN_TYPE] void   Object testClass [VARIABLES] boolean  Object  testClass  Class  clazz  
[P8_Replace_Mix]^if  ( testClass == true )  {^81^^^^^80^90^if  ( testClass == null )  {^[CLASS] MockitoAnnotations  [METHOD] initMocks [RETURN_TYPE] void   Object testClass [VARIABLES] boolean  Object  testClass  Class  clazz  
[P9_Replace_Statement]^if  ( mock != null )  {^81^^^^^80^90^if  ( testClass == null )  {^[CLASS] MockitoAnnotations  [METHOD] initMocks [RETURN_TYPE] void   Object testClass [VARIABLES] boolean  Object  testClass  Class  clazz  
[P15_Unwrap_Block]^throw new org.mockito.exceptions.base.MockitoException("testClass cannot be null. For info how to use @Mock annotations see examples in javadoc for MockitoAnnotations class");^81^82^83^^^80^90^if  ( testClass == null )  { throw new MockitoException  (" ")  ; }^[CLASS] MockitoAnnotations  [METHOD] initMocks [RETURN_TYPE] void   Object testClass [VARIABLES] boolean  Object  testClass  Class  clazz  
[P16_Remove_Block]^^81^82^83^^^80^90^if  ( testClass == null )  { throw new MockitoException  (" ")  ; }^[CLASS] MockitoAnnotations  [METHOD] initMocks [RETURN_TYPE] void   Object testClass [VARIABLES] boolean  Object  testClass  Class  clazz  
[P13_Insert_Block]^if  ( testClass == null )  {     throw new MockitoException ( "testClass cannot be null. For info how to use @Mock annotations see examples in javadoc for MockitoAnnotations class" ) ; }^82^^^^^80^90^[Delete]^[CLASS] MockitoAnnotations  [METHOD] initMocks [RETURN_TYPE] void   Object testClass [VARIABLES] boolean  Object  testClass  Class  clazz  
[P14_Delete_Statement]^^85^^^^^80^90^Class<?> clazz = testClass.getClass (  ) ;^[CLASS] MockitoAnnotations  [METHOD] initMocks [RETURN_TYPE] void   Object testClass [VARIABLES] boolean  Object  testClass  Class  clazz  
[P11_Insert_Donor_Statement]^clazz = clazz.getSuperclass (  ) ;Class<?> clazz = testClass.getClass (  ) ;^85^^^^^80^90^Class<?> clazz = testClass.getClass (  ) ;^[CLASS] MockitoAnnotations  [METHOD] initMocks [RETURN_TYPE] void   Object testClass [VARIABLES] boolean  Object  testClass  Class  clazz  
[P2_Replace_Operator]^while  ( clazz == Object.class )  {^86^^^^^80^90^while  ( clazz != Object.class )  {^[CLASS] MockitoAnnotations  [METHOD] initMocks [RETURN_TYPE] void   Object testClass [VARIABLES] boolean  Object  testClass  Class  clazz  
[P5_Replace_Variable]^while  ( 0 != Object.class )  {^86^^^^^80^90^while  ( clazz != Object.class )  {^[CLASS] MockitoAnnotations  [METHOD] initMocks [RETURN_TYPE] void   Object testClass [VARIABLES] boolean  Object  testClass  Class  clazz  
[P8_Replace_Mix]^while  ( 3 != Object.class )  {^86^^^^^80^90^while  ( clazz != Object.class )  {^[CLASS] MockitoAnnotations  [METHOD] initMocks [RETURN_TYPE] void   Object testClass [VARIABLES] boolean  Object  testClass  Class  clazz  
[P8_Replace_Mix]^clazz =  null.getSuperclass (  ) ;^88^^^^^80^90^clazz = clazz.getSuperclass (  ) ;^[CLASS] MockitoAnnotations  [METHOD] initMocks [RETURN_TYPE] void   Object testClass [VARIABLES] boolean  Object  testClass  Class  clazz  
[P5_Replace_Variable]^scan (  clazz ) ;^87^^^^^80^90^scan ( testClass, clazz ) ;^[CLASS] MockitoAnnotations  [METHOD] initMocks [RETURN_TYPE] void   Object testClass [VARIABLES] boolean  Object  testClass  Class  clazz  
[P5_Replace_Variable]^scan ( testClass ) ;^87^^^^^80^90^scan ( testClass, clazz ) ;^[CLASS] MockitoAnnotations  [METHOD] initMocks [RETURN_TYPE] void   Object testClass [VARIABLES] boolean  Object  testClass  Class  clazz  
[P5_Replace_Variable]^scan ( clazz, testClass ) ;^87^^^^^80^90^scan ( testClass, clazz ) ;^[CLASS] MockitoAnnotations  [METHOD] initMocks [RETURN_TYPE] void   Object testClass [VARIABLES] boolean  Object  testClass  Class  clazz  
[P14_Delete_Statement]^^87^88^^^^80^90^scan ( testClass, clazz ) ; clazz = clazz.getSuperclass (  ) ;^[CLASS] MockitoAnnotations  [METHOD] initMocks [RETURN_TYPE] void   Object testClass [VARIABLES] boolean  Object  testClass  Class  clazz  
[P11_Insert_Donor_Statement]^field.set ( testClass, mock ) ;scan ( testClass, clazz ) ;^87^^^^^80^90^scan ( testClass, clazz ) ;^[CLASS] MockitoAnnotations  [METHOD] initMocks [RETURN_TYPE] void   Object testClass [VARIABLES] boolean  Object  testClass  Class  clazz  
[P8_Replace_Mix]^clazz = clazz .getDeclaredFields (  )  ;^88^^^^^80^90^clazz = clazz.getSuperclass (  ) ;^[CLASS] MockitoAnnotations  [METHOD] initMocks [RETURN_TYPE] void   Object testClass [VARIABLES] boolean  Object  testClass  Class  clazz  
[P14_Delete_Statement]^^88^^^^^80^90^clazz = clazz.getSuperclass (  ) ;^[CLASS] MockitoAnnotations  [METHOD] initMocks [RETURN_TYPE] void   Object testClass [VARIABLES] boolean  Object  testClass  Class  clazz  
[P11_Insert_Donor_Statement]^Class<?> clazz = testClass.getClass (  ) ;clazz = clazz.getSuperclass (  ) ;^88^^^^^80^90^clazz = clazz.getSuperclass (  ) ;^[CLASS] MockitoAnnotations  [METHOD] initMocks [RETURN_TYPE] void   Object testClass [VARIABLES] boolean  Object  testClass  Class  clazz  
[P14_Delete_Statement]^^87^^^^^80^90^scan ( testClass, clazz ) ;^[CLASS] MockitoAnnotations  [METHOD] initMocks [RETURN_TYPE] void   Object testClass [VARIABLES] boolean  Object  testClass  Class  clazz  
[P7_Replace_Invocation]^AnnotationEngine annotationEngine = new GlobalConfiguration (  ) .GlobalConfiguration (  ) ;^93^^^^^92^111^AnnotationEngine annotationEngine = new GlobalConfiguration (  ) .getAnnotationEngine (  ) ;^[CLASS] MockitoAnnotations  [METHOD] scan [RETURN_TYPE] void   Object testClass Class<?> clazz [VARIABLES] Field  field  boolean  wasAccessible  AnnotationEngine  annotationEngine  Object  mock  testClass  Class  clazz  Field[]  fields  Annotation  annotation  IllegalAccessException  e  
[P14_Delete_Statement]^^93^^^^^92^111^AnnotationEngine annotationEngine = new GlobalConfiguration (  ) .getAnnotationEngine (  ) ;^[CLASS] MockitoAnnotations  [METHOD] scan [RETURN_TYPE] void   Object testClass Class<?> clazz [VARIABLES] Field  field  boolean  wasAccessible  AnnotationEngine  annotationEngine  Object  mock  testClass  Class  clazz  Field[]  fields  Annotation  annotation  IllegalAccessException  e  
[P7_Replace_Invocation]^Field[] fields = clazz .getSuperclass (  )  ;^94^^^^^92^111^Field[] fields = clazz.getDeclaredFields (  ) ;^[CLASS] MockitoAnnotations  [METHOD] scan [RETURN_TYPE] void   Object testClass Class<?> clazz [VARIABLES] Field  field  boolean  wasAccessible  AnnotationEngine  annotationEngine  Object  mock  testClass  Class  clazz  Field[]  fields  Annotation  annotation  IllegalAccessException  e  
[P14_Delete_Statement]^^94^^^^^92^111^Field[] fields = clazz.getDeclaredFields (  ) ;^[CLASS] MockitoAnnotations  [METHOD] scan [RETURN_TYPE] void   Object testClass Class<?> clazz [VARIABLES] Field  field  boolean  wasAccessible  AnnotationEngine  annotationEngine  Object  mock  testClass  Class  clazz  Field[]  fields  Annotation  annotation  IllegalAccessException  e  
[P2_Replace_Operator]^if  ( mock == null )  {^98^^^^^92^111^if  ( mock != null )  {^[CLASS] MockitoAnnotations  [METHOD] scan [RETURN_TYPE] void   Object testClass Class<?> clazz [VARIABLES] Field  field  boolean  wasAccessible  AnnotationEngine  annotationEngine  Object  mock  testClass  Class  clazz  Field[]  fields  Annotation  annotation  IllegalAccessException  e  
[P5_Replace_Variable]^if  ( testClass != null )  {^98^^^^^92^111^if  ( mock != null )  {^[CLASS] MockitoAnnotations  [METHOD] scan [RETURN_TYPE] void   Object testClass Class<?> clazz [VARIABLES] Field  field  boolean  wasAccessible  AnnotationEngine  annotationEngine  Object  mock  testClass  Class  clazz  Field[]  fields  Annotation  annotation  IllegalAccessException  e  
[P6_Replace_Expression]^if  ( "Problems initiating mocks annotated with " + annotation )  {^98^^^^^92^111^if  ( mock != null )  {^[CLASS] MockitoAnnotations  [METHOD] scan [RETURN_TYPE] void   Object testClass Class<?> clazz [VARIABLES] Field  field  boolean  wasAccessible  AnnotationEngine  annotationEngine  Object  mock  testClass  Class  clazz  Field[]  fields  Annotation  annotation  IllegalAccessException  e  
[P8_Replace_Mix]^if  ( mock != this )  {^98^^^^^92^111^if  ( mock != null )  {^[CLASS] MockitoAnnotations  [METHOD] scan [RETURN_TYPE] void   Object testClass Class<?> clazz [VARIABLES] Field  field  boolean  wasAccessible  AnnotationEngine  annotationEngine  Object  mock  testClass  Class  clazz  Field[]  fields  Annotation  annotation  IllegalAccessException  e  
[P9_Replace_Statement]^if  ( testClass == null )  {^98^^^^^92^111^if  ( mock != null )  {^[CLASS] MockitoAnnotations  [METHOD] scan [RETURN_TYPE] void   Object testClass Class<?> clazz [VARIABLES] Field  field  boolean  wasAccessible  AnnotationEngine  annotationEngine  Object  mock  testClass  Class  clazz  Field[]  fields  Annotation  annotation  IllegalAccessException  e  
[P5_Replace_Variable]^field.set (  mock ) ;^102^^^^^92^111^field.set ( testClass, mock ) ;^[CLASS] MockitoAnnotations  [METHOD] scan [RETURN_TYPE] void   Object testClass Class<?> clazz [VARIABLES] Field  field  boolean  wasAccessible  AnnotationEngine  annotationEngine  Object  mock  testClass  Class  clazz  Field[]  fields  Annotation  annotation  IllegalAccessException  e  
[P5_Replace_Variable]^field.set ( testClass ) ;^102^^^^^92^111^field.set ( testClass, mock ) ;^[CLASS] MockitoAnnotations  [METHOD] scan [RETURN_TYPE] void   Object testClass Class<?> clazz [VARIABLES] Field  field  boolean  wasAccessible  AnnotationEngine  annotationEngine  Object  mock  testClass  Class  clazz  Field[]  fields  Annotation  annotation  IllegalAccessException  e  
[P5_Replace_Variable]^field.set ( mock, testClass ) ;^102^^^^^92^111^field.set ( testClass, mock ) ;^[CLASS] MockitoAnnotations  [METHOD] scan [RETURN_TYPE] void   Object testClass Class<?> clazz [VARIABLES] Field  field  boolean  wasAccessible  AnnotationEngine  annotationEngine  Object  mock  testClass  Class  clazz  Field[]  fields  Annotation  annotation  IllegalAccessException  e  
[P14_Delete_Statement]^^102^^^^^92^111^field.set ( testClass, mock ) ;^[CLASS] MockitoAnnotations  [METHOD] scan [RETURN_TYPE] void   Object testClass Class<?> clazz [VARIABLES] Field  field  boolean  wasAccessible  AnnotationEngine  annotationEngine  Object  mock  testClass  Class  clazz  Field[]  fields  Annotation  annotation  IllegalAccessException  e  
[P11_Insert_Donor_Statement]^field.setAccessible ( true ) ;field.set ( testClass, mock ) ;^102^^^^^92^111^field.set ( testClass, mock ) ;^[CLASS] MockitoAnnotations  [METHOD] scan [RETURN_TYPE] void   Object testClass Class<?> clazz [VARIABLES] Field  field  boolean  wasAccessible  AnnotationEngine  annotationEngine  Object  mock  testClass  Class  clazz  Field[]  fields  Annotation  annotation  IllegalAccessException  e  
[P11_Insert_Donor_Statement]^scan ( testClass, clazz ) ;field.set ( testClass, mock ) ;^102^^^^^92^111^field.set ( testClass, mock ) ;^[CLASS] MockitoAnnotations  [METHOD] scan [RETURN_TYPE] void   Object testClass Class<?> clazz [VARIABLES] Field  field  boolean  wasAccessible  AnnotationEngine  annotationEngine  Object  mock  testClass  Class  clazz  Field[]  fields  Annotation  annotation  IllegalAccessException  e  
[P7_Replace_Invocation]^boolean wasAccessible = field.setAccessible (  ) ;^99^^^^^92^111^boolean wasAccessible = field.isAccessible (  ) ;^[CLASS] MockitoAnnotations  [METHOD] scan [RETURN_TYPE] void   Object testClass Class<?> clazz [VARIABLES] Field  field  boolean  wasAccessible  AnnotationEngine  annotationEngine  Object  mock  testClass  Class  clazz  Field[]  fields  Annotation  annotation  IllegalAccessException  e  
[P8_Replace_Mix]^return ;^104^^^^^92^111^throw new MockitoException  (" ")  ;^[CLASS] MockitoAnnotations  [METHOD] scan [RETURN_TYPE] void   Object testClass Class<?> clazz [VARIABLES] Field  field  boolean  wasAccessible  AnnotationEngine  annotationEngine  Object  mock  testClass  Class  clazz  Field[]  fields  Annotation  annotation  IllegalAccessException  e  
[P14_Delete_Statement]^^99^^^^^92^111^boolean wasAccessible = field.isAccessible (  ) ;^[CLASS] MockitoAnnotations  [METHOD] scan [RETURN_TYPE] void   Object testClass Class<?> clazz [VARIABLES] Field  field  boolean  wasAccessible  AnnotationEngine  annotationEngine  Object  mock  testClass  Class  clazz  Field[]  fields  Annotation  annotation  IllegalAccessException  e  
[P11_Insert_Donor_Statement]^field.setAccessible ( wasAccessible ) ;boolean wasAccessible = field.isAccessible (  ) ;^99^^^^^92^111^boolean wasAccessible = field.isAccessible (  ) ;^[CLASS] MockitoAnnotations  [METHOD] scan [RETURN_TYPE] void   Object testClass Class<?> clazz [VARIABLES] Field  field  boolean  wasAccessible  AnnotationEngine  annotationEngine  Object  mock  testClass  Class  clazz  Field[]  fields  Annotation  annotation  IllegalAccessException  e  
[P3_Replace_Literal]^field.setAccessible ( false ) ;^100^^^^^92^111^field.setAccessible ( true ) ;^[CLASS] MockitoAnnotations  [METHOD] scan [RETURN_TYPE] void   Object testClass Class<?> clazz [VARIABLES] Field  field  boolean  wasAccessible  AnnotationEngine  annotationEngine  Object  mock  testClass  Class  clazz  Field[]  fields  Annotation  annotation  IllegalAccessException  e  
[P14_Delete_Statement]^^100^^^^^92^111^field.setAccessible ( true ) ;^[CLASS] MockitoAnnotations  [METHOD] scan [RETURN_TYPE] void   Object testClass Class<?> clazz [VARIABLES] Field  field  boolean  wasAccessible  AnnotationEngine  annotationEngine  Object  mock  testClass  Class  clazz  Field[]  fields  Annotation  annotation  IllegalAccessException  e  
[P11_Insert_Donor_Statement]^field.set ( testClass, mock ) ;field.setAccessible ( true ) ;^100^^^^^92^111^field.setAccessible ( true ) ;^[CLASS] MockitoAnnotations  [METHOD] scan [RETURN_TYPE] void   Object testClass Class<?> clazz [VARIABLES] Field  field  boolean  wasAccessible  AnnotationEngine  annotationEngine  Object  mock  testClass  Class  clazz  Field[]  fields  Annotation  annotation  IllegalAccessException  e  
[P11_Insert_Donor_Statement]^field.setAccessible ( wasAccessible ) ;field.setAccessible ( true ) ;^100^^^^^92^111^field.setAccessible ( true ) ;^[CLASS] MockitoAnnotations  [METHOD] scan [RETURN_TYPE] void   Object testClass Class<?> clazz [VARIABLES] Field  field  boolean  wasAccessible  AnnotationEngine  annotationEngine  Object  mock  testClass  Class  clazz  Field[]  fields  Annotation  annotation  IllegalAccessException  e  
[P5_Replace_Variable]^field.set ( testClass, testClass ) ;^102^^^^^92^111^field.set ( testClass, mock ) ;^[CLASS] MockitoAnnotations  [METHOD] scan [RETURN_TYPE] void   Object testClass Class<?> clazz [VARIABLES] Field  field  boolean  wasAccessible  AnnotationEngine  annotationEngine  Object  mock  testClass  Class  clazz  Field[]  fields  Annotation  annotation  IllegalAccessException  e  
[P14_Delete_Statement]^^106^^^^^92^111^field.setAccessible ( wasAccessible ) ;^[CLASS] MockitoAnnotations  [METHOD] scan [RETURN_TYPE] void   Object testClass Class<?> clazz [VARIABLES] Field  field  boolean  wasAccessible  AnnotationEngine  annotationEngine  Object  mock  testClass  Class  clazz  Field[]  fields  Annotation  annotation  IllegalAccessException  e  
[P11_Insert_Donor_Statement]^boolean wasAccessible = field.isAccessible (  ) ;field.setAccessible ( wasAccessible ) ;^106^^^^^92^111^field.setAccessible ( wasAccessible ) ;^[CLASS] MockitoAnnotations  [METHOD] scan [RETURN_TYPE] void   Object testClass Class<?> clazz [VARIABLES] Field  field  boolean  wasAccessible  AnnotationEngine  annotationEngine  Object  mock  testClass  Class  clazz  Field[]  fields  Annotation  annotation  IllegalAccessException  e  
[P11_Insert_Donor_Statement]^field.setAccessible ( true ) ;field.setAccessible ( wasAccessible ) ;^106^^^^^92^111^field.setAccessible ( wasAccessible ) ;^[CLASS] MockitoAnnotations  [METHOD] scan [RETURN_TYPE] void   Object testClass Class<?> clazz [VARIABLES] Field  field  boolean  wasAccessible  AnnotationEngine  annotationEngine  Object  mock  testClass  Class  clazz  Field[]  fields  Annotation  annotation  IllegalAccessException  e  
[P5_Replace_Variable]^Object mock = annotationEngine.createMockFor (  field ) ;^97^^^^^92^111^Object mock = annotationEngine.createMockFor ( annotation, field ) ;^[CLASS] MockitoAnnotations  [METHOD] scan [RETURN_TYPE] void   Object testClass Class<?> clazz [VARIABLES] Field  field  boolean  wasAccessible  AnnotationEngine  annotationEngine  Object  mock  testClass  Class  clazz  Field[]  fields  Annotation  annotation  IllegalAccessException  e  
[P5_Replace_Variable]^Object mock = annotationEngine.createMockFor ( annotation ) ;^97^^^^^92^111^Object mock = annotationEngine.createMockFor ( annotation, field ) ;^[CLASS] MockitoAnnotations  [METHOD] scan [RETURN_TYPE] void   Object testClass Class<?> clazz [VARIABLES] Field  field  boolean  wasAccessible  AnnotationEngine  annotationEngine  Object  mock  testClass  Class  clazz  Field[]  fields  Annotation  annotation  IllegalAccessException  e  
[P5_Replace_Variable]^Object mock = annotation.createMockFor ( annotationEngine, field ) ;^97^^^^^92^111^Object mock = annotationEngine.createMockFor ( annotation, field ) ;^[CLASS] MockitoAnnotations  [METHOD] scan [RETURN_TYPE] void   Object testClass Class<?> clazz [VARIABLES] Field  field  boolean  wasAccessible  AnnotationEngine  annotationEngine  Object  mock  testClass  Class  clazz  Field[]  fields  Annotation  annotation  IllegalAccessException  e  
[P5_Replace_Variable]^Object mock = annotationEngineEngine.createMockFor ( annotation, field ) ;^97^^^^^92^111^Object mock = annotationEngine.createMockFor ( annotation, field ) ;^[CLASS] MockitoAnnotations  [METHOD] scan [RETURN_TYPE] void   Object testClass Class<?> clazz [VARIABLES] Field  field  boolean  wasAccessible  AnnotationEngine  annotationEngine  Object  mock  testClass  Class  clazz  Field[]  fields  Annotation  annotation  IllegalAccessException  e  
[P5_Replace_Variable]^Object mock = fieldEngine.createMockFor ( annotation, annotation ) ;^97^^^^^92^111^Object mock = annotationEngine.createMockFor ( annotation, field ) ;^[CLASS] MockitoAnnotations  [METHOD] scan [RETURN_TYPE] void   Object testClass Class<?> clazz [VARIABLES] Field  field  boolean  wasAccessible  AnnotationEngine  annotationEngine  Object  mock  testClass  Class  clazz  Field[]  fields  Annotation  annotation  IllegalAccessException  e  
[P7_Replace_Invocation]^boolean wasAccessible = field .setAccessible ( wasAccessible )  ;^99^^^^^92^111^boolean wasAccessible = field.isAccessible (  ) ;^[CLASS] MockitoAnnotations  [METHOD] scan [RETURN_TYPE] void   Object testClass Class<?> clazz [VARIABLES] Field  field  boolean  wasAccessible  AnnotationEngine  annotationEngine  Object  mock  testClass  Class  clazz  Field[]  fields  Annotation  annotation  IllegalAccessException  e  
[P7_Replace_Invocation]^for ( Annotation annotation : field.setAccessible (  )  )  {^96^^^^^92^111^for ( Annotation annotation : field.getAnnotations (  )  )  {^[CLASS] MockitoAnnotations  [METHOD] scan [RETURN_TYPE] void   Object testClass Class<?> clazz [VARIABLES] Field  field  boolean  wasAccessible  AnnotationEngine  annotationEngine  Object  mock  testClass  Class  clazz  Field[]  fields  Annotation  annotation  IllegalAccessException  e  
[P7_Replace_Invocation]^for ( Annotation annotation : field .setAccessible ( wasAccessible )   )  {^96^^^^^92^111^for ( Annotation annotation : field.getAnnotations (  )  )  {^[CLASS] MockitoAnnotations  [METHOD] scan [RETURN_TYPE] void   Object testClass Class<?> clazz [VARIABLES] Field  field  boolean  wasAccessible  AnnotationEngine  annotationEngine  Object  mock  testClass  Class  clazz  Field[]  fields  Annotation  annotation  IllegalAccessException  e  
[P5_Replace_Variable]^Object mock = field.createMockFor ( annotation, annotationEngine ) ;^97^^^^^92^111^Object mock = annotationEngine.createMockFor ( annotation, field ) ;^[CLASS] MockitoAnnotations  [METHOD] scan [RETURN_TYPE] void   Object testClass Class<?> clazz [VARIABLES] Field  field  boolean  wasAccessible  AnnotationEngine  annotationEngine  Object  mock  testClass  Class  clazz  Field[]  fields  Annotation  annotation  IllegalAccessException  e  
[P14_Delete_Statement]^^97^^^^^92^111^Object mock = annotationEngine.createMockFor ( annotation, field ) ;^[CLASS] MockitoAnnotations  [METHOD] scan [RETURN_TYPE] void   Object testClass Class<?> clazz [VARIABLES] Field  field  boolean  wasAccessible  AnnotationEngine  annotationEngine  Object  mock  testClass  Class  clazz  Field[]  fields  Annotation  annotation  IllegalAccessException  e  
[P5_Replace_Variable]^field.set ( mock, mock ) ;^102^^^^^92^111^field.set ( testClass, mock ) ;^[CLASS] MockitoAnnotations  [METHOD] scan [RETURN_TYPE] void   Object testClass Class<?> clazz [VARIABLES] Field  field  boolean  wasAccessible  AnnotationEngine  annotationEngine  Object  mock  testClass  Class  clazz  Field[]  fields  Annotation  annotation  IllegalAccessException  e  
[P8_Replace_Mix]^field .isAccessible (  )  ;^106^^^^^92^111^field.setAccessible ( wasAccessible ) ;^[CLASS] MockitoAnnotations  [METHOD] scan [RETURN_TYPE] void   Object testClass Class<?> clazz [VARIABLES] Field  field  boolean  wasAccessible  AnnotationEngine  annotationEngine  Object  mock  testClass  Class  clazz  Field[]  fields  Annotation  annotation  IllegalAccessException  e  
