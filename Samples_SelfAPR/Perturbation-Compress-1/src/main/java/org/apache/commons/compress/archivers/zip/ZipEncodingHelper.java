[P8_Replace_Mix]^private  char [] highChars;^39^^^^^34^44^private final char [] highChars;^[CLASS] ZipEncodingHelper SimpleEncodingHolder   [VARIABLES] 
[P8_Replace_Mix]^private static  Map simpleEncodings;^65^^^^^60^70^private static final Map simpleEncodings;^[CLASS] ZipEncodingHelper SimpleEncodingHolder   [VARIABLES] 
[P1_Replace_Type]^static final char UTF8 = "UTF8";^191^^^^^186^196^static final String UTF8 = "UTF8";^[CLASS] ZipEncodingHelper SimpleEncodingHolder   [VARIABLES] 
[P3_Replace_Literal]^static final String UTF8 = "UTFTF8";^191^^^^^186^196^static final String UTF8 = "UTF8";^[CLASS] ZipEncodingHelper SimpleEncodingHolder   [VARIABLES] 
[P8_Replace_Mix]^static  ZipEncoding UTF8_ZIP_ENCODING = new FallbackZipEncoding ( UTF8 ) ;^196^^^^^191^201^static final ZipEncoding UTF8_ZIP_ENCODING = new FallbackZipEncoding ( UTF8 ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder   [VARIABLES] 
[P8_Replace_Mix]^this.highChars =  null;^50^^^^^49^51^this.highChars = highChars;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] <init> [RETURN_TYPE] ZipEncodingHelper$SimpleEncodingHolder(char[])   char[] highChars [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  Simple8BitZipEncoding  encoding  String  UTF8  Map  simpleEncodings  char[]  highChars  
[P2_Replace_Operator]^if  ( this.encoding != null )  {^58^^^^^57^62^if  ( this.encoding == null )  {^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] getEncoding [RETURN_TYPE] Simple8BitZipEncoding   [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  Simple8BitZipEncoding  encoding  String  UTF8  Map  simpleEncodings  char[]  highChars  
[P5_Replace_Variable]^if  ( encoding == null )  {^58^^^^^57^62^if  ( this.encoding == null )  {^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] getEncoding [RETURN_TYPE] Simple8BitZipEncoding   [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  Simple8BitZipEncoding  encoding  String  UTF8  Map  simpleEncodings  char[]  highChars  
[P8_Replace_Mix]^if  ( this.encoding == false )  {^58^^^^^57^62^if  ( this.encoding == null )  {^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] getEncoding [RETURN_TYPE] Simple8BitZipEncoding   [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  Simple8BitZipEncoding  encoding  String  UTF8  Map  simpleEncodings  char[]  highChars  
[P15_Unwrap_Block]^this.encoding = new org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding(this.highChars);^58^59^60^^^57^62^if  ( this.encoding == null )  { this.encoding = new Simple8BitZipEncoding ( this.highChars ) ; }^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] getEncoding [RETURN_TYPE] Simple8BitZipEncoding   [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  Simple8BitZipEncoding  encoding  String  UTF8  Map  simpleEncodings  char[]  highChars  
[P16_Remove_Block]^^58^59^60^^^57^62^if  ( this.encoding == null )  { this.encoding = new Simple8BitZipEncoding ( this.highChars ) ; }^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] getEncoding [RETURN_TYPE] Simple8BitZipEncoding   [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  Simple8BitZipEncoding  encoding  String  UTF8  Map  simpleEncodings  char[]  highChars  
[P13_Insert_Block]^if  ( name == null )  {     return new FallbackZipEncoding (  ) ; }^58^^^^^57^62^[Delete]^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] getEncoding [RETURN_TYPE] Simple8BitZipEncoding   [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  Simple8BitZipEncoding  encoding  String  UTF8  Map  simpleEncodings  char[]  highChars  
[P4_Replace_Constructor]^this.encoding = this.encoding =  new FallbackZipEncoding (  )  ;^59^^^^^57^62^this.encoding = new Simple8BitZipEncoding ( this.highChars ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] getEncoding [RETURN_TYPE] Simple8BitZipEncoding   [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  Simple8BitZipEncoding  encoding  String  UTF8  Map  simpleEncodings  char[]  highChars  
[P5_Replace_Variable]^this.encoding = new Simple8BitZipEncoding ( highChars ) ;^59^^^^^57^62^this.encoding = new Simple8BitZipEncoding ( this.highChars ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] getEncoding [RETURN_TYPE] Simple8BitZipEncoding   [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  Simple8BitZipEncoding  encoding  String  UTF8  Map  simpleEncodings  char[]  highChars  
[P8_Replace_Mix]^this.encoding =  new FallbackZipEncoding (  )  ;^59^^^^^57^62^this.encoding = new Simple8BitZipEncoding ( this.highChars ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] getEncoding [RETURN_TYPE] Simple8BitZipEncoding   [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  Simple8BitZipEncoding  encoding  String  UTF8  Map  simpleEncodings  char[]  highChars  
[P13_Insert_Block]^if  (  ( this.encoding )  == null )  {     this.encoding = new Simple8BitZipEncoding ( this.highChars ) ; }^59^^^^^57^62^[Delete]^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] getEncoding [RETURN_TYPE] Simple8BitZipEncoding   [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  Simple8BitZipEncoding  encoding  String  UTF8  Map  simpleEncodings  char[]  highChars  
[P5_Replace_Variable]^return encoding;^61^^^^^57^62^return this.encoding;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] getEncoding [RETURN_TYPE] Simple8BitZipEncoding   [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  Simple8BitZipEncoding  encoding  String  UTF8  Map  simpleEncodings  char[]  highChars  
[P5_Replace_Variable]^b.limit ( on.position (  )  ) ;^148^^^^^147^156^b.limit ( b.position (  )  ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] growBuffer [RETURN_TYPE] ByteBuffer   ByteBuffer b int newCapacity [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  Simple8BitZipEncoding  encoding  String  UTF8  Map  simpleEncodings  ByteBuffer  b  on  int  c2  newCapacity  char[]  highChars  
[P7_Replace_Invocation]^b.limit ( b.limit (  )  ) ;^148^^^^^147^156^b.limit ( b.position (  )  ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] growBuffer [RETURN_TYPE] ByteBuffer   ByteBuffer b int newCapacity [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  Simple8BitZipEncoding  encoding  String  UTF8  Map  simpleEncodings  ByteBuffer  b  on  int  c2  newCapacity  char[]  highChars  
[P7_Replace_Invocation]^b.limit ( b .limit ( newCapacity )   ) ;^148^^^^^147^156^b.limit ( b.position (  )  ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] growBuffer [RETURN_TYPE] ByteBuffer   ByteBuffer b int newCapacity [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  Simple8BitZipEncoding  encoding  String  UTF8  Map  simpleEncodings  ByteBuffer  b  on  int  c2  newCapacity  char[]  highChars  
[P14_Delete_Statement]^^148^^^^^147^156^b.limit ( b.position (  )  ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] growBuffer [RETURN_TYPE] ByteBuffer   ByteBuffer b int newCapacity [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  Simple8BitZipEncoding  encoding  String  UTF8  Map  simpleEncodings  ByteBuffer  b  on  int  c2  newCapacity  char[]  highChars  
[P14_Delete_Statement]^^148^149^^^^147^156^b.limit ( b.position (  )  ) ; b.rewind (  ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] growBuffer [RETURN_TYPE] ByteBuffer   ByteBuffer b int newCapacity [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  Simple8BitZipEncoding  encoding  String  UTF8  Map  simpleEncodings  ByteBuffer  b  on  int  c2  newCapacity  char[]  highChars  
[P7_Replace_Invocation]^b.limit (  ) ;^149^^^^^147^156^b.rewind (  ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] growBuffer [RETURN_TYPE] ByteBuffer   ByteBuffer b int newCapacity [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  Simple8BitZipEncoding  encoding  String  UTF8  Map  simpleEncodings  ByteBuffer  b  on  int  c2  newCapacity  char[]  highChars  
[P14_Delete_Statement]^^149^^^^^147^156^b.rewind (  ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] growBuffer [RETURN_TYPE] ByteBuffer   ByteBuffer b int newCapacity [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  Simple8BitZipEncoding  encoding  String  UTF8  Map  simpleEncodings  ByteBuffer  b  on  int  c2  newCapacity  char[]  highChars  
[P1_Replace_Type]^long  c2 = b.capacity (  )  * 2;^151^^^^^147^156^int c2 = b.capacity (  )  * 2;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] growBuffer [RETURN_TYPE] ByteBuffer   ByteBuffer b int newCapacity [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  Simple8BitZipEncoding  encoding  String  UTF8  Map  simpleEncodings  ByteBuffer  b  on  int  c2  newCapacity  char[]  highChars  
[P2_Replace_Operator]^int + c2 = b.capacity (  )  * 2;^151^^^^^147^156^int c2 = b.capacity (  )  * 2;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] growBuffer [RETURN_TYPE] ByteBuffer   ByteBuffer b int newCapacity [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  Simple8BitZipEncoding  encoding  String  UTF8  Map  simpleEncodings  ByteBuffer  b  on  int  c2  newCapacity  char[]  highChars  
[P3_Replace_Literal]^int cnewCapacity = b.capacity (  )  * newCapacity;^151^^^^^147^156^int c2 = b.capacity (  )  * 2;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] growBuffer [RETURN_TYPE] ByteBuffer   ByteBuffer b int newCapacity [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  Simple8BitZipEncoding  encoding  String  UTF8  Map  simpleEncodings  ByteBuffer  b  on  int  c2  newCapacity  char[]  highChars  
[P5_Replace_Variable]^int c2 = on.capacity (  )  * 2;^151^^^^^147^156^int c2 = b.capacity (  )  * 2;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] growBuffer [RETURN_TYPE] ByteBuffer   ByteBuffer b int newCapacity [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  Simple8BitZipEncoding  encoding  String  UTF8  Map  simpleEncodings  ByteBuffer  b  on  int  c2  newCapacity  char[]  highChars  
[P7_Replace_Invocation]^int c2 = b.limit (  )  * 2;^151^^^^^147^156^int c2 = b.capacity (  )  * 2;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] growBuffer [RETURN_TYPE] ByteBuffer   ByteBuffer b int newCapacity [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  Simple8BitZipEncoding  encoding  String  UTF8  Map  simpleEncodings  ByteBuffer  b  on  int  c2  newCapacity  char[]  highChars  
[P7_Replace_Invocation]^int c2 = b .limit ( c2 )   * 2;^151^^^^^147^156^int c2 = b.capacity (  )  * 2;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] growBuffer [RETURN_TYPE] ByteBuffer   ByteBuffer b int newCapacity [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  Simple8BitZipEncoding  encoding  String  UTF8  Map  simpleEncodings  ByteBuffer  b  on  int  c2  newCapacity  char[]  highChars  
[P14_Delete_Statement]^^151^152^^^^147^156^int c2 = b.capacity (  )  * 2; ByteBuffer on = ByteBuffer.allocate ( c2 < newCapacity ? newCapacity : c2 ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] growBuffer [RETURN_TYPE] ByteBuffer   ByteBuffer b int newCapacity [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  Simple8BitZipEncoding  encoding  String  UTF8  Map  simpleEncodings  ByteBuffer  b  on  int  c2  newCapacity  char[]  highChars  
[P2_Replace_Operator]^ByteBuffer on = ByteBuffer.allocate ( c2 <= newCapacity ? newCapacity : c2 ) ;^152^^^^^147^156^ByteBuffer on = ByteBuffer.allocate ( c2 < newCapacity ? newCapacity : c2 ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] growBuffer [RETURN_TYPE] ByteBuffer   ByteBuffer b int newCapacity [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  Simple8BitZipEncoding  encoding  String  UTF8  Map  simpleEncodings  ByteBuffer  b  on  int  c2  newCapacity  char[]  highChars  
[P5_Replace_Variable]^ByteBuffer on = ByteBuffer.allocate ( newCapacity < newCapacity ? newCapacity : c2 ) ;^152^^^^^147^156^ByteBuffer on = ByteBuffer.allocate ( c2 < newCapacity ? newCapacity : c2 ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] growBuffer [RETURN_TYPE] ByteBuffer   ByteBuffer b int newCapacity [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  Simple8BitZipEncoding  encoding  String  UTF8  Map  simpleEncodings  ByteBuffer  b  on  int  c2  newCapacity  char[]  highChars  
[P5_Replace_Variable]^ByteBuffer on = ByteBuffer.allocate ( c2 < c2 ? newCapacity : c2 ) ;^152^^^^^147^156^ByteBuffer on = ByteBuffer.allocate ( c2 < newCapacity ? newCapacity : c2 ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] growBuffer [RETURN_TYPE] ByteBuffer   ByteBuffer b int newCapacity [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  Simple8BitZipEncoding  encoding  String  UTF8  Map  simpleEncodings  ByteBuffer  b  on  int  c2  newCapacity  char[]  highChars  
[P5_Replace_Variable]^ByteBuffer on = ByteBuffer.allocate ( newCapacity < c2 ? newCapacity : c2 ) ;^152^^^^^147^156^ByteBuffer on = ByteBuffer.allocate ( c2 < newCapacity ? newCapacity : c2 ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] growBuffer [RETURN_TYPE] ByteBuffer   ByteBuffer b int newCapacity [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  Simple8BitZipEncoding  encoding  String  UTF8  Map  simpleEncodings  ByteBuffer  b  on  int  c2  newCapacity  char[]  highChars  
[P6_Replace_Expression]^ByteBuffer on  =  c2 ) ;^152^^^^^147^156^ByteBuffer on = ByteBuffer.allocate ( c2 < newCapacity ? newCapacity : c2 ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] growBuffer [RETURN_TYPE] ByteBuffer   ByteBuffer b int newCapacity [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  Simple8BitZipEncoding  encoding  String  UTF8  Map  simpleEncodings  ByteBuffer  b  on  int  c2  newCapacity  char[]  highChars  
[P6_Replace_Expression]^ByteBuffer on  =  newCapacity ;^152^^^^^147^156^ByteBuffer on = ByteBuffer.allocate ( c2 < newCapacity ? newCapacity : c2 ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] growBuffer [RETURN_TYPE] ByteBuffer   ByteBuffer b int newCapacity [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  Simple8BitZipEncoding  encoding  String  UTF8  Map  simpleEncodings  ByteBuffer  b  on  int  c2  newCapacity  char[]  highChars  
[P14_Delete_Statement]^^152^^^^^147^156^ByteBuffer on = ByteBuffer.allocate ( c2 < newCapacity ? newCapacity : c2 ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] growBuffer [RETURN_TYPE] ByteBuffer   ByteBuffer b int newCapacity [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  Simple8BitZipEncoding  encoding  String  UTF8  Map  simpleEncodings  ByteBuffer  b  on  int  c2  newCapacity  char[]  highChars  
[P7_Replace_Invocation]^on .put ( b )  ;^154^^^^^147^156^on.put ( b ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] growBuffer [RETURN_TYPE] ByteBuffer   ByteBuffer b int newCapacity [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  Simple8BitZipEncoding  encoding  String  UTF8  Map  simpleEncodings  ByteBuffer  b  on  int  c2  newCapacity  char[]  highChars  
[P14_Delete_Statement]^^154^^^^^147^156^on.put ( b ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] growBuffer [RETURN_TYPE] ByteBuffer   ByteBuffer b int newCapacity [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  Simple8BitZipEncoding  encoding  String  UTF8  Map  simpleEncodings  ByteBuffer  b  on  int  c2  newCapacity  char[]  highChars  
[P5_Replace_Variable]^return b;^155^^^^^147^156^return on;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] growBuffer [RETURN_TYPE] ByteBuffer   ByteBuffer b int newCapacity [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  Simple8BitZipEncoding  encoding  String  UTF8  Map  simpleEncodings  ByteBuffer  b  on  int  c2  newCapacity  char[]  highChars  
[P7_Replace_Invocation]^bb .put ( bb )  ;^178^^^^^176^185^bb.put (  ( byte )  '%' ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] appendSurrogate [RETURN_TYPE] void   ByteBuffer bb char c [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  char  c  Simple8BitZipEncoding  encoding  String  UTF8  Map  simpleEncodings  ByteBuffer  bb  char[]  highChars  
[P14_Delete_Statement]^^178^179^^^^176^185^bb.put (  ( byte )  '%' ) ; bb.put (  ( byte )  'U' ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] appendSurrogate [RETURN_TYPE] void   ByteBuffer bb char c [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  char  c  Simple8BitZipEncoding  encoding  String  UTF8  Map  simpleEncodings  ByteBuffer  bb  char[]  highChars  
[P11_Insert_Donor_Statement]^bb.put (  ( byte )  'U' ) ;bb.put (  ( byte )  '%' ) ;^178^^^^^176^185^bb.put (  ( byte )  '%' ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] appendSurrogate [RETURN_TYPE] void   ByteBuffer bb char c [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  char  c  Simple8BitZipEncoding  encoding  String  UTF8  Map  simpleEncodings  ByteBuffer  bb  char[]  highChars  
[P7_Replace_Invocation]^bb .put ( bb )  ;^179^^^^^176^185^bb.put (  ( byte )  'U' ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] appendSurrogate [RETURN_TYPE] void   ByteBuffer bb char c [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  char  c  Simple8BitZipEncoding  encoding  String  UTF8  Map  simpleEncodings  ByteBuffer  bb  char[]  highChars  
[P14_Delete_Statement]^^179^^^^^176^185^bb.put (  ( byte )  'U' ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] appendSurrogate [RETURN_TYPE] void   ByteBuffer bb char c [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  char  c  Simple8BitZipEncoding  encoding  String  UTF8  Map  simpleEncodings  ByteBuffer  bb  char[]  highChars  
[P11_Insert_Donor_Statement]^bb.put (  ( byte )  '%' ) ;bb.put (  ( byte )  'U' ) ;^179^^^^^176^185^bb.put (  ( byte )  'U' ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] appendSurrogate [RETURN_TYPE] void   ByteBuffer bb char c [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  char  c  Simple8BitZipEncoding  encoding  String  UTF8  Map  simpleEncodings  ByteBuffer  bb  char[]  highChars  
[P2_Replace_Operator]^bb.put ( HEX_DIGITS[ ( c  !=  12 ) &0x0f] ) ;^181^^^^^176^185^bb.put ( HEX_DIGITS[ ( c >> 12 ) &0x0f] ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] appendSurrogate [RETURN_TYPE] void   ByteBuffer bb char c [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  char  c  Simple8BitZipEncoding  encoding  String  UTF8  Map  simpleEncodings  ByteBuffer  bb  char[]  highChars  
[P3_Replace_Literal]^bb.put ( HEX_DIGITS[ ( c >> 14 ) &0x0f] ) ;^181^^^^^176^185^bb.put ( HEX_DIGITS[ ( c >> 12 ) &0x0f] ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] appendSurrogate [RETURN_TYPE] void   ByteBuffer bb char c [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  char  c  Simple8BitZipEncoding  encoding  String  UTF8  Map  simpleEncodings  ByteBuffer  bb  char[]  highChars  
[P5_Replace_Variable]^bb.put ( c[ ( HEX_DIGITS >> 12 ) &0x0f] ) ;^181^^^^^176^185^bb.put ( HEX_DIGITS[ ( c >> 12 ) &0x0f] ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] appendSurrogate [RETURN_TYPE] void   ByteBuffer bb char c [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  char  c  Simple8BitZipEncoding  encoding  String  UTF8  Map  simpleEncodings  ByteBuffer  bb  char[]  highChars  
[P14_Delete_Statement]^^181^182^^^^176^185^bb.put ( HEX_DIGITS[ ( c >> 12 ) &0x0f] ) ; bb.put ( HEX_DIGITS[ ( c >> 8 ) &0x0f] ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] appendSurrogate [RETURN_TYPE] void   ByteBuffer bb char c [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  char  c  Simple8BitZipEncoding  encoding  String  UTF8  Map  simpleEncodings  ByteBuffer  bb  char[]  highChars  
[P11_Insert_Donor_Statement]^bb.put ( HEX_DIGITS[ ( c >> 4 ) &0x0f] ) ;bb.put ( HEX_DIGITS[ ( c >> 12 ) &0x0f] ) ;^181^^^^^176^185^bb.put ( HEX_DIGITS[ ( c >> 12 ) &0x0f] ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] appendSurrogate [RETURN_TYPE] void   ByteBuffer bb char c [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  char  c  Simple8BitZipEncoding  encoding  String  UTF8  Map  simpleEncodings  ByteBuffer  bb  char[]  highChars  
[P11_Insert_Donor_Statement]^bb.put ( HEX_DIGITS[ ( c >> 8 ) &0x0f] ) ;bb.put ( HEX_DIGITS[ ( c >> 12 ) &0x0f] ) ;^181^^^^^176^185^bb.put ( HEX_DIGITS[ ( c >> 12 ) &0x0f] ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] appendSurrogate [RETURN_TYPE] void   ByteBuffer bb char c [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  char  c  Simple8BitZipEncoding  encoding  String  UTF8  Map  simpleEncodings  ByteBuffer  bb  char[]  highChars  
[P11_Insert_Donor_Statement]^bb.put ( HEX_DIGITS[c & 0x0f] ) ;bb.put ( HEX_DIGITS[ ( c >> 12 ) &0x0f] ) ;^181^^^^^176^185^bb.put ( HEX_DIGITS[ ( c >> 12 ) &0x0f] ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] appendSurrogate [RETURN_TYPE] void   ByteBuffer bb char c [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  char  c  Simple8BitZipEncoding  encoding  String  UTF8  Map  simpleEncodings  ByteBuffer  bb  char[]  highChars  
[P2_Replace_Operator]^bb.put ( HEX_DIGITS[ ( c  <=  8 ) &0x0f] ) ;^182^^^^^176^185^bb.put ( HEX_DIGITS[ ( c >> 8 ) &0x0f] ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] appendSurrogate [RETURN_TYPE] void   ByteBuffer bb char c [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  char  c  Simple8BitZipEncoding  encoding  String  UTF8  Map  simpleEncodings  ByteBuffer  bb  char[]  highChars  
[P3_Replace_Literal]^bb.put ( HEX_DIGITS[ ( c >> 9 ) &0x0f] ) ;^182^^^^^176^185^bb.put ( HEX_DIGITS[ ( c >> 8 ) &0x0f] ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] appendSurrogate [RETURN_TYPE] void   ByteBuffer bb char c [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  char  c  Simple8BitZipEncoding  encoding  String  UTF8  Map  simpleEncodings  ByteBuffer  bb  char[]  highChars  
[P14_Delete_Statement]^^182^^^^^176^185^bb.put ( HEX_DIGITS[ ( c >> 8 ) &0x0f] ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] appendSurrogate [RETURN_TYPE] void   ByteBuffer bb char c [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  char  c  Simple8BitZipEncoding  encoding  String  UTF8  Map  simpleEncodings  ByteBuffer  bb  char[]  highChars  
[P11_Insert_Donor_Statement]^bb.put ( HEX_DIGITS[ ( c >> 4 ) &0x0f] ) ;bb.put ( HEX_DIGITS[ ( c >> 8 ) &0x0f] ) ;^182^^^^^176^185^bb.put ( HEX_DIGITS[ ( c >> 8 ) &0x0f] ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] appendSurrogate [RETURN_TYPE] void   ByteBuffer bb char c [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  char  c  Simple8BitZipEncoding  encoding  String  UTF8  Map  simpleEncodings  ByteBuffer  bb  char[]  highChars  
[P11_Insert_Donor_Statement]^bb.put ( HEX_DIGITS[ ( c >> 12 ) &0x0f] ) ;bb.put ( HEX_DIGITS[ ( c >> 8 ) &0x0f] ) ;^182^^^^^176^185^bb.put ( HEX_DIGITS[ ( c >> 8 ) &0x0f] ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] appendSurrogate [RETURN_TYPE] void   ByteBuffer bb char c [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  char  c  Simple8BitZipEncoding  encoding  String  UTF8  Map  simpleEncodings  ByteBuffer  bb  char[]  highChars  
[P11_Insert_Donor_Statement]^bb.put ( HEX_DIGITS[c & 0x0f] ) ;bb.put ( HEX_DIGITS[ ( c >> 8 ) &0x0f] ) ;^182^^^^^176^185^bb.put ( HEX_DIGITS[ ( c >> 8 ) &0x0f] ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] appendSurrogate [RETURN_TYPE] void   ByteBuffer bb char c [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  char  c  Simple8BitZipEncoding  encoding  String  UTF8  Map  simpleEncodings  ByteBuffer  bb  char[]  highChars  
[P2_Replace_Operator]^bb.put ( HEX_DIGITS[ ( c   instanceof   4 ) &0x0f] ) ;^183^^^^^176^185^bb.put ( HEX_DIGITS[ ( c >> 4 ) &0x0f] ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] appendSurrogate [RETURN_TYPE] void   ByteBuffer bb char c [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  char  c  Simple8BitZipEncoding  encoding  String  UTF8  Map  simpleEncodings  ByteBuffer  bb  char[]  highChars  
[P3_Replace_Literal]^bb.put ( HEX_DIGITS[ ( c >> 10 ) &0x0f] ) ;^183^^^^^176^185^bb.put ( HEX_DIGITS[ ( c >> 4 ) &0x0f] ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] appendSurrogate [RETURN_TYPE] void   ByteBuffer bb char c [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  char  c  Simple8BitZipEncoding  encoding  String  UTF8  Map  simpleEncodings  ByteBuffer  bb  char[]  highChars  
[P14_Delete_Statement]^^183^^^^^176^185^bb.put ( HEX_DIGITS[ ( c >> 4 ) &0x0f] ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] appendSurrogate [RETURN_TYPE] void   ByteBuffer bb char c [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  char  c  Simple8BitZipEncoding  encoding  String  UTF8  Map  simpleEncodings  ByteBuffer  bb  char[]  highChars  
[P11_Insert_Donor_Statement]^bb.put ( HEX_DIGITS[ ( c >> 12 ) &0x0f] ) ;bb.put ( HEX_DIGITS[ ( c >> 4 ) &0x0f] ) ;^183^^^^^176^185^bb.put ( HEX_DIGITS[ ( c >> 4 ) &0x0f] ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] appendSurrogate [RETURN_TYPE] void   ByteBuffer bb char c [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  char  c  Simple8BitZipEncoding  encoding  String  UTF8  Map  simpleEncodings  ByteBuffer  bb  char[]  highChars  
[P11_Insert_Donor_Statement]^bb.put ( HEX_DIGITS[ ( c >> 8 ) &0x0f] ) ;bb.put ( HEX_DIGITS[ ( c >> 4 ) &0x0f] ) ;^183^^^^^176^185^bb.put ( HEX_DIGITS[ ( c >> 4 ) &0x0f] ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] appendSurrogate [RETURN_TYPE] void   ByteBuffer bb char c [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  char  c  Simple8BitZipEncoding  encoding  String  UTF8  Map  simpleEncodings  ByteBuffer  bb  char[]  highChars  
[P11_Insert_Donor_Statement]^bb.put ( HEX_DIGITS[c & 0x0f] ) ;bb.put ( HEX_DIGITS[ ( c >> 4 ) &0x0f] ) ;^183^^^^^176^185^bb.put ( HEX_DIGITS[ ( c >> 4 ) &0x0f] ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] appendSurrogate [RETURN_TYPE] void   ByteBuffer bb char c [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  char  c  Simple8BitZipEncoding  encoding  String  UTF8  Map  simpleEncodings  ByteBuffer  bb  char[]  highChars  
[P2_Replace_Operator]^bb.put ( HEX_DIGITS[c  <  0x0f] ) ;^184^^^^^176^185^bb.put ( HEX_DIGITS[c & 0x0f] ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] appendSurrogate [RETURN_TYPE] void   ByteBuffer bb char c [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  char  c  Simple8BitZipEncoding  encoding  String  UTF8  Map  simpleEncodings  ByteBuffer  bb  char[]  highChars  
[P14_Delete_Statement]^^184^^^^^176^185^bb.put ( HEX_DIGITS[c & 0x0f] ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] appendSurrogate [RETURN_TYPE] void   ByteBuffer bb char c [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  char  c  Simple8BitZipEncoding  encoding  String  UTF8  Map  simpleEncodings  ByteBuffer  bb  char[]  highChars  
[P11_Insert_Donor_Statement]^bb.put ( HEX_DIGITS[ ( c >> 4 ) &0x0f] ) ;bb.put ( HEX_DIGITS[c & 0x0f] ) ;^184^^^^^176^185^bb.put ( HEX_DIGITS[c & 0x0f] ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] appendSurrogate [RETURN_TYPE] void   ByteBuffer bb char c [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  char  c  Simple8BitZipEncoding  encoding  String  UTF8  Map  simpleEncodings  ByteBuffer  bb  char[]  highChars  
[P11_Insert_Donor_Statement]^bb.put ( HEX_DIGITS[ ( c >> 12 ) &0x0f] ) ;bb.put ( HEX_DIGITS[c & 0x0f] ) ;^184^^^^^176^185^bb.put ( HEX_DIGITS[c & 0x0f] ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] appendSurrogate [RETURN_TYPE] void   ByteBuffer bb char c [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  char  c  Simple8BitZipEncoding  encoding  String  UTF8  Map  simpleEncodings  ByteBuffer  bb  char[]  highChars  
[P11_Insert_Donor_Statement]^bb.put ( HEX_DIGITS[ ( c >> 8 ) &0x0f] ) ;bb.put ( HEX_DIGITS[c & 0x0f] ) ;^184^^^^^176^185^bb.put ( HEX_DIGITS[c & 0x0f] ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] appendSurrogate [RETURN_TYPE] void   ByteBuffer bb char c [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  char  c  Simple8BitZipEncoding  encoding  String  UTF8  Map  simpleEncodings  ByteBuffer  bb  char[]  highChars  
[P5_Replace_Variable]^if  ( isUTF8 ( UTF8 )  )  {^208^^^^^205^231^if  ( isUTF8 ( name )  )  {^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] getZipEncoding [RETURN_TYPE] ZipEncoding   String name [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  SimpleEncodingHolder  h  UnsupportedCharsetException  e  Charset  cs  Simple8BitZipEncoding  encoding  String  UTF8  name  Map  simpleEncodings  char[]  highChars  
[P7_Replace_Invocation]^if  ( getZipEncoding ( name )  )  {^208^^^^^205^231^if  ( isUTF8 ( name )  )  {^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] getZipEncoding [RETURN_TYPE] ZipEncoding   String name [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  SimpleEncodingHolder  h  UnsupportedCharsetException  e  Charset  cs  Simple8BitZipEncoding  encoding  String  UTF8  name  Map  simpleEncodings  char[]  highChars  
[P8_Replace_Mix]^if  ( getZipEncoding ( UTF8 )  )  {^208^^^^^205^231^if  ( isUTF8 ( name )  )  {^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] getZipEncoding [RETURN_TYPE] ZipEncoding   String name [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  SimpleEncodingHolder  h  UnsupportedCharsetException  e  Charset  cs  Simple8BitZipEncoding  encoding  String  UTF8  name  Map  simpleEncodings  char[]  highChars  
[P15_Unwrap_Block]^return org.apache.commons.compress.archivers.zip.ZipEncodingHelper.UTF8_ZIP_ENCODING;^208^209^210^^^205^231^if  ( isUTF8 ( name )  )  { return UTF8_ZIP_ENCODING; }^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] getZipEncoding [RETURN_TYPE] ZipEncoding   String name [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  SimpleEncodingHolder  h  UnsupportedCharsetException  e  Charset  cs  Simple8BitZipEncoding  encoding  String  UTF8  name  Map  simpleEncodings  char[]  highChars  
[P16_Remove_Block]^^208^209^210^^^205^231^if  ( isUTF8 ( name )  )  { return UTF8_ZIP_ENCODING; }^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] getZipEncoding [RETURN_TYPE] ZipEncoding   String name [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  SimpleEncodingHolder  h  UnsupportedCharsetException  e  Charset  cs  Simple8BitZipEncoding  encoding  String  UTF8  name  Map  simpleEncodings  char[]  highChars  
[P2_Replace_Operator]^if  ( name != null )  {^212^^^^^205^231^if  ( name == null )  {^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] getZipEncoding [RETURN_TYPE] ZipEncoding   String name [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  SimpleEncodingHolder  h  UnsupportedCharsetException  e  Charset  cs  Simple8BitZipEncoding  encoding  String  UTF8  name  Map  simpleEncodings  char[]  highChars  
[P5_Replace_Variable]^if  ( UTF8 == null )  {^212^^^^^205^231^if  ( name == null )  {^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] getZipEncoding [RETURN_TYPE] ZipEncoding   String name [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  SimpleEncodingHolder  h  UnsupportedCharsetException  e  Charset  cs  Simple8BitZipEncoding  encoding  String  UTF8  name  Map  simpleEncodings  char[]  highChars  
[P8_Replace_Mix]^if  ( name == false )  {^212^^^^^205^231^if  ( name == null )  {^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] getZipEncoding [RETURN_TYPE] ZipEncoding   String name [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  SimpleEncodingHolder  h  UnsupportedCharsetException  e  Charset  cs  Simple8BitZipEncoding  encoding  String  UTF8  name  Map  simpleEncodings  char[]  highChars  
[P9_Replace_Statement]^if  ( h!=null )  {^212^^^^^205^231^if  ( name == null )  {^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] getZipEncoding [RETURN_TYPE] ZipEncoding   String name [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  SimpleEncodingHolder  h  UnsupportedCharsetException  e  Charset  cs  Simple8BitZipEncoding  encoding  String  UTF8  name  Map  simpleEncodings  char[]  highChars  
[P9_Replace_Statement]^if  ( encoding == null )  {^212^^^^^205^231^if  ( name == null )  {^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] getZipEncoding [RETURN_TYPE] ZipEncoding   String name [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  SimpleEncodingHolder  h  UnsupportedCharsetException  e  Charset  cs  Simple8BitZipEncoding  encoding  String  UTF8  name  Map  simpleEncodings  char[]  highChars  
[P15_Unwrap_Block]^return new org.apache.commons.compress.archivers.zip.FallbackZipEncoding();^212^213^214^^^205^231^if  ( name == null )  { return new FallbackZipEncoding (  ) ; }^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] getZipEncoding [RETURN_TYPE] ZipEncoding   String name [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  SimpleEncodingHolder  h  UnsupportedCharsetException  e  Charset  cs  Simple8BitZipEncoding  encoding  String  UTF8  name  Map  simpleEncodings  char[]  highChars  
[P16_Remove_Block]^^212^213^214^^^205^231^if  ( name == null )  { return new FallbackZipEncoding (  ) ; }^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] getZipEncoding [RETURN_TYPE] ZipEncoding   String name [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  SimpleEncodingHolder  h  UnsupportedCharsetException  e  Charset  cs  Simple8BitZipEncoding  encoding  String  UTF8  name  Map  simpleEncodings  char[]  highChars  
[P13_Insert_Block]^if  (  ( this.encoding )  == null )  {     this.encoding = new Simple8BitZipEncoding ( this.highChars ) ; }^212^^^^^205^231^[Delete]^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] getZipEncoding [RETURN_TYPE] ZipEncoding   String name [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  SimpleEncodingHolder  h  UnsupportedCharsetException  e  Charset  cs  Simple8BitZipEncoding  encoding  String  UTF8  name  Map  simpleEncodings  char[]  highChars  
[P4_Replace_Constructor]^return return  new Simple8BitZipEncoding ( this.highChars )  ;^213^^^^^205^231^return new FallbackZipEncoding (  ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] getZipEncoding [RETURN_TYPE] ZipEncoding   String name [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  SimpleEncodingHolder  h  UnsupportedCharsetException  e  Charset  cs  Simple8BitZipEncoding  encoding  String  UTF8  name  Map  simpleEncodings  char[]  highChars  
[P8_Replace_Mix]^return  new Simple8BitZipEncoding ( this.highChars )  ;^213^^^^^205^231^return new FallbackZipEncoding (  ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] getZipEncoding [RETURN_TYPE] ZipEncoding   String name [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  SimpleEncodingHolder  h  UnsupportedCharsetException  e  Charset  cs  Simple8BitZipEncoding  encoding  String  UTF8  name  Map  simpleEncodings  char[]  highChars  
[P13_Insert_Block]^if  ( name == null )  {     return new FallbackZipEncoding (  ) ; }^213^^^^^205^231^[Delete]^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] getZipEncoding [RETURN_TYPE] ZipEncoding   String name [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  SimpleEncodingHolder  h  UnsupportedCharsetException  e  Charset  cs  Simple8BitZipEncoding  encoding  String  UTF8  name  Map  simpleEncodings  char[]  highChars  
[P5_Replace_Variable]^SimpleEncodingHolder h = ( SimpleEncodingHolder )  simpleEncodings.get ( UTF8 ) ;^216^217^^^^205^231^SimpleEncodingHolder h = ( SimpleEncodingHolder )  simpleEncodings.get ( name ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] getZipEncoding [RETURN_TYPE] ZipEncoding   String name [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  SimpleEncodingHolder  h  UnsupportedCharsetException  e  Charset  cs  Simple8BitZipEncoding  encoding  String  UTF8  name  Map  simpleEncodings  char[]  highChars  
[P5_Replace_Variable]^SimpleEncodingHolder h = ( SimpleEncodingHolder )  name.get ( simpleEncodings ) ;^216^217^^^^205^231^SimpleEncodingHolder h = ( SimpleEncodingHolder )  simpleEncodings.get ( name ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] getZipEncoding [RETURN_TYPE] ZipEncoding   String name [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  SimpleEncodingHolder  h  UnsupportedCharsetException  e  Charset  cs  Simple8BitZipEncoding  encoding  String  UTF8  name  Map  simpleEncodings  char[]  highChars  
[P5_Replace_Variable]^( SimpleEncodingHolder )  simpleEncodings.get ( UTF8 ) ;^217^^^^^205^231^( SimpleEncodingHolder )  simpleEncodings.get ( name ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] getZipEncoding [RETURN_TYPE] ZipEncoding   String name [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  SimpleEncodingHolder  h  UnsupportedCharsetException  e  Charset  cs  Simple8BitZipEncoding  encoding  String  UTF8  name  Map  simpleEncodings  char[]  highChars  
[P5_Replace_Variable]^( SimpleEncodingHolder )  name.get ( simpleEncodings ) ;^217^^^^^205^231^( SimpleEncodingHolder )  simpleEncodings.get ( name ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] getZipEncoding [RETURN_TYPE] ZipEncoding   String name [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  SimpleEncodingHolder  h  UnsupportedCharsetException  e  Charset  cs  Simple8BitZipEncoding  encoding  String  UTF8  name  Map  simpleEncodings  char[]  highChars  
[P14_Delete_Statement]^^217^^^^^205^231^( SimpleEncodingHolder )  simpleEncodings.get ( name ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] getZipEncoding [RETURN_TYPE] ZipEncoding   String name [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  SimpleEncodingHolder  h  UnsupportedCharsetException  e  Charset  cs  Simple8BitZipEncoding  encoding  String  UTF8  name  Map  simpleEncodings  char[]  highChars  
[P8_Replace_Mix]^if  ( h!=false )  {^219^^^^^205^231^if  ( h!=null )  {^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] getZipEncoding [RETURN_TYPE] ZipEncoding   String name [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  SimpleEncodingHolder  h  UnsupportedCharsetException  e  Charset  cs  Simple8BitZipEncoding  encoding  String  UTF8  name  Map  simpleEncodings  char[]  highChars  
[P9_Replace_Statement]^if  ( name == null )  {^219^^^^^205^231^if  ( h!=null )  {^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] getZipEncoding [RETURN_TYPE] ZipEncoding   String name [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  SimpleEncodingHolder  h  UnsupportedCharsetException  e  Charset  cs  Simple8BitZipEncoding  encoding  String  UTF8  name  Map  simpleEncodings  char[]  highChars  
[P15_Unwrap_Block]^return h.getEncoding();^219^220^221^^^205^231^if  ( h!=null )  { return h.getEncoding (  ) ; }^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] getZipEncoding [RETURN_TYPE] ZipEncoding   String name [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  SimpleEncodingHolder  h  UnsupportedCharsetException  e  Charset  cs  Simple8BitZipEncoding  encoding  String  UTF8  name  Map  simpleEncodings  char[]  highChars  
[P16_Remove_Block]^^219^220^221^^^205^231^if  ( h!=null )  { return h.getEncoding (  ) ; }^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] getZipEncoding [RETURN_TYPE] ZipEncoding   String name [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  SimpleEncodingHolder  h  UnsupportedCharsetException  e  Charset  cs  Simple8BitZipEncoding  encoding  String  UTF8  name  Map  simpleEncodings  char[]  highChars  
[P7_Replace_Invocation]^return h.SimpleEncodingHolder (  ) ;^220^^^^^205^231^return h.getEncoding (  ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] getZipEncoding [RETURN_TYPE] ZipEncoding   String name [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  SimpleEncodingHolder  h  UnsupportedCharsetException  e  Charset  cs  Simple8BitZipEncoding  encoding  String  UTF8  name  Map  simpleEncodings  char[]  highChars  
[P14_Delete_Statement]^^220^^^^^205^231^return h.getEncoding (  ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] getZipEncoding [RETURN_TYPE] ZipEncoding   String name [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  SimpleEncodingHolder  h  UnsupportedCharsetException  e  Charset  cs  Simple8BitZipEncoding  encoding  String  UTF8  name  Map  simpleEncodings  char[]  highChars  
[P7_Replace_Invocation]^return h .SimpleEncodingHolder ( highChars )  ;^220^^^^^205^231^return h.getEncoding (  ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] getZipEncoding [RETURN_TYPE] ZipEncoding   String name [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  SimpleEncodingHolder  h  UnsupportedCharsetException  e  Charset  cs  Simple8BitZipEncoding  encoding  String  UTF8  name  Map  simpleEncodings  char[]  highChars  
[P4_Replace_Constructor]^return return  new Simple8BitZipEncoding ( this.highChars )  ;^226^^^^^205^231^return new NioZipEncoding ( cs ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] getZipEncoding [RETURN_TYPE] ZipEncoding   String name [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  SimpleEncodingHolder  h  UnsupportedCharsetException  e  Charset  cs  Simple8BitZipEncoding  encoding  String  UTF8  name  Map  simpleEncodings  char[]  highChars  
[P8_Replace_Mix]^return  new Simple8BitZipEncoding ( this.highChars )  ;^226^^^^^205^231^return new NioZipEncoding ( cs ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] getZipEncoding [RETURN_TYPE] ZipEncoding   String name [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  SimpleEncodingHolder  h  UnsupportedCharsetException  e  Charset  cs  Simple8BitZipEncoding  encoding  String  UTF8  name  Map  simpleEncodings  char[]  highChars  
[P5_Replace_Variable]^Charset cs = Charset.forName ( UTF8 ) ;^225^^^^^205^231^Charset cs = Charset.forName ( name ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] getZipEncoding [RETURN_TYPE] ZipEncoding   String name [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  SimpleEncodingHolder  h  UnsupportedCharsetException  e  Charset  cs  Simple8BitZipEncoding  encoding  String  UTF8  name  Map  simpleEncodings  char[]  highChars  
[P14_Delete_Statement]^^225^226^^228^229^205^231^Charset cs = Charset.forName ( name ) ; return new NioZipEncoding ( cs ) ; } catch  ( UnsupportedCharsetException e )  { return new FallbackZipEncoding ( name ) ; }^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] getZipEncoding [RETURN_TYPE] ZipEncoding   String name [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  SimpleEncodingHolder  h  UnsupportedCharsetException  e  Charset  cs  Simple8BitZipEncoding  encoding  String  UTF8  name  Map  simpleEncodings  char[]  highChars  
[P4_Replace_Constructor]^return return  new Simple8BitZipEncoding ( this.highChars )  ;^229^^^^^205^231^return new FallbackZipEncoding ( name ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] getZipEncoding [RETURN_TYPE] ZipEncoding   String name [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  SimpleEncodingHolder  h  UnsupportedCharsetException  e  Charset  cs  Simple8BitZipEncoding  encoding  String  UTF8  name  Map  simpleEncodings  char[]  highChars  
[P5_Replace_Variable]^return new FallbackZipEncoding ( UTF8 ) ;^229^^^^^205^231^return new FallbackZipEncoding ( name ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] getZipEncoding [RETURN_TYPE] ZipEncoding   String name [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  SimpleEncodingHolder  h  UnsupportedCharsetException  e  Charset  cs  Simple8BitZipEncoding  encoding  String  UTF8  name  Map  simpleEncodings  char[]  highChars  
[P8_Replace_Mix]^return  new Simple8BitZipEncoding ( this.highChars )  ;^229^^^^^205^231^return new FallbackZipEncoding ( name ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] getZipEncoding [RETURN_TYPE] ZipEncoding   String name [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  SimpleEncodingHolder  h  UnsupportedCharsetException  e  Charset  cs  Simple8BitZipEncoding  encoding  String  UTF8  name  Map  simpleEncodings  char[]  highChars  
[P2_Replace_Operator]^if  ( encoding != null )  {^238^^^^^237^244^if  ( encoding == null )  {^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] isUTF8 [RETURN_TYPE] boolean   String encoding [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  Simple8BitZipEncoding  encoding  String  UTF8  encoding  name  Map  simpleEncodings  char[]  highChars  
[P5_Replace_Variable]^if  ( name == null )  {^238^^^^^237^244^if  ( encoding == null )  {^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] isUTF8 [RETURN_TYPE] boolean   String encoding [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  Simple8BitZipEncoding  encoding  String  UTF8  encoding  name  Map  simpleEncodings  char[]  highChars  
[P8_Replace_Mix]^if  ( encoding == true )  {^238^^^^^237^244^if  ( encoding == null )  {^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] isUTF8 [RETURN_TYPE] boolean   String encoding [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  Simple8BitZipEncoding  encoding  String  UTF8  encoding  name  Map  simpleEncodings  char[]  highChars  
[P9_Replace_Statement]^if  ( this.encoding == null )  {^238^^^^^237^244^if  ( encoding == null )  {^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] isUTF8 [RETURN_TYPE] boolean   String encoding [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  Simple8BitZipEncoding  encoding  String  UTF8  encoding  name  Map  simpleEncodings  char[]  highChars  
[P15_Unwrap_Block]^encoding = java.lang.System.getProperty("file.encoding");^238^239^240^241^^237^244^if  ( encoding == null )  {  encoding = System.getProperty ( "file.encoding" ) ; }^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] isUTF8 [RETURN_TYPE] boolean   String encoding [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  Simple8BitZipEncoding  encoding  String  UTF8  encoding  name  Map  simpleEncodings  char[]  highChars  
[P16_Remove_Block]^^238^239^240^241^^237^244^if  ( encoding == null )  {  encoding = System.getProperty ( "file.encoding" ) ; }^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] isUTF8 [RETURN_TYPE] boolean   String encoding [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  Simple8BitZipEncoding  encoding  String  UTF8  encoding  name  Map  simpleEncodings  char[]  highChars  
[P3_Replace_Literal]^encoding = System.getProperty ( "e.encodile.encoding" ) ;^240^^^^^237^244^encoding = System.getProperty ( "file.encoding" ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] isUTF8 [RETURN_TYPE] boolean   String encoding [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  Simple8BitZipEncoding  encoding  String  UTF8  encoding  name  Map  simpleEncodings  char[]  highChars  
[P8_Replace_Mix]^encoding ;^240^^^^^237^244^encoding = System.getProperty ( "file.encoding" ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] isUTF8 [RETURN_TYPE] boolean   String encoding [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  Simple8BitZipEncoding  encoding  String  UTF8  encoding  name  Map  simpleEncodings  char[]  highChars  
[P3_Replace_Literal]^encoding = System.getProperty ( "file.encod" ) ;^240^^^^^237^244^encoding = System.getProperty ( "file.encoding" ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] isUTF8 [RETURN_TYPE] boolean   String encoding [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  Simple8BitZipEncoding  encoding  String  UTF8  encoding  name  Map  simpleEncodings  char[]  highChars  
[P14_Delete_Statement]^^240^^^^^237^244^encoding = System.getProperty ( "file.encoding" ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] isUTF8 [RETURN_TYPE] boolean   String encoding [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  Simple8BitZipEncoding  encoding  String  UTF8  encoding  name  Map  simpleEncodings  char[]  highChars  
[P3_Replace_Literal]^encoding = System.getProperty ( "file.encodingfi" ) ;^240^^^^^237^244^encoding = System.getProperty ( "file.encoding" ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] isUTF8 [RETURN_TYPE] boolean   String encoding [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  Simple8BitZipEncoding  encoding  String  UTF8  encoding  name  Map  simpleEncodings  char[]  highChars  
[P8_Replace_Mix]^encoding  =  encoding ;^240^^^^^237^244^encoding = System.getProperty ( "file.encoding" ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] isUTF8 [RETURN_TYPE] boolean   String encoding [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  Simple8BitZipEncoding  encoding  String  UTF8  encoding  name  Map  simpleEncodings  char[]  highChars  
[P3_Replace_Literal]^encoding = System.getProperty ( "file.encodin" ) ;^240^^^^^237^244^encoding = System.getProperty ( "file.encoding" ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] isUTF8 [RETURN_TYPE] boolean   String encoding [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  Simple8BitZipEncoding  encoding  String  UTF8  encoding  name  Map  simpleEncodings  char[]  highChars  
[P2_Replace_Operator]^return UTF8.equalsIgnoreCase ( encoding ) && "utf-8".equalsIgnoreCase ( encoding ) ;^242^243^^^^237^244^return UTF8.equalsIgnoreCase ( encoding ) || "utf-8".equalsIgnoreCase ( encoding ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] isUTF8 [RETURN_TYPE] boolean   String encoding [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  Simple8BitZipEncoding  encoding  String  UTF8  encoding  name  Map  simpleEncodings  char[]  highChars  
[P3_Replace_Literal]^return UTF8.equalsIgnoreCase ( encoding ) || "utf-8utf".equalsIgnoreCase ( encoding ) ;^242^243^^^^237^244^return UTF8.equalsIgnoreCase ( encoding ) || "utf-8".equalsIgnoreCase ( encoding ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] isUTF8 [RETURN_TYPE] boolean   String encoding [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  Simple8BitZipEncoding  encoding  String  UTF8  encoding  name  Map  simpleEncodings  char[]  highChars  
[P5_Replace_Variable]^return UTF8.equalsIgnoreCase ( name ) || "utf-8".equalsIgnoreCase ( encoding ) ;^242^243^^^^237^244^return UTF8.equalsIgnoreCase ( encoding ) || "utf-8".equalsIgnoreCase ( encoding ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] isUTF8 [RETURN_TYPE] boolean   String encoding [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  Simple8BitZipEncoding  encoding  String  UTF8  encoding  name  Map  simpleEncodings  char[]  highChars  
[P5_Replace_Variable]^return name.equalsIgnoreCase ( encoding ) || "utf-8".equalsIgnoreCase ( encoding ) ;^242^243^^^^237^244^return UTF8.equalsIgnoreCase ( encoding ) || "utf-8".equalsIgnoreCase ( encoding ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] isUTF8 [RETURN_TYPE] boolean   String encoding [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  Simple8BitZipEncoding  encoding  String  UTF8  encoding  name  Map  simpleEncodings  char[]  highChars  
[P5_Replace_Variable]^return encoding.equalsIgnoreCase ( UTF8 ) || "utf-8".equalsIgnoreCase ( encoding ) ;^242^243^^^^237^244^return UTF8.equalsIgnoreCase ( encoding ) || "utf-8".equalsIgnoreCase ( encoding ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] isUTF8 [RETURN_TYPE] boolean   String encoding [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  Simple8BitZipEncoding  encoding  String  UTF8  encoding  name  Map  simpleEncodings  char[]  highChars  
[P8_Replace_Mix]^return   "utf-8".equalsIgnoreCase ( encoding ) ;^242^243^^^^237^244^return UTF8.equalsIgnoreCase ( encoding ) || "utf-8".equalsIgnoreCase ( encoding ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] isUTF8 [RETURN_TYPE] boolean   String encoding [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  Simple8BitZipEncoding  encoding  String  UTF8  encoding  name  Map  simpleEncodings  char[]  highChars  
[P14_Delete_Statement]^^242^243^^^^237^244^return UTF8.equalsIgnoreCase ( encoding ) || "utf-8".equalsIgnoreCase ( encoding ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] isUTF8 [RETURN_TYPE] boolean   String encoding [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  Simple8BitZipEncoding  encoding  String  UTF8  encoding  name  Map  simpleEncodings  char[]  highChars  
[P3_Replace_Literal]^|| "utf-8u".equalsIgnoreCase ( encoding ) ;^243^^^^^237^244^|| "utf-8".equalsIgnoreCase ( encoding ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] isUTF8 [RETURN_TYPE] boolean   String encoding [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  Simple8BitZipEncoding  encoding  String  UTF8  encoding  name  Map  simpleEncodings  char[]  highChars  
[P14_Delete_Statement]^^243^^^^^237^244^|| "utf-8".equalsIgnoreCase ( encoding ) ;^[CLASS] ZipEncodingHelper SimpleEncodingHolder  [METHOD] isUTF8 [RETURN_TYPE] boolean   String encoding [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  Simple8BitZipEncoding  encoding  String  UTF8  encoding  name  Map  simpleEncodings  char[]  highChars  
[P8_Replace_Mix]^private  char [] highChars;^39^^^^^34^44^private final char [] highChars;^[CLASS] SimpleEncodingHolder  [METHOD] isUTF8 [RETURN_TYPE] boolean   String encoding [VARIABLES] byte[]  HEX_DIGITS  boolean  ZipEncoding  UTF8_ZIP_ENCODING  Simple8BitZipEncoding  encoding  String  UTF8  encoding  name  Map  simpleEncodings  char[]  highChars  
[P8_Replace_Mix]^this.highChars =  null;^50^^^^^49^51^this.highChars = highChars;^[CLASS] SimpleEncodingHolder  [METHOD] <init> [RETURN_TYPE] ZipEncodingHelper$SimpleEncodingHolder(char[])   char[] highChars [VARIABLES] Simple8BitZipEncoding  encoding  char[]  highChars  boolean  
[P2_Replace_Operator]^if  ( this.encoding != null )  {^58^^^^^57^62^if  ( this.encoding == null )  {^[CLASS] SimpleEncodingHolder  [METHOD] getEncoding [RETURN_TYPE] Simple8BitZipEncoding   [VARIABLES] Simple8BitZipEncoding  encoding  char[]  highChars  boolean  
[P5_Replace_Variable]^if  ( encoding == null )  {^58^^^^^57^62^if  ( this.encoding == null )  {^[CLASS] SimpleEncodingHolder  [METHOD] getEncoding [RETURN_TYPE] Simple8BitZipEncoding   [VARIABLES] Simple8BitZipEncoding  encoding  char[]  highChars  boolean  
[P8_Replace_Mix]^if  ( this.encoding == true )  {^58^^^^^57^62^if  ( this.encoding == null )  {^[CLASS] SimpleEncodingHolder  [METHOD] getEncoding [RETURN_TYPE] Simple8BitZipEncoding   [VARIABLES] Simple8BitZipEncoding  encoding  char[]  highChars  boolean  
[P15_Unwrap_Block]^this.encoding = new org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding(this.highChars);^58^59^60^^^57^62^if  ( this.encoding == null )  { this.encoding = new Simple8BitZipEncoding ( this.highChars ) ; }^[CLASS] SimpleEncodingHolder  [METHOD] getEncoding [RETURN_TYPE] Simple8BitZipEncoding   [VARIABLES] Simple8BitZipEncoding  encoding  char[]  highChars  boolean  
[P16_Remove_Block]^^58^59^60^^^57^62^if  ( this.encoding == null )  { this.encoding = new Simple8BitZipEncoding ( this.highChars ) ; }^[CLASS] SimpleEncodingHolder  [METHOD] getEncoding [RETURN_TYPE] Simple8BitZipEncoding   [VARIABLES] Simple8BitZipEncoding  encoding  char[]  highChars  boolean  
[P5_Replace_Variable]^this.encoding = new Simple8BitZipEncoding ( highChars ) ;^59^^^^^57^62^this.encoding = new Simple8BitZipEncoding ( this.highChars ) ;^[CLASS] SimpleEncodingHolder  [METHOD] getEncoding [RETURN_TYPE] Simple8BitZipEncoding   [VARIABLES] Simple8BitZipEncoding  encoding  char[]  highChars  boolean  
[P8_Replace_Mix]^this.encoding  = null ;^59^^^^^57^62^this.encoding = new Simple8BitZipEncoding ( this.highChars ) ;^[CLASS] SimpleEncodingHolder  [METHOD] getEncoding [RETURN_TYPE] Simple8BitZipEncoding   [VARIABLES] Simple8BitZipEncoding  encoding  char[]  highChars  boolean  
[P13_Insert_Block]^if  (  ( this.encoding )  == null )  {     this.encoding = new Simple8BitZipEncoding ( this.highChars ) ; }^59^^^^^57^62^[Delete]^[CLASS] SimpleEncodingHolder  [METHOD] getEncoding [RETURN_TYPE] Simple8BitZipEncoding   [VARIABLES] Simple8BitZipEncoding  encoding  char[]  highChars  boolean  
[P5_Replace_Variable]^return encoding;^61^^^^^57^62^return this.encoding;^[CLASS] SimpleEncodingHolder  [METHOD] getEncoding [RETURN_TYPE] Simple8BitZipEncoding   [VARIABLES] Simple8BitZipEncoding  encoding  char[]  highChars  boolean  
