[P1_Replace_Type]^private final  LinkedList  changes = Collections .synchronized LinkedList  ( new LinkedHash LinkedList  (  )  ) ;^35^36^^^^35^36^private final Set changes = Collections .synchronizedSet ( new LinkedHashSet (  )  ) ;^[CLASS] ChangeSet   [VARIABLES] 
[P8_Replace_Mix]^private final  List  changes = Collections .synchronized List  ( new LinkedHash List  (  )  ) ;^35^36^^^^35^36^private final Set changes = Collections .synchronizedSet ( new LinkedHashSet (  )  ) ;^[CLASS] ChangeSet   [VARIABLES] 
[P4_Replace_Constructor]^addDeletion ( addDeletion (  new Change ( pEntry, pInput )   ) ;^39^^^^^38^40^addDeletion ( new Change ( pFilename )  ) ;^[CLASS] ChangeSet  [METHOD] delete [RETURN_TYPE] void   String pFilename [VARIABLES] Set  changes  String  pFilename  boolean  
[P7_Replace_Invocation]^isDeletedLater ( new Change ( pFilename )  ) ;^39^^^^^38^40^addDeletion ( new Change ( pFilename )  ) ;^[CLASS] ChangeSet  [METHOD] delete [RETURN_TYPE] void   String pFilename [VARIABLES] Set  changes  String  pFilename  boolean  
[P14_Delete_Statement]^^39^^^^^38^40^addDeletion ( new Change ( pFilename )  ) ;^[CLASS] ChangeSet  [METHOD] delete [RETURN_TYPE] void   String pFilename [VARIABLES] Set  changes  String  pFilename  boolean  
[P4_Replace_Constructor]^changes.add ( new Change (  pInput )  ) ;^47^^^^^46^48^changes.add ( new Change ( pEntry, pInput )  ) ;^[CLASS] ChangeSet  [METHOD] add [RETURN_TYPE] void   ArchiveEntry pEntry InputStream pInput [VARIABLES] ArchiveEntry  pEntry  Set  changes  boolean  InputStream  pInput  
[P4_Replace_Constructor]^changes.add ( new Change ( pEntry )  ) ;^47^^^^^46^48^changes.add ( new Change ( pEntry, pInput )  ) ;^[CLASS] ChangeSet  [METHOD] add [RETURN_TYPE] void   ArchiveEntry pEntry InputStream pInput [VARIABLES] ArchiveEntry  pEntry  Set  changes  boolean  InputStream  pInput  
[P5_Replace_Variable]^changes.add ( new Change ( pInput, pEntry )  ) ;^47^^^^^46^48^changes.add ( new Change ( pEntry, pInput )  ) ;^[CLASS] ChangeSet  [METHOD] add [RETURN_TYPE] void   ArchiveEntry pEntry InputStream pInput [VARIABLES] ArchiveEntry  pEntry  Set  changes  boolean  InputStream  pInput  
[P14_Delete_Statement]^^47^^^^^46^48^changes.add ( new Change ( pEntry, pInput )  ) ;^[CLASS] ChangeSet  [METHOD] add [RETURN_TYPE] void   ArchiveEntry pEntry InputStream pInput [VARIABLES] ArchiveEntry  pEntry  Set  changes  boolean  InputStream  pInput  
[P11_Insert_Donor_Statement]^Change change =  ( Change )  it.next (  ) ;changes.add ( new Change ( pEntry, pInput )  ) ;^47^^^^^46^48^changes.add ( new Change ( pEntry, pInput )  ) ;^[CLASS] ChangeSet  [METHOD] add [RETURN_TYPE] void   ArchiveEntry pEntry InputStream pInput [VARIABLES] ArchiveEntry  pEntry  Set  changes  boolean  InputStream  pInput  
[P2_Replace_Operator]^while  (  ( entry = in.getNextEntry (  )  )  == null )  {^57^^^^^42^72^while  (  ( entry = in.getNextEntry (  )  )  != null )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P5_Replace_Variable]^while  (  ( in = entry.getNextEntry (  )  )  != null )  {^57^^^^^42^72^while  (  ( entry = in.getNextEntry (  )  )  != null )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P2_Replace_Operator]^if  ( change.type (  )  != Change.TYPE_ADD )  {^63^^^^^48^78^if  ( change.type (  )  == Change.TYPE_ADD )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P7_Replace_Invocation]^if  ( change.Change (  )  == Change.TYPE_ADD )  {^63^^^^^48^78^if  ( change.type (  )  == Change.TYPE_ADD )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P9_Replace_Statement]^if  ( change.type (  )  == Change.TYPE_DELETE )  {^63^^^^^48^78^if  ( change.type (  )  == Change.TYPE_ADD )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P15_Unwrap_Block]^org.apache.commons.compress.changes.ChangeSet.copyStream(change.getInput(), out, change.getEntry()); it.remove();^63^64^65^66^^48^78^if  ( change.type (  )  == Change.TYPE_ADD )  { copyStream ( change.getInput (  ) , out, change.getEntry (  )  ) ; it.remove (  ) ; }^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P16_Remove_Block]^^63^64^65^66^^48^78^if  ( change.type (  )  == Change.TYPE_ADD )  { copyStream ( change.getInput (  ) , out, change.getEntry (  )  ) ; it.remove (  ) ; }^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P13_Insert_Block]^if  ( copy )  {     if  ( ! ( isDeletedLater ( entry )  )  )  {         copyStream ( in, out, entry ) ;     } }^63^^^^^48^78^[Delete]^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P13_Insert_Block]^if  ( ! ( isDeletedLater ( entry )  )  )  {     copyStream ( in, out, entry ) ; }^63^^^^^48^78^[Delete]^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P5_Replace_Variable]^copyStream ( change.getInput (  ) , out.getEntry (  )  ) ;^64^^^^^49^79^copyStream ( change.getInput (  ) , out, change.getEntry (  )  ) ;^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P5_Replace_Variable]^copyStream ( change.getInput (  ) ,  change.getEntry (  )  ) ;^64^^^^^49^79^copyStream ( change.getInput (  ) , out, change.getEntry (  )  ) ;^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P5_Replace_Variable]^copyStream ( out.getInput (  ) , change, change.getEntry (  )  ) ;^64^^^^^49^79^copyStream ( change.getInput (  ) , out, change.getEntry (  )  ) ;^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P7_Replace_Invocation]^copyStream ( change.Change (  ) , out, change.getEntry (  )  ) ;^64^^^^^49^79^copyStream ( change.getInput (  ) , out, change.getEntry (  )  ) ;^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P7_Replace_Invocation]^copyStream ( change.getInput (  ) , out, change.Change (  )  ) ;^64^^^^^49^79^copyStream ( change.getInput (  ) , out, change.getEntry (  )  ) ;^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P7_Replace_Invocation]^copyStream ( change.getInput (  ) , out, change .getInput (  )   ) ;^64^^^^^49^79^copyStream ( change.getInput (  ) , out, change.getEntry (  )  ) ;^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P14_Delete_Statement]^^64^^^^^49^79^copyStream ( change.getInput (  ) , out, change.getEntry (  )  ) ;^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P13_Insert_Block]^if  (  ( change.type (  )  )  ==  ( Change.TYPE_ADD )  )  {     copyStream ( change.getInput (  ) , out, change.getEntry (  )  ) ;     it.remove (  ) ; }^64^^^^^49^79^[Delete]^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P7_Replace_Invocation]^copyStream ( change .getEntry (  )  , out, change.getEntry (  )  ) ;^64^^^^^49^79^copyStream ( change.getInput (  ) , out, change.getEntry (  )  ) ;^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P14_Delete_Statement]^^64^65^^^^49^79^copyStream ( change.getInput (  ) , out, change.getEntry (  )  ) ; it.remove (  ) ;^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P14_Delete_Statement]^^65^^^^^50^80^it.remove (  ) ;^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P2_Replace_Operator]^if  ( change.type (  )  == Change.TYPE_DELETE || entry.getName (  )  != null )  {^68^69^^^^53^83^if  ( change.type (  )  == Change.TYPE_DELETE && entry.getName (  )  != null )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P2_Replace_Operator]^if  ( change.type (  )  != Change.TYPE_DELETE && entry.getName (  )  != null )  {^68^69^^^^53^83^if  ( change.type (  )  == Change.TYPE_DELETE && entry.getName (  )  != null )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P2_Replace_Operator]^if  ( change.type (  )  == Change.TYPE_DELETE && entry.getName (  )  == null )  {^68^69^^^^53^83^if  ( change.type (  )  == Change.TYPE_DELETE && entry.getName (  )  != null )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P5_Replace_Variable]^if  ( entry.type (  )  == Change.TYPE_DELETE && change.getName (  )  != null )  {^68^69^^^^53^83^if  ( change.type (  )  == Change.TYPE_DELETE && entry.getName (  )  != null )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P6_Replace_Expression]^if  ( change.type (  )  == Change.TYPE_DELETE ) {^68^69^^^^53^83^if  ( change.type (  )  == Change.TYPE_DELETE && entry.getName (  )  != null )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P6_Replace_Expression]^if  (  entry.getName (  )  != null )  {^68^69^^^^53^83^if  ( change.type (  )  == Change.TYPE_DELETE && entry.getName (  )  != null )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P6_Replace_Expression]^if  ( change.targetFile (  )  + "/.*" )  {^68^69^^^^53^83^if  ( change.type (  )  == Change.TYPE_DELETE && entry.getName (  )  != null )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P7_Replace_Invocation]^if  ( change.Change (  )  == Change.TYPE_DELETE && entry.getName (  )  != null )  {^68^69^^^^53^83^if  ( change.type (  )  == Change.TYPE_DELETE && entry.getName (  )  != null )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P8_Replace_Mix]^if  (  entry.getName (  )  != this )  {^68^69^^^^53^83^if  ( change.type (  )  == Change.TYPE_DELETE && entry.getName (  )  != null )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P9_Replace_Statement]^if  ( change.type (  )  == Change.TYPE_ADD && change.getEntry (  )  != null )  {^68^69^^^^53^83^if  ( change.type (  )  == Change.TYPE_DELETE && entry.getName (  )  != null )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P7_Replace_Invocation]^if  ( entry.getName (  ) .equals ( change.Change (  )  )  )  {^70^^^^^68^79^if  ( entry.getName (  ) .equals ( change.targetFile (  )  )  )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P13_Insert_Block]^if  (  (  ( change.type (  )  )  ==  ( Change.TYPE_DELETE )  )  &&  (  ( entry.getName (  )  )  != null )  )  {     if  ( entry.getName (  ) .equals ( change.targetFile (  )  )  )  {         copy = false;         it.remove (  ) ;         break;     }else         if  ( entry.getName (  ) .matches (  (  ( change.targetFile (  )  )  + "/.*" )  )  )  {             copy = false;             break;         }      }^70^^^^^68^79^[Delete]^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P2_Replace_Operator]^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )   <=  "/.*" )  )  {^74^75^^^^68^79^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )  + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P5_Replace_Variable]^} else if  ( change.getName (  ) .matches ( entry.targetFile (  )  + "/.*" )  )  {^74^75^^^^68^79^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )  + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P6_Replace_Expression]^} else {^74^75^^^^68^79^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )  + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P7_Replace_Invocation]^} else if  ( entry.getName (  ) .matches ( change.Change (  )  + "/.*" )  )  {^74^75^^^^68^79^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )  + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P8_Replace_Mix]^}  if  ( entry.getName (  ) .matches ( change.Change (  )  + "/.*" )  )  {^74^75^^^^68^79^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )  + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P15_Unwrap_Block]^copy = false; break;^74^75^76^77^78^68^79^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )  + "/.*" )  )  { copy = false; break; }^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P16_Remove_Block]^^74^75^76^77^78^68^79^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )  + "/.*" )  )  { copy = false; break; }^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P3_Replace_Literal]^copy = true;^76^^^^^68^79^copy = false;^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P2_Replace_Operator]^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )   !=  "/.*" )  )  {^74^75^^^^68^79^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )  + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P3_Replace_Literal]^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )  + "/.*/" )  )  {^74^75^^^^68^79^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )  + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P7_Replace_Invocation]^} else if  ( entry.getName (  )  .matches (  )   )  {^74^75^^^^68^79^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )  + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P13_Insert_Block]^if  ( entry.getName (  ) .matches (  (  ( change.targetFile (  )  )  + "/.*" )  )  )  {     copy = false;     break; }^74^^^^^68^79^[Delete]^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P7_Replace_Invocation]^change.Change (  )  + "/.*" )  )  {^75^^^^^68^79^change.targetFile (  )  + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P14_Delete_Statement]^^75^76^^^^68^79^change.targetFile (  )  + "/.*" )  )  { copy = false;^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P3_Replace_Literal]^copy = true;^71^^^^^68^79^copy = false;^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P14_Delete_Statement]^^72^73^^^^68^79^it.remove (  ) ; break;^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P2_Replace_Operator]^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )   &&  "/.*" )  )  {^74^75^^^^68^79^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )  + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P5_Replace_Variable]^if  ( change.getName (  ) .equals ( entry.targetFile (  )  )  )  {^70^^^^^68^79^if  ( entry.getName (  ) .equals ( change.targetFile (  )  )  )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P7_Replace_Invocation]^it .next (  )  ;^72^^^^^68^79^it.remove (  ) ;^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P14_Delete_Statement]^^72^^^^^68^79^it.remove (  ) ;^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P2_Replace_Operator]^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )   |  "/.*" )  )  {^74^75^^^^68^79^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )  + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P3_Replace_Literal]^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )  + "/.*/." )  )  {^74^75^^^^68^79^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )  + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P5_Replace_Variable]^if  ( change.getName (  ) .equals ( entry.targetFile (  )  )  )  {^70^^^^^55^85^if  ( entry.getName (  ) .equals ( change.targetFile (  )  )  )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P7_Replace_Invocation]^if  ( entry.getName (  ) .equals ( change.Change (  )  )  )  {^70^^^^^55^85^if  ( entry.getName (  ) .equals ( change.targetFile (  )  )  )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P13_Insert_Block]^if  (  (  ( change.type (  )  )  ==  ( Change.TYPE_DELETE )  )  &&  (  ( entry.getName (  )  )  != null )  )  {     if  ( entry.getName (  ) .equals ( change.targetFile (  )  )  )  {         copy = false;         it.remove (  ) ;         break;     }else         if  ( entry.getName (  ) .matches (  (  ( change.targetFile (  )  )  + "/.*" )  )  )  {             copy = false;             break;         }      }^70^^^^^55^85^[Delete]^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P2_Replace_Operator]^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )   <  "/.*" )  )  {^74^75^^^^59^89^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )  + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P5_Replace_Variable]^} else if  ( change.getName (  ) .matches ( entry.targetFile (  )  + "/.*" )  )  {^74^75^^^^59^89^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )  + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P6_Replace_Expression]^} else {^74^75^^^^59^89^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )  + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P7_Replace_Invocation]^} else if  ( entry.getName (  ) .matches ( change.Change (  )  + "/.*" )  )  {^74^75^^^^59^89^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )  + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P15_Unwrap_Block]^copy = false; break;^74^75^76^77^78^59^89^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )  + "/.*" )  )  { copy = false; break; }^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P16_Remove_Block]^^74^75^76^77^78^59^89^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )  + "/.*" )  )  { copy = false; break; }^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P3_Replace_Literal]^copy = true;^76^^^^^74^78^copy = false;^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P3_Replace_Literal]^copy = true;^76^^^^^61^91^copy = false;^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P2_Replace_Operator]^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )   >>  "/.*" )  )  {^74^75^^^^59^89^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )  + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P3_Replace_Literal]^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )  + ".*" )  )  {^74^75^^^^59^89^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )  + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P7_Replace_Invocation]^} else if  ( entry.getName (  )  .matches (  )   )  {^74^75^^^^59^89^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )  + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P13_Insert_Block]^if  ( entry.getName (  ) .matches (  (  ( change.targetFile (  )  )  + "/.*" )  )  )  {     copy = false;     break; }^74^^^^^59^89^[Delete]^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P7_Replace_Invocation]^change.Change (  )  + "/.*" )  )  {^75^^^^^60^90^change.targetFile (  )  + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P14_Delete_Statement]^^75^76^^^^60^90^change.targetFile (  )  + "/.*" )  )  { copy = false;^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P3_Replace_Literal]^copy = true;^71^^^^^56^86^copy = false;^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P14_Delete_Statement]^^72^^^^^57^87^it.remove (  ) ;^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P2_Replace_Operator]^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )    instanceof   "/.*" )  )  {^74^75^^^^59^89^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )  + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P15_Unwrap_Block]^if (!(isDeletedLater(entry))) {    org.apache.commons.compress.changes.ChangeSet.copyStream(in, out, entry);};^82^83^84^85^^67^97^if  ( copy )  { if  ( !isDeletedLater ( entry )  )  { copyStream ( in, out, entry ) ; }^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P16_Remove_Block]^^82^83^84^85^^67^97^if  ( copy )  { if  ( !isDeletedLater ( entry )  )  { copyStream ( in, out, entry ) ; }^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P7_Replace_Invocation]^if  ( !addDeletion ( entry )  )  {^83^^^^^68^98^if  ( !isDeletedLater ( entry )  )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P15_Unwrap_Block]^org.apache.commons.compress.changes.ChangeSet.copyStream(in, out, entry);^83^84^85^^^68^98^if  ( !isDeletedLater ( entry )  )  { copyStream ( in, out, entry ) ; }^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P16_Remove_Block]^^83^84^85^^^68^98^if  ( !isDeletedLater ( entry )  )  { copyStream ( in, out, entry ) ; }^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P13_Insert_Block]^if  ( copy )  {     if  ( ! ( isDeletedLater ( entry )  )  )  {         copyStream ( in, out, entry ) ;     } }^83^^^^^68^98^[Delete]^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P13_Insert_Block]^if  (  ( change.type (  )  )  ==  ( Change.TYPE_ADD )  )  {     copyStream ( change.getInput (  ) , out, change.getEntry (  )  ) ;     it.remove (  ) ; }^83^^^^^68^98^[Delete]^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P5_Replace_Variable]^copyStream (  out, entry ) ;^84^^^^^69^99^copyStream ( in, out, entry ) ;^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P5_Replace_Variable]^copyStream ( in,  entry ) ;^84^^^^^69^99^copyStream ( in, out, entry ) ;^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P5_Replace_Variable]^copyStream ( in, out ) ;^84^^^^^69^99^copyStream ( in, out, entry ) ;^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P5_Replace_Variable]^copyStream ( entry, out, in ) ;^84^^^^^69^99^copyStream ( in, out, entry ) ;^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P5_Replace_Variable]^copyStream ( out, in, entry ) ;^84^^^^^69^99^copyStream ( in, out, entry ) ;^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P5_Replace_Variable]^copyStream ( in, entry, out ) ;^84^^^^^69^99^copyStream ( in, out, entry ) ;^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P14_Delete_Statement]^^84^^^^^69^99^copyStream ( in, out, entry ) ;^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P13_Insert_Block]^if  ( copy )  {     if  ( ! ( isDeletedLater ( entry )  )  )  {         copyStream ( in, out, entry ) ;     } }^84^^^^^69^99^[Delete]^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P13_Insert_Block]^if  ( ! ( isDeletedLater ( entry )  )  )  {     copyStream ( in, out, entry ) ; }^84^^^^^69^99^[Delete]^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P5_Replace_Variable]^for  ( Iterator changes = it.iterator (  ) ; it.hasNext (  ) ; )  {^60^^^^^45^75^for  ( Iterator it = changes.iterator (  ) ; it.hasNext (  ) ; )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P5_Replace_Variable]^for  ( Iterator it = changess.iterator (  ) ; it.hasNext (  ) ; )  {^60^^^^^45^75^for  ( Iterator it = changes.iterator (  ) ; it.hasNext (  ) ; )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P7_Replace_Invocation]^for  ( Iterator it = changes.isEmpty (  ) ; it.hasNext (  ) ; )  {^60^^^^^45^75^for  ( Iterator it = changes.iterator (  ) ; it.hasNext (  ) ; )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P7_Replace_Invocation]^for  ( Iterator it = changes.iterator (  ) ; it .next (  )  ; )  {^60^^^^^45^75^for  ( Iterator it = changes.iterator (  ) ; it.hasNext (  ) ; )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P5_Replace_Variable]^if  ( change.type (  )  == 2 )  {^63^^^^^48^78^if  ( change.type (  )  == Change.TYPE_ADD )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P5_Replace_Variable]^if  ( Change.TYPE_ADD.type (  )  == change )  {^63^^^^^48^78^if  ( change.type (  )  == Change.TYPE_ADD )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P7_Replace_Invocation]^if  ( change .getInput (  )   == Change.TYPE_ADD )  {^63^^^^^48^78^if  ( change.type (  )  == Change.TYPE_ADD )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P8_Replace_Mix]^it .next (  )  ;^65^^^^^50^80^it.remove (  ) ;^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P5_Replace_Variable]^if  ( Change.TYPE_DELETE.type (  )  == change && entry.getName (  )  != null )  {^68^69^^^^53^83^if  ( change.type (  )  == Change.TYPE_DELETE && entry.getName (  )  != null )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P8_Replace_Mix]^if  ( change.type (  )  == Change.TYPE_DELETE && entry.getName (  )  != this )  {^68^69^^^^53^83^if  ( change.type (  )  == Change.TYPE_DELETE && entry.getName (  )  != null )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P2_Replace_Operator]^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )   >=  "/.*" )  )  {^74^75^^^^68^79^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )  + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P2_Replace_Operator]^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )   >  "/.*" )  )  {^74^75^^^^68^79^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )  + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P3_Replace_Literal]^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )  + "/..*" )  )  {^74^75^^^^68^79^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )  + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P7_Replace_Invocation]^} else if  ( entry.getName (  ) .matches ( change .Change ( null )   + "/.*" )  )  {^74^75^^^^68^79^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )  + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P2_Replace_Operator]^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )    instanceof   "/.*" )  )  {^74^75^^^^68^79^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )  + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P3_Replace_Literal]^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )  + "" )  )  {^74^75^^^^68^79^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )  + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P2_Replace_Operator]^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )   &  "/.*" )  )  {^74^75^^^^68^79^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )  + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P2_Replace_Operator]^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )   >=  "/.*" )  )  {^74^75^^^^59^89^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )  + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P3_Replace_Literal]^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )  + "" )  )  {^74^75^^^^59^89^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )  + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P7_Replace_Invocation]^it .next (  )  ;^72^^^^^57^87^it.remove (  ) ;^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P2_Replace_Operator]^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )   >  "/.*" )  )  {^74^75^^^^59^89^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )  + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P3_Replace_Literal]^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )  + "/" )  )  {^74^75^^^^59^89^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )  + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P7_Replace_Invocation]^Change change =  ( Change )  it .hasNext (  )  ;^61^^^^^46^76^Change change =  ( Change )  it.next (  ) ;^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P14_Delete_Statement]^^61^^^^^46^76^Change change =  ( Change )  it.next (  ) ;^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P8_Replace_Mix]^if  ( change .getInput (  )   == Change.TYPE_DELETE && entry.getName (  )  != null )  {^68^69^^^^53^83^if  ( change.type (  )  == Change.TYPE_DELETE && entry.getName (  )  != null )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P14_Delete_Statement]^^69^70^71^^^54^84^&& entry.getName (  )  != null )  { if  ( entry.getName (  ) .equals ( change.targetFile (  )  )  )  { copy = false;^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P7_Replace_Invocation]^if  ( entry.getName (  )  .equals (  )   )  {^70^^^^^55^85^if  ( entry.getName (  ) .equals ( change.targetFile (  )  )  )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P14_Delete_Statement]^^72^73^^^^57^87^it.remove (  ) ; break;^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P2_Replace_Operator]^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )   <<  "/.*" )  )  {^74^75^^^^59^89^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )  + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P3_Replace_Literal]^boolean copy = false;^58^^^^^43^73^boolean copy = true;^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P2_Replace_Operator]^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )   |  "/.*" )  )  {^74^75^^^^59^89^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )  + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P3_Replace_Literal]^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )  + "/.*/." )  )  {^74^75^^^^59^89^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )  + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P8_Replace_Mix]^if  ( entry.getName (  )  .equals (  )   )  {^70^^^^^68^79^if  ( entry.getName (  ) .equals ( change.targetFile (  )  )  )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P2_Replace_Operator]^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )   >>  "/.*" )  )  {^74^75^^^^68^79^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )  + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P2_Replace_Operator]^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )   ^  "/.*" )  )  {^74^75^^^^68^79^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )  + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P8_Replace_Mix]^}  if  ( entry.getName (  ) .matches ( change.Change (  )  + "/.*" )  )  {^74^75^^^^59^89^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )  + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P2_Replace_Operator]^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )   ||  "/.*" )  )  {^74^75^^^^59^89^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )  + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P8_Replace_Mix]^if  ( change.type (  )  == 1 )  {^63^^^^^48^78^if  ( change.type (  )  == Change.TYPE_ADD )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P8_Replace_Mix]^if  ( change.type (  )  == Change.TYPE_DELETE && entry.getName (  )  != true )  {^68^69^^^^53^83^if  ( change.type (  )  == Change.TYPE_DELETE && entry.getName (  )  != null )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P2_Replace_Operator]^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )   <  "/.*" )  )  {^74^75^^^^68^79^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )  + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P8_Replace_Mix]^}  if  ( entry.getName (  )  .matches (  )   )  {^74^75^^^^68^79^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )  + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P7_Replace_Invocation]^change .Change ( null )   + "/.*" )  )  {^75^^^^^68^79^change.targetFile (  )  + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P2_Replace_Operator]^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )   <<  "/.*" )  )  {^74^75^^^^68^79^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )  + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P7_Replace_Invocation]^if  ( entry.getName (  ) .equals ( change .Change ( this )   )  )  {^70^^^^^68^79^if  ( entry.getName (  ) .equals ( change.targetFile (  )  )  )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P3_Replace_Literal]^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )  + ".*" )  )  {^74^75^^^^68^79^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )  + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P8_Replace_Mix]^if  ( entry.getName (  ) .equals ( change .Change ( this )   )  )  {^70^^^^^55^85^if  ( entry.getName (  ) .equals ( change.targetFile (  )  )  )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P2_Replace_Operator]^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )   ==  "/.*" )  )  {^74^75^^^^59^89^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )  + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P8_Replace_Mix]^while  (  ( entry =  null.getNextEntry (  )  )  !^57^^^^^42^72^while  (  ( entry = in.getNextEntry (  )  )  != null )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P14_Delete_Statement]^^57^58^^^^42^72^while  (  ( entry = in.getNextEntry (  )  )  != null )  { boolean copy = true;^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P2_Replace_Operator]^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )   &&  "/.*" )  )  {^74^75^^^^59^89^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )  + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P3_Replace_Literal]^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )  + "/.*." )  )  {^74^75^^^^59^89^} else if  ( entry.getName (  ) .matches ( change.targetFile (  )  + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] perform [RETURN_TYPE] void   ArchiveInputStream in ArchiveOutputStream out [VARIABLES] ArchiveInputStream  in  Set  changes  boolean  copy  Iterator  it  ArchiveEntry  entry  Change  change  ArchiveOutputStream  out  
[P2_Replace_Operator]^if  ( Change.TYPE_DELETE != pChange.type (  ) && pChange.targetFile (  )  == null )  {^91^92^^^^90^113^if  ( Change.TYPE_DELETE != pChange.type (  ) || pChange.targetFile (  )  == null )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P2_Replace_Operator]^if  ( Change.TYPE_DELETE == pChange.type (  ) || pChange.targetFile (  )  == null )  {^91^92^^^^90^113^if  ( Change.TYPE_DELETE != pChange.type (  ) || pChange.targetFile (  )  == null )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P2_Replace_Operator]^if  ( Change.TYPE_DELETE != pChange.type (  ) || pChange.targetFile (  )  != null )  {^91^92^^^^90^113^if  ( Change.TYPE_DELETE != pChange.type (  ) || pChange.targetFile (  )  == null )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P5_Replace_Variable]^if  ( Change.TYPE_DELETE != change.type (  ) || pChange.targetFile (  )  == null )  {^91^92^^^^90^113^if  ( Change.TYPE_DELETE != pChange.type (  ) || pChange.targetFile (  )  == null )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P5_Replace_Variable]^if  ( pChange != Change.TYPE_DELETE.type (  ) || pChange.targetFile (  )  == null )  {^91^92^^^^90^113^if  ( Change.TYPE_DELETE != pChange.type (  ) || pChange.targetFile (  )  == null )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P6_Replace_Expression]^if  ( Change.TYPE_DELETE != pChange.type (  ) ) {^91^92^^^^90^113^if  ( Change.TYPE_DELETE != pChange.type (  ) || pChange.targetFile (  )  == null )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P6_Replace_Expression]^if  (  pChange.targetFile (  )  == null )  {^91^92^^^^90^113^if  ( Change.TYPE_DELETE != pChange.type (  ) || pChange.targetFile (  )  == null )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P7_Replace_Invocation]^if  ( Change.TYPE_DELETE != pChange.Change (  ) || pChange.targetFile (  )  == null )  {^91^92^^^^90^113^if  ( Change.TYPE_DELETE != pChange.type (  ) || pChange.targetFile (  )  == null )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P7_Replace_Invocation]^if  ( Change.TYPE_DELETE != pChange .getInput (  )  || pChange.targetFile (  )  == null )  {^91^92^^^^90^113^if  ( Change.TYPE_DELETE != pChange.type (  ) || pChange.targetFile (  )  == null )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P7_Replace_Invocation]^if  ( Change.TYPE_DELETE != pChange.type (  ) || pChange.Change (  )  == null )  {^91^92^^^^90^113^if  ( Change.TYPE_DELETE != pChange.type (  ) || pChange.targetFile (  )  == null )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P8_Replace_Mix]^if  (  pChange.targetFile (  )  == this )  {^91^92^^^^90^113^if  ( Change.TYPE_DELETE != pChange.type (  ) || pChange.targetFile (  )  == null )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P9_Replace_Statement]^if  ( change.type (  )  == Change.TYPE_ADD && change.getEntry (  )  != null )  {^91^92^^^^90^113^if  ( Change.TYPE_DELETE != pChange.type (  ) || pChange.targetFile (  )  == null )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P15_Unwrap_Block]^return ;^91^92^93^94^^90^113^if  ( Change.TYPE_DELETE != pChange.type (  ) || pChange.targetFile (  )  == null )  { return; }^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P16_Remove_Block]^^91^92^93^94^^90^113^if  ( Change.TYPE_DELETE != pChange.type (  ) || pChange.targetFile (  )  == null )  { return; }^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P8_Replace_Mix]^if  ( Change.TYPE_DELETE != change .getInput (  )  || pChange.targetFile (  )  == null )  {^91^92^^^^90^113^if  ( Change.TYPE_DELETE != pChange.type (  ) || pChange.targetFile (  )  == null )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P5_Replace_Variable]^|| change.targetFile (  )  == null )  {^92^^^^^90^113^|| pChange.targetFile (  )  == null )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P7_Replace_Invocation]^|| pChange.Change (  )  == null )  {^92^^^^^90^113^|| pChange.targetFile (  )  == null )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P14_Delete_Statement]^^92^93^^^^90^113^|| pChange.targetFile (  )  == null )  { return;^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P1_Replace_Type]^char source = pChange.targetFile (  ) ;^95^^^^^90^113^String source = pChange.targetFile (  ) ;^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P5_Replace_Variable]^String source = change.targetFile (  ) ;^95^^^^^90^113^String source = pChange.targetFile (  ) ;^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P7_Replace_Invocation]^String source = pChange.Change (  ) ;^95^^^^^90^113^String source = pChange.targetFile (  ) ;^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P11_Insert_Donor_Statement]^String target = change.targetFile (  ) ;String source = pChange.targetFile (  ) ;^95^^^^^90^113^String source = pChange.targetFile (  ) ;^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P11_Insert_Donor_Statement]^String source = entry.getName (  ) ;String source = pChange.targetFile (  ) ;^95^^^^^90^113^String source = pChange.targetFile (  ) ;^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P11_Insert_Donor_Statement]^String target = change.getEntry (  ) .getName (  ) ;String source = pChange.targetFile (  ) ;^95^^^^^90^113^String source = pChange.targetFile (  ) ;^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P7_Replace_Invocation]^String source = pChange .Change ( target )  ;^95^^^^^90^113^String source = pChange.targetFile (  ) ;^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P14_Delete_Statement]^^95^^^^^90^113^String source = pChange.targetFile (  ) ;^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P6_Replace_Expression]^if  ( change.type (  )  == Change.TYPE_ADD )  {^97^^^^^90^113^if  ( !changes.isEmpty (  )  )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P6_Replace_Expression]^if  ( change.getEntry (  )  != null )  {^97^^^^^90^113^if  ( !changes.isEmpty (  )  )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P6_Replace_Expression]^if  ( source + "/.*" )  {^97^^^^^90^113^if  ( !changes.isEmpty (  )  )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P7_Replace_Invocation]^if  ( !changes.iterator (  )  )  {^97^^^^^90^113^if  ( !changes.isEmpty (  )  )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P2_Replace_Operator]^if  ( change.type (  )  == Change.TYPE_ADD || change.getEntry (  )  != null )  {^100^101^^^^90^113^if  ( change.type (  )  == Change.TYPE_ADD && change.getEntry (  )  != null )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P2_Replace_Operator]^if  ( change.type (  )  != Change.TYPE_ADD && change.getEntry (  )  != null )  {^100^101^^^^90^113^if  ( change.type (  )  == Change.TYPE_ADD && change.getEntry (  )  != null )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P2_Replace_Operator]^if  ( change.type (  )  == Change.TYPE_ADD && change.getEntry (  )  == null )  {^100^101^^^^90^113^if  ( change.type (  )  == Change.TYPE_ADD && change.getEntry (  )  != null )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P5_Replace_Variable]^if  ( pChange.type (  )  == Change.TYPE_ADD && change.getEntry (  )  != null )  {^100^101^^^^90^113^if  ( change.type (  )  == Change.TYPE_ADD && change.getEntry (  )  != null )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P6_Replace_Expression]^if  ( change.type (  )  == Change.TYPE_ADD ) {^100^101^^^^90^113^if  ( change.type (  )  == Change.TYPE_ADD && change.getEntry (  )  != null )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P6_Replace_Expression]^if  (  change.getEntry (  )  != null )  {^100^101^^^^90^113^if  ( change.type (  )  == Change.TYPE_ADD && change.getEntry (  )  != null )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P6_Replace_Expression]^if  ( source + "/.*" )  {^100^101^^^^90^113^if  ( change.type (  )  == Change.TYPE_ADD && change.getEntry (  )  != null )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P7_Replace_Invocation]^if  ( change.Change (  )  == Change.TYPE_ADD && change.getEntry (  )  != null )  {^100^101^^^^90^113^if  ( change.type (  )  == Change.TYPE_ADD && change.getEntry (  )  != null )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P7_Replace_Invocation]^if  ( change.type (  )  == Change.TYPE_ADD && change.Change (  )  != null )  {^100^101^^^^90^113^if  ( change.type (  )  == Change.TYPE_ADD && change.getEntry (  )  != null )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P7_Replace_Invocation]^if  ( change.type (  )  == Change.TYPE_ADD && change .getInput (  )   != null )  {^100^101^^^^90^113^if  ( change.type (  )  == Change.TYPE_ADD && change.getEntry (  )  != null )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P9_Replace_Statement]^if  ( change.type (  )  == Change.TYPE_DELETE && entry.getName (  )  != null )  {^100^101^^^^90^113^if  ( change.type (  )  == Change.TYPE_ADD && change.getEntry (  )  != null )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P9_Replace_Statement]^if  ( Change.TYPE_DELETE != pChange.type (  ) || pChange.targetFile (  )  == null )  {^100^101^^^^90^113^if  ( change.type (  )  == Change.TYPE_ADD && change.getEntry (  )  != null )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P13_Insert_Block]^if  (  ( change.type (  )  )  ==  ( Change.TYPE_DELETE )  )  {     String target = change.targetFile (  ) ;     if  ( source.equals ( target )  )  {         return true;     }     return source.matches (  ( target + "/.*" )  ) ; }^100^^^^^90^113^[Delete]^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P13_Insert_Block]^if  (  (  ( change.type (  )  )  ==  ( Change.TYPE_DELETE )  )  &&  (  ( entry.getName (  )  )  != null )  )  {     if  ( entry.getName (  ) .equals ( change.targetFile (  )  )  )  {         copy = false;         it.remove (  ) ;         break;     }else         if  ( entry.getName (  ) .matches (  (  ( change.targetFile (  )  )  + "/.*" )  )  )  {             copy = false;             break;         }      }^100^^^^^90^113^[Delete]^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P5_Replace_Variable]^if  ( target.equals ( source )  )  {^104^^^^^90^113^if  ( source.equals ( target )  )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P8_Replace_Mix]^if  ( source .equals (  )   )  {^104^^^^^90^113^if  ( source.equals ( target )  )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P15_Unwrap_Block]^it.remove();^104^105^106^107^108^90^113^if  ( source.equals ( target )  )  { it.remove (  ) ; } else if  ( target.matches ( source + "/.*" )  )  { it.remove (  ) ; }^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P16_Remove_Block]^^104^105^106^107^108^90^113^if  ( source.equals ( target )  )  { it.remove (  ) ; } else if  ( target.matches ( source + "/.*" )  )  { it.remove (  ) ; }^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P2_Replace_Operator]^} else if  ( target.matches ( source  >=  "/.*" )  )  {^106^^^^^90^113^} else if  ( target.matches ( source + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P5_Replace_Variable]^} else if  ( source.matches ( target + "/.*" )  )  {^106^^^^^90^113^} else if  ( target.matches ( source + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P6_Replace_Expression]^} else {^106^^^^^90^113^} else if  ( target.matches ( source + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P8_Replace_Mix]^} else if  ( target.matches ( target + "/.*" )  )  {^106^^^^^90^113^} else if  ( target.matches ( source + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P15_Unwrap_Block]^it.remove();^106^107^108^^^90^113^} else if  ( target.matches ( source + "/.*" )  )  { it.remove (  ) ; }^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P16_Remove_Block]^^106^107^108^^^90^113^} else if  ( target.matches ( source + "/.*" )  )  { it.remove (  ) ; }^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P7_Replace_Invocation]^it .next (  )  ;^107^^^^^90^113^it.remove (  ) ;^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P14_Delete_Statement]^^107^^^^^90^113^it.remove (  ) ;^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P2_Replace_Operator]^} else if  ( target.matches ( source  <=  "/.*" )  )  {^106^^^^^90^113^} else if  ( target.matches ( source + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P3_Replace_Literal]^} else if  ( target.matches ( source + "" )  )  {^106^^^^^90^113^} else if  ( target.matches ( source + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P7_Replace_Invocation]^} else if  ( target .matches (  )   )  {^106^^^^^90^113^} else if  ( target.matches ( source + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P13_Insert_Block]^if  ( target.matches (  ( source + "/.*" )  )  )  {     it.remove (  ) ; }^106^^^^^90^113^[Delete]^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P14_Delete_Statement]^^105^^^^^90^113^it.remove (  ) ;^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P2_Replace_Operator]^} else if  ( target.matches ( source  &&  "/.*" )  )  {^106^^^^^90^113^} else if  ( target.matches ( source + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P3_Replace_Literal]^} else if  ( target.matches ( source + "/.*/" )  )  {^106^^^^^90^113^} else if  ( target.matches ( source + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P1_Replace_Type]^char target = change.getEntry (  ) .getName (  ) ;^102^^^^^90^113^String target = change.getEntry (  ) .getName (  ) ;^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P5_Replace_Variable]^String target = pChange.getEntry (  ) .getName (  ) ;^102^^^^^90^113^String target = change.getEntry (  ) .getName (  ) ;^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P7_Replace_Invocation]^String target = change.Change (  ) .getName (  ) ;^102^^^^^90^113^String target = change.getEntry (  ) .getName (  ) ;^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P11_Insert_Donor_Statement]^String target = change.targetFile (  ) ;String target = change.getEntry (  ) .getName (  ) ;^102^^^^^90^113^String target = change.getEntry (  ) .getName (  ) ;^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P11_Insert_Donor_Statement]^String source = pChange.targetFile (  ) ;String target = change.getEntry (  ) .getName (  ) ;^102^^^^^90^113^String target = change.getEntry (  ) .getName (  ) ;^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P11_Insert_Donor_Statement]^String source = entry.getName (  ) ;String target = change.getEntry (  ) .getName (  ) ;^102^^^^^90^113^String target = change.getEntry (  ) .getName (  ) ;^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P14_Delete_Statement]^^102^^^^^90^113^String target = change.getEntry (  ) .getName (  ) ;^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P11_Insert_Donor_Statement]^&& change.getEntry (  )  != null )  { String target = change.getEntry (  ) .getName (  ) ;String target = change.getEntry (  ) .getName (  ) ;^102^^^^^90^113^String target = change.getEntry (  ) .getName (  ) ;^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P7_Replace_Invocation]^it .next (  )  ;^105^^^^^90^113^it.remove (  ) ;^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P2_Replace_Operator]^} else if  ( target.matches ( source  &  "/.*" )  )  {^106^^^^^90^113^} else if  ( target.matches ( source + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P5_Replace_Variable]^if  ( target.equals ( target )  )  {^104^^^^^90^113^if  ( source.equals ( target )  )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P2_Replace_Operator]^} else if  ( target.matches ( source  <<  "/.*" )  )  {^106^^^^^90^113^} else if  ( target.matches ( source + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P8_Replace_Mix]^}  if  ( target.matches ( target + "/.*" )  )  {^106^^^^^90^113^} else if  ( target.matches ( source + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P2_Replace_Operator]^} else if  ( target.matches ( source  >>  "/.*" )  )  {^106^^^^^90^113^} else if  ( target.matches ( source + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P2_Replace_Operator]^} else if  ( target.matches ( source  !=  "/.*" )  )  {^106^^^^^90^113^} else if  ( target.matches ( source + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P5_Replace_Variable]^} else if  ( source.matches ( source + "/.*" )  )  {^106^^^^^90^113^} else if  ( target.matches ( source + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P8_Replace_Mix]^}  if  ( target.matches ( source + "/.*" )  )  {^106^^^^^90^113^} else if  ( target.matches ( source + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P5_Replace_Variable]^for  ( Iterator it = pChanges.iterator (  ) ; it.hasNext (  ) ; )  {^98^^^^^90^113^for  ( Iterator it = changes.iterator (  ) ; it.hasNext (  ) ; )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P5_Replace_Variable]^for  ( Iterator changes = it.iterator (  ) ; it.hasNext (  ) ; )  {^98^^^^^90^113^for  ( Iterator it = changes.iterator (  ) ; it.hasNext (  ) ; )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P7_Replace_Invocation]^for  ( Iterator it = changes.isEmpty (  ) ; it.hasNext (  ) ; )  {^98^^^^^90^113^for  ( Iterator it = changes.iterator (  ) ; it.hasNext (  ) ; )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P7_Replace_Invocation]^for  ( Iterator it = changes.iterator (  ) ; it .next (  )  ; )  {^98^^^^^90^113^for  ( Iterator it = changes.iterator (  ) ; it.hasNext (  ) ; )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P8_Replace_Mix]^for  ( Iterator it = pChanges.isEmpty (  ) ; it.hasNext (  ) ; )  {^98^^^^^90^113^for  ( Iterator it = changes.iterator (  ) ; it.hasNext (  ) ; )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P7_Replace_Invocation]^if  ( change .getInput (  )   == Change.TYPE_ADD && change.getEntry (  )  != null )  {^100^101^^^^90^113^if  ( change.type (  )  == Change.TYPE_ADD && change.getEntry (  )  != null )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P8_Replace_Mix]^if  ( change.type (  )  == Change.TYPE_ADD && change.getEntry (  )  != this )  {^100^101^^^^90^113^if  ( change.type (  )  == Change.TYPE_ADD && change.getEntry (  )  != null )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P2_Replace_Operator]^} else if  ( target.matches ( source  ^  "/.*" )  )  {^106^^^^^90^113^} else if  ( target.matches ( source + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P3_Replace_Literal]^} else if  ( target.matches ( source + "/.*/." )  )  {^106^^^^^90^113^} else if  ( target.matches ( source + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P2_Replace_Operator]^} else if  ( target.matches ( source  ||  "/.*" )  )  {^106^^^^^90^113^} else if  ( target.matches ( source + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P3_Replace_Literal]^} else if  ( target.matches ( source + "/." )  )  {^106^^^^^90^113^} else if  ( target.matches ( source + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P7_Replace_Invocation]^String target = change .getInput (  )  .getName (  ) ;^102^^^^^90^113^String target = change.getEntry (  ) .getName (  ) ;^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P2_Replace_Operator]^} else if  ( target.matches ( source  <  "/.*" )  )  {^106^^^^^90^113^} else if  ( target.matches ( source + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P8_Replace_Mix]^}  if  ( source.matches ( source + "/.*" )  )  {^106^^^^^90^113^} else if  ( target.matches ( source + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P2_Replace_Operator]^} else if  ( target.matches ( source  >  "/.*" )  )  {^106^^^^^90^113^} else if  ( target.matches ( source + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P7_Replace_Invocation]^Change change =  ( Change )  it .hasNext (  )  ;^99^^^^^90^113^Change change =  ( Change )  it.next (  ) ;^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P8_Replace_Mix]^String target = pChange.Change (  ) .getName (  ) ;^102^^^^^90^113^String target = change.getEntry (  ) .getName (  ) ;^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P14_Delete_Statement]^^99^^^^^90^113^Change change =  ( Change )  it.next (  ) ;^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P5_Replace_Variable]^&& pChange.getEntry (  )  != null )  {^101^^^^^90^113^&& change.getEntry (  )  != null )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P7_Replace_Invocation]^&& change.Change (  )  != null )  {^101^^^^^90^113^&& change.getEntry (  )  != null )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P14_Delete_Statement]^^101^102^^^^90^113^&& change.getEntry (  )  != null )  { String target = change.getEntry (  ) .getName (  ) ;^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P8_Replace_Mix]^String target = pChange .getInput (  )  .getName (  ) ;^102^^^^^90^113^String target = change.getEntry (  ) .getName (  ) ;^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P8_Replace_Mix]^if  ( pChange .getInput (  )   == Change.TYPE_ADD && change.getEntry (  )  != null )  {^100^101^^^^90^113^if  ( change.type (  )  == Change.TYPE_ADD && change.getEntry (  )  != null )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P8_Replace_Mix]^if  ( pChange.type (  )  == Change.TYPE_ADD ) {^100^101^^^^90^113^if  ( change.type (  )  == Change.TYPE_ADD && change.getEntry (  )  != null )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P3_Replace_Literal]^} else if  ( target.matches ( source + ".*" )  )  {^106^^^^^90^113^} else if  ( target.matches ( source + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P3_Replace_Literal]^} else if  ( target.matches ( source + "/..*" )  )  {^106^^^^^90^113^} else if  ( target.matches ( source + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P5_Replace_Variable]^if  ( change.type (  )  == this && change.getEntry (  )  != null )  {^100^101^^^^90^113^if  ( change.type (  )  == Change.TYPE_ADD && change.getEntry (  )  != null )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P5_Replace_Variable]^if  ( Change.TYPE_ADD.type (  )  == change && change.getEntry (  )  != null )  {^100^101^^^^90^113^if  ( change.type (  )  == Change.TYPE_ADD && change.getEntry (  )  != null )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P8_Replace_Mix]^if  (  change.getEntry (  )  != true )  {^100^101^^^^90^113^if  ( change.type (  )  == Change.TYPE_ADD && change.getEntry (  )  != null )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P5_Replace_Variable]^if  ( source.equals ( source )  )  {^104^^^^^90^113^if  ( source.equals ( target )  )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P2_Replace_Operator]^} else if  ( target.matches ( source  ==  "/.*" )  )  {^106^^^^^90^113^} else if  ( target.matches ( source + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P3_Replace_Literal]^} else if  ( target.matches ( source + "/" )  )  {^106^^^^^90^113^} else if  ( target.matches ( source + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P8_Replace_Mix]^}  if  ( target .matches (  )   )  {^106^^^^^90^113^} else if  ( target.matches ( source + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P3_Replace_Literal]^} else if  ( target.matches ( source + "/.*." )  )  {^106^^^^^90^113^} else if  ( target.matches ( source + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P8_Replace_Mix]^&& pChange.Change (  )  != null )  {^101^^^^^90^113^&& change.getEntry (  )  != null )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P3_Replace_Literal]^} else if  ( target.matches ( source + "..*" )  )  {^106^^^^^90^113^} else if  ( target.matches ( source + "/.*" )  )  {^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P5_Replace_Variable]^changes.add ( change ) ;^112^^^^^90^113^changes.add ( pChange ) ;^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P14_Delete_Statement]^^112^^^^^90^113^changes.add ( pChange ) ;^[CLASS] ChangeSet  [METHOD] addDeletion [RETURN_TYPE] void   Change pChange [VARIABLES] Iterator  it  Set  changes  Change  change  pChange  String  source  target  boolean  
[P1_Replace_Type]^char source = entry.getName (  ) ;^116^^^^^115^133^String source = entry.getName (  ) ;^[CLASS] ChangeSet  [METHOD] isDeletedLater [RETURN_TYPE] boolean   ArchiveEntry entry [VARIABLES] Iterator  it  ArchiveEntry  entry  Set  changes  String  source  target  Change  change  boolean  
[P11_Insert_Donor_Statement]^String target = change.targetFile (  ) ;String source = entry.getName (  ) ;^116^^^^^115^133^String source = entry.getName (  ) ;^[CLASS] ChangeSet  [METHOD] isDeletedLater [RETURN_TYPE] boolean   ArchiveEntry entry [VARIABLES] Iterator  it  ArchiveEntry  entry  Set  changes  String  source  target  Change  change  boolean  
[P11_Insert_Donor_Statement]^String source = pChange.targetFile (  ) ;String source = entry.getName (  ) ;^116^^^^^115^133^String source = entry.getName (  ) ;^[CLASS] ChangeSet  [METHOD] isDeletedLater [RETURN_TYPE] boolean   ArchiveEntry entry [VARIABLES] Iterator  it  ArchiveEntry  entry  Set  changes  String  source  target  Change  change  boolean  
[P11_Insert_Donor_Statement]^String target = change.getEntry (  ) .getName (  ) ;String source = entry.getName (  ) ;^116^^^^^115^133^String source = entry.getName (  ) ;^[CLASS] ChangeSet  [METHOD] isDeletedLater [RETURN_TYPE] boolean   ArchiveEntry entry [VARIABLES] Iterator  it  ArchiveEntry  entry  Set  changes  String  source  target  Change  change  boolean  
[P14_Delete_Statement]^^116^^^^^115^133^String source = entry.getName (  ) ;^[CLASS] ChangeSet  [METHOD] isDeletedLater [RETURN_TYPE] boolean   ArchiveEntry entry [VARIABLES] Iterator  it  ArchiveEntry  entry  Set  changes  String  source  target  Change  change  boolean  
[P6_Replace_Expression]^if  ( target + "/.*" )  {^118^^^^^115^133^if  ( !changes.isEmpty (  )  )  {^[CLASS] ChangeSet  [METHOD] isDeletedLater [RETURN_TYPE] boolean   ArchiveEntry entry [VARIABLES] Iterator  it  ArchiveEntry  entry  Set  changes  String  source  target  Change  change  boolean  
[P7_Replace_Invocation]^if  ( !changes.iterator (  )  )  {^118^^^^^115^133^if  ( !changes.isEmpty (  )  )  {^[CLASS] ChangeSet  [METHOD] isDeletedLater [RETURN_TYPE] boolean   ArchiveEntry entry [VARIABLES] Iterator  it  ArchiveEntry  entry  Set  changes  String  source  target  Change  change  boolean  
[P2_Replace_Operator]^if  ( change.type (  )  != Change.TYPE_DELETE )  {^121^^^^^115^133^if  ( change.type (  )  == Change.TYPE_DELETE )  {^[CLASS] ChangeSet  [METHOD] isDeletedLater [RETURN_TYPE] boolean   ArchiveEntry entry [VARIABLES] Iterator  it  ArchiveEntry  entry  Set  changes  String  source  target  Change  change  boolean  
[P6_Replace_Expression]^if  ( target + "/.*" )  {^121^^^^^115^133^if  ( change.type (  )  == Change.TYPE_DELETE )  {^[CLASS] ChangeSet  [METHOD] isDeletedLater [RETURN_TYPE] boolean   ArchiveEntry entry [VARIABLES] Iterator  it  ArchiveEntry  entry  Set  changes  String  source  target  Change  change  boolean  
[P7_Replace_Invocation]^if  ( change.Change (  )  == Change.TYPE_DELETE )  {^121^^^^^115^133^if  ( change.type (  )  == Change.TYPE_DELETE )  {^[CLASS] ChangeSet  [METHOD] isDeletedLater [RETURN_TYPE] boolean   ArchiveEntry entry [VARIABLES] Iterator  it  ArchiveEntry  entry  Set  changes  String  source  target  Change  change  boolean  
[P8_Replace_Mix]^if  ( change .getInput (  )   == Change.TYPE_DELETE )  {^121^^^^^115^133^if  ( change.type (  )  == Change.TYPE_DELETE )  {^[CLASS] ChangeSet  [METHOD] isDeletedLater [RETURN_TYPE] boolean   ArchiveEntry entry [VARIABLES] Iterator  it  ArchiveEntry  entry  Set  changes  String  source  target  Change  change  boolean  
[P9_Replace_Statement]^if  ( change.type (  )  == Change.TYPE_ADD )  {^121^^^^^115^133^if  ( change.type (  )  == Change.TYPE_DELETE )  {^[CLASS] ChangeSet  [METHOD] isDeletedLater [RETURN_TYPE] boolean   ArchiveEntry entry [VARIABLES] Iterator  it  ArchiveEntry  entry  Set  changes  String  source  target  Change  change  boolean  
[P15_Unwrap_Block]^java.lang.String target = change.targetFile(); if (source.equals(target)) {    return true;}; return source.matches((target + "/.*"));^121^122^^124^125^115^133^if  ( change.type (  )  == Change.TYPE_DELETE )  { String target = change.targetFile (  ) ; if  ( source.equals ( target )  )  { return true; }^[CLASS] ChangeSet  [METHOD] isDeletedLater [RETURN_TYPE] boolean   ArchiveEntry entry [VARIABLES] Iterator  it  ArchiveEntry  entry  Set  changes  String  source  target  Change  change  boolean  
[P16_Remove_Block]^^121^122^^124^125^115^133^if  ( change.type (  )  == Change.TYPE_DELETE )  { String target = change.targetFile (  ) ; if  ( source.equals ( target )  )  { return true; }^[CLASS] ChangeSet  [METHOD] isDeletedLater [RETURN_TYPE] boolean   ArchiveEntry entry [VARIABLES] Iterator  it  ArchiveEntry  entry  Set  changes  String  source  target  Change  change  boolean  
[P13_Insert_Block]^if  (  (  ( change.type (  )  )  ==  ( Change.TYPE_ADD )  )  &&  (  ( change.getEntry (  )  )  != null )  )  {     String target = change.getEntry (  ) .getName (  ) ;     if  ( source.equals ( target )  )  {         it.remove (  ) ;     }else         if  ( target.matches (  ( source + "/.*" )  )  )  {             it.remove (  ) ;         }      }^121^^^^^115^133^[Delete]^[CLASS] ChangeSet  [METHOD] isDeletedLater [RETURN_TYPE] boolean   ArchiveEntry entry [VARIABLES] Iterator  it  ArchiveEntry  entry  Set  changes  String  source  target  Change  change  boolean  
[P5_Replace_Variable]^if  ( target.equals ( source )  )  {^124^^^^^115^133^if  ( source.equals ( target )  )  {^[CLASS] ChangeSet  [METHOD] isDeletedLater [RETURN_TYPE] boolean   ArchiveEntry entry [VARIABLES] Iterator  it  ArchiveEntry  entry  Set  changes  String  source  target  Change  change  boolean  
[P8_Replace_Mix]^if  ( source .equals (  )   )  {^124^^^^^115^133^if  ( source.equals ( target )  )  {^[CLASS] ChangeSet  [METHOD] isDeletedLater [RETURN_TYPE] boolean   ArchiveEntry entry [VARIABLES] Iterator  it  ArchiveEntry  entry  Set  changes  String  source  target  Change  change  boolean  
[P15_Unwrap_Block]^return true;^124^125^126^^^115^133^if  ( source.equals ( target )  )  { return true; }^[CLASS] ChangeSet  [METHOD] isDeletedLater [RETURN_TYPE] boolean   ArchiveEntry entry [VARIABLES] Iterator  it  ArchiveEntry  entry  Set  changes  String  source  target  Change  change  boolean  
[P16_Remove_Block]^^124^125^126^^^115^133^if  ( source.equals ( target )  )  { return true; }^[CLASS] ChangeSet  [METHOD] isDeletedLater [RETURN_TYPE] boolean   ArchiveEntry entry [VARIABLES] Iterator  it  ArchiveEntry  entry  Set  changes  String  source  target  Change  change  boolean  
[P3_Replace_Literal]^return false;^125^^^^^115^133^return true;^[CLASS] ChangeSet  [METHOD] isDeletedLater [RETURN_TYPE] boolean   ArchiveEntry entry [VARIABLES] Iterator  it  ArchiveEntry  entry  Set  changes  String  source  target  Change  change  boolean  
[P2_Replace_Operator]^return source.matches ( target  >=  "/.*" ) ;^128^^^^^115^133^return source.matches ( target + "/.*" ) ;^[CLASS] ChangeSet  [METHOD] isDeletedLater [RETURN_TYPE] boolean   ArchiveEntry entry [VARIABLES] Iterator  it  ArchiveEntry  entry  Set  changes  String  source  target  Change  change  boolean  
[P3_Replace_Literal]^return source.matches ( target + "" ) ;^128^^^^^115^133^return source.matches ( target + "/.*" ) ;^[CLASS] ChangeSet  [METHOD] isDeletedLater [RETURN_TYPE] boolean   ArchiveEntry entry [VARIABLES] Iterator  it  ArchiveEntry  entry  Set  changes  String  source  target  Change  change  boolean  
[P5_Replace_Variable]^return target.matches ( source + "/.*" ) ;^128^^^^^115^133^return source.matches ( target + "/.*" ) ;^[CLASS] ChangeSet  [METHOD] isDeletedLater [RETURN_TYPE] boolean   ArchiveEntry entry [VARIABLES] Iterator  it  ArchiveEntry  entry  Set  changes  String  source  target  Change  change  boolean  
[P8_Replace_Mix]^return source.matches ( source + "/.*" ) ;^128^^^^^115^133^return source.matches ( target + "/.*" ) ;^[CLASS] ChangeSet  [METHOD] isDeletedLater [RETURN_TYPE] boolean   ArchiveEntry entry [VARIABLES] Iterator  it  ArchiveEntry  entry  Set  changes  String  source  target  Change  change  boolean  
[P1_Replace_Type]^char target = change.targetFile (  ) ;^122^^^^^115^133^String target = change.targetFile (  ) ;^[CLASS] ChangeSet  [METHOD] isDeletedLater [RETURN_TYPE] boolean   ArchiveEntry entry [VARIABLES] Iterator  it  ArchiveEntry  entry  Set  changes  String  source  target  Change  change  boolean  
[P7_Replace_Invocation]^String target = change.Change (  ) ;^122^^^^^115^133^String target = change.targetFile (  ) ;^[CLASS] ChangeSet  [METHOD] isDeletedLater [RETURN_TYPE] boolean   ArchiveEntry entry [VARIABLES] Iterator  it  ArchiveEntry  entry  Set  changes  String  source  target  Change  change  boolean  
[P8_Replace_Mix]^String target = change .Change ( source )  ;^122^^^^^115^133^String target = change.targetFile (  ) ;^[CLASS] ChangeSet  [METHOD] isDeletedLater [RETURN_TYPE] boolean   ArchiveEntry entry [VARIABLES] Iterator  it  ArchiveEntry  entry  Set  changes  String  source  target  Change  change  boolean  
[P11_Insert_Donor_Statement]^String source = pChange.targetFile (  ) ;String target = change.targetFile (  ) ;^122^^^^^115^133^String target = change.targetFile (  ) ;^[CLASS] ChangeSet  [METHOD] isDeletedLater [RETURN_TYPE] boolean   ArchiveEntry entry [VARIABLES] Iterator  it  ArchiveEntry  entry  Set  changes  String  source  target  Change  change  boolean  
[P11_Insert_Donor_Statement]^String source = entry.getName (  ) ;String target = change.targetFile (  ) ;^122^^^^^115^133^String target = change.targetFile (  ) ;^[CLASS] ChangeSet  [METHOD] isDeletedLater [RETURN_TYPE] boolean   ArchiveEntry entry [VARIABLES] Iterator  it  ArchiveEntry  entry  Set  changes  String  source  target  Change  change  boolean  
[P11_Insert_Donor_Statement]^String target = change.getEntry (  ) .getName (  ) ;String target = change.targetFile (  ) ;^122^^^^^115^133^String target = change.targetFile (  ) ;^[CLASS] ChangeSet  [METHOD] isDeletedLater [RETURN_TYPE] boolean   ArchiveEntry entry [VARIABLES] Iterator  it  ArchiveEntry  entry  Set  changes  String  source  target  Change  change  boolean  
[P7_Replace_Invocation]^String target = change .Change ( target )  ;^122^^^^^115^133^String target = change.targetFile (  ) ;^[CLASS] ChangeSet  [METHOD] isDeletedLater [RETURN_TYPE] boolean   ArchiveEntry entry [VARIABLES] Iterator  it  ArchiveEntry  entry  Set  changes  String  source  target  Change  change  boolean  
[P14_Delete_Statement]^^122^^^^^115^133^String target = change.targetFile (  ) ;^[CLASS] ChangeSet  [METHOD] isDeletedLater [RETURN_TYPE] boolean   ArchiveEntry entry [VARIABLES] Iterator  it  ArchiveEntry  entry  Set  changes  String  source  target  Change  change  boolean  
[P2_Replace_Operator]^return source.matches ( target  >  "/.*" ) ;^128^^^^^115^133^return source.matches ( target + "/.*" ) ;^[CLASS] ChangeSet  [METHOD] isDeletedLater [RETURN_TYPE] boolean   ArchiveEntry entry [VARIABLES] Iterator  it  ArchiveEntry  entry  Set  changes  String  source  target  Change  change  boolean  
[P3_Replace_Literal]^return source.matches ( target + ".*" ) ;^128^^^^^115^133^return source.matches ( target + "/.*" ) ;^[CLASS] ChangeSet  [METHOD] isDeletedLater [RETURN_TYPE] boolean   ArchiveEntry entry [VARIABLES] Iterator  it  ArchiveEntry  entry  Set  changes  String  source  target  Change  change  boolean  
[P14_Delete_Statement]^^128^^^^^115^133^return source.matches ( target + "/.*" ) ;^[CLASS] ChangeSet  [METHOD] isDeletedLater [RETURN_TYPE] boolean   ArchiveEntry entry [VARIABLES] Iterator  it  ArchiveEntry  entry  Set  changes  String  source  target  Change  change  boolean  
[P5_Replace_Variable]^for  ( Iterator change = its.iterator (  ) ; it.hasNext (  ) ; )  {^119^^^^^115^133^for  ( Iterator it = changes.iterator (  ) ; it.hasNext (  ) ; )  {^[CLASS] ChangeSet  [METHOD] isDeletedLater [RETURN_TYPE] boolean   ArchiveEntry entry [VARIABLES] Iterator  it  ArchiveEntry  entry  Set  changes  String  source  target  Change  change  boolean  
[P7_Replace_Invocation]^for  ( Iterator it = changes.isEmpty (  ) ; it.hasNext (  ) ; )  {^119^^^^^115^133^for  ( Iterator it = changes.iterator (  ) ; it.hasNext (  ) ; )  {^[CLASS] ChangeSet  [METHOD] isDeletedLater [RETURN_TYPE] boolean   ArchiveEntry entry [VARIABLES] Iterator  it  ArchiveEntry  entry  Set  changes  String  source  target  Change  change  boolean  
[P7_Replace_Invocation]^for  ( Iterator it = changes.iterator (  ) ; it .next (  )  ; )  {^119^^^^^115^133^for  ( Iterator it = changes.iterator (  ) ; it.hasNext (  ) ; )  {^[CLASS] ChangeSet  [METHOD] isDeletedLater [RETURN_TYPE] boolean   ArchiveEntry entry [VARIABLES] Iterator  it  ArchiveEntry  entry  Set  changes  String  source  target  Change  change  boolean  
[P2_Replace_Operator]^if  ( change.type (  )  >= Change.TYPE_DELETE )  {^121^^^^^115^133^if  ( change.type (  )  == Change.TYPE_DELETE )  {^[CLASS] ChangeSet  [METHOD] isDeletedLater [RETURN_TYPE] boolean   ArchiveEntry entry [VARIABLES] Iterator  it  ArchiveEntry  entry  Set  changes  String  source  target  Change  change  boolean  
[P5_Replace_Variable]^if  ( Change.TYPE_DELETE.type (  )  == change )  {^121^^^^^115^133^if  ( change.type (  )  == Change.TYPE_DELETE )  {^[CLASS] ChangeSet  [METHOD] isDeletedLater [RETURN_TYPE] boolean   ArchiveEntry entry [VARIABLES] Iterator  it  ArchiveEntry  entry  Set  changes  String  source  target  Change  change  boolean  
[P2_Replace_Operator]^return source.matches ( target  <  "/.*" ) ;^128^^^^^115^133^return source.matches ( target + "/.*" ) ;^[CLASS] ChangeSet  [METHOD] isDeletedLater [RETURN_TYPE] boolean   ArchiveEntry entry [VARIABLES] Iterator  it  ArchiveEntry  entry  Set  changes  String  source  target  Change  change  boolean  
[P3_Replace_Literal]^return source.matches ( target + "/.*/" ) ;^128^^^^^115^133^return source.matches ( target + "/.*" ) ;^[CLASS] ChangeSet  [METHOD] isDeletedLater [RETURN_TYPE] boolean   ArchiveEntry entry [VARIABLES] Iterator  it  ArchiveEntry  entry  Set  changes  String  source  target  Change  change  boolean  
[P8_Replace_Mix]^return source .matches (  )  ;^128^^^^^115^133^return source.matches ( target + "/.*" ) ;^[CLASS] ChangeSet  [METHOD] isDeletedLater [RETURN_TYPE] boolean   ArchiveEntry entry [VARIABLES] Iterator  it  ArchiveEntry  entry  Set  changes  String  source  target  Change  change  boolean  
[P2_Replace_Operator]^return source.matches ( target  !=  "/.*" ) ;^128^^^^^115^133^return source.matches ( target + "/.*" ) ;^[CLASS] ChangeSet  [METHOD] isDeletedLater [RETURN_TYPE] boolean   ArchiveEntry entry [VARIABLES] Iterator  it  ArchiveEntry  entry  Set  changes  String  source  target  Change  change  boolean  
[P3_Replace_Literal]^return source.matches ( target + "/." ) ;^128^^^^^115^133^return source.matches ( target + "/.*" ) ;^[CLASS] ChangeSet  [METHOD] isDeletedLater [RETURN_TYPE] boolean   ArchiveEntry entry [VARIABLES] Iterator  it  ArchiveEntry  entry  Set  changes  String  source  target  Change  change  boolean  
[P2_Replace_Operator]^return source.matches ( target  &  "/.*" ) ;^128^^^^^115^133^return source.matches ( target + "/.*" ) ;^[CLASS] ChangeSet  [METHOD] isDeletedLater [RETURN_TYPE] boolean   ArchiveEntry entry [VARIABLES] Iterator  it  ArchiveEntry  entry  Set  changes  String  source  target  Change  change  boolean  
[P7_Replace_Invocation]^Change change =  ( Change )  it .hasNext (  )  ;^120^^^^^115^133^Change change =  ( Change )  it.next (  ) ;^[CLASS] ChangeSet  [METHOD] isDeletedLater [RETURN_TYPE] boolean   ArchiveEntry entry [VARIABLES] Iterator  it  ArchiveEntry  entry  Set  changes  String  source  target  Change  change  boolean  
[P14_Delete_Statement]^^120^^^^^115^133^Change change =  ( Change )  it.next (  ) ;^[CLASS] ChangeSet  [METHOD] isDeletedLater [RETURN_TYPE] boolean   ArchiveEntry entry [VARIABLES] Iterator  it  ArchiveEntry  entry  Set  changes  String  source  target  Change  change  boolean  
[P2_Replace_Operator]^return source.matches ( target  ^  "/.*" ) ;^128^^^^^115^133^return source.matches ( target + "/.*" ) ;^[CLASS] ChangeSet  [METHOD] isDeletedLater [RETURN_TYPE] boolean   ArchiveEntry entry [VARIABLES] Iterator  it  ArchiveEntry  entry  Set  changes  String  source  target  Change  change  boolean  
[P3_Replace_Literal]^return source.matches ( target + "..*" ) ;^128^^^^^115^133^return source.matches ( target + "/.*" ) ;^[CLASS] ChangeSet  [METHOD] isDeletedLater [RETURN_TYPE] boolean   ArchiveEntry entry [VARIABLES] Iterator  it  ArchiveEntry  entry  Set  changes  String  source  target  Change  change  boolean  
[P2_Replace_Operator]^return source.matches ( target   instanceof   "/.*" ) ;^128^^^^^115^133^return source.matches ( target + "/.*" ) ;^[CLASS] ChangeSet  [METHOD] isDeletedLater [RETURN_TYPE] boolean   ArchiveEntry entry [VARIABLES] Iterator  it  ArchiveEntry  entry  Set  changes  String  source  target  Change  change  boolean  
[P2_Replace_Operator]^return source.matches ( target  ==  "/.*" ) ;^128^^^^^115^133^return source.matches ( target + "/.*" ) ;^[CLASS] ChangeSet  [METHOD] isDeletedLater [RETURN_TYPE] boolean   ArchiveEntry entry [VARIABLES] Iterator  it  ArchiveEntry  entry  Set  changes  String  source  target  Change  change  boolean  
[P2_Replace_Operator]^return source.matches ( target  <=  "/.*" ) ;^128^^^^^115^133^return source.matches ( target + "/.*" ) ;^[CLASS] ChangeSet  [METHOD] isDeletedLater [RETURN_TYPE] boolean   ArchiveEntry entry [VARIABLES] Iterator  it  ArchiveEntry  entry  Set  changes  String  source  target  Change  change  boolean  
[P3_Replace_Literal]^return source.matches ( target + "/" ) ;^128^^^^^115^133^return source.matches ( target + "/.*" ) ;^[CLASS] ChangeSet  [METHOD] isDeletedLater [RETURN_TYPE] boolean   ArchiveEntry entry [VARIABLES] Iterator  it  ArchiveEntry  entry  Set  changes  String  source  target  Change  change  boolean  
[P5_Replace_Variable]^for  ( Iterator it = change.iterator (  ) ; it.hasNext (  ) ; )  {^119^^^^^115^133^for  ( Iterator it = changes.iterator (  ) ; it.hasNext (  ) ; )  {^[CLASS] ChangeSet  [METHOD] isDeletedLater [RETURN_TYPE] boolean   ArchiveEntry entry [VARIABLES] Iterator  it  ArchiveEntry  entry  Set  changes  String  source  target  Change  change  boolean  
[P2_Replace_Operator]^if  ( change.type (  )  <= Change.TYPE_DELETE )  {^121^^^^^115^133^if  ( change.type (  )  == Change.TYPE_DELETE )  {^[CLASS] ChangeSet  [METHOD] isDeletedLater [RETURN_TYPE] boolean   ArchiveEntry entry [VARIABLES] Iterator  it  ArchiveEntry  entry  Set  changes  String  source  target  Change  change  boolean  
[P2_Replace_Operator]^return source.matches ( target  <<  "/.*" ) ;^128^^^^^115^133^return source.matches ( target + "/.*" ) ;^[CLASS] ChangeSet  [METHOD] isDeletedLater [RETURN_TYPE] boolean   ArchiveEntry entry [VARIABLES] Iterator  it  ArchiveEntry  entry  Set  changes  String  source  target  Change  change  boolean  
[P3_Replace_Literal]^return true;^132^^^^^115^133^return false;^[CLASS] ChangeSet  [METHOD] isDeletedLater [RETURN_TYPE] boolean   ArchiveEntry entry [VARIABLES] Iterator  it  ArchiveEntry  entry  Set  changes  String  source  target  Change  change  boolean  
[P7_Replace_Invocation]^out .closeArchiveEntry (  )  ;^137^^^^^135^140^out.putArchiveEntry ( entry ) ;^[CLASS] ChangeSet  [METHOD] copyStream [RETURN_TYPE] void   InputStream in ArchiveOutputStream out ArchiveEntry entry [VARIABLES] ArchiveEntry  entry  Set  changes  boolean  InputStream  in  ArchiveOutputStream  out  
[P14_Delete_Statement]^^137^138^^^^135^140^out.putArchiveEntry ( entry ) ; IOUtils.copy ( in, out ) ;^[CLASS] ChangeSet  [METHOD] copyStream [RETURN_TYPE] void   InputStream in ArchiveOutputStream out ArchiveEntry entry [VARIABLES] ArchiveEntry  entry  Set  changes  boolean  InputStream  in  ArchiveOutputStream  out  
[P11_Insert_Donor_Statement]^out.closeArchiveEntry (  ) ;out.putArchiveEntry ( entry ) ;^137^^^^^135^140^out.putArchiveEntry ( entry ) ;^[CLASS] ChangeSet  [METHOD] copyStream [RETURN_TYPE] void   InputStream in ArchiveOutputStream out ArchiveEntry entry [VARIABLES] ArchiveEntry  entry  Set  changes  boolean  InputStream  in  ArchiveOutputStream  out  
[P5_Replace_Variable]^IOUtils.copy (  out ) ;^138^^^^^135^140^IOUtils.copy ( in, out ) ;^[CLASS] ChangeSet  [METHOD] copyStream [RETURN_TYPE] void   InputStream in ArchiveOutputStream out ArchiveEntry entry [VARIABLES] ArchiveEntry  entry  Set  changes  boolean  InputStream  in  ArchiveOutputStream  out  
[P5_Replace_Variable]^IOUtils.copy ( in ) ;^138^^^^^135^140^IOUtils.copy ( in, out ) ;^[CLASS] ChangeSet  [METHOD] copyStream [RETURN_TYPE] void   InputStream in ArchiveOutputStream out ArchiveEntry entry [VARIABLES] ArchiveEntry  entry  Set  changes  boolean  InputStream  in  ArchiveOutputStream  out  
[P5_Replace_Variable]^IOUtils.copy ( out, in ) ;^138^^^^^135^140^IOUtils.copy ( in, out ) ;^[CLASS] ChangeSet  [METHOD] copyStream [RETURN_TYPE] void   InputStream in ArchiveOutputStream out ArchiveEntry entry [VARIABLES] ArchiveEntry  entry  Set  changes  boolean  InputStream  in  ArchiveOutputStream  out  
[P14_Delete_Statement]^^138^139^^^^135^140^IOUtils.copy ( in, out ) ; out.closeArchiveEntry (  ) ;^[CLASS] ChangeSet  [METHOD] copyStream [RETURN_TYPE] void   InputStream in ArchiveOutputStream out ArchiveEntry entry [VARIABLES] ArchiveEntry  entry  Set  changes  boolean  InputStream  in  ArchiveOutputStream  out  
[P7_Replace_Invocation]^out.putArchiveEntry (  ) ;^139^^^^^135^140^out.closeArchiveEntry (  ) ;^[CLASS] ChangeSet  [METHOD] copyStream [RETURN_TYPE] void   InputStream in ArchiveOutputStream out ArchiveEntry entry [VARIABLES] ArchiveEntry  entry  Set  changes  boolean  InputStream  in  ArchiveOutputStream  out  
[P14_Delete_Statement]^^139^^^^^135^140^out.closeArchiveEntry (  ) ;^[CLASS] ChangeSet  [METHOD] copyStream [RETURN_TYPE] void   InputStream in ArchiveOutputStream out ArchiveEntry entry [VARIABLES] ArchiveEntry  entry  Set  changes  boolean  InputStream  in  ArchiveOutputStream  out  
[P11_Insert_Donor_Statement]^out.putArchiveEntry ( entry ) ;out.closeArchiveEntry (  ) ;^139^^^^^135^140^out.closeArchiveEntry (  ) ;^[CLASS] ChangeSet  [METHOD] copyStream [RETURN_TYPE] void   InputStream in ArchiveOutputStream out ArchiveEntry entry [VARIABLES] ArchiveEntry  entry  Set  changes  boolean  InputStream  in  ArchiveOutputStream  out  
