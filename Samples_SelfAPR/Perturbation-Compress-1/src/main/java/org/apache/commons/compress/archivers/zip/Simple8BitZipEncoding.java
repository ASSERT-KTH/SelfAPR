[P1_Replace_Type]^public final int unicode;^53^^^^^48^58^public final char unicode;^[CLASS] Simple8BitZipEncoding Simple8BitChar   [VARIABLES] 
[P1_Replace_Type]^public final  int  code;^54^^^^^49^59^public final byte code;^[CLASS] Simple8BitZipEncoding Simple8BitChar   [VARIABLES] 
[P8_Replace_Mix]^public   long  code;^54^^^^^49^59^public final byte code;^[CLASS] Simple8BitZipEncoding Simple8BitChar   [VARIABLES] 
[P1_Replace_Type]^private final  LinkedHashSet  reverseMapping;^84^^^^^79^89^private final List reverseMapping;^[CLASS] Simple8BitZipEncoding Simple8BitChar   [VARIABLES] 
[P8_Replace_Mix]^this.code =  null;^57^^^^^56^59^this.code = code;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] <init> [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar(byte,char)   byte code char unicode [VARIABLES] char  unicode  List  reverseMapping  boolean  byte  code  char[]  highChars  
[P11_Insert_Donor_Statement]^this.unicode = unicode;this.code = code;^57^^^^^56^59^this.code = code;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] <init> [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar(byte,char)   byte code char unicode [VARIABLES] char  unicode  List  reverseMapping  boolean  byte  code  char[]  highChars  
[P8_Replace_Mix]^this.unicode =  null;^58^^^^^56^59^this.unicode = unicode;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] <init> [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar(byte,char)   byte code char unicode [VARIABLES] char  unicode  List  reverseMapping  boolean  byte  code  char[]  highChars  
[P11_Insert_Donor_Statement]^this.code = code;this.unicode = unicode;^58^^^^^56^59^this.unicode = unicode;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] <init> [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar(byte,char)   byte code char unicode [VARIABLES] char  unicode  List  reverseMapping  boolean  byte  code  char[]  highChars  
[P8_Replace_Mix]^this.highChars =  null;^91^^^^^90^102^this.highChars = highChars;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] <init> [RETURN_TYPE] Simple8BitZipEncoding(char[])   char[] highChars [VARIABLES] char  unicode  List  reverseMapping  boolean  byte  code  int  i  char[]  highChars  
[P1_Replace_Type]^this.reverseMapping = new Array Set  ( this.highChars.length ) ;^92^^^^^90^102^this.reverseMapping = new ArrayList ( this.highChars.length ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] <init> [RETURN_TYPE] Simple8BitZipEncoding(char[])   char[] highChars [VARIABLES] char  unicode  List  reverseMapping  boolean  byte  code  int  i  char[]  highChars  
[P5_Replace_Variable]^this.reverseMapping = new ArrayList ( this.highChars.i ) ;^92^^^^^90^102^this.reverseMapping = new ArrayList ( this.highChars.length ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] <init> [RETURN_TYPE] Simple8BitZipEncoding(char[])   char[] highChars [VARIABLES] char  unicode  List  reverseMapping  boolean  byte  code  int  i  char[]  highChars  
[P5_Replace_Variable]^this.reverseMapping = new ArrayList ( highChars.length ) ;^92^^^^^90^102^this.reverseMapping = new ArrayList ( this.highChars.length ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] <init> [RETURN_TYPE] Simple8BitZipEncoding(char[])   char[] highChars [VARIABLES] char  unicode  List  reverseMapping  boolean  byte  code  int  i  char[]  highChars  
[P8_Replace_Mix]^this.reverseMapping = new Array LinkedHashSet  ( this.highChars.length ) ;^92^^^^^90^102^this.reverseMapping = new ArrayList ( this.highChars.length ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] <init> [RETURN_TYPE] Simple8BitZipEncoding(char[])   char[] highChars [VARIABLES] char  unicode  List  reverseMapping  boolean  byte  code  int  i  char[]  highChars  
[P1_Replace_Type]^this.reverseMapping = new  LinkedList  ( this.highChars.length ) ;^92^^^^^90^102^this.reverseMapping = new ArrayList ( this.highChars.length ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] <init> [RETURN_TYPE] Simple8BitZipEncoding(char[])   char[] highChars [VARIABLES] char  unicode  List  reverseMapping  boolean  byte  code  int  i  char[]  highChars  
[P1_Replace_Type]^int  code = 127;^94^^^^^90^102^byte code = 127;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] <init> [RETURN_TYPE] Simple8BitZipEncoding(char[])   char[] highChars [VARIABLES] char  unicode  List  reverseMapping  boolean  byte  code  int  i  char[]  highChars  
[P3_Replace_Literal]^byte code = i;^94^^^^^90^102^byte code = 127;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] <init> [RETURN_TYPE] Simple8BitZipEncoding(char[])   char[] highChars [VARIABLES] char  unicode  List  reverseMapping  boolean  byte  code  int  i  char[]  highChars  
[P1_Replace_Type]^for  (  long  i = 0; i < this.highChars.length; ++i )  {^96^^^^^90^102^for  ( int i = 0; i < this.highChars.length; ++i )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] <init> [RETURN_TYPE] Simple8BitZipEncoding(char[])   char[] highChars [VARIABLES] char  unicode  List  reverseMapping  boolean  byte  code  int  i  char[]  highChars  
[P2_Replace_Operator]^for  ( int i = 0; i == this.highChars.length; ++i )  {^96^^^^^90^102^for  ( int i = 0; i < this.highChars.length; ++i )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] <init> [RETURN_TYPE] Simple8BitZipEncoding(char[])   char[] highChars [VARIABLES] char  unicode  List  reverseMapping  boolean  byte  code  int  i  char[]  highChars  
[P3_Replace_Literal]^for  ( int i = -8; i < this.highChars.length; ++i )  {^96^^^^^90^102^for  ( int i = 0; i < this.highChars.length; ++i )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] <init> [RETURN_TYPE] Simple8BitZipEncoding(char[])   char[] highChars [VARIABLES] char  unicode  List  reverseMapping  boolean  byte  code  int  i  char[]  highChars  
[P5_Replace_Variable]^for  ( int i = 0; i < highChars.length; ++i )  {^96^^^^^90^102^for  ( int i = 0; i < this.highChars.length; ++i )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] <init> [RETURN_TYPE] Simple8BitZipEncoding(char[])   char[] highChars [VARIABLES] char  unicode  List  reverseMapping  boolean  byte  code  int  i  char[]  highChars  
[P5_Replace_Variable]^for  ( this.highCharsnt i = 0; i < i.length; ++i )  {^96^^^^^90^102^for  ( int i = 0; i < this.highChars.length; ++i )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] <init> [RETURN_TYPE] Simple8BitZipEncoding(char[])   char[] highChars [VARIABLES] char  unicode  List  reverseMapping  boolean  byte  code  int  i  char[]  highChars  
[P5_Replace_Variable]^this.reverseMapping.add ( new Simple8BitChar ( ++code, highChars[i] )  ) ;^97^98^^^^90^102^this.reverseMapping.add ( new Simple8BitChar ( ++code, this.highChars[i] )  ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] <init> [RETURN_TYPE] Simple8BitZipEncoding(char[])   char[] highChars [VARIABLES] char  unicode  List  reverseMapping  boolean  byte  code  int  i  char[]  highChars  
[P5_Replace_Variable]^this.reverseMapping.add ( new Simple8BitChar ( ++code[i] )  ) ;^97^98^^^^90^102^this.reverseMapping.add ( new Simple8BitChar ( ++code, this.highChars[i] )  ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] <init> [RETURN_TYPE] Simple8BitZipEncoding(char[])   char[] highChars [VARIABLES] char  unicode  List  reverseMapping  boolean  byte  code  int  i  char[]  highChars  
[P7_Replace_Invocation]^this.reverseMapping.get ( new Simple8BitChar ( ++code, this.highChars[i] )  ) ;^97^98^^^^90^102^this.reverseMapping.add ( new Simple8BitChar ( ++code, this.highChars[i] )  ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] <init> [RETURN_TYPE] Simple8BitZipEncoding(char[])   char[] highChars [VARIABLES] char  unicode  List  reverseMapping  boolean  byte  code  int  i  char[]  highChars  
[P14_Delete_Statement]^^97^98^^^^90^102^this.reverseMapping.add ( new Simple8BitChar ( ++code, this.highChars[i] )  ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] <init> [RETURN_TYPE] Simple8BitZipEncoding(char[])   char[] highChars [VARIABLES] char  unicode  List  reverseMapping  boolean  byte  code  int  i  char[]  highChars  
[P1_Replace_Type]^for  (  short  i = 0; i < this.highChars.length; ++i )  {^96^^^^^90^102^for  ( int i = 0; i < this.highChars.length; ++i )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] <init> [RETURN_TYPE] Simple8BitZipEncoding(char[])   char[] highChars [VARIABLES] char  unicode  List  reverseMapping  boolean  byte  code  int  i  char[]  highChars  
[P3_Replace_Literal]^for  ( int i = i; i < this.highChars.length; ++i )  {^96^^^^^90^102^for  ( int i = 0; i < this.highChars.length; ++i )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] <init> [RETURN_TYPE] Simple8BitZipEncoding(char[])   char[] highChars [VARIABLES] char  unicode  List  reverseMapping  boolean  byte  code  int  i  char[]  highChars  
[P5_Replace_Variable]^Collections.sort ( reverseMapping ) ;^101^^^^^90^102^Collections.sort ( this.reverseMapping ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] <init> [RETURN_TYPE] Simple8BitZipEncoding(char[])   char[] highChars [VARIABLES] char  unicode  List  reverseMapping  boolean  byte  code  int  i  char[]  highChars  
[P14_Delete_Statement]^^101^^^^^90^102^Collections.sort ( this.reverseMapping ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] <init> [RETURN_TYPE] Simple8BitZipEncoding(char[])   char[] highChars [VARIABLES] char  unicode  List  reverseMapping  boolean  byte  code  int  i  char[]  highChars  
[P11_Insert_Donor_Statement]^Simple8BitChar r =  ( Simple8BitChar )  this.reverseMapping.get ( i0 ) ;Simple8BitChar a =  ( Simple8BitChar )  o;^62^^^^^61^65^Simple8BitChar a =  ( Simple8BitChar )  o;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] compareTo [RETURN_TYPE] int   Object o [VARIABLES] Simple8BitChar  a  boolean  byte  code  char  unicode  List  reverseMapping  Object  o  char[]  highChars  
[P11_Insert_Donor_Statement]^Simple8BitChar m =  ( Simple8BitChar )  this.reverseMapping.get ( i ) ;Simple8BitChar a =  ( Simple8BitChar )  o;^62^^^^^61^65^Simple8BitChar a =  ( Simple8BitChar )  o;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] compareTo [RETURN_TYPE] int   Object o [VARIABLES] Simple8BitChar  a  boolean  byte  code  char  unicode  List  reverseMapping  Object  o  char[]  highChars  
[P11_Insert_Donor_Statement]^Simple8BitChar r = this.encodeHighChar ( c ) ;Simple8BitChar a =  ( Simple8BitChar )  o;^62^^^^^61^65^Simple8BitChar a =  ( Simple8BitChar )  o;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] compareTo [RETURN_TYPE] int   Object o [VARIABLES] Simple8BitChar  a  boolean  byte  code  char  unicode  List  reverseMapping  Object  o  char[]  highChars  
[P2_Replace_Operator]^return this.unicode  |  a.unicode;^64^^^^^61^65^return this.unicode - a.unicode;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] compareTo [RETURN_TYPE] int   Object o [VARIABLES] Simple8BitChar  a  boolean  byte  code  char  unicode  List  reverseMapping  Object  o  char[]  highChars  
[P5_Replace_Variable]^return unicode - a.unicode;^64^^^^^61^65^return this.unicode - a.unicode;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] compareTo [RETURN_TYPE] int   Object o [VARIABLES] Simple8BitChar  a  boolean  byte  code  char  unicode  List  reverseMapping  Object  o  char[]  highChars  
[P5_Replace_Variable]^return this.unicode - a.unicode.unicode;^64^^^^^61^65^return this.unicode - a.unicode;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] compareTo [RETURN_TYPE] int   Object o [VARIABLES] Simple8BitChar  a  boolean  byte  code  char  unicode  List  reverseMapping  Object  o  char[]  highChars  
[P5_Replace_Variable]^return a.unicode - this.unicode;^64^^^^^61^65^return this.unicode - a.unicode;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] compareTo [RETURN_TYPE] int   Object o [VARIABLES] Simple8BitChar  a  boolean  byte  code  char  unicode  List  reverseMapping  Object  o  char[]  highChars  
[P8_Replace_Mix]^returnunicode - unicode;^64^^^^^61^65^return this.unicode - a.unicode;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] compareTo [RETURN_TYPE] int   Object o [VARIABLES] Simple8BitChar  a  boolean  byte  code  char  unicode  List  reverseMapping  Object  o  char[]  highChars  
[P1_Replace_Type]^return "0x" + Integer.toHexchar ( 0xffff & unicode ) + "->0x" + Integer.toHexchar ( 0xff & code ) ;^68^69^^^^67^70^return "0x" + Integer.toHexString ( 0xffff & unicode ) + "->0x" + Integer.toHexString ( 0xff & code ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] char  unicode  List  reverseMapping  boolean  byte  code  char[]  highChars  
[P2_Replace_Operator]^return "0x" + Integer.toHexString ( 0xffff  ||  unicode ) + "->0x" + Integer.toHexString ( 0xff & code ) ;^68^69^^^^67^70^return "0x" + Integer.toHexString ( 0xffff & unicode ) + "->0x" + Integer.toHexString ( 0xff & code ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] char  unicode  List  reverseMapping  boolean  byte  code  char[]  highChars  
[P2_Replace_Operator]^return "0x" + Integer.toHexString ( 0xffff  ^  unicode ) + "->0x" + Integer.toHexString ( 0xff & code ) ;^68^69^^^^67^70^return "0x" + Integer.toHexString ( 0xffff & unicode ) + "->0x" + Integer.toHexString ( 0xff & code ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] char  unicode  List  reverseMapping  boolean  byte  code  char[]  highChars  
[P3_Replace_Literal]^return "0x0" + Integer.toHexString ( 0xffff & unicode ) + "->0x" + Integer.toHexString ( 0xff & code ) ;^68^69^^^^67^70^return "0x" + Integer.toHexString ( 0xffff & unicode ) + "->0x" + Integer.toHexString ( 0xff & code ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] char  unicode  List  reverseMapping  boolean  byte  code  char[]  highChars  
[P3_Replace_Literal]^return "0x" + Integer.toHexString ( 0xffff & unicode ) + "->>0x" + Integer.toHexString ( 0xff & code ) ;^68^69^^^^67^70^return "0x" + Integer.toHexString ( 0xffff & unicode ) + "->0x" + Integer.toHexString ( 0xff & code ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] char  unicode  List  reverseMapping  boolean  byte  code  char[]  highChars  
[P5_Replace_Variable]^return "0x" + Integer.toHexString ( 0xffff & code ) + "->0x" + Integer.toHexString ( 0xff & unicode ) ;^68^69^^^^67^70^return "0x" + Integer.toHexString ( 0xffff & unicode ) + "->0x" + Integer.toHexString ( 0xff & code ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] char  unicode  List  reverseMapping  boolean  byte  code  char[]  highChars  
[P8_Replace_Mix]^return false ;^68^69^^^^67^70^return "0x" + Integer.toHexString ( 0xffff & unicode ) + "->0x" + Integer.toHexString ( 0xff & code ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] char  unicode  List  reverseMapping  boolean  byte  code  char[]  highChars  
[P14_Delete_Statement]^^68^69^^^^67^70^return "0x" + Integer.toHexString ( 0xffff & unicode ) + "->0x" + Integer.toHexString ( 0xff & code ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] char  unicode  List  reverseMapping  boolean  byte  code  char[]  highChars  
[P2_Replace_Operator]^+ "->0x" + Integer.toHexString ( 0xff  <  code ) ;^69^^^^^67^70^+ "->0x" + Integer.toHexString ( 0xff & code ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] char  unicode  List  reverseMapping  boolean  byte  code  char[]  highChars  
[P14_Delete_Statement]^^69^^^^^67^70^+ "->0x" + Integer.toHexString ( 0xff & code ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] char  unicode  List  reverseMapping  boolean  byte  code  char[]  highChars  
[P2_Replace_Operator]^if  ( b > 0 )  {^112^^^^^110^118^if  ( b >= 0 )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] decodeByte [RETURN_TYPE] char   byte b [VARIABLES] char  unicode  List  reverseMapping  boolean  byte  b  code  char[]  highChars  
[P3_Replace_Literal]^if  ( b >= -8 )  {^112^^^^^110^118^if  ( b >= 0 )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] decodeByte [RETURN_TYPE] char   byte b [VARIABLES] char  unicode  List  reverseMapping  boolean  byte  b  code  char[]  highChars  
[P5_Replace_Variable]^if  ( code >= 0 )  {^112^^^^^110^118^if  ( b >= 0 )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] decodeByte [RETURN_TYPE] char   byte b [VARIABLES] char  unicode  List  reverseMapping  boolean  byte  b  code  char[]  highChars  
[P8_Replace_Mix]^if  ( b >= 0 * 3 )  {^112^^^^^110^118^if  ( b >= 0 )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] decodeByte [RETURN_TYPE] char   byte b [VARIABLES] char  unicode  List  reverseMapping  boolean  byte  b  code  char[]  highChars  
[P9_Replace_Statement]^if  ( r == null )  {^112^^^^^110^118^if  ( b >= 0 )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] decodeByte [RETURN_TYPE] char   byte b [VARIABLES] char  unicode  List  reverseMapping  boolean  byte  b  code  char[]  highChars  
[P15_Unwrap_Block]^return ((char) (b));^112^113^114^^^110^118^if  ( b >= 0 )  { return  ( char )  b; }^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] decodeByte [RETURN_TYPE] char   byte b [VARIABLES] char  unicode  List  reverseMapping  boolean  byte  b  code  char[]  highChars  
[P16_Remove_Block]^^112^113^114^^^110^118^if  ( b >= 0 )  { return  ( char )  b; }^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] decodeByte [RETURN_TYPE] char   byte b [VARIABLES] char  unicode  List  reverseMapping  boolean  byte  b  code  char[]  highChars  
[P13_Insert_Block]^if  ( r == null )  {     return false; }^112^^^^^110^118^[Delete]^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] decodeByte [RETURN_TYPE] char   byte b [VARIABLES] char  unicode  List  reverseMapping  boolean  byte  b  code  char[]  highChars  
[P1_Replace_Type]^return  ( int )  b;^113^^^^^110^118^return  ( char )  b;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] decodeByte [RETURN_TYPE] char   byte b [VARIABLES] char  unicode  List  reverseMapping  boolean  byte  b  code  char[]  highChars  
[P5_Replace_Variable]^return this.highChars[128 + code];^117^^^^^110^118^return this.highChars[128 + b];^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] decodeByte [RETURN_TYPE] char   byte b [VARIABLES] char  unicode  List  reverseMapping  boolean  byte  b  code  char[]  highChars  
[P5_Replace_Variable]^return highChars[128 + b];^117^^^^^110^118^return this.highChars[128 + b];^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] decodeByte [RETURN_TYPE] char   byte b [VARIABLES] char  unicode  List  reverseMapping  boolean  byte  b  code  char[]  highChars  
[P5_Replace_Variable]^return b[128 + this.highChars];^117^^^^^110^118^return this.highChars[128 + b];^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] decodeByte [RETURN_TYPE] char   byte b [VARIABLES] char  unicode  List  reverseMapping  boolean  byte  b  code  char[]  highChars  
[P8_Replace_Mix]^return highChars[4  |  b];^117^^^^^110^118^return this.highChars[128 + b];^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] decodeByte [RETURN_TYPE] char   byte b [VARIABLES] char  unicode  List  reverseMapping  boolean  byte  b  code  char[]  highChars  
[P2_Replace_Operator]^if  ( c >= 0 || c < 128 )  {^126^^^^^124^132^if  ( c >= 0 && c < 128 )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] canEncodeChar [RETURN_TYPE] boolean   char c [VARIABLES] char  c  unicode  List  reverseMapping  Simple8BitChar  r  boolean  byte  b  code  char[]  highChars  
[P2_Replace_Operator]^if  ( c > 0 && c < 128 )  {^126^^^^^124^132^if  ( c >= 0 && c < 128 )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] canEncodeChar [RETURN_TYPE] boolean   char c [VARIABLES] char  c  unicode  List  reverseMapping  Simple8BitChar  r  boolean  byte  b  code  char[]  highChars  
[P2_Replace_Operator]^if  ( c >= 0 && c <= 128 )  {^126^^^^^124^132^if  ( c >= 0 && c < 128 )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] canEncodeChar [RETURN_TYPE] boolean   char c [VARIABLES] char  c  unicode  List  reverseMapping  Simple8BitChar  r  boolean  byte  b  code  char[]  highChars  
[P3_Replace_Literal]^if  ( c >= 4 && c < 128 )  {^126^^^^^124^132^if  ( c >= 0 && c < 128 )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] canEncodeChar [RETURN_TYPE] boolean   char c [VARIABLES] char  c  unicode  List  reverseMapping  Simple8BitChar  r  boolean  byte  b  code  char[]  highChars  
[P3_Replace_Literal]^if  ( c >= 0 && c < 122 )  {^126^^^^^124^132^if  ( c >= 0 && c < 128 )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] canEncodeChar [RETURN_TYPE] boolean   char c [VARIABLES] char  c  unicode  List  reverseMapping  Simple8BitChar  r  boolean  byte  b  code  char[]  highChars  
[P5_Replace_Variable]^if  ( unicode >= 0 && c < 128 )  {^126^^^^^124^132^if  ( c >= 0 && c < 128 )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] canEncodeChar [RETURN_TYPE] boolean   char c [VARIABLES] char  c  unicode  List  reverseMapping  Simple8BitChar  r  boolean  byte  b  code  char[]  highChars  
[P6_Replace_Expression]^if  ( c >= 0 ) {^126^^^^^124^132^if  ( c >= 0 && c < 128 )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] canEncodeChar [RETURN_TYPE] boolean   char c [VARIABLES] char  c  unicode  List  reverseMapping  Simple8BitChar  r  boolean  byte  b  code  char[]  highChars  
[P6_Replace_Expression]^if  (  c < 128 )  {^126^^^^^124^132^if  ( c >= 0 && c < 128 )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] canEncodeChar [RETURN_TYPE] boolean   char c [VARIABLES] char  c  unicode  List  reverseMapping  Simple8BitChar  r  boolean  byte  b  code  char[]  highChars  
[P15_Unwrap_Block]^return true;^126^127^128^^^124^132^if  ( c >= 0 && c < 128 )  { return true; }^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] canEncodeChar [RETURN_TYPE] boolean   char c [VARIABLES] char  c  unicode  List  reverseMapping  Simple8BitChar  r  boolean  byte  b  code  char[]  highChars  
[P16_Remove_Block]^^126^127^128^^^124^132^if  ( c >= 0 && c < 128 )  { return true; }^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] canEncodeChar [RETURN_TYPE] boolean   char c [VARIABLES] char  c  unicode  List  reverseMapping  Simple8BitChar  r  boolean  byte  b  code  char[]  highChars  
[P13_Insert_Block]^if  (  ( c >= 0 )  &&  ( c < 128 )  )  {     bb.put (  (  ( byte )   ( c )  )  ) ;     return true; }^126^^^^^124^132^[Delete]^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] canEncodeChar [RETURN_TYPE] boolean   char c [VARIABLES] char  c  unicode  List  reverseMapping  Simple8BitChar  r  boolean  byte  b  code  char[]  highChars  
[P13_Insert_Block]^if  ( ! ( this.canEncodeChar ( c )  )  )  {     return false; }^126^^^^^124^132^[Delete]^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] canEncodeChar [RETURN_TYPE] boolean   char c [VARIABLES] char  c  unicode  List  reverseMapping  Simple8BitChar  r  boolean  byte  b  code  char[]  highChars  
[P13_Insert_Block]^if  ( r == null )  {     return false; }^126^^^^^124^132^[Delete]^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] canEncodeChar [RETURN_TYPE] boolean   char c [VARIABLES] char  c  unicode  List  reverseMapping  Simple8BitChar  r  boolean  byte  b  code  char[]  highChars  
[P13_Insert_Block]^if  (  ( r.unicode )  != c )  {     return null; }^126^^^^^124^132^[Delete]^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] canEncodeChar [RETURN_TYPE] boolean   char c [VARIABLES] char  c  unicode  List  reverseMapping  Simple8BitChar  r  boolean  byte  b  code  char[]  highChars  
[P13_Insert_Block]^if  (  ( m.unicode )  == c )  {     return m; }^126^^^^^124^132^[Delete]^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] canEncodeChar [RETURN_TYPE] boolean   char c [VARIABLES] char  c  unicode  List  reverseMapping  Simple8BitChar  r  boolean  byte  b  code  char[]  highChars  
[P3_Replace_Literal]^return false;^127^^^^^124^132^return true;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] canEncodeChar [RETURN_TYPE] boolean   char c [VARIABLES] char  c  unicode  List  reverseMapping  Simple8BitChar  r  boolean  byte  b  code  char[]  highChars  
[P5_Replace_Variable]^Simple8BitChar r = this.encodeHighChar ( unicode ) ;^130^^^^^124^132^Simple8BitChar r = this.encodeHighChar ( c ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] canEncodeChar [RETURN_TYPE] boolean   char c [VARIABLES] char  c  unicode  List  reverseMapping  Simple8BitChar  r  boolean  byte  b  code  char[]  highChars  
[P7_Replace_Invocation]^Simple8BitChar r = this.canEncodeChar ( c ) ;^130^^^^^124^132^Simple8BitChar r = this.encodeHighChar ( c ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] canEncodeChar [RETURN_TYPE] boolean   char c [VARIABLES] char  c  unicode  List  reverseMapping  Simple8BitChar  r  boolean  byte  b  code  char[]  highChars  
[P7_Replace_Invocation]^Simple8BitChar r = this .canEncodeChar ( unicode )  ;^130^^^^^124^132^Simple8BitChar r = this.encodeHighChar ( c ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] canEncodeChar [RETURN_TYPE] boolean   char c [VARIABLES] char  c  unicode  List  reverseMapping  Simple8BitChar  r  boolean  byte  b  code  char[]  highChars  
[P11_Insert_Donor_Statement]^Simple8BitChar a =  ( Simple8BitChar )  o;Simple8BitChar r = this.encodeHighChar ( c ) ;^130^^^^^124^132^Simple8BitChar r = this.encodeHighChar ( c ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] canEncodeChar [RETURN_TYPE] boolean   char c [VARIABLES] char  c  unicode  List  reverseMapping  Simple8BitChar  r  boolean  byte  b  code  char[]  highChars  
[P14_Delete_Statement]^^130^^^^^124^132^Simple8BitChar r = this.encodeHighChar ( c ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] canEncodeChar [RETURN_TYPE] boolean   char c [VARIABLES] char  c  unicode  List  reverseMapping  Simple8BitChar  r  boolean  byte  b  code  char[]  highChars  
[P2_Replace_Operator]^return r == null;^131^^^^^124^132^return r != null;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] canEncodeChar [RETURN_TYPE] boolean   char c [VARIABLES] char  c  unicode  List  reverseMapping  Simple8BitChar  r  boolean  byte  b  code  char[]  highChars  
[P8_Replace_Mix]^return true ;^131^^^^^124^132^return r != null;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] canEncodeChar [RETURN_TYPE] boolean   char c [VARIABLES] char  c  unicode  List  reverseMapping  Simple8BitChar  r  boolean  byte  b  code  char[]  highChars  
[P2_Replace_Operator]^if  ( c >= 0 || c < 128 )  {^145^^^^^143^156^if  ( c >= 0 && c < 128 )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] pushEncodedChar [RETURN_TYPE] boolean   ByteBuffer bb char c [VARIABLES] Simple8BitChar  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  ByteBuffer  bb  char[]  highChars  
[P2_Replace_Operator]^if  ( c == 0 && c < 128 )  {^145^^^^^143^156^if  ( c >= 0 && c < 128 )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] pushEncodedChar [RETURN_TYPE] boolean   ByteBuffer bb char c [VARIABLES] Simple8BitChar  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  ByteBuffer  bb  char[]  highChars  
[P2_Replace_Operator]^if  ( c >= 0 && c <= 128 )  {^145^^^^^143^156^if  ( c >= 0 && c < 128 )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] pushEncodedChar [RETURN_TYPE] boolean   ByteBuffer bb char c [VARIABLES] Simple8BitChar  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  ByteBuffer  bb  char[]  highChars  
[P3_Replace_Literal]^if  ( c >= -5 && c < 128 )  {^145^^^^^143^156^if  ( c >= 0 && c < 128 )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] pushEncodedChar [RETURN_TYPE] boolean   ByteBuffer bb char c [VARIABLES] Simple8BitChar  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  ByteBuffer  bb  char[]  highChars  
[P3_Replace_Literal]^if  ( c >= 0 && c < 125 )  {^145^^^^^143^156^if  ( c >= 0 && c < 128 )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] pushEncodedChar [RETURN_TYPE] boolean   ByteBuffer bb char c [VARIABLES] Simple8BitChar  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  ByteBuffer  bb  char[]  highChars  
[P5_Replace_Variable]^if  ( unicode >= 0 && c < 128 )  {^145^^^^^143^156^if  ( c >= 0 && c < 128 )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] pushEncodedChar [RETURN_TYPE] boolean   ByteBuffer bb char c [VARIABLES] Simple8BitChar  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  ByteBuffer  bb  char[]  highChars  
[P6_Replace_Expression]^if  ( c >= 0 ) {^145^^^^^143^156^if  ( c >= 0 && c < 128 )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] pushEncodedChar [RETURN_TYPE] boolean   ByteBuffer bb char c [VARIABLES] Simple8BitChar  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  ByteBuffer  bb  char[]  highChars  
[P6_Replace_Expression]^if  (  c < 128 )  {^145^^^^^143^156^if  ( c >= 0 && c < 128 )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] pushEncodedChar [RETURN_TYPE] boolean   ByteBuffer bb char c [VARIABLES] Simple8BitChar  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  ByteBuffer  bb  char[]  highChars  
[P8_Replace_Mix]^if  ( c >= 0 - 4 ) {^145^^^^^143^156^if  ( c >= 0 && c < 128 )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] pushEncodedChar [RETURN_TYPE] boolean   ByteBuffer bb char c [VARIABLES] Simple8BitChar  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  ByteBuffer  bb  char[]  highChars  
[P15_Unwrap_Block]^bb.put(((byte) (c))); return true;^145^146^147^148^^143^156^if  ( c >= 0 && c < 128 )  { bb.put (  ( byte )  c ) ; return true; }^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] pushEncodedChar [RETURN_TYPE] boolean   ByteBuffer bb char c [VARIABLES] Simple8BitChar  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  ByteBuffer  bb  char[]  highChars  
[P16_Remove_Block]^^145^146^147^148^^143^156^if  ( c >= 0 && c < 128 )  { bb.put (  ( byte )  c ) ; return true; }^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] pushEncodedChar [RETURN_TYPE] boolean   ByteBuffer bb char c [VARIABLES] Simple8BitChar  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  ByteBuffer  bb  char[]  highChars  
[P13_Insert_Block]^if  (  ( c >= 0 )  &&  ( c < 128 )  )  {     return true; }^145^^^^^143^156^[Delete]^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] pushEncodedChar [RETURN_TYPE] boolean   ByteBuffer bb char c [VARIABLES] Simple8BitChar  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  ByteBuffer  bb  char[]  highChars  
[P3_Replace_Literal]^return false;^147^^^^^143^156^return true;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] pushEncodedChar [RETURN_TYPE] boolean   ByteBuffer bb char c [VARIABLES] Simple8BitChar  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  ByteBuffer  bb  char[]  highChars  
[P14_Delete_Statement]^^146^^^^^143^156^bb.put (  ( byte )  c ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] pushEncodedChar [RETURN_TYPE] boolean   ByteBuffer bb char c [VARIABLES] Simple8BitChar  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  ByteBuffer  bb  char[]  highChars  
[P11_Insert_Donor_Statement]^bb.put ( r.code ) ;bb.put (  ( byte )  c ) ;^146^^^^^143^156^bb.put (  ( byte )  c ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] pushEncodedChar [RETURN_TYPE] boolean   ByteBuffer bb char c [VARIABLES] Simple8BitChar  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  ByteBuffer  bb  char[]  highChars  
[P8_Replace_Mix]^bb .allocate ( 2 )  ;^146^^^^^143^156^bb.put (  ( byte )  c ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] pushEncodedChar [RETURN_TYPE] boolean   ByteBuffer bb char c [VARIABLES] Simple8BitChar  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  ByteBuffer  bb  char[]  highChars  
[P14_Delete_Statement]^^146^147^^^^143^156^bb.put (  ( byte )  c ) ; return true;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] pushEncodedChar [RETURN_TYPE] boolean   ByteBuffer bb char c [VARIABLES] Simple8BitChar  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  ByteBuffer  bb  char[]  highChars  
[P5_Replace_Variable]^Simple8BitChar r = this.encodeHighChar ( unicode ) ;^150^^^^^143^156^Simple8BitChar r = this.encodeHighChar ( c ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] pushEncodedChar [RETURN_TYPE] boolean   ByteBuffer bb char c [VARIABLES] Simple8BitChar  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  ByteBuffer  bb  char[]  highChars  
[P7_Replace_Invocation]^Simple8BitChar r = this.canEncodeChar ( c ) ;^150^^^^^143^156^Simple8BitChar r = this.encodeHighChar ( c ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] pushEncodedChar [RETURN_TYPE] boolean   ByteBuffer bb char c [VARIABLES] Simple8BitChar  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  ByteBuffer  bb  char[]  highChars  
[P11_Insert_Donor_Statement]^Simple8BitChar a =  ( Simple8BitChar )  o;Simple8BitChar r = this.encodeHighChar ( c ) ;^150^^^^^143^156^Simple8BitChar r = this.encodeHighChar ( c ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] pushEncodedChar [RETURN_TYPE] boolean   ByteBuffer bb char c [VARIABLES] Simple8BitChar  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  ByteBuffer  bb  char[]  highChars  
[P14_Delete_Statement]^^150^^^^^143^156^Simple8BitChar r = this.encodeHighChar ( c ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] pushEncodedChar [RETURN_TYPE] boolean   ByteBuffer bb char c [VARIABLES] Simple8BitChar  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  ByteBuffer  bb  char[]  highChars  
[P2_Replace_Operator]^if  ( r != null )  {^151^^^^^143^156^if  ( r == null )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] pushEncodedChar [RETURN_TYPE] boolean   ByteBuffer bb char c [VARIABLES] Simple8BitChar  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  ByteBuffer  bb  char[]  highChars  
[P8_Replace_Mix]^if  ( r == this )  {^151^^^^^143^156^if  ( r == null )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] pushEncodedChar [RETURN_TYPE] boolean   ByteBuffer bb char c [VARIABLES] Simple8BitChar  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  ByteBuffer  bb  char[]  highChars  
[P9_Replace_Statement]^if  ( b >= 0 )  {^151^^^^^143^156^if  ( r == null )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] pushEncodedChar [RETURN_TYPE] boolean   ByteBuffer bb char c [VARIABLES] Simple8BitChar  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  ByteBuffer  bb  char[]  highChars  
[P15_Unwrap_Block]^return false;^151^152^153^^^143^156^if  ( r == null )  { return false; }^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] pushEncodedChar [RETURN_TYPE] boolean   ByteBuffer bb char c [VARIABLES] Simple8BitChar  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  ByteBuffer  bb  char[]  highChars  
[P16_Remove_Block]^^151^152^153^^^143^156^if  ( r == null )  { return false; }^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] pushEncodedChar [RETURN_TYPE] boolean   ByteBuffer bb char c [VARIABLES] Simple8BitChar  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  ByteBuffer  bb  char[]  highChars  
[P13_Insert_Block]^if  ( ! ( this.canEncodeChar ( c )  )  )  {     return false; }^151^^^^^143^156^[Delete]^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] pushEncodedChar [RETURN_TYPE] boolean   ByteBuffer bb char c [VARIABLES] Simple8BitChar  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  ByteBuffer  bb  char[]  highChars  
[P13_Insert_Block]^if  (  ( r.unicode )  != c )  {     return null; }^151^^^^^143^156^[Delete]^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] pushEncodedChar [RETURN_TYPE] boolean   ByteBuffer bb char c [VARIABLES] Simple8BitChar  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  ByteBuffer  bb  char[]  highChars  
[P13_Insert_Block]^if  (  ( c >= 0 )  &&  ( c < 128 )  )  {     return true; }^151^^^^^143^156^[Delete]^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] pushEncodedChar [RETURN_TYPE] boolean   ByteBuffer bb char c [VARIABLES] Simple8BitChar  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  ByteBuffer  bb  char[]  highChars  
[P13_Insert_Block]^if  ( b >= 0 )  {     return  (  ( char )   ( b )  ) ; }^151^^^^^143^156^[Delete]^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] pushEncodedChar [RETURN_TYPE] boolean   ByteBuffer bb char c [VARIABLES] Simple8BitChar  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  ByteBuffer  bb  char[]  highChars  
[P3_Replace_Literal]^return true;^152^^^^^143^156^return false;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] pushEncodedChar [RETURN_TYPE] boolean   ByteBuffer bb char c [VARIABLES] Simple8BitChar  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  ByteBuffer  bb  char[]  highChars  
[P5_Replace_Variable]^bb.put ( code ) ;^154^^^^^143^156^bb.put ( r.code ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] pushEncodedChar [RETURN_TYPE] boolean   ByteBuffer bb char c [VARIABLES] Simple8BitChar  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  ByteBuffer  bb  char[]  highChars  
[P5_Replace_Variable]^bb.put ( r.code.code ) ;^154^^^^^143^156^bb.put ( r.code ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] pushEncodedChar [RETURN_TYPE] boolean   ByteBuffer bb char c [VARIABLES] Simple8BitChar  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  ByteBuffer  bb  char[]  highChars  
[P14_Delete_Statement]^^154^155^^^^143^156^bb.put ( r.code ) ; return true;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] pushEncodedChar [RETURN_TYPE] boolean   ByteBuffer bb char c [VARIABLES] Simple8BitChar  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  ByteBuffer  bb  char[]  highChars  
[P11_Insert_Donor_Statement]^bb.put (  ( byte )  c ) ;bb.put ( r.code ) ;^154^^^^^143^156^bb.put ( r.code ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] pushEncodedChar [RETURN_TYPE] boolean   ByteBuffer bb char c [VARIABLES] Simple8BitChar  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  ByteBuffer  bb  char[]  highChars  
[P3_Replace_Literal]^return false;^155^^^^^143^156^return true;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] pushEncodedChar [RETURN_TYPE] boolean   ByteBuffer bb char c [VARIABLES] Simple8BitChar  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  ByteBuffer  bb  char[]  highChars  
[P1_Replace_Type]^long  i0 = 0;^167^^^^^152^182^int i0 = 0;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P3_Replace_Literal]^int i6 = 6;^167^^^^^152^182^int i0 = 0;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P1_Replace_Type]^long  i1 = this.reverseMapping.size (  ) ;^168^^^^^153^183^int i1 = this.reverseMapping.size (  ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P3_Replace_Literal]^int i1 = this.reverseMapping.size() + 2 ;^168^^^^^153^183^int i1 = this.reverseMapping.size (  ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P5_Replace_Variable]^int i1 = reverseMapping.size (  ) ;^168^^^^^153^183^int i1 = this.reverseMapping.size (  ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P12_Insert_Condition]^if  ( i0 >= this.reverseMapping.size (  )  )  { int i1 = this.reverseMapping.size (  ) ; }^168^^^^^153^183^int i1 = this.reverseMapping.size (  ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P3_Replace_Literal]^int i1 = this.reverseMapping.size() + 8 ;^168^^^^^153^183^int i1 = this.reverseMapping.size (  ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P14_Delete_Statement]^^168^^^^^153^183^int i1 = this.reverseMapping.size (  ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P2_Replace_Operator]^while  ( i1 >= i0 )  {^170^^^^^155^185^while  ( i1 > i0 )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P3_Replace_Literal]^while  ( ii > i0 )  {^170^^^^^155^185^while  ( i1 > i0 )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P5_Replace_Variable]^while  ( i0 > i0 )  {^170^^^^^155^185^while  ( i1 > i0 )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P5_Replace_Variable]^while  ( i1 > i1 )  {^170^^^^^155^185^while  ( i1 > i0 )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P5_Replace_Variable]^while  ( i11 > i0 )  {^170^^^^^155^185^while  ( i1 > i0 )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P5_Replace_Variable]^while  ( i > i10 )  {^170^^^^^155^185^while  ( i1 > i0 )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P5_Replace_Variable]^while  ( i0 > i1 )  {^170^^^^^155^185^while  ( i1 > i0 )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P2_Replace_Operator]^if  ( m.unicode != c )  {^176^^^^^161^191^if  ( m.unicode == c )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P5_Replace_Variable]^if  ( r.unicode == c )  {^176^^^^^161^191^if  ( m.unicode == c )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P5_Replace_Variable]^if  ( m.unicode == unicode )  {^176^^^^^161^191^if  ( m.unicode == c )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P5_Replace_Variable]^if  ( unicode == c )  {^176^^^^^161^191^if  ( m.unicode == c )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P5_Replace_Variable]^if  ( c.unicode == m )  {^176^^^^^161^191^if  ( m.unicode == c )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P5_Replace_Variable]^if  ( c == m.unicode )  {^176^^^^^161^191^if  ( m.unicode == c )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P5_Replace_Variable]^if  ( m == c )  {^176^^^^^161^191^if  ( m.unicode == c )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P9_Replace_Statement]^if  ( r.unicode != c )  {^176^^^^^161^191^if  ( m.unicode == c )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P9_Replace_Statement]^if  ( m.unicode < c )  {^176^^^^^161^191^if  ( m.unicode == c )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P15_Unwrap_Block]^return m;^176^177^178^^^161^191^if  ( m.unicode == c )  { return m; }^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P16_Remove_Block]^^176^177^178^^^161^191^if  ( m.unicode == c )  { return m; }^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P13_Insert_Block]^if  ( ! ( this.canEncodeChar ( c )  )  )  {     return false; }^176^^^^^161^191^[Delete]^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P13_Insert_Block]^if  (  ( r.unicode )  != c )  {     return null; }^176^^^^^161^191^[Delete]^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P13_Insert_Block]^if  (  ( c >= 0 )  &&  ( c < 128 )  )  {     return true; }^176^^^^^161^191^[Delete]^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P5_Replace_Variable]^return r;^177^^^^^162^192^return m;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P2_Replace_Operator]^if  ( m.unicode <= c )  {^180^^^^^165^195^if  ( m.unicode < c )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P5_Replace_Variable]^if  ( r.unicode < c )  {^180^^^^^165^195^if  ( m.unicode < c )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P5_Replace_Variable]^if  ( unicode < c )  {^180^^^^^165^195^if  ( m.unicode < c )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P5_Replace_Variable]^if  ( c < m.unicode )  {^180^^^^^165^195^if  ( m.unicode < c )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P6_Replace_Expression]^if  ( i + 1 )  {^180^^^^^165^195^if  ( m.unicode < c )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P9_Replace_Statement]^if  ( m.unicode == c )  {^180^^^^^165^195^if  ( m.unicode < c )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P9_Replace_Statement]^if  ( r.unicode != c )  {^180^^^^^165^195^if  ( m.unicode < c )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P15_Unwrap_Block]^i0 = i + 1;^180^181^182^183^184^165^195^if  ( m.unicode < c )  { i0 = i + 1; } else { i1 = i; }^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P16_Remove_Block]^^180^181^182^183^184^165^195^if  ( m.unicode < c )  { i0 = i + 1; } else { i1 = i; }^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P5_Replace_Variable]^i1 = i1;^183^^^^^180^184^i1 = i;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P8_Replace_Mix]^i1 =  i0;^183^^^^^180^184^i1 = i;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P11_Insert_Donor_Statement]^i0 = i + 1;i1 = i;^183^^^^^180^184^i1 = i;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P3_Replace_Literal]^i0 = i + i;^181^^^^^166^196^i0 = i + 1;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P5_Replace_Variable]^i0 = i1 + 1;^181^^^^^166^196^i0 = i + 1;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P8_Replace_Mix]^i0 = i + 1 / 1;^181^^^^^166^196^i0 = i + 1;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P11_Insert_Donor_Statement]^i1 = i;i0 = i + 1;^181^^^^^166^196^i0 = i + 1;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P3_Replace_Literal]^i0 = i + i1;^181^^^^^166^196^i0 = i + 1;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P8_Replace_Mix]^i0 = i + 1L;^181^^^^^166^196^i0 = i + 1;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P5_Replace_Variable]^i1 = i1;^183^^^^^168^198^i1 = i;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P8_Replace_Mix]^i1 =  i0;^183^^^^^168^198^i1 = i;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P11_Insert_Donor_Statement]^i0 = i + 1;i1 = i;^183^^^^^168^198^i1 = i;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P1_Replace_Type]^short  i = i0 +  ( i1 - i0 )  / 2;^172^^^^^157^187^int i = i0 +  ( i1 - i0 )  / 2;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P2_Replace_Operator]^int i = i0 +  <=  ( i1 - i0 )  / 2;^172^^^^^157^187^int i = i0 +  ( i1 - i0 )  / 2;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P2_Replace_Operator]^int i = i0 +  ( i1 - i0 )  * 2;^172^^^^^157^187^int i = i0 +  ( i1 - i0 )  / 2;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P2_Replace_Operator]^int i = i0 +  ( i1  ^  i0 )  / 2;^172^^^^^157^187^int i = i0 +  ( i1 - i0 )  / 2;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P3_Replace_Literal]^int i = i0 +  ( i1 - i0 )  / -4;^172^^^^^157^187^int i = i0 +  ( i1 - i0 )  / 2;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P5_Replace_Variable]^int i = i1 +  ( i1 - i0 )  / 2;^172^^^^^157^187^int i = i0 +  ( i1 - i0 )  / 2;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P5_Replace_Variable]^int i = i0 +  ( i0 - i0 )  / 2;^172^^^^^157^187^int i = i0 +  ( i1 - i0 )  / 2;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P5_Replace_Variable]^int i = i1 +  ( i0 - i0 )  / 2;^172^^^^^157^187^int i = i0 +  ( i1 - i0 )  / 2;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P5_Replace_Variable]^Simple8BitChar m =  ( Simple8BitChar )  this.reverseMapping.get ( i1 ) ;^174^^^^^159^189^Simple8BitChar m =  ( Simple8BitChar )  this.reverseMapping.get ( i ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P5_Replace_Variable]^Simple8BitChar m =  ( Simple8BitChar )  reverseMapping.get ( i ) ;^174^^^^^159^189^Simple8BitChar m =  ( Simple8BitChar )  this.reverseMapping.get ( i ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P5_Replace_Variable]^Simple8BitChar m =  ( Simple8BitChar )  i.get ( this.reverseMapping ) ;^174^^^^^159^189^Simple8BitChar m =  ( Simple8BitChar )  this.reverseMapping.get ( i ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P7_Replace_Invocation]^Simple8BitChar m =  ( Simple8BitChar )  this.reverseMapping.add ( i ) ;^174^^^^^159^189^Simple8BitChar m =  ( Simple8BitChar )  this.reverseMapping.get ( i ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P8_Replace_Mix]^Simple8BitChar m =  ( Simple8BitChar )  this.reverseMapping.add ( i1 ) ;^174^^^^^159^189^Simple8BitChar m =  ( Simple8BitChar )  this.reverseMapping.get ( i ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P11_Insert_Donor_Statement]^Simple8BitChar a =  ( Simple8BitChar )  o;Simple8BitChar m =  ( Simple8BitChar )  this.reverseMapping.get ( i ) ;^174^^^^^159^189^Simple8BitChar m =  ( Simple8BitChar )  this.reverseMapping.get ( i ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P11_Insert_Donor_Statement]^Simple8BitChar r =  ( Simple8BitChar )  this.reverseMapping.get ( i0 ) ;Simple8BitChar m =  ( Simple8BitChar )  this.reverseMapping.get ( i ) ;^174^^^^^159^189^Simple8BitChar m =  ( Simple8BitChar )  this.reverseMapping.get ( i ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P14_Delete_Statement]^^174^^^^^159^189^Simple8BitChar m =  ( Simple8BitChar )  this.reverseMapping.get ( i ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P2_Replace_Operator]^if  ( m.unicode <= c )  {^176^^^^^161^191^if  ( m.unicode == c )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P5_Replace_Variable]^if  ( m.unicode.unicode == c )  {^176^^^^^161^191^if  ( m.unicode == c )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P5_Replace_Variable]^if  ( m.unicode < unicode )  {^180^^^^^165^195^if  ( m.unicode < c )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P5_Replace_Variable]^if  ( m.unicode.unicode < c )  {^180^^^^^165^195^if  ( m.unicode < c )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P8_Replace_Mix]^i0 = i + 1 >> 0;^181^^^^^166^196^i0 = i + 1;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P8_Replace_Mix]^i0 = i + 1 - 1;^181^^^^^166^196^i0 = i + 1;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P2_Replace_Operator]^int i = i0 +  ( i1  &  i0 )  / 2;^172^^^^^157^187^int i = i0 +  ( i1 - i0 )  / 2;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P3_Replace_Literal]^int i = i0 +  ( i1 - i0 )  / -3;^172^^^^^157^187^int i = i0 +  ( i1 - i0 )  / 2;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P2_Replace_Operator]^if  ( i0 == this.reverseMapping.size (  )  )  {^187^^^^^172^202^if  ( i0 >= this.reverseMapping.size (  )  )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P3_Replace_Literal]^if  ( i0 >= this.reverseMapping.size() + 2  )  {^187^^^^^172^202^if  ( i0 >= this.reverseMapping.size (  )  )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P5_Replace_Variable]^if  ( i1 >= this.reverseMapping.size (  )  )  {^187^^^^^172^202^if  ( i0 >= this.reverseMapping.size (  )  )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P5_Replace_Variable]^if  ( i0 >= reverseMapping.size (  )  )  {^187^^^^^172^202^if  ( i0 >= this.reverseMapping.size (  )  )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P5_Replace_Variable]^if  ( this.reverseMapping >= i0.size (  )  )  {^187^^^^^172^202^if  ( i0 >= this.reverseMapping.size (  )  )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P15_Unwrap_Block]^return null;^187^188^189^^^172^202^if  ( i0 >= this.reverseMapping.size (  )  )  { return null; }^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P16_Remove_Block]^^187^188^189^^^172^202^if  ( i0 >= this.reverseMapping.size (  )  )  { return null; }^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P13_Insert_Block]^if  ( ! ( this.canEncodeChar ( c )  )  )  {     return false; }^187^^^^^172^202^[Delete]^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P8_Replace_Mix]^return true;^188^^^^^173^203^return null;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P3_Replace_Literal]^if  ( i0 >= this.reverseMapping.size() + 4  )  {^187^^^^^172^202^if  ( i0 >= this.reverseMapping.size (  )  )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P5_Replace_Variable]^Simple8BitChar r =  ( Simple8BitChar )  this.reverseMapping.get ( i1 ) ;^191^^^^^176^206^Simple8BitChar r =  ( Simple8BitChar )  this.reverseMapping.get ( i0 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P5_Replace_Variable]^Simple8BitChar r =  ( Simple8BitChar )  reverseMapping.get ( i0 ) ;^191^^^^^176^206^Simple8BitChar r =  ( Simple8BitChar )  this.reverseMapping.get ( i0 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P5_Replace_Variable]^Simple8BitChar r =  ( Simple8BitChar )  i0.get ( this.reverseMapping ) ;^191^^^^^176^206^Simple8BitChar r =  ( Simple8BitChar )  this.reverseMapping.get ( i0 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P7_Replace_Invocation]^Simple8BitChar r =  ( Simple8BitChar )  this.reverseMapping.add ( i0 ) ;^191^^^^^176^206^Simple8BitChar r =  ( Simple8BitChar )  this.reverseMapping.get ( i0 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P11_Insert_Donor_Statement]^Simple8BitChar a =  ( Simple8BitChar )  o;Simple8BitChar r =  ( Simple8BitChar )  this.reverseMapping.get ( i0 ) ;^191^^^^^176^206^Simple8BitChar r =  ( Simple8BitChar )  this.reverseMapping.get ( i0 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P11_Insert_Donor_Statement]^Simple8BitChar m =  ( Simple8BitChar )  this.reverseMapping.get ( i ) ;Simple8BitChar r =  ( Simple8BitChar )  this.reverseMapping.get ( i0 ) ;^191^^^^^176^206^Simple8BitChar r =  ( Simple8BitChar )  this.reverseMapping.get ( i0 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P14_Delete_Statement]^^191^^^^^176^206^Simple8BitChar r =  ( Simple8BitChar )  this.reverseMapping.get ( i0 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P2_Replace_Operator]^if  ( r.unicode == c )  {^193^^^^^178^208^if  ( r.unicode != c )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P5_Replace_Variable]^if  ( m.unicode != c )  {^193^^^^^178^208^if  ( r.unicode != c )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P5_Replace_Variable]^if  ( r.unicode != unicode )  {^193^^^^^178^208^if  ( r.unicode != c )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P5_Replace_Variable]^if  ( unicode != c )  {^193^^^^^178^208^if  ( r.unicode != c )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P5_Replace_Variable]^if  ( r.unicode.unicode != c )  {^193^^^^^178^208^if  ( r.unicode != c )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P5_Replace_Variable]^if  ( c != r.unicode )  {^193^^^^^178^208^if  ( r.unicode != c )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P5_Replace_Variable]^if  ( r != c )  {^193^^^^^178^208^if  ( r.unicode != c )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P9_Replace_Statement]^if  ( m.unicode == c )  {^193^^^^^178^208^if  ( r.unicode != c )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P9_Replace_Statement]^if  ( m.unicode < c )  {^193^^^^^178^208^if  ( r.unicode != c )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P15_Unwrap_Block]^return null;^193^194^195^^^178^208^if  ( r.unicode != c )  { return null; }^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P16_Remove_Block]^^193^194^195^^^178^208^if  ( r.unicode != c )  { return null; }^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P13_Insert_Block]^if  ( ! ( this.canEncodeChar ( c )  )  )  {     return false; }^193^^^^^178^208^[Delete]^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P13_Insert_Block]^if  ( r == null )  {     return false; }^193^^^^^178^208^[Delete]^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P13_Insert_Block]^if  (  ( c >= 0 )  &&  ( c < 128 )  )  {     return true; }^193^^^^^178^208^[Delete]^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P13_Insert_Block]^if  (  ( m.unicode )  == c )  {     return m; }^193^^^^^178^208^[Delete]^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P8_Replace_Mix]^return true;^194^^^^^179^209^return null;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P8_Replace_Mix]^return this;^194^^^^^179^209^return null;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P5_Replace_Variable]^return m;^197^^^^^182^212^return r;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encodeHighChar [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar   char c [VARIABLES] Simple8BitChar  m  r  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  i0  i1  char[]  highChars  
[P5_Replace_Variable]^if  ( !this.canEncodeChar ( unicode )  )  {^210^^^^^204^216^if  ( !this.canEncodeChar ( c )  )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] canEncode [RETURN_TYPE] boolean   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  int  i  char[]  highChars  
[P7_Replace_Invocation]^if  ( !this.encodeHighChar ( c )  )  {^210^^^^^204^216^if  ( !this.canEncodeChar ( c )  )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] canEncode [RETURN_TYPE] boolean   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  int  i  char[]  highChars  
[P7_Replace_Invocation]^if  ( !this .canEncode ( name )   )  {^210^^^^^204^216^if  ( !this.canEncodeChar ( c )  )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] canEncode [RETURN_TYPE] boolean   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  int  i  char[]  highChars  
[P9_Replace_Statement]^if  ( !this.pushEncodedChar ( out,c )  )  {^210^^^^^204^216^if  ( !this.canEncodeChar ( c )  )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] canEncode [RETURN_TYPE] boolean   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  int  i  char[]  highChars  
[P15_Unwrap_Block]^return false;^210^211^212^^^204^216^if  ( !this.canEncodeChar ( c )  )  { return false; }^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] canEncode [RETURN_TYPE] boolean   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  int  i  char[]  highChars  
[P16_Remove_Block]^^210^211^212^^^204^216^if  ( !this.canEncodeChar ( c )  )  { return false; }^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] canEncode [RETURN_TYPE] boolean   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  int  i  char[]  highChars  
[P13_Insert_Block]^if  ( i0 >=  ( size (  )  )  )  {     return null; }^210^^^^^204^216^[Delete]^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] canEncode [RETURN_TYPE] boolean   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  int  i  char[]  highChars  
[P13_Insert_Block]^if  ( r == null )  {     return false; }^210^^^^^204^216^[Delete]^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] canEncode [RETURN_TYPE] boolean   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  int  i  char[]  highChars  
[P13_Insert_Block]^if  (  ( r.unicode )  != c )  {     return null; }^210^^^^^204^216^[Delete]^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] canEncode [RETURN_TYPE] boolean   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  int  i  char[]  highChars  
[P13_Insert_Block]^if  (  ( c >= 0 )  &&  ( c < 128 )  )  {     return true; }^210^^^^^204^216^[Delete]^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] canEncode [RETURN_TYPE] boolean   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  int  i  char[]  highChars  
[P13_Insert_Block]^if  (  ( m.unicode )  == c )  {     return m; }^210^^^^^204^216^[Delete]^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] canEncode [RETURN_TYPE] boolean   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  int  i  char[]  highChars  
[P3_Replace_Literal]^return true;^211^^^^^204^216^return false;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] canEncode [RETURN_TYPE] boolean   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  int  i  char[]  highChars  
[P1_Replace_Type]^for  (  short  i=0;i<name.length (  ) ;++i )  {^206^^^^^204^216^for  ( int i=0;i<name.length (  ) ;++i )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] canEncode [RETURN_TYPE] boolean   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  int  i  char[]  highChars  
[P3_Replace_Literal]^for  ( int i=8;i<name.length (  ) ;++i )  {^206^^^^^204^216^for  ( int i=0;i<name.length (  ) ;++i )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] canEncode [RETURN_TYPE] boolean   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  int  i  char[]  highChars  
[P3_Replace_Literal]^for  ( int i=0;i<name.length() - 3 ;++i )  {^206^^^^^204^216^for  ( int i=0;i<name.length (  ) ;++i )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] canEncode [RETURN_TYPE] boolean   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  int  i  char[]  highChars  
[P8_Replace_Mix]^if  ( !this.encodeHighChar ( unicode )  )  {^210^^^^^204^216^if  ( !this.canEncodeChar ( c )  )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] canEncode [RETURN_TYPE] boolean   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  int  i  char[]  highChars  
[P1_Replace_Type]^int c = name.charAt ( i ) ;^208^^^^^204^216^char c = name.charAt ( i ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] canEncode [RETURN_TYPE] boolean   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  int  i  char[]  highChars 
[P2_Replace_Operator]^char c = name.charAt ( i++ ) ;^208^^^^^204^216^char c = name.charAt ( i ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] canEncode [RETURN_TYPE] boolean   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  int  i  char[]  highChars 
[P2_Replace_Operator]^char c = name.charAt ( i ) ;^208^^^^^204^216^char c = name.charAt ( i ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] canEncode [RETURN_TYPE] boolean   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  int  i  char[]  highChars  
[P5_Replace_Variable]^char c = i.charAt ( name ) ;^208^^^^^204^216^char c = name.charAt ( i ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] canEncode [RETURN_TYPE] boolean   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  int  i  char[]  highChars  
[P14_Delete_Statement]^^208^^^^^204^216^char c = name.charAt ( i ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] canEncode [RETURN_TYPE] boolean   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  int  i  char[]  highChars  
[P3_Replace_Literal]^for  ( int i=i;i<name.length (  ) ;++i )  {^206^^^^^204^216^for  ( int i=0;i<name.length (  ) ;++i )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] canEncode [RETURN_TYPE] boolean   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  int  i  char[]  highChars  
[P3_Replace_Literal]^for  ( int i=0;i<name.length() - 1 ;++i )  {^206^^^^^204^216^for  ( int i=0;i<name.length (  ) ;++i )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] canEncode [RETURN_TYPE] boolean   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  int  i  char[]  highChars  
[P3_Replace_Literal]^for  ( int i=0;i<name.length() - 7 ;++i )  {^206^^^^^204^216^for  ( int i=0;i<name.length (  ) ;++i )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] canEncode [RETURN_TYPE] boolean   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  int  i  char[]  highChars  
[P3_Replace_Literal]^return false;^215^^^^^204^216^return true;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] canEncode [RETURN_TYPE] boolean   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  int  i  char[]  highChars  
[P2_Replace_Operator]^ByteBuffer out = ByteBuffer.allocate ( name.length (  <<  ) + 6 +  ( name.length (  )  + 1 )  / 2 ) ;^223^224^^^^222^243^ByteBuffer out = ByteBuffer.allocate ( name.length (  ) + 6 +  ( name.length (  )  + 1 )  / 2 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P2_Replace_Operator]^ByteBuffer out = ByteBuffer.allocate ( name.length (  &  ) + 6 +  ( name.length (  )  + 1 )  / 2 ) ;^223^224^^^^222^243^ByteBuffer out = ByteBuffer.allocate ( name.length (  ) + 6 +  ( name.length (  )  + 1 )  / 2 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P2_Replace_Operator]^ByteBuffer out = ByteBuffer.allocate ( name.length (  ) + 6 +  ( name.length (  )  + 1 )  + 2 ) ;^223^224^^^^222^243^ByteBuffer out = ByteBuffer.allocate ( name.length (  ) + 6 +  ( name.length (  )  + 1 )  / 2 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P2_Replace_Operator]^ByteBuffer out = ByteBuffer.allocate ( name.length (  ) + 6 +  ( name.length (  )   >  1 )  / 2 ) ;^223^224^^^^222^243^ByteBuffer out = ByteBuffer.allocate ( name.length (  ) + 6 +  ( name.length (  )  + 1 )  / 2 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P3_Replace_Literal]^ByteBuffer out = ByteBuffer.allocate ( name.length (  ) + i +  ( name.length (  )  + 1 )  / 2 ) ;^223^224^^^^222^243^ByteBuffer out = ByteBuffer.allocate ( name.length (  ) + 6 +  ( name.length (  )  + 1 )  / 2 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P3_Replace_Literal]^ByteBuffer out = ByteBuffer.allocate ( name.length (  ) + 6 +  ( name.length (  )  + i )  / 2 ) ;^223^224^^^^222^243^ByteBuffer out = ByteBuffer.allocate ( name.length (  ) + 6 +  ( name.length (  )  + 1 )  / 2 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P3_Replace_Literal]^ByteBuffer out = ByteBuffer.allocate ( name.length (  ) + 6 +  ( name.length (  )  + 1 )  / 6 ) ;^223^224^^^^222^243^ByteBuffer out = ByteBuffer.allocate ( name.length (  ) + 6 +  ( name.length (  )  + 1 )  / 2 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P3_Replace_Literal]^ByteBuffer out = ByteBuffer.allocate ( name.length() + 8 + 6 +  ( name.length() + 8  + 1 )  / 2 ) ;^223^224^^^^222^243^ByteBuffer out = ByteBuffer.allocate ( name.length (  ) + 6 +  ( name.length (  )  + 1 )  / 2 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P2_Replace_Operator]^ByteBuffer out = ByteBuffer.allocate ( name.length (  |  ) + 6 +  ( name.length (  )  + 1 )  / 2 ) ;^223^224^^^^222^243^ByteBuffer out = ByteBuffer.allocate ( name.length (  ) + 6 +  ( name.length (  )  + 1 )  / 2 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P2_Replace_Operator]^ByteBuffer out = ByteBuffer.allocate ( name.length (  &&  ) + 6 +  ( name.length (  )  + 1 )  / 2 ) ;^223^224^^^^222^243^ByteBuffer out = ByteBuffer.allocate ( name.length (  ) + 6 +  ( name.length (  )  + 1 )  / 2 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P2_Replace_Operator]^ByteBuffer out = ByteBuffer.allocate ( name.length (  ) + 6 +  ( name.length (  )  + 1 )  - 2 ) ;^223^224^^^^222^243^ByteBuffer out = ByteBuffer.allocate ( name.length (  ) + 6 +  ( name.length (  )  + 1 )  / 2 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P2_Replace_Operator]^ByteBuffer out = ByteBuffer.allocate ( name.length (  ) + 6 +  ( name.length (  )   |  1 )  / 2 ) ;^223^224^^^^222^243^ByteBuffer out = ByteBuffer.allocate ( name.length (  ) + 6 +  ( name.length (  )  + 1 )  / 2 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P3_Replace_Literal]^ByteBuffer out = ByteBuffer.allocate ( name.length (  ) + 6 +  ( name.length (  )   )  / 2 ) ;^223^224^^^^222^243^ByteBuffer out = ByteBuffer.allocate ( name.length (  ) + 6 +  ( name.length (  )  + 1 )  / 2 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P3_Replace_Literal]^ByteBuffer out = ByteBuffer.allocate ( name.length (  ) + 6 +  ( name.length (  )  + 1 )  / i ) ;^223^224^^^^222^243^ByteBuffer out = ByteBuffer.allocate ( name.length (  ) + 6 +  ( name.length (  )  + 1 )  / 2 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P3_Replace_Literal]^ByteBuffer out = ByteBuffer.allocate ( name.length() - 5 + 6 +  ( name.length() - 5  + 1 )  / 2 ) ;^223^224^^^^222^243^ByteBuffer out = ByteBuffer.allocate ( name.length (  ) + 6 +  ( name.length (  )  + 1 )  / 2 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P14_Delete_Statement]^^223^224^^^^222^243^ByteBuffer out = ByteBuffer.allocate ( name.length (  ) + 6 +  ( name.length (  )  + 1 )  / 2 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P3_Replace_Literal]^ByteBuffer out = ByteBuffer.allocate ( name.length() - 8 + 6 +  ( name.length() - 8  + 1 )  / 2 ) ;^223^224^^^^222^243^ByteBuffer out = ByteBuffer.allocate ( name.length (  ) + 6 +  ( name.length (  )  + 1 )  / 2 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P3_Replace_Literal]^+ 6 +  ( name.length() + 5  + 1 )  / 2 ) ;^224^^^^^222^243^+ 6 +  ( name.length (  )  + 1 )  / 2 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P7_Replace_Invocation]^+ 6 +  ( name.charAt (  )  + 1 )  / 2 ) ;^224^^^^^222^243^+ 6 +  ( name.length (  )  + 1 )  / 2 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P14_Delete_Statement]^^224^^^^^222^243^+ 6 +  ( name.length (  )  + 1 )  / 2 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P2_Replace_Operator]^if  ( out.remaining (  )  == 6 )  {^230^^^^^222^243^if  ( out.remaining (  )  < 6 )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P3_Replace_Literal]^if  ( out.remaining (  )  < i )  {^230^^^^^222^243^if  ( out.remaining (  )  < 6 )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P3_Replace_Literal]^if  ( out.remaining (  )  < -3 )  {^230^^^^^222^243^if  ( out.remaining (  )  < 6 )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P6_Replace_Expression]^if  ( out.position (  )  + 6 )  {^230^^^^^222^243^if  ( out.remaining (  )  < 6 )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P7_Replace_Invocation]^if  ( out.limit (  )  < 6 )  {^230^^^^^222^243^if  ( out.remaining (  )  < 6 )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P8_Replace_Mix]^if  ( out.remaining (  )  < 4 )  {^230^^^^^222^243^if  ( out.remaining (  )  < 6 )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P15_Unwrap_Block]^out = org.apache.commons.compress.archivers.zip.ZipEncodingHelper.growBuffer(out, ((out.position()) + 6));^230^231^232^^^222^243^if  ( out.remaining (  )  < 6 )  { out = ZipEncodingHelper.growBuffer ( out,out.position (  )  + 6 ) ; }^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P16_Remove_Block]^^230^231^232^^^222^243^if  ( out.remaining (  )  < 6 )  { out = ZipEncodingHelper.growBuffer ( out,out.position (  )  + 6 ) ; }^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P13_Insert_Block]^if  ( ! ( this.pushEncodedChar ( out, c )  )  )  {     appendSurrogate ( out, c ) ; }^230^^^^^222^243^[Delete]^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P2_Replace_Operator]^out = ZipEncodingHelper.growBuffer ( out,out.position (  )   ==  6 ) ;^231^^^^^222^243^out = ZipEncodingHelper.growBuffer ( out,out.position (  )  + 6 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P3_Replace_Literal]^out = ZipEncodingHelper.growBuffer ( out,out.position (  )   ) ;^231^^^^^222^243^out = ZipEncodingHelper.growBuffer ( out,out.position (  )  + 6 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P7_Replace_Invocation]^out = ZipEncodingHelper .appendSurrogate ( out , unicode )  ;^231^^^^^222^243^out = ZipEncodingHelper.growBuffer ( out,out.position (  )  + 6 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P7_Replace_Invocation]^out = ZipEncodingHelper.growBuffer ( out,out.limit (  )  + 6 ) ;^231^^^^^222^243^out = ZipEncodingHelper.growBuffer ( out,out.position (  )  + 6 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P8_Replace_Mix]^out = ZipEncodingHelper.growBuffer ( out,out.position (  )  + 2 ) ;^231^^^^^222^243^out = ZipEncodingHelper.growBuffer ( out,out.position (  )  + 6 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P13_Insert_Block]^if  (  ( out.remaining (  )  )  < 6 )  {     out = growBuffer ( out,  (  ( out.position (  )  )  + 6 )  ) ; }^231^^^^^222^243^[Delete]^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P2_Replace_Operator]^out = ZipEncodingHelper.growBuffer ( out,out.position (  )    instanceof   6 ) ;^231^^^^^222^243^out = ZipEncodingHelper.growBuffer ( out,out.position (  )  + 6 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P3_Replace_Literal]^out = ZipEncodingHelper.growBuffer ( out,out.position (  )  + i ) ;^231^^^^^222^243^out = ZipEncodingHelper.growBuffer ( out,out.position (  )  + 6 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P7_Replace_Invocation]^out = ZipEncodingHelper.growBuffer ( out,out .limit ( i )   + 6 ) ;^231^^^^^222^243^out = ZipEncodingHelper.growBuffer ( out,out.position (  )  + 6 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P8_Replace_Mix]^out = ZipEncodingHelper .appendSurrogate ( out , c )  ;^231^^^^^222^243^out = ZipEncodingHelper.growBuffer ( out,out.position (  )  + 6 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P14_Delete_Statement]^^231^^^^^222^243^out = ZipEncodingHelper.growBuffer ( out,out.position (  )  + 6 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P5_Replace_Variable]^if  ( !this.pushEncodedChar ( out,unicode )  )  {^234^^^^^222^243^if  ( !this.pushEncodedChar ( out,c )  )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P5_Replace_Variable]^if  ( !this.pushEncodedChar ( c )  )  {^234^^^^^222^243^if  ( !this.pushEncodedChar ( out,c )  )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P9_Replace_Statement]^if  ( !this.canEncodeChar ( c )  )  {^234^^^^^222^243^if  ( !this.pushEncodedChar ( out,c )  )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P15_Unwrap_Block]^org.apache.commons.compress.archivers.zip.ZipEncodingHelper.appendSurrogate(out, c);^234^235^236^237^^222^243^if  ( !this.pushEncodedChar ( out,c )  )  {  ZipEncodingHelper.appendSurrogate ( out,c ) ; }^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P16_Remove_Block]^^234^235^236^237^^222^243^if  ( !this.pushEncodedChar ( out,c )  )  {  ZipEncodingHelper.appendSurrogate ( out,c ) ; }^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P13_Insert_Block]^if  (  ( out.remaining (  )  )  < 6 )  {     out = growBuffer ( out,  (  ( out.position (  )  )  + 6 )  ) ; }^234^^^^^222^243^[Delete]^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P5_Replace_Variable]^ZipEncodingHelper.appendSurrogate ( out,unicode ) ;^236^^^^^222^243^ZipEncodingHelper.appendSurrogate ( out,c ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P5_Replace_Variable]^ZipEncodingHelper.appendSurrogate ( c ) ;^236^^^^^222^243^ZipEncodingHelper.appendSurrogate ( out,c ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P7_Replace_Invocation]^ZipEncodingHelper.growBuffer ( out,c ) ;^236^^^^^222^243^ZipEncodingHelper.appendSurrogate ( out,c ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P14_Delete_Statement]^^236^^^^^222^243^ZipEncodingHelper.appendSurrogate ( out,c ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P1_Replace_Type]^for  (  long  i=0;i<name.length (  ) ;++i )  {^226^^^^^222^243^for  ( int i=0;i<name.length (  ) ;++i )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P2_Replace_Operator]^for  <<  ( int i=0;i<name.length (  ) ;++i )  {^226^^^^^222^243^for  ( int i=0;i<name.length (  ) ;++i )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P3_Replace_Literal]^for  ( int i=-8;i<name.length (  ) ;++i )  {^226^^^^^222^243^for  ( int i=0;i<name.length (  ) ;++i )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P3_Replace_Literal]^for  ( int i=0;i<name.length() - 9 ;++i )  {^226^^^^^222^243^for  ( int i=0;i<name.length (  ) ;++i )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P7_Replace_Invocation]^for  ( int i=0;i<name.charAt (  ) ;++i )  {^226^^^^^222^243^for  ( int i=0;i<name.length (  ) ;++i )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P2_Replace_Operator]^if  ( out.remaining (  )  <= 6 )  {^230^^^^^222^243^if  ( out.remaining (  )  < 6 )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P3_Replace_Literal]^if  ( out.remaining (  )  < 14 )  {^230^^^^^222^243^if  ( out.remaining (  )  < 6 )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P3_Replace_Literal]^if  ( out.remaining (  )  < 9 )  {^230^^^^^222^243^if  ( out.remaining (  )  < 6 )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P2_Replace_Operator]^out = ZipEncodingHelper.growBuffer ( out,out.position (  )   <=  6 ) ;^231^^^^^222^243^out = ZipEncodingHelper.growBuffer ( out,out.position (  )  + 6 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P8_Replace_Mix]^out = ZipEncodingHelper.growBuffer ( out,out.position (  )  + 6L ) ;^231^^^^^222^243^out = ZipEncodingHelper.growBuffer ( out,out.position (  )  + 6 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P2_Replace_Operator]^out = ZipEncodingHelper.growBuffer ( out,out.position (  )   !=  6 ) ;^231^^^^^222^243^out = ZipEncodingHelper.growBuffer ( out,out.position (  )  + 6 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P7_Replace_Invocation]^ZipEncodingHelper .growBuffer ( out , i )  ;^236^^^^^222^243^ZipEncodingHelper.appendSurrogate ( out,c ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P2_Replace_Operator]^out = ZipEncodingHelper.growBuffer ( out,out.position (  )   ||  6 ) ;^231^^^^^222^243^out = ZipEncodingHelper.growBuffer ( out,out.position (  )  + 6 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P8_Replace_Mix]^out = ZipEncodingHelper.growBuffer ( out,out.position (  )  + 7 ) ;^231^^^^^222^243^out = ZipEncodingHelper.growBuffer ( out,out.position (  )  + 6 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P1_Replace_Type]^String c = name.charAt ( i ) ;^228^^^^^222^243^char c = name.charAt ( i ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P2_Replace_Operator]^char c = name.charAt ( i++ ) ;^228^^^^^222^243^char c = name.charAt ( i ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P14_Delete_Statement]^^228^^^^^222^243^char c = name.charAt ( i ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P2_Replace_Operator]^out = ZipEncodingHelper.growBuffer ( out,out.position (  )   &  6 ) ;^231^^^^^222^243^out = ZipEncodingHelper.growBuffer ( out,out.position (  )  + 6 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P8_Replace_Mix]^if  ( !this .canEncodeChar ( unicode )   )  {^234^^^^^222^243^if  ( !this.pushEncodedChar ( out,c )  )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P2_Replace_Operator]^out = ZipEncodingHelper.growBuffer ( out,out.position (  )   <  6 ) ;^231^^^^^222^243^out = ZipEncodingHelper.growBuffer ( out,out.position (  )  + 6 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P8_Replace_Mix]^out = ZipEncodingHelper.growBuffer ( out,out.position (  )  + 6 << 3 ) ;^231^^^^^222^243^out = ZipEncodingHelper.growBuffer ( out,out.position (  )  + 6 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P3_Replace_Literal]^for  ( int i=0;i<name.length() - 5 ;++i )  {^226^^^^^222^243^for  ( int i=0;i<name.length (  ) ;++i )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P1_Replace_Type]^int c = name.charAt ( i ) ;^228^^^^^222^243^char c = name.charAt ( i ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P3_Replace_Literal]^for  ( int i=0;i<name.length() + 5 ;++i )  {^226^^^^^222^243^for  ( int i=0;i<name.length (  ) ;++i )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P7_Replace_Invocation]^if  ( out .rewind (  )   < 6 )  {^230^^^^^222^243^if  ( out.remaining (  )  < 6 )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P2_Replace_Operator]^out = ZipEncodingHelper.growBuffer ( out,out.position (  )   <<  6 ) ;^231^^^^^222^243^out = ZipEncodingHelper.growBuffer ( out,out.position (  )  + 6 ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P8_Replace_Mix]^ZipEncodingHelper.growBuffer ( out,unicode ) ;^236^^^^^222^243^ZipEncodingHelper.appendSurrogate ( out,c ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P7_Replace_Invocation]^out .position (  )  ;^240^^^^^222^243^out.limit ( out.position (  )  ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P7_Replace_Invocation]^out.limit ( out.limit (  )  ) ;^240^^^^^222^243^out.limit ( out.position (  )  ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P14_Delete_Statement]^^240^^^^^222^243^out.limit ( out.position (  )  ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P7_Replace_Invocation]^out.limit ( out .limit ( i )   ) ;^240^^^^^222^243^out.limit ( out.position (  )  ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P14_Delete_Statement]^^240^241^^^^222^243^out.limit ( out.position (  )  ) ; out.rewind (  ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P7_Replace_Invocation]^out.limit (  ) ;^241^^^^^222^243^out.rewind (  ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P14_Delete_Statement]^^241^242^^^^222^243^out.rewind (  ) ; return out;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] encode [RETURN_TYPE] ByteBuffer   String name [VARIABLES] boolean  byte  b  code  char  c  unicode  List  reverseMapping  String  name  ByteBuffer  out  int  i  char[]  highChars  
[P1_Replace_Type]^for  (  short  i=0;i<data.length;++i )  {^252^^^^^249^257^for  ( int i=0;i<data.length;++i )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] decode [RETURN_TYPE] String   byte[] data [VARIABLES] byte[]  data  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  char[]  highChars  ret  
[P3_Replace_Literal]^for  ( int i=i;i<data.length;++i )  {^252^^^^^249^257^for  ( int i=0;i<data.length;++i )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] decode [RETURN_TYPE] String   byte[] data [VARIABLES] byte[]  data  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  char[]  highChars  ret  
[P7_Replace_Invocation]^ret[i] = this.pushEncodedChar ( data[i] ) ;^253^^^^^249^257^ret[i] = this.decodeByte ( data[i] ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] decode [RETURN_TYPE] String   byte[] data [VARIABLES] byte[]  data  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  char[]  highChars  ret  
[P8_Replace_Mix]^ret[i] ;^253^^^^^249^257^ret[i] = this.decodeByte ( data[i] ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] decode [RETURN_TYPE] String   byte[] data [VARIABLES] byte[]  data  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  char[]  highChars  ret  
[P14_Delete_Statement]^^253^^^^^249^257^ret[i] = this.decodeByte ( data[i] ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] decode [RETURN_TYPE] String   byte[] data [VARIABLES] byte[]  data  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  char[]  highChars  ret  
[P8_Replace_Mix]^ret[i]  =  ret[i] ;^253^^^^^249^257^ret[i] = this.decodeByte ( data[i] ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] decode [RETURN_TYPE] String   byte[] data [VARIABLES] byte[]  data  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  char[]  highChars  ret  
[P3_Replace_Literal]^for  ( int i=9;i<data.length;++i )  {^252^^^^^249^257^for  ( int i=0;i<data.length;++i )  {^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] decode [RETURN_TYPE] String   byte[] data [VARIABLES] byte[]  data  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  char[]  highChars  ret  
[P7_Replace_Invocation]^ret[i] = this .decode ( data )  ;^253^^^^^249^257^ret[i] = this.decodeByte ( data[i] ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] decode [RETURN_TYPE] String   byte[] data [VARIABLES] byte[]  data  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  char[]  highChars  ret  
[P1_Replace_Type]^return new char ( ret ) ;^256^^^^^249^257^return new String ( ret ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] decode [RETURN_TYPE] String   byte[] data [VARIABLES] byte[]  data  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  char[]  highChars  ret  
[P5_Replace_Variable]^return new String ( highChars ) ;^256^^^^^249^257^return new String ( ret ) ;^[CLASS] Simple8BitZipEncoding Simple8BitChar  [METHOD] decode [RETURN_TYPE] String   byte[] data [VARIABLES] byte[]  data  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  char[]  highChars  ret  
[P1_Replace_Type]^public final int unicode;^53^^^^^48^58^public final char unicode;^[CLASS] Simple8BitChar  [METHOD] decode [RETURN_TYPE] String   byte[] data [VARIABLES] byte[]  data  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  char[]  highChars  ret  
[P1_Replace_Type]^public final  long  code;^54^^^^^49^59^public final byte code;^[CLASS] Simple8BitChar  [METHOD] decode [RETURN_TYPE] String   byte[] data [VARIABLES] byte[]  data  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  char[]  highChars  ret  
[P8_Replace_Mix]^public final  int  code;^54^^^^^49^59^public final byte code;^[CLASS] Simple8BitChar  [METHOD] decode [RETURN_TYPE] String   byte[] data [VARIABLES] byte[]  data  boolean  byte  b  code  char  c  unicode  List  reverseMapping  int  i  char[]  highChars  ret  
[P8_Replace_Mix]^this.code =  null;^57^^^^^56^59^this.code = code;^[CLASS] Simple8BitChar  [METHOD] <init> [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar(byte,char)   byte code char unicode [VARIABLES] char  unicode  byte  code  boolean  
[P11_Insert_Donor_Statement]^this.unicode = unicode;this.code = code;^57^^^^^56^59^this.code = code;^[CLASS] Simple8BitChar  [METHOD] <init> [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar(byte,char)   byte code char unicode [VARIABLES] char  unicode  byte  code  boolean  
[P8_Replace_Mix]^this.unicode =  null;^58^^^^^56^59^this.unicode = unicode;^[CLASS] Simple8BitChar  [METHOD] <init> [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar(byte,char)   byte code char unicode [VARIABLES] char  unicode  byte  code  boolean  
[P11_Insert_Donor_Statement]^this.code = code;this.unicode = unicode;^58^^^^^56^59^this.unicode = unicode;^[CLASS] Simple8BitChar  [METHOD] <init> [RETURN_TYPE] Simple8BitZipEncoding$Simple8BitChar(byte,char)   byte code char unicode [VARIABLES] char  unicode  byte  code  boolean  
[P2_Replace_Operator]^return this.unicode  !=  a.unicode;^64^^^^^61^65^return this.unicode - a.unicode;^[CLASS] Simple8BitChar  [METHOD] compareTo [RETURN_TYPE] int   Object o [VARIABLES] char  unicode  Object  o  Simple8BitChar  a  boolean  byte  code  
[P5_Replace_Variable]^return unicode - a.unicode;^64^^^^^61^65^return this.unicode - a.unicode;^[CLASS] Simple8BitChar  [METHOD] compareTo [RETURN_TYPE] int   Object o [VARIABLES] char  unicode  Object  o  Simple8BitChar  a  boolean  byte  code  
[P5_Replace_Variable]^return this.unicode - unicode;^64^^^^^61^65^return this.unicode - a.unicode;^[CLASS] Simple8BitChar  [METHOD] compareTo [RETURN_TYPE] int   Object o [VARIABLES] char  unicode  Object  o  Simple8BitChar  a  boolean  byte  code  
[P5_Replace_Variable]^return this.unicode - a.unicode.unicode;^64^^^^^61^65^return this.unicode - a.unicode;^[CLASS] Simple8BitChar  [METHOD] compareTo [RETURN_TYPE] int   Object o [VARIABLES] char  unicode  Object  o  Simple8BitChar  a  boolean  byte  code  
[P5_Replace_Variable]^return a - this.unicode.unicode;^64^^^^^61^65^return this.unicode - a.unicode;^[CLASS] Simple8BitChar  [METHOD] compareTo [RETURN_TYPE] int   Object o [VARIABLES] char  unicode  Object  o  Simple8BitChar  a  boolean  byte  code  
[P5_Replace_Variable]^return a.unicode - this.unicode;^64^^^^^61^65^return this.unicode - a.unicode;^[CLASS] Simple8BitChar  [METHOD] compareTo [RETURN_TYPE] int   Object o [VARIABLES] char  unicode  Object  o  Simple8BitChar  a  boolean  byte  code  
[P8_Replace_Mix]^return unicode - unicode;^64^^^^^61^65^return this.unicode - a.unicode;^[CLASS] Simple8BitChar  [METHOD] compareTo [RETURN_TYPE] int   Object o [VARIABLES] char  unicode  Object  o  Simple8BitChar  a  boolean  byte  code  
[P1_Replace_Type]^return "0x" + Integer.toHexchar ( 0xffff & unicode ) + "->0x" + Integer.toHexchar ( 0xff & code ) ;^68^69^^^^67^70^return "0x" + Integer.toHexString ( 0xffff & unicode ) + "->0x" + Integer.toHexString ( 0xff & code ) ;^[CLASS] Simple8BitChar  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] char  unicode  byte  code  boolean  
[P2_Replace_Operator]^return "0x" + Integer.toHexString ( 0xffff  >  unicode ) + "->0x" + Integer.toHexString ( 0xff & code ) ;^68^69^^^^67^70^return "0x" + Integer.toHexString ( 0xffff & unicode ) + "->0x" + Integer.toHexString ( 0xff & code ) ;^[CLASS] Simple8BitChar  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] char  unicode  byte  code  boolean  
[P2_Replace_Operator]^return "0x" + Integer.toHexString ( 0xffff  >=  unicode ) + "->0x" + Integer.toHexString ( 0xff & code ) ;^68^69^^^^67^70^return "0x" + Integer.toHexString ( 0xffff & unicode ) + "->0x" + Integer.toHexString ( 0xff & code ) ;^[CLASS] Simple8BitChar  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] char  unicode  byte  code  boolean  
[P3_Replace_Literal]^return "0x0" + Integer.toHexString ( 0xffff & unicode ) + "->0x" + Integer.toHexString ( 0xff & code ) ;^68^69^^^^67^70^return "0x" + Integer.toHexString ( 0xffff & unicode ) + "->0x" + Integer.toHexString ( 0xff & code ) ;^[CLASS] Simple8BitChar  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] char  unicode  byte  code  boolean  
[P3_Replace_Literal]^return "0x" + Integer.toHexString ( 0xffff & unicode ) + ">>0x" + Integer.toHexString ( 0xff & code ) ;^68^69^^^^67^70^return "0x" + Integer.toHexString ( 0xffff & unicode ) + "->0x" + Integer.toHexString ( 0xff & code ) ;^[CLASS] Simple8BitChar  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] char  unicode  byte  code  boolean  
[P5_Replace_Variable]^return "0x" + Integer.toHexString ( 0xffff & code ) + "->0x" + Integer.toHexString ( 0xff & unicode ) ;^68^69^^^^67^70^return "0x" + Integer.toHexString ( 0xffff & unicode ) + "->0x" + Integer.toHexString ( 0xff & code ) ;^[CLASS] Simple8BitChar  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] char  unicode  byte  code  boolean  
[P8_Replace_Mix]^return "0x"  ;^68^69^^^^67^70^return "0x" + Integer.toHexString ( 0xffff & unicode ) + "->0x" + Integer.toHexString ( 0xff & code ) ;^[CLASS] Simple8BitChar  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] char  unicode  byte  code  boolean  
[P14_Delete_Statement]^^68^69^^^^67^70^return "0x" + Integer.toHexString ( 0xffff & unicode ) + "->0x" + Integer.toHexString ( 0xff & code ) ;^[CLASS] Simple8BitChar  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] char  unicode  byte  code  boolean  
[P2_Replace_Operator]^+ "->0x" + Integer.toHexString ( 0xff  <=  code ) ;^69^^^^^67^70^+ "->0x" + Integer.toHexString ( 0xff & code ) ;^[CLASS] Simple8BitChar  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] char  unicode  byte  code  boolean  
[P14_Delete_Statement]^^69^^^^^67^70^+ "->0x" + Integer.toHexString ( 0xff & code ) ;^[CLASS] Simple8BitChar  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] char  unicode  byte  code  boolean  
