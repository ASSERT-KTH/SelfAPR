[P1_Replace_Type]^private static final  short  WORD = 4;^33^^^^^28^38^private static final int WORD = 4;^[CLASS] ExtraFieldUtils   [VARIABLES] 
[P3_Replace_Literal]^private static final int WORD = 6;^33^^^^^28^38^private static final int WORD = 4;^[CLASS] ExtraFieldUtils   [VARIABLES] 
[P8_Replace_Mix]^private static final int WORD = 1;^33^^^^^28^38^private static final int WORD = 4;^[CLASS] ExtraFieldUtils   [VARIABLES] 
[P8_Replace_Mix]^private static  Map implementations;^38^^^^^33^43^private static final Map implementations;^[CLASS] ExtraFieldUtils   [VARIABLES] 
[P11_Insert_Donor_Statement]^ZipExtraField[] result = new ZipExtraField[v.size (  ) ];ZipExtraField ze =  ( ZipExtraField )  c.newInstance (  ) ;^57^^^^^55^66^ZipExtraField ze =  ( ZipExtraField )  c.newInstance (  ) ;^[CLASS] ExtraFieldUtils  [METHOD] register [RETURN_TYPE] void   Class c [VARIABLES] ZipExtraField  ze  boolean  ClassCastException  cc  Class  c  Map  implementations  int  WORD  InstantiationException  ie  IllegalAccessException  ie  
[P11_Insert_Donor_Statement]^ZipExtraField ze = createExtraField ( headerId ) ;ZipExtraField ze =  ( ZipExtraField )  c.newInstance (  ) ;^57^^^^^55^66^ZipExtraField ze =  ( ZipExtraField )  c.newInstance (  ) ;^[CLASS] ExtraFieldUtils  [METHOD] register [RETURN_TYPE] void   Class c [VARIABLES] ZipExtraField  ze  boolean  ClassCastException  cc  Class  c  Map  implementations  int  WORD  InstantiationException  ie  IllegalAccessException  ie  
[P14_Delete_Statement]^^57^58^^^^55^66^ZipExtraField ze =  ( ZipExtraField )  c.newInstance (  ) ; implementations.put ( ze.getHeaderId (  ) , c ) ;^[CLASS] ExtraFieldUtils  [METHOD] register [RETURN_TYPE] void   Class c [VARIABLES] ZipExtraField  ze  boolean  ClassCastException  cc  Class  c  Map  implementations  int  WORD  InstantiationException  ie  IllegalAccessException  ie  
[P11_Insert_Donor_Statement]^return  ( ZipExtraField )  c.newInstance (  ) ;ZipExtraField ze =  ( ZipExtraField )  c.newInstance (  ) ;^57^^^^^55^66^ZipExtraField ze =  ( ZipExtraField )  c.newInstance (  ) ;^[CLASS] ExtraFieldUtils  [METHOD] register [RETURN_TYPE] void   Class c [VARIABLES] ZipExtraField  ze  boolean  ClassCastException  cc  Class  c  Map  implementations  int  WORD  InstantiationException  ie  IllegalAccessException  ie  
[P5_Replace_Variable]^implementations.put ( ze.getHeaderId (  )  ) ;^58^^^^^55^66^implementations.put ( ze.getHeaderId (  ) , c ) ;^[CLASS] ExtraFieldUtils  [METHOD] register [RETURN_TYPE] void   Class c [VARIABLES] ZipExtraField  ze  boolean  ClassCastException  cc  Class  c  Map  implementations  int  WORD  InstantiationException  ie  IllegalAccessException  ie  
[P5_Replace_Variable]^implementations.put ( c.getHeaderId (  ) , ze ) ;^58^^^^^55^66^implementations.put ( ze.getHeaderId (  ) , c ) ;^[CLASS] ExtraFieldUtils  [METHOD] register [RETURN_TYPE] void   Class c [VARIABLES] ZipExtraField  ze  boolean  ClassCastException  cc  Class  c  Map  implementations  int  WORD  InstantiationException  ie  IllegalAccessException  ie  
[P14_Delete_Statement]^^58^^^^^55^66^implementations.put ( ze.getHeaderId (  ) , c ) ;^[CLASS] ExtraFieldUtils  [METHOD] register [RETURN_TYPE] void   Class c [VARIABLES] ZipExtraField  ze  boolean  ClassCastException  cc  Class  c  Map  implementations  int  WORD  InstantiationException  ie  IllegalAccessException  ie  
[P11_Insert_Donor_Statement]^throw new ZipException  (" ")  ;throw new RuntimeException  (" ")  ;^60^^^^^55^66^throw new RuntimeException  (" ")  ;^[CLASS] ExtraFieldUtils  [METHOD] register [RETURN_TYPE] void   Class c [VARIABLES] ZipExtraField  ze  boolean  ClassCastException  cc  Class  c  Map  implementations  int  WORD  InstantiationException  ie  IllegalAccessException  ie  
[P11_Insert_Donor_Statement]^throw new ZipException  (" ")  ;throw new RuntimeException  (" ")  ;^62^^^^^55^66^throw new RuntimeException  (" ")  ;^[CLASS] ExtraFieldUtils  [METHOD] register [RETURN_TYPE] void   Class c [VARIABLES] ZipExtraField  ze  boolean  ClassCastException  cc  Class  c  Map  implementations  int  WORD  InstantiationException  ie  IllegalAccessException  ie  
[P11_Insert_Donor_Statement]^throw new ZipException  (" ")  ;throw new RuntimeException  (" ")  ;^64^^^^^55^66^throw new RuntimeException  (" ")  ;^[CLASS] ExtraFieldUtils  [METHOD] register [RETURN_TYPE] void   Class c [VARIABLES] ZipExtraField  ze  boolean  ClassCastException  cc  Class  c  Map  implementations  int  WORD  InstantiationException  ie  IllegalAccessException  ie  
[P5_Replace_Variable]^Class c =  ( Class )  headerId.get ( implementations ) ;^78^^^^^76^85^Class c =  ( Class )  implementations.get ( headerId ) ;^[CLASS] ExtraFieldUtils  [METHOD] createExtraField [RETURN_TYPE] ZipExtraField   ZipShort headerId [VARIABLES] UnrecognizedExtraField  u  ZipShort  headerId  Class  c  boolean  Map  implementations  int  WORD  
[P14_Delete_Statement]^^78^^^^^76^85^Class c =  ( Class )  implementations.get ( headerId ) ;^[CLASS] ExtraFieldUtils  [METHOD] createExtraField [RETURN_TYPE] ZipExtraField   ZipShort headerId [VARIABLES] UnrecognizedExtraField  u  ZipShort  headerId  Class  c  boolean  Map  implementations  int  WORD  
[P2_Replace_Operator]^if  ( c == null )  {^79^^^^^76^85^if  ( c != null )  {^[CLASS] ExtraFieldUtils  [METHOD] createExtraField [RETURN_TYPE] ZipExtraField   ZipShort headerId [VARIABLES] UnrecognizedExtraField  u  ZipShort  headerId  Class  c  boolean  Map  implementations  int  WORD  
[P8_Replace_Mix]^if  ( c != this )  {^79^^^^^76^85^if  ( c != null )  {^[CLASS] ExtraFieldUtils  [METHOD] createExtraField [RETURN_TYPE] ZipExtraField   ZipShort headerId [VARIABLES] UnrecognizedExtraField  u  ZipShort  headerId  Class  c  boolean  Map  implementations  int  WORD  
[P15_Unwrap_Block]^return ((org.apache.commons.compress.archivers.zip.ZipExtraField) (c.newInstance()));^79^80^81^^^76^85^if  ( c != null )  { return  ( ZipExtraField )  c.newInstance (  ) ; }^[CLASS] ExtraFieldUtils  [METHOD] createExtraField [RETURN_TYPE] ZipExtraField   ZipShort headerId [VARIABLES] UnrecognizedExtraField  u  ZipShort  headerId  Class  c  boolean  Map  implementations  int  WORD  
[P16_Remove_Block]^^79^80^81^^^76^85^if  ( c != null )  { return  ( ZipExtraField )  c.newInstance (  ) ; }^[CLASS] ExtraFieldUtils  [METHOD] createExtraField [RETURN_TYPE] ZipExtraField   ZipShort headerId [VARIABLES] UnrecognizedExtraField  u  ZipShort  headerId  Class  c  boolean  Map  implementations  int  WORD  
[P13_Insert_Block]^if  ( c != null )  {     return  (  ( ZipExtraField )   ( c.newInstance (  )  )  ) ; }^80^^^^^76^85^[Delete]^[CLASS] ExtraFieldUtils  [METHOD] createExtraField [RETURN_TYPE] ZipExtraField   ZipShort headerId [VARIABLES] UnrecognizedExtraField  u  ZipShort  headerId  Class  c  boolean  Map  implementations  int  WORD  
[P14_Delete_Statement]^^80^^^^^76^85^return  ( ZipExtraField )  c.newInstance (  ) ;^[CLASS] ExtraFieldUtils  [METHOD] createExtraField [RETURN_TYPE] ZipExtraField   ZipShort headerId [VARIABLES] UnrecognizedExtraField  u  ZipShort  headerId  Class  c  boolean  Map  implementations  int  WORD  
[P4_Replace_Constructor]^UnrecognizedExtraField u = new ZipShort ( data, start )  ;^82^^^^^76^85^UnrecognizedExtraField u = new UnrecognizedExtraField (  ) ;^[CLASS] ExtraFieldUtils  [METHOD] createExtraField [RETURN_TYPE] ZipExtraField   ZipShort headerId [VARIABLES] UnrecognizedExtraField  u  ZipShort  headerId  Class  c  boolean  Map  implementations  int  WORD  
[P7_Replace_Invocation]^u .UnrecognizedExtraField (  )  ;^83^^^^^76^85^u.setHeaderId ( headerId ) ;^[CLASS] ExtraFieldUtils  [METHOD] createExtraField [RETURN_TYPE] ZipExtraField   ZipShort headerId [VARIABLES] UnrecognizedExtraField  u  ZipShort  headerId  Class  c  boolean  Map  implementations  int  WORD  
[P14_Delete_Statement]^^83^84^^^^76^85^u.setHeaderId ( headerId ) ; return u;^[CLASS] ExtraFieldUtils  [METHOD] createExtraField [RETURN_TYPE] ZipExtraField   ZipShort headerId [VARIABLES] UnrecognizedExtraField  u  ZipShort  headerId  Class  c  boolean  Map  implementations  int  WORD  
[P3_Replace_Literal]^return parse ( data, false ) ;^95^^^^^94^96^return parse ( data, true ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data [VARIABLES] byte[]  data  boolean  Map  implementations  int  WORD  
[P14_Delete_Statement]^^95^^^^^94^96^return parse ( data, true ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data [VARIABLES] byte[]  data  boolean  Map  implementations  int  WORD  
[P1_Replace_Type]^List v = new  Set  (  ) ;^109^^^^^108^137^List v = new ArrayList (  ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P1_Replace_Type]^LinkedHashSet  v = new Array LinkedHashSet  (  ) ;^109^^^^^108^137^List v = new ArrayList (  ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P1_Replace_Type]^short  start = 0;^110^^^^^108^137^int start = 0;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P3_Replace_Literal]^int start = ;^110^^^^^108^137^int start = 0;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P2_Replace_Operator]^while  ( start > data.length - WORD )  {^111^^^^^108^137^while  ( start <= data.length - WORD )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P2_Replace_Operator]^while  ( start <= data.length  >>  WORD )  {^111^^^^^108^137^while  ( start <= data.length - WORD )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^while  ( length <= data.length - WORD )  {^111^^^^^108^137^while  ( start <= data.length - WORD )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^while  ( start <= data.start - WORD )  {^111^^^^^108^137^while  ( start <= data.length - WORD )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^while  ( start <= start - WORD )  {^111^^^^^108^137^while  ( start <= data.length - WORD )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^while  ( start <= data.length - start )  {^111^^^^^108^137^while  ( start <= data.length - WORD )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^while  ( data.length <= start - WORD )  {^111^^^^^108^137^while  ( start <= data.length - WORD )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^while  ( start <= data.length.length - WORD )  {^111^^^^^108^137^while  ( start <= data.length - WORD )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P8_Replace_Mix]^while  ( start <= length - WORD )  {^111^^^^^108^137^while  ( start <= data.length - WORD )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P2_Replace_Operator]^if  ( start + WORD + length == data.length )  {^114^^^^^108^137^if  ( start + WORD + length > data.length )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P2_Replace_Operator]^if  !=  ( start + WORD + length > data.length )  {^114^^^^^108^137^if  ( start + WORD + length > data.length )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P2_Replace_Operator]^if  ( start  &&  WORD + length > data.length )  {^114^^^^^108^137^if  ( start + WORD + length > data.length )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P2_Replace_Operator]^if  &  ( start + WORD + length > data.length )  {^114^^^^^108^137^if  ( start + WORD + length > data.length )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P2_Replace_Operator]^if  |  ( start + WORD + length > data.length )  {^114^^^^^108^137^if  ( start + WORD + length > data.length )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^if  ( WORD + WORD + length > data.length )  {^114^^^^^108^137^if  ( start + WORD + length > data.length )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^if  ( start + WORD + start > data.length )  {^114^^^^^108^137^if  ( start + WORD + length > data.length )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^if  ( start + start + length > data.length )  {^114^^^^^108^137^if  ( start + WORD + length > data.length )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^if  ( start + WORD + length > start )  {^114^^^^^108^137^if  ( start + WORD + length > data.length )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^if  ( WORD + start + length > data.length )  {^114^^^^^108^137^if  ( start + WORD + length > data.length )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^if  ( start + WORD + data.length > length )  {^114^^^^^108^137^if  ( start + WORD + length > data.length )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^if  ( start + data + length > WORD.length )  {^114^^^^^108^137^if  ( start + WORD + length > data.length )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^if  ( start + data.length + length > WORD )  {^114^^^^^108^137^if  ( start + WORD + length > data.length )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^if  ( data.length + WORD + length > start )  {^114^^^^^108^137^if  ( start + WORD + length > data.length )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P6_Replace_Expression]^if  ( start +  ( WORD )  + length )  {^114^^^^^108^137^if  ( start + WORD + length > data.length )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P6_Replace_Expression]^if  ( start + WORD )  {^114^^^^^108^137^if  ( start + WORD + length > data.length )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P6_Replace_Expression]^if  ( "data starting at " + start + " is in unknown format" )  {^114^^^^^108^137^if  ( start + WORD + length > data.length )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P6_Replace_Expression]^if  ( "data starting at " + start )  {^114^^^^^108^137^if  ( start + WORD + length > data.length )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P8_Replace_Mix]^if  ( start + WORD + WORD > data.length )  {^114^^^^^108^137^if  ( start + WORD + length > data.length )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P15_Unwrap_Block]^throw new java.util.zip.ZipException((("data starting at " + start) + " is in unknown format"));^114^115^116^117^^108^137^if  ( start + WORD + length > data.length )  { throw new ZipException ( "data starting at " + start + " is in unknown format" ) ; }^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P16_Remove_Block]^^114^115^116^117^^108^137^if  ( start + WORD + length > data.length )  { throw new ZipException ( "data starting at " + start + " is in unknown format" ) ; }^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P6_Replace_Expression]^return true ;^115^116^^^^108^137^throw new ZipException ( "data starting at " + start + " is in unknown format" ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P6_Replace_Expression]^return null ;^115^116^^^^108^137^throw new ZipException ( "data starting at " + start + " is in unknown format" ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P6_Replace_Expression]^if  ( start + WORD )  {^120^^^^^108^137^if  ( local )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P15_Unwrap_Block]^ze.parseFromLocalFileData(data, (start + (org.apache.commons.compress.archivers.zip.ExtraFieldUtils.WORD)), length);^120^121^122^123^124^108^137^if  ( local )  { ze.parseFromLocalFileData ( data, start + WORD, length ) ; } else { ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ; }^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P16_Remove_Block]^^120^121^122^123^124^108^137^if  ( local )  { ze.parseFromLocalFileData ( data, start + WORD, length ) ; } else { ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ; }^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^ze.parseFromCentralDirectoryData ( data, length + WORD, length ) ;^123^124^^^^120^125^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^ze.parseFromCentralDirectoryData ( data, start + WORD, start ) ;^123^124^^^^120^125^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^ze.parseFromCentralDirectoryData ( data, start + start, length ) ;^123^124^^^^120^125^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^ze.parseFromCentralDirectoryData (  start + WORD, length ) ;^123^124^^^^120^125^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^ze.parseFromCentralDirectoryData ( data + WORD, length ) ;^123^124^^^^120^125^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^ze.parseFromCentralDirectoryData ( data, start + WORD ) ;^123^124^^^^120^125^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^ze.parseFromCentralDirectoryData ( data, start +  length ) ;^123^124^^^^120^125^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^ze.parseFromCentralDirectoryData ( start, data + WORD, length ) ;^123^124^^^^120^125^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^ze.parseFromCentralDirectoryData ( data, length + WORD, start ) ;^123^124^^^^120^125^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^ze.parseFromCentralDirectoryData ( data, WORD + start, length ) ;^123^124^^^^120^125^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P7_Replace_Invocation]^ze .parseFromLocalFileData ( data , start , length )  ;^123^124^^^^120^125^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P8_Replace_Mix]^ze.parseFromCentralDirectoryData ( data, start + WORD, WORD ) ;^123^124^^^^120^125^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P14_Delete_Statement]^^123^124^^^^120^125^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P11_Insert_Donor_Statement]^ze.parseFromLocalFileData ( data, start + WORD, length ) ;ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^123^124^^^^120^125^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^ze.parseFromLocalFileData ( data, WORD + WORD, length ) ;^121^^^^^108^137^ze.parseFromLocalFileData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^ze.parseFromLocalFileData ( data, start + WORD, start ) ;^121^^^^^108^137^ze.parseFromLocalFileData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^ze.parseFromLocalFileData (  start + WORD, length ) ;^121^^^^^108^137^ze.parseFromLocalFileData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^ze.parseFromLocalFileData ( data + WORD, length ) ;^121^^^^^108^137^ze.parseFromLocalFileData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^ze.parseFromLocalFileData ( data, start + WORD ) ;^121^^^^^108^137^ze.parseFromLocalFileData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^ze.parseFromLocalFileData ( data, start +  length ) ;^121^^^^^108^137^ze.parseFromLocalFileData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^ze.parseFromLocalFileData ( data, WORD + start, length ) ;^121^^^^^108^137^ze.parseFromLocalFileData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^ze.parseFromLocalFileData ( data, length + WORD, start ) ;^121^^^^^108^137^ze.parseFromLocalFileData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P14_Delete_Statement]^^121^^^^^108^137^ze.parseFromLocalFileData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P11_Insert_Donor_Statement]^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;ze.parseFromLocalFileData ( data, start + WORD, length ) ;^121^^^^^108^137^ze.parseFromLocalFileData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^ze.parseFromCentralDirectoryData ( length, start + WORD, data ) ;^123^124^^^^120^125^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^ze.parseFromLocalFileData ( data, length + WORD, length ) ;^121^^^^^108^137^ze.parseFromLocalFileData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^ze.parseFromLocalFileData ( data, start + start, length ) ;^121^^^^^108^137^ze.parseFromLocalFileData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^ze.parseFromLocalFileData ( WORD, start + data, length ) ;^121^^^^^108^137^ze.parseFromLocalFileData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^ze.parseFromLocalFileData ( data, start + length, WORD ) ;^121^^^^^108^137^ze.parseFromLocalFileData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P8_Replace_Mix]^ze.parseFromLocalFileData ( data, start + length, length ) ;^121^^^^^108^137^ze.parseFromLocalFileData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P7_Replace_Invocation]^ZipExtraField ze = mergeCentralDirectoryData ( headerId ) ;^119^^^^^108^137^ZipExtraField ze = createExtraField ( headerId ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P11_Insert_Donor_Statement]^ZipExtraField[] result = new ZipExtraField[v.size (  ) ];ZipExtraField ze = createExtraField ( headerId ) ;^119^^^^^108^137^ZipExtraField ze = createExtraField ( headerId ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P11_Insert_Donor_Statement]^ZipExtraField ze =  ( ZipExtraField )  c.newInstance (  ) ;ZipExtraField ze = createExtraField ( headerId ) ;^119^^^^^108^137^ZipExtraField ze = createExtraField ( headerId ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P14_Delete_Statement]^^119^^^^^108^137^ZipExtraField ze = createExtraField ( headerId ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^ze.parseFromLocalFileData ( data, start + WORD, WORD ) ;^121^^^^^108^137^ze.parseFromLocalFileData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^ze.parseFromLocalFileData ( length, start + WORD, data ) ;^121^^^^^108^137^ze.parseFromLocalFileData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^ze.parseFromCentralDirectoryData ( data, WORD + WORD, length ) ;^123^124^^^^108^137^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^ze.parseFromCentralDirectoryData ( data, start + WORD, start ) ;^123^124^^^^108^137^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^ze.parseFromCentralDirectoryData ( data, start + length, length ) ;^123^124^^^^108^137^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^ze.parseFromCentralDirectoryData (  start + WORD, length ) ;^123^124^^^^108^137^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^ze.parseFromCentralDirectoryData ( data + WORD, length ) ;^123^124^^^^108^137^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^ze.parseFromCentralDirectoryData ( data, start + WORD ) ;^123^124^^^^108^137^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^ze.parseFromCentralDirectoryData ( data, start +  length ) ;^123^124^^^^108^137^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^ze.parseFromCentralDirectoryData ( data, length + WORD, start ) ;^123^124^^^^108^137^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^ze.parseFromCentralDirectoryData ( data, start + length, WORD ) ;^123^124^^^^108^137^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P7_Replace_Invocation]^ze .parseFromLocalFileData ( data , start , start )  ;^123^124^^^^108^137^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P14_Delete_Statement]^^123^124^^^^108^137^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P11_Insert_Donor_Statement]^ze.parseFromLocalFileData ( data, start + WORD, length ) ;ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^123^124^^^^108^137^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P14_Delete_Statement]^^126^^^^^108^137^v.add ( ze ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P2_Replace_Operator]^start +=  ( length  |  WORD ) ;^132^^^^^108^137^start +=  ( length + WORD ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^start +=  ( start + WORD ) ;^132^^^^^108^137^start +=  ( length + WORD ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^start +=  ( WORD + length ) ;^132^^^^^108^137^start +=  ( length + WORD ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P8_Replace_Mix]^start +=   ( WORD + WORD ) ;^132^^^^^108^137^start +=  ( length + WORD ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P11_Insert_Donor_Statement]^start +=  ( local.length + WORD ) ;start +=  ( length + WORD ) ;^132^^^^^108^137^start +=  ( length + WORD ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P4_Replace_Constructor]^ZipShort headerId = new UnrecognizedExtraField (  )  ;^112^^^^^108^137^ZipShort headerId = new ZipShort ( data, start ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P4_Replace_Constructor]^ZipShort headerId = new ZipShort (  start ) ;^112^^^^^108^137^ZipShort headerId = new ZipShort ( data, start ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P4_Replace_Constructor]^ZipShort headerId = new ZipShort ( data ) ;^112^^^^^108^137^ZipShort headerId = new ZipShort ( data, start ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^ZipShort headerId = new ZipShort ( data, length ) ;^112^^^^^108^137^ZipShort headerId = new ZipShort ( data, start ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^ZipShort headerId = new ZipShort ( start, data ) ;^112^^^^^108^137^ZipShort headerId = new ZipShort ( data, start ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P2_Replace_Operator]^int length =  ( new ZipShort ( data, start  >>  2 )  ) .getValue (  ) ;^113^^^^^108^137^int length =  ( new ZipShort ( data, start + 2 )  ) .getValue (  ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P3_Replace_Literal]^int length =  ( new ZipShort ( data, start + length )  ) .getValue (  ) ;^113^^^^^108^137^int length =  ( new ZipShort ( data, start + 2 )  ) .getValue (  ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P4_Replace_Constructor]^int length =  ( int length =  (  new ZipShort ( data, start )   ) .getValue (  ) ;^113^^^^^108^137^int length =  ( new ZipShort ( data, start + 2 )  ) .getValue (  ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P4_Replace_Constructor]^int length =  ( new ZipShort (  start + 2 )  ) .getValue (  ) ;^113^^^^^108^137^int length =  ( new ZipShort ( data, start + 2 )  ) .getValue (  ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P4_Replace_Constructor]^int length =  ( new ZipShort ( data + 2 )  ) .getValue (  ) ;^113^^^^^108^137^int length =  ( new ZipShort ( data, start + 2 )  ) .getValue (  ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^int length =  ( new ZipShort ( data, length + 2 )  ) .getValue (  ) ;^113^^^^^108^137^int length =  ( new ZipShort ( data, start + 2 )  ) .getValue (  ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^int length =  ( new ZipShort ( start, data + 2 )  ) .getValue (  ) ;^113^^^^^108^137^int length =  ( new ZipShort ( data, start + 2 )  ) .getValue (  ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P2_Replace_Operator]^throw new ZipException ( "data starting at "  <=  start  <=  " is in unknown format" ) ;^115^116^^^^108^137^throw new ZipException ( "data starting at " + start + " is in unknown format" ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P2_Replace_Operator]^throw new ZipException ( "data starting at "  <=  start + " is in unknown format" ) ;^115^116^^^^108^137^throw new ZipException ( "data starting at " + start + " is in unknown format" ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P3_Replace_Literal]^throw new ZipException ( "data startata starting at " + start + " is in unknown format" ) ;^115^116^^^^108^137^throw new ZipException ( "data starting at " + start + " is in unknown format" ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P3_Replace_Literal]^throw new ZipException ( "data starting at " + start + " is in unknown" ) ;^115^116^^^^108^137^throw new ZipException ( "data starting at " + start + " is in unknown format" ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P4_Replace_Constructor]^throw throw  new ZipException ( iae.getMessage (  )  )   ;^128^^^^^108^137^throw new ZipException  (" ")  ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P4_Replace_Constructor]^throw throw  new ZipException ( ie.getMessage (  )  )   ;^130^^^^^108^137^throw new ZipException  (" ")  ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P1_Replace_Type]^short  length =  ( new ZipShort ( data, start + 2 )  ) .getValue (  ) ;^113^^^^^108^137^int length =  ( new ZipShort ( data, start + 2 )  ) .getValue (  ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P2_Replace_Operator]^int length =  ( new ZipShort ( data, start  <=  2 )  ) .getValue (  ) ;^113^^^^^108^137^int length =  ( new ZipShort ( data, start + 2 )  ) .getValue (  ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P3_Replace_Literal]^int length =  ( new ZipShort ( data, start  )  ) .getValue (  ) ;^113^^^^^108^137^int length =  ( new ZipShort ( data, start + 2 )  ) .getValue (  ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^int length =  ( new ZipShort ( data, WORD + 2 )  ) .getValue (  ) ;^113^^^^^108^137^int length =  ( new ZipShort ( data, start + 2 )  ) .getValue (  ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P2_Replace_Operator]^throw new ZipException ( "data starting at "  ==  start  ==  " is in unknown format" ) ;^115^116^^^^108^137^throw new ZipException ( "data starting at " + start + " is in unknown format" ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P2_Replace_Operator]^throw new ZipException ( "data starting at "  >>  start + " is in unknown format" ) ;^115^116^^^^108^137^throw new ZipException ( "data starting at " + start + " is in unknown format" ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P3_Replace_Literal]^throw new ZipException ( "data" + start + " is in unknown format" ) ;^115^116^^^^108^137^throw new ZipException ( "data starting at " + start + " is in unknown format" ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P3_Replace_Literal]^throw new ZipException ( "data starting at " + start + " is in unknown format " ) ;^115^116^^^^108^137^throw new ZipException ( "data starting at " + start + " is in unknown format" ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P11_Insert_Donor_Statement]^throw new RuntimeException  (" ")  ;throw new ZipException  (" ")  ;^128^^^^^108^137^throw new ZipException  (" ")  ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P8_Replace_Mix]^throw new RuntimeException  (" ")  ; ;^130^^^^^108^137^throw new ZipException  (" ")  ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P11_Insert_Donor_Statement]^throw new RuntimeException  (" ")  ;throw new ZipException  (" ")  ;^130^^^^^108^137^throw new ZipException  (" ")  ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P2_Replace_Operator]^int length =  ( new ZipShort ( data, start  |  2 )  ) .getValue (  ) ;^113^^^^^108^137^int length =  ( new ZipShort ( data, start + 2 )  ) .getValue (  ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P3_Replace_Literal]^int length =  ( new ZipShort ( data, start + WORD )  ) .getValue (  ) ;^113^^^^^108^137^int length =  ( new ZipShort ( data, start + 2 )  ) .getValue (  ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P14_Delete_Statement]^^113^^^^^108^137^int length =  ( new ZipShort ( data, start + 2 )  ) .getValue (  ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^ze.parseFromCentralDirectoryData ( data, start + start, length ) ;^123^124^^^^108^137^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^ze.parseFromCentralDirectoryData ( WORD, start + data, length ) ;^123^124^^^^108^137^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^ze.parseFromCentralDirectoryData ( data, WORD + start, length ) ;^123^124^^^^108^137^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P7_Replace_Invocation]^ze .parseFromLocalFileData ( data , length , WORD )  ;^123^124^^^^108^137^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P14_Delete_Statement]^^128^^^^^108^137^throw new ZipException  (" ")  ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P14_Delete_Statement]^^130^^^^^108^137^throw new ZipException  (" ")  ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P2_Replace_Operator]^if  ( start + WORD + length >= data.length )  {^114^^^^^108^137^if  ( start + WORD + length > data.length )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P2_Replace_Operator]^if  >  ( start + WORD + length > data.length )  {^114^^^^^108^137^if  ( start + WORD + length > data.length )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P2_Replace_Operator]^if  ( start   instanceof   WORD + length > data.length )  {^114^^^^^108^137^if  ( start + WORD + length > data.length )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^if  ( length + WORD + start > data.length )  {^114^^^^^108^137^if  ( start + WORD + length > data.length )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^if  ( data + WORD + length > start.length )  {^114^^^^^108^137^if  ( start + WORD + length > data.length )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P8_Replace_Mix]^if  ( length + WORD + length > data.length )  {^114^^^^^108^137^if  ( start + WORD + length > data.length )  {^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P2_Replace_Operator]^throw new ZipException ( "data starting at "  ||  start + " is in unknown format" ) ;^115^116^^^^108^137^throw new ZipException ( "data starting at " + start + " is in unknown format" ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P3_Replace_Literal]^throw new ZipException ( "daata starting at " + start + " is in unknown format" ) ;^115^116^^^^108^137^throw new ZipException ( "data starting at " + start + " is in unknown format" ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P3_Replace_Literal]^throw new ZipException ( "data starting at " + start + " is in unknown formatma" ) ;^115^116^^^^108^137^throw new ZipException ( "data starting at " + start + " is in unknown format" ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P2_Replace_Operator]^throw new ZipException ( "data starting at "  &  start  &  " is in unknown format" ) ;^115^116^^^^108^137^throw new ZipException ( "data starting at " + start + " is in unknown format" ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P3_Replace_Literal]^throw new ZipException ( "data stata starting at " + start + " is in unknown format" ) ;^115^116^^^^108^137^throw new ZipException ( "data starting at " + start + " is in unknown format" ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P3_Replace_Literal]^throw new ZipException ( "data starting at " + start + "n unknown f" ) ;^115^116^^^^108^137^throw new ZipException ( "data starting at " + start + " is in unknown format" ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P8_Replace_Mix]^return ;^115^116^^^^108^137^throw new ZipException ( "data starting at " + start + " is in unknown format" ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^ze.parseFromCentralDirectoryData ( data, WORD + WORD, length ) ;^123^124^^^^120^125^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^ze.parseFromCentralDirectoryData ( WORD, start + data, length ) ;^123^124^^^^120^125^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^ze.parseFromCentralDirectoryData ( data, start + length, WORD ) ;^123^124^^^^120^125^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P7_Replace_Invocation]^ze .parseFromCentralDirectoryData ( data , start , WORD )  ;^121^^^^^108^137^ze.parseFromLocalFileData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P8_Replace_Mix]^ze .parseFromCentralDirectoryData ( data , length , WORD )  ;^121^^^^^108^137^ze.parseFromLocalFileData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^ze.parseFromCentralDirectoryData ( data, length + WORD, length ) ;^123^124^^^^108^137^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^ze.parseFromCentralDirectoryData ( data, start + WORD, WORD ) ;^123^124^^^^108^137^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^ze.parseFromCentralDirectoryData ( length, start + WORD, data ) ;^123^124^^^^108^137^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P2_Replace_Operator]^start +=  ( length  <=  WORD ) ;^132^^^^^108^137^start +=  ( length + WORD ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^start +=  ( length + start ) ;^132^^^^^108^137^start +=  ( length + WORD ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P2_Replace_Operator]^int length =  ( new ZipShort ( data, start  <<  2 )  ) .getValue (  ) ;^113^^^^^108^137^int length =  ( new ZipShort ( data, start + 2 )  ) .getValue (  ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P2_Replace_Operator]^throw new ZipException ( "data starting at "  &&  start + " is in unknown format" ) ;^115^116^^^^108^137^throw new ZipException ( "data starting at " + start + " is in unknown format" ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P3_Replace_Literal]^throw new ZipException ( "data starting at data s" + start + " is in unknown format" ) ;^115^116^^^^108^137^throw new ZipException ( "data starting at " + start + " is in unknown format" ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P3_Replace_Literal]^throw new ZipException ( "data starting at " + start + " isis in unknown format" ) ;^115^116^^^^108^137^throw new ZipException ( "data starting at " + start + " is in unknown format" ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P2_Replace_Operator]^int length =  ( new ZipShort ( data, start  <  2 )  ) .getValue (  ) ;^113^^^^^108^137^int length =  ( new ZipShort ( data, start + 2 )  ) .getValue (  ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P3_Replace_Literal]^throw new ZipException ( "ta starting atata starting at " + start + " is in unknown format" ) ;^115^116^^^^108^137^throw new ZipException ( "data starting at " + start + " is in unknown format" ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P3_Replace_Literal]^throw new ZipException ( "data starting at " + start + " is in unknown formatin un" ) ;^115^116^^^^108^137^throw new ZipException ( "data starting at " + start + " is in unknown format" ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^ze.parseFromLocalFileData ( start, data + WORD, length ) ;^121^^^^^108^137^ze.parseFromLocalFileData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P7_Replace_Invocation]^ze .parseFromLocalFileData ( data , WORD , start )  ;^123^124^^^^108^137^ze.parseFromCentralDirectoryData ( data, start + WORD, length ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P3_Replace_Literal]^ZipExtraField[] result = new ZipExtraField[v.size() + 3 ];^135^^^^^108^137^ZipExtraField[] result = new ZipExtraField[v.size (  ) ];^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P7_Replace_Invocation]^ZipExtraField[] result = new ZipExtraField[v.add (  ) ];^135^^^^^108^137^ZipExtraField[] result = new ZipExtraField[v.size (  ) ];^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P11_Insert_Donor_Statement]^ZipExtraField ze =  ( ZipExtraField )  c.newInstance (  ) ;ZipExtraField[] result = new ZipExtraField[v.size (  ) ];^135^^^^^108^137^ZipExtraField[] result = new ZipExtraField[v.size (  ) ];^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P11_Insert_Donor_Statement]^ZipExtraField ze = createExtraField ( headerId ) ;ZipExtraField[] result = new ZipExtraField[v.size (  ) ];^135^^^^^108^137^ZipExtraField[] result = new ZipExtraField[v.size (  ) ];^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P3_Replace_Literal]^ZipExtraField[] result = new ZipExtraField[v.size() - 2 ];^135^^^^^108^137^ZipExtraField[] result = new ZipExtraField[v.size (  ) ];^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P14_Delete_Statement]^^135^^^^^108^137^ZipExtraField[] result = new ZipExtraField[v.size (  ) ];^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P5_Replace_Variable]^return  ( ZipExtraField[] )  result.toArray ( v ) ;^136^^^^^108^137^return  ( ZipExtraField[] )  v.toArray ( result ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P14_Delete_Statement]^^136^^^^^108^137^return  ( ZipExtraField[] )  v.toArray ( result ) ;^[CLASS] ExtraFieldUtils  [METHOD] parse [RETURN_TYPE] ZipExtraField[]   byte[] data boolean local [VARIABLES] byte[]  data  ZipExtraField  ze  ZipShort  headerId  boolean  local  ZipExtraField[]  result  List  v  Map  implementations  int  WORD  length  start  InstantiationException  ie  IllegalAccessException  iae  
[P1_Replace_Type]^long  sum = WORD * data.length;^145^^^^^144^161^int sum = WORD * data.length;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P2_Replace_Operator]^int / sum = WORD * data.length;^145^^^^^144^161^int sum = WORD * data.length;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P1_Replace_Type]^for  (  long  i = 0; i < data.length; i++ )  {^146^^^^^144^161^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P2_Replace_Operator]^for  ( int i = 0; i <= data.length; i++ )  {^146^^^^^144^161^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P2_Replace_Operator]^for  ||  ( int i = 0; i < data.length; i++ )  {^146^^^^^144^161^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P3_Replace_Literal]^for  ( int i = sum; i < data.length; i++ )  {^146^^^^^144^161^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P8_Replace_Mix]^sum +=  null[i].getLocalFileDataLength (  ) .getValue (  ) ;^147^^^^^144^161^sum += data[i].getLocalFileDataLength (  ) .getValue (  ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P11_Insert_Donor_Statement]^sum += data[i].getCentralDirectoryLength (  ) .getValue (  ) ;sum += data[i].getLocalFileDataLength (  ) .getValue (  ) ;^147^^^^^144^161^sum += data[i].getLocalFileDataLength (  ) .getValue (  ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P8_Replace_Mix]^sum += data[i] .getLocalFileDataData (  )  .getValue (  ) ;^147^^^^^144^161^sum += data[i].getLocalFileDataLength (  ) .getValue (  ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P14_Delete_Statement]^^147^^^^^144^161^sum += data[i].getLocalFileDataLength (  ) .getValue (  ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P11_Insert_Donor_Statement]^System.arraycopy ( data[i].getLocalFileDataLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;sum += data[i].getLocalFileDataLength (  ) .getValue (  ) ;^147^^^^^144^161^sum += data[i].getLocalFileDataLength (  ) .getValue (  ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P1_Replace_Type]^for  (  short  i = 0; i < data.length; i++ )  {^146^^^^^144^161^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P3_Replace_Literal]^for  ( int i = -5; i < data.length; i++ )  {^146^^^^^144^161^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P1_Replace_Type]^long  start = 0;^150^^^^^144^161^int start = 0;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P3_Replace_Literal]^int start = 4;^150^^^^^144^161^int start = 0;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P1_Replace_Type]^for  (  short  i = 0; i < data.length; i++ )  {^151^^^^^144^161^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P2_Replace_Operator]^for  ( int i = 0; i == data.length; i++ )  {^151^^^^^144^161^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P2_Replace_Operator]^for  >>  ( int i = 0; i < data.length; i++ )  {^151^^^^^144^161^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P2_Replace_Operator]^for  <<  ( int i = 0; i < data.length; i++ )  {^151^^^^^144^161^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P2_Replace_Operator]^for  >=  ( int i = 0; i < data.length; i++ )  {^151^^^^^144^161^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P2_Replace_Operator]^for  >  ( int i = 0; i < data.length; i++ )  {^151^^^^^144^161^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P3_Replace_Literal]^for  ( int i = -4; i < data.length; i++ )  {^151^^^^^144^161^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P3_Replace_Literal]^for  ( int i = 5; i < data.length; i++ )  {^151^^^^^144^161^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P3_Replace_Literal]^for  ( int i = start; i < data.length; i++ )  {^151^^^^^144^161^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P3_Replace_Literal]^for  ( int i = -7; i < data.length; i++ )  {^151^^^^^144^161^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P2_Replace_Operator]^start +=  ( local.length  >=  WORD ) ;^158^^^^^144^161^start +=  ( local.length + WORD ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^start +=  ( result.length + WORD ) ;^158^^^^^144^161^start +=  ( local.length + WORD ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^start +=  ( sum + WORD ) ;^158^^^^^144^161^start +=  ( local.length + WORD ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^start +=  ( local.length + start ) ;^158^^^^^144^161^start +=  ( local.length + WORD ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^start +=  ( local.length.length + WORD ) ;^158^^^^^144^161^start +=  ( local.length + WORD ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^start +=  ( local + WORD ) ;^158^^^^^144^161^start +=  ( local.length + WORD ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^start +=  ( WORD + local.length ) ;^158^^^^^144^161^start +=  ( local.length + WORD ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P11_Insert_Donor_Statement]^start +=  ( length + WORD ) ;start +=  ( local.length + WORD ) ;^158^^^^^144^161^start +=  ( local.length + WORD ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P11_Insert_Donor_Statement]^byte[] local = data[i].getCentralDirectoryData (  ) ;byte[] local = data[i].getLocalFileDataData (  ) ;^156^^^^^144^161^byte[] local = data[i].getLocalFileDataData (  ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P3_Replace_Literal]^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , i, result, start, 2 ) ;^152^153^^^^144^161^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P3_Replace_Literal]^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 5 ) ;^152^153^^^^144^161^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, sum, 2 ) ;^152^153^^^^144^161^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0,  start, 2 ) ;^152^153^^^^144^161^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result,  2 ) ;^152^153^^^^144^161^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^System.arraycopy ( result[i].getHeaderId (  ) .getBytes (  ) , 0, data, start, 2 ) ;^152^153^^^^144^161^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P7_Replace_Invocation]^System.arraycopy ( data[i].getHeaderId (  )  .getValue (  )  , 0, result, start, 2 ) ;^152^153^^^^144^161^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P7_Replace_Invocation]^System.arraycopy ( data[i] .parseFromCentralDirectoryData ( result , sum , length )  .getBytes (  ) , 0, result, start, 2 ) ;^152^153^^^^144^161^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P8_Replace_Mix]^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, local, start, 2 ) ;^152^153^^^^144^161^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P14_Delete_Statement]^^152^153^^^^144^161^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P11_Insert_Donor_Statement]^System.arraycopy ( data[i].getLocalFileDataLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 2 ) ;^152^153^^^^144^161^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P11_Insert_Donor_Statement]^System.arraycopy ( data[i].getCentralDirectoryLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 2 ) ;^152^153^^^^144^161^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P7_Replace_Invocation]^System.arraycopy ( data[i] .parseFromCentralDirectoryData ( result , sum , sum )  .getBytes (  ) , 0, result, start, 2 ) ;^152^153^^^^144^161^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P2_Replace_Operator]^System.arraycopy ( data[i].getLocalFileDataLength (  !=  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^154^155^^^^144^161^System.arraycopy ( data[i].getLocalFileDataLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P3_Replace_Literal]^System.arraycopy ( data[i].getLocalFileDataLength (  ) .getBytes (  ) , WORD, result, start + 2, 2 ) ;^154^155^^^^144^161^System.arraycopy ( data[i].getLocalFileDataLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P3_Replace_Literal]^System.arraycopy ( data[i].getLocalFileDataLength (  ) .getBytes (  ) , 0, result, start + ,  ) ;^154^155^^^^144^161^System.arraycopy ( data[i].getLocalFileDataLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P3_Replace_Literal]^System.arraycopy ( data[i].getLocalFileDataLength (  ) .getBytes (  ) , 0, result, start + WORD, WORD ) ;^154^155^^^^144^161^System.arraycopy ( data[i].getLocalFileDataLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^System.arraycopy ( data[i].getLocalFileDataLength (  ) .getBytes (  ) , 0, local, start + 2, 2 ) ;^154^155^^^^144^161^System.arraycopy ( data[i].getLocalFileDataLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^System.arraycopy ( data[i].getLocalFileDataLength (  ) .getBytes (  ) , 0, result, sum + 2, 2 ) ;^154^155^^^^144^161^System.arraycopy ( data[i].getLocalFileDataLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^System.arraycopy ( data[i].getLocalFileDataLength (  ) .getBytes (  ) , 0,  start + 2, 2 ) ;^154^155^^^^144^161^System.arraycopy ( data[i].getLocalFileDataLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^System.arraycopy ( data[i].getLocalFileDataLength (  ) .getBytes (  ) , 0, result + 2, 2 ) ;^154^155^^^^144^161^System.arraycopy ( data[i].getLocalFileDataLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^System.arraycopy ( start[i].getLocalFileDataLength (  ) .getBytes (  ) , 0, result, data + 2, 2 ) ;^154^155^^^^144^161^System.arraycopy ( data[i].getLocalFileDataLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^System.arraycopy ( data[i].getLocalFileDataLength (  ) .getBytes (  ) , 0, start, result + 2, 2 ) ;^154^155^^^^144^161^System.arraycopy ( data[i].getLocalFileDataLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P14_Delete_Statement]^^154^155^^^^144^161^System.arraycopy ( data[i].getLocalFileDataLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P11_Insert_Donor_Statement]^sum += data[i].getLocalFileDataLength (  ) .getValue (  ) ;System.arraycopy ( data[i].getLocalFileDataLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^154^155^^^^144^161^System.arraycopy ( data[i].getLocalFileDataLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P11_Insert_Donor_Statement]^System.arraycopy ( data[i].getCentralDirectoryLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;System.arraycopy ( data[i].getLocalFileDataLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^154^155^^^^144^161^System.arraycopy ( data[i].getLocalFileDataLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P11_Insert_Donor_Statement]^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 2 ) ;System.arraycopy ( data[i].getLocalFileDataLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^154^155^^^^144^161^System.arraycopy ( data[i].getLocalFileDataLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P7_Replace_Invocation]^System.arraycopy ( data[i] .getLocalFileDataData (  )  .getBytes (  ) , 0, result, start + 2, 2 ) ;^154^155^^^^144^161^System.arraycopy ( data[i].getLocalFileDataLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P8_Replace_Mix]^byte[] local = data[i] .getLocalFileDataLength (  )  ;^156^^^^^144^161^byte[] local = data[i].getLocalFileDataData (  ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P14_Delete_Statement]^^156^^^^^144^161^byte[] local = data[i].getLocalFileDataData (  ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P3_Replace_Literal]^System.arraycopy ( local, sum, result, start + WORD, local.length ) ;^157^^^^^144^161^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^System.arraycopy ( local, 0, result, sum + WORD, local.length ) ;^157^^^^^144^161^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^System.arraycopy ( local, 0, result, start + sum, local.length ) ;^157^^^^^144^161^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^System.arraycopy ( local, 0, result, start + WORD, start ) ;^157^^^^^144^161^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^System.arraycopy (  0, result, start + WORD, local.length ) ;^157^^^^^144^161^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^System.arraycopy ( local, 0,  start + WORD, local.length ) ;^157^^^^^144^161^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^System.arraycopy ( local, 0, result + WORD, local.length ) ;^157^^^^^144^161^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^System.arraycopy ( local, 0, result, start +  local.length ) ;^157^^^^^144^161^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^System.arraycopy ( local, 0, result, start + WORD ) ;^157^^^^^144^161^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^System.arraycopy ( result, 0, local, start + WORD, local.length ) ;^157^^^^^144^161^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^System.arraycopy ( local, 0, result, WORD + start, local.length ) ;^157^^^^^144^161^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^System.arraycopy ( WORD, 0, result, start + local, local.length ) ;^157^^^^^144^161^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^System.arraycopy ( local, 0, result, local.length + WORD, start ) ;^157^^^^^144^161^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P14_Delete_Statement]^^157^158^^^^144^161^System.arraycopy ( local, 0, result, start + WORD, local.length ) ; start +=  ( local.length + WORD ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P2_Replace_Operator]^start +=  ( local.length  <=  WORD ) ;^158^^^^^144^161^start +=  ( local.length + WORD ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^start +=  ( start + WORD ) ;^158^^^^^144^161^start +=  ( local.length + WORD ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^start +=  ( local.length + sum ) ;^158^^^^^144^161^start +=  ( local.length + WORD ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P3_Replace_Literal]^for  ( int i = 6; i < data.length; i++ )  {^151^^^^^144^161^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P3_Replace_Literal]^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , start, result, start, 2 ) ;^152^153^^^^144^161^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P3_Replace_Literal]^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start,  ) ;^152^153^^^^144^161^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, length, 2 ) ;^152^153^^^^144^161^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^System.arraycopy ( start[i].getHeaderId (  ) .getBytes (  ) , 0, result, data, 2 ) ;^152^153^^^^144^161^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P7_Replace_Invocation]^System.arraycopy ( data[i] .parseFromCentralDirectoryData ( result , length , start )  .getBytes (  ) , 0, result, start, 2 ) ;^152^153^^^^144^161^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P7_Replace_Invocation]^System.arraycopy ( data[i] .parseFromCentralDirectoryData ( local , sum , sum )  .getBytes (  ) , 0, result, start, 2 ) ;^152^153^^^^144^161^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P7_Replace_Invocation]^System.arraycopy ( data[i] .parseFromCentralDirectoryData ( result , i , i )  .getBytes (  ) , 0, result, start, 2 ) ;^152^153^^^^144^161^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P2_Replace_Operator]^System.arraycopy ( data[i].getLocalFileDataLength (  >  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^154^155^^^^144^161^System.arraycopy ( data[i].getLocalFileDataLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^System.arraycopy ( result[i].getLocalFileDataLength (  ) .getBytes (  ) , 0, data, start + 2, 2 ) ;^154^155^^^^144^161^System.arraycopy ( data[i].getLocalFileDataLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P7_Replace_Invocation]^System.arraycopy ( data[i].getLocalFileDataLength (  )  .getValue (  )  , 0, result, start + 2, 2 ) ;^154^155^^^^144^161^System.arraycopy ( data[i].getLocalFileDataLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P14_Delete_Statement]^^156^157^^^^144^161^byte[] local = data[i].getLocalFileDataData (  ) ; System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P3_Replace_Literal]^System.arraycopy ( local, length, result, start + WORD, local.length ) ;^157^^^^^144^161^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^System.arraycopy ( local, 0, local, start + WORD, local.length ) ;^157^^^^^144^161^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^System.arraycopy ( local, 0, result, length + WORD, local.length ) ;^157^^^^^144^161^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^System.arraycopy ( local, 0, result, start + WORD, sum ) ;^157^^^^^144^161^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^System.arraycopy ( start, 0, result, local + WORD, local.length ) ;^157^^^^^144^161^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^System.arraycopy ( local, 0, WORD, start + result, local.length ) ;^157^^^^^144^161^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^System.arraycopy ( local, 0, result, start + local.length, WORD ) ;^157^^^^^144^161^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P14_Delete_Statement]^^157^^^^^144^161^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^return local;^160^^^^^144^161^return result;^[CLASS] ExtraFieldUtils  [METHOD] mergeLocalFileDataData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P1_Replace_Type]^short  sum = WORD * data.length;^169^^^^^168^185^int sum = WORD * data.length;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P2_Replace_Operator]^int - sum = WORD * data.length;^169^^^^^168^185^int sum = WORD * data.length;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P1_Replace_Type]^for  (  short  i = 0; i < data.length; i++ )  {^170^^^^^168^185^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P2_Replace_Operator]^for  ( int i = 0; i <= data.length; i++ )  {^170^^^^^168^185^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P2_Replace_Operator]^for  >>  ( int i = 0; i < data.length; i++ )  {^170^^^^^168^185^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P3_Replace_Literal]^for  ( int i = -4; i < data.length; i++ )  {^170^^^^^168^185^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P8_Replace_Mix]^sum +=  null[i].getCentralDirectoryLength (  ) .getValue (  ) ;^171^^^^^168^185^sum += data[i].getCentralDirectoryLength (  ) .getValue (  ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P11_Insert_Donor_Statement]^sum += data[i].getLocalFileDataLength (  ) .getValue (  ) ;sum += data[i].getCentralDirectoryLength (  ) .getValue (  ) ;^171^^^^^168^185^sum += data[i].getCentralDirectoryLength (  ) .getValue (  ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P8_Replace_Mix]^sum += data[i] .getCentralDirectoryData (  )  .getValue (  ) ;^171^^^^^168^185^sum += data[i].getCentralDirectoryLength (  ) .getValue (  ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P14_Delete_Statement]^^171^^^^^168^185^sum += data[i].getCentralDirectoryLength (  ) .getValue (  ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P11_Insert_Donor_Statement]^System.arraycopy ( data[i].getCentralDirectoryLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;sum += data[i].getCentralDirectoryLength (  ) .getValue (  ) ;^171^^^^^168^185^sum += data[i].getCentralDirectoryLength (  ) .getValue (  ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P3_Replace_Literal]^for  ( int i = WORD; i < data.length; i++ )  {^170^^^^^168^185^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P1_Replace_Type]^long  start = 0;^174^^^^^168^185^int start = 0;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P1_Replace_Type]^for  (  short  i = 0; i < data.length; i++ )  {^175^^^^^168^185^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P2_Replace_Operator]^for  ( int i = 0; i <= data.length; i++ )  {^175^^^^^168^185^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P2_Replace_Operator]^for  &&  ( int i = 0; i < data.length; i++ )  {^175^^^^^168^185^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P2_Replace_Operator]^for  <=  ( int i = 0; i < data.length; i++ )  {^175^^^^^168^185^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P2_Replace_Operator]^for  >=  ( int i = 0; i < data.length; i++ )  {^175^^^^^168^185^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P2_Replace_Operator]^for  &  ( int i = 0; i < data.length; i++ )  {^175^^^^^168^185^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P3_Replace_Literal]^for  ( int i = i; i < data.length; i++ )  {^175^^^^^168^185^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P3_Replace_Literal]^for  ( int i = start; i < data.length; i++ )  {^175^^^^^168^185^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P3_Replace_Literal]^for  ( int i = -3; i < data.length; i++ )  {^175^^^^^168^185^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P3_Replace_Literal]^for  ( int i = sum; i < data.length; i++ )  {^175^^^^^168^185^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P2_Replace_Operator]^start +=  ( local.length  <  WORD ) ;^182^^^^^168^185^start +=  ( local.length + WORD ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^start +=  ( result.length + WORD ) ;^182^^^^^168^185^start +=  ( local.length + WORD ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^start +=  ( local.length + sum ) ;^182^^^^^168^185^start +=  ( local.length + WORD ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^start +=  ( local.length.length + WORD ) ;^182^^^^^168^185^start +=  ( local.length + WORD ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^start +=  ( WORD + local.length ) ;^182^^^^^168^185^start +=  ( local.length + WORD ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P11_Insert_Donor_Statement]^start +=  ( length + WORD ) ;start +=  ( local.length + WORD ) ;^182^^^^^168^185^start +=  ( local.length + WORD ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P7_Replace_Invocation]^byte[] local = data[i] .getCentralDirectoryLength (  )  ;^180^^^^^168^185^byte[] local = data[i].getCentralDirectoryData (  ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P11_Insert_Donor_Statement]^byte[] local = data[i].getLocalFileDataData (  ) ;byte[] local = data[i].getCentralDirectoryData (  ) ;^180^^^^^168^185^byte[] local = data[i].getCentralDirectoryData (  ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P3_Replace_Literal]^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, start ) ;^176^177^^^^168^185^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, local, start, 2 ) ;^176^177^^^^168^185^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, sum, 2 ) ;^176^177^^^^168^185^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0,  start, 2 ) ;^176^177^^^^168^185^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result,  2 ) ;^176^177^^^^168^185^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, start, result, 2 ) ;^176^177^^^^168^185^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P14_Delete_Statement]^^176^177^^^^168^185^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P11_Insert_Donor_Statement]^System.arraycopy ( data[i].getLocalFileDataLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 2 ) ;^176^177^^^^168^185^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P11_Insert_Donor_Statement]^System.arraycopy ( data[i].getCentralDirectoryLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 2 ) ;^176^177^^^^168^185^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P7_Replace_Invocation]^System.arraycopy ( data[i].getHeaderId (  )  .getValue (  )  , 0, result, start, 2 ) ;^176^177^^^^168^185^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P2_Replace_Operator]^System.arraycopy ( data[i].getCentralDirectoryLength (  >  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^178^179^^^^168^185^System.arraycopy ( data[i].getCentralDirectoryLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P3_Replace_Literal]^System.arraycopy ( data[i].getCentralDirectoryLength (  ) .getBytes (  ) , -9, result, start + 2, 2 ) ;^178^179^^^^168^185^System.arraycopy ( data[i].getCentralDirectoryLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P3_Replace_Literal]^System.arraycopy ( data[i].getCentralDirectoryLength (  ) .getBytes (  ) , 0, result, start , 2 ) ;^178^179^^^^168^185^System.arraycopy ( data[i].getCentralDirectoryLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^System.arraycopy ( data[i].getCentralDirectoryLength (  ) .getBytes (  ) , 0, local, start + 2, 2 ) ;^178^179^^^^168^185^System.arraycopy ( data[i].getCentralDirectoryLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^System.arraycopy ( data[i].getCentralDirectoryLength (  ) .getBytes (  ) , 0,  start + 2, 2 ) ;^178^179^^^^168^185^System.arraycopy ( data[i].getCentralDirectoryLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^System.arraycopy ( data[i].getCentralDirectoryLength (  ) .getBytes (  ) , 0, result + 2, 2 ) ;^178^179^^^^168^185^System.arraycopy ( data[i].getCentralDirectoryLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^System.arraycopy ( start[i].getCentralDirectoryLength (  ) .getBytes (  ) , 0, result, data + 2, 2 ) ;^178^179^^^^168^185^System.arraycopy ( data[i].getCentralDirectoryLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P7_Replace_Invocation]^System.arraycopy ( data[i] .getCentralDirectoryData (  )  .getBytes (  ) , 0, result, start + 2, 2 ) ;^178^179^^^^168^185^System.arraycopy ( data[i].getCentralDirectoryLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P8_Replace_Mix]^System.arraycopy ( data[i].getCentralDirectoryLength (  ) .getBytes (  ) , 0, result, sum + 2, 2 ) ;^178^179^^^^168^185^System.arraycopy ( data[i].getCentralDirectoryLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P14_Delete_Statement]^^178^179^^^^168^185^System.arraycopy ( data[i].getCentralDirectoryLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P11_Insert_Donor_Statement]^sum += data[i].getCentralDirectoryLength (  ) .getValue (  ) ;System.arraycopy ( data[i].getCentralDirectoryLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^178^179^^^^168^185^System.arraycopy ( data[i].getCentralDirectoryLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P11_Insert_Donor_Statement]^System.arraycopy ( data[i].getLocalFileDataLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;System.arraycopy ( data[i].getCentralDirectoryLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^178^179^^^^168^185^System.arraycopy ( data[i].getCentralDirectoryLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P11_Insert_Donor_Statement]^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 2 ) ;System.arraycopy ( data[i].getCentralDirectoryLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^178^179^^^^168^185^System.arraycopy ( data[i].getCentralDirectoryLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P14_Delete_Statement]^^180^^^^^168^185^byte[] local = data[i].getCentralDirectoryData (  ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P3_Replace_Literal]^System.arraycopy ( local, -6, result, start + WORD, local.length ) ;^181^^^^^168^185^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^System.arraycopy ( result, 0, result, start + WORD, local.length ) ;^181^^^^^168^185^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^System.arraycopy ( local, 0, result, sum + WORD, local.length ) ;^181^^^^^168^185^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^System.arraycopy ( local, 0, result, start + sum, local.length ) ;^181^^^^^168^185^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^System.arraycopy ( local, 0, result, start + WORD, sum ) ;^181^^^^^168^185^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^System.arraycopy (  0, result, start + WORD, local.length ) ;^181^^^^^168^185^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^System.arraycopy ( local, 0,  start + WORD, local.length ) ;^181^^^^^168^185^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^System.arraycopy ( local, 0, result + WORD, local.length ) ;^181^^^^^168^185^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^System.arraycopy ( local, 0, result, start +  local.length ) ;^181^^^^^168^185^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^System.arraycopy ( local, 0, result, start + WORD ) ;^181^^^^^168^185^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^System.arraycopy ( start, 0, result, local + WORD, local.length ) ;^181^^^^^168^185^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^System.arraycopy ( local, 0, WORD, start + result, local.length ) ;^181^^^^^168^185^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^System.arraycopy ( local, 0, result, WORD + start, local.length ) ;^181^^^^^168^185^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^System.arraycopy ( local, 0, result, start + local.length, WORD ) ;^181^^^^^168^185^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^System.arraycopy ( local, 0, local.length, start + WORD, result ) ;^181^^^^^168^185^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P14_Delete_Statement]^^181^^^^^168^185^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P2_Replace_Operator]^start +=  ( local.length  <=  WORD ) ;^182^^^^^168^185^start +=  ( local.length + WORD ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^start +=  ( local.length + start ) ;^182^^^^^168^185^start +=  ( local.length + WORD ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^start +=  ( local + WORD ) ;^182^^^^^168^185^start +=  ( local.length + WORD ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P3_Replace_Literal]^for  ( int i = length; i < data.length; i++ )  {^175^^^^^168^185^for  ( int i = 0; i < data.length; i++ )  {^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P3_Replace_Literal]^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , sum, result, start, 2 ) ;^176^177^^^^168^185^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P3_Replace_Literal]^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 6 ) ;^176^177^^^^168^185^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^System.arraycopy ( result[i].getHeaderId (  ) .getBytes (  ) , 0, data, start, 2 ) ;^176^177^^^^168^185^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P7_Replace_Invocation]^System.arraycopy ( data[i] .parseFromCentralDirectoryData ( result , length , length )  .getBytes (  ) , 0, result, start, 2 ) ;^176^177^^^^168^185^System.arraycopy ( data[i].getHeaderId (  ) .getBytes (  ) , 0, result, start, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P2_Replace_Operator]^System.arraycopy ( data[i].getCentralDirectoryLength (  <=  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^178^179^^^^168^185^System.arraycopy ( data[i].getCentralDirectoryLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P3_Replace_Literal]^System.arraycopy ( data[i].getCentralDirectoryLength (  ) .getBytes (  ) , 0, result, start + length, length ) ;^178^179^^^^168^185^System.arraycopy ( data[i].getCentralDirectoryLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^System.arraycopy ( result[i].getCentralDirectoryLength (  ) .getBytes (  ) , 0, data, start + 2, 2 ) ;^178^179^^^^168^185^System.arraycopy ( data[i].getCentralDirectoryLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^System.arraycopy ( data[i].getCentralDirectoryLength (  ) .getBytes (  ) , 0, start, result + 2, 2 ) ;^178^179^^^^168^185^System.arraycopy ( data[i].getCentralDirectoryLength (  ) .getBytes (  ) , 0, result, start + 2, 2 ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P14_Delete_Statement]^^180^181^^^^168^185^byte[] local = data[i].getCentralDirectoryData (  ) ; System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P3_Replace_Literal]^System.arraycopy ( local, i, result, start + WORD, local.length ) ;^181^^^^^168^185^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^System.arraycopy ( local, 0, result, start + WORD, start ) ;^181^^^^^168^185^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^System.arraycopy ( WORD, 0, result, start + local, local.length ) ;^181^^^^^168^185^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^System.arraycopy ( result, 0, local, start + WORD, local.length ) ;^181^^^^^168^185^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^System.arraycopy ( local, 0, result, local.length + WORD, start ) ;^181^^^^^168^185^System.arraycopy ( local, 0, result, start + WORD, local.length ) ;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
[P5_Replace_Variable]^return local;^184^^^^^168^185^return result;^[CLASS] ExtraFieldUtils  [METHOD] mergeCentralDirectoryData [RETURN_TYPE] byte[]   ZipExtraField[] data [VARIABLES] byte[]  local  result  boolean  Map  implementations  ZipExtraField[]  data  int  WORD  i  length  start  sum  
