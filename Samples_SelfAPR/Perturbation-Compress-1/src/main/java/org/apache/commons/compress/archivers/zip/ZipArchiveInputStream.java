[P8_Replace_Mix]^input =  new ZipInputStream ( null ) ;^33^^^^^32^34^input = new ZipInputStream ( inputStream ) ;^[CLASS] ZipArchiveInputStream  [METHOD] <init> [RETURN_TYPE] InputStream)   InputStream inputStream [VARIABLES] ZipInputStream  input  InputStream  inputStream  boolean  
[P8_Replace_Mix]^java.util.zip.ZipEntry entry = input .ZipInputStream ( this )  ;^37^^^^^36^42^java.util.zip.ZipEntry entry = input.getNextEntry (  ) ;^[CLASS] ZipArchiveInputStream  [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry   [VARIABLES] ZipInputStream  input  ZipEntry  entry  boolean  
[P14_Delete_Statement]^^37^^^^^36^42^java.util.zip.ZipEntry entry = input.getNextEntry (  ) ;^[CLASS] ZipArchiveInputStream  [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry   [VARIABLES] ZipInputStream  input  ZipEntry  entry  boolean  
[P2_Replace_Operator]^if ( entry != null )  {^38^^^^^36^42^if ( entry == null )  {^[CLASS] ZipArchiveInputStream  [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry   [VARIABLES] ZipInputStream  input  ZipEntry  entry  boolean  
[P8_Replace_Mix]^if ( entry == this )  {^38^^^^^36^42^if ( entry == null )  {^[CLASS] ZipArchiveInputStream  [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry   [VARIABLES] ZipInputStream  input  ZipEntry  entry  boolean  
[P15_Unwrap_Block]^return null;^38^39^40^^^36^42^if ( entry == null )  { return null; }^[CLASS] ZipArchiveInputStream  [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry   [VARIABLES] ZipInputStream  input  ZipEntry  entry  boolean  
[P16_Remove_Block]^^38^39^40^^^36^42^if ( entry == null )  { return null; }^[CLASS] ZipArchiveInputStream  [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry   [VARIABLES] ZipInputStream  input  ZipEntry  entry  boolean  
[P8_Replace_Mix]^return true;^39^^^^^36^42^return null;^[CLASS] ZipArchiveInputStream  [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry   [VARIABLES] ZipInputStream  input  ZipEntry  entry  boolean  
[P8_Replace_Mix]^return false;^39^^^^^36^42^return null;^[CLASS] ZipArchiveInputStream  [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry   [VARIABLES] ZipInputStream  input  ZipEntry  entry  boolean  
[P14_Delete_Statement]^^45^^^^^44^46^return getNextZipEntry (  ) ;^[CLASS] ZipArchiveInputStream  [METHOD] getNextEntry [RETURN_TYPE] ArchiveEntry   [VARIABLES] ZipInputStream  input  boolean  
[P5_Replace_Variable]^return input.read ( b, len, len ) ;^49^^^^^48^50^return input.read ( b, off, len ) ;^[CLASS] ZipArchiveInputStream  [METHOD] read [RETURN_TYPE] int   byte[] b int off int len [VARIABLES] byte[]  b  ZipInputStream  input  boolean  int  len  off  
[P5_Replace_Variable]^return input.read (  off, len ) ;^49^^^^^48^50^return input.read ( b, off, len ) ;^[CLASS] ZipArchiveInputStream  [METHOD] read [RETURN_TYPE] int   byte[] b int off int len [VARIABLES] byte[]  b  ZipInputStream  input  boolean  int  len  off  
[P5_Replace_Variable]^return input.read ( b,  len ) ;^49^^^^^48^50^return input.read ( b, off, len ) ;^[CLASS] ZipArchiveInputStream  [METHOD] read [RETURN_TYPE] int   byte[] b int off int len [VARIABLES] byte[]  b  ZipInputStream  input  boolean  int  len  off  
[P5_Replace_Variable]^return input.read ( b, off ) ;^49^^^^^48^50^return input.read ( b, off, len ) ;^[CLASS] ZipArchiveInputStream  [METHOD] read [RETURN_TYPE] int   byte[] b int off int len [VARIABLES] byte[]  b  ZipInputStream  input  boolean  int  len  off  
[P5_Replace_Variable]^return input.read ( len, off, b ) ;^49^^^^^48^50^return input.read ( b, off, len ) ;^[CLASS] ZipArchiveInputStream  [METHOD] read [RETURN_TYPE] int   byte[] b int off int len [VARIABLES] byte[]  b  ZipInputStream  input  boolean  int  len  off  
[P5_Replace_Variable]^return input.read ( off, b, len ) ;^49^^^^^48^50^return input.read ( b, off, len ) ;^[CLASS] ZipArchiveInputStream  [METHOD] read [RETURN_TYPE] int   byte[] b int off int len [VARIABLES] byte[]  b  ZipInputStream  input  boolean  int  len  off  
[P5_Replace_Variable]^return len.read ( b, off, input ) ;^49^^^^^48^50^return input.read ( b, off, len ) ;^[CLASS] ZipArchiveInputStream  [METHOD] read [RETURN_TYPE] int   byte[] b int off int len [VARIABLES] byte[]  b  ZipInputStream  input  boolean  int  len  off  
[P7_Replace_Invocation]^return input .read (  )  ;^49^^^^^48^50^return input.read ( b, off, len ) ;^[CLASS] ZipArchiveInputStream  [METHOD] read [RETURN_TYPE] int   byte[] b int off int len [VARIABLES] byte[]  b  ZipInputStream  input  boolean  int  len  off  
[P8_Replace_Mix]^return input.read ( b, off, off ) ;^49^^^^^48^50^return input.read ( b, off, len ) ;^[CLASS] ZipArchiveInputStream  [METHOD] read [RETURN_TYPE] int   byte[] b int off int len [VARIABLES] byte[]  b  ZipInputStream  input  boolean  int  len  off  
[P5_Replace_Variable]^return input.read ( b, len, off ) ;^49^^^^^48^50^return input.read ( b, off, len ) ;^[CLASS] ZipArchiveInputStream  [METHOD] read [RETURN_TYPE] int   byte[] b int off int len [VARIABLES] byte[]  b  ZipInputStream  input  boolean  int  len  off  
[P5_Replace_Variable]^return off.read ( b, input, len ) ;^49^^^^^48^50^return input.read ( b, off, len ) ;^[CLASS] ZipArchiveInputStream  [METHOD] read [RETURN_TYPE] int   byte[] b int off int len [VARIABLES] byte[]  b  ZipInputStream  input  boolean  int  len  off  
[P14_Delete_Statement]^^49^^^^^48^50^return input.read ( b, off, len ) ;^[CLASS] ZipArchiveInputStream  [METHOD] read [RETURN_TYPE] int   byte[] b int off int len [VARIABLES] byte[]  b  ZipInputStream  input  boolean  int  len  off  
[P14_Delete_Statement]^^53^^^^^52^54^return input.read (  ) ;^[CLASS] ZipArchiveInputStream  [METHOD] read [RETURN_TYPE] int   [VARIABLES] ZipInputStream  input  boolean  
[P2_Replace_Operator]^if  ( length > ZipArchiveOutputStream.LFH_SIG.length )  {^58^^^^^57^69^if  ( length < ZipArchiveOutputStream.LFH_SIG.length )  {^[CLASS] ZipArchiveInputStream  [METHOD] matches [RETURN_TYPE] boolean   byte[] signature int length [VARIABLES] byte[]  signature  ZipInputStream  input  boolean  int  i  length  
[P5_Replace_Variable]^if  ( i < ZipArchiveOutputStream.LFH_SIG.length )  {^58^^^^^57^69^if  ( length < ZipArchiveOutputStream.LFH_SIG.length )  {^[CLASS] ZipArchiveInputStream  [METHOD] matches [RETURN_TYPE] boolean   byte[] signature int length [VARIABLES] byte[]  signature  ZipInputStream  input  boolean  int  i  length  
[P9_Replace_Statement]^if  ( signature[i] != ZipArchiveOutputStream.LFH_SIG[i] )  {^58^^^^^57^69^if  ( length < ZipArchiveOutputStream.LFH_SIG.length )  {^[CLASS] ZipArchiveInputStream  [METHOD] matches [RETURN_TYPE] boolean   byte[] signature int length [VARIABLES] byte[]  signature  ZipInputStream  input  boolean  int  i  length  
[P15_Unwrap_Block]^return false;^58^59^60^^^57^69^if  ( length < ZipArchiveOutputStream.LFH_SIG.length )  { return false; }^[CLASS] ZipArchiveInputStream  [METHOD] matches [RETURN_TYPE] boolean   byte[] signature int length [VARIABLES] byte[]  signature  ZipInputStream  input  boolean  int  i  length  
[P16_Remove_Block]^^58^59^60^^^57^69^if  ( length < ZipArchiveOutputStream.LFH_SIG.length )  { return false; }^[CLASS] ZipArchiveInputStream  [METHOD] matches [RETURN_TYPE] boolean   byte[] signature int length [VARIABLES] byte[]  signature  ZipInputStream  input  boolean  int  i  length  
[P13_Insert_Block]^if  (  ( signature[i] )  !=  ( ZipArchiveOutputStream.LFH_SIG[i] )  )  {     return false; }^58^^^^^57^69^[Delete]^[CLASS] ZipArchiveInputStream  [METHOD] matches [RETURN_TYPE] boolean   byte[] signature int length [VARIABLES] byte[]  signature  ZipInputStream  input  boolean  int  i  length  
[P3_Replace_Literal]^return true;^59^^^^^57^69^return false;^[CLASS] ZipArchiveInputStream  [METHOD] matches [RETURN_TYPE] boolean   byte[] signature int length [VARIABLES] byte[]  signature  ZipInputStream  input  boolean  int  i  length  
[P2_Replace_Operator]^if  ( signature[i] >= ZipArchiveOutputStream.LFH_SIG[i] )  {^63^^^^^57^69^if  ( signature[i] != ZipArchiveOutputStream.LFH_SIG[i] )  {^[CLASS] ZipArchiveInputStream  [METHOD] matches [RETURN_TYPE] boolean   byte[] signature int length [VARIABLES] byte[]  signature  ZipInputStream  input  boolean  int  i  length  
[P5_Replace_Variable]^if  ( ZipArchiveOutputStream.LFH_SIG[i] != signature[i] )  {^63^^^^^57^69^if  ( signature[i] != ZipArchiveOutputStream.LFH_SIG[i] )  {^[CLASS] ZipArchiveInputStream  [METHOD] matches [RETURN_TYPE] boolean   byte[] signature int length [VARIABLES] byte[]  signature  ZipInputStream  input  boolean  int  i  length  
[P8_Replace_Mix]^if  ( signature[i] = ZipArchiveOutputStream.LFH_SIG[i] )  {^63^^^^^57^69^if  ( signature[i] != ZipArchiveOutputStream.LFH_SIG[i] )  {^[CLASS] ZipArchiveInputStream  [METHOD] matches [RETURN_TYPE] boolean   byte[] signature int length [VARIABLES] byte[]  signature  ZipInputStream  input  boolean  int  i  length  
[P9_Replace_Statement]^if  ( length < ZipArchiveOutputStream.LFH_SIG.length )  {^63^^^^^57^69^if  ( signature[i] != ZipArchiveOutputStream.LFH_SIG[i] )  {^[CLASS] ZipArchiveInputStream  [METHOD] matches [RETURN_TYPE] boolean   byte[] signature int length [VARIABLES] byte[]  signature  ZipInputStream  input  boolean  int  i  length  
[P15_Unwrap_Block]^return false;^63^64^65^^^57^69^if  ( signature[i] != ZipArchiveOutputStream.LFH_SIG[i] )  { return false; }^[CLASS] ZipArchiveInputStream  [METHOD] matches [RETURN_TYPE] boolean   byte[] signature int length [VARIABLES] byte[]  signature  ZipInputStream  input  boolean  int  i  length  
[P16_Remove_Block]^^63^64^65^^^57^69^if  ( signature[i] != ZipArchiveOutputStream.LFH_SIG[i] )  { return false; }^[CLASS] ZipArchiveInputStream  [METHOD] matches [RETURN_TYPE] boolean   byte[] signature int length [VARIABLES] byte[]  signature  ZipInputStream  input  boolean  int  i  length  
[P13_Insert_Block]^if  ( length <  ( length )  )  {     return false; }^63^^^^^57^69^[Delete]^[CLASS] ZipArchiveInputStream  [METHOD] matches [RETURN_TYPE] boolean   byte[] signature int length [VARIABLES] byte[]  signature  ZipInputStream  input  boolean  int  i  length  
[P3_Replace_Literal]^return true;^64^^^^^57^69^return false;^[CLASS] ZipArchiveInputStream  [METHOD] matches [RETURN_TYPE] boolean   byte[] signature int length [VARIABLES] byte[]  signature  ZipInputStream  input  boolean  int  i  length  
[P1_Replace_Type]^for  (  long  i = 0; i < ZipArchiveOutputStream.LFH_SIG.length; i++ )  {^62^^^^^57^69^for  ( int i = 0; i < ZipArchiveOutputStream.LFH_SIG.length; i++ )  {^[CLASS] ZipArchiveInputStream  [METHOD] matches [RETURN_TYPE] boolean   byte[] signature int length [VARIABLES] byte[]  signature  ZipInputStream  input  boolean  int  i  length  
[P2_Replace_Operator]^for  ( int i = 0; i == ZipArchiveOutputStream.LFH_SIG.length; i++ )  {^62^^^^^57^69^for  ( int i = 0; i < ZipArchiveOutputStream.LFH_SIG.length; i++ )  {^[CLASS] ZipArchiveInputStream  [METHOD] matches [RETURN_TYPE] boolean   byte[] signature int length [VARIABLES] byte[]  signature  ZipInputStream  input  boolean  int  i  length  
[P3_Replace_Literal]^for  ( int i = length; i < ZipArchiveOutputStream.LFH_SIG.length; i++ )  {^62^^^^^57^69^for  ( int i = 0; i < ZipArchiveOutputStream.LFH_SIG.length; i++ )  {^[CLASS] ZipArchiveInputStream  [METHOD] matches [RETURN_TYPE] boolean   byte[] signature int length [VARIABLES] byte[]  signature  ZipInputStream  input  boolean  int  i  length  
[P5_Replace_Variable]^for  ( lengthnt i = 0; i < ZipArchiveOutputStream.LFH_SIG.length; i++ )  {^62^^^^^57^69^for  ( int i = 0; i < ZipArchiveOutputStream.LFH_SIG.length; i++ )  {^[CLASS] ZipArchiveInputStream  [METHOD] matches [RETURN_TYPE] boolean   byte[] signature int length [VARIABLES] byte[]  signature  ZipInputStream  input  boolean  int  i  length  
[P5_Replace_Variable]^for  ( ZipArchiveOutputStream.LFH_SIGnt i = 0; i < i.length; i++ )  {^62^^^^^57^69^for  ( int i = 0; i < ZipArchiveOutputStream.LFH_SIG.length; i++ )  {^[CLASS] ZipArchiveInputStream  [METHOD] matches [RETURN_TYPE] boolean   byte[] signature int length [VARIABLES] byte[]  signature  ZipInputStream  input  boolean  int  i  length  
[P2_Replace_Operator]^if  ( signature[i] == ZipArchiveOutputStream.LFH_SIG[i] )  {^63^^^^^57^69^if  ( signature[i] != ZipArchiveOutputStream.LFH_SIG[i] )  {^[CLASS] ZipArchiveInputStream  [METHOD] matches [RETURN_TYPE] boolean   byte[] signature int length [VARIABLES] byte[]  signature  ZipInputStream  input  boolean  int  i  length  
[P8_Replace_Mix]^if  ( signature[i] != null[i] )  {^63^^^^^57^69^if  ( signature[i] != ZipArchiveOutputStream.LFH_SIG[i] )  {^[CLASS] ZipArchiveInputStream  [METHOD] matches [RETURN_TYPE] boolean   byte[] signature int length [VARIABLES] byte[]  signature  ZipInputStream  input  boolean  int  i  length  
[P1_Replace_Type]^for  (  short  i = 0; i < ZipArchiveOutputStream.LFH_SIG.length; i++ )  {^62^^^^^57^69^for  ( int i = 0; i < ZipArchiveOutputStream.LFH_SIG.length; i++ )  {^[CLASS] ZipArchiveInputStream  [METHOD] matches [RETURN_TYPE] boolean   byte[] signature int length [VARIABLES] byte[]  signature  ZipInputStream  input  boolean  int  i  length  
[P3_Replace_Literal]^for  ( int i = 5; i < ZipArchiveOutputStream.LFH_SIG.length; i++ )  {^62^^^^^57^69^for  ( int i = 0; i < ZipArchiveOutputStream.LFH_SIG.length; i++ )  {^[CLASS] ZipArchiveInputStream  [METHOD] matches [RETURN_TYPE] boolean   byte[] signature int length [VARIABLES] byte[]  signature  ZipInputStream  input  boolean  int  i  length  
[P3_Replace_Literal]^return false;^68^^^^^57^69^return true;^[CLASS] ZipArchiveInputStream  [METHOD] matches [RETURN_TYPE] boolean   byte[] signature int length [VARIABLES] byte[]  signature  ZipInputStream  input  boolean  int  i  length  
