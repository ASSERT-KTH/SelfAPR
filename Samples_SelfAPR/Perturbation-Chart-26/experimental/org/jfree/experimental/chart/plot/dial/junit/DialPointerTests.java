[P14_Delete_Statement]^^78^^^^^77^79^super ( name ) ;^[CLASS] DialPointerTests  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] boolean  String  name  
[P3_Replace_Literal]^DialPointer i4 = new DialPointer.Pin ( 4 ) ;^85^^^^^84^94^DialPointer i1 = new DialPointer.Pin ( 1 ) ;^[CLASS] DialPointerTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  
[P4_Replace_Constructor]^DialPointer i1 = DialPointer i1 =  DialPointer.new Pin ( 2 )  ;^85^^^^^84^94^DialPointer i1 = new DialPointer.Pin ( 1 ) ;^[CLASS] DialPointerTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  
[P3_Replace_Literal]^DialPointer i-7 = new DialPointer.Pin ( -7 ) ;^85^^^^^84^94^DialPointer i1 = new DialPointer.Pin ( 1 ) ;^[CLASS] DialPointerTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  
[P11_Insert_Donor_Statement]^DialPointer i2 = new DialPointer.Pin ( 1 ) ;DialPointer i1 = new DialPointer.Pin ( 1 ) ;^85^^^^^84^94^DialPointer i1 = new DialPointer.Pin ( 1 ) ;^[CLASS] DialPointerTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  
[P4_Replace_Constructor]^DialPointer i2 = DialPointer i2 =  DialPointer.new Pin ( 2 )  ;^86^^^^^84^94^DialPointer i2 = new DialPointer.Pin ( 1 ) ;^[CLASS] DialPointerTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  
[P3_Replace_Literal]^DialPointer i2 = new DialPointer.Pin ( 7 ) ;^86^^^^^84^94^DialPointer i2 = new DialPointer.Pin ( 1 ) ;^[CLASS] DialPointerTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  
[P11_Insert_Donor_Statement]^DialPointer i1 = new DialPointer.Pin ( 1 ) ;DialPointer i2 = new DialPointer.Pin ( 1 ) ;^86^^^^^84^94^DialPointer i2 = new DialPointer.Pin ( 1 ) ;^[CLASS] DialPointerTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  
[P5_Replace_Variable]^assertTrue ( i2.equals ( i1 )  ) ;^87^^^^^84^94^assertTrue ( i1.equals ( i2 )  ) ;^[CLASS] DialPointerTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  
[P7_Replace_Invocation]^assertEquals ( i1.equals ( i2 )  ) ;^87^^^^^84^94^assertTrue ( i1.equals ( i2 )  ) ;^[CLASS] DialPointerTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  
[P14_Delete_Statement]^^87^^^^^84^94^assertTrue ( i1.equals ( i2 )  ) ;^[CLASS] DialPointerTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  
[P11_Insert_Donor_Statement]^assertTrue ( i1 != i2 ) ;assertTrue ( i1.equals ( i2 )  ) ;^87^^^^^84^94^assertTrue ( i1.equals ( i2 )  ) ;^[CLASS] DialPointerTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  
[P11_Insert_Donor_Statement]^assertFalse ( i1.equals ( i2 )  ) ;assertTrue ( i1.equals ( i2 )  ) ;^87^^^^^84^94^assertTrue ( i1.equals ( i2 )  ) ;^[CLASS] DialPointerTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertTrue ( i1.equals ( i2 )  ) ;^87^^^^^84^94^assertTrue ( i1.equals ( i2 )  ) ;^[CLASS] DialPointerTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  
[P11_Insert_Donor_Statement]^assertTrue ( i1.getClass (  )  == i2.getClass (  )  ) ;assertTrue ( i1.equals ( i2 )  ) ;^87^^^^^84^94^assertTrue ( i1.equals ( i2 )  ) ;^[CLASS] DialPointerTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  
[P11_Insert_Donor_Statement]^assertEquals ( i1, i2 ) ;assertTrue ( i1.equals ( i2 )  ) ;^87^^^^^84^94^assertTrue ( i1.equals ( i2 )  ) ;^[CLASS] DialPointerTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  
[P7_Replace_Invocation]^assertTrue ( i1 .getClass (  )   ) ;^87^^^^^84^94^assertTrue ( i1.equals ( i2 )  ) ;^[CLASS] DialPointerTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  
[P3_Replace_Literal]^i1 = new DialPointer.Pin ( 9 ) ;^90^^^^^84^94^i1 = new DialPointer.Pin ( 2 ) ;^[CLASS] DialPointerTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  
[P4_Replace_Constructor]^i1 = i1 =  DialPointer.new Pin ( 1 )  ;^90^^^^^84^94^i1 = new DialPointer.Pin ( 2 ) ;^[CLASS] DialPointerTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  
[P8_Replace_Mix]^i1 = new DialPointer.Pin ( 2 >>> 0 ) ;^90^^^^^84^94^i1 = new DialPointer.Pin ( 2 ) ;^[CLASS] DialPointerTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  
[P11_Insert_Donor_Statement]^i2 = new DialPointer.Pin ( 2 ) ;i1 = new DialPointer.Pin ( 2 ) ;^90^^^^^84^94^i1 = new DialPointer.Pin ( 2 ) ;^[CLASS] DialPointerTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  
[P11_Insert_Donor_Statement]^i2 =  ( DialPointer )  in.readObject (  ) ;i1 = new DialPointer.Pin ( 2 ) ;^90^^^^^84^94^i1 = new DialPointer.Pin ( 2 ) ;^[CLASS] DialPointerTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  
[P11_Insert_Donor_Statement]^i2 =  ( DialPointer )  i1.clone (  ) ;i1 = new DialPointer.Pin ( 2 ) ;^90^^^^^84^94^i1 = new DialPointer.Pin ( 2 ) ;^[CLASS] DialPointerTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  
[P5_Replace_Variable]^assertFalse ( i2.equals ( i1 )  ) ;^91^^^^^84^94^assertFalse ( i1.equals ( i2 )  ) ;^[CLASS] DialPointerTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  
[P7_Replace_Invocation]^assertEquals ( i1.equals ( i2 )  ) ;^91^^^^^84^94^assertFalse ( i1.equals ( i2 )  ) ;^[CLASS] DialPointerTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  
[P14_Delete_Statement]^^91^^^^^84^94^assertFalse ( i1.equals ( i2 )  ) ;^[CLASS] DialPointerTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  
[P11_Insert_Donor_Statement]^assertTrue ( i1 != i2 ) ;assertFalse ( i1.equals ( i2 )  ) ;^91^^^^^84^94^assertFalse ( i1.equals ( i2 )  ) ;^[CLASS] DialPointerTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  
[P11_Insert_Donor_Statement]^assertTrue ( i1.equals ( i2 )  ) ;assertFalse ( i1.equals ( i2 )  ) ;^91^^^^^84^94^assertFalse ( i1.equals ( i2 )  ) ;^[CLASS] DialPointerTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertFalse ( i1.equals ( i2 )  ) ;^91^^^^^84^94^assertFalse ( i1.equals ( i2 )  ) ;^[CLASS] DialPointerTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  
[P11_Insert_Donor_Statement]^assertEquals ( i1, i2 ) ;assertFalse ( i1.equals ( i2 )  ) ;^91^^^^^84^94^assertFalse ( i1.equals ( i2 )  ) ;^[CLASS] DialPointerTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  
[P7_Replace_Invocation]^assertFalse ( i1 .getClass (  )   ) ;^91^^^^^84^94^assertFalse ( i1.equals ( i2 )  ) ;^[CLASS] DialPointerTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  
[P3_Replace_Literal]^i9 = new DialPointer.Pin ( 9 ) ;^92^^^^^84^94^i2 = new DialPointer.Pin ( 2 ) ;^[CLASS] DialPointerTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  
[P4_Replace_Constructor]^i2 = i2 =  DialPointer.new Pin ( 1 )  ;^92^^^^^84^94^i2 = new DialPointer.Pin ( 2 ) ;^[CLASS] DialPointerTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  
[P8_Replace_Mix]^i2L = new DialPointer.Pin ( 2L ) ;^92^^^^^84^94^i2 = new DialPointer.Pin ( 2 ) ;^[CLASS] DialPointerTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  
[P11_Insert_Donor_Statement]^i1 = new DialPointer.Pin ( 2 ) ;i2 = new DialPointer.Pin ( 2 ) ;^92^^^^^84^94^i2 = new DialPointer.Pin ( 2 ) ;^[CLASS] DialPointerTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  
[P11_Insert_Donor_Statement]^i2 =  ( DialPointer )  in.readObject (  ) ;i2 = new DialPointer.Pin ( 2 ) ;^92^^^^^84^94^i2 = new DialPointer.Pin ( 2 ) ;^[CLASS] DialPointerTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  
[P11_Insert_Donor_Statement]^i2 =  ( DialPointer )  i1.clone (  ) ;i2 = new DialPointer.Pin ( 2 ) ;^92^^^^^84^94^i2 = new DialPointer.Pin ( 2 ) ;^[CLASS] DialPointerTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  
[P3_Replace_Literal]^i0 = new DialPointer.Pin ( 0 ) ;^92^^^^^84^94^i2 = new DialPointer.Pin ( 2 ) ;^[CLASS] DialPointerTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  
[P5_Replace_Variable]^assertTrue ( i2.equals ( i1 )  ) ;^93^^^^^84^94^assertTrue ( i1.equals ( i2 )  ) ;^[CLASS] DialPointerTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  
[P7_Replace_Invocation]^assertEquals ( i1.equals ( i2 )  ) ;^93^^^^^84^94^assertTrue ( i1.equals ( i2 )  ) ;^[CLASS] DialPointerTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  
[P8_Replace_Mix]^assertTrue ( i1 .getClass (  )   ) ;^93^^^^^84^94^assertTrue ( i1.equals ( i2 )  ) ;^[CLASS] DialPointerTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  
[P14_Delete_Statement]^^93^^^^^84^94^assertTrue ( i1.equals ( i2 )  ) ;^[CLASS] DialPointerTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  
[P11_Insert_Donor_Statement]^assertTrue ( i1 != i2 ) ;assertTrue ( i1.equals ( i2 )  ) ;^93^^^^^84^94^assertTrue ( i1.equals ( i2 )  ) ;^[CLASS] DialPointerTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  
[P11_Insert_Donor_Statement]^assertFalse ( i1.equals ( i2 )  ) ;assertTrue ( i1.equals ( i2 )  ) ;^93^^^^^84^94^assertTrue ( i1.equals ( i2 )  ) ;^[CLASS] DialPointerTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertTrue ( i1.equals ( i2 )  ) ;^93^^^^^84^94^assertTrue ( i1.equals ( i2 )  ) ;^[CLASS] DialPointerTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  
[P11_Insert_Donor_Statement]^assertTrue ( i1.getClass (  )  == i2.getClass (  )  ) ;assertTrue ( i1.equals ( i2 )  ) ;^93^^^^^84^94^assertTrue ( i1.equals ( i2 )  ) ;^[CLASS] DialPointerTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  
[P11_Insert_Donor_Statement]^assertEquals ( i1, i2 ) ;assertTrue ( i1.equals ( i2 )  ) ;^93^^^^^84^94^assertTrue ( i1.equals ( i2 )  ) ;^[CLASS] DialPointerTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  
[P3_Replace_Literal]^DialPointer i-6 = new DialPointer.Pin ( -6 ) ;^100^^^^^99^106^DialPointer i1 = new DialPointer.Pin ( 1 ) ;^[CLASS] DialPointerTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  int  h1  h2  
[P4_Replace_Constructor]^DialPointer i1 = DialPointer i1 =  DialPointer.new Pin ( 2 )  ;^100^^^^^99^106^DialPointer i1 = new DialPointer.Pin ( 1 ) ;^[CLASS] DialPointerTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  int  h1  h2  
[P3_Replace_Literal]^DialPointer i-5 = new DialPointer.Pin ( -5 ) ;^100^^^^^99^106^DialPointer i1 = new DialPointer.Pin ( 1 ) ;^[CLASS] DialPointerTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  int  h1  h2  
[P11_Insert_Donor_Statement]^DialPointer i2 = new DialPointer.Pin ( 1 ) ;DialPointer i1 = new DialPointer.Pin ( 1 ) ;^100^^^^^99^106^DialPointer i1 = new DialPointer.Pin ( 1 ) ;^[CLASS] DialPointerTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  int  h1  h2  
[P3_Replace_Literal]^DialPointer i2 = new DialPointer.Pin ( h1 ) ;^101^^^^^99^106^DialPointer i2 = new DialPointer.Pin ( 1 ) ;^[CLASS] DialPointerTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  int  h1  h2  
[P4_Replace_Constructor]^DialPointer i2 = DialPointer i2 =  DialPointer.new Pin ( 2 )  ;^101^^^^^99^106^DialPointer i2 = new DialPointer.Pin ( 1 ) ;^[CLASS] DialPointerTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  int  h1  h2  
[P3_Replace_Literal]^DialPointer i2 = new DialPointer.Pin ( 0 ) ;^101^^^^^99^106^DialPointer i2 = new DialPointer.Pin ( 1 ) ;^[CLASS] DialPointerTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  int  h1  h2  
[P11_Insert_Donor_Statement]^DialPointer i1 = new DialPointer.Pin ( 1 ) ;DialPointer i2 = new DialPointer.Pin ( 1 ) ;^101^^^^^99^106^DialPointer i2 = new DialPointer.Pin ( 1 ) ;^[CLASS] DialPointerTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  int  h1  h2  
[P5_Replace_Variable]^assertTrue ( i2.equals ( i1 )  ) ;^102^^^^^99^106^assertTrue ( i1.equals ( i2 )  ) ;^[CLASS] DialPointerTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  int  h1  h2  
[P7_Replace_Invocation]^assertEquals ( i1.equals ( i2 )  ) ;^102^^^^^99^106^assertTrue ( i1.equals ( i2 )  ) ;^[CLASS] DialPointerTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  int  h1  h2  
[P14_Delete_Statement]^^102^103^^^^99^106^assertTrue ( i1.equals ( i2 )  ) ; int h1 = i1.hashCode (  ) ;^[CLASS] DialPointerTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  int  h1  h2  
[P11_Insert_Donor_Statement]^assertTrue ( i1 != i2 ) ;assertTrue ( i1.equals ( i2 )  ) ;^102^^^^^99^106^assertTrue ( i1.equals ( i2 )  ) ;^[CLASS] DialPointerTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  int  h1  h2  
[P11_Insert_Donor_Statement]^assertFalse ( i1.equals ( i2 )  ) ;assertTrue ( i1.equals ( i2 )  ) ;^102^^^^^99^106^assertTrue ( i1.equals ( i2 )  ) ;^[CLASS] DialPointerTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  int  h1  h2  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertTrue ( i1.equals ( i2 )  ) ;^102^^^^^99^106^assertTrue ( i1.equals ( i2 )  ) ;^[CLASS] DialPointerTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  int  h1  h2  
[P11_Insert_Donor_Statement]^assertTrue ( i1.getClass (  )  == i2.getClass (  )  ) ;assertTrue ( i1.equals ( i2 )  ) ;^102^^^^^99^106^assertTrue ( i1.equals ( i2 )  ) ;^[CLASS] DialPointerTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  int  h1  h2  
[P11_Insert_Donor_Statement]^assertEquals ( i1, i2 ) ;assertTrue ( i1.equals ( i2 )  ) ;^102^^^^^99^106^assertTrue ( i1.equals ( i2 )  ) ;^[CLASS] DialPointerTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  int  h1  h2  
[P1_Replace_Type]^short  h1 = i1.hashCode (  ) ;^103^^^^^99^106^int h1 = i1.hashCode (  ) ;^[CLASS] DialPointerTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  int  h1  h2  
[P5_Replace_Variable]^int h1 = i2.hashCode (  ) ;^103^^^^^99^106^int h1 = i1.hashCode (  ) ;^[CLASS] DialPointerTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  int  h1  h2  
[P7_Replace_Invocation]^int h1 = i1.equals (  ) ;^103^^^^^99^106^int h1 = i1.hashCode (  ) ;^[CLASS] DialPointerTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  int  h1  h2  
[P7_Replace_Invocation]^int h1 = i1 .clone (  )  ;^103^^^^^99^106^int h1 = i1.hashCode (  ) ;^[CLASS] DialPointerTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  int  h1  h2  
[P11_Insert_Donor_Statement]^int h2 = i2.hashCode (  ) ;int h1 = i1.hashCode (  ) ;^103^^^^^99^106^int h1 = i1.hashCode (  ) ;^[CLASS] DialPointerTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  int  h1  h2  
[P14_Delete_Statement]^^103^104^^^^99^106^int h1 = i1.hashCode (  ) ; int h2 = i2.hashCode (  ) ;^[CLASS] DialPointerTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  int  h1  h2  
[P1_Replace_Type]^short  h2 = i2.hashCode (  ) ;^104^^^^^99^106^int h2 = i2.hashCode (  ) ;^[CLASS] DialPointerTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  int  h1  h2  
[P5_Replace_Variable]^int h2 = i1.hashCode (  ) ;^104^^^^^99^106^int h2 = i2.hashCode (  ) ;^[CLASS] DialPointerTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  int  h1  h2  
[P7_Replace_Invocation]^int h2 = i2.equals (  ) ;^104^^^^^99^106^int h2 = i2.hashCode (  ) ;^[CLASS] DialPointerTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  int  h1  h2  
[P11_Insert_Donor_Statement]^int h1 = i1.hashCode (  ) ;int h2 = i2.hashCode (  ) ;^104^^^^^99^106^int h2 = i2.hashCode (  ) ;^[CLASS] DialPointerTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  int  h1  h2  
[P14_Delete_Statement]^^104^^^^^99^106^int h2 = i2.hashCode (  ) ;^[CLASS] DialPointerTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  int  h1  h2  
[P5_Replace_Variable]^assertEquals (  h2 ) ;^105^^^^^99^106^assertEquals ( h1, h2 ) ;^[CLASS] DialPointerTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  int  h1  h2  
[P5_Replace_Variable]^assertEquals ( h1 ) ;^105^^^^^99^106^assertEquals ( h1, h2 ) ;^[CLASS] DialPointerTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  int  h1  h2  
[P5_Replace_Variable]^assertEquals ( h2, h1 ) ;^105^^^^^99^106^assertEquals ( h1, h2 ) ;^[CLASS] DialPointerTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  int  h1  h2  
[P14_Delete_Statement]^^105^^^^^99^106^assertEquals ( h1, h2 ) ;^[CLASS] DialPointerTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  int  h1  h2  
[P11_Insert_Donor_Statement]^assertTrue ( i1 != i2 ) ;assertEquals ( h1, h2 ) ;^105^^^^^99^106^assertEquals ( h1, h2 ) ;^[CLASS] DialPointerTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  int  h1  h2  
[P11_Insert_Donor_Statement]^assertTrue ( i1.equals ( i2 )  ) ;assertEquals ( h1, h2 ) ;^105^^^^^99^106^assertEquals ( h1, h2 ) ;^[CLASS] DialPointerTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  int  h1  h2  
[P11_Insert_Donor_Statement]^assertFalse ( i1.equals ( i2 )  ) ;assertEquals ( h1, h2 ) ;^105^^^^^99^106^assertEquals ( h1, h2 ) ;^[CLASS] DialPointerTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  int  h1  h2  
[P11_Insert_Donor_Statement]^assertEquals ( i1, i2 ) ;assertEquals ( h1, h2 ) ;^105^^^^^99^106^assertEquals ( h1, h2 ) ;^[CLASS] DialPointerTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  int  h1  h2  
[P3_Replace_Literal]^DialPointer i-3 = new DialPointer.Pin ( -3 ) ;^112^^^^^111^125^DialPointer i1 = new DialPointer.Pin ( 1 ) ;^[CLASS] DialPointerTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  CloneNotSupportedException  e  
[P4_Replace_Constructor]^DialPointer i1 = DialPointer i1 =  DialPointer.new Pin ( 2 )  ;^112^^^^^111^125^DialPointer i1 = new DialPointer.Pin ( 1 ) ;^[CLASS] DialPointerTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  CloneNotSupportedException  e  
[P3_Replace_Literal]^DialPointer i2 = new DialPointer.Pin ( 2 ) ;^112^^^^^111^125^DialPointer i1 = new DialPointer.Pin ( 1 ) ;^[CLASS] DialPointerTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^DialPointer i2 = new DialPointer.Pin ( 1 ) ;DialPointer i1 = new DialPointer.Pin ( 1 ) ;^112^^^^^111^125^DialPointer i1 = new DialPointer.Pin ( 1 ) ;^[CLASS] DialPointerTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  CloneNotSupportedException  e  
[P5_Replace_Variable]^i2 =  ( DialPointer )  i2.clone (  ) ;^115^^^^^111^125^i2 =  ( DialPointer )  i1.clone (  ) ;^[CLASS] DialPointerTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  CloneNotSupportedException  e  
[P7_Replace_Invocation]^i2 =  ( DialPointer )  i1.equals (  ) ;^115^^^^^111^125^i2 =  ( DialPointer )  i1.clone (  ) ;^[CLASS] DialPointerTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  CloneNotSupportedException  e  
[P7_Replace_Invocation]^i2 =  ( DialPointer )  i1 .hashCode (  )  ;^115^^^^^111^125^i2 =  ( DialPointer )  i1.clone (  ) ;^[CLASS] DialPointerTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  CloneNotSupportedException  e  
[P8_Replace_Mix]^i2 =   ( DialPointer )  null.clone (  ) ;^115^^^^^111^125^i2 =  ( DialPointer )  i1.clone (  ) ;^[CLASS] DialPointerTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^i1 = new DialPointer.Pin ( 2 ) ;i2 =  ( DialPointer )  i1.clone (  ) ;^115^^^^^111^125^i2 =  ( DialPointer )  i1.clone (  ) ;^[CLASS] DialPointerTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^i2 = new DialPointer.Pin ( 2 ) ;i2 =  ( DialPointer )  i1.clone (  ) ;^115^^^^^111^125^i2 =  ( DialPointer )  i1.clone (  ) ;^[CLASS] DialPointerTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^i2 =  ( DialPointer )  in.readObject (  ) ;i2 =  ( DialPointer )  i1.clone (  ) ;^115^^^^^111^125^i2 =  ( DialPointer )  i1.clone (  ) ;^[CLASS] DialPointerTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  CloneNotSupportedException  e  
[P14_Delete_Statement]^^115^^^^^111^125^i2 =  ( DialPointer )  i1.clone (  ) ;^[CLASS] DialPointerTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  CloneNotSupportedException  e  
[P14_Delete_Statement]^^118^^^^^111^125^e.printStackTrace (  ) ;^[CLASS] DialPointerTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  CloneNotSupportedException  e  
[P2_Replace_Operator]^assertTrue ( i1 == i2 ) ;^120^^^^^111^125^assertTrue ( i1 != i2 ) ;^[CLASS] DialPointerTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  CloneNotSupportedException  e  
[P5_Replace_Variable]^assertTrue ( i2 != i1 ) ;^120^^^^^111^125^assertTrue ( i1 != i2 ) ;^[CLASS] DialPointerTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  CloneNotSupportedException  e  
[P7_Replace_Invocation]^assertEquals ( i1 != i2 ) ;^120^^^^^111^125^assertTrue ( i1 != i2 ) ;^[CLASS] DialPointerTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  CloneNotSupportedException  e  
[P14_Delete_Statement]^^120^121^^^^111^125^assertTrue ( i1 != i2 ) ; assertTrue ( i1.getClass (  )  == i2.getClass (  )  ) ;^[CLASS] DialPointerTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertTrue ( i1.equals ( i2 )  ) ;assertTrue ( i1 != i2 ) ;^120^^^^^111^125^assertTrue ( i1 != i2 ) ;^[CLASS] DialPointerTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertFalse ( i1.equals ( i2 )  ) ;assertTrue ( i1 != i2 ) ;^120^^^^^111^125^assertTrue ( i1 != i2 ) ;^[CLASS] DialPointerTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertTrue ( i1 != i2 ) ;^120^^^^^111^125^assertTrue ( i1 != i2 ) ;^[CLASS] DialPointerTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertEquals ( i1, i2 ) ;assertTrue ( i1 != i2 ) ;^120^^^^^111^125^assertTrue ( i1 != i2 ) ;^[CLASS] DialPointerTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  CloneNotSupportedException  e  
[P2_Replace_Operator]^assertTrue ( i1.getClass (  )  >= i2.getClass (  )  ) ;^121^^^^^111^125^assertTrue ( i1.getClass (  )  == i2.getClass (  )  ) ;^[CLASS] DialPointerTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  CloneNotSupportedException  e  
[P5_Replace_Variable]^assertTrue ( i2.getClass (  )  == i1.getClass (  )  ) ;^121^^^^^111^125^assertTrue ( i1.getClass (  )  == i2.getClass (  )  ) ;^[CLASS] DialPointerTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  CloneNotSupportedException  e  
[P7_Replace_Invocation]^assertEquals ( i1.getClass (  )  == i2.getClass (  )  ) ;^121^^^^^111^125^assertTrue ( i1.getClass (  )  == i2.getClass (  )  ) ;^[CLASS] DialPointerTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  CloneNotSupportedException  e  
[P7_Replace_Invocation]^assertTrue ( i1.equals (  )  == i2.getClass (  )  ) ;^121^^^^^111^125^assertTrue ( i1.getClass (  )  == i2.getClass (  )  ) ;^[CLASS] DialPointerTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  CloneNotSupportedException  e  
[P7_Replace_Invocation]^assertTrue ( i1 .equals ( i2 )   == i2^121^^^^^111^125^assertTrue ( i1.getClass (  )  == i2.getClass (  )  ) ;^[CLASS] DialPointerTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  CloneNotSupportedException  e  
[P14_Delete_Statement]^^121^122^^^^111^125^assertTrue ( i1.getClass (  )  == i2.getClass (  )  ) ; assertTrue ( i1.equals ( i2 )  ) ;^[CLASS] DialPointerTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertTrue ( i1.equals ( i2 )  ) ;assertTrue ( i1.getClass (  )  == i2.getClass (  )  ) ;^121^^^^^111^125^assertTrue ( i1.getClass (  )  == i2.getClass (  )  ) ;^[CLASS] DialPointerTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  CloneNotSupportedException  e  
[P5_Replace_Variable]^assertTrue ( i2.getClass (  )  == i2.getClass (  )  ) ;^121^^^^^111^125^assertTrue ( i1.getClass (  )  == i2.getClass (  )  ) ;^[CLASS] DialPointerTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  CloneNotSupportedException  e  
[P8_Replace_Mix]^assertTrue ( i2.equals (  )  == i2.getClass (  )  ) ;^121^^^^^111^125^assertTrue ( i1.getClass (  )  == i2.getClass (  )  ) ;^[CLASS] DialPointerTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  CloneNotSupportedException  e  
[P14_Delete_Statement]^^121^^^^^111^125^assertTrue ( i1.getClass (  )  == i2.getClass (  )  ) ;^[CLASS] DialPointerTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  CloneNotSupportedException  e  
[P5_Replace_Variable]^assertTrue ( i1.getClass (  )  == i1.getClass (  )  ) ;^121^^^^^111^125^assertTrue ( i1.getClass (  )  == i2.getClass (  )  ) ;^[CLASS] DialPointerTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  CloneNotSupportedException  e  
[P5_Replace_Variable]^assertTrue ( i2.equals ( i1 )  ) ;^122^^^^^111^125^assertTrue ( i1.equals ( i2 )  ) ;^[CLASS] DialPointerTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  CloneNotSupportedException  e  
[P7_Replace_Invocation]^assertEquals ( i1.equals ( i2 )  ) ;^122^^^^^111^125^assertTrue ( i1.equals ( i2 )  ) ;^[CLASS] DialPointerTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  CloneNotSupportedException  e  
[P7_Replace_Invocation]^assertTrue ( i1 .getClass (  )   ) ;^122^^^^^111^125^assertTrue ( i1.equals ( i2 )  ) ;^[CLASS] DialPointerTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  CloneNotSupportedException  e  
[P14_Delete_Statement]^^122^^^^^111^125^assertTrue ( i1.equals ( i2 )  ) ;^[CLASS] DialPointerTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertTrue ( i1 != i2 ) ;assertTrue ( i1.equals ( i2 )  ) ;^122^^^^^111^125^assertTrue ( i1.equals ( i2 )  ) ;^[CLASS] DialPointerTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertFalse ( i1.equals ( i2 )  ) ;assertTrue ( i1.equals ( i2 )  ) ;^122^^^^^111^125^assertTrue ( i1.equals ( i2 )  ) ;^[CLASS] DialPointerTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertTrue ( i1.equals ( i2 )  ) ;^122^^^^^111^125^assertTrue ( i1.equals ( i2 )  ) ;^[CLASS] DialPointerTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertTrue ( i1.getClass (  )  == i2.getClass (  )  ) ;assertTrue ( i1.equals ( i2 )  ) ;^122^^^^^111^125^assertTrue ( i1.equals ( i2 )  ) ;^[CLASS] DialPointerTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertEquals ( i1, i2 ) ;assertTrue ( i1.equals ( i2 )  ) ;^122^^^^^111^125^assertTrue ( i1.equals ( i2 )  ) ;^[CLASS] DialPointerTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPointer  i1  i2  CloneNotSupportedException  e  
[P3_Replace_Literal]^DialPointer i2 = new DialPointer.Pin ( 2 ) ;^133^^^^^131^153^DialPointer i1 = new DialPointer.Pin ( 1 ) ;^[CLASS] DialPointerTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  DialPointer  i1  i2  Exception  e  
[P4_Replace_Constructor]^DialPointer i1 = DialPointer i1 =  DialPointer.new Pin ( 2 )  ;^133^^^^^131^153^DialPointer i1 = new DialPointer.Pin ( 1 ) ;^[CLASS] DialPointerTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  DialPointer  i1  i2  Exception  e  
[P3_Replace_Literal]^DialPointer inull = new DialPointer.Pin ( null ) ;^133^^^^^131^153^DialPointer i1 = new DialPointer.Pin ( 1 ) ;^[CLASS] DialPointerTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  DialPointer  i1  i2  Exception  e  
[P11_Insert_Donor_Statement]^DialPointer i2 = new DialPointer.Pin ( 1 ) ;DialPointer i1 = new DialPointer.Pin ( 1 ) ;^133^^^^^131^153^DialPointer i1 = new DialPointer.Pin ( 1 ) ;^[CLASS] DialPointerTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  DialPointer  i1  i2  Exception  e  
[P8_Replace_Mix]^i2 =   ( DialPonullter )  null.readObject (  ) ;^144^^^^^131^153^i2 =  ( DialPointer )  in.readObject (  ) ;^[CLASS] DialPointerTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  DialPointer  i1  i2  Exception  e  
[P11_Insert_Donor_Statement]^i1 = new DialPointer.Pin ( 2 ) ;i2 =  ( DialPointer )  in.readObject (  ) ;^144^^^^^131^153^i2 =  ( DialPointer )  in.readObject (  ) ;^[CLASS] DialPointerTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  DialPointer  i1  i2  Exception  e  
[P11_Insert_Donor_Statement]^i2 = new DialPointer.Pin ( 2 ) ;i2 =  ( DialPointer )  in.readObject (  ) ;^144^^^^^131^153^i2 =  ( DialPointer )  in.readObject (  ) ;^[CLASS] DialPointerTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  DialPointer  i1  i2  Exception  e  
[P11_Insert_Donor_Statement]^i2 =  ( DialPointer )  i1.clone (  ) ;i2 =  ( DialPointer )  in.readObject (  ) ;^144^^^^^131^153^i2 =  ( DialPointer )  in.readObject (  ) ;^[CLASS] DialPointerTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  DialPointer  i1  i2  Exception  e  
[P7_Replace_Invocation]^ObjectInput in = new ObjectInputStream ( new ByteArrayInputStream ( buffer .ByteArrayOutputStream (  )   )  ) ;^142^143^^^^131^153^ObjectInput in = new ObjectInputStream ( new ByteArrayInputStream ( buffer.toByteArray (  )  )  ) ;^[CLASS] DialPointerTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  DialPointer  i1  i2  Exception  e  
[P5_Replace_Variable]^out.writeObject ( i2 ) ;^139^^^^^131^153^out.writeObject ( i1 ) ;^[CLASS] DialPointerTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  DialPointer  i1  i2  Exception  e  
[P7_Replace_Invocation]^out .close (  )  ;^139^^^^^131^153^out.writeObject ( i1 ) ;^[CLASS] DialPointerTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  DialPointer  i1  i2  Exception  e  
[P14_Delete_Statement]^^139^^^^^131^153^out.writeObject ( i1 ) ;^[CLASS] DialPointerTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  DialPointer  i1  i2  Exception  e  
[P11_Insert_Donor_Statement]^out.close (  ) ;out.writeObject ( i1 ) ;^139^^^^^131^153^out.writeObject ( i1 ) ;^[CLASS] DialPointerTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  DialPointer  i1  i2  Exception  e  
[P7_Replace_Invocation]^out.writeObject (  ) ;^140^^^^^131^153^out.close (  ) ;^[CLASS] DialPointerTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  DialPointer  i1  i2  Exception  e  
[P14_Delete_Statement]^^140^^^^^131^153^out.close (  ) ;^[CLASS] DialPointerTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  DialPointer  i1  i2  Exception  e  
[P11_Insert_Donor_Statement]^in.close (  ) ;out.close (  ) ;^140^^^^^131^153^out.close (  ) ;^[CLASS] DialPointerTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  DialPointer  i1  i2  Exception  e  
[P11_Insert_Donor_Statement]^out.writeObject ( i1 ) ;out.close (  ) ;^140^^^^^131^153^out.close (  ) ;^[CLASS] DialPointerTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  DialPointer  i1  i2  Exception  e  
[P7_Replace_Invocation]^new ByteArrayInputStream ( buffer .ByteArrayOutputStream (  )   )  ) ;^143^^^^^131^153^new ByteArrayInputStream ( buffer.toByteArray (  )  )  ) ;^[CLASS] DialPointerTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  DialPointer  i1  i2  Exception  e  
[P14_Delete_Statement]^^143^144^^^^131^153^new ByteArrayInputStream ( buffer.toByteArray (  )  )  ) ; i2 =  ( DialPointer )  in.readObject (  ) ;^[CLASS] DialPointerTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  DialPointer  i1  i2  Exception  e  
[P8_Replace_Mix]^i2 =  ( DialPointer )  in .close (  )  ;^144^^^^^131^153^i2 =  ( DialPointer )  in.readObject (  ) ;^[CLASS] DialPointerTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  DialPointer  i1  i2  Exception  e  
[P14_Delete_Statement]^^144^^^^^131^153^i2 =  ( DialPointer )  in.readObject (  ) ;^[CLASS] DialPointerTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  DialPointer  i1  i2  Exception  e  
[P14_Delete_Statement]^^145^^^^^131^153^in.close (  ) ;^[CLASS] DialPointerTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  DialPointer  i1  i2  Exception  e  
[P11_Insert_Donor_Statement]^out.close (  ) ;in.close (  ) ;^145^^^^^131^153^in.close (  ) ;^[CLASS] DialPointerTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  DialPointer  i1  i2  Exception  e  
[P14_Delete_Statement]^^148^^^^^131^153^e.printStackTrace (  ) ;^[CLASS] DialPointerTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  DialPointer  i1  i2  Exception  e  
[P5_Replace_Variable]^assertEquals (  i2 ) ;^150^^^^^131^153^assertEquals ( i1, i2 ) ;^[CLASS] DialPointerTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  DialPointer  i1  i2  Exception  e  
[P5_Replace_Variable]^assertEquals ( i1 ) ;^150^^^^^131^153^assertEquals ( i1, i2 ) ;^[CLASS] DialPointerTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  DialPointer  i1  i2  Exception  e  
[P5_Replace_Variable]^assertEquals ( i2, i1 ) ;^150^^^^^131^153^assertEquals ( i1, i2 ) ;^[CLASS] DialPointerTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  DialPointer  i1  i2  Exception  e  
[P14_Delete_Statement]^^150^^^^^131^153^assertEquals ( i1, i2 ) ;^[CLASS] DialPointerTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  DialPointer  i1  i2  Exception  e  
[P11_Insert_Donor_Statement]^assertTrue ( i1 != i2 ) ;assertEquals ( i1, i2 ) ;^150^^^^^131^153^assertEquals ( i1, i2 ) ;^[CLASS] DialPointerTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  DialPointer  i1  i2  Exception  e  
[P11_Insert_Donor_Statement]^assertTrue ( i1.equals ( i2 )  ) ;assertEquals ( i1, i2 ) ;^150^^^^^131^153^assertEquals ( i1, i2 ) ;^[CLASS] DialPointerTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  DialPointer  i1  i2  Exception  e  
[P11_Insert_Donor_Statement]^assertFalse ( i1.equals ( i2 )  ) ;assertEquals ( i1, i2 ) ;^150^^^^^131^153^assertEquals ( i1, i2 ) ;^[CLASS] DialPointerTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  DialPointer  i1  i2  Exception  e  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertEquals ( i1, i2 ) ;^150^^^^^131^153^assertEquals ( i1, i2 ) ;^[CLASS] DialPointerTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  DialPointer  i1  i2  Exception  e  
