[P14_Delete_Statement]^^81^^^^^80^82^super ( name ) ;^[CLASS] DialCapTests  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] boolean  String  name  
[P5_Replace_Variable]^return new TestSuite ( DialCapTests.null ) ;^72^^^^^71^73^return new TestSuite ( DialCapTests.class ) ;^[CLASS] DialCapTests  [METHOD] suite [RETURN_TYPE] Test   [VARIABLES] boolean  
[P11_Insert_Donor_Statement]^DialCap c2 = new DialCap (  ) ;DialCap c1 = new DialCap (  ) ;^88^^^^^73^103^DialCap c1 = new DialCap (  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^DialCap c2 = null;DialCap c2 = new DialCap (  ) ;^89^^^^^74^104^DialCap c2 = new DialCap (  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^DialCap c1 = new DialCap (  ) ;DialCap c2 = new DialCap (  ) ;^89^^^^^74^104^DialCap c2 = new DialCap (  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P5_Replace_Variable]^assertTrue ( c2.equals ( c1 )  ) ;^90^^^^^75^105^assertTrue ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P7_Replace_Invocation]^assertEquals ( c1.equals ( c2 )  ) ;^90^^^^^75^105^assertTrue ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P7_Replace_Invocation]^assertTrue ( c1 .getClass (  )   ) ;^90^^^^^75^105^assertTrue ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P14_Delete_Statement]^^90^^^^^75^105^assertTrue ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^assertFalse ( c1.equals ( c2 )  ) ;assertTrue ( c1.equals ( c2 )  ) ;^90^^^^^75^105^assertTrue ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^assertTrue ( c1 != c2 ) ;assertTrue ( c1.equals ( c2 )  ) ;^90^^^^^75^105^assertTrue ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^assertTrue ( c1.getClass (  )  == c2.getClass (  )  ) ;assertTrue ( c1.equals ( c2 )  ) ;^90^^^^^75^105^assertTrue ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^assertEquals ( c1, c2 ) ;assertTrue ( c1.equals ( c2 )  ) ;^90^^^^^75^105^assertTrue ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertTrue ( c1.equals ( c2 )  ) ;^90^^^^^75^105^assertTrue ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P3_Replace_Literal]^c1.setRadius ( 0.25 ) ;^93^^^^^78^108^c1.setRadius ( 0.5 ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P7_Replace_Invocation]^c1 .equals ( c1 )  ;^93^^^^^78^108^c1.setRadius ( 0.5 ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P8_Replace_Mix]^c1 .equals ( c2 )  ;^93^^^^^78^108^c1.setRadius ( 0.5 ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P14_Delete_Statement]^^93^^^^^78^108^c1.setRadius ( 0.5 ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^c2.setRadius ( 0.5 ) ;c1.setRadius ( 0.5 ) ;^93^^^^^78^108^c1.setRadius ( 0.5 ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P5_Replace_Variable]^assertFalse ( c2.equals ( c1 )  ) ;^94^^^^^79^109^assertFalse ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P7_Replace_Invocation]^assertEquals ( c1.equals ( c2 )  ) ;^94^^^^^79^109^assertFalse ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P7_Replace_Invocation]^assertFalse ( c1 .getClass (  )   ) ;^94^^^^^79^109^assertFalse ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P14_Delete_Statement]^^94^95^^^^79^109^assertFalse ( c1.equals ( c2 )  ) ; c2.setRadius ( 0.5 ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^assertTrue ( c1 != c2 ) ;assertFalse ( c1.equals ( c2 )  ) ;^94^^^^^79^109^assertFalse ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^assertTrue ( c1.equals ( c2 )  ) ;assertFalse ( c1.equals ( c2 )  ) ;^94^^^^^79^109^assertFalse ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^assertEquals ( c1, c2 ) ;assertFalse ( c1.equals ( c2 )  ) ;^94^^^^^79^109^assertFalse ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertFalse ( c1.equals ( c2 )  ) ;^94^^^^^79^109^assertFalse ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P14_Delete_Statement]^^94^^^^^79^109^assertFalse ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P3_Replace_Literal]^c2.setRadius ( 2.0 ) ;^95^^^^^80^110^c2.setRadius ( 0.5 ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P14_Delete_Statement]^^95^^^^^80^110^c2.setRadius ( 0.5 ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^c1.setRadius ( 0.5 ) ;c2.setRadius ( 0.5 ) ;^95^^^^^80^110^c2.setRadius ( 0.5 ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P5_Replace_Variable]^assertTrue ( c2.equals ( c1 )  ) ;^96^^^^^81^111^assertTrue ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P7_Replace_Invocation]^assertEquals ( c1.equals ( c2 )  ) ;^96^^^^^81^111^assertTrue ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P7_Replace_Invocation]^assertTrue ( c1 .getClass (  )   ) ;^96^^^^^81^111^assertTrue ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P14_Delete_Statement]^^96^^^^^81^111^assertTrue ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^assertFalse ( c1.equals ( c2 )  ) ;assertTrue ( c1.equals ( c2 )  ) ;^96^^^^^81^111^assertTrue ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^assertTrue ( c1 != c2 ) ;assertTrue ( c1.equals ( c2 )  ) ;^96^^^^^81^111^assertTrue ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^assertTrue ( c1.getClass (  )  == c2.getClass (  )  ) ;assertTrue ( c1.equals ( c2 )  ) ;^96^^^^^81^111^assertTrue ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^assertEquals ( c1, c2 ) ;assertTrue ( c1.equals ( c2 )  ) ;^96^^^^^81^111^assertTrue ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertTrue ( c1.equals ( c2 )  ) ;^96^^^^^81^111^assertTrue ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P3_Replace_Literal]^c1.setillPaint ( new GradientPaint ( 1.0f, 2.0f, Color.blue, 3.0f, 4.0f, Color.green )  ) ;^99^100^^^^84^114^c1.setFillPaint ( new GradientPaint ( 1.0f, 2.0f, Color.blue, 3.0f, 4.0f, Color.green )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P4_Replace_Constructor]^c1.setFillPaint ( c1.setFillPaint (  new GradientPaint ( 1.0F, 2.0F, white, 3.0F, 4.0F, gray )   ) ;^99^100^^^^84^114^c1.setFillPaint ( new GradientPaint ( 1.0f, 2.0f, Color.blue, 3.0f, 4.0f, Color.green )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P5_Replace_Variable]^c1.setFillPaint ( new GradientPaint ( 1.0f, 2.0f, Color. 3.0f, 4.0f, Color.green )  ) ;^99^100^^^^84^114^c1.setFillPaint ( new GradientPaint ( 1.0f, 2.0f, Color.blue, 3.0f, 4.0f, Color.green )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P14_Delete_Statement]^^99^100^^^^84^114^c1.setFillPaint ( new GradientPaint ( 1.0f, 2.0f, Color.blue, 3.0f, 4.0f, Color.green )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P5_Replace_Variable]^assertFalse ( c2.equals ( c1 )  ) ;^101^^^^^86^116^assertFalse ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P7_Replace_Invocation]^assertEquals ( c1.equals ( c2 )  ) ;^101^^^^^86^116^assertFalse ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P14_Delete_Statement]^^101^^^^^86^116^assertFalse ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^assertTrue ( c1 != c2 ) ;assertFalse ( c1.equals ( c2 )  ) ;^101^^^^^86^116^assertFalse ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^assertTrue ( c1.equals ( c2 )  ) ;assertFalse ( c1.equals ( c2 )  ) ;^101^^^^^86^116^assertFalse ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^assertEquals ( c1, c2 ) ;assertFalse ( c1.equals ( c2 )  ) ;^101^^^^^86^116^assertFalse ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertFalse ( c1.equals ( c2 )  ) ;^101^^^^^86^116^assertFalse ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P7_Replace_Invocation]^assertFalse ( c1 .getClass (  )   ) ;^101^^^^^86^116^assertFalse ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P3_Replace_Literal]^c2.setillPaint ( new GradientPaint ( 1.0f, 2.0f, Color.blue, 3.0f, 4.0f, Color.green )  ) ;^102^103^^^^87^117^c2.setFillPaint ( new GradientPaint ( 1.0f, 2.0f, Color.blue, 3.0f, 4.0f, Color.green )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P4_Replace_Constructor]^c2.setFillPaint ( c2.setFillPaint (  new GradientPaint ( 1.0F, 2.0F, white, 3.0F, 4.0F, gray )   ) ;^102^103^^^^87^117^c2.setFillPaint ( new GradientPaint ( 1.0f, 2.0f, Color.blue, 3.0f, 4.0f, Color.green )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P5_Replace_Variable]^c2.setFillPaint ( new GradientPaint ( 1.0f, 2.0f, Color. 3.0f, 4.0f, Color.green )  ) ;^102^103^^^^87^117^c2.setFillPaint ( new GradientPaint ( 1.0f, 2.0f, Color.blue, 3.0f, 4.0f, Color.green )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P8_Replace_Mix]^c2.setFillPaint ( new GradientPaint ( 1.0f, 2.0f, Color.blue, 3.0f, 4.0f, Color.2 )  ) ;^102^103^^^^87^117^c2.setFillPaint ( new GradientPaint ( 1.0f, 2.0f, Color.blue, 3.0f, 4.0f, Color.green )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P14_Delete_Statement]^^102^103^^^^87^117^c2.setFillPaint ( new GradientPaint ( 1.0f, 2.0f, Color.blue, 3.0f, 4.0f, Color.green )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P4_Replace_Constructor]^c1.setOutlinePaint ( c1.setOutlinePaint (  new GradientPaint ( 1.0F, 2.0F, blue, 3.0F, 4.0F, green )   ) ;^106^107^^^^91^121^c1.setOutlinePaint ( new GradientPaint ( 1.0f, 2.0f, Color.white, 3.0f, 4.0f, Color.gray )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P5_Replace_Variable]^c1.setOutlinePaint ( new GradientPaint ( 1.0f, 2.0f, Color. 3.0f, 4.0f, Color.gray )  ) ;^106^107^^^^91^121^c1.setOutlinePaint ( new GradientPaint ( 1.0f, 2.0f, Color.white, 3.0f, 4.0f, Color.gray )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P14_Delete_Statement]^^106^107^^^^91^121^c1.setOutlinePaint ( new GradientPaint ( 1.0f, 2.0f, Color.white, 3.0f, 4.0f, Color.gray )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P5_Replace_Variable]^assertFalse ( c2.equals ( c1 )  ) ;^108^^^^^93^123^assertFalse ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P7_Replace_Invocation]^assertEquals ( c1.equals ( c2 )  ) ;^108^^^^^93^123^assertFalse ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P7_Replace_Invocation]^assertFalse ( c1 .getClass (  )   ) ;^108^^^^^93^123^assertFalse ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P14_Delete_Statement]^^108^^^^^93^123^assertFalse ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^assertTrue ( c1 != c2 ) ;assertFalse ( c1.equals ( c2 )  ) ;^108^^^^^93^123^assertFalse ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^assertTrue ( c1.equals ( c2 )  ) ;assertFalse ( c1.equals ( c2 )  ) ;^108^^^^^93^123^assertFalse ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^assertEquals ( c1, c2 ) ;assertFalse ( c1.equals ( c2 )  ) ;^108^^^^^93^123^assertFalse ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertFalse ( c1.equals ( c2 )  ) ;^108^^^^^93^123^assertFalse ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P4_Replace_Constructor]^c2.setOutlinePaint ( c2.setOutlinePaint (  new GradientPaint ( 1.0F, 2.0F, blue, 3.0F, 4.0F, green )   ) ;^109^110^^^^94^124^c2.setOutlinePaint ( new GradientPaint ( 1.0f, 2.0f, Color.white, 3.0f, 4.0f, Color.gray )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P5_Replace_Variable]^c2.setOutlinePaint ( new GradientPaint ( 1.0f, 2.0f, Color. 3.0f, 4.0f, Color.gray )  ) ;^109^110^^^^94^124^c2.setOutlinePaint ( new GradientPaint ( 1.0f, 2.0f, Color.white, 3.0f, 4.0f, Color.gray )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P14_Delete_Statement]^^109^110^^^^94^124^c2.setOutlinePaint ( new GradientPaint ( 1.0f, 2.0f, Color.white, 3.0f, 4.0f, Color.gray )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P5_Replace_Variable]^assertTrue ( c2.equals ( c1 )  ) ;^112^^^^^97^127^assertTrue ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P7_Replace_Invocation]^assertEquals ( c1.equals ( c2 )  ) ;^112^^^^^97^127^assertTrue ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P14_Delete_Statement]^^112^^^^^97^127^assertTrue ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^assertFalse ( c1.equals ( c2 )  ) ;assertTrue ( c1.equals ( c2 )  ) ;^112^^^^^97^127^assertTrue ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^assertTrue ( c1 != c2 ) ;assertTrue ( c1.equals ( c2 )  ) ;^112^^^^^97^127^assertTrue ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^assertTrue ( c1.getClass (  )  == c2.getClass (  )  ) ;assertTrue ( c1.equals ( c2 )  ) ;^112^^^^^97^127^assertTrue ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^assertEquals ( c1, c2 ) ;assertTrue ( c1.equals ( c2 )  ) ;^112^^^^^97^127^assertTrue ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertTrue ( c1.equals ( c2 )  ) ;^112^^^^^97^127^assertTrue ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P7_Replace_Invocation]^assertTrue ( c1 .getClass (  )   ) ;^112^^^^^97^127^assertTrue ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P4_Replace_Constructor]^c1.setOutlineStroke ( c1.setOutlineStroke (  new BasicStroke ( 2.0F )   ) ;^115^^^^^100^130^c1.setOutlineStroke ( new BasicStroke ( 1.1f )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P14_Delete_Statement]^^115^^^^^100^130^c1.setOutlineStroke ( new BasicStroke ( 1.1f )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P5_Replace_Variable]^assertFalse ( c2.equals ( c1 )  ) ;^116^^^^^101^131^assertFalse ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P7_Replace_Invocation]^assertEquals ( c1.equals ( c2 )  ) ;^116^^^^^101^131^assertFalse ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P7_Replace_Invocation]^assertFalse ( c1 .getClass (  )   ) ;^116^^^^^101^131^assertFalse ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P14_Delete_Statement]^^116^^^^^101^131^assertFalse ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^assertTrue ( c1 != c2 ) ;assertFalse ( c1.equals ( c2 )  ) ;^116^^^^^101^131^assertFalse ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^assertTrue ( c1.equals ( c2 )  ) ;assertFalse ( c1.equals ( c2 )  ) ;^116^^^^^101^131^assertFalse ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^assertEquals ( c1, c2 ) ;assertFalse ( c1.equals ( c2 )  ) ;^116^^^^^101^131^assertFalse ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertFalse ( c1.equals ( c2 )  ) ;^116^^^^^101^131^assertFalse ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P4_Replace_Constructor]^c2.setOutlineStroke ( c2.setOutlineStroke (  new BasicStroke ( 2.0F )   ) ;^117^^^^^102^132^c2.setOutlineStroke ( new BasicStroke ( 1.1f )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P14_Delete_Statement]^^117^118^^^^102^132^c2.setOutlineStroke ( new BasicStroke ( 1.1f )  ) ; assertTrue ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P5_Replace_Variable]^assertTrue ( c2.equals ( c1 )  ) ;^118^^^^^103^133^assertTrue ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P7_Replace_Invocation]^assertEquals ( c1.equals ( c2 )  ) ;^118^^^^^103^133^assertTrue ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P14_Delete_Statement]^^118^^^^^103^133^assertTrue ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^assertFalse ( c1.equals ( c2 )  ) ;assertTrue ( c1.equals ( c2 )  ) ;^118^^^^^103^133^assertTrue ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^assertTrue ( c1 != c2 ) ;assertTrue ( c1.equals ( c2 )  ) ;^118^^^^^103^133^assertTrue ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^assertTrue ( c1.getClass (  )  == c2.getClass (  )  ) ;assertTrue ( c1.equals ( c2 )  ) ;^118^^^^^103^133^assertTrue ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^assertEquals ( c1, c2 ) ;assertTrue ( c1.equals ( c2 )  ) ;^118^^^^^103^133^assertTrue ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertTrue ( c1.equals ( c2 )  ) ;^118^^^^^103^133^assertTrue ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P7_Replace_Invocation]^assertTrue ( c1 .getClass (  )   ) ;^118^^^^^103^133^assertTrue ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^DialCap c2 = new DialCap (  ) ;DialCap c1 = new DialCap (  ) ;^125^^^^^124^131^DialCap c1 = new DialCap (  ) ;^[CLASS] DialCapTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^DialCap c2 = null;DialCap c2 = new DialCap (  ) ;^126^^^^^124^131^DialCap c2 = new DialCap (  ) ;^[CLASS] DialCapTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^DialCap c1 = new DialCap (  ) ;DialCap c2 = new DialCap (  ) ;^126^^^^^124^131^DialCap c2 = new DialCap (  ) ;^[CLASS] DialCapTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  DialCap  c1  c2  
[P5_Replace_Variable]^assertTrue ( c2.equals ( c1 )  ) ;^127^^^^^124^131^assertTrue ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  DialCap  c1  c2  
[P7_Replace_Invocation]^assertEquals ( c1.equals ( c2 )  ) ;^127^^^^^124^131^assertTrue ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  DialCap  c1  c2  
[P8_Replace_Mix]^assertTrue ( c1 .getClass (  )   ) ;^127^^^^^124^131^assertTrue ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  DialCap  c1  c2  
[P14_Delete_Statement]^^127^^^^^124^131^assertTrue ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^assertFalse ( c1.equals ( c2 )  ) ;assertTrue ( c1.equals ( c2 )  ) ;^127^^^^^124^131^assertTrue ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^assertTrue ( c1 != c2 ) ;assertTrue ( c1.equals ( c2 )  ) ;^127^^^^^124^131^assertTrue ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^assertTrue ( c1.getClass (  )  == c2.getClass (  )  ) ;assertTrue ( c1.equals ( c2 )  ) ;^127^^^^^124^131^assertTrue ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^assertEquals ( c1, c2 ) ;assertTrue ( c1.equals ( c2 )  ) ;^127^^^^^124^131^assertTrue ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertTrue ( c1.equals ( c2 )  ) ;^127^^^^^124^131^assertTrue ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  DialCap  c1  c2  
[P1_Replace_Type]^long  h1 = c1.hashCode (  ) ;^128^^^^^124^131^int h1 = c1.hashCode (  ) ;^[CLASS] DialCapTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  DialCap  c1  c2  
[P5_Replace_Variable]^int h1 = c2.hashCode (  ) ;^128^^^^^124^131^int h1 = c1.hashCode (  ) ;^[CLASS] DialCapTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  DialCap  c1  c2  
[P7_Replace_Invocation]^int h1 = c1.setRadius (  ) ;^128^^^^^124^131^int h1 = c1.hashCode (  ) ;^[CLASS] DialCapTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  DialCap  c1  c2  
[P7_Replace_Invocation]^int h1 = c1 .clone (  )  ;^128^^^^^124^131^int h1 = c1.hashCode (  ) ;^[CLASS] DialCapTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^int h2 = c2.hashCode (  ) ;int h1 = c1.hashCode (  ) ;^128^^^^^124^131^int h1 = c1.hashCode (  ) ;^[CLASS] DialCapTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  DialCap  c1  c2  
[P8_Replace_Mix]^int h1 = c2.setRadius (  ) ;^128^^^^^124^131^int h1 = c1.hashCode (  ) ;^[CLASS] DialCapTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  DialCap  c1  c2  
[P14_Delete_Statement]^^128^129^^^^124^131^int h1 = c1.hashCode (  ) ; int h2 = c2.hashCode (  ) ;^[CLASS] DialCapTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  DialCap  c1  c2  
[P1_Replace_Type]^short  h2 = c2.hashCode (  ) ;^129^^^^^124^131^int h2 = c2.hashCode (  ) ;^[CLASS] DialCapTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  DialCap  c1  c2  
[P7_Replace_Invocation]^int h2 = c2.setRadius (  ) ;^129^^^^^124^131^int h2 = c2.hashCode (  ) ;^[CLASS] DialCapTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  DialCap  c1  c2  
[P7_Replace_Invocation]^int h2 = c2 .clone (  )  ;^129^^^^^124^131^int h2 = c2.hashCode (  ) ;^[CLASS] DialCapTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  DialCap  c1  c2  
[P8_Replace_Mix]^int h2 = c1.setRadius (  ) ;^129^^^^^124^131^int h2 = c2.hashCode (  ) ;^[CLASS] DialCapTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^int h1 = c1.hashCode (  ) ;int h2 = c2.hashCode (  ) ;^129^^^^^124^131^int h2 = c2.hashCode (  ) ;^[CLASS] DialCapTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  DialCap  c1  c2  
[P5_Replace_Variable]^int h2 = c1.hashCode (  ) ;^129^^^^^124^131^int h2 = c2.hashCode (  ) ;^[CLASS] DialCapTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  DialCap  c1  c2  
[P14_Delete_Statement]^^129^130^^^^124^131^int h2 = c2.hashCode (  ) ; assertEquals ( h1, h2 ) ;^[CLASS] DialCapTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  DialCap  c1  c2  
[P5_Replace_Variable]^assertEquals (  h2 ) ;^130^^^^^124^131^assertEquals ( h1, h2 ) ;^[CLASS] DialCapTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  DialCap  c1  c2  
[P5_Replace_Variable]^assertEquals ( h1 ) ;^130^^^^^124^131^assertEquals ( h1, h2 ) ;^[CLASS] DialCapTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  DialCap  c1  c2  
[P5_Replace_Variable]^assertEquals ( h2, h1 ) ;^130^^^^^124^131^assertEquals ( h1, h2 ) ;^[CLASS] DialCapTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  DialCap  c1  c2  
[P14_Delete_Statement]^^130^^^^^124^131^assertEquals ( h1, h2 ) ;^[CLASS] DialCapTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^assertFalse ( c1.equals ( c2 )  ) ;assertEquals ( h1, h2 ) ;^130^^^^^124^131^assertEquals ( h1, h2 ) ;^[CLASS] DialCapTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^assertTrue ( c1 != c2 ) ;assertEquals ( h1, h2 ) ;^130^^^^^124^131^assertEquals ( h1, h2 ) ;^[CLASS] DialCapTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^assertTrue ( c1.equals ( c2 )  ) ;assertEquals ( h1, h2 ) ;^130^^^^^124^131^assertEquals ( h1, h2 ) ;^[CLASS] DialCapTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^assertEquals ( c1, c2 ) ;assertEquals ( h1, h2 ) ;^130^^^^^124^131^assertEquals ( h1, h2 ) ;^[CLASS] DialCapTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^DialCap c2 = new DialCap (  ) ;DialCap c1 = new DialCap (  ) ;^138^^^^^123^153^DialCap c1 = new DialCap (  ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^DialCap c2 = new DialCap (  ) ;DialCap c2 = null;^139^^^^^124^154^DialCap c2 = null;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P5_Replace_Variable]^c2 =  ( DialCap )  c2.clone (  ) ;^141^^^^^126^156^c2 =  ( DialCap )  c1.clone (  ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P7_Replace_Invocation]^c2 =  ( DialCap )  c1.setRadius (  ) ;^141^^^^^126^156^c2 =  ( DialCap )  c1.clone (  ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P8_Replace_Mix]^c2 =   ( DialCap )  null.clone (  ) ;^141^^^^^126^156^c2 =  ( DialCap )  c1.clone (  ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^c1 = new DialCap (  ) ;c2 =  ( DialCap )  c1.clone (  ) ;^141^^^^^126^156^c2 =  ( DialCap )  c1.clone (  ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^c2 =  ( DialCap )  in.readObject (  ) ;c2 =  ( DialCap )  c1.clone (  ) ;^141^^^^^126^156^c2 =  ( DialCap )  c1.clone (  ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P14_Delete_Statement]^^141^^^^^126^156^c2 =  ( DialCap )  c1.clone (  ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P8_Replace_Mix]^c2 =  ( DialCap )  c2.setRadius (  ) ;^141^^^^^126^156^c2 =  ( DialCap )  c1.clone (  ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P14_Delete_Statement]^^144^^^^^129^159^e.printStackTrace (  ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P2_Replace_Operator]^assertTrue ( c1 >= c2 ) ;^146^^^^^131^161^assertTrue ( c1 != c2 ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P5_Replace_Variable]^assertTrue ( c2 != c1 ) ;^146^^^^^131^161^assertTrue ( c1 != c2 ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P7_Replace_Invocation]^assertEquals ( c1 != c2 ) ;^146^^^^^131^161^assertTrue ( c1 != c2 ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P14_Delete_Statement]^^146^147^^^^131^161^assertTrue ( c1 != c2 ) ; assertTrue ( c1.getClass (  )  == c2.getClass (  )  ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertFalse ( c1.equals ( c2 )  ) ;assertTrue ( c1 != c2 ) ;^146^^^^^131^161^assertTrue ( c1 != c2 ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertTrue ( c1.equals ( c2 )  ) ;assertTrue ( c1 != c2 ) ;^146^^^^^131^161^assertTrue ( c1 != c2 ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertEquals ( c1, c2 ) ;assertTrue ( c1 != c2 ) ;^146^^^^^131^161^assertTrue ( c1 != c2 ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertTrue ( c1 != c2 ) ;^146^^^^^131^161^assertTrue ( c1 != c2 ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P2_Replace_Operator]^assertTrue ( c1.getClass (  )  >= c2.getClass (  )  ) ;^147^^^^^132^162^assertTrue ( c1.getClass (  )  == c2.getClass (  )  ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P5_Replace_Variable]^assertTrue ( c2.getClass (  )  == c1.getClass (  )  ) ;^147^^^^^132^162^assertTrue ( c1.getClass (  )  == c2.getClass (  )  ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P7_Replace_Invocation]^assertEquals ( c1.getClass (  )  == c2.getClass (  )  ) ;^147^^^^^132^162^assertTrue ( c1.getClass (  )  == c2.getClass (  )  ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P7_Replace_Invocation]^assertTrue ( c1.setRadius (  )  == c2.getClass (  )  ) ;^147^^^^^132^162^assertTrue ( c1.getClass (  )  == c2.getClass (  )  ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P14_Delete_Statement]^^147^^^^^132^162^assertTrue ( c1.getClass (  )  == c2.getClass (  )  ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertTrue ( c1.equals ( c2 )  ) ;assertTrue ( c1.getClass (  )  == c2.getClass (  )  ) ;^147^^^^^132^162^assertTrue ( c1.getClass (  )  == c2.getClass (  )  ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P5_Replace_Variable]^assertTrue ( c2.getClass (  )  == c2.getClass (  )  ) ;^147^^^^^132^162^assertTrue ( c1.getClass (  )  == c2.getClass (  )  ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P7_Replace_Invocation]^assertTrue ( c1 .equals ( c2 )   == c2^147^^^^^132^162^assertTrue ( c1.getClass (  )  == c2.getClass (  )  ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P5_Replace_Variable]^assertTrue ( c1.getClass (  )  == c1.getClass (  )  ) ;^147^^^^^132^162^assertTrue ( c1.getClass (  )  == c2.getClass (  )  ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P8_Replace_Mix]^assertTrue ( c1.setRadius (  )  == c1.getClass (  )  ) ;^147^^^^^132^162^assertTrue ( c1.getClass (  )  == c2.getClass (  )  ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P14_Delete_Statement]^^147^148^^^^132^162^assertTrue ( c1.getClass (  )  == c2.getClass (  )  ) ; assertTrue ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P5_Replace_Variable]^assertTrue ( c2.equals ( c1 )  ) ;^148^^^^^133^163^assertTrue ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P7_Replace_Invocation]^assertEquals ( c1.equals ( c2 )  ) ;^148^^^^^133^163^assertTrue ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P14_Delete_Statement]^^148^^^^^133^163^assertTrue ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertFalse ( c1.equals ( c2 )  ) ;assertTrue ( c1.equals ( c2 )  ) ;^148^^^^^133^163^assertTrue ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertTrue ( c1 != c2 ) ;assertTrue ( c1.equals ( c2 )  ) ;^148^^^^^133^163^assertTrue ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertTrue ( c1.getClass (  )  == c2.getClass (  )  ) ;assertTrue ( c1.equals ( c2 )  ) ;^148^^^^^133^163^assertTrue ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertEquals ( c1, c2 ) ;assertTrue ( c1.equals ( c2 )  ) ;^148^^^^^133^163^assertTrue ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertTrue ( c1.equals ( c2 )  ) ;^148^^^^^133^163^assertTrue ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P7_Replace_Invocation]^assertTrue ( c1 .getClass (  )   ) ;^148^^^^^133^163^assertTrue ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P8_Replace_Mix]^c1 ;^151^^^^^136^166^c1 = new DialCap (  ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^c2 =  ( DialCap )  c1.clone (  ) ;c1 = new DialCap (  ) ;^151^^^^^136^166^c1 = new DialCap (  ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P3_Replace_Literal]^c1.setillPaint ( new GradientPaint ( 1.0f, 2.0f, Color.blue, 3.0f, 4.0f, Color.green )  ) ;^152^153^^^^137^167^c1.setFillPaint ( new GradientPaint ( 1.0f, 2.0f, Color.blue, 3.0f, 4.0f, Color.green )  ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P4_Replace_Constructor]^c1.setFillPaint ( c1.setFillPaint (  new GradientPaint ( 1.0F, 2.0F, white, 3.0F, 4.0F, gray )   ) ;^152^153^^^^137^167^c1.setFillPaint ( new GradientPaint ( 1.0f, 2.0f, Color.blue, 3.0f, 4.0f, Color.green )  ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P5_Replace_Variable]^c1.setFillPaint ( new GradientPaint ( 1.0f, 2.0f, Color. 3.0f, 4.0f, Color.green )  ) ;^152^153^^^^137^167^c1.setFillPaint ( new GradientPaint ( 1.0f, 2.0f, Color.blue, 3.0f, 4.0f, Color.green )  ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P14_Delete_Statement]^^152^153^^^^137^167^c1.setFillPaint ( new GradientPaint ( 1.0f, 2.0f, Color.blue, 3.0f, 4.0f, Color.green )  ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P4_Replace_Constructor]^c1.setOutlinePaint ( c1.setOutlinePaint (  new GradientPaint ( 1.0F, 2.0F, blue, 3.0F, 4.0F, green )   ) ;^154^155^^^^139^169^c1.setOutlinePaint ( new GradientPaint ( 1.0f, 2.0f, Color.white, 3.0f, 4.0f, Color.gray )  ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P5_Replace_Variable]^c1.setOutlinePaint ( new GradientPaint ( 1.0f, 2.0f, Color. 3.0f, 4.0f, Color.gray )  ) ;^154^155^^^^139^169^c1.setOutlinePaint ( new GradientPaint ( 1.0f, 2.0f, Color.white, 3.0f, 4.0f, Color.gray )  ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P14_Delete_Statement]^^154^155^^^^139^169^c1.setOutlinePaint ( new GradientPaint ( 1.0f, 2.0f, Color.white, 3.0f, 4.0f, Color.gray )  ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P4_Replace_Constructor]^c1.setOutlineStroke ( c1.setOutlineStroke (  new BasicStroke ( 1.1F )   ) ;^156^^^^^141^171^c1.setOutlineStroke ( new BasicStroke ( 2.0f )  ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P14_Delete_Statement]^^156^157^^^^141^171^c1.setOutlineStroke ( new BasicStroke ( 2.0f )  ) ; c2 = null;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P8_Replace_Mix]^c2 = true;^157^^^^^142^172^c2 = null;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P5_Replace_Variable]^c2 =  ( DialCap )  c2.clone (  ) ;^159^^^^^144^174^c2 =  ( DialCap )  c1.clone (  ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P7_Replace_Invocation]^c2 =  ( DialCap )  c1.setRadius (  ) ;^159^^^^^144^174^c2 =  ( DialCap )  c1.clone (  ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P8_Replace_Mix]^c2 =   ( DialCap )  null.clone (  ) ;^159^^^^^144^174^c2 =  ( DialCap )  c1.clone (  ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^c1 = new DialCap (  ) ;c2 =  ( DialCap )  c1.clone (  ) ;^159^^^^^144^174^c2 =  ( DialCap )  c1.clone (  ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^c2 =  ( DialCap )  in.readObject (  ) ;c2 =  ( DialCap )  c1.clone (  ) ;^159^^^^^144^174^c2 =  ( DialCap )  c1.clone (  ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P7_Replace_Invocation]^c2 =  ( DialCap )  c1 .hashCode (  )  ;^159^^^^^144^174^c2 =  ( DialCap )  c1.clone (  ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P14_Delete_Statement]^^159^^^^^144^174^c2 =  ( DialCap )  c1.clone (  ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P14_Delete_Statement]^^162^^^^^147^177^e.printStackTrace (  ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P2_Replace_Operator]^assertTrue ( c1 <= c2 ) ;^164^^^^^149^179^assertTrue ( c1 != c2 ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P5_Replace_Variable]^assertTrue ( c2 != c1 ) ;^164^^^^^149^179^assertTrue ( c1 != c2 ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P7_Replace_Invocation]^assertEquals ( c1 != c2 ) ;^164^^^^^149^179^assertTrue ( c1 != c2 ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P14_Delete_Statement]^^164^^^^^149^179^assertTrue ( c1 != c2 ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertFalse ( c1.equals ( c2 )  ) ;assertTrue ( c1 != c2 ) ;^164^^^^^149^179^assertTrue ( c1 != c2 ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertTrue ( c1.equals ( c2 )  ) ;assertTrue ( c1 != c2 ) ;^164^^^^^149^179^assertTrue ( c1 != c2 ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertEquals ( c1, c2 ) ;assertTrue ( c1 != c2 ) ;^164^^^^^149^179^assertTrue ( c1 != c2 ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertTrue ( c1 != c2 ) ;^164^^^^^149^179^assertTrue ( c1 != c2 ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P2_Replace_Operator]^assertTrue ( c1.getClass (  )  != c2.getClass (  )  ) ;^165^^^^^150^180^assertTrue ( c1.getClass (  )  == c2.getClass (  )  ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P5_Replace_Variable]^assertTrue ( c2.getClass (  )  == c1.getClass (  )  ) ;^165^^^^^150^180^assertTrue ( c1.getClass (  )  == c2.getClass (  )  ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P7_Replace_Invocation]^assertEquals ( c1.getClass (  )  == c2.getClass (  )  ) ;^165^^^^^150^180^assertTrue ( c1.getClass (  )  == c2.getClass (  )  ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P7_Replace_Invocation]^assertTrue ( c1.setRadius (  )  == c2.getClass (  )  ) ;^165^^^^^150^180^assertTrue ( c1.getClass (  )  == c2.getClass (  )  ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P7_Replace_Invocation]^assertTrue ( c1 .equals ( c2 )   == c2^165^^^^^150^180^assertTrue ( c1.getClass (  )  == c2.getClass (  )  ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P14_Delete_Statement]^^165^^^^^150^180^assertTrue ( c1.getClass (  )  == c2.getClass (  )  ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertTrue ( c1.equals ( c2 )  ) ;assertTrue ( c1.getClass (  )  == c2.getClass (  )  ) ;^165^^^^^150^180^assertTrue ( c1.getClass (  )  == c2.getClass (  )  ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P5_Replace_Variable]^assertTrue ( c2.getClass (  )  == c2.getClass (  )  ) ;^165^^^^^150^180^assertTrue ( c1.getClass (  )  == c2.getClass (  )  ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P14_Delete_Statement]^^165^166^^^^150^180^assertTrue ( c1.getClass (  )  == c2.getClass (  )  ) ; assertTrue ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P5_Replace_Variable]^assertTrue ( c1.getClass (  )  == c1.getClass (  )  ) ;^165^^^^^150^180^assertTrue ( c1.getClass (  )  == c2.getClass (  )  ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P5_Replace_Variable]^assertTrue ( c2.equals ( c1 )  ) ;^166^^^^^151^181^assertTrue ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P7_Replace_Invocation]^assertEquals ( c1.equals ( c2 )  ) ;^166^^^^^151^181^assertTrue ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P14_Delete_Statement]^^166^^^^^151^181^assertTrue ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertFalse ( c1.equals ( c2 )  ) ;assertTrue ( c1.equals ( c2 )  ) ;^166^^^^^151^181^assertTrue ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertTrue ( c1 != c2 ) ;assertTrue ( c1.equals ( c2 )  ) ;^166^^^^^151^181^assertTrue ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertTrue ( c1.getClass (  )  == c2.getClass (  )  ) ;assertTrue ( c1.equals ( c2 )  ) ;^166^^^^^151^181^assertTrue ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertEquals ( c1, c2 ) ;assertTrue ( c1.equals ( c2 )  ) ;^166^^^^^151^181^assertTrue ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertTrue ( c1.equals ( c2 )  ) ;^166^^^^^151^181^assertTrue ( c1.equals ( c2 )  ) ;^[CLASS] DialCapTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialCap  c1  c2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^DialCap c2 = new DialCap (  ) ;DialCap c1 = new DialCap (  ) ;^175^^^^^160^190^DialCap c1 = new DialCap (  ) ;^[CLASS] DialCapTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^DialCap c2 = new DialCap (  ) ;DialCap c2 = null;^176^^^^^161^191^DialCap c2 = null;^[CLASS] DialCapTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  DialCap  c1  c2  
[P8_Replace_Mix]^c2 =   ( DialCap )  null.readObject (  ) ;^186^^^^^171^201^c2 =  ( DialCap )  in.readObject (  ) ;^[CLASS] DialCapTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^c2 =  ( DialCap )  c1.clone (  ) ;c2 =  ( DialCap )  in.readObject (  ) ;^186^^^^^171^201^c2 =  ( DialCap )  in.readObject (  ) ;^[CLASS] DialCapTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  DialCap  c1  c2  
[P7_Replace_Invocation]^ObjectInput in = new ObjectInputStream ( new ByteArrayInputStream ( buffer .ByteArrayOutputStream (  )   )  ) ;^184^185^^^^169^199^ObjectInput in = new ObjectInputStream ( new ByteArrayInputStream ( buffer.toByteArray (  )  )  ) ;^[CLASS] DialCapTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  DialCap  c1  c2  
[P7_Replace_Invocation]^new ByteArrayInputStream ( buffer .ByteArrayOutputStream (  )   )  ) ;^185^^^^^170^200^new ByteArrayInputStream ( buffer.toByteArray (  )  )  ) ;^[CLASS] DialCapTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  DialCap  c1  c2  
[P5_Replace_Variable]^out.writeObject ( c2 ) ;^181^^^^^166^196^out.writeObject ( c1 ) ;^[CLASS] DialCapTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  DialCap  c1  c2  
[P7_Replace_Invocation]^out .close (  )  ;^181^^^^^166^196^out.writeObject ( c1 ) ;^[CLASS] DialCapTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  DialCap  c1  c2  
[P14_Delete_Statement]^^181^^^^^166^196^out.writeObject ( c1 ) ;^[CLASS] DialCapTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^out.close (  ) ;out.writeObject ( c1 ) ;^181^^^^^166^196^out.writeObject ( c1 ) ;^[CLASS] DialCapTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  DialCap  c1  c2  
[P7_Replace_Invocation]^out.writeObject (  ) ;^182^^^^^167^197^out.close (  ) ;^[CLASS] DialCapTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  DialCap  c1  c2  
[P14_Delete_Statement]^^182^^^^^167^197^out.close (  ) ;^[CLASS] DialCapTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^in.close (  ) ;out.close (  ) ;^182^^^^^167^197^out.close (  ) ;^[CLASS] DialCapTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^out.writeObject ( c1 ) ;out.close (  ) ;^182^^^^^167^197^out.close (  ) ;^[CLASS] DialCapTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  DialCap  c1  c2  
[P14_Delete_Statement]^^185^^^^^170^200^new ByteArrayInputStream ( buffer.toByteArray (  )  )  ) ;^[CLASS] DialCapTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  DialCap  c1  c2  
[P7_Replace_Invocation]^c2 =  ( DialCap )  in .close (  )  ;^186^^^^^171^201^c2 =  ( DialCap )  in.readObject (  ) ;^[CLASS] DialCapTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  DialCap  c1  c2  
[P14_Delete_Statement]^^186^^^^^171^201^c2 =  ( DialCap )  in.readObject (  ) ;^[CLASS] DialCapTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  DialCap  c1  c2  
[P14_Delete_Statement]^^187^^^^^172^202^in.close (  ) ;^[CLASS] DialCapTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^out.close (  ) ;in.close (  ) ;^187^^^^^172^202^in.close (  ) ;^[CLASS] DialCapTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  DialCap  c1  c2  
[P14_Delete_Statement]^^181^182^^^^166^196^out.writeObject ( c1 ) ; out.close (  ) ;^[CLASS] DialCapTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  DialCap  c1  c2  
[P14_Delete_Statement]^^185^186^^^^170^200^new ByteArrayInputStream ( buffer.toByteArray (  )  )  ) ; c2 =  ( DialCap )  in.readObject (  ) ;^[CLASS] DialCapTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  DialCap  c1  c2  
[P14_Delete_Statement]^^190^^^^^175^205^e.printStackTrace (  ) ;^[CLASS] DialCapTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  DialCap  c1  c2  
[P5_Replace_Variable]^assertEquals (  c2 ) ;^192^^^^^177^207^assertEquals ( c1, c2 ) ;^[CLASS] DialCapTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  DialCap  c1  c2  
[P5_Replace_Variable]^assertEquals ( c1 ) ;^192^^^^^177^207^assertEquals ( c1, c2 ) ;^[CLASS] DialCapTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  DialCap  c1  c2  
[P5_Replace_Variable]^assertEquals ( c2, c1 ) ;^192^^^^^177^207^assertEquals ( c1, c2 ) ;^[CLASS] DialCapTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  DialCap  c1  c2  
[P14_Delete_Statement]^^192^^^^^177^207^assertEquals ( c1, c2 ) ;^[CLASS] DialCapTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^assertFalse ( c1.equals ( c2 )  ) ;assertEquals ( c1, c2 ) ;^192^^^^^177^207^assertEquals ( c1, c2 ) ;^[CLASS] DialCapTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^assertTrue ( c1 != c2 ) ;assertEquals ( c1, c2 ) ;^192^^^^^177^207^assertEquals ( c1, c2 ) ;^[CLASS] DialCapTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^assertTrue ( c1.equals ( c2 )  ) ;assertEquals ( c1, c2 ) ;^192^^^^^177^207^assertEquals ( c1, c2 ) ;^[CLASS] DialCapTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertEquals ( c1, c2 ) ;^192^^^^^177^207^assertEquals ( c1, c2 ) ;^[CLASS] DialCapTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  DialCap  c1  c2  
[P8_Replace_Mix]^c1  =  c1 ;^195^^^^^180^210^c1 = new DialCap (  ) ;^[CLASS] DialCapTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^c2 =  ( DialCap )  c1.clone (  ) ;c1 = new DialCap (  ) ;^195^^^^^180^210^c1 = new DialCap (  ) ;^[CLASS] DialCapTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  DialCap  c1  c2  
[P3_Replace_Literal]^c1.setillPaint ( new GradientPaint ( 1.0f, 2.0f, Color.blue, 3.0f, 4.0f, Color.green )  ) ;^196^197^^^^181^211^c1.setFillPaint ( new GradientPaint ( 1.0f, 2.0f, Color.blue, 3.0f, 4.0f, Color.green )  ) ;^[CLASS] DialCapTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  DialCap  c1  c2  
[P4_Replace_Constructor]^c1.setFillPaint ( c1.setFillPaint (  new GradientPaint ( 1.0F, 2.0F, white, 3.0F, 4.0F, gray )   ) ;^196^197^^^^181^211^c1.setFillPaint ( new GradientPaint ( 1.0f, 2.0f, Color.blue, 3.0f, 4.0f, Color.green )  ) ;^[CLASS] DialCapTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  DialCap  c1  c2  
[P5_Replace_Variable]^c1.setFillPaint ( new GradientPaint ( 1.0f, 2.0f, Color. 3.0f, 4.0f, Color.green )  ) ;^196^197^^^^181^211^c1.setFillPaint ( new GradientPaint ( 1.0f, 2.0f, Color.blue, 3.0f, 4.0f, Color.green )  ) ;^[CLASS] DialCapTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  DialCap  c1  c2  
[P14_Delete_Statement]^^196^197^^^^181^211^c1.setFillPaint ( new GradientPaint ( 1.0f, 2.0f, Color.blue, 3.0f, 4.0f, Color.green )  ) ;^[CLASS] DialCapTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  DialCap  c1  c2  
[P4_Replace_Constructor]^c1.setOutlinePaint ( c1.setOutlinePaint (  new GradientPaint ( 1.0F, 2.0F, blue, 3.0F, 4.0F, green )   ) ;^198^199^^^^183^213^c1.setOutlinePaint ( new GradientPaint ( 1.0f, 2.0f, Color.white, 3.0f, 4.0f, Color.gray )  ) ;^[CLASS] DialCapTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  DialCap  c1  c2  
[P5_Replace_Variable]^c1.setOutlinePaint ( new GradientPaint ( 1.0f, 2.0f, Color. 3.0f, 4.0f, Color.gray )  ) ;^198^199^^^^183^213^c1.setOutlinePaint ( new GradientPaint ( 1.0f, 2.0f, Color.white, 3.0f, 4.0f, Color.gray )  ) ;^[CLASS] DialCapTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  DialCap  c1  c2  
[P14_Delete_Statement]^^198^199^^^^183^213^c1.setOutlinePaint ( new GradientPaint ( 1.0f, 2.0f, Color.white, 3.0f, 4.0f, Color.gray )  ) ;^[CLASS] DialCapTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  DialCap  c1  c2  
[P4_Replace_Constructor]^c1.setOutlineStroke ( c1.setOutlineStroke (  new BasicStroke ( 1.1F )   ) ;^200^^^^^185^215^c1.setOutlineStroke ( new BasicStroke ( 2.0f )  ) ;^[CLASS] DialCapTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  DialCap  c1  c2  
[P14_Delete_Statement]^^200^^^^^185^215^c1.setOutlineStroke ( new BasicStroke ( 2.0f )  ) ;^[CLASS] DialCapTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  DialCap  c1  c2  
[P8_Replace_Mix]^c2 = this;^201^^^^^186^216^c2 = null;^[CLASS] DialCapTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  DialCap  c1  c2  
[P8_Replace_Mix]^c2 =   ( DialCap )  null.readObject (  ) ;^211^^^^^196^226^c2 =  ( DialCap )  in.readObject (  ) ;^[CLASS] DialCapTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^c2 =  ( DialCap )  c1.clone (  ) ;c2 =  ( DialCap )  in.readObject (  ) ;^211^^^^^196^226^c2 =  ( DialCap )  in.readObject (  ) ;^[CLASS] DialCapTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  DialCap  c1  c2  
[P7_Replace_Invocation]^ObjectInput in = new ObjectInputStream ( new ByteArrayInputStream ( buffer .ByteArrayOutputStream (  )   )  ) ;^209^210^^^^194^224^ObjectInput in = new ObjectInputStream ( new ByteArrayInputStream ( buffer.toByteArray (  )  )  ) ;^[CLASS] DialCapTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  DialCap  c1  c2  
[P5_Replace_Variable]^out.writeObject ( c2 ) ;^206^^^^^191^221^out.writeObject ( c1 ) ;^[CLASS] DialCapTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  DialCap  c1  c2  
[P14_Delete_Statement]^^206^207^^^^191^221^out.writeObject ( c1 ) ; out.close (  ) ;^[CLASS] DialCapTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^out.close (  ) ;out.writeObject ( c1 ) ;^206^^^^^191^221^out.writeObject ( c1 ) ;^[CLASS] DialCapTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  DialCap  c1  c2  
[P7_Replace_Invocation]^out.writeObject (  ) ;^207^^^^^192^222^out.close (  ) ;^[CLASS] DialCapTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  DialCap  c1  c2  
[P14_Delete_Statement]^^207^^^^^192^222^out.close (  ) ;^[CLASS] DialCapTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^in.close (  ) ;out.close (  ) ;^207^^^^^192^222^out.close (  ) ;^[CLASS] DialCapTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^out.writeObject ( c1 ) ;out.close (  ) ;^207^^^^^192^222^out.close (  ) ;^[CLASS] DialCapTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  DialCap  c1  c2  
[P14_Delete_Statement]^^210^^^^^195^225^new ByteArrayInputStream ( buffer.toByteArray (  )  )  ) ;^[CLASS] DialCapTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  DialCap  c1  c2  
[P14_Delete_Statement]^^211^212^^^^196^226^c2 =  ( DialCap )  in.readObject (  ) ; in.close (  ) ;^[CLASS] DialCapTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  DialCap  c1  c2  
[P14_Delete_Statement]^^212^^^^^197^227^in.close (  ) ;^[CLASS] DialCapTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^out.close (  ) ;in.close (  ) ;^212^^^^^197^227^in.close (  ) ;^[CLASS] DialCapTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  DialCap  c1  c2  
[P7_Replace_Invocation]^new ByteArrayInputStream ( buffer .ByteArrayOutputStream (  )   )  ) ;^210^^^^^195^225^new ByteArrayInputStream ( buffer.toByteArray (  )  )  ) ;^[CLASS] DialCapTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  DialCap  c1  c2  
[P14_Delete_Statement]^^210^211^^^^195^225^new ByteArrayInputStream ( buffer.toByteArray (  )  )  ) ; c2 =  ( DialCap )  in.readObject (  ) ;^[CLASS] DialCapTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  DialCap  c1  c2  
[P14_Delete_Statement]^^215^^^^^200^230^e.printStackTrace (  ) ;^[CLASS] DialCapTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  DialCap  c1  c2  
[P5_Replace_Variable]^assertEquals (  c2 ) ;^217^^^^^202^232^assertEquals ( c1, c2 ) ;^[CLASS] DialCapTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  DialCap  c1  c2  
[P5_Replace_Variable]^assertEquals ( c1 ) ;^217^^^^^202^232^assertEquals ( c1, c2 ) ;^[CLASS] DialCapTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  DialCap  c1  c2  
[P5_Replace_Variable]^assertEquals ( c2, c1 ) ;^217^^^^^202^232^assertEquals ( c1, c2 ) ;^[CLASS] DialCapTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  DialCap  c1  c2  
[P14_Delete_Statement]^^217^^^^^202^232^assertEquals ( c1, c2 ) ;^[CLASS] DialCapTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^assertFalse ( c1.equals ( c2 )  ) ;assertEquals ( c1, c2 ) ;^217^^^^^202^232^assertEquals ( c1, c2 ) ;^[CLASS] DialCapTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^assertTrue ( c1 != c2 ) ;assertEquals ( c1, c2 ) ;^217^^^^^202^232^assertEquals ( c1, c2 ) ;^[CLASS] DialCapTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^assertTrue ( c1.equals ( c2 )  ) ;assertEquals ( c1, c2 ) ;^217^^^^^202^232^assertEquals ( c1, c2 ) ;^[CLASS] DialCapTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  DialCap  c1  c2  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertEquals ( c1, c2 ) ;^217^^^^^202^232^assertEquals ( c1, c2 ) ;^[CLASS] DialCapTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  DialCap  c1  c2  
