[P14_Delete_Statement]^^39^^^^^38^40^super ( name ) ;^[CLASS] StandardDialFrameTests  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] boolean  String  name  
[P11_Insert_Donor_Statement]^StandardDialFrame f2 = new StandardDialFrame (  ) ;StandardDialFrame f1 = new StandardDialFrame (  ) ;^46^^^^^31^61^StandardDialFrame f1 = new StandardDialFrame (  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^StandardDialFrame f1 = new StandardDialFrame (  ) ;StandardDialFrame f2 = new StandardDialFrame (  ) ;^47^^^^^32^62^StandardDialFrame f2 = new StandardDialFrame (  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^StandardDialFrame f2 = null;StandardDialFrame f2 = new StandardDialFrame (  ) ;^47^^^^^32^62^StandardDialFrame f2 = new StandardDialFrame (  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P5_Replace_Variable]^assertTrue ( f2.equals ( f1 )  ) ;^48^^^^^33^63^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P7_Replace_Invocation]^assertEquals ( f1.equals ( f2 )  ) ;^48^^^^^33^63^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P7_Replace_Invocation]^assertTrue ( f1 .getClass (  )   ) ;^48^^^^^33^63^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P14_Delete_Statement]^^48^^^^^33^63^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^assertEquals ( f1, f2 ) ;assertTrue ( f1.equals ( f2 )  ) ;^48^^^^^33^63^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^assertTrue ( f1.getClass (  )  == f2.getClass (  )  ) ;assertTrue ( f1.equals ( f2 )  ) ;^48^^^^^33^63^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertTrue ( f1.equals ( f2 )  ) ;^48^^^^^33^63^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^assertFalse ( f1.equals ( f2 )  ) ;assertTrue ( f1.equals ( f2 )  ) ;^48^^^^^33^63^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^assertTrue ( f1 != f2 ) ;assertTrue ( f1.equals ( f2 )  ) ;^48^^^^^33^63^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P5_Replace_Variable]^f1.setBackgroundPaint ( new GradientPaint ( 1.0f, 2.0f, Color. 3.0f, 4.0f, Color.yellow )  ) ;^51^52^^^^36^66^f1.setBackgroundPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.yellow )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P8_Replace_Mix]^f1.setBackgroundPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.1 )  ) ;^51^52^^^^36^66^f1.setBackgroundPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.yellow )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P14_Delete_Statement]^^51^52^^^^36^66^f1.setBackgroundPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.yellow )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P5_Replace_Variable]^assertFalse ( f2.equals ( f1 )  ) ;^53^^^^^38^68^assertFalse ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P7_Replace_Invocation]^assertEquals ( f1.equals ( f2 )  ) ;^53^^^^^38^68^assertFalse ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P14_Delete_Statement]^^53^^^^^38^68^assertFalse ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^assertTrue ( f1.equals ( f2 )  ) ;assertFalse ( f1.equals ( f2 )  ) ;^53^^^^^38^68^assertFalse ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^assertEquals ( f1, f2 ) ;assertFalse ( f1.equals ( f2 )  ) ;^53^^^^^38^68^assertFalse ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertFalse ( f1.equals ( f2 )  ) ;^53^^^^^38^68^assertFalse ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^assertTrue ( f1 != f2 ) ;assertFalse ( f1.equals ( f2 )  ) ;^53^^^^^38^68^assertFalse ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P7_Replace_Invocation]^assertFalse ( f1 .getClass (  )   ) ;^53^^^^^38^68^assertFalse ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P5_Replace_Variable]^f2.setBackgroundPaint ( new GradientPaint ( 1.0f, 2.0f, Color. 3.0f, 4.0f, Color.yellow )  ) ;^54^55^^^^39^69^f2.setBackgroundPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.yellow )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P8_Replace_Mix]^f2.setBackgroundPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.0 )  ) ;^54^55^^^^39^69^f2.setBackgroundPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.yellow )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P14_Delete_Statement]^^54^55^^^^39^69^f2.setBackgroundPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.yellow )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P5_Replace_Variable]^assertTrue ( f2.equals ( f1 )  ) ;^56^^^^^41^71^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P7_Replace_Invocation]^assertEquals ( f1.equals ( f2 )  ) ;^56^^^^^41^71^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P14_Delete_Statement]^^56^^^^^41^71^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^assertEquals ( f1, f2 ) ;assertTrue ( f1.equals ( f2 )  ) ;^56^^^^^41^71^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^assertTrue ( f1.getClass (  )  == f2.getClass (  )  ) ;assertTrue ( f1.equals ( f2 )  ) ;^56^^^^^41^71^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertTrue ( f1.equals ( f2 )  ) ;^56^^^^^41^71^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^assertFalse ( f1.equals ( f2 )  ) ;assertTrue ( f1.equals ( f2 )  ) ;^56^^^^^41^71^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^assertTrue ( f1 != f2 ) ;assertTrue ( f1.equals ( f2 )  ) ;^56^^^^^41^71^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P8_Replace_Mix]^assertTrue ( f1 .getClass (  )   ) ;^56^^^^^41^71^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P3_Replace_Literal]^f1.setoregroundPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.yellow )  ) ;^59^60^^^^44^74^f1.setForegroundPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.yellow )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P5_Replace_Variable]^f1.setForegroundPaint ( new GradientPaint ( 1.0f, 2.0f, Color. 3.0f, 4.0f, Color.yellow )  ) ;^59^60^^^^44^74^f1.setForegroundPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.yellow )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P14_Delete_Statement]^^59^60^^^^44^74^f1.setForegroundPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.yellow )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P5_Replace_Variable]^assertFalse ( f2.equals ( f1 )  ) ;^61^^^^^46^76^assertFalse ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P7_Replace_Invocation]^assertEquals ( f1.equals ( f2 )  ) ;^61^^^^^46^76^assertFalse ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P14_Delete_Statement]^^61^^^^^46^76^assertFalse ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^assertTrue ( f1.equals ( f2 )  ) ;assertFalse ( f1.equals ( f2 )  ) ;^61^^^^^46^76^assertFalse ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^assertEquals ( f1, f2 ) ;assertFalse ( f1.equals ( f2 )  ) ;^61^^^^^46^76^assertFalse ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertFalse ( f1.equals ( f2 )  ) ;^61^^^^^46^76^assertFalse ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^assertTrue ( f1 != f2 ) ;assertFalse ( f1.equals ( f2 )  ) ;^61^^^^^46^76^assertFalse ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P3_Replace_Literal]^f2.setoregroundPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.yellow )  ) ;^62^63^^^^47^77^f2.setForegroundPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.yellow )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P5_Replace_Variable]^f2.setForegroundPaint ( new GradientPaint ( 1.0f, 2.0f, Color. 3.0f, 4.0f, Color.yellow )  ) ;^62^63^^^^47^77^f2.setForegroundPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.yellow )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P14_Delete_Statement]^^62^63^^^^47^77^f2.setForegroundPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.yellow )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P5_Replace_Variable]^assertTrue ( f2.equals ( f1 )  ) ;^64^^^^^49^79^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P7_Replace_Invocation]^assertEquals ( f1.equals ( f2 )  ) ;^64^^^^^49^79^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P7_Replace_Invocation]^assertTrue ( f1 .getClass (  )   ) ;^64^^^^^49^79^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P14_Delete_Statement]^^64^^^^^49^79^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^assertEquals ( f1, f2 ) ;assertTrue ( f1.equals ( f2 )  ) ;^64^^^^^49^79^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^assertTrue ( f1.getClass (  )  == f2.getClass (  )  ) ;assertTrue ( f1.equals ( f2 )  ) ;^64^^^^^49^79^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertTrue ( f1.equals ( f2 )  ) ;^64^^^^^49^79^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^assertFalse ( f1.equals ( f2 )  ) ;assertTrue ( f1.equals ( f2 )  ) ;^64^^^^^49^79^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^assertTrue ( f1 != f2 ) ;assertTrue ( f1.equals ( f2 )  ) ;^64^^^^^49^79^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P14_Delete_Statement]^^67^68^^^^52^82^f1.setStroke ( new BasicStroke ( 1.1f )  ) ; assertFalse ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P5_Replace_Variable]^assertFalse ( f2.equals ( f1 )  ) ;^68^^^^^53^83^assertFalse ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P7_Replace_Invocation]^assertEquals ( f1.equals ( f2 )  ) ;^68^^^^^53^83^assertFalse ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P7_Replace_Invocation]^assertFalse ( f1 .getClass (  )   ) ;^68^^^^^53^83^assertFalse ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P14_Delete_Statement]^^68^69^^^^53^83^assertFalse ( f1.equals ( f2 )  ) ; f2.setStroke ( new BasicStroke ( 1.1f )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^assertTrue ( f1.equals ( f2 )  ) ;assertFalse ( f1.equals ( f2 )  ) ;^68^^^^^53^83^assertFalse ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^assertEquals ( f1, f2 ) ;assertFalse ( f1.equals ( f2 )  ) ;^68^^^^^53^83^assertFalse ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertFalse ( f1.equals ( f2 )  ) ;^68^^^^^53^83^assertFalse ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^assertTrue ( f1 != f2 ) ;assertFalse ( f1.equals ( f2 )  ) ;^68^^^^^53^83^assertFalse ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P14_Delete_Statement]^^68^^^^^53^83^assertFalse ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P14_Delete_Statement]^^69^70^^^^54^84^f2.setStroke ( new BasicStroke ( 1.1f )  ) ; assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P5_Replace_Variable]^assertTrue ( f2.equals ( f1 )  ) ;^70^^^^^55^85^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P7_Replace_Invocation]^assertEquals ( f1.equals ( f2 )  ) ;^70^^^^^55^85^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P14_Delete_Statement]^^70^^^^^55^85^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^assertEquals ( f1, f2 ) ;assertTrue ( f1.equals ( f2 )  ) ;^70^^^^^55^85^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^assertTrue ( f1.getClass (  )  == f2.getClass (  )  ) ;assertTrue ( f1.equals ( f2 )  ) ;^70^^^^^55^85^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertTrue ( f1.equals ( f2 )  ) ;^70^^^^^55^85^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^assertFalse ( f1.equals ( f2 )  ) ;assertTrue ( f1.equals ( f2 )  ) ;^70^^^^^55^85^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^assertTrue ( f1 != f2 ) ;assertTrue ( f1.equals ( f2 )  ) ;^70^^^^^55^85^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P7_Replace_Invocation]^assertTrue ( f1 .getClass (  )   ) ;^70^^^^^55^85^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P3_Replace_Literal]^f1.setInnerRadius ( 0.018333333333333333 ) ;^73^^^^^58^88^f1.setInnerRadius ( 0.11 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P14_Delete_Statement]^^73^74^^^^58^88^f1.setInnerRadius ( 0.11 ) ; assertFalse ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^f2.setOuterRadius ( 0.88 ) ;f1.setInnerRadius ( 0.11 ) ;^73^^^^^58^88^f1.setInnerRadius ( 0.11 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^f2.setInnerRadius ( 0.11 ) ;f1.setInnerRadius ( 0.11 ) ;^73^^^^^58^88^f1.setInnerRadius ( 0.11 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^f1.setOuterRadius ( 0.88 ) ;f1.setInnerRadius ( 0.11 ) ;^73^^^^^58^88^f1.setInnerRadius ( 0.11 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^f1.setStartAngle ( 99 ) ;f1.setInnerRadius ( 0.11 ) ;^73^^^^^58^88^f1.setInnerRadius ( 0.11 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P5_Replace_Variable]^assertFalse ( f2.equals ( f1 )  ) ;^74^^^^^59^89^assertFalse ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P7_Replace_Invocation]^assertEquals ( f1.equals ( f2 )  ) ;^74^^^^^59^89^assertFalse ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P8_Replace_Mix]^assertFalse ( f1 .getClass (  )   ) ;^74^^^^^59^89^assertFalse ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P14_Delete_Statement]^^74^75^^^^59^89^assertFalse ( f1.equals ( f2 )  ) ; f2.setInnerRadius ( 0.11 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^assertTrue ( f1.equals ( f2 )  ) ;assertFalse ( f1.equals ( f2 )  ) ;^74^^^^^59^89^assertFalse ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^assertEquals ( f1, f2 ) ;assertFalse ( f1.equals ( f2 )  ) ;^74^^^^^59^89^assertFalse ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertFalse ( f1.equals ( f2 )  ) ;^74^^^^^59^89^assertFalse ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^assertTrue ( f1 != f2 ) ;assertFalse ( f1.equals ( f2 )  ) ;^74^^^^^59^89^assertFalse ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P14_Delete_Statement]^^74^^^^^59^89^assertFalse ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P14_Delete_Statement]^^75^^^^^60^90^f2.setInnerRadius ( 0.11 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^f2.setOuterRadius ( 0.88 ) ;f2.setInnerRadius ( 0.11 ) ;^75^^^^^60^90^f2.setInnerRadius ( 0.11 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^f1.setInnerRadius ( 0.11 ) ;f2.setInnerRadius ( 0.11 ) ;^75^^^^^60^90^f2.setInnerRadius ( 0.11 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^f2.setStartAngle ( 99 ) ;f2.setInnerRadius ( 0.11 ) ;^75^^^^^60^90^f2.setInnerRadius ( 0.11 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^f1.setOuterRadius ( 0.88 ) ;f2.setInnerRadius ( 0.11 ) ;^75^^^^^60^90^f2.setInnerRadius ( 0.11 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P5_Replace_Variable]^assertTrue ( f2.equals ( f1 )  ) ;^76^^^^^61^91^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P7_Replace_Invocation]^assertEquals ( f1.equals ( f2 )  ) ;^76^^^^^61^91^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P7_Replace_Invocation]^assertTrue ( f1 .getClass (  )   ) ;^76^^^^^61^91^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P14_Delete_Statement]^^76^^^^^61^91^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^assertEquals ( f1, f2 ) ;assertTrue ( f1.equals ( f2 )  ) ;^76^^^^^61^91^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^assertTrue ( f1.getClass (  )  == f2.getClass (  )  ) ;assertTrue ( f1.equals ( f2 )  ) ;^76^^^^^61^91^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertTrue ( f1.equals ( f2 )  ) ;^76^^^^^61^91^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^assertFalse ( f1.equals ( f2 )  ) ;assertTrue ( f1.equals ( f2 )  ) ;^76^^^^^61^91^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^assertTrue ( f1 != f2 ) ;assertTrue ( f1.equals ( f2 )  ) ;^76^^^^^61^91^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P3_Replace_Literal]^f1.setOuterRadius ( 0.11 ) ;^79^^^^^64^94^f1.setOuterRadius ( 0.88 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P14_Delete_Statement]^^79^80^^^^64^94^f1.setOuterRadius ( 0.88 ) ; assertFalse ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^f1.setExtent ( 33 ) ;f1.setOuterRadius ( 0.88 ) ;^79^^^^^64^94^f1.setOuterRadius ( 0.88 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^f2.setOuterRadius ( 0.88 ) ;f1.setOuterRadius ( 0.88 ) ;^79^^^^^64^94^f1.setOuterRadius ( 0.88 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^f1.setInnerRadius ( 0.11 ) ;f1.setOuterRadius ( 0.88 ) ;^79^^^^^64^94^f1.setOuterRadius ( 0.88 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^f2.setStartAngle ( 99 ) ;f1.setOuterRadius ( 0.88 ) ;^79^^^^^64^94^f1.setOuterRadius ( 0.88 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^f2.setInnerRadius ( 0.11 ) ;f1.setOuterRadius ( 0.88 ) ;^79^^^^^64^94^f1.setOuterRadius ( 0.88 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^f1.setStartAngle ( 99 ) ;f1.setOuterRadius ( 0.88 ) ;^79^^^^^64^94^f1.setOuterRadius ( 0.88 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P5_Replace_Variable]^assertFalse ( f2.equals ( f1 )  ) ;^80^^^^^65^95^assertFalse ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P7_Replace_Invocation]^assertEquals ( f1.equals ( f2 )  ) ;^80^^^^^65^95^assertFalse ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P14_Delete_Statement]^^80^81^^^^65^95^assertFalse ( f1.equals ( f2 )  ) ; f2.setOuterRadius ( 0.88 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^assertTrue ( f1.equals ( f2 )  ) ;assertFalse ( f1.equals ( f2 )  ) ;^80^^^^^65^95^assertFalse ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^assertEquals ( f1, f2 ) ;assertFalse ( f1.equals ( f2 )  ) ;^80^^^^^65^95^assertFalse ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertFalse ( f1.equals ( f2 )  ) ;^80^^^^^65^95^assertFalse ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^assertTrue ( f1 != f2 ) ;assertFalse ( f1.equals ( f2 )  ) ;^80^^^^^65^95^assertFalse ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P3_Replace_Literal]^f2.setOuterRadius ( 0.29333333333333333 ) ;^81^^^^^66^96^f2.setOuterRadius ( 0.88 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P14_Delete_Statement]^^81^82^^^^66^96^f2.setOuterRadius ( 0.88 ) ; assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^f1.setInnerRadius ( 0.11 ) ;f2.setOuterRadius ( 0.88 ) ;^81^^^^^66^96^f2.setOuterRadius ( 0.88 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^f2.setExtent ( 33 ) ;f2.setOuterRadius ( 0.88 ) ;^81^^^^^66^96^f2.setOuterRadius ( 0.88 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^f2.setStartAngle ( 99 ) ;f2.setOuterRadius ( 0.88 ) ;^81^^^^^66^96^f2.setOuterRadius ( 0.88 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^f2.setInnerRadius ( 0.11 ) ;f2.setOuterRadius ( 0.88 ) ;^81^^^^^66^96^f2.setOuterRadius ( 0.88 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^f1.setOuterRadius ( 0.88 ) ;f2.setOuterRadius ( 0.88 ) ;^81^^^^^66^96^f2.setOuterRadius ( 0.88 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^f1.setStartAngle ( 99 ) ;f2.setOuterRadius ( 0.88 ) ;^81^^^^^66^96^f2.setOuterRadius ( 0.88 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P5_Replace_Variable]^assertTrue ( f2.equals ( f1 )  ) ;^82^^^^^67^97^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P7_Replace_Invocation]^assertEquals ( f1.equals ( f2 )  ) ;^82^^^^^67^97^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P7_Replace_Invocation]^assertTrue ( f1 .getClass (  )   ) ;^82^^^^^67^97^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P14_Delete_Statement]^^82^^^^^67^97^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^assertEquals ( f1, f2 ) ;assertTrue ( f1.equals ( f2 )  ) ;^82^^^^^67^97^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^assertTrue ( f1.getClass (  )  == f2.getClass (  )  ) ;assertTrue ( f1.equals ( f2 )  ) ;^82^^^^^67^97^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertTrue ( f1.equals ( f2 )  ) ;^82^^^^^67^97^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^assertFalse ( f1.equals ( f2 )  ) ;assertTrue ( f1.equals ( f2 )  ) ;^82^^^^^67^97^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^assertTrue ( f1 != f2 ) ;assertTrue ( f1.equals ( f2 )  ) ;^82^^^^^67^97^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P3_Replace_Literal]^f1.setStartAngle ( 100 ) ;^85^^^^^70^100^f1.setStartAngle ( 99 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P14_Delete_Statement]^^85^^^^^70^100^f1.setStartAngle ( 99 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^f1.setExtent ( 33 ) ;f1.setStartAngle ( 99 ) ;^85^^^^^70^100^f1.setStartAngle ( 99 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^f2.setOuterRadius ( 0.88 ) ;f1.setStartAngle ( 99 ) ;^85^^^^^70^100^f1.setStartAngle ( 99 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^f1.setInnerRadius ( 0.11 ) ;f1.setStartAngle ( 99 ) ;^85^^^^^70^100^f1.setStartAngle ( 99 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^f2.setExtent ( 33 ) ;f1.setStartAngle ( 99 ) ;^85^^^^^70^100^f1.setStartAngle ( 99 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^f2.setStartAngle ( 99 ) ;f1.setStartAngle ( 99 ) ;^85^^^^^70^100^f1.setStartAngle ( 99 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^f1.setOuterRadius ( 0.88 ) ;f1.setStartAngle ( 99 ) ;^85^^^^^70^100^f1.setStartAngle ( 99 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P5_Replace_Variable]^assertFalse ( f2.equals ( f1 )  ) ;^86^^^^^71^101^assertFalse ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P7_Replace_Invocation]^assertEquals ( f1.equals ( f2 )  ) ;^86^^^^^71^101^assertFalse ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P7_Replace_Invocation]^assertFalse ( f1 .getClass (  )   ) ;^86^^^^^71^101^assertFalse ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P14_Delete_Statement]^^86^^^^^71^101^assertFalse ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^assertTrue ( f1.equals ( f2 )  ) ;assertFalse ( f1.equals ( f2 )  ) ;^86^^^^^71^101^assertFalse ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^assertEquals ( f1, f2 ) ;assertFalse ( f1.equals ( f2 )  ) ;^86^^^^^71^101^assertFalse ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertFalse ( f1.equals ( f2 )  ) ;^86^^^^^71^101^assertFalse ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^assertTrue ( f1 != f2 ) ;assertFalse ( f1.equals ( f2 )  ) ;^86^^^^^71^101^assertFalse ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P3_Replace_Literal]^f2.setStartAngle ( 95 ) ;^87^^^^^72^102^f2.setStartAngle ( 99 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P14_Delete_Statement]^^87^88^^^^72^102^f2.setStartAngle ( 99 ) ; assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^f1.setExtent ( 33 ) ;f2.setStartAngle ( 99 ) ;^87^^^^^72^102^f2.setStartAngle ( 99 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^f2.setOuterRadius ( 0.88 ) ;f2.setStartAngle ( 99 ) ;^87^^^^^72^102^f2.setStartAngle ( 99 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^f2.setExtent ( 33 ) ;f2.setStartAngle ( 99 ) ;^87^^^^^72^102^f2.setStartAngle ( 99 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^f2.setInnerRadius ( 0.11 ) ;f2.setStartAngle ( 99 ) ;^87^^^^^72^102^f2.setStartAngle ( 99 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^f1.setOuterRadius ( 0.88 ) ;f2.setStartAngle ( 99 ) ;^87^^^^^72^102^f2.setStartAngle ( 99 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^f1.setStartAngle ( 99 ) ;f2.setStartAngle ( 99 ) ;^87^^^^^72^102^f2.setStartAngle ( 99 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P5_Replace_Variable]^assertTrue ( f2.equals ( f1 )  ) ;^88^^^^^73^103^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P7_Replace_Invocation]^assertEquals ( f1.equals ( f2 )  ) ;^88^^^^^73^103^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P14_Delete_Statement]^^88^^^^^73^103^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^assertEquals ( f1, f2 ) ;assertTrue ( f1.equals ( f2 )  ) ;^88^^^^^73^103^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^assertTrue ( f1.getClass (  )  == f2.getClass (  )  ) ;assertTrue ( f1.equals ( f2 )  ) ;^88^^^^^73^103^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertTrue ( f1.equals ( f2 )  ) ;^88^^^^^73^103^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^assertFalse ( f1.equals ( f2 )  ) ;assertTrue ( f1.equals ( f2 )  ) ;^88^^^^^73^103^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^assertTrue ( f1 != f2 ) ;assertTrue ( f1.equals ( f2 )  ) ;^88^^^^^73^103^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P3_Replace_Literal]^f1.setExtent ( 42 ) ;^91^^^^^76^106^f1.setExtent ( 33 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P14_Delete_Statement]^^91^92^^^^76^106^f1.setExtent ( 33 ) ; assertFalse ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^f2.setExtent ( 33 ) ;f1.setExtent ( 33 ) ;^91^^^^^76^106^f1.setExtent ( 33 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^f2.setStartAngle ( 99 ) ;f1.setExtent ( 33 ) ;^91^^^^^76^106^f1.setExtent ( 33 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^f1.setOuterRadius ( 0.88 ) ;f1.setExtent ( 33 ) ;^91^^^^^76^106^f1.setExtent ( 33 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^f1.setStartAngle ( 99 ) ;f1.setExtent ( 33 ) ;^91^^^^^76^106^f1.setExtent ( 33 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P5_Replace_Variable]^assertFalse ( f2.equals ( f1 )  ) ;^92^^^^^77^107^assertFalse ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P7_Replace_Invocation]^assertEquals ( f1.equals ( f2 )  ) ;^92^^^^^77^107^assertFalse ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P14_Delete_Statement]^^92^^^^^77^107^assertFalse ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^assertTrue ( f1.equals ( f2 )  ) ;assertFalse ( f1.equals ( f2 )  ) ;^92^^^^^77^107^assertFalse ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^assertEquals ( f1, f2 ) ;assertFalse ( f1.equals ( f2 )  ) ;^92^^^^^77^107^assertFalse ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertFalse ( f1.equals ( f2 )  ) ;^92^^^^^77^107^assertFalse ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^assertTrue ( f1 != f2 ) ;assertFalse ( f1.equals ( f2 )  ) ;^92^^^^^77^107^assertFalse ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P7_Replace_Invocation]^assertFalse ( f1 .getClass (  )   ) ;^92^^^^^77^107^assertFalse ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P3_Replace_Literal]^f2.setExtent ( 28 ) ;^93^^^^^78^108^f2.setExtent ( 33 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P7_Replace_Invocation]^f2 .setStartAngle ( this )  ;^93^^^^^78^108^f2.setExtent ( 33 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P14_Delete_Statement]^^93^94^^^^78^108^f2.setExtent ( 33 ) ; assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^f1.setExtent ( 33 ) ;f2.setExtent ( 33 ) ;^93^^^^^78^108^f2.setExtent ( 33 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^f2.setOuterRadius ( 0.88 ) ;f2.setExtent ( 33 ) ;^93^^^^^78^108^f2.setExtent ( 33 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^f2.setStartAngle ( 99 ) ;f2.setExtent ( 33 ) ;^93^^^^^78^108^f2.setExtent ( 33 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^f1.setStartAngle ( 99 ) ;f2.setExtent ( 33 ) ;^93^^^^^78^108^f2.setExtent ( 33 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P5_Replace_Variable]^assertTrue ( f2.equals ( f1 )  ) ;^94^^^^^79^109^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P7_Replace_Invocation]^assertEquals ( f1.equals ( f2 )  ) ;^94^^^^^79^109^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P14_Delete_Statement]^^94^^^^^79^109^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^assertEquals ( f1, f2 ) ;assertTrue ( f1.equals ( f2 )  ) ;^94^^^^^79^109^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^assertTrue ( f1.getClass (  )  == f2.getClass (  )  ) ;assertTrue ( f1.equals ( f2 )  ) ;^94^^^^^79^109^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertTrue ( f1.equals ( f2 )  ) ;^94^^^^^79^109^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^assertFalse ( f1.equals ( f2 )  ) ;assertTrue ( f1.equals ( f2 )  ) ;^94^^^^^79^109^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^assertTrue ( f1 != f2 ) ;assertTrue ( f1.equals ( f2 )  ) ;^94^^^^^79^109^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P8_Replace_Mix]^assertTrue ( f1 .getClass (  )   ) ;^94^^^^^79^109^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  
[P11_Insert_Donor_Statement]^StandardDialFrame f2 = new StandardDialFrame (  ) ;StandardDialFrame f1 = new StandardDialFrame (  ) ;^102^^^^^101^108^StandardDialFrame f1 = new StandardDialFrame (  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  int  h1  h2  
[P11_Insert_Donor_Statement]^StandardDialFrame f1 = new StandardDialFrame (  ) ;StandardDialFrame f2 = new StandardDialFrame (  ) ;^103^^^^^101^108^StandardDialFrame f2 = new StandardDialFrame (  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  int  h1  h2  
[P11_Insert_Donor_Statement]^StandardDialFrame f2 = null;StandardDialFrame f2 = new StandardDialFrame (  ) ;^103^^^^^101^108^StandardDialFrame f2 = new StandardDialFrame (  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  int  h1  h2  
[P5_Replace_Variable]^assertTrue ( f2.equals ( f1 )  ) ;^104^^^^^101^108^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  int  h1  h2  
[P7_Replace_Invocation]^assertEquals ( f1.equals ( f2 )  ) ;^104^^^^^101^108^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  int  h1  h2  
[P7_Replace_Invocation]^assertTrue ( f1 .getClass (  )   ) ;^104^^^^^101^108^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  int  h1  h2  
[P14_Delete_Statement]^^104^105^^^^101^108^assertTrue ( f1.equals ( f2 )  ) ; int h1 = f1.hashCode (  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  int  h1  h2  
[P11_Insert_Donor_Statement]^assertEquals ( f1, f2 ) ;assertTrue ( f1.equals ( f2 )  ) ;^104^^^^^101^108^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  int  h1  h2  
[P11_Insert_Donor_Statement]^assertTrue ( f1.getClass (  )  == f2.getClass (  )  ) ;assertTrue ( f1.equals ( f2 )  ) ;^104^^^^^101^108^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  int  h1  h2  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertTrue ( f1.equals ( f2 )  ) ;^104^^^^^101^108^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  int  h1  h2  
[P11_Insert_Donor_Statement]^assertFalse ( f1.equals ( f2 )  ) ;assertTrue ( f1.equals ( f2 )  ) ;^104^^^^^101^108^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  int  h1  h2  
[P11_Insert_Donor_Statement]^assertTrue ( f1 != f2 ) ;assertTrue ( f1.equals ( f2 )  ) ;^104^^^^^101^108^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  int  h1  h2  
[P1_Replace_Type]^short  h1 = f1.hashCode (  ) ;^105^^^^^101^108^int h1 = f1.hashCode (  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  int  h1  h2  
[P5_Replace_Variable]^int h1 = f2.hashCode (  ) ;^105^^^^^101^108^int h1 = f1.hashCode (  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  int  h1  h2  
[P7_Replace_Invocation]^int h1 = f1.setExtent (  ) ;^105^^^^^101^108^int h1 = f1.hashCode (  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  int  h1  h2  
[P11_Insert_Donor_Statement]^int h2 = f2.hashCode (  ) ;int h1 = f1.hashCode (  ) ;^105^^^^^101^108^int h1 = f1.hashCode (  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  int  h1  h2  
[P8_Replace_Mix]^int h1 = f2.setExtent (  ) ;^105^^^^^101^108^int h1 = f1.hashCode (  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  int  h1  h2  
[P14_Delete_Statement]^^105^106^^^^101^108^int h1 = f1.hashCode (  ) ; int h2 = f2.hashCode (  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  int  h1  h2  
[P1_Replace_Type]^long  h2 = f2.hashCode (  ) ;^106^^^^^101^108^int h2 = f2.hashCode (  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  int  h1  h2  
[P5_Replace_Variable]^int h2 = f1.hashCode (  ) ;^106^^^^^101^108^int h2 = f2.hashCode (  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  int  h1  h2  
[P7_Replace_Invocation]^int h2 = f2.setExtent (  ) ;^106^^^^^101^108^int h2 = f2.hashCode (  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  int  h1  h2  
[P11_Insert_Donor_Statement]^int h1 = f1.hashCode (  ) ;int h2 = f2.hashCode (  ) ;^106^^^^^101^108^int h2 = f2.hashCode (  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  int  h1  h2  
[P14_Delete_Statement]^^106^^^^^101^108^int h2 = f2.hashCode (  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  int  h1  h2  
[P5_Replace_Variable]^assertEquals (  h2 ) ;^107^^^^^101^108^assertEquals ( h1, h2 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  int  h1  h2  
[P5_Replace_Variable]^assertEquals ( h1 ) ;^107^^^^^101^108^assertEquals ( h1, h2 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  int  h1  h2  
[P5_Replace_Variable]^assertEquals ( h2, h1 ) ;^107^^^^^101^108^assertEquals ( h1, h2 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  int  h1  h2  
[P14_Delete_Statement]^^107^^^^^101^108^assertEquals ( h1, h2 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  int  h1  h2  
[P11_Insert_Donor_Statement]^assertTrue ( f1.equals ( f2 )  ) ;assertEquals ( h1, h2 ) ;^107^^^^^101^108^assertEquals ( h1, h2 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  int  h1  h2  
[P11_Insert_Donor_Statement]^assertEquals ( f1, f2 ) ;assertEquals ( h1, h2 ) ;^107^^^^^101^108^assertEquals ( h1, h2 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  int  h1  h2  
[P11_Insert_Donor_Statement]^assertFalse ( f1.equals ( f2 )  ) ;assertEquals ( h1, h2 ) ;^107^^^^^101^108^assertEquals ( h1, h2 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  int  h1  h2  
[P11_Insert_Donor_Statement]^assertTrue ( f1 != f2 ) ;assertEquals ( h1, h2 ) ;^107^^^^^101^108^assertEquals ( h1, h2 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  int  h1  h2  
[P11_Insert_Donor_Statement]^StandardDialFrame f2 = new StandardDialFrame (  ) ;StandardDialFrame f1 = new StandardDialFrame (  ) ;^114^^^^^113^125^StandardDialFrame f1 = new StandardDialFrame (  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^StandardDialFrame f2 = new StandardDialFrame (  ) ;StandardDialFrame f2 = null;^115^^^^^113^125^StandardDialFrame f2 = null;^[CLASS] StandardDialFrameTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  CloneNotSupportedException  e  
[P5_Replace_Variable]^f2 =  ( StandardDialFrame )  f2.clone (  ) ;^117^^^^^113^125^f2 =  ( StandardDialFrame )  f1.clone (  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  CloneNotSupportedException  e  
[P7_Replace_Invocation]^f2 =  ( StandardDialFrame )  f1.setExtent (  ) ;^117^^^^^113^125^f2 =  ( StandardDialFrame )  f1.clone (  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  CloneNotSupportedException  e  
[P8_Replace_Mix]^f2 =   ( StandardDialFrame )  null.clone (  ) ;^117^^^^^113^125^f2 =  ( StandardDialFrame )  f1.clone (  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^f2 =  ( StandardDialFrame )  in.readObject (  ) ;f2 =  ( StandardDialFrame )  f1.clone (  ) ;^117^^^^^113^125^f2 =  ( StandardDialFrame )  f1.clone (  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  CloneNotSupportedException  e  
[P7_Replace_Invocation]^f2 =  ( StandardDialFrame )  f1 .hashCode (  )  ;^117^^^^^113^125^f2 =  ( StandardDialFrame )  f1.clone (  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  CloneNotSupportedException  e  
[P14_Delete_Statement]^^117^^^^^113^125^f2 =  ( StandardDialFrame )  f1.clone (  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  CloneNotSupportedException  e  
[P14_Delete_Statement]^^120^^^^^113^125^e.printStackTrace (  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  CloneNotSupportedException  e  
[P2_Replace_Operator]^assertTrue ( f1 == f2 ) ;^122^^^^^113^125^assertTrue ( f1 != f2 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  CloneNotSupportedException  e  
[P5_Replace_Variable]^assertTrue ( f2 != f1 ) ;^122^^^^^113^125^assertTrue ( f1 != f2 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  CloneNotSupportedException  e  
[P7_Replace_Invocation]^assertEquals ( f1 != f2 ) ;^122^^^^^113^125^assertTrue ( f1 != f2 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  CloneNotSupportedException  e  
[P14_Delete_Statement]^^122^^^^^113^125^assertTrue ( f1 != f2 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertTrue ( f1.equals ( f2 )  ) ;assertTrue ( f1 != f2 ) ;^122^^^^^113^125^assertTrue ( f1 != f2 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertEquals ( f1, f2 ) ;assertTrue ( f1 != f2 ) ;^122^^^^^113^125^assertTrue ( f1 != f2 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertTrue ( f1 != f2 ) ;^122^^^^^113^125^assertTrue ( f1 != f2 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertFalse ( f1.equals ( f2 )  ) ;assertTrue ( f1 != f2 ) ;^122^^^^^113^125^assertTrue ( f1 != f2 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  CloneNotSupportedException  e  
[P2_Replace_Operator]^assertTrue ( f1.getClass (  )  != f2.getClass (  )  ) ;^123^^^^^113^125^assertTrue ( f1.getClass (  )  == f2.getClass (  )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  CloneNotSupportedException  e  
[P5_Replace_Variable]^assertTrue ( f2.getClass (  )  == f1.getClass (  )  ) ;^123^^^^^113^125^assertTrue ( f1.getClass (  )  == f2.getClass (  )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  CloneNotSupportedException  e  
[P7_Replace_Invocation]^assertEquals ( f1.getClass (  )  == f2.getClass (  )  ) ;^123^^^^^113^125^assertTrue ( f1.getClass (  )  == f2.getClass (  )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  CloneNotSupportedException  e  
[P7_Replace_Invocation]^assertTrue ( f1.setExtent (  )  == f2.getClass (  )  ) ;^123^^^^^113^125^assertTrue ( f1.getClass (  )  == f2.getClass (  )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  CloneNotSupportedException  e  
[P7_Replace_Invocation]^assertTrue ( f1 .equals ( f2 )   == f2^123^^^^^113^125^assertTrue ( f1.getClass (  )  == f2.getClass (  )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  CloneNotSupportedException  e  
[P14_Delete_Statement]^^123^124^^^^113^125^assertTrue ( f1.getClass (  )  == f2.getClass (  )  ) ; assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertTrue ( f1.equals ( f2 )  ) ;assertTrue ( f1.getClass (  )  == f2.getClass (  )  ) ;^123^^^^^113^125^assertTrue ( f1.getClass (  )  == f2.getClass (  )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  CloneNotSupportedException  e  
[P5_Replace_Variable]^assertTrue ( f2.getClass (  )  == f2.getClass (  )  ) ;^123^^^^^113^125^assertTrue ( f1.getClass (  )  == f2.getClass (  )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  CloneNotSupportedException  e  
[P8_Replace_Mix]^assertTrue ( f2.setExtent (  )  == f2.getClass (  )  ) ;^123^^^^^113^125^assertTrue ( f1.getClass (  )  == f2.getClass (  )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  CloneNotSupportedException  e  
[P14_Delete_Statement]^^123^^^^^113^125^assertTrue ( f1.getClass (  )  == f2.getClass (  )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  CloneNotSupportedException  e  
[P5_Replace_Variable]^assertTrue ( f1.getClass (  )  == f1.getClass (  )  ) ;^123^^^^^113^125^assertTrue ( f1.getClass (  )  == f2.getClass (  )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  CloneNotSupportedException  e  
[P5_Replace_Variable]^assertTrue ( f2.equals ( f1 )  ) ;^124^^^^^113^125^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  CloneNotSupportedException  e  
[P7_Replace_Invocation]^assertEquals ( f1.equals ( f2 )  ) ;^124^^^^^113^125^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  CloneNotSupportedException  e  
[P14_Delete_Statement]^^124^^^^^113^125^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertEquals ( f1, f2 ) ;assertTrue ( f1.equals ( f2 )  ) ;^124^^^^^113^125^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertTrue ( f1.getClass (  )  == f2.getClass (  )  ) ;assertTrue ( f1.equals ( f2 )  ) ;^124^^^^^113^125^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertTrue ( f1.equals ( f2 )  ) ;^124^^^^^113^125^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertFalse ( f1.equals ( f2 )  ) ;assertTrue ( f1.equals ( f2 )  ) ;^124^^^^^113^125^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertTrue ( f1 != f2 ) ;assertTrue ( f1.equals ( f2 )  ) ;^124^^^^^113^125^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  CloneNotSupportedException  e  
[P7_Replace_Invocation]^assertTrue ( f1 .getClass (  )   ) ;^124^^^^^113^125^assertTrue ( f1.equals ( f2 )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^StandardDialFrame f2 = new StandardDialFrame (  ) ;StandardDialFrame f1 = new StandardDialFrame (  ) ;^132^^^^^131^150^StandardDialFrame f1 = new StandardDialFrame (  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
[P11_Insert_Donor_Statement]^StandardDialFrame f2 = new StandardDialFrame (  ) ;StandardDialFrame f2 = null;^133^^^^^131^150^StandardDialFrame f2 = null;^[CLASS] StandardDialFrameTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
[P7_Replace_Invocation]^f2 =  ( StandardDialFrame )  in .close (  )  ;^143^^^^^131^150^f2 =  ( StandardDialFrame )  in.readObject (  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
[P8_Replace_Mix]^f2 =   ( StandardDialFrame )  null.readObject (  ) ;^143^^^^^131^150^f2 =  ( StandardDialFrame )  in.readObject (  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
[P11_Insert_Donor_Statement]^f2 =  ( StandardDialFrame )  f1.clone (  ) ;f2 =  ( StandardDialFrame )  in.readObject (  ) ;^143^^^^^131^150^f2 =  ( StandardDialFrame )  in.readObject (  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
[P7_Replace_Invocation]^ObjectInput in = new ObjectInputStream ( new ByteArrayInputStream ( buffer .ByteArrayOutputStream (  )   )  ) ;^141^142^^^^131^150^ObjectInput in = new ObjectInputStream ( new ByteArrayInputStream ( buffer.toByteArray (  )  )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
[P8_Replace_Mix]^new ByteArrayInputStream ( buffer .ByteArrayOutputStream (  )   )  ) ;^142^^^^^131^150^new ByteArrayInputStream ( buffer.toByteArray (  )  )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
[P5_Replace_Variable]^out.writeObject ( f2 ) ;^138^^^^^131^150^out.writeObject ( f1 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
[P7_Replace_Invocation]^out .close (  )  ;^138^^^^^131^150^out.writeObject ( f1 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
[P14_Delete_Statement]^^138^139^^^^131^150^out.writeObject ( f1 ) ; out.close (  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
[P11_Insert_Donor_Statement]^out.close (  ) ;out.writeObject ( f1 ) ;^138^^^^^131^150^out.writeObject ( f1 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
[P7_Replace_Invocation]^out.writeObject (  ) ;^139^^^^^131^150^out.close (  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
[P14_Delete_Statement]^^139^^^^^131^150^out.close (  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
[P11_Insert_Donor_Statement]^in.close (  ) ;out.close (  ) ;^139^^^^^131^150^out.close (  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
[P11_Insert_Donor_Statement]^out.writeObject ( f1 ) ;out.close (  ) ;^139^^^^^131^150^out.close (  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
[P14_Delete_Statement]^^142^143^^^^131^150^new ByteArrayInputStream ( buffer.toByteArray (  )  )  ) ; f2 =  ( StandardDialFrame )  in.readObject (  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
[P14_Delete_Statement]^^143^^^^^131^150^f2 =  ( StandardDialFrame )  in.readObject (  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
[P8_Replace_Mix]^in .writeObject ( 1 )  ;^144^^^^^131^150^in.close (  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
[P14_Delete_Statement]^^144^^^^^131^150^in.close (  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
[P11_Insert_Donor_Statement]^out.close (  ) ;in.close (  ) ;^144^^^^^131^150^in.close (  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
[P14_Delete_Statement]^^138^^^^^131^150^out.writeObject ( f1 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
[P14_Delete_Statement]^^142^^^^^131^150^new ByteArrayInputStream ( buffer.toByteArray (  )  )  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
[P14_Delete_Statement]^^143^144^^^^131^150^f2 =  ( StandardDialFrame )  in.readObject (  ) ; in.close (  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
[P14_Delete_Statement]^^147^^^^^131^150^e.printStackTrace (  ) ;^[CLASS] StandardDialFrameTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
[P5_Replace_Variable]^assertEquals (  f2 ) ;^149^^^^^131^150^assertEquals ( f1, f2 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
[P5_Replace_Variable]^assertEquals ( f1 ) ;^149^^^^^131^150^assertEquals ( f1, f2 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
[P5_Replace_Variable]^assertEquals ( f2, f1 ) ;^149^^^^^131^150^assertEquals ( f1, f2 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
[P14_Delete_Statement]^^149^^^^^131^150^assertEquals ( f1, f2 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
[P11_Insert_Donor_Statement]^assertTrue ( f1.equals ( f2 )  ) ;assertEquals ( f1, f2 ) ;^149^^^^^131^150^assertEquals ( f1, f2 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertEquals ( f1, f2 ) ;^149^^^^^131^150^assertEquals ( f1, f2 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
[P11_Insert_Donor_Statement]^assertFalse ( f1.equals ( f2 )  ) ;assertEquals ( f1, f2 ) ;^149^^^^^131^150^assertEquals ( f1, f2 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
[P11_Insert_Donor_Statement]^assertTrue ( f1 != f2 ) ;assertEquals ( f1, f2 ) ;^149^^^^^131^150^assertEquals ( f1, f2 ) ;^[CLASS] StandardDialFrameTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] StandardDialFrame  f1  f2  boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
