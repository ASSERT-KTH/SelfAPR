[P14_Delete_Statement]^^80^^^^^79^81^super ( name ) ;^[CLASS] StandardDialRangeTests  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] boolean  String  name  
[P8_Replace_Mix]^return new TestSuite ( StandardDialRangeTests.1 ) ;^71^^^^^70^72^return new TestSuite ( StandardDialRangeTests.class ) ;^[CLASS] StandardDialRangeTests  [METHOD] suite [RETURN_TYPE] Test   [VARIABLES] boolean  
[P11_Insert_Donor_Statement]^StandardDialRange r2 = new StandardDialRange (  ) ;StandardDialRange r1 = new StandardDialRange (  ) ;^87^^^^^72^102^StandardDialRange r1 = new StandardDialRange (  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^StandardDialRange r1 = new StandardDialRange (  ) ;StandardDialRange r2 = new StandardDialRange (  ) ;^88^^^^^73^103^StandardDialRange r2 = new StandardDialRange (  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^StandardDialRange r2 = null;StandardDialRange r2 = new StandardDialRange (  ) ;^88^^^^^73^103^StandardDialRange r2 = new StandardDialRange (  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P5_Replace_Variable]^assertTrue ( r2.equals ( r1 )  ) ;^89^^^^^74^104^assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P7_Replace_Invocation]^assertEquals ( r1.equals ( r2 )  ) ;^89^^^^^74^104^assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P8_Replace_Mix]^assertTrue ( r1 .getClass (  )   ) ;^89^^^^^74^104^assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P14_Delete_Statement]^^89^^^^^74^104^assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^assertTrue ( r1 != r2 ) ;assertTrue ( r1.equals ( r2 )  ) ;^89^^^^^74^104^assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^assertFalse ( r1.equals ( r2 )  ) ;assertTrue ( r1.equals ( r2 )  ) ;^89^^^^^74^104^assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^assertEquals ( r1, r2 ) ;assertTrue ( r1.equals ( r2 )  ) ;^89^^^^^74^104^assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertTrue ( r1.equals ( r2 )  ) ;^89^^^^^74^104^assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^assertTrue ( r1.getClass (  )  == r2.getClass (  )  ) ;assertTrue ( r1.equals ( r2 )  ) ;^89^^^^^74^104^assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P3_Replace_Literal]^r1.setLowerBound ( 4.4 ) ;^92^^^^^77^107^r1.setLowerBound ( 1.1 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P14_Delete_Statement]^^92^^^^^77^107^r1.setLowerBound ( 1.1 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^r2.setIncrement ( 1.5 ) ;r1.setLowerBound ( 1.1 ) ;^92^^^^^77^107^r1.setLowerBound ( 1.1 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^r1.setUpperBound ( 11.1 ) ;r1.setLowerBound ( 1.1 ) ;^92^^^^^77^107^r1.setLowerBound ( 1.1 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^r1.setIncrement ( 1.5 ) ;r1.setLowerBound ( 1.1 ) ;^92^^^^^77^107^r1.setLowerBound ( 1.1 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^r2.setUpperBound ( 11.1 ) ;r1.setLowerBound ( 1.1 ) ;^92^^^^^77^107^r1.setLowerBound ( 1.1 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^r2.setLowerBound ( 1.1 ) ;r1.setLowerBound ( 1.1 ) ;^92^^^^^77^107^r1.setLowerBound ( 1.1 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P5_Replace_Variable]^assertFalse ( r2.equals ( r1 )  ) ;^93^^^^^78^108^assertFalse ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P7_Replace_Invocation]^assertEquals ( r1.equals ( r2 )  ) ;^93^^^^^78^108^assertFalse ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P7_Replace_Invocation]^assertFalse ( r1 .getClass (  )   ) ;^93^^^^^78^108^assertFalse ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P14_Delete_Statement]^^93^^^^^78^108^assertFalse ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^assertTrue ( r1 != r2 ) ;assertFalse ( r1.equals ( r2 )  ) ;^93^^^^^78^108^assertFalse ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^assertEquals ( r1, r2 ) ;assertFalse ( r1.equals ( r2 )  ) ;^93^^^^^78^108^assertFalse ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^assertTrue ( r1.equals ( r2 )  ) ;assertFalse ( r1.equals ( r2 )  ) ;^93^^^^^78^108^assertFalse ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertFalse ( r1.equals ( r2 )  ) ;^93^^^^^78^108^assertFalse ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P14_Delete_Statement]^^94^95^^^^79^109^r2.setLowerBound ( 1.1 ) ; assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^r2.setIncrement ( 1.5 ) ;r2.setLowerBound ( 1.1 ) ;^94^^^^^79^109^r2.setLowerBound ( 1.1 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^r1.setUpperBound ( 11.1 ) ;r2.setLowerBound ( 1.1 ) ;^94^^^^^79^109^r2.setLowerBound ( 1.1 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^r1.setIncrement ( 1.5 ) ;r2.setLowerBound ( 1.1 ) ;^94^^^^^79^109^r2.setLowerBound ( 1.1 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^r1.setLowerBound ( 1.1 ) ;r2.setLowerBound ( 1.1 ) ;^94^^^^^79^109^r2.setLowerBound ( 1.1 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^r2.setUpperBound ( 11.1 ) ;r2.setLowerBound ( 1.1 ) ;^94^^^^^79^109^r2.setLowerBound ( 1.1 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P5_Replace_Variable]^assertTrue ( r2.equals ( r1 )  ) ;^95^^^^^80^110^assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P7_Replace_Invocation]^assertEquals ( r1.equals ( r2 )  ) ;^95^^^^^80^110^assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P14_Delete_Statement]^^95^^^^^80^110^assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^assertTrue ( r1 != r2 ) ;assertTrue ( r1.equals ( r2 )  ) ;^95^^^^^80^110^assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^assertFalse ( r1.equals ( r2 )  ) ;assertTrue ( r1.equals ( r2 )  ) ;^95^^^^^80^110^assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^assertEquals ( r1, r2 ) ;assertTrue ( r1.equals ( r2 )  ) ;^95^^^^^80^110^assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertTrue ( r1.equals ( r2 )  ) ;^95^^^^^80^110^assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^assertTrue ( r1.getClass (  )  == r2.getClass (  )  ) ;assertTrue ( r1.equals ( r2 )  ) ;^95^^^^^80^110^assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P3_Replace_Literal]^r1.setUpperBound ( 33.3 ) ;^98^^^^^83^113^r1.setUpperBound ( 11.1 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P7_Replace_Invocation]^r1 .setLowerBound ( null )  ;^98^^^^^83^113^r1.setUpperBound ( 11.1 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P14_Delete_Statement]^^98^^^^^83^113^r1.setUpperBound ( 11.1 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^r2.setIncrement ( 1.5 ) ;r1.setUpperBound ( 11.1 ) ;^98^^^^^83^113^r1.setUpperBound ( 11.1 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^r1.setIncrement ( 1.5 ) ;r1.setUpperBound ( 11.1 ) ;^98^^^^^83^113^r1.setUpperBound ( 11.1 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^r1.setLowerBound ( 1.1 ) ;r1.setUpperBound ( 11.1 ) ;^98^^^^^83^113^r1.setUpperBound ( 11.1 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^r2.setUpperBound ( 11.1 ) ;r1.setUpperBound ( 11.1 ) ;^98^^^^^83^113^r1.setUpperBound ( 11.1 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^r2.setLowerBound ( 1.1 ) ;r1.setUpperBound ( 11.1 ) ;^98^^^^^83^113^r1.setUpperBound ( 11.1 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P5_Replace_Variable]^assertFalse ( r2.equals ( r1 )  ) ;^99^^^^^84^114^assertFalse ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P7_Replace_Invocation]^assertEquals ( r1.equals ( r2 )  ) ;^99^^^^^84^114^assertFalse ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P7_Replace_Invocation]^assertFalse ( r1 .getClass (  )   ) ;^99^^^^^84^114^assertFalse ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P14_Delete_Statement]^^99^100^^^^84^114^assertFalse ( r1.equals ( r2 )  ) ; r2.setUpperBound ( 11.1 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^assertTrue ( r1 != r2 ) ;assertFalse ( r1.equals ( r2 )  ) ;^99^^^^^84^114^assertFalse ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^assertEquals ( r1, r2 ) ;assertFalse ( r1.equals ( r2 )  ) ;^99^^^^^84^114^assertFalse ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^assertTrue ( r1.equals ( r2 )  ) ;assertFalse ( r1.equals ( r2 )  ) ;^99^^^^^84^114^assertFalse ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertFalse ( r1.equals ( r2 )  ) ;^99^^^^^84^114^assertFalse ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P14_Delete_Statement]^^99^^^^^84^114^assertFalse ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P3_Replace_Literal]^r2.setUpperBound ( Infinity ) ;^100^^^^^85^115^r2.setUpperBound ( 11.1 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P14_Delete_Statement]^^100^101^^^^85^115^r2.setUpperBound ( 11.1 ) ; assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^r2.setIncrement ( 1.5 ) ;r2.setUpperBound ( 11.1 ) ;^100^^^^^85^115^r2.setUpperBound ( 11.1 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^r1.setUpperBound ( 11.1 ) ;r2.setUpperBound ( 11.1 ) ;^100^^^^^85^115^r2.setUpperBound ( 11.1 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^r1.setIncrement ( 1.5 ) ;r2.setUpperBound ( 11.1 ) ;^100^^^^^85^115^r2.setUpperBound ( 11.1 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^r1.setLowerBound ( 1.1 ) ;r2.setUpperBound ( 11.1 ) ;^100^^^^^85^115^r2.setUpperBound ( 11.1 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^r2.setLowerBound ( 1.1 ) ;r2.setUpperBound ( 11.1 ) ;^100^^^^^85^115^r2.setUpperBound ( 11.1 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P5_Replace_Variable]^assertTrue ( r2.equals ( r1 )  ) ;^101^^^^^86^116^assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P7_Replace_Invocation]^assertEquals ( r1.equals ( r2 )  ) ;^101^^^^^86^116^assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P14_Delete_Statement]^^101^^^^^86^116^assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^assertTrue ( r1 != r2 ) ;assertTrue ( r1.equals ( r2 )  ) ;^101^^^^^86^116^assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^assertFalse ( r1.equals ( r2 )  ) ;assertTrue ( r1.equals ( r2 )  ) ;^101^^^^^86^116^assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^assertEquals ( r1, r2 ) ;assertTrue ( r1.equals ( r2 )  ) ;^101^^^^^86^116^assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertTrue ( r1.equals ( r2 )  ) ;^101^^^^^86^116^assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^assertTrue ( r1.getClass (  )  == r2.getClass (  )  ) ;assertTrue ( r1.equals ( r2 )  ) ;^101^^^^^86^116^assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P7_Replace_Invocation]^assertTrue ( r1 .getClass (  )   ) ;^101^^^^^86^116^assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P3_Replace_Literal]^r1.setIncrement ( 9.0 ) ;^104^^^^^89^119^r1.setIncrement ( 1.5 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P14_Delete_Statement]^^104^^^^^89^119^r1.setIncrement ( 1.5 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^r2.setIncrement ( 1.5 ) ;r1.setIncrement ( 1.5 ) ;^104^^^^^89^119^r1.setIncrement ( 1.5 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^r1.setUpperBound ( 11.1 ) ;r1.setIncrement ( 1.5 ) ;^104^^^^^89^119^r1.setIncrement ( 1.5 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^r1.setLowerBound ( 1.1 ) ;r1.setIncrement ( 1.5 ) ;^104^^^^^89^119^r1.setIncrement ( 1.5 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^r2.setUpperBound ( 11.1 ) ;r1.setIncrement ( 1.5 ) ;^104^^^^^89^119^r1.setIncrement ( 1.5 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^r2.setLowerBound ( 1.1 ) ;r1.setIncrement ( 1.5 ) ;^104^^^^^89^119^r1.setIncrement ( 1.5 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P5_Replace_Variable]^assertFalse ( r2.equals ( r1 )  ) ;^105^^^^^90^120^assertFalse ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P7_Replace_Invocation]^assertEquals ( r1.equals ( r2 )  ) ;^105^^^^^90^120^assertFalse ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P7_Replace_Invocation]^assertFalse ( r1 .getClass (  )   ) ;^105^^^^^90^120^assertFalse ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P14_Delete_Statement]^^105^106^^^^90^120^assertFalse ( r1.equals ( r2 )  ) ; r2.setIncrement ( 1.5 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^assertTrue ( r1 != r2 ) ;assertFalse ( r1.equals ( r2 )  ) ;^105^^^^^90^120^assertFalse ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^assertEquals ( r1, r2 ) ;assertFalse ( r1.equals ( r2 )  ) ;^105^^^^^90^120^assertFalse ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^assertTrue ( r1.equals ( r2 )  ) ;assertFalse ( r1.equals ( r2 )  ) ;^105^^^^^90^120^assertFalse ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertFalse ( r1.equals ( r2 )  ) ;^105^^^^^90^120^assertFalse ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P14_Delete_Statement]^^105^^^^^90^120^assertFalse ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P3_Replace_Literal]^r2.setIncrement ( 12.0 ) ;^106^^^^^91^121^r2.setIncrement ( 1.5 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P14_Delete_Statement]^^106^^^^^91^121^r2.setIncrement ( 1.5 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^r1.setUpperBound ( 11.1 ) ;r2.setIncrement ( 1.5 ) ;^106^^^^^91^121^r2.setIncrement ( 1.5 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^r1.setIncrement ( 1.5 ) ;r2.setIncrement ( 1.5 ) ;^106^^^^^91^121^r2.setIncrement ( 1.5 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^r1.setLowerBound ( 1.1 ) ;r2.setIncrement ( 1.5 ) ;^106^^^^^91^121^r2.setIncrement ( 1.5 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^r2.setUpperBound ( 11.1 ) ;r2.setIncrement ( 1.5 ) ;^106^^^^^91^121^r2.setIncrement ( 1.5 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^r2.setLowerBound ( 1.1 ) ;r2.setIncrement ( 1.5 ) ;^106^^^^^91^121^r2.setIncrement ( 1.5 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P5_Replace_Variable]^assertTrue ( r2.equals ( r1 )  ) ;^107^^^^^92^122^assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P7_Replace_Invocation]^assertEquals ( r1.equals ( r2 )  ) ;^107^^^^^92^122^assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P14_Delete_Statement]^^107^^^^^92^122^assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^assertTrue ( r1 != r2 ) ;assertTrue ( r1.equals ( r2 )  ) ;^107^^^^^92^122^assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^assertFalse ( r1.equals ( r2 )  ) ;assertTrue ( r1.equals ( r2 )  ) ;^107^^^^^92^122^assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^assertEquals ( r1, r2 ) ;assertTrue ( r1.equals ( r2 )  ) ;^107^^^^^92^122^assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertTrue ( r1.equals ( r2 )  ) ;^107^^^^^92^122^assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^assertTrue ( r1.getClass (  )  == r2.getClass (  )  ) ;assertTrue ( r1.equals ( r2 )  ) ;^107^^^^^92^122^assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P7_Replace_Invocation]^assertTrue ( r1 .getClass (  )   ) ;^107^^^^^92^122^assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P5_Replace_Variable]^r1.setPaint ( new GradientPaint ( 1.0f, 2.0f, Color. 3.0f, 4.0f, Color.blue )  ) ;^110^111^^^^95^125^r1.setPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.blue )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P14_Delete_Statement]^^110^111^^^^95^125^r1.setPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.blue )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P5_Replace_Variable]^assertFalse ( r2.equals ( r1 )  ) ;^112^^^^^97^127^assertFalse ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P7_Replace_Invocation]^assertEquals ( r1.equals ( r2 )  ) ;^112^^^^^97^127^assertFalse ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P8_Replace_Mix]^assertFalse ( r1 .getClass (  )   ) ;^112^^^^^97^127^assertFalse ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P14_Delete_Statement]^^112^^^^^97^127^assertFalse ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^assertTrue ( r1 != r2 ) ;assertFalse ( r1.equals ( r2 )  ) ;^112^^^^^97^127^assertFalse ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^assertEquals ( r1, r2 ) ;assertFalse ( r1.equals ( r2 )  ) ;^112^^^^^97^127^assertFalse ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^assertTrue ( r1.equals ( r2 )  ) ;assertFalse ( r1.equals ( r2 )  ) ;^112^^^^^97^127^assertFalse ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertFalse ( r1.equals ( r2 )  ) ;^112^^^^^97^127^assertFalse ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P5_Replace_Variable]^r2.setPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.null )  ) ;^113^114^^^^98^128^r2.setPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.blue )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P5_Replace_Variable]^r2.setPaint ( new GradientPaint ( 1.0f, 2.0f, Color. 3.0f, 4.0f, Color.blue )  ) ;^113^114^^^^98^128^r2.setPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.blue )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P14_Delete_Statement]^^113^114^^^^98^128^r2.setPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.blue )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P5_Replace_Variable]^assertTrue ( r2.equals ( r1 )  ) ;^115^^^^^100^130^assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P7_Replace_Invocation]^assertEquals ( r1.equals ( r2 )  ) ;^115^^^^^100^130^assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P14_Delete_Statement]^^115^^^^^100^130^assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^assertTrue ( r1 != r2 ) ;assertTrue ( r1.equals ( r2 )  ) ;^115^^^^^100^130^assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^assertFalse ( r1.equals ( r2 )  ) ;assertTrue ( r1.equals ( r2 )  ) ;^115^^^^^100^130^assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^assertEquals ( r1, r2 ) ;assertTrue ( r1.equals ( r2 )  ) ;^115^^^^^100^130^assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertTrue ( r1.equals ( r2 )  ) ;^115^^^^^100^130^assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^assertTrue ( r1.getClass (  )  == r2.getClass (  )  ) ;assertTrue ( r1.equals ( r2 )  ) ;^115^^^^^100^130^assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  
[P11_Insert_Donor_Statement]^StandardDialRange r2 = new StandardDialRange (  ) ;StandardDialRange r1 = new StandardDialRange (  ) ;^123^^^^^122^129^StandardDialRange r1 = new StandardDialRange (  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  int  h1  h2  
[P11_Insert_Donor_Statement]^StandardDialRange r1 = new StandardDialRange (  ) ;StandardDialRange r2 = new StandardDialRange (  ) ;^124^^^^^122^129^StandardDialRange r2 = new StandardDialRange (  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  int  h1  h2  
[P11_Insert_Donor_Statement]^StandardDialRange r2 = null;StandardDialRange r2 = new StandardDialRange (  ) ;^124^^^^^122^129^StandardDialRange r2 = new StandardDialRange (  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  int  h1  h2  
[P5_Replace_Variable]^assertTrue ( r2.equals ( r1 )  ) ;^125^^^^^122^129^assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  int  h1  h2  
[P7_Replace_Invocation]^assertEquals ( r1.equals ( r2 )  ) ;^125^^^^^122^129^assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  int  h1  h2  
[P7_Replace_Invocation]^assertTrue ( r1 .getClass (  )   ) ;^125^^^^^122^129^assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  int  h1  h2  
[P14_Delete_Statement]^^125^^^^^122^129^assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  int  h1  h2  
[P11_Insert_Donor_Statement]^assertTrue ( r1 != r2 ) ;assertTrue ( r1.equals ( r2 )  ) ;^125^^^^^122^129^assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  int  h1  h2  
[P11_Insert_Donor_Statement]^assertFalse ( r1.equals ( r2 )  ) ;assertTrue ( r1.equals ( r2 )  ) ;^125^^^^^122^129^assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  int  h1  h2  
[P11_Insert_Donor_Statement]^assertEquals ( r1, r2 ) ;assertTrue ( r1.equals ( r2 )  ) ;^125^^^^^122^129^assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  int  h1  h2  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertTrue ( r1.equals ( r2 )  ) ;^125^^^^^122^129^assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  int  h1  h2  
[P11_Insert_Donor_Statement]^assertTrue ( r1.getClass (  )  == r2.getClass (  )  ) ;assertTrue ( r1.equals ( r2 )  ) ;^125^^^^^122^129^assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  int  h1  h2  
[P14_Delete_Statement]^^125^126^^^^122^129^assertTrue ( r1.equals ( r2 )  ) ; int h1 = r1.hashCode (  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  int  h1  h2  
[P1_Replace_Type]^long  h1 = r1.hashCode (  ) ;^126^^^^^122^129^int h1 = r1.hashCode (  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  int  h1  h2  
[P7_Replace_Invocation]^int h1 = r1.setIncrement (  ) ;^126^^^^^122^129^int h1 = r1.hashCode (  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  int  h1  h2  
[P7_Replace_Invocation]^int h1 = r1 .clone (  )  ;^126^^^^^122^129^int h1 = r1.hashCode (  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  int  h1  h2  
[P8_Replace_Mix]^int h1 = r2.hashCode (  ) ;^126^^^^^122^129^int h1 = r1.hashCode (  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  int  h1  h2  
[P11_Insert_Donor_Statement]^int h2 = r2.hashCode (  ) ;int h1 = r1.hashCode (  ) ;^126^^^^^122^129^int h1 = r1.hashCode (  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  int  h1  h2  
[P14_Delete_Statement]^^126^127^^^^122^129^int h1 = r1.hashCode (  ) ; int h2 = r2.hashCode (  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  int  h1  h2  
[P1_Replace_Type]^short  h2 = r2.hashCode (  ) ;^127^^^^^122^129^int h2 = r2.hashCode (  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  int  h1  h2  
[P5_Replace_Variable]^int h2 = r1.hashCode (  ) ;^127^^^^^122^129^int h2 = r2.hashCode (  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  int  h1  h2  
[P7_Replace_Invocation]^int h2 = r2.setIncrement (  ) ;^127^^^^^122^129^int h2 = r2.hashCode (  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  int  h1  h2  
[P11_Insert_Donor_Statement]^int h1 = r1.hashCode (  ) ;int h2 = r2.hashCode (  ) ;^127^^^^^122^129^int h2 = r2.hashCode (  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  int  h1  h2  
[P14_Delete_Statement]^^127^^^^^122^129^int h2 = r2.hashCode (  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  int  h1  h2  
[P5_Replace_Variable]^assertEquals (  h2 ) ;^128^^^^^122^129^assertEquals ( h1, h2 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  int  h1  h2  
[P5_Replace_Variable]^assertEquals ( h1 ) ;^128^^^^^122^129^assertEquals ( h1, h2 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  int  h1  h2  
[P5_Replace_Variable]^assertEquals ( h2, h1 ) ;^128^^^^^122^129^assertEquals ( h1, h2 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  int  h1  h2  
[P14_Delete_Statement]^^128^^^^^122^129^assertEquals ( h1, h2 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  int  h1  h2  
[P11_Insert_Donor_Statement]^assertTrue ( r1 != r2 ) ;assertEquals ( h1, h2 ) ;^128^^^^^122^129^assertEquals ( h1, h2 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  int  h1  h2  
[P11_Insert_Donor_Statement]^assertFalse ( r1.equals ( r2 )  ) ;assertEquals ( h1, h2 ) ;^128^^^^^122^129^assertEquals ( h1, h2 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  int  h1  h2  
[P11_Insert_Donor_Statement]^assertEquals ( r1, r2 ) ;assertEquals ( h1, h2 ) ;^128^^^^^122^129^assertEquals ( h1, h2 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  int  h1  h2  
[P11_Insert_Donor_Statement]^assertTrue ( r1.equals ( r2 )  ) ;assertEquals ( h1, h2 ) ;^128^^^^^122^129^assertEquals ( h1, h2 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  int  h1  h2  
[P11_Insert_Donor_Statement]^StandardDialRange r2 = new StandardDialRange (  ) ;StandardDialRange r1 = new StandardDialRange (  ) ;^135^^^^^134^146^StandardDialRange r1 = new StandardDialRange (  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^StandardDialRange r2 = new StandardDialRange (  ) ;StandardDialRange r2 = null;^136^^^^^134^146^StandardDialRange r2 = null;^[CLASS] StandardDialRangeTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  CloneNotSupportedException  e  
[P5_Replace_Variable]^r2 =  ( StandardDialRange )  r2.clone (  ) ;^138^^^^^134^146^r2 =  ( StandardDialRange )  r1.clone (  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  CloneNotSupportedException  e  
[P7_Replace_Invocation]^r2 =  ( StandardDialRange )  r1.setLowerBound (  ) ;^138^^^^^134^146^r2 =  ( StandardDialRange )  r1.clone (  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  CloneNotSupportedException  e  
[P8_Replace_Mix]^r2 =   ( StandardDialRange )  null.clone (  ) ;^138^^^^^134^146^r2 =  ( StandardDialRange )  r1.clone (  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^r2 =  ( StandardDialRange )  in.readObject (  ) ;r2 =  ( StandardDialRange )  r1.clone (  ) ;^138^^^^^134^146^r2 =  ( StandardDialRange )  r1.clone (  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  CloneNotSupportedException  e  
[P14_Delete_Statement]^^138^^^^^134^146^r2 =  ( StandardDialRange )  r1.clone (  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  CloneNotSupportedException  e  
[P14_Delete_Statement]^^141^^^^^134^146^e.printStackTrace (  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  CloneNotSupportedException  e  
[P2_Replace_Operator]^assertTrue ( r1 >= r2 ) ;^143^^^^^134^146^assertTrue ( r1 != r2 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  CloneNotSupportedException  e  
[P5_Replace_Variable]^assertTrue ( r2 != r1 ) ;^143^^^^^134^146^assertTrue ( r1 != r2 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  CloneNotSupportedException  e  
[P7_Replace_Invocation]^assertEquals ( r1 != r2 ) ;^143^^^^^134^146^assertTrue ( r1 != r2 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  CloneNotSupportedException  e  
[P14_Delete_Statement]^^143^^^^^134^146^assertTrue ( r1 != r2 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertFalse ( r1.equals ( r2 )  ) ;assertTrue ( r1 != r2 ) ;^143^^^^^134^146^assertTrue ( r1 != r2 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertEquals ( r1, r2 ) ;assertTrue ( r1 != r2 ) ;^143^^^^^134^146^assertTrue ( r1 != r2 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertTrue ( r1.equals ( r2 )  ) ;assertTrue ( r1 != r2 ) ;^143^^^^^134^146^assertTrue ( r1 != r2 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertTrue ( r1 != r2 ) ;^143^^^^^134^146^assertTrue ( r1 != r2 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  CloneNotSupportedException  e  
[P2_Replace_Operator]^assertTrue ( r1.getClass (  )  != r2.getClass (  )  ) ;^144^^^^^134^146^assertTrue ( r1.getClass (  )  == r2.getClass (  )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  CloneNotSupportedException  e  
[P5_Replace_Variable]^assertTrue ( r2.getClass (  )  == r1.getClass (  )  ) ;^144^^^^^134^146^assertTrue ( r1.getClass (  )  == r2.getClass (  )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  CloneNotSupportedException  e  
[P7_Replace_Invocation]^assertEquals ( r1.getClass (  )  == r2.getClass (  )  ) ;^144^^^^^134^146^assertTrue ( r1.getClass (  )  == r2.getClass (  )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  CloneNotSupportedException  e  
[P7_Replace_Invocation]^assertTrue ( r1.setIncrement (  )  == r2.getClass (  )  ) ;^144^^^^^134^146^assertTrue ( r1.getClass (  )  == r2.getClass (  )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  CloneNotSupportedException  e  
[P7_Replace_Invocation]^assertTrue ( r1 .equals ( r2 )   == r2^144^^^^^134^146^assertTrue ( r1.getClass (  )  == r2.getClass (  )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  CloneNotSupportedException  e  
[P7_Replace_Invocation]^assertTrue ( r1 .equals ( r1 )   == r2^144^^^^^134^146^assertTrue ( r1.getClass (  )  == r2.getClass (  )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  CloneNotSupportedException  e  
[P14_Delete_Statement]^^144^^^^^134^146^assertTrue ( r1.getClass (  )  == r2.getClass (  )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertTrue ( r1.equals ( r2 )  ) ;assertTrue ( r1.getClass (  )  == r2.getClass (  )  ) ;^144^^^^^134^146^assertTrue ( r1.getClass (  )  == r2.getClass (  )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  CloneNotSupportedException  e  
[P5_Replace_Variable]^assertTrue ( r2.getClass (  )  == r2.getClass (  )  ) ;^144^^^^^134^146^assertTrue ( r1.getClass (  )  == r2.getClass (  )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  CloneNotSupportedException  e  
[P5_Replace_Variable]^assertTrue ( r1.getClass (  )  == r1.getClass (  )  ) ;^144^^^^^134^146^assertTrue ( r1.getClass (  )  == r2.getClass (  )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  CloneNotSupportedException  e  
[P14_Delete_Statement]^^144^145^^^^134^146^assertTrue ( r1.getClass (  )  == r2.getClass (  )  ) ; assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  CloneNotSupportedException  e  
[P5_Replace_Variable]^assertTrue ( r2.equals ( r1 )  ) ;^145^^^^^134^146^assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  CloneNotSupportedException  e  
[P7_Replace_Invocation]^assertEquals ( r1.equals ( r2 )  ) ;^145^^^^^134^146^assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  CloneNotSupportedException  e  
[P7_Replace_Invocation]^assertTrue ( r1 .getClass (  )   ) ;^145^^^^^134^146^assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  CloneNotSupportedException  e  
[P14_Delete_Statement]^^145^^^^^134^146^assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertTrue ( r1 != r2 ) ;assertTrue ( r1.equals ( r2 )  ) ;^145^^^^^134^146^assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertFalse ( r1.equals ( r2 )  ) ;assertTrue ( r1.equals ( r2 )  ) ;^145^^^^^134^146^assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertEquals ( r1, r2 ) ;assertTrue ( r1.equals ( r2 )  ) ;^145^^^^^134^146^assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertTrue ( r1.equals ( r2 )  ) ;^145^^^^^134^146^assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertTrue ( r1.getClass (  )  == r2.getClass (  )  ) ;assertTrue ( r1.equals ( r2 )  ) ;^145^^^^^134^146^assertTrue ( r1.equals ( r2 )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^StandardDialRange r2 = new StandardDialRange (  ) ;StandardDialRange r1 = new StandardDialRange (  ) ;^153^^^^^152^171^StandardDialRange r1 = new StandardDialRange (  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
[P11_Insert_Donor_Statement]^StandardDialRange r2 = new StandardDialRange (  ) ;StandardDialRange r2 = null;^154^^^^^152^171^StandardDialRange r2 = null;^[CLASS] StandardDialRangeTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
[P8_Replace_Mix]^r2 =   ( StandardDialRange )  null.readObject (  ) ;^164^^^^^152^171^r2 =  ( StandardDialRange )  in.readObject (  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
[P11_Insert_Donor_Statement]^r2 =  ( StandardDialRange )  r1.clone (  ) ;r2 =  ( StandardDialRange )  in.readObject (  ) ;^164^^^^^152^171^r2 =  ( StandardDialRange )  in.readObject (  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
[P8_Replace_Mix]^ObjectInput in = new ObjectInputStream ( new ByteArrayInputStream ( buffer .ByteArrayOutputStream (  )   )  ) ;^162^163^^^^152^171^ObjectInput in = new ObjectInputStream ( new ByteArrayInputStream ( buffer.toByteArray (  )  )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
[P7_Replace_Invocation]^new ByteArrayInputStream ( buffer .ByteArrayOutputStream (  )   )  ) ;^163^^^^^152^171^new ByteArrayInputStream ( buffer.toByteArray (  )  )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
[P5_Replace_Variable]^out.writeObject ( r2 ) ;^159^^^^^152^171^out.writeObject ( r1 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
[P7_Replace_Invocation]^out .close (  )  ;^159^^^^^152^171^out.writeObject ( r1 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
[P14_Delete_Statement]^^159^160^^^^152^171^out.writeObject ( r1 ) ; out.close (  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
[P11_Insert_Donor_Statement]^out.close (  ) ;out.writeObject ( r1 ) ;^159^^^^^152^171^out.writeObject ( r1 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
[P7_Replace_Invocation]^out.writeObject (  ) ;^160^^^^^152^171^out.close (  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
[P14_Delete_Statement]^^160^^^^^152^171^out.close (  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
[P11_Insert_Donor_Statement]^out.writeObject ( r1 ) ;out.close (  ) ;^160^^^^^152^171^out.close (  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
[P11_Insert_Donor_Statement]^in.close (  ) ;out.close (  ) ;^160^^^^^152^171^out.close (  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
[P14_Delete_Statement]^^163^^^^^152^171^new ByteArrayInputStream ( buffer.toByteArray (  )  )  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
[P14_Delete_Statement]^^164^^^^^152^171^r2 =  ( StandardDialRange )  in.readObject (  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
[P14_Delete_Statement]^^165^^^^^152^171^in.close (  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
[P11_Insert_Donor_Statement]^out.close (  ) ;in.close (  ) ;^165^^^^^152^171^in.close (  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
[P14_Delete_Statement]^^159^^^^^152^171^out.writeObject ( r1 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
[P14_Delete_Statement]^^164^165^^^^152^171^r2 =  ( StandardDialRange )  in.readObject (  ) ; in.close (  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
[P7_Replace_Invocation]^in .writeObject ( this )  ;^165^^^^^152^171^in.close (  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
[P14_Delete_Statement]^^168^^^^^152^171^e.printStackTrace (  ) ;^[CLASS] StandardDialRangeTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
[P5_Replace_Variable]^assertEquals (  r2 ) ;^170^^^^^152^171^assertEquals ( r1, r2 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
[P5_Replace_Variable]^assertEquals ( r1 ) ;^170^^^^^152^171^assertEquals ( r1, r2 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
[P5_Replace_Variable]^assertEquals ( r2, r1 ) ;^170^^^^^152^171^assertEquals ( r1, r2 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
[P14_Delete_Statement]^^170^^^^^152^171^assertEquals ( r1, r2 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
[P11_Insert_Donor_Statement]^assertTrue ( r1 != r2 ) ;assertEquals ( r1, r2 ) ;^170^^^^^152^171^assertEquals ( r1, r2 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
[P11_Insert_Donor_Statement]^assertFalse ( r1.equals ( r2 )  ) ;assertEquals ( r1, r2 ) ;^170^^^^^152^171^assertEquals ( r1, r2 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
[P11_Insert_Donor_Statement]^assertTrue ( r1.equals ( r2 )  ) ;assertEquals ( r1, r2 ) ;^170^^^^^152^171^assertEquals ( r1, r2 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertEquals ( r1, r2 ) ;^170^^^^^152^171^assertEquals ( r1, r2 ) ;^[CLASS] StandardDialRangeTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] StandardDialRange  r1  r2  boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  
