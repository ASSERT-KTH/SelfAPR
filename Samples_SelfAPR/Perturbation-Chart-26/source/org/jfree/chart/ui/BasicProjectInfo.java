[P1_Replace_Type]^private char libraryClass;^61^^^^^56^66^private String libraryClass;^[CLASS] BasicProjectInfo OptionalLibraryHolder   [VARIABLES] 
[P1_Replace_Type]^private char copyright;^137^^^^^132^142^private String copyright;^[CLASS] BasicProjectInfo OptionalLibraryHolder   [VARIABLES] 
[P1_Replace_Type]^private  Set  libraries;^140^^^^^135^145^private List libraries;^[CLASS] BasicProjectInfo OptionalLibraryHolder   [VARIABLES] 
[P1_Replace_Type]^private  Set  optionalLibraries;^142^^^^^137^147^private List optionalLibraries;^[CLASS] BasicProjectInfo OptionalLibraryHolder   [VARIABLES] 
[P2_Replace_Operator]^if  ( libraryClass != null )  {^70^^^^^69^75^if  ( libraryClass == null )  {^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String libraryClass [VARIABLES] List  libraries  optionalLibraries  String  copyright  libraryClass  Library  library  boolean  
[P5_Replace_Variable]^if  ( copyright == null )  {^70^^^^^69^75^if  ( libraryClass == null )  {^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String libraryClass [VARIABLES] List  libraries  optionalLibraries  String  copyright  libraryClass  Library  library  boolean  
[P8_Replace_Mix]^if  ( libraryClass == this )  {^70^^^^^69^75^if  ( libraryClass == null )  {^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String libraryClass [VARIABLES] List  libraries  optionalLibraries  String  copyright  libraryClass  Library  library  boolean  
[P9_Replace_Statement]^if  ( library == null )  {^70^^^^^69^75^if  ( libraryClass == null )  {^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String libraryClass [VARIABLES] List  libraries  optionalLibraries  String  copyright  libraryClass  Library  library  boolean  
[P9_Replace_Statement]^if  ( this.library == null )  {^70^^^^^69^75^if  ( libraryClass == null )  {^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String libraryClass [VARIABLES] List  libraries  optionalLibraries  String  copyright  libraryClass  Library  library  boolean  
[P9_Replace_Statement]^if  ( classname == null )  {^70^^^^^69^75^if  ( libraryClass == null )  {^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String libraryClass [VARIABLES] List  libraries  optionalLibraries  String  copyright  libraryClass  Library  library  boolean  
[P15_Unwrap_Block]^throw new java.lang.NullPointerException("LibraryClass must not be null.");^70^71^72^73^^69^75^if  ( libraryClass == null )  { throw new NullPointerException ( "LibraryClass must not be null." ) ; }^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String libraryClass [VARIABLES] List  libraries  optionalLibraries  String  copyright  libraryClass  Library  library  boolean  
[P16_Remove_Block]^^70^71^72^73^^69^75^if  ( libraryClass == null )  { throw new NullPointerException ( "LibraryClass must not be null." ) ; }^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String libraryClass [VARIABLES] List  libraries  optionalLibraries  String  copyright  libraryClass  Library  library  boolean  
[P13_Insert_Block]^if  ( library == null )  {     throw new NullPointerException (  ) ; }^70^^^^^69^75^[Delete]^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String libraryClass [VARIABLES] List  libraries  optionalLibraries  String  copyright  libraryClass  Library  library  boolean  
[P13_Insert_Block]^if  ( library == null )  {     throw new NullPointerException ( "Library must not be null." ) ; }^70^^^^^69^75^[Delete]^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String libraryClass [VARIABLES] List  libraries  optionalLibraries  String  copyright  libraryClass  Library  library  boolean  
[P13_Insert_Block]^if  ( libraryClass == null )  {     throw new NullPointerException ( "Library classname must be given." ) ; }^70^^^^^69^75^[Delete]^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String libraryClass [VARIABLES] List  libraries  optionalLibraries  String  copyright  libraryClass  Library  library  boolean  
[P13_Insert_Block]^if  ( library == null )  {     throw new NullPointerException ( "Library must be given." ) ; }^70^^^^^69^75^[Delete]^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String libraryClass [VARIABLES] List  libraries  optionalLibraries  String  copyright  libraryClass  Library  library  boolean  
[P3_Replace_Literal]^throw new NullPointerException ( "s mibraryClass must not be null." ) ;^71^72^^^^69^75^throw new NullPointerException ( "LibraryClass must not be null." ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String libraryClass [VARIABLES] List  libraries  optionalLibraries  String  copyright  libraryClass  Library  library  boolean  
[P4_Replace_Constructor]^throw throw  new NullPointerException ( "Library classname must be given." )  ;^71^72^^^^69^75^throw new NullPointerException ( "LibraryClass must not be null." ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String libraryClass [VARIABLES] List  libraries  optionalLibraries  String  copyright  libraryClass  Library  library  boolean  
[P13_Insert_Block]^if  ( library == null )  {     throw new NullPointerException ( "Library must not be null." ) ; }^71^^^^^69^75^[Delete]^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String libraryClass [VARIABLES] List  libraries  optionalLibraries  String  copyright  libraryClass  Library  library  boolean  
[P13_Insert_Block]^if  ( libraryClass == null )  {     throw new NullPointerException ( "Library classname must be given." ) ; }^71^^^^^69^75^[Delete]^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String libraryClass [VARIABLES] List  libraries  optionalLibraries  String  copyright  libraryClass  Library  library  boolean  
[P13_Insert_Block]^if  ( libraryClass == null )  {     throw new NullPointerException ( "LibraryClass must not be null." ) ; }^71^^^^^69^75^[Delete]^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String libraryClass [VARIABLES] List  libraries  optionalLibraries  String  copyright  libraryClass  Library  library  boolean  
[P3_Replace_Literal]^throw new NullPointerException ( "LibraryClass must not be null.LibraryClass mus" ) ;^71^72^^^^69^75^throw new NullPointerException ( "LibraryClass must not be null." ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String libraryClass [VARIABLES] List  libraries  optionalLibraries  String  copyright  libraryClass  Library  library  boolean  
[P8_Replace_Mix]^throw new NullPointerException  (" ")  ; ;^71^72^^^^69^75^throw new NullPointerException ( "LibraryClass must not be null." ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String libraryClass [VARIABLES] List  libraries  optionalLibraries  String  copyright  libraryClass  Library  library  boolean  
[P11_Insert_Donor_Statement]^throw new NullPointerException  (" ")  ;throw new NullPointerException ( "LibraryClass must not be null." ) ;^71^72^^^^69^75^throw new NullPointerException ( "LibraryClass must not be null." ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String libraryClass [VARIABLES] List  libraries  optionalLibraries  String  copyright  libraryClass  Library  library  boolean  
[P13_Insert_Block]^if  ( library == null )  {     throw new NullPointerException ( "Library must be given." ) ; }^71^^^^^69^75^[Delete]^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String libraryClass [VARIABLES] List  libraries  optionalLibraries  String  copyright  libraryClass  Library  library  boolean  
[P3_Replace_Literal]^throw new NullPointerException ( "LibraryClass must not be null.a" ) ;^71^72^^^^69^75^throw new NullPointerException ( "LibraryClass must not be null." ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String libraryClass [VARIABLES] List  libraries  optionalLibraries  String  copyright  libraryClass  Library  library  boolean  
[P3_Replace_Literal]^throw new NullPointerException ( "LibraryClass must not be null.LibraryClass must" ) ;^71^72^^^^69^75^throw new NullPointerException ( "LibraryClass must not be null." ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String libraryClass [VARIABLES] List  libraries  optionalLibraries  String  copyright  libraryClass  Library  library  boolean  
[P5_Replace_Variable]^this.libraryClass = copyright;^74^^^^^69^75^this.libraryClass = libraryClass;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String libraryClass [VARIABLES] List  libraries  optionalLibraries  String  copyright  libraryClass  Library  library  boolean  
[P8_Replace_Mix]^this.libraryClass =  null;^74^^^^^69^75^this.libraryClass = libraryClass;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String libraryClass [VARIABLES] List  libraries  optionalLibraries  String  copyright  libraryClass  Library  library  boolean  
[P11_Insert_Donor_Statement]^this.library = library;this.libraryClass = libraryClass;^74^^^^^69^75^this.libraryClass = libraryClass;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String libraryClass [VARIABLES] List  libraries  optionalLibraries  String  copyright  libraryClass  Library  library  boolean  
[P11_Insert_Donor_Statement]^this.libraryClass = library.getClass (  ) .getName (  ) ;this.libraryClass = libraryClass;^74^^^^^69^75^this.libraryClass = libraryClass;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String libraryClass [VARIABLES] List  libraries  optionalLibraries  String  copyright  libraryClass  Library  library  boolean  
[P11_Insert_Donor_Statement]^this.library = loadLibrary ( this.libraryClass ) ;this.libraryClass = libraryClass;^74^^^^^69^75^this.libraryClass = libraryClass;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String libraryClass [VARIABLES] List  libraries  optionalLibraries  String  copyright  libraryClass  Library  library  boolean  
[P2_Replace_Operator]^if  ( library != null )  {^83^^^^^82^88^if  ( library == null )  {^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] Library)   Library library [VARIABLES] List  libraries  optionalLibraries  String  copyright  libraryClass  Library  library  boolean  
[P8_Replace_Mix]^if  ( library == true )  {^83^^^^^82^88^if  ( library == null )  {^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] Library)   Library library [VARIABLES] List  libraries  optionalLibraries  String  copyright  libraryClass  Library  library  boolean  
[P9_Replace_Statement]^if  ( libraryClass == null )  {^83^^^^^82^88^if  ( library == null )  {^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] Library)   Library library [VARIABLES] List  libraries  optionalLibraries  String  copyright  libraryClass  Library  library  boolean  
[P9_Replace_Statement]^if  ( this.library == null )  {^83^^^^^82^88^if  ( library == null )  {^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] Library)   Library library [VARIABLES] List  libraries  optionalLibraries  String  copyright  libraryClass  Library  library  boolean  
[P9_Replace_Statement]^if  ( classname == null )  {^83^^^^^82^88^if  ( library == null )  {^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] Library)   Library library [VARIABLES] List  libraries  optionalLibraries  String  copyright  libraryClass  Library  library  boolean  
[P9_Replace_Statement]^if  ( l != null )  {^83^^^^^82^88^if  ( library == null )  {^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] Library)   Library library [VARIABLES] List  libraries  optionalLibraries  String  copyright  libraryClass  Library  library  boolean  
[P15_Unwrap_Block]^throw new java.lang.NullPointerException("Library must not be null.");^83^84^85^^^82^88^if  ( library == null )  { throw new NullPointerException  (" ")  ; }^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] Library)   Library library [VARIABLES] List  libraries  optionalLibraries  String  copyright  libraryClass  Library  library  boolean  
[P16_Remove_Block]^^83^84^85^^^82^88^if  ( library == null )  { throw new NullPointerException  (" ")  ; }^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] Library)   Library library [VARIABLES] List  libraries  optionalLibraries  String  copyright  libraryClass  Library  library  boolean  
[P13_Insert_Block]^if  ( library == null )  {     throw new NullPointerException (  ) ; }^83^^^^^82^88^[Delete]^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] Library)   Library library [VARIABLES] List  libraries  optionalLibraries  String  copyright  libraryClass  Library  library  boolean  
[P13_Insert_Block]^if  ( libraryClass == null )  {     throw new NullPointerException ( "Library classname must be given." ) ; }^83^^^^^82^88^[Delete]^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] Library)   Library library [VARIABLES] List  libraries  optionalLibraries  String  copyright  libraryClass  Library  library  boolean  
[P13_Insert_Block]^if  ( libraryClass == null )  {     throw new NullPointerException ( "LibraryClass must not be null." ) ; }^83^^^^^82^88^[Delete]^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] Library)   Library library [VARIABLES] List  libraries  optionalLibraries  String  copyright  libraryClass  Library  library  boolean  
[P13_Insert_Block]^if  ( library == null )  {     throw new NullPointerException ( "Library must be given." ) ; }^83^^^^^82^88^[Delete]^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] Library)   Library library [VARIABLES] List  libraries  optionalLibraries  String  copyright  libraryClass  Library  library  boolean  
[P4_Replace_Constructor]^throw throw  new NullPointerException ( "Library classname must be given." )   ;^84^^^^^82^88^throw new NullPointerException  (" ")  ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] Library)   Library library [VARIABLES] List  libraries  optionalLibraries  String  copyright  libraryClass  Library  library  boolean  
[P13_Insert_Block]^if  ( library == null )  {     throw new NullPointerException ( "Library must not be null." ) ; }^84^^^^^82^88^[Delete]^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] Library)   Library library [VARIABLES] List  libraries  optionalLibraries  String  copyright  libraryClass  Library  library  boolean  
[P13_Insert_Block]^if  ( libraryClass == null )  {     throw new NullPointerException ( "LibraryClass must not be null." ) ; }^84^^^^^82^88^[Delete]^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] Library)   Library library [VARIABLES] List  libraries  optionalLibraries  String  copyright  libraryClass  Library  library  boolean  
[P13_Insert_Block]^if  ( library == null )  {     throw new NullPointerException ( "Library must be given." ) ; }^84^^^^^82^88^[Delete]^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] Library)   Library library [VARIABLES] List  libraries  optionalLibraries  String  copyright  libraryClass  Library  library  boolean  
[P11_Insert_Donor_Statement]^throw new NullPointerException ( "LibraryClass must not be null." ) ;throw new NullPointerException  (" ")  ;^84^^^^^82^88^throw new NullPointerException  (" ")  ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] Library)   Library library [VARIABLES] List  libraries  optionalLibraries  String  copyright  libraryClass  Library  library  boolean  
[P13_Insert_Block]^if  ( libraryClass == null )  {     throw new NullPointerException ( "Library classname must be given." ) ; }^84^^^^^82^88^[Delete]^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] Library)   Library library [VARIABLES] List  libraries  optionalLibraries  String  copyright  libraryClass  Library  library  boolean  
[P8_Replace_Mix]^throw new NullPointerException ( "LibraryClass must not be null." ) ; ;^84^^^^^82^88^throw new NullPointerException  (" ")  ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] Library)   Library library [VARIABLES] List  libraries  optionalLibraries  String  copyright  libraryClass  Library  library  boolean  
[P8_Replace_Mix]^this.library =  null;^86^^^^^82^88^this.library = library;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] Library)   Library library [VARIABLES] List  libraries  optionalLibraries  String  copyright  libraryClass  Library  library  boolean  
[P11_Insert_Donor_Statement]^this.libraryClass = libraryClass;this.library = library;^86^^^^^82^88^this.library = library;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] Library)   Library library [VARIABLES] List  libraries  optionalLibraries  String  copyright  libraryClass  Library  library  boolean  
[P7_Replace_Invocation]^this.libraryClass = library.getClass (  ) .setName (  ) ;^87^^^^^82^88^this.libraryClass = library.getClass (  ) .getName (  ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] Library)   Library library [VARIABLES] List  libraries  optionalLibraries  String  copyright  libraryClass  Library  library  boolean  
[P8_Replace_Mix]^this.libraryClass =  null.getClass (  ) .getName (  ) ;^87^^^^^82^88^this.libraryClass = library.getClass (  ) .getName (  ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] Library)   Library library [VARIABLES] List  libraries  optionalLibraries  String  copyright  libraryClass  Library  library  boolean  
[P11_Insert_Donor_Statement]^this.libraryClass = libraryClass;this.libraryClass = library.getClass (  ) .getName (  ) ;^87^^^^^82^88^this.libraryClass = library.getClass (  ) .getName (  ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] Library)   Library library [VARIABLES] List  libraries  optionalLibraries  String  copyright  libraryClass  Library  library  boolean  
[P7_Replace_Invocation]^this.libraryClass = library.getClass (  )  .setName ( copyright )  ;^87^^^^^82^88^this.libraryClass = library.getClass (  ) .getName (  ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] Library)   Library library [VARIABLES] List  libraries  optionalLibraries  String  copyright  libraryClass  Library  library  boolean  
[P14_Delete_Statement]^^87^^^^^82^88^this.libraryClass = library.getClass (  ) .getName (  ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] Library)   Library library [VARIABLES] List  libraries  optionalLibraries  String  copyright  libraryClass  Library  library  boolean  
[P8_Replace_Mix]^this.libraryClass = library .Library (  )  .getName (  ) ;^87^^^^^82^88^this.libraryClass = library.getClass (  ) .getName (  ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] Library)   Library library [VARIABLES] List  libraries  optionalLibraries  String  copyright  libraryClass  Library  library  boolean  
[P1_Replace_Type]^this.libraries = new Array Set  (  ) ;^148^^^^^147^150^this.libraries = new ArrayList (  ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] BasicProjectInfo()   [VARIABLES] List  libraries  optionalLibraries  String  copyright  libraryClass  Library  library  boolean  
[P8_Replace_Mix]^this.libraries = new Array LinkedHashSet  (  ) ;^148^^^^^147^150^this.libraries = new ArrayList (  ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] BasicProjectInfo()   [VARIABLES] List  libraries  optionalLibraries  String  copyright  libraryClass  Library  library  boolean  
[P11_Insert_Donor_Statement]^this.optionalLibraries = new ArrayList (  ) ;this.libraries = new ArrayList (  ) ;^148^^^^^147^150^this.libraries = new ArrayList (  ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] BasicProjectInfo()   [VARIABLES] List  libraries  optionalLibraries  String  copyright  libraryClass  Library  library  boolean  
[P1_Replace_Type]^this.libraries = new  LinkedList  (  ) ;^148^^^^^147^150^this.libraries = new ArrayList (  ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] BasicProjectInfo()   [VARIABLES] List  libraries  optionalLibraries  String  copyright  libraryClass  Library  library  boolean  
[P1_Replace_Type]^this.optionalLibraries = new Array LinkedHashSet  (  ) ;^149^^^^^147^150^this.optionalLibraries = new ArrayList (  ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] BasicProjectInfo()   [VARIABLES] List  libraries  optionalLibraries  String  copyright  libraryClass  Library  library  boolean  
[P11_Insert_Donor_Statement]^this.libraries = new ArrayList (  ) ;this.optionalLibraries = new ArrayList (  ) ;^149^^^^^147^150^this.optionalLibraries = new ArrayList (  ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] BasicProjectInfo()   [VARIABLES] List  libraries  optionalLibraries  String  copyright  libraryClass  Library  library  boolean  
[P1_Replace_Type]^this.optionalLibraries = new  LinkedHashSet  (  ) ;^149^^^^^147^150^this.optionalLibraries = new ArrayList (  ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] BasicProjectInfo()   [VARIABLES] List  libraries  optionalLibraries  String  copyright  libraryClass  Library  library  boolean  
[P14_Delete_Statement]^^162^163^^^^160^167^this (  ) ; setName ( name ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String name String version String licence String info [VARIABLES] List  libraries  optionalLibraries  String  copyright  info  libraryClass  licence  name  version  Library  library  boolean  
[P5_Replace_Variable]^setName ( version ) ;^163^^^^^160^167^setName ( name ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String name String version String licence String info [VARIABLES] List  libraries  optionalLibraries  String  copyright  info  libraryClass  licence  name  version  Library  library  boolean  
[P7_Replace_Invocation]^setInfo ( name ) ;^163^^^^^160^167^setName ( name ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String name String version String licence String info [VARIABLES] List  libraries  optionalLibraries  String  copyright  info  libraryClass  licence  name  version  Library  library  boolean  
[P8_Replace_Mix]^setInfo ( licence ) ;^163^^^^^160^167^setName ( name ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String name String version String licence String info [VARIABLES] List  libraries  optionalLibraries  String  copyright  info  libraryClass  licence  name  version  Library  library  boolean  
[P14_Delete_Statement]^^163^^^^^160^167^setName ( name ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String name String version String licence String info [VARIABLES] List  libraries  optionalLibraries  String  copyright  info  libraryClass  licence  name  version  Library  library  boolean  
[P11_Insert_Donor_Statement]^setLicenceName ( licence ) ;setName ( name ) ;^163^^^^^160^167^setName ( name ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String name String version String licence String info [VARIABLES] List  libraries  optionalLibraries  String  copyright  info  libraryClass  licence  name  version  Library  library  boolean  
[P11_Insert_Donor_Statement]^setInfo ( info ) ;setName ( name ) ;^163^^^^^160^167^setName ( name ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String name String version String licence String info [VARIABLES] List  libraries  optionalLibraries  String  copyright  info  libraryClass  licence  name  version  Library  library  boolean  
[P11_Insert_Donor_Statement]^super.setName ( name ) ;setName ( name ) ;^163^^^^^160^167^setName ( name ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String name String version String licence String info [VARIABLES] List  libraries  optionalLibraries  String  copyright  info  libraryClass  licence  name  version  Library  library  boolean  
[P5_Replace_Variable]^setVersion ( licence ) ;^164^^^^^160^167^setVersion ( version ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String name String version String licence String info [VARIABLES] List  libraries  optionalLibraries  String  copyright  info  libraryClass  licence  name  version  Library  library  boolean  
[P7_Replace_Invocation]^setInfo ( version ) ;^164^^^^^160^167^setVersion ( version ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String name String version String licence String info [VARIABLES] List  libraries  optionalLibraries  String  copyright  info  libraryClass  licence  name  version  Library  library  boolean  
[P8_Replace_Mix]^setInfo ( licence ) ;^164^^^^^160^167^setVersion ( version ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String name String version String licence String info [VARIABLES] List  libraries  optionalLibraries  String  copyright  info  libraryClass  licence  name  version  Library  library  boolean  
[P14_Delete_Statement]^^164^^^^^160^167^setVersion ( version ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String name String version String licence String info [VARIABLES] List  libraries  optionalLibraries  String  copyright  info  libraryClass  licence  name  version  Library  library  boolean  
[P11_Insert_Donor_Statement]^super.setVersion ( version ) ;setVersion ( version ) ;^164^^^^^160^167^setVersion ( version ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String name String version String licence String info [VARIABLES] List  libraries  optionalLibraries  String  copyright  info  libraryClass  licence  name  version  Library  library  boolean  
[P5_Replace_Variable]^setLicenceName ( version ) ;^165^^^^^160^167^setLicenceName ( licence ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String name String version String licence String info [VARIABLES] List  libraries  optionalLibraries  String  copyright  info  libraryClass  licence  name  version  Library  library  boolean  
[P7_Replace_Invocation]^setName ( licence ) ;^165^^^^^160^167^setLicenceName ( licence ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String name String version String licence String info [VARIABLES] List  libraries  optionalLibraries  String  copyright  info  libraryClass  licence  name  version  Library  library  boolean  
[P14_Delete_Statement]^^165^166^^^^160^167^setLicenceName ( licence ) ; setInfo ( info ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String name String version String licence String info [VARIABLES] List  libraries  optionalLibraries  String  copyright  info  libraryClass  licence  name  version  Library  library  boolean  
[P11_Insert_Donor_Statement]^setName ( name ) ;setLicenceName ( licence ) ;^165^^^^^160^167^setLicenceName ( licence ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String name String version String licence String info [VARIABLES] List  libraries  optionalLibraries  String  copyright  info  libraryClass  licence  name  version  Library  library  boolean  
[P11_Insert_Donor_Statement]^super.setLicenceName ( licence ) ;setLicenceName ( licence ) ;^165^^^^^160^167^setLicenceName ( licence ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String name String version String licence String info [VARIABLES] List  libraries  optionalLibraries  String  copyright  info  libraryClass  licence  name  version  Library  library  boolean  
[P5_Replace_Variable]^setInfo ( version ) ;^166^^^^^160^167^setInfo ( info ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String name String version String licence String info [VARIABLES] List  libraries  optionalLibraries  String  copyright  info  libraryClass  licence  name  version  Library  library  boolean  
[P7_Replace_Invocation]^setName ( info ) ;^166^^^^^160^167^setInfo ( info ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String name String version String licence String info [VARIABLES] List  libraries  optionalLibraries  String  copyright  info  libraryClass  licence  name  version  Library  library  boolean  
[P8_Replace_Mix]^setInfo ( name ) ;^166^^^^^160^167^setInfo ( info ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String name String version String licence String info [VARIABLES] List  libraries  optionalLibraries  String  copyright  info  libraryClass  licence  name  version  Library  library  boolean  
[P14_Delete_Statement]^^166^^^^^160^167^setInfo ( info ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String name String version String licence String info [VARIABLES] List  libraries  optionalLibraries  String  copyright  info  libraryClass  licence  name  version  Library  library  boolean  
[P11_Insert_Donor_Statement]^setName ( name ) ;setInfo ( info ) ;^166^^^^^160^167^setInfo ( info ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String name String version String licence String info [VARIABLES] List  libraries  optionalLibraries  String  copyright  info  libraryClass  licence  name  version  Library  library  boolean  
[P11_Insert_Donor_Statement]^super.setInfo ( info ) ;setInfo ( info ) ;^166^^^^^160^167^setInfo ( info ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String name String version String licence String info [VARIABLES] List  libraries  optionalLibraries  String  copyright  info  libraryClass  licence  name  version  Library  library  boolean  
[P5_Replace_Variable]^this ( licenceName, version, licenceName, info ) ;^181^^^^^178^183^this ( name, version, licenceName, info ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String name String version String info String copyright String licenceName [VARIABLES] List  libraries  optionalLibraries  String  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P5_Replace_Variable]^this ( name, licenceName, licenceName, info ) ;^181^^^^^178^183^this ( name, version, licenceName, info ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String name String version String info String copyright String licenceName [VARIABLES] List  libraries  optionalLibraries  String  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P5_Replace_Variable]^this ( name, version, name, info ) ;^181^^^^^178^183^this ( name, version, licenceName, info ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String name String version String info String copyright String licenceName [VARIABLES] List  libraries  optionalLibraries  String  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P5_Replace_Variable]^this ( name, version, licenceName, version ) ;^181^^^^^178^183^this ( name, version, licenceName, info ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String name String version String info String copyright String licenceName [VARIABLES] List  libraries  optionalLibraries  String  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P5_Replace_Variable]^this (  version, licenceName, info ) ;^181^^^^^178^183^this ( name, version, licenceName, info ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String name String version String info String copyright String licenceName [VARIABLES] List  libraries  optionalLibraries  String  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P5_Replace_Variable]^this ( name,  licenceName, info ) ;^181^^^^^178^183^this ( name, version, licenceName, info ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String name String version String info String copyright String licenceName [VARIABLES] List  libraries  optionalLibraries  String  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P5_Replace_Variable]^this ( name, version,  info ) ;^181^^^^^178^183^this ( name, version, licenceName, info ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String name String version String info String copyright String licenceName [VARIABLES] List  libraries  optionalLibraries  String  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P5_Replace_Variable]^this ( name, version, licenceName ) ;^181^^^^^178^183^this ( name, version, licenceName, info ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String name String version String info String copyright String licenceName [VARIABLES] List  libraries  optionalLibraries  String  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P5_Replace_Variable]^this ( licenceName, version, name, info ) ;^181^^^^^178^183^this ( name, version, licenceName, info ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String name String version String info String copyright String licenceName [VARIABLES] List  libraries  optionalLibraries  String  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P5_Replace_Variable]^this ( name, info, licenceName, version ) ;^181^^^^^178^183^this ( name, version, licenceName, info ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String name String version String info String copyright String licenceName [VARIABLES] List  libraries  optionalLibraries  String  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P5_Replace_Variable]^this ( info, version, licenceName, name ) ;^181^^^^^178^183^this ( name, version, licenceName, info ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String name String version String info String copyright String licenceName [VARIABLES] List  libraries  optionalLibraries  String  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P8_Replace_Mix]^this ( name, version, licenceName, name ) ;^181^^^^^178^183^this ( name, version, licenceName, info ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String name String version String info String copyright String licenceName [VARIABLES] List  libraries  optionalLibraries  String  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P14_Delete_Statement]^^181^^^^^178^183^this ( name, version, licenceName, info ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String name String version String info String copyright String licenceName [VARIABLES] List  libraries  optionalLibraries  String  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P5_Replace_Variable]^setCopyright ( licenceName ) ;^182^^^^^178^183^setCopyright ( copyright ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String name String version String info String copyright String licenceName [VARIABLES] List  libraries  optionalLibraries  String  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P7_Replace_Invocation]^setVersion ( copyright ) ;^182^^^^^178^183^setCopyright ( copyright ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String name String version String info String copyright String licenceName [VARIABLES] List  libraries  optionalLibraries  String  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P8_Replace_Mix]^setCopyright ( name ) ;^182^^^^^178^183^setCopyright ( copyright ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String name String version String info String copyright String licenceName [VARIABLES] List  libraries  optionalLibraries  String  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P14_Delete_Statement]^^182^^^^^178^183^setCopyright ( copyright ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String name String version String info String copyright String licenceName [VARIABLES] List  libraries  optionalLibraries  String  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P5_Replace_Variable]^return licenceName;^96^^^^^95^97^return this.libraryClass;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getLibraryClass [RETURN_TYPE] String   [VARIABLES] List  libraries  optionalLibraries  String  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P8_Replace_Mix]^return version;^96^^^^^95^97^return this.libraryClass;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getLibraryClass [RETURN_TYPE] String   [VARIABLES] List  libraries  optionalLibraries  String  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P2_Replace_Operator]^if  ( this.library != null )  {^105^^^^^104^109^if  ( this.library == null )  {^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getLibrary [RETURN_TYPE] Library   [VARIABLES] List  libraries  optionalLibraries  String  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P5_Replace_Variable]^if  ( library == null )  {^105^^^^^104^109^if  ( this.library == null )  {^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getLibrary [RETURN_TYPE] Library   [VARIABLES] List  libraries  optionalLibraries  String  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P8_Replace_Mix]^if  ( this.library == true )  {^105^^^^^104^109^if  ( this.library == null )  {^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getLibrary [RETURN_TYPE] Library   [VARIABLES] List  libraries  optionalLibraries  String  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P9_Replace_Statement]^if  ( libraryClass == null )  {^105^^^^^104^109^if  ( this.library == null )  {^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getLibrary [RETURN_TYPE] Library   [VARIABLES] List  libraries  optionalLibraries  String  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P9_Replace_Statement]^if  ( classname == null )  {^105^^^^^104^109^if  ( this.library == null )  {^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getLibrary [RETURN_TYPE] Library   [VARIABLES] List  libraries  optionalLibraries  String  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P15_Unwrap_Block]^this.library = loadLibrary(this.libraryClass);^105^106^107^^^104^109^if  ( this.library == null )  { this.library = loadLibrary ( this.libraryClass ) ; }^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getLibrary [RETURN_TYPE] Library   [VARIABLES] List  libraries  optionalLibraries  String  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P16_Remove_Block]^^105^106^107^^^104^109^if  ( this.library == null )  { this.library = loadLibrary ( this.libraryClass ) ; }^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getLibrary [RETURN_TYPE] Library   [VARIABLES] List  libraries  optionalLibraries  String  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P5_Replace_Variable]^this.library = loadLibrary ( licence ) ;^106^^^^^104^109^this.library = loadLibrary ( this.libraryClass ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getLibrary [RETURN_TYPE] Library   [VARIABLES] List  libraries  optionalLibraries  String  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P7_Replace_Invocation]^this.library = getLibrary ( this.libraryClass ) ;^106^^^^^104^109^this.library = loadLibrary ( this.libraryClass ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getLibrary [RETURN_TYPE] Library   [VARIABLES] List  libraries  optionalLibraries  String  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P8_Replace_Mix]^this.library  =  this.library ;^106^^^^^104^109^this.library = loadLibrary ( this.libraryClass ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getLibrary [RETURN_TYPE] Library   [VARIABLES] List  libraries  optionalLibraries  String  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P11_Insert_Donor_Statement]^this.libraryClass = libraryClass;this.library = loadLibrary ( this.libraryClass ) ;^106^^^^^104^109^this.library = loadLibrary ( this.libraryClass ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getLibrary [RETURN_TYPE] Library   [VARIABLES] List  libraries  optionalLibraries  String  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P13_Insert_Block]^if  (  ( this.library )  == null )  {     this.library = loadLibrary ( this.libraryClass ) ; }^106^^^^^104^109^[Delete]^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getLibrary [RETURN_TYPE] Library   [VARIABLES] List  libraries  optionalLibraries  String  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P5_Replace_Variable]^this.library = loadLibrary ( name ) ;^106^^^^^104^109^this.library = loadLibrary ( this.libraryClass ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getLibrary [RETURN_TYPE] Library   [VARIABLES] List  libraries  optionalLibraries  String  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P8_Replace_Mix]^this.library = loadLibrary ( licenceName ) ;^106^^^^^104^109^this.library = loadLibrary ( this.libraryClass ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getLibrary [RETURN_TYPE] Library   [VARIABLES] List  libraries  optionalLibraries  String  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P14_Delete_Statement]^^106^^^^^104^109^this.library = loadLibrary ( this.libraryClass ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getLibrary [RETURN_TYPE] Library   [VARIABLES] List  libraries  optionalLibraries  String  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P11_Insert_Donor_Statement]^this.libraries.add ( library ) ;this.library = loadLibrary ( this.libraryClass ) ;^106^^^^^104^109^this.library = loadLibrary ( this.libraryClass ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getLibrary [RETURN_TYPE] Library   [VARIABLES] List  libraries  optionalLibraries  String  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P8_Replace_Mix]^this.library  = null ;^106^^^^^104^109^this.library = loadLibrary ( this.libraryClass ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getLibrary [RETURN_TYPE] Library   [VARIABLES] List  libraries  optionalLibraries  String  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P5_Replace_Variable]^return library;^108^^^^^104^109^return this.library;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getLibrary [RETURN_TYPE] Library   [VARIABLES] List  libraries  optionalLibraries  String  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P2_Replace_Operator]^if  ( classname != null )  {^112^^^^^111^132^if  ( classname == null )  {^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] boolean  List  libraries  optionalLibraries  Class  c  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  Method  m  Exception  e  
[P5_Replace_Variable]^if  ( name == null )  {^112^^^^^111^132^if  ( classname == null )  {^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] boolean  List  libraries  optionalLibraries  Class  c  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  Method  m  Exception  e  
[P8_Replace_Mix]^if  ( classname == true )  {^112^^^^^111^132^if  ( classname == null )  {^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] boolean  List  libraries  optionalLibraries  Class  c  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  Method  m  Exception  e  
[P9_Replace_Statement]^if  ( library == null )  {^112^^^^^111^132^if  ( classname == null )  {^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] boolean  List  libraries  optionalLibraries  Class  c  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  Method  m  Exception  e  
[P9_Replace_Statement]^if  ( libraryClass == null )  {^112^^^^^111^132^if  ( classname == null )  {^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] boolean  List  libraries  optionalLibraries  Class  c  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  Method  m  Exception  e  
[P9_Replace_Statement]^if  ( this.library == null )  {^112^^^^^111^132^if  ( classname == null )  {^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] boolean  List  libraries  optionalLibraries  Class  c  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  Method  m  Exception  e  
[P9_Replace_Statement]^if  ( l != null )  {^112^^^^^111^132^if  ( classname == null )  {^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] boolean  List  libraries  optionalLibraries  Class  c  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  Method  m  Exception  e  
[P15_Unwrap_Block]^return null;^112^113^114^^^111^132^if  ( classname == null )  { return null; }^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] boolean  List  libraries  optionalLibraries  Class  c  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  Method  m  Exception  e  
[P16_Remove_Block]^^112^113^114^^^111^132^if  ( classname == null )  { return null; }^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] boolean  List  libraries  optionalLibraries  Class  c  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  Method  m  Exception  e  
[P8_Replace_Mix]^return true;^113^^^^^111^132^return null;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] boolean  List  libraries  optionalLibraries  Class  c  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  Method  m  Exception  e  
[P8_Replace_Mix]^return  ( Library )  m.invoke ( false,  ( Object[] )  false ) ;^120^^^^^111^132^return  ( Library )  m.invoke ( null,  ( Object[] )  null ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] boolean  List  libraries  optionalLibraries  Class  c  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  Method  m  Exception  e  
[P3_Replace_Literal]^Method m = c.getMethod ( "Instanc",  ( Class[] )  null ) ;^119^^^^^111^132^Method m = c.getMethod ( "getInstance",  ( Class[] )  null ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] boolean  List  libraries  optionalLibraries  Class  c  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  Method  m  Exception  e  
[P3_Replace_Literal]^Method m = c.getMethod ( "getInstanc",  ( Class[] )  null ) ;^119^^^^^111^132^Method m = c.getMethod ( "getInstance",  ( Class[] )  null ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] boolean  List  libraries  optionalLibraries  Class  c  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  Method  m  Exception  e  
[P7_Replace_Invocation]^Method m = c .newInstance (  )  ;^119^^^^^111^132^Method m = c.getMethod ( "getInstance",  ( Class[] )  null ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] boolean  List  libraries  optionalLibraries  Class  c  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  Method  m  Exception  e  
[P14_Delete_Statement]^^119^120^^^^111^132^Method m = c.getMethod ( "getInstance",  ( Class[] )  null ) ; return  ( Library )  m.invoke ( null,  ( Object[] )  null ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] boolean  List  libraries  optionalLibraries  Class  c  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  Method  m  Exception  e  
[P14_Delete_Statement]^^120^^^^^111^132^return  ( Library )  m.invoke ( null,  ( Object[] )  null ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] boolean  List  libraries  optionalLibraries  Class  c  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  Method  m  Exception  e  
[P5_Replace_Variable]^Class c = ObjectUtilities.getClassLoader ( getClass (  )  ) .loadClass ( version ) ;^116^117^^^^111^132^Class c = ObjectUtilities.getClassLoader ( getClass (  )  ) .loadClass ( classname ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] boolean  List  libraries  optionalLibraries  Class  c  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  Method  m  Exception  e  
[P7_Replace_Invocation]^Class c = ObjectUtilities.getClassLoader ( getClass (  )  ) .setName ( classname ) ;^116^117^^^^111^132^Class c = ObjectUtilities.getClassLoader ( getClass (  )  ) .loadClass ( classname ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] boolean  List  libraries  optionalLibraries  Class  c  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  Method  m  Exception  e  
[P7_Replace_Invocation]^Class c = ObjectUtilities.getClassLoader ( getClass (  )  )  .setLicenceName ( classname )  ;^116^117^^^^111^132^Class c = ObjectUtilities.getClassLoader ( getClass (  )  ) .loadClass ( classname ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] boolean  List  libraries  optionalLibraries  Class  c  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  Method  m  Exception  e  
[P7_Replace_Invocation]^Class c = ObjectUtilities.ObjectLoader ( getClass (  )  ) .loadClass ( classname ) ;^116^117^^^^111^132^Class c = ObjectUtilities.getClassLoader ( getClass (  )  ) .loadClass ( classname ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] boolean  List  libraries  optionalLibraries  Class  c  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  Method  m  Exception  e  
[P8_Replace_Mix]^Class c = ObjectUtilities.getClassLoader ( getClass (  )  ) .setName ( licenceName ) ;^116^117^^^^111^132^Class c = ObjectUtilities.getClassLoader ( getClass (  )  ) .loadClass ( classname ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] boolean  List  libraries  optionalLibraries  Class  c  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  Method  m  Exception  e  
[P3_Replace_Literal]^Method m = c.getMethod ( "getInstancen",  ( Class[] )  null ) ;^119^^^^^111^132^Method m = c.getMethod ( "getInstance",  ( Class[] )  null ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] boolean  List  libraries  optionalLibraries  Class  c  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  Method  m  Exception  e  
[P14_Delete_Statement]^^116^117^^^^111^132^Class c = ObjectUtilities.getClassLoader ( getClass (  )  ) .loadClass ( classname ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] boolean  List  libraries  optionalLibraries  Class  c  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  Method  m  Exception  e  
[P8_Replace_Mix]^Class c = ObjectUtilities .Library (  )  .loadClass ( classname ) ;^116^117^^^^111^132^Class c = ObjectUtilities.getClassLoader ( getClass (  )  ) .loadClass ( classname ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] boolean  List  libraries  optionalLibraries  Class  c  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  Method  m  Exception  e  
[P7_Replace_Invocation]^Object (  )  ) .loadClass ( classname ) ;^117^^^^^111^132^getClass (  )  ) .loadClass ( classname ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] boolean  List  libraries  optionalLibraries  Class  c  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  Method  m  Exception  e  
[P14_Delete_Statement]^^117^^^^^111^132^getClass (  )  ) .loadClass ( classname ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] boolean  List  libraries  optionalLibraries  Class  c  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  Method  m  Exception  e  
[P3_Replace_Literal]^Method m = c.getMethod ( "Ins",  ( Class[] )  null ) ;^119^^^^^111^132^Method m = c.getMethod ( "getInstance",  ( Class[] )  null ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] boolean  List  libraries  optionalLibraries  Class  c  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  Method  m  Exception  e  
[P8_Replace_Mix]^return  ( Library )  c .getMethod ( licenceName , null )  ;^125^^^^^111^132^return  ( Library )  c.newInstance (  ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] boolean  List  libraries  optionalLibraries  Class  c  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  Method  m  Exception  e  
[P14_Delete_Statement]^^125^^^^^111^132^return  ( Library )  c.newInstance (  ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] boolean  List  libraries  optionalLibraries  Class  c  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  Method  m  Exception  e  
[P8_Replace_Mix]^return  ( Library )  m.invoke ( this,  ( Object[] )  this ) ;^120^^^^^111^132^return  ( Library )  m.invoke ( null,  ( Object[] )  null ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] boolean  List  libraries  optionalLibraries  Class  c  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  Method  m  Exception  e  
[P3_Replace_Literal]^Method m = c.getMethod ( "nsta",  ( Class[] )  null ) ;^119^^^^^111^132^Method m = c.getMethod ( "getInstance",  ( Class[] )  null ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] boolean  List  libraries  optionalLibraries  Class  c  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  Method  m  Exception  e  
[P3_Replace_Literal]^Method m = c.getMethod ( "et",  ( Class[] )  null ) ;^119^^^^^111^132^Method m = c.getMethod ( "getInstance",  ( Class[] )  null ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] boolean  List  libraries  optionalLibraries  Class  c  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  Method  m  Exception  e  
[P8_Replace_Mix]^return  ( Library )  m.invoke ( true,  ( Object[] )  true ) ;^120^^^^^111^132^return  ( Library )  m.invoke ( null,  ( Object[] )  null ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] boolean  List  libraries  optionalLibraries  Class  c  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  Method  m  Exception  e  
[P8_Replace_Mix]^return this;^130^^^^^111^132^return null;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] boolean  List  libraries  optionalLibraries  Class  c  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  Method  m  Exception  e  
[P8_Replace_Mix]^Class c = ObjectUtilities.getClassLoader ( getClass (  )  )  .setLicenceName ( copyright )  ;^116^117^^^^111^132^Class c = ObjectUtilities.getClassLoader ( getClass (  )  ) .loadClass ( classname ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] boolean  List  libraries  optionalLibraries  Class  c  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  Method  m  Exception  e  
[P3_Replace_Literal]^Method m = c.getMethod ( "getInstancetIn",  ( Class[] )  null ) ;^119^^^^^111^132^Method m = c.getMethod ( "getInstance",  ( Class[] )  null ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] boolean  List  libraries  optionalLibraries  Class  c  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  Method  m  Exception  e  
[P8_Replace_Mix]^Class c = ObjectUtilities.ObjectLoader ( getClass (  )  ) .loadClass ( licenceName ) ;^116^117^^^^111^132^Class c = ObjectUtilities.getClassLoader ( getClass (  )  ) .loadClass ( classname ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] boolean  List  libraries  optionalLibraries  Class  c  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  Method  m  Exception  e  
[P3_Replace_Literal]^Method m = c.getMethod ( "getInstanceI",  ( Class[] )  null ) ;^119^^^^^111^132^Method m = c.getMethod ( "getInstance",  ( Class[] )  null ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] boolean  List  libraries  optionalLibraries  Class  c  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  Method  m  Exception  e  
[P5_Replace_Variable]^return licence;^191^^^^^190^192^return this.copyright;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getCopyright [RETURN_TYPE] String   [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P5_Replace_Variable]^this.copyright = licenceName;^200^^^^^199^201^this.copyright = copyright;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] setCopyright [RETURN_TYPE] void   String copyright [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P8_Replace_Mix]^this.copyright =  version;^200^^^^^199^201^this.copyright = copyright;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] setCopyright [RETURN_TYPE] void   String copyright [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P14_Delete_Statement]^^209^^^^^208^210^super.setInfo ( info ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] setInfo [RETURN_TYPE] void   String info [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P11_Insert_Donor_Statement]^super.setVersion ( version ) ;super.setInfo ( info ) ;^209^^^^^208^210^super.setInfo ( info ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] setInfo [RETURN_TYPE] void   String info [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P11_Insert_Donor_Statement]^setInfo ( info ) ;super.setInfo ( info ) ;^209^^^^^208^210^super.setInfo ( info ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] setInfo [RETURN_TYPE] void   String info [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P11_Insert_Donor_Statement]^super.setName ( name ) ;super.setInfo ( info ) ;^209^^^^^208^210^super.setInfo ( info ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] setInfo [RETURN_TYPE] void   String info [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P11_Insert_Donor_Statement]^super.setLicenceName ( licence ) ;super.setInfo ( info ) ;^209^^^^^208^210^super.setInfo ( info ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] setInfo [RETURN_TYPE] void   String info [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P14_Delete_Statement]^^218^^^^^217^219^super.setLicenceName ( licence ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] setLicenceName [RETURN_TYPE] void   String licence [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P11_Insert_Donor_Statement]^setLicenceName ( licence ) ;super.setLicenceName ( licence ) ;^218^^^^^217^219^super.setLicenceName ( licence ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] setLicenceName [RETURN_TYPE] void   String licence [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P11_Insert_Donor_Statement]^super.setName ( name ) ;super.setLicenceName ( licence ) ;^218^^^^^217^219^super.setLicenceName ( licence ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] setLicenceName [RETURN_TYPE] void   String licence [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P11_Insert_Donor_Statement]^super.setInfo ( info ) ;super.setLicenceName ( licence ) ;^218^^^^^217^219^super.setLicenceName ( licence ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] setLicenceName [RETURN_TYPE] void   String licence [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P7_Replace_Invocation]^super .setLicenceName ( licenceName )  ;^227^^^^^226^228^super.setName ( name ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] setName [RETURN_TYPE] void   String name [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P14_Delete_Statement]^^227^^^^^226^228^super.setName ( name ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] setName [RETURN_TYPE] void   String name [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P11_Insert_Donor_Statement]^super.setVersion ( version ) ;super.setName ( name ) ;^227^^^^^226^228^super.setName ( name ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] setName [RETURN_TYPE] void   String name [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P11_Insert_Donor_Statement]^setName ( name ) ;super.setName ( name ) ;^227^^^^^226^228^super.setName ( name ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] setName [RETURN_TYPE] void   String name [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P11_Insert_Donor_Statement]^super.setInfo ( info ) ;super.setName ( name ) ;^227^^^^^226^228^super.setName ( name ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] setName [RETURN_TYPE] void   String name [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P11_Insert_Donor_Statement]^super.setLicenceName ( licence ) ;super.setName ( name ) ;^227^^^^^226^228^super.setName ( name ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] setName [RETURN_TYPE] void   String name [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P7_Replace_Invocation]^super .setInfo ( classname )  ;^236^^^^^235^237^super.setVersion ( version ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] setVersion [RETURN_TYPE] void   String version [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P14_Delete_Statement]^^236^^^^^235^237^super.setVersion ( version ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] setVersion [RETURN_TYPE] void   String version [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P11_Insert_Donor_Statement]^super.setName ( name ) ;super.setVersion ( version ) ;^236^^^^^235^237^super.setVersion ( version ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] setVersion [RETURN_TYPE] void   String version [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P11_Insert_Donor_Statement]^super.setInfo ( info ) ;super.setVersion ( version ) ;^236^^^^^235^237^super.setVersion ( version ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] setVersion [RETURN_TYPE] void   String version [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P11_Insert_Donor_Statement]^setVersion ( version ) ;super.setVersion ( version ) ;^236^^^^^235^237^super.setVersion ( version ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] setVersion [RETURN_TYPE] void   String version [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P3_Replace_Literal]^return  ( Library[] )  this.libraries.toArray ( new Library[this.libraries.size() + 4 ] ) ;^245^246^^^^244^247^return  ( Library[] )  this.libraries.toArray ( new Library[this.libraries.size (  ) ] ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getLibraries [RETURN_TYPE] Library[]   [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P5_Replace_Variable]^return  ( Library[] )  optionalLibraries.toArray ( new Library[this.libraries.size (  ) ] ) ;^245^246^^^^244^247^return  ( Library[] )  this.libraries.toArray ( new Library[this.libraries.size (  ) ] ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getLibraries [RETURN_TYPE] Library[]   [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P7_Replace_Invocation]^return  ( Library[] )  this.libraries.size ( new Library[this.libraries.size (  ) ] ) ;^245^246^^^^244^247^return  ( Library[] )  this.libraries.toArray ( new Library[this.libraries.size (  ) ] ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getLibraries [RETURN_TYPE] Library[]   [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P3_Replace_Literal]^return  ( Library[] )  this.libraries.toArray ( new Library[this.libraries.size() + 0 ] ) ;^245^246^^^^244^247^return  ( Library[] )  this.libraries.toArray ( new Library[this.libraries.size (  ) ] ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getLibraries [RETURN_TYPE] Library[]   [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P14_Delete_Statement]^^245^246^^^^244^247^return  ( Library[] )  this.libraries.toArray ( new Library[this.libraries.size (  ) ] ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getLibraries [RETURN_TYPE] Library[]   [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P3_Replace_Literal]^( new Library[this.libraries.size() - 0 ] ) ;^246^^^^^244^247^( new Library[this.libraries.size (  ) ] ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getLibraries [RETURN_TYPE] Library[]   [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P14_Delete_Statement]^^246^^^^^244^247^( new Library[this.libraries.size (  ) ] ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getLibraries [RETURN_TYPE] Library[]   [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P2_Replace_Operator]^if  ( library != null )  {^255^^^^^254^259^if  ( library == null )  {^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] addLibrary [RETURN_TYPE] void   Library library [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P8_Replace_Mix]^if  ( library == false )  {^255^^^^^254^259^if  ( library == null )  {^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] addLibrary [RETURN_TYPE] void   Library library [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P9_Replace_Statement]^if  ( libraryClass == null )  {^255^^^^^254^259^if  ( library == null )  {^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] addLibrary [RETURN_TYPE] void   Library library [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P9_Replace_Statement]^if  ( this.library == null )  {^255^^^^^254^259^if  ( library == null )  {^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] addLibrary [RETURN_TYPE] void   Library library [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P9_Replace_Statement]^if  ( classname == null )  {^255^^^^^254^259^if  ( library == null )  {^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] addLibrary [RETURN_TYPE] void   Library library [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P9_Replace_Statement]^if  ( l != null )  {^255^^^^^254^259^if  ( library == null )  {^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] addLibrary [RETURN_TYPE] void   Library library [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P15_Unwrap_Block]^throw new java.lang.NullPointerException();^255^256^257^^^254^259^if  ( library == null )  { throw new NullPointerException  (" ")  ; }^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] addLibrary [RETURN_TYPE] void   Library library [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P16_Remove_Block]^^255^256^257^^^254^259^if  ( library == null )  { throw new NullPointerException  (" ")  ; }^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] addLibrary [RETURN_TYPE] void   Library library [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P13_Insert_Block]^if  ( library == null )  {     throw new NullPointerException ( "Library must not be null." ) ; }^255^^^^^254^259^[Delete]^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] addLibrary [RETURN_TYPE] void   Library library [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P13_Insert_Block]^if  ( libraryClass == null )  {     throw new NullPointerException ( "Library classname must be given." ) ; }^255^^^^^254^259^[Delete]^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] addLibrary [RETURN_TYPE] void   Library library [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P13_Insert_Block]^if  ( libraryClass == null )  {     throw new NullPointerException ( "LibraryClass must not be null." ) ; }^255^^^^^254^259^[Delete]^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] addLibrary [RETURN_TYPE] void   Library library [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P13_Insert_Block]^if  ( library == null )  {     throw new NullPointerException ( "Library must be given." ) ; }^255^^^^^254^259^[Delete]^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] addLibrary [RETURN_TYPE] void   Library library [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P11_Insert_Donor_Statement]^throw new NullPointerException ( "LibraryClass must not be null." ) ;throw new NullPointerException  (" ")  ;^256^^^^^254^259^throw new NullPointerException  (" ")  ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] addLibrary [RETURN_TYPE] void   Library library [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P13_Insert_Block]^if  ( library == null )  {     throw new NullPointerException (  ) ; }^256^^^^^254^259^[Delete]^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] addLibrary [RETURN_TYPE] void   Library library [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P7_Replace_Invocation]^this.libraries.get ( library ) ;^258^^^^^254^259^this.libraries.add ( library ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] addLibrary [RETURN_TYPE] void   Library library [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P14_Delete_Statement]^^258^^^^^254^259^this.libraries.add ( library ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] addLibrary [RETURN_TYPE] void   Library library [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P11_Insert_Donor_Statement]^this.library = loadLibrary ( this.libraryClass ) ;this.libraries.add ( library ) ;^258^^^^^254^259^this.libraries.add ( library ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] addLibrary [RETURN_TYPE] void   Library library [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P11_Insert_Donor_Statement]^libraries.add ( l ) ;this.libraries.add ( library ) ;^258^^^^^254^259^this.libraries.add ( library ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] addLibrary [RETURN_TYPE] void   Library library [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  library  boolean  
[P1_Replace_Type]^Set  libraries = new  Set  (  ) ;^267^^^^^266^277^ArrayList libraries = new ArrayList (  ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getOptionalLibraries [RETURN_TYPE] Library[]   [VARIABLES] boolean  ArrayList  libraries  List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  int  i  OptionalLibraryHolder  holder  
[P1_Replace_Type]^LinkedHashSet  libraries = new  LinkedHashSet  (  ) ;^267^^^^^266^277^ArrayList libraries = new ArrayList (  ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getOptionalLibraries [RETURN_TYPE] Library[]   [VARIABLES] boolean  ArrayList  libraries  List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  int  i  OptionalLibraryHolder  holder  
[P2_Replace_Operator]^if  ( l == null )  {^272^^^^^266^277^if  ( l != null )  {^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getOptionalLibraries [RETURN_TYPE] Library[]   [VARIABLES] boolean  ArrayList  libraries  List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  int  i  OptionalLibraryHolder  holder  
[P8_Replace_Mix]^if  ( l != false )  {^272^^^^^266^277^if  ( l != null )  {^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getOptionalLibraries [RETURN_TYPE] Library[]   [VARIABLES] boolean  ArrayList  libraries  List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  int  i  OptionalLibraryHolder  holder  
[P9_Replace_Statement]^if  ( library == null )  {^272^^^^^266^277^if  ( l != null )  {^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getOptionalLibraries [RETURN_TYPE] Library[]   [VARIABLES] boolean  ArrayList  libraries  List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  int  i  OptionalLibraryHolder  holder  
[P9_Replace_Statement]^if  ( classname == null )  {^272^^^^^266^277^if  ( l != null )  {^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getOptionalLibraries [RETURN_TYPE] Library[]   [VARIABLES] boolean  ArrayList  libraries  List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  int  i  OptionalLibraryHolder  holder  
[P15_Unwrap_Block]^libraries.add(l);^272^273^274^^^266^277^if  ( l != null )  { libraries.add ( l ) ; }^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getOptionalLibraries [RETURN_TYPE] Library[]   [VARIABLES] boolean  ArrayList  libraries  List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  int  i  OptionalLibraryHolder  holder  
[P16_Remove_Block]^^272^273^274^^^266^277^if  ( l != null )  { libraries.add ( l ) ; }^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getOptionalLibraries [RETURN_TYPE] Library[]   [VARIABLES] boolean  ArrayList  libraries  List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  int  i  OptionalLibraryHolder  holder  
[P5_Replace_Variable]^libraries.add ( library ) ;^273^^^^^266^277^libraries.add ( l ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getOptionalLibraries [RETURN_TYPE] Library[]   [VARIABLES] boolean  ArrayList  libraries  List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  int  i  OptionalLibraryHolder  holder  
[P14_Delete_Statement]^^273^^^^^266^277^libraries.add ( l ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getOptionalLibraries [RETURN_TYPE] Library[]   [VARIABLES] boolean  ArrayList  libraries  List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  int  i  OptionalLibraryHolder  holder  
[P11_Insert_Donor_Statement]^this.libraries.add ( library ) ;libraries.add ( l ) ;^273^^^^^266^277^libraries.add ( l ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getOptionalLibraries [RETURN_TYPE] Library[]   [VARIABLES] boolean  ArrayList  libraries  List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  int  i  OptionalLibraryHolder  holder  
[P1_Replace_Type]^for  (  short  i = 0; i < this.optionalLibraries.size (  ) ; i++ )  {^268^^^^^266^277^for  ( int i = 0; i < this.optionalLibraries.size (  ) ; i++ )  {^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getOptionalLibraries [RETURN_TYPE] Library[]   [VARIABLES] boolean  ArrayList  libraries  List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  int  i  OptionalLibraryHolder  holder  
[P2_Replace_Operator]^for  ( int i = 0; i > this.optionalLibraries.size (  ) ; i++ )  {^268^^^^^266^277^for  ( int i = 0; i < this.optionalLibraries.size (  ) ; i++ )  {^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getOptionalLibraries [RETURN_TYPE] Library[]   [VARIABLES] boolean  ArrayList  libraries  List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  int  i  OptionalLibraryHolder  holder  
[P3_Replace_Literal]^for  ( int i = i; i < this.optionalLibraries.size (  ) ; i++ )  {^268^^^^^266^277^for  ( int i = 0; i < this.optionalLibraries.size (  ) ; i++ )  {^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getOptionalLibraries [RETURN_TYPE] Library[]   [VARIABLES] boolean  ArrayList  libraries  List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  int  i  OptionalLibraryHolder  holder  
[P3_Replace_Literal]^for  ( int i = 0; i < this.optionalLibraries.size() - 5 ; i++ )  {^268^^^^^266^277^for  ( int i = 0; i < this.optionalLibraries.size (  ) ; i++ )  {^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getOptionalLibraries [RETURN_TYPE] Library[]   [VARIABLES] boolean  ArrayList  libraries  List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  int  i  OptionalLibraryHolder  holder  
[P5_Replace_Variable]^for  ( int i = 0; i < optionalLibraries.size (  ) ; i++ )  {^268^^^^^266^277^for  ( int i = 0; i < this.optionalLibraries.size (  ) ; i++ )  {^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getOptionalLibraries [RETURN_TYPE] Library[]   [VARIABLES] boolean  ArrayList  libraries  List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  int  i  OptionalLibraryHolder  holder  
[P5_Replace_Variable]^for  ( this.optionalLibrariesnt i = 0; i < i.size (  ) ; i++ )  {^268^^^^^266^277^for  ( int i = 0; i < this.optionalLibraries.size (  ) ; i++ )  {^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getOptionalLibraries [RETURN_TYPE] Library[]   [VARIABLES] boolean  ArrayList  libraries  List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  int  i  OptionalLibraryHolder  holder  
[P5_Replace_Variable]^if  ( library != null )  {^272^^^^^266^277^if  ( l != null )  {^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getOptionalLibraries [RETURN_TYPE] Library[]   [VARIABLES] boolean  ArrayList  libraries  List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  int  i  OptionalLibraryHolder  holder  
[P8_Replace_Mix]^if  ( library != this )  {^272^^^^^266^277^if  ( l != null )  {^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getOptionalLibraries [RETURN_TYPE] Library[]   [VARIABLES] boolean  ArrayList  libraries  List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  int  i  OptionalLibraryHolder  holder  
[P5_Replace_Variable]^OptionalLibraryHolder holder = ( OptionalLibraryHolder )  optionalLibraries.get ( i ) ;^269^270^^^^266^277^OptionalLibraryHolder holder = ( OptionalLibraryHolder )  this.optionalLibraries.get ( i ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getOptionalLibraries [RETURN_TYPE] Library[]   [VARIABLES] boolean  ArrayList  libraries  List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  int  i  OptionalLibraryHolder  holder  
[P5_Replace_Variable]^OptionalLibraryHolder holder = ( OptionalLibraryHolder )  i.get ( this.optionalLibraries ) ;^269^270^^^^266^277^OptionalLibraryHolder holder = ( OptionalLibraryHolder )  this.optionalLibraries.get ( i ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getOptionalLibraries [RETURN_TYPE] Library[]   [VARIABLES] boolean  ArrayList  libraries  List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  int  i  OptionalLibraryHolder  holder  
[P7_Replace_Invocation]^OptionalLibraryHolder holder = ( OptionalLibraryHolder )  this.optionalLibraries.add ( i ) ;^269^270^^^^266^277^OptionalLibraryHolder holder = ( OptionalLibraryHolder )  this.optionalLibraries.get ( i ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getOptionalLibraries [RETURN_TYPE] Library[]   [VARIABLES] boolean  ArrayList  libraries  List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  int  i  OptionalLibraryHolder  holder  
[P8_Replace_Mix]^OptionalLibraryHolder holder = ( OptionalLibraryHolder )  optionalLibraries.add ( i ) ;^269^270^^^^266^277^OptionalLibraryHolder holder = ( OptionalLibraryHolder )  this.optionalLibraries.get ( i ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getOptionalLibraries [RETURN_TYPE] Library[]   [VARIABLES] boolean  ArrayList  libraries  List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  int  i  OptionalLibraryHolder  holder  
[P7_Replace_Invocation]^Library l = holder.loadLibrary (  ) ;^271^^^^^266^277^Library l = holder.getLibrary (  ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getOptionalLibraries [RETURN_TYPE] Library[]   [VARIABLES] boolean  ArrayList  libraries  List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  int  i  OptionalLibraryHolder  holder  
[P5_Replace_Variable]^( OptionalLibraryHolder )  optionalLibraries.get ( i ) ;^270^^^^^266^277^( OptionalLibraryHolder )  this.optionalLibraries.get ( i ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getOptionalLibraries [RETURN_TYPE] Library[]   [VARIABLES] boolean  ArrayList  libraries  List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  int  i  OptionalLibraryHolder  holder  
[P5_Replace_Variable]^( OptionalLibraryHolder )  i.get ( this.optionalLibraries ) ;^270^^^^^266^277^( OptionalLibraryHolder )  this.optionalLibraries.get ( i ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getOptionalLibraries [RETURN_TYPE] Library[]   [VARIABLES] boolean  ArrayList  libraries  List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  int  i  OptionalLibraryHolder  holder  
[P7_Replace_Invocation]^( OptionalLibraryHolder )  this.optionalLibraries.add ( i ) ;^270^^^^^266^277^( OptionalLibraryHolder )  this.optionalLibraries.get ( i ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getOptionalLibraries [RETURN_TYPE] Library[]   [VARIABLES] boolean  ArrayList  libraries  List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  int  i  OptionalLibraryHolder  holder  
[P8_Replace_Mix]^( OptionalLibraryHolder )  optionalLibraries.add ( i ) ;^270^^^^^266^277^( OptionalLibraryHolder )  this.optionalLibraries.get ( i ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getOptionalLibraries [RETURN_TYPE] Library[]   [VARIABLES] boolean  ArrayList  libraries  List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  int  i  OptionalLibraryHolder  holder  
[P14_Delete_Statement]^^270^271^^^^266^277^( OptionalLibraryHolder )  this.optionalLibraries.get ( i ) ; Library l = holder.getLibrary (  ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getOptionalLibraries [RETURN_TYPE] Library[]   [VARIABLES] boolean  ArrayList  libraries  List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  int  i  OptionalLibraryHolder  holder  
[P14_Delete_Statement]^^271^^^^^266^277^Library l = holder.getLibrary (  ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getOptionalLibraries [RETURN_TYPE] Library[]   [VARIABLES] boolean  ArrayList  libraries  List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  int  i  OptionalLibraryHolder  holder  
[P1_Replace_Type]^for  (  long  i = 0; i < this.optionalLibraries.size (  ) ; i++ )  {^268^^^^^266^277^for  ( int i = 0; i < this.optionalLibraries.size (  ) ; i++ )  {^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getOptionalLibraries [RETURN_TYPE] Library[]   [VARIABLES] boolean  ArrayList  libraries  List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  int  i  OptionalLibraryHolder  holder  
[P3_Replace_Literal]^for  ( int i = -7; i < this.optionalLibraries.size (  ) ; i++ )  {^268^^^^^266^277^for  ( int i = 0; i < this.optionalLibraries.size (  ) ; i++ )  {^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getOptionalLibraries [RETURN_TYPE] Library[]   [VARIABLES] boolean  ArrayList  libraries  List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  int  i  OptionalLibraryHolder  holder  
[P3_Replace_Literal]^for  ( int i = 0; i < this.optionalLibraries.size() + 1 ; i++ )  {^268^^^^^266^277^for  ( int i = 0; i < this.optionalLibraries.size (  ) ; i++ )  {^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getOptionalLibraries [RETURN_TYPE] Library[]   [VARIABLES] boolean  ArrayList  libraries  List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  int  i  OptionalLibraryHolder  holder  
[P7_Replace_Invocation]^Library l = holder .loadLibrary ( libraryClass )  ;^271^^^^^266^277^Library l = holder.getLibrary (  ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getOptionalLibraries [RETURN_TYPE] Library[]   [VARIABLES] boolean  ArrayList  libraries  List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  int  i  OptionalLibraryHolder  holder  
[P3_Replace_Literal]^for  ( int i = 0; i < this.optionalLibraries.size() + 8 ; i++ )  {^268^^^^^266^277^for  ( int i = 0; i < this.optionalLibraries.size (  ) ; i++ )  {^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getOptionalLibraries [RETURN_TYPE] Library[]   [VARIABLES] boolean  ArrayList  libraries  List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  int  i  OptionalLibraryHolder  holder  
[P14_Delete_Statement]^^270^^^^^266^277^( OptionalLibraryHolder )  this.optionalLibraries.get ( i ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getOptionalLibraries [RETURN_TYPE] Library[]   [VARIABLES] boolean  ArrayList  libraries  List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  int  i  OptionalLibraryHolder  holder  
[P7_Replace_Invocation]^libraries .toArray ( this )  ;^273^^^^^266^277^libraries.add ( l ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getOptionalLibraries [RETURN_TYPE] Library[]   [VARIABLES] boolean  ArrayList  libraries  List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  int  i  OptionalLibraryHolder  holder  
[P3_Replace_Literal]^return  ( Library[] )  libraries.toArray ( new Library[libraries.size() + 3 ] ) ;^276^^^^^266^277^return  ( Library[] )  libraries.toArray ( new Library[libraries.size (  ) ] ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getOptionalLibraries [RETURN_TYPE] Library[]   [VARIABLES] boolean  ArrayList  libraries  List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  int  i  OptionalLibraryHolder  holder  
[P7_Replace_Invocation]^return  ( Library[] )  libraries.toArray ( new Library[libraries.add (  ) ] ) ;^276^^^^^266^277^return  ( Library[] )  libraries.toArray ( new Library[libraries.size (  ) ] ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getOptionalLibraries [RETURN_TYPE] Library[]   [VARIABLES] boolean  ArrayList  libraries  List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  int  i  OptionalLibraryHolder  holder  
[P3_Replace_Literal]^return  ( Library[] )  libraries.toArray ( new Library[libraries.size() + 9 ] ) ;^276^^^^^266^277^return  ( Library[] )  libraries.toArray ( new Library[libraries.size (  ) ] ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getOptionalLibraries [RETURN_TYPE] Library[]   [VARIABLES] boolean  ArrayList  libraries  List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  int  i  OptionalLibraryHolder  holder  
[P14_Delete_Statement]^^276^^^^^266^277^return  ( Library[] )  libraries.toArray ( new Library[libraries.size (  ) ] ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getOptionalLibraries [RETURN_TYPE] Library[]   [VARIABLES] boolean  ArrayList  libraries  List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  int  i  OptionalLibraryHolder  holder  
[P3_Replace_Literal]^return  ( Library[] )  libraries.toArray ( new Library[libraries.size() + 1 ] ) ;^276^^^^^266^277^return  ( Library[] )  libraries.toArray ( new Library[libraries.size (  ) ] ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] getOptionalLibraries [RETURN_TYPE] Library[]   [VARIABLES] boolean  ArrayList  libraries  List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  int  i  OptionalLibraryHolder  holder  
[P2_Replace_Operator]^if  ( libraryClass != null )  {^285^^^^^284^290^if  ( libraryClass == null )  {^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] addOptionalLibrary [RETURN_TYPE] void   String libraryClass [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  boolean  
[P5_Replace_Variable]^if  ( version == null )  {^285^^^^^284^290^if  ( libraryClass == null )  {^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] addOptionalLibrary [RETURN_TYPE] void   String libraryClass [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  boolean  
[P8_Replace_Mix]^if  ( libraryClass == false )  {^285^^^^^284^290^if  ( libraryClass == null )  {^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] addOptionalLibrary [RETURN_TYPE] void   String libraryClass [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  boolean  
[P9_Replace_Statement]^if  ( library == null )  {^285^^^^^284^290^if  ( libraryClass == null )  {^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] addOptionalLibrary [RETURN_TYPE] void   String libraryClass [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  boolean  
[P9_Replace_Statement]^if  ( this.library == null )  {^285^^^^^284^290^if  ( libraryClass == null )  {^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] addOptionalLibrary [RETURN_TYPE] void   String libraryClass [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  boolean  
[P9_Replace_Statement]^if  ( classname == null )  {^285^^^^^284^290^if  ( libraryClass == null )  {^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] addOptionalLibrary [RETURN_TYPE] void   String libraryClass [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  boolean  
[P15_Unwrap_Block]^throw new java.lang.NullPointerException("Library classname must be given.");^285^286^287^^^284^290^if  ( libraryClass == null )  { throw new NullPointerException  (" ")  ; }^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] addOptionalLibrary [RETURN_TYPE] void   String libraryClass [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  boolean  
[P16_Remove_Block]^^285^286^287^^^284^290^if  ( libraryClass == null )  { throw new NullPointerException  (" ")  ; }^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] addOptionalLibrary [RETURN_TYPE] void   String libraryClass [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  boolean  
[P13_Insert_Block]^if  ( library == null )  {     throw new NullPointerException (  ) ; }^285^^^^^284^290^[Delete]^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] addOptionalLibrary [RETURN_TYPE] void   String libraryClass [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  boolean  
[P13_Insert_Block]^if  ( library == null )  {     throw new NullPointerException ( "Library must not be null." ) ; }^285^^^^^284^290^[Delete]^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] addOptionalLibrary [RETURN_TYPE] void   String libraryClass [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  boolean  
[P13_Insert_Block]^if  ( libraryClass == null )  {     throw new NullPointerException ( "LibraryClass must not be null." ) ; }^285^^^^^284^290^[Delete]^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] addOptionalLibrary [RETURN_TYPE] void   String libraryClass [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  boolean  
[P13_Insert_Block]^if  ( library == null )  {     throw new NullPointerException ( "Library must be given." ) ; }^285^^^^^284^290^[Delete]^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] addOptionalLibrary [RETURN_TYPE] void   String libraryClass [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  boolean  
[P4_Replace_Constructor]^throw throw  new NullPointerException ( "Library must be given." )   ;^286^^^^^284^290^throw new NullPointerException  (" ")  ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] addOptionalLibrary [RETURN_TYPE] void   String libraryClass [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  boolean  
[P13_Insert_Block]^if  ( libraryClass == null )  {     throw new NullPointerException ( "Library classname must be given." ) ; }^286^^^^^284^290^[Delete]^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] addOptionalLibrary [RETURN_TYPE] void   String libraryClass [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  boolean  
[P13_Insert_Block]^if  ( library == null )  {     throw new NullPointerException ( "Library must be given." ) ; }^286^^^^^284^290^[Delete]^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] addOptionalLibrary [RETURN_TYPE] void   String libraryClass [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  boolean  
[P11_Insert_Donor_Statement]^throw new NullPointerException ( "LibraryClass must not be null." ) ;throw new NullPointerException  (" ")  ;^286^^^^^284^290^throw new NullPointerException  (" ")  ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] addOptionalLibrary [RETURN_TYPE] void   String libraryClass [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  boolean  
[P13_Insert_Block]^if  ( library == null )  {     throw new NullPointerException ( "Library must not be null." ) ; }^286^^^^^284^290^[Delete]^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] addOptionalLibrary [RETURN_TYPE] void   String libraryClass [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  boolean  
[P13_Insert_Block]^if  ( libraryClass == null )  {     throw new NullPointerException ( "LibraryClass must not be null." ) ; }^286^^^^^284^290^[Delete]^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] addOptionalLibrary [RETURN_TYPE] void   String libraryClass [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  boolean  
[P8_Replace_Mix]^throw new NullPointerException ( "LibraryClass must not be null." ) ; ;^286^^^^^284^290^throw new NullPointerException  (" ")  ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] addOptionalLibrary [RETURN_TYPE] void   String libraryClass [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  boolean  
[P4_Replace_Constructor]^( (  new OptionalLibraryHolder ( library )   ) ;^289^^^^^284^290^( new OptionalLibraryHolder ( libraryClass )  ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] addOptionalLibrary [RETURN_TYPE] void   String libraryClass [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  boolean  
[P5_Replace_Variable]^( new OptionalLibraryHolder ( version )  ) ;^289^^^^^284^290^( new OptionalLibraryHolder ( libraryClass )  ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] addOptionalLibrary [RETURN_TYPE] void   String libraryClass [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  boolean  
[P8_Replace_Mix]^( new OptionalLibraryHolder ( licenceName )  ) ;^289^^^^^284^290^( new OptionalLibraryHolder ( libraryClass )  ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] addOptionalLibrary [RETURN_TYPE] void   String libraryClass [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  boolean  
[P4_Replace_Constructor]^this.optionalLibraries.add ( this.optionalLibraries.add (  new OptionalLibraryHolder ( library )   ) ;^288^289^^^^284^290^this.optionalLibraries.add ( new OptionalLibraryHolder ( libraryClass )  ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] addOptionalLibrary [RETURN_TYPE] void   String libraryClass [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  boolean  
[P5_Replace_Variable]^this.optionalLibraries.add ( new OptionalLibraryHolder ( name )  ) ;^288^289^^^^284^290^this.optionalLibraries.add ( new OptionalLibraryHolder ( libraryClass )  ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] addOptionalLibrary [RETURN_TYPE] void   String libraryClass [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  boolean  
[P7_Replace_Invocation]^this.optionalLibraries.get ( new OptionalLibraryHolder ( libraryClass )  ) ;^288^289^^^^284^290^this.optionalLibraries.add ( new OptionalLibraryHolder ( libraryClass )  ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] addOptionalLibrary [RETURN_TYPE] void   String libraryClass [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  boolean  
[P8_Replace_Mix]^this.optionalLibraries.get ( new OptionalLibraryHolder ( version )  ) ;^288^289^^^^284^290^this.optionalLibraries.add ( new OptionalLibraryHolder ( libraryClass )  ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] addOptionalLibrary [RETURN_TYPE] void   String libraryClass [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  boolean  
[P14_Delete_Statement]^^288^289^^^^284^290^this.optionalLibraries.add ( new OptionalLibraryHolder ( libraryClass )  ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] addOptionalLibrary [RETURN_TYPE] void   String libraryClass [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  boolean  
[P2_Replace_Operator]^if  ( library != null )  {^301^^^^^300^305^if  ( library == null )  {^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] addOptionalLibrary [RETURN_TYPE] void   Library library [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  boolean  
[P5_Replace_Variable]^if  ( l == null )  {^301^^^^^300^305^if  ( library == null )  {^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] addOptionalLibrary [RETURN_TYPE] void   Library library [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  boolean  
[P8_Replace_Mix]^if  ( l == false )  {^301^^^^^300^305^if  ( library == null )  {^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] addOptionalLibrary [RETURN_TYPE] void   Library library [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  boolean  
[P9_Replace_Statement]^if  ( libraryClass == null )  {^301^^^^^300^305^if  ( library == null )  {^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] addOptionalLibrary [RETURN_TYPE] void   Library library [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  boolean  
[P9_Replace_Statement]^if  ( this.library == null )  {^301^^^^^300^305^if  ( library == null )  {^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] addOptionalLibrary [RETURN_TYPE] void   Library library [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  boolean  
[P9_Replace_Statement]^if  ( classname == null )  {^301^^^^^300^305^if  ( library == null )  {^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] addOptionalLibrary [RETURN_TYPE] void   Library library [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  boolean  
[P9_Replace_Statement]^if  ( l != null )  {^301^^^^^300^305^if  ( library == null )  {^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] addOptionalLibrary [RETURN_TYPE] void   Library library [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  boolean  
[P15_Unwrap_Block]^throw new java.lang.NullPointerException("Library must be given.");^301^302^303^^^300^305^if  ( library == null )  { throw new NullPointerException  (" ")  ; }^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] addOptionalLibrary [RETURN_TYPE] void   Library library [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  boolean  
[P16_Remove_Block]^^301^302^303^^^300^305^if  ( library == null )  { throw new NullPointerException  (" ")  ; }^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] addOptionalLibrary [RETURN_TYPE] void   Library library [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  boolean  
[P13_Insert_Block]^if  ( library == null )  {     throw new NullPointerException (  ) ; }^301^^^^^300^305^[Delete]^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] addOptionalLibrary [RETURN_TYPE] void   Library library [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  boolean  
[P13_Insert_Block]^if  ( library == null )  {     throw new NullPointerException ( "Library must not be null." ) ; }^301^^^^^300^305^[Delete]^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] addOptionalLibrary [RETURN_TYPE] void   Library library [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  boolean  
[P13_Insert_Block]^if  ( libraryClass == null )  {     throw new NullPointerException ( "Library classname must be given." ) ; }^301^^^^^300^305^[Delete]^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] addOptionalLibrary [RETURN_TYPE] void   Library library [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  boolean  
[P13_Insert_Block]^if  ( libraryClass == null )  {     throw new NullPointerException ( "LibraryClass must not be null." ) ; }^301^^^^^300^305^[Delete]^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] addOptionalLibrary [RETURN_TYPE] void   Library library [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  boolean  
[P4_Replace_Constructor]^throw throw  new NullPointerException ( "Library classname must be given." )   ;^302^^^^^300^305^throw new NullPointerException  (" ")  ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] addOptionalLibrary [RETURN_TYPE] void   Library library [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  boolean  
[P13_Insert_Block]^if  ( library == null )  {     throw new NullPointerException ( "Library must not be null." ) ; }^302^^^^^300^305^[Delete]^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] addOptionalLibrary [RETURN_TYPE] void   Library library [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  boolean  
[P13_Insert_Block]^if  ( libraryClass == null )  {     throw new NullPointerException ( "Library classname must be given." ) ; }^302^^^^^300^305^[Delete]^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] addOptionalLibrary [RETURN_TYPE] void   Library library [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  boolean  
[P13_Insert_Block]^if  ( library == null )  {     throw new NullPointerException ( "Library must be given." ) ; }^302^^^^^300^305^[Delete]^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] addOptionalLibrary [RETURN_TYPE] void   Library library [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  boolean  
[P11_Insert_Donor_Statement]^throw new NullPointerException ( "LibraryClass must not be null." ) ;throw new NullPointerException  (" ")  ;^302^^^^^300^305^throw new NullPointerException  (" ")  ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] addOptionalLibrary [RETURN_TYPE] void   Library library [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  boolean  
[P13_Insert_Block]^if  ( libraryClass == null )  {     throw new NullPointerException ( "LibraryClass must not be null." ) ; }^302^^^^^300^305^[Delete]^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] addOptionalLibrary [RETURN_TYPE] void   Library library [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  boolean  
[P4_Replace_Constructor]^this.optionalLibraries.add ( this.optionalLibraries.add (  new OptionalLibraryHolder ( libraryClass )   ) ;^304^^^^^300^305^this.optionalLibraries.add ( new OptionalLibraryHolder ( library )  ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] addOptionalLibrary [RETURN_TYPE] void   Library library [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  boolean  
[P5_Replace_Variable]^this.optionalLibraries.add ( new OptionalLibraryHolder ( l )  ) ;^304^^^^^300^305^this.optionalLibraries.add ( new OptionalLibraryHolder ( library )  ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] addOptionalLibrary [RETURN_TYPE] void   Library library [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  boolean  
[P7_Replace_Invocation]^this.optionalLibraries.get ( new OptionalLibraryHolder ( library )  ) ;^304^^^^^300^305^this.optionalLibraries.add ( new OptionalLibraryHolder ( library )  ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] addOptionalLibrary [RETURN_TYPE] void   Library library [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  boolean  
[P14_Delete_Statement]^^304^^^^^300^305^this.optionalLibraries.add ( new OptionalLibraryHolder ( library )  ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] addOptionalLibrary [RETURN_TYPE] void   Library library [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  boolean  
[P11_Insert_Donor_Statement]^( OptionalLibraryHolder )  this.optionalLibraries.get ( i ) ;this.optionalLibraries.add ( new OptionalLibraryHolder ( library )  ) ;^304^^^^^300^305^this.optionalLibraries.add ( new OptionalLibraryHolder ( library )  ) ;^[CLASS] BasicProjectInfo OptionalLibraryHolder  [METHOD] addOptionalLibrary [RETURN_TYPE] void   Library library [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  boolean  
[P1_Replace_Type]^private char libraryClass;^61^^^^^56^66^private String libraryClass;^[CLASS] OptionalLibraryHolder  [METHOD] addOptionalLibrary [RETURN_TYPE] void   Library library [VARIABLES] List  libraries  optionalLibraries  String  classname  copyright  info  libraryClass  licence  licenceName  name  version  Library  l  library  boolean  
[P2_Replace_Operator]^if  ( libraryClass != null )  {^70^^^^^69^75^if  ( libraryClass == null )  {^[CLASS] OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String libraryClass [VARIABLES] String  libraryClass  Library  library  boolean  
[P8_Replace_Mix]^if  ( libraryClass == false )  {^70^^^^^69^75^if  ( libraryClass == null )  {^[CLASS] OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String libraryClass [VARIABLES] String  libraryClass  Library  library  boolean  
[P9_Replace_Statement]^if  ( library == null )  {^70^^^^^69^75^if  ( libraryClass == null )  {^[CLASS] OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String libraryClass [VARIABLES] String  libraryClass  Library  library  boolean  
[P9_Replace_Statement]^if  ( this.library == null )  {^70^^^^^69^75^if  ( libraryClass == null )  {^[CLASS] OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String libraryClass [VARIABLES] String  libraryClass  Library  library  boolean  
[P9_Replace_Statement]^if  ( classname == null )  {^70^^^^^69^75^if  ( libraryClass == null )  {^[CLASS] OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String libraryClass [VARIABLES] String  libraryClass  Library  library  boolean  
[P15_Unwrap_Block]^throw new java.lang.NullPointerException("LibraryClass must not be null.");^70^71^72^73^^69^75^if  ( libraryClass == null )  { throw new NullPointerException ( "LibraryClass must not be null." ) ; }^[CLASS] OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String libraryClass [VARIABLES] String  libraryClass  Library  library  boolean  
[P16_Remove_Block]^^70^71^72^73^^69^75^if  ( libraryClass == null )  { throw new NullPointerException ( "LibraryClass must not be null." ) ; }^[CLASS] OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String libraryClass [VARIABLES] String  libraryClass  Library  library  boolean  
[P13_Insert_Block]^if  ( library == null )  {     throw new NullPointerException ( "Library must not be null." ) ; }^70^^^^^69^75^[Delete]^[CLASS] OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String libraryClass [VARIABLES] String  libraryClass  Library  library  boolean  
[P3_Replace_Literal]^throw new NullPointerException ( "LibraryClass must not be null.ust not" ) ;^71^72^^^^69^75^throw new NullPointerException ( "LibraryClass must not be null." ) ;^[CLASS] OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String libraryClass [VARIABLES] String  libraryClass  Library  library  boolean  
[P4_Replace_Constructor]^throw throw  new NullPointerException ( "Library must not be null." )  ;^71^72^^^^69^75^throw new NullPointerException ( "LibraryClass must not be null." ) ;^[CLASS] OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String libraryClass [VARIABLES] String  libraryClass  Library  library  boolean  
[P13_Insert_Block]^if  ( library == null )  {     throw new NullPointerException ( "Library must not be null." ) ; }^71^^^^^69^75^[Delete]^[CLASS] OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String libraryClass [VARIABLES] String  libraryClass  Library  library  boolean  
[P13_Insert_Block]^if  ( libraryClass == null )  {     throw new NullPointerException ( "LibraryClass must not be null." ) ; }^71^^^^^69^75^[Delete]^[CLASS] OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String libraryClass [VARIABLES] String  libraryClass  Library  library  boolean  
[P3_Replace_Literal]^throw new NullPointerException ( "LibraryClass must not be null.LibraryClass must not be " ) ;^71^72^^^^69^75^throw new NullPointerException ( "LibraryClass must not be null." ) ;^[CLASS] OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String libraryClass [VARIABLES] String  libraryClass  Library  library  boolean  
[P11_Insert_Donor_Statement]^throw new NullPointerException  (" ")  ;throw new NullPointerException ( "LibraryClass must not be null." ) ;^71^72^^^^69^75^throw new NullPointerException ( "LibraryClass must not be null." ) ;^[CLASS] OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String libraryClass [VARIABLES] String  libraryClass  Library  library  boolean  
[P3_Replace_Literal]^throw new NullPointerException ( " noibraryClass must not be null." ) ;^71^72^^^^69^75^throw new NullPointerException ( "LibraryClass must not be null." ) ;^[CLASS] OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String libraryClass [VARIABLES] String  libraryClass  Library  library  boolean  
[P8_Replace_Mix]^this.libraryClass =  null;^74^^^^^69^75^this.libraryClass = libraryClass;^[CLASS] OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String libraryClass [VARIABLES] String  libraryClass  Library  library  boolean  
[P11_Insert_Donor_Statement]^this.library = library;this.libraryClass = libraryClass;^74^^^^^69^75^this.libraryClass = libraryClass;^[CLASS] OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String libraryClass [VARIABLES] String  libraryClass  Library  library  boolean  
[P11_Insert_Donor_Statement]^this.libraryClass = library.getClass (  ) .getName (  ) ;this.libraryClass = libraryClass;^74^^^^^69^75^this.libraryClass = libraryClass;^[CLASS] OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String libraryClass [VARIABLES] String  libraryClass  Library  library  boolean  
[P11_Insert_Donor_Statement]^this.library = loadLibrary ( this.libraryClass ) ;this.libraryClass = libraryClass;^74^^^^^69^75^this.libraryClass = libraryClass;^[CLASS] OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] String)   String libraryClass [VARIABLES] String  libraryClass  Library  library  boolean  
[P2_Replace_Operator]^if  ( library != null )  {^83^^^^^82^88^if  ( library == null )  {^[CLASS] OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] Library)   Library library [VARIABLES] String  libraryClass  Library  library  boolean  
[P8_Replace_Mix]^if  ( library == true )  {^83^^^^^82^88^if  ( library == null )  {^[CLASS] OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] Library)   Library library [VARIABLES] String  libraryClass  Library  library  boolean  
[P9_Replace_Statement]^if  ( libraryClass == null )  {^83^^^^^82^88^if  ( library == null )  {^[CLASS] OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] Library)   Library library [VARIABLES] String  libraryClass  Library  library  boolean  
[P9_Replace_Statement]^if  ( this.library == null )  {^83^^^^^82^88^if  ( library == null )  {^[CLASS] OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] Library)   Library library [VARIABLES] String  libraryClass  Library  library  boolean  
[P9_Replace_Statement]^if  ( classname == null )  {^83^^^^^82^88^if  ( library == null )  {^[CLASS] OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] Library)   Library library [VARIABLES] String  libraryClass  Library  library  boolean  
[P15_Unwrap_Block]^throw new java.lang.NullPointerException("Library must not be null.");^83^84^85^^^82^88^if  ( library == null )  { throw new NullPointerException  (" ")  ; }^[CLASS] OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] Library)   Library library [VARIABLES] String  libraryClass  Library  library  boolean  
[P16_Remove_Block]^^83^84^85^^^82^88^if  ( library == null )  { throw new NullPointerException  (" ")  ; }^[CLASS] OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] Library)   Library library [VARIABLES] String  libraryClass  Library  library  boolean  
[P13_Insert_Block]^if  ( libraryClass == null )  {     throw new NullPointerException ( "LibraryClass must not be null." ) ; }^83^^^^^82^88^[Delete]^[CLASS] OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] Library)   Library library [VARIABLES] String  libraryClass  Library  library  boolean  
[P4_Replace_Constructor]^throw throw  new NullPointerException ( "LibraryClass must not be null." )   ;^84^^^^^82^88^throw new NullPointerException  (" ")  ;^[CLASS] OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] Library)   Library library [VARIABLES] String  libraryClass  Library  library  boolean  
[P13_Insert_Block]^if  ( library == null )  {     throw new NullPointerException ( "Library must not be null." ) ; }^84^^^^^82^88^[Delete]^[CLASS] OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] Library)   Library library [VARIABLES] String  libraryClass  Library  library  boolean  
[P13_Insert_Block]^if  ( libraryClass == null )  {     throw new NullPointerException ( "LibraryClass must not be null." ) ; }^84^^^^^82^88^[Delete]^[CLASS] OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] Library)   Library library [VARIABLES] String  libraryClass  Library  library  boolean  
[P11_Insert_Donor_Statement]^throw new NullPointerException ( "LibraryClass must not be null." ) ;throw new NullPointerException  (" ")  ;^84^^^^^82^88^throw new NullPointerException  (" ")  ;^[CLASS] OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] Library)   Library library [VARIABLES] String  libraryClass  Library  library  boolean  
[P8_Replace_Mix]^this.library =  null;^86^^^^^82^88^this.library = library;^[CLASS] OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] Library)   Library library [VARIABLES] String  libraryClass  Library  library  boolean  
[P11_Insert_Donor_Statement]^this.libraryClass = libraryClass;this.library = library;^86^^^^^82^88^this.library = library;^[CLASS] OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] Library)   Library library [VARIABLES] String  libraryClass  Library  library  boolean  
[P7_Replace_Invocation]^this.libraryClass = library.getClass (  ) .loadClass (  ) ;^87^^^^^82^88^this.libraryClass = library.getClass (  ) .getName (  ) ;^[CLASS] OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] Library)   Library library [VARIABLES] String  libraryClass  Library  library  boolean  
[P8_Replace_Mix]^this.libraryClass =  null.getClass (  ) .getName (  ) ;^87^^^^^82^88^this.libraryClass = library.getClass (  ) .getName (  ) ;^[CLASS] OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] Library)   Library library [VARIABLES] String  libraryClass  Library  library  boolean  
[P11_Insert_Donor_Statement]^this.libraryClass = libraryClass;this.libraryClass = library.getClass (  ) .getName (  ) ;^87^^^^^82^88^this.libraryClass = library.getClass (  ) .getName (  ) ;^[CLASS] OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] Library)   Library library [VARIABLES] String  libraryClass  Library  library  boolean  
[P14_Delete_Statement]^^87^^^^^82^88^this.libraryClass = library.getClass (  ) .getName (  ) ;^[CLASS] OptionalLibraryHolder  [METHOD] <init> [RETURN_TYPE] Library)   Library library [VARIABLES] String  libraryClass  Library  library  boolean  
[P5_Replace_Variable]^return libraryClass;^96^^^^^95^97^return this.libraryClass;^[CLASS] OptionalLibraryHolder  [METHOD] getLibraryClass [RETURN_TYPE] String   [VARIABLES] String  libraryClass  Library  library  boolean  
[P2_Replace_Operator]^if  ( this.library != null )  {^105^^^^^104^109^if  ( this.library == null )  {^[CLASS] OptionalLibraryHolder  [METHOD] getLibrary [RETURN_TYPE] Library   [VARIABLES] String  libraryClass  Library  library  boolean  
[P5_Replace_Variable]^if  ( library == null )  {^105^^^^^104^109^if  ( this.library == null )  {^[CLASS] OptionalLibraryHolder  [METHOD] getLibrary [RETURN_TYPE] Library   [VARIABLES] String  libraryClass  Library  library  boolean  
[P8_Replace_Mix]^if  ( this.library == false )  {^105^^^^^104^109^if  ( this.library == null )  {^[CLASS] OptionalLibraryHolder  [METHOD] getLibrary [RETURN_TYPE] Library   [VARIABLES] String  libraryClass  Library  library  boolean  
[P9_Replace_Statement]^if  ( libraryClass == null )  {^105^^^^^104^109^if  ( this.library == null )  {^[CLASS] OptionalLibraryHolder  [METHOD] getLibrary [RETURN_TYPE] Library   [VARIABLES] String  libraryClass  Library  library  boolean  
[P9_Replace_Statement]^if  ( classname == null )  {^105^^^^^104^109^if  ( this.library == null )  {^[CLASS] OptionalLibraryHolder  [METHOD] getLibrary [RETURN_TYPE] Library   [VARIABLES] String  libraryClass  Library  library  boolean  
[P15_Unwrap_Block]^this.library = loadLibrary(this.libraryClass);^105^106^107^^^104^109^if  ( this.library == null )  { this.library = loadLibrary ( this.libraryClass ) ; }^[CLASS] OptionalLibraryHolder  [METHOD] getLibrary [RETURN_TYPE] Library   [VARIABLES] String  libraryClass  Library  library  boolean  
[P16_Remove_Block]^^105^106^107^^^104^109^if  ( this.library == null )  { this.library = loadLibrary ( this.libraryClass ) ; }^[CLASS] OptionalLibraryHolder  [METHOD] getLibrary [RETURN_TYPE] Library   [VARIABLES] String  libraryClass  Library  library  boolean  
[P5_Replace_Variable]^this.library = loadLibrary ( libraryClass ) ;^106^^^^^104^109^this.library = loadLibrary ( this.libraryClass ) ;^[CLASS] OptionalLibraryHolder  [METHOD] getLibrary [RETURN_TYPE] Library   [VARIABLES] String  libraryClass  Library  library  boolean  
[P8_Replace_Mix]^this.library ;^106^^^^^104^109^this.library = loadLibrary ( this.libraryClass ) ;^[CLASS] OptionalLibraryHolder  [METHOD] getLibrary [RETURN_TYPE] Library   [VARIABLES] String  libraryClass  Library  library  boolean  
[P11_Insert_Donor_Statement]^this.libraryClass = libraryClass;this.library = loadLibrary ( this.libraryClass ) ;^106^^^^^104^109^this.library = loadLibrary ( this.libraryClass ) ;^[CLASS] OptionalLibraryHolder  [METHOD] getLibrary [RETURN_TYPE] Library   [VARIABLES] String  libraryClass  Library  library  boolean  
[P13_Insert_Block]^if  (  ( this.library )  == null )  {     this.library = loadLibrary ( this.libraryClass ) ; }^106^^^^^104^109^[Delete]^[CLASS] OptionalLibraryHolder  [METHOD] getLibrary [RETURN_TYPE] Library   [VARIABLES] String  libraryClass  Library  library  boolean  
[P14_Delete_Statement]^^106^^^^^104^109^this.library = loadLibrary ( this.libraryClass ) ;^[CLASS] OptionalLibraryHolder  [METHOD] getLibrary [RETURN_TYPE] Library   [VARIABLES] String  libraryClass  Library  library  boolean  
[P8_Replace_Mix]^this.library  =  this.library ;^106^^^^^104^109^this.library = loadLibrary ( this.libraryClass ) ;^[CLASS] OptionalLibraryHolder  [METHOD] getLibrary [RETURN_TYPE] Library   [VARIABLES] String  libraryClass  Library  library  boolean  
[P5_Replace_Variable]^return library;^108^^^^^104^109^return this.library;^[CLASS] OptionalLibraryHolder  [METHOD] getLibrary [RETURN_TYPE] Library   [VARIABLES] String  libraryClass  Library  library  boolean  
[P2_Replace_Operator]^if  ( classname != null )  {^112^^^^^111^132^if  ( classname == null )  {^[CLASS] OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] Class  c  String  classname  libraryClass  Library  library  Method  m  boolean  Exception  e  
[P5_Replace_Variable]^if  ( libraryClass == null )  {^112^^^^^111^132^if  ( classname == null )  {^[CLASS] OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] Class  c  String  classname  libraryClass  Library  library  Method  m  boolean  Exception  e  
[P8_Replace_Mix]^if  ( classname == false )  {^112^^^^^111^132^if  ( classname == null )  {^[CLASS] OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] Class  c  String  classname  libraryClass  Library  library  Method  m  boolean  Exception  e  
[P9_Replace_Statement]^if  ( library == null )  {^112^^^^^111^132^if  ( classname == null )  {^[CLASS] OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] Class  c  String  classname  libraryClass  Library  library  Method  m  boolean  Exception  e  
[P9_Replace_Statement]^if  ( this.library == null )  {^112^^^^^111^132^if  ( classname == null )  {^[CLASS] OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] Class  c  String  classname  libraryClass  Library  library  Method  m  boolean  Exception  e  
[P15_Unwrap_Block]^return null;^112^113^114^^^111^132^if  ( classname == null )  { return null; }^[CLASS] OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] Class  c  String  classname  libraryClass  Library  library  Method  m  boolean  Exception  e  
[P16_Remove_Block]^^112^113^114^^^111^132^if  ( classname == null )  { return null; }^[CLASS] OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] Class  c  String  classname  libraryClass  Library  library  Method  m  boolean  Exception  e  
[P8_Replace_Mix]^return this;^113^^^^^111^132^return null;^[CLASS] OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] Class  c  String  classname  libraryClass  Library  library  Method  m  boolean  Exception  e  
[P8_Replace_Mix]^return false;^113^^^^^111^132^return null;^[CLASS] OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] Class  c  String  classname  libraryClass  Library  library  Method  m  boolean  Exception  e  
[P8_Replace_Mix]^return  ( Library )  m.invoke ( true,  ( Object[] )  true ) ;^120^^^^^111^132^return  ( Library )  m.invoke ( null,  ( Object[] )  null ) ;^[CLASS] OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] Class  c  String  classname  libraryClass  Library  library  Method  m  boolean  Exception  e  
[P3_Replace_Literal]^Method m = c.getMethod ( "nsetInstance",  ( Class[] )  null ) ;^119^^^^^111^132^Method m = c.getMethod ( "getInstance",  ( Class[] )  null ) ;^[CLASS] OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] Class  c  String  classname  libraryClass  Library  library  Method  m  boolean  Exception  e  
[P7_Replace_Invocation]^Method m = c .newInstance (  )  ;^119^^^^^111^132^Method m = c.getMethod ( "getInstance",  ( Class[] )  null ) ;^[CLASS] OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] Class  c  String  classname  libraryClass  Library  library  Method  m  boolean  Exception  e  
[P3_Replace_Literal]^Method m = c.getMethod ( "InetInstance",  ( Class[] )  null ) ;^119^^^^^111^132^Method m = c.getMethod ( "getInstance",  ( Class[] )  null ) ;^[CLASS] OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] Class  c  String  classname  libraryClass  Library  library  Method  m  boolean  Exception  e  
[P14_Delete_Statement]^^119^^^^^111^132^Method m = c.getMethod ( "getInstance",  ( Class[] )  null ) ;^[CLASS] OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] Class  c  String  classname  libraryClass  Library  library  Method  m  boolean  Exception  e  
[P14_Delete_Statement]^^120^^^^^111^132^return  ( Library )  m.invoke ( null,  ( Object[] )  null ) ;^[CLASS] OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] Class  c  String  classname  libraryClass  Library  library  Method  m  boolean  Exception  e  
[P8_Replace_Mix]^return  ( Library )  m.invoke ( false,  ( Object[] )  false ) ;^120^^^^^111^132^return  ( Library )  m.invoke ( null,  ( Object[] )  null ) ;^[CLASS] OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] Class  c  String  classname  libraryClass  Library  library  Method  m  boolean  Exception  e  
[P5_Replace_Variable]^Class c = ObjectUtilities.getClassLoader ( getClass (  )  ) .loadClass ( libraryClass ) ;^116^117^^^^111^132^Class c = ObjectUtilities.getClassLoader ( getClass (  )  ) .loadClass ( classname ) ;^[CLASS] OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] Class  c  String  classname  libraryClass  Library  library  Method  m  boolean  Exception  e  
[P7_Replace_Invocation]^Class c = ObjectUtilities.ObjectLoader ( getClass (  )  ) .loadClass ( classname ) ;^116^117^^^^111^132^Class c = ObjectUtilities.getClassLoader ( getClass (  )  ) .loadClass ( classname ) ;^[CLASS] OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] Class  c  String  classname  libraryClass  Library  library  Method  m  boolean  Exception  e  
[P3_Replace_Literal]^Method m = c.getMethod ( "I",  ( Class[] )  null ) ;^119^^^^^111^132^Method m = c.getMethod ( "getInstance",  ( Class[] )  null ) ;^[CLASS] OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] Class  c  String  classname  libraryClass  Library  library  Method  m  boolean  Exception  e  
[P7_Replace_Invocation]^Class c = ObjectUtilities.getClassLoader ( getClass (  )  )  .getName (  )  ;^116^117^^^^111^132^Class c = ObjectUtilities.getClassLoader ( getClass (  )  ) .loadClass ( classname ) ;^[CLASS] OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] Class  c  String  classname  libraryClass  Library  library  Method  m  boolean  Exception  e  
[P14_Delete_Statement]^^116^117^^^^111^132^Class c = ObjectUtilities.getClassLoader ( getClass (  )  ) .loadClass ( classname ) ;^[CLASS] OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] Class  c  String  classname  libraryClass  Library  library  Method  m  boolean  Exception  e  
[P7_Replace_Invocation]^Object (  )  ) .loadClass ( classname ) ;^117^^^^^111^132^getClass (  )  ) .loadClass ( classname ) ;^[CLASS] OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] Class  c  String  classname  libraryClass  Library  library  Method  m  boolean  Exception  e  
[P14_Delete_Statement]^^117^^^^^111^132^getClass (  )  ) .loadClass ( classname ) ;^[CLASS] OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] Class  c  String  classname  libraryClass  Library  library  Method  m  boolean  Exception  e  
[P14_Delete_Statement]^^125^^^^^111^132^return  ( Library )  c.newInstance (  ) ;^[CLASS] OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] Class  c  String  classname  libraryClass  Library  library  Method  m  boolean  Exception  e  
[P8_Replace_Mix]^return  ( Library )  m.invoke ( this,  ( Object[] )  this ) ;^120^^^^^111^132^return  ( Library )  m.invoke ( null,  ( Object[] )  null ) ;^[CLASS] OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] Class  c  String  classname  libraryClass  Library  library  Method  m  boolean  Exception  e  
[P3_Replace_Literal]^Method m = c.getMethod ( "getInstances",  ( Class[] )  null ) ;^119^^^^^111^132^Method m = c.getMethod ( "getInstance",  ( Class[] )  null ) ;^[CLASS] OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] Class  c  String  classname  libraryClass  Library  library  Method  m  boolean  Exception  e  
[P3_Replace_Literal]^Method m = c.getMethod ( "getInstanceIns",  ( Class[] )  null ) ;^119^^^^^111^132^Method m = c.getMethod ( "getInstance",  ( Class[] )  null ) ;^[CLASS] OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] Class  c  String  classname  libraryClass  Library  library  Method  m  boolean  Exception  e  
[P14_Delete_Statement]^^119^120^^^^111^132^Method m = c.getMethod ( "getInstance",  ( Class[] )  null ) ; return  ( Library )  m.invoke ( null,  ( Object[] )  null ) ;^[CLASS] OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] Class  c  String  classname  libraryClass  Library  library  Method  m  boolean  Exception  e  
[P8_Replace_Mix]^return  ( Library )  c .getMethod ( classname , null )  ;^125^^^^^111^132^return  ( Library )  c.newInstance (  ) ;^[CLASS] OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] Class  c  String  classname  libraryClass  Library  library  Method  m  boolean  Exception  e  
[P8_Replace_Mix]^return false;^130^^^^^111^132^return null;^[CLASS] OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] Class  c  String  classname  libraryClass  Library  library  Method  m  boolean  Exception  e  
[P3_Replace_Literal]^Method m = c.getMethod ( "getInstancegetInst",  ( Class[] )  null ) ;^119^^^^^111^132^Method m = c.getMethod ( "getInstance",  ( Class[] )  null ) ;^[CLASS] OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] Class  c  String  classname  libraryClass  Library  library  Method  m  boolean  Exception  e  
[P8_Replace_Mix]^Class c = ObjectUtilities.ObjectLoader ( getClass (  )  ) .loadClass ( libraryClass ) ;^116^117^^^^111^132^Class c = ObjectUtilities.getClassLoader ( getClass (  )  ) .loadClass ( classname ) ;^[CLASS] OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] Class  c  String  classname  libraryClass  Library  library  Method  m  boolean  Exception  e  
[P3_Replace_Literal]^Method m = c.getMethod ( "g",  ( Class[] )  null ) ;^119^^^^^111^132^Method m = c.getMethod ( "getInstance",  ( Class[] )  null ) ;^[CLASS] OptionalLibraryHolder  [METHOD] loadLibrary [RETURN_TYPE] Library   String classname [VARIABLES] Class  c  String  classname  libraryClass  Library  library  Method  m  boolean  Exception  e  
