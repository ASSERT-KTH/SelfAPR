[P2_Replace_Operator]^if  ( text != null )  {^69^^^^^66^82^if  ( text == null )  {^[CLASS] RFC1522Codec  [METHOD] encodeText [RETURN_TYPE] String   String text String charset [VARIABLES] byte[]  rawdata  StringBuffer  buffer  boolean  String  charset  text  
[P5_Replace_Variable]^if  ( charset == null )  {^69^^^^^66^82^if  ( text == null )  {^[CLASS] RFC1522Codec  [METHOD] encodeText [RETURN_TYPE] String   String text String charset [VARIABLES] byte[]  rawdata  StringBuffer  buffer  boolean  String  charset  text  
[P8_Replace_Mix]^if  ( text == this )  {^69^^^^^66^82^if  ( text == null )  {^[CLASS] RFC1522Codec  [METHOD] encodeText [RETURN_TYPE] String   String text String charset [VARIABLES] byte[]  rawdata  StringBuffer  buffer  boolean  String  charset  text  
[P15_Unwrap_Block]^return null;^69^70^71^^^66^82^if  ( text == null )  { return null; }^[CLASS] RFC1522Codec  [METHOD] encodeText [RETURN_TYPE] String   String text String charset [VARIABLES] byte[]  rawdata  StringBuffer  buffer  boolean  String  charset  text  
[P16_Remove_Block]^^69^70^71^^^66^82^if  ( text == null )  { return null; }^[CLASS] RFC1522Codec  [METHOD] encodeText [RETURN_TYPE] String   String text String charset [VARIABLES] byte[]  rawdata  StringBuffer  buffer  boolean  String  charset  text  
[P8_Replace_Mix]^return this;^70^^^^^66^82^return null;^[CLASS] RFC1522Codec  [METHOD] encodeText [RETURN_TYPE] String   String text String charset [VARIABLES] byte[]  rawdata  StringBuffer  buffer  boolean  String  charset  text  
[P3_Replace_Literal]^buffer.append ( "=?=" ) ;^73^^^^^66^82^buffer.append ( "=?" ) ;^[CLASS] RFC1522Codec  [METHOD] encodeText [RETURN_TYPE] String   String text String charset [VARIABLES] byte[]  rawdata  StringBuffer  buffer  boolean  String  charset  text  
[P8_Replace_Mix]^buffer .append ( charset )  ;^73^^^^^66^82^buffer.append ( "=?" ) ;^[CLASS] RFC1522Codec  [METHOD] encodeText [RETURN_TYPE] String   String text String charset [VARIABLES] byte[]  rawdata  StringBuffer  buffer  boolean  String  charset  text  
[P14_Delete_Statement]^^73^74^^^^66^82^buffer.append ( "=?" ) ; buffer.append ( charset ) ;^[CLASS] RFC1522Codec  [METHOD] encodeText [RETURN_TYPE] String   String text String charset [VARIABLES] byte[]  rawdata  StringBuffer  buffer  boolean  String  charset  text  
[P11_Insert_Donor_Statement]^buffer.append ( '?' ) ;buffer.append ( "=?" ) ;^73^^^^^66^82^buffer.append ( "=?" ) ;^[CLASS] RFC1522Codec  [METHOD] encodeText [RETURN_TYPE] String   String text String charset [VARIABLES] byte[]  rawdata  StringBuffer  buffer  boolean  String  charset  text  
[P11_Insert_Donor_Statement]^buffer.append ( charset ) ;buffer.append ( "=?" ) ;^73^^^^^66^82^buffer.append ( "=?" ) ;^[CLASS] RFC1522Codec  [METHOD] encodeText [RETURN_TYPE] String   String text String charset [VARIABLES] byte[]  rawdata  StringBuffer  buffer  boolean  String  charset  text  
[P11_Insert_Donor_Statement]^buffer.append ( "?=" ) ;buffer.append ( "=?" ) ;^73^^^^^66^82^buffer.append ( "=?" ) ;^[CLASS] RFC1522Codec  [METHOD] encodeText [RETURN_TYPE] String   String text String charset [VARIABLES] byte[]  rawdata  StringBuffer  buffer  boolean  String  charset  text  
[P11_Insert_Donor_Statement]^buffer.append ( getEncoding (  )  ) ;buffer.append ( "=?" ) ;^73^^^^^66^82^buffer.append ( "=?" ) ;^[CLASS] RFC1522Codec  [METHOD] encodeText [RETURN_TYPE] String   String text String charset [VARIABLES] byte[]  rawdata  StringBuffer  buffer  boolean  String  charset  text  
[P5_Replace_Variable]^buffer.append ( text ) ;^74^^^^^66^82^buffer.append ( charset ) ;^[CLASS] RFC1522Codec  [METHOD] encodeText [RETURN_TYPE] String   String text String charset [VARIABLES] byte[]  rawdata  StringBuffer  buffer  boolean  String  charset  text  
[P14_Delete_Statement]^^74^75^^^^66^82^buffer.append ( charset ) ; buffer.append ( '?' ) ;^[CLASS] RFC1522Codec  [METHOD] encodeText [RETURN_TYPE] String   String text String charset [VARIABLES] byte[]  rawdata  StringBuffer  buffer  boolean  String  charset  text  
[P11_Insert_Donor_Statement]^buffer.append ( '?' ) ;buffer.append ( charset ) ;^74^^^^^66^82^buffer.append ( charset ) ;^[CLASS] RFC1522Codec  [METHOD] encodeText [RETURN_TYPE] String   String text String charset [VARIABLES] byte[]  rawdata  StringBuffer  buffer  boolean  String  charset  text  
[P11_Insert_Donor_Statement]^buffer.append ( "?=" ) ;buffer.append ( charset ) ;^74^^^^^66^82^buffer.append ( charset ) ;^[CLASS] RFC1522Codec  [METHOD] encodeText [RETURN_TYPE] String   String text String charset [VARIABLES] byte[]  rawdata  StringBuffer  buffer  boolean  String  charset  text  
[P11_Insert_Donor_Statement]^buffer.append ( getEncoding (  )  ) ;buffer.append ( charset ) ;^74^^^^^66^82^buffer.append ( charset ) ;^[CLASS] RFC1522Codec  [METHOD] encodeText [RETURN_TYPE] String   String text String charset [VARIABLES] byte[]  rawdata  StringBuffer  buffer  boolean  String  charset  text  
[P11_Insert_Donor_Statement]^buffer.append ( "=?" ) ;buffer.append ( charset ) ;^74^^^^^66^82^buffer.append ( charset ) ;^[CLASS] RFC1522Codec  [METHOD] encodeText [RETURN_TYPE] String   String text String charset [VARIABLES] byte[]  rawdata  StringBuffer  buffer  boolean  String  charset  text  
[P7_Replace_Invocation]^buffer .append ( charset )  ;^75^^^^^66^82^buffer.append ( '?' ) ;^[CLASS] RFC1522Codec  [METHOD] encodeText [RETURN_TYPE] String   String text String charset [VARIABLES] byte[]  rawdata  StringBuffer  buffer  boolean  String  charset  text  
[P14_Delete_Statement]^^75^^^^^66^82^buffer.append ( '?' ) ;^[CLASS] RFC1522Codec  [METHOD] encodeText [RETURN_TYPE] String   String text String charset [VARIABLES] byte[]  rawdata  StringBuffer  buffer  boolean  String  charset  text  
[P11_Insert_Donor_Statement]^buffer.append ( charset ) ;buffer.append ( '?' ) ;^75^^^^^66^82^buffer.append ( '?' ) ;^[CLASS] RFC1522Codec  [METHOD] encodeText [RETURN_TYPE] String   String text String charset [VARIABLES] byte[]  rawdata  StringBuffer  buffer  boolean  String  charset  text  
[P11_Insert_Donor_Statement]^buffer.append ( "?=" ) ;buffer.append ( '?' ) ;^75^^^^^66^82^buffer.append ( '?' ) ;^[CLASS] RFC1522Codec  [METHOD] encodeText [RETURN_TYPE] String   String text String charset [VARIABLES] byte[]  rawdata  StringBuffer  buffer  boolean  String  charset  text  
[P11_Insert_Donor_Statement]^buffer.append ( getEncoding (  )  ) ;buffer.append ( '?' ) ;^75^^^^^66^82^buffer.append ( '?' ) ;^[CLASS] RFC1522Codec  [METHOD] encodeText [RETURN_TYPE] String   String text String charset [VARIABLES] byte[]  rawdata  StringBuffer  buffer  boolean  String  charset  text  
[P11_Insert_Donor_Statement]^buffer.append ( "=?" ) ;buffer.append ( '?' ) ;^75^^^^^66^82^buffer.append ( '?' ) ;^[CLASS] RFC1522Codec  [METHOD] encodeText [RETURN_TYPE] String   String text String charset [VARIABLES] byte[]  rawdata  StringBuffer  buffer  boolean  String  charset  text  
[P8_Replace_Mix]^buffer .toString (  )  ;^76^^^^^66^82^buffer.append ( getEncoding (  )  ) ;^[CLASS] RFC1522Codec  [METHOD] encodeText [RETURN_TYPE] String   String text String charset [VARIABLES] byte[]  rawdata  StringBuffer  buffer  boolean  String  charset  text  
[P14_Delete_Statement]^^76^^^^^66^82^buffer.append ( getEncoding (  )  ) ;^[CLASS] RFC1522Codec  [METHOD] encodeText [RETURN_TYPE] String   String text String charset [VARIABLES] byte[]  rawdata  StringBuffer  buffer  boolean  String  charset  text  
[P11_Insert_Donor_Statement]^buffer.append ( '?' ) ;buffer.append ( getEncoding (  )  ) ;^76^^^^^66^82^buffer.append ( getEncoding (  )  ) ;^[CLASS] RFC1522Codec  [METHOD] encodeText [RETURN_TYPE] String   String text String charset [VARIABLES] byte[]  rawdata  StringBuffer  buffer  boolean  String  charset  text  
[P11_Insert_Donor_Statement]^buffer.append ( charset ) ;buffer.append ( getEncoding (  )  ) ;^76^^^^^66^82^buffer.append ( getEncoding (  )  ) ;^[CLASS] RFC1522Codec  [METHOD] encodeText [RETURN_TYPE] String   String text String charset [VARIABLES] byte[]  rawdata  StringBuffer  buffer  boolean  String  charset  text  
[P11_Insert_Donor_Statement]^buffer.append ( "?=" ) ;buffer.append ( getEncoding (  )  ) ;^76^^^^^66^82^buffer.append ( getEncoding (  )  ) ;^[CLASS] RFC1522Codec  [METHOD] encodeText [RETURN_TYPE] String   String text String charset [VARIABLES] byte[]  rawdata  StringBuffer  buffer  boolean  String  charset  text  
[P11_Insert_Donor_Statement]^buffer.append ( "=?" ) ;buffer.append ( getEncoding (  )  ) ;^76^^^^^66^82^buffer.append ( getEncoding (  )  ) ;^[CLASS] RFC1522Codec  [METHOD] encodeText [RETURN_TYPE] String   String text String charset [VARIABLES] byte[]  rawdata  StringBuffer  buffer  boolean  String  charset  text  
[P7_Replace_Invocation]^buffer .append ( text )  ;^77^^^^^66^82^buffer.append ( '?' ) ;^[CLASS] RFC1522Codec  [METHOD] encodeText [RETURN_TYPE] String   String text String charset [VARIABLES] byte[]  rawdata  StringBuffer  buffer  boolean  String  charset  text  
[P14_Delete_Statement]^^77^^^^^66^82^buffer.append ( '?' ) ;^[CLASS] RFC1522Codec  [METHOD] encodeText [RETURN_TYPE] String   String text String charset [VARIABLES] byte[]  rawdata  StringBuffer  buffer  boolean  String  charset  text  
[P11_Insert_Donor_Statement]^buffer.append ( charset ) ;buffer.append ( '?' ) ;^77^^^^^66^82^buffer.append ( '?' ) ;^[CLASS] RFC1522Codec  [METHOD] encodeText [RETURN_TYPE] String   String text String charset [VARIABLES] byte[]  rawdata  StringBuffer  buffer  boolean  String  charset  text  
[P11_Insert_Donor_Statement]^buffer.append ( "?=" ) ;buffer.append ( '?' ) ;^77^^^^^66^82^buffer.append ( '?' ) ;^[CLASS] RFC1522Codec  [METHOD] encodeText [RETURN_TYPE] String   String text String charset [VARIABLES] byte[]  rawdata  StringBuffer  buffer  boolean  String  charset  text  
[P11_Insert_Donor_Statement]^buffer.append ( getEncoding (  )  ) ;buffer.append ( '?' ) ;^77^^^^^66^82^buffer.append ( '?' ) ;^[CLASS] RFC1522Codec  [METHOD] encodeText [RETURN_TYPE] String   String text String charset [VARIABLES] byte[]  rawdata  StringBuffer  buffer  boolean  String  charset  text  
[P11_Insert_Donor_Statement]^buffer.append ( "=?" ) ;buffer.append ( '?' ) ;^77^^^^^66^82^buffer.append ( '?' ) ;^[CLASS] RFC1522Codec  [METHOD] encodeText [RETURN_TYPE] String   String text String charset [VARIABLES] byte[]  rawdata  StringBuffer  buffer  boolean  String  charset  text  
[P5_Replace_Variable]^byte [] rawdata = doEncoding ( charset.getBytes ( charset )  ) ;^78^^^^^66^82^byte [] rawdata = doEncoding ( text.getBytes ( charset )  ) ;^[CLASS] RFC1522Codec  [METHOD] encodeText [RETURN_TYPE] String   String text String charset [VARIABLES] byte[]  rawdata  StringBuffer  buffer  boolean  String  charset  text  
[P5_Replace_Variable]^byte [] rawdata = doEncoding ( text.getBytes ( text )  ) ;^78^^^^^66^82^byte [] rawdata = doEncoding ( text.getBytes ( charset )  ) ;^[CLASS] RFC1522Codec  [METHOD] encodeText [RETURN_TYPE] String   String text String charset [VARIABLES] byte[]  rawdata  StringBuffer  buffer  boolean  String  charset  text  
[P5_Replace_Variable]^byte [] rawdata = doEncoding ( charset.getBytes ( text )  ) ;^78^^^^^66^82^byte [] rawdata = doEncoding ( text.getBytes ( charset )  ) ;^[CLASS] RFC1522Codec  [METHOD] encodeText [RETURN_TYPE] String   String text String charset [VARIABLES] byte[]  rawdata  StringBuffer  buffer  boolean  String  charset  text  
[P7_Replace_Invocation]^byte [] rawdata = encodeText ( text.getBytes ( charset )  ) ;^78^^^^^66^82^byte [] rawdata = doEncoding ( text.getBytes ( charset )  ) ;^[CLASS] RFC1522Codec  [METHOD] encodeText [RETURN_TYPE] String   String text String charset [VARIABLES] byte[]  rawdata  StringBuffer  buffer  boolean  String  charset  text  
[P7_Replace_Invocation]^byte [] rawdata = doEncoding ( text.String ( charset )  ) ;^78^^^^^66^82^byte [] rawdata = doEncoding ( text.getBytes ( charset )  ) ;^[CLASS] RFC1522Codec  [METHOD] encodeText [RETURN_TYPE] String   String text String charset [VARIABLES] byte[]  rawdata  StringBuffer  buffer  boolean  String  charset  text  
[P7_Replace_Invocation]^byte [] rawdata = doEncoding ( text .length (  )   ) ;^78^^^^^66^82^byte [] rawdata = doEncoding ( text.getBytes ( charset )  ) ;^[CLASS] RFC1522Codec  [METHOD] encodeText [RETURN_TYPE] String   String text String charset [VARIABLES] byte[]  rawdata  StringBuffer  buffer  boolean  String  charset  text  
[P14_Delete_Statement]^^78^79^^^^66^82^byte [] rawdata = doEncoding ( text.getBytes ( charset )  ) ; buffer.append ( new String ( rawdata, CharacterEncodingNames.US_ASCII )  ) ;^[CLASS] RFC1522Codec  [METHOD] encodeText [RETURN_TYPE] String   String text String charset [VARIABLES] byte[]  rawdata  StringBuffer  buffer  boolean  String  charset  text  
[P14_Delete_Statement]^^78^^^^^66^82^byte [] rawdata = doEncoding ( text.getBytes ( charset )  ) ;^[CLASS] RFC1522Codec  [METHOD] encodeText [RETURN_TYPE] String   String text String charset [VARIABLES] byte[]  rawdata  StringBuffer  buffer  boolean  String  charset  text  
[P1_Replace_Type]^buffer.append ( new char ( rawdata, CharacterEncodingNames.US_ASCII )  ) ;^79^^^^^66^82^buffer.append ( new String ( rawdata, CharacterEncodingNames.US_ASCII )  ) ;^[CLASS] RFC1522Codec  [METHOD] encodeText [RETURN_TYPE] String   String text String charset [VARIABLES] byte[]  rawdata  StringBuffer  buffer  boolean  String  charset  text  
[P5_Replace_Variable]^buffer.append ( new String (  CharacterEncodingNames.US_ASCII )  ) ;^79^^^^^66^82^buffer.append ( new String ( rawdata, CharacterEncodingNames.US_ASCII )  ) ;^[CLASS] RFC1522Codec  [METHOD] encodeText [RETURN_TYPE] String   String text String charset [VARIABLES] byte[]  rawdata  StringBuffer  buffer  boolean  String  charset  text  
[P5_Replace_Variable]^buffer.append ( new String ( rawdata )  ) ;^79^^^^^66^82^buffer.append ( new String ( rawdata, CharacterEncodingNames.US_ASCII )  ) ;^[CLASS] RFC1522Codec  [METHOD] encodeText [RETURN_TYPE] String   String text String charset [VARIABLES] byte[]  rawdata  StringBuffer  buffer  boolean  String  charset  text  
[P5_Replace_Variable]^buffer.append ( new String ( CharacterEncodingNames.US_ASCII, rawdata )  ) ;^79^^^^^66^82^buffer.append ( new String ( rawdata, CharacterEncodingNames.US_ASCII )  ) ;^[CLASS] RFC1522Codec  [METHOD] encodeText [RETURN_TYPE] String   String text String charset [VARIABLES] byte[]  rawdata  StringBuffer  buffer  boolean  String  charset  text  
[P14_Delete_Statement]^^79^80^^^^66^82^buffer.append ( new String ( rawdata, CharacterEncodingNames.US_ASCII )  ) ; buffer.append ( "?=" ) ;^[CLASS] RFC1522Codec  [METHOD] encodeText [RETURN_TYPE] String   String text String charset [VARIABLES] byte[]  rawdata  StringBuffer  buffer  boolean  String  charset  text  
[P11_Insert_Donor_Statement]^byte[] data = text.substring ( from, to ) .getBytes ( CharacterEncodingNames.US_ASCII ) ;buffer.append ( new String ( rawdata, CharacterEncodingNames.US_ASCII )  ) ;^79^^^^^66^82^buffer.append ( new String ( rawdata, CharacterEncodingNames.US_ASCII )  ) ;^[CLASS] RFC1522Codec  [METHOD] encodeText [RETURN_TYPE] String   String text String charset [VARIABLES] byte[]  rawdata  StringBuffer  buffer  boolean  String  charset  text  
[P3_Replace_Literal]^buffer.append ( "" ) ;^80^^^^^66^82^buffer.append ( "?=" ) ;^[CLASS] RFC1522Codec  [METHOD] encodeText [RETURN_TYPE] String   String text String charset [VARIABLES] byte[]  rawdata  StringBuffer  buffer  boolean  String  charset  text  
[P14_Delete_Statement]^^80^81^^^^66^82^buffer.append ( "?=" ) ; return buffer.toString (  ) ;^[CLASS] RFC1522Codec  [METHOD] encodeText [RETURN_TYPE] String   String text String charset [VARIABLES] byte[]  rawdata  StringBuffer  buffer  boolean  String  charset  text  
[P11_Insert_Donor_Statement]^buffer.append ( '?' ) ;buffer.append ( "?=" ) ;^80^^^^^66^82^buffer.append ( "?=" ) ;^[CLASS] RFC1522Codec  [METHOD] encodeText [RETURN_TYPE] String   String text String charset [VARIABLES] byte[]  rawdata  StringBuffer  buffer  boolean  String  charset  text  
[P11_Insert_Donor_Statement]^buffer.append ( charset ) ;buffer.append ( "?=" ) ;^80^^^^^66^82^buffer.append ( "?=" ) ;^[CLASS] RFC1522Codec  [METHOD] encodeText [RETURN_TYPE] String   String text String charset [VARIABLES] byte[]  rawdata  StringBuffer  buffer  boolean  String  charset  text  
[P11_Insert_Donor_Statement]^buffer.append ( getEncoding (  )  ) ;buffer.append ( "?=" ) ;^80^^^^^66^82^buffer.append ( "?=" ) ;^[CLASS] RFC1522Codec  [METHOD] encodeText [RETURN_TYPE] String   String text String charset [VARIABLES] byte[]  rawdata  StringBuffer  buffer  boolean  String  charset  text  
[P11_Insert_Donor_Statement]^buffer.append ( "=?" ) ;buffer.append ( "?=" ) ;^80^^^^^66^82^buffer.append ( "?=" ) ;^[CLASS] RFC1522Codec  [METHOD] encodeText [RETURN_TYPE] String   String text String charset [VARIABLES] byte[]  rawdata  StringBuffer  buffer  boolean  String  charset  text  
[P7_Replace_Invocation]^return buffer.append (  ) ;^81^^^^^66^82^return buffer.toString (  ) ;^[CLASS] RFC1522Codec  [METHOD] encodeText [RETURN_TYPE] String   String text String charset [VARIABLES] byte[]  rawdata  StringBuffer  buffer  boolean  String  charset  text  
[P7_Replace_Invocation]^return buffer .StringBuffer (  )  ;^81^^^^^66^82^return buffer.toString (  ) ;^[CLASS] RFC1522Codec  [METHOD] encodeText [RETURN_TYPE] String   String text String charset [VARIABLES] byte[]  rawdata  StringBuffer  buffer  boolean  String  charset  text  
[P14_Delete_Statement]^^81^^^^^66^82^return buffer.toString (  ) ;^[CLASS] RFC1522Codec  [METHOD] encodeText [RETURN_TYPE] String   String text String charset [VARIABLES] byte[]  rawdata  StringBuffer  buffer  boolean  String  charset  text  
[P2_Replace_Operator]^if  ( text != null )  {^100^^^^^85^115^if  ( text == null )  {^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P5_Replace_Variable]^if  ( encoding == null )  {^100^^^^^85^115^if  ( text == null )  {^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P8_Replace_Mix]^if  ( text == this )  {^100^^^^^85^115^if  ( text == null )  {^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P15_Unwrap_Block]^return null;^100^101^102^^^85^115^if  ( text == null )  { return null; }^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P16_Remove_Block]^^100^101^102^^^85^115^if  ( text == null )  { return null; }^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P8_Replace_Mix]^return true;^101^^^^^86^116^return null;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P8_Replace_Mix]^return this;^101^^^^^86^116^return null;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P2_Replace_Operator]^if  (  ( !text.startsWith ( "=?" )  )  &&  ( !text.endsWith ( "?=" )  )  )  {^103^^^^^88^118^if  (  ( !text.startsWith ( "=?" )  )  ||  ( !text.endsWith ( "?=" )  )  )  {^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P3_Replace_Literal]^if  (  ( !text.startsWith ( "?" )  )  ||  ( !text.endsWith ( "?=" )  )  )  {^103^^^^^88^118^if  (  ( !text.startsWith ( "=?" )  )  ||  ( !text.endsWith ( "?=" )  )  )  {^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P6_Replace_Expression]^if  (  ( !text.startsWith ( "=?" )  )  ) {^103^^^^^88^118^if  (  ( !text.startsWith ( "=?" )  )  ||  ( !text.endsWith ( "?=" )  )  )  {^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P6_Replace_Expression]^if  (   ( !text.endsWith ( "?=" )  )  )  {^103^^^^^88^118^if  (  ( !text.startsWith ( "=?" )  )  ||  ( !text.endsWith ( "?=" )  )  )  {^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P7_Replace_Invocation]^if  (  ( !text.String ( "=?" )  )  ||  ( !text.endsWith ( "?=" )  )  )  {^103^^^^^88^118^if  (  ( !text.startsWith ( "=?" )  )  ||  ( !text.endsWith ( "?=" )  )  )  {^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P7_Replace_Invocation]^if  (  ( !text .endsWith ( charset )   )  ||  ( !text.endsWith ( "?=" )  )  )  {^103^^^^^88^118^if  (  ( !text.startsWith ( "=?" )  )  ||  ( !text.endsWith ( "?=" )  )  )  {^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P7_Replace_Invocation]^if  (  ( !text.startsWith ( "=?" )  )  ||  ( !text.indexOf ( "?=" )  )  )  {^103^^^^^88^118^if  (  ( !text.startsWith ( "=?" )  )  ||  ( !text.endsWith ( "?=" )  )  )  {^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P7_Replace_Invocation]^if  (  ( !text.startsWith ( "=?" )  )  ||  ( !text .startsWith ( text )   )  )  {^103^^^^^88^118^if  (  ( !text.startsWith ( "=?" )  )  ||  ( !text.endsWith ( "?=" )  )  )  {^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P15_Unwrap_Block]^throw new org.apache.commons.codec.DecoderException("RFC 1522 violation: malformed encoded content");^103^104^105^^^88^118^if  (  ( !text.startsWith ( "=?" )  )  ||  ( !text.endsWith ( "?=" )  )  )  { throw new DecoderException  (" ")  ; }^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P16_Remove_Block]^^103^104^105^^^88^118^if  (  ( !text.startsWith ( "=?" )  )  ||  ( !text.endsWith ( "?=" )  )  )  { throw new DecoderException  (" ")  ; }^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P13_Insert_Block]^if  (  ( to ==  ( -1 )  )  ||  ( to == termnator )  )  {     throw new DecoderException ( "RFC 1522 violation: charset token not found" ) ; }^103^^^^^88^118^[Delete]^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P13_Insert_Block]^if  (  ( to ==  ( -1 )  )  ||  ( to == termnator )  )  {     throw new DecoderException ( "RFC 1522 violation: encoding token not found" ) ; }^103^^^^^88^118^[Delete]^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P13_Insert_Block]^if  ( ! ( getEncoding (  ) .equalsIgnoreCase ( encoding )  )  )  {     throw new DecoderException (  (  ( "This codec cannot decode " + encoding )  + " encoded content" )  ) ; }^103^^^^^88^118^[Delete]^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P13_Insert_Block]^if  ( charset.equals ( "" )  )  {     throw new DecoderException ( "RFC 1522 violation: charset not specified" ) ; }^103^^^^^88^118^[Delete]^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P4_Replace_Constructor]^throw throw  new DecoderException ( "RFC 1522 violation: charset token not found" )   ;^104^^^^^89^119^throw new DecoderException  (" ")  ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P13_Insert_Block]^if  (  ( ! ( text.startsWith ( "=?" )  )  )  ||  ( ! ( text.endsWith ( "?=" )  )  )  )  {     throw new DecoderException ( "RFC 1522 violation: malformed encoded content" ) ; }^104^^^^^89^119^[Delete]^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P13_Insert_Block]^if  ( charset.equals ( "" )  )  {     throw new DecoderException ( "RFC 1522 violation: charset not specified" ) ; }^104^^^^^89^119^[Delete]^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P13_Insert_Block]^if  (  ( to ==  ( -1 )  )  ||  ( to == termnator )  )  {     throw new DecoderException ( "RFC 1522 violation: charset token not found" ) ; }^104^^^^^89^119^[Delete]^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P13_Insert_Block]^if  (  ( to ==  ( -1 )  )  ||  ( to == termnator )  )  {     throw new DecoderException ( "RFC 1522 violation: encoding token not found" ) ; }^104^^^^^89^119^[Delete]^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P3_Replace_Literal]^if  (  ( !text.startsWith ( "=" )  )  ||  ( !text.endsWith ( "?=" )  )  )  {^103^^^^^88^118^if  (  ( !text.startsWith ( "=?" )  )  ||  ( !text.endsWith ( "?=" )  )  )  {^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P8_Replace_Mix]^if  (  ( !text .endsWith ( text )   )  ||  ( !text.endsWith ( "?=" )  )  )  {^103^^^^^88^118^if  (  ( !text.startsWith ( "=?" )  )  ||  ( !text.endsWith ( "?=" )  )  )  {^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P3_Replace_Literal]^if  (  ( !text.startsWith ( "=?" )  )  ||  ( !text.endsWith ( "?=?" )  )  )  {^103^^^^^88^118^if  (  ( !text.startsWith ( "=?" )  )  ||  ( !text.endsWith ( "?=" )  )  )  {^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P1_Replace_Type]^short  termnator = text.length (  )  - 2;^106^^^^^91^121^int termnator = text.length (  )  - 2;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P2_Replace_Operator]^int termnator = text.length (  )   &&  2;^106^^^^^91^121^int termnator = text.length (  )  - 2;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P3_Replace_Literal]^int termnator = text.length (  )  ;^106^^^^^91^121^int termnator = text.length (  )  - 2;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P3_Replace_Literal]^int termnator = text.length() + 0  - 2;^106^^^^^91^121^int termnator = text.length (  )  - 2;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P5_Replace_Variable]^int termnator = encoding.length (  )  - 2;^106^^^^^91^121^int termnator = text.length (  )  - 2;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P7_Replace_Invocation]^int termnator = text.equals (  )  - 2;^106^^^^^91^121^int termnator = text.length (  )  - 2;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P8_Replace_Mix]^int termnator = encoding.equals (  )  - 2;^106^^^^^91^121^int termnator = text.length (  )  - 2;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P14_Delete_Statement]^^106^107^^^^91^121^int termnator = text.length (  )  - 2; int from = 2;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P1_Replace_Type]^long  from = 2;^107^^^^^92^122^int from = 2;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P3_Replace_Literal]^int from = termnator;^107^^^^^92^122^int from = 2;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P1_Replace_Type]^short  to = text.indexOf ( "?", from ) ;^108^^^^^93^123^int to = text.indexOf ( "?", from ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P3_Replace_Literal]^int to = text.indexOf ( "", from ) ;^108^^^^^93^123^int to = text.indexOf ( "?", from ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P5_Replace_Variable]^int to = encoding.indexOf ( "?", from ) ;^108^^^^^93^123^int to = text.indexOf ( "?", from ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P5_Replace_Variable]^int to = text.indexOf ( "?", termnator ) ;^108^^^^^93^123^int to = text.indexOf ( "?", from ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P5_Replace_Variable]^int to = text.indexOf ( "?" ) ;^108^^^^^93^123^int to = text.indexOf ( "?", from ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P5_Replace_Variable]^int to = from.indexOf ( "?", text ) ;^108^^^^^93^123^int to = text.indexOf ( "?", from ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P5_Replace_Variable]^int to = text.indexOf ( "?", to ) ;^108^^^^^93^123^int to = text.indexOf ( "?", from ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P7_Replace_Invocation]^int to = text .endsWith ( text )  ;^108^^^^^93^123^int to = text.indexOf ( "?", from ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P14_Delete_Statement]^^108^^^^^93^123^int to = text.indexOf ( "?", from ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P11_Insert_Donor_Statement]^to = text.indexOf ( "?", from ) ;int to = text.indexOf ( "?", from ) ;^108^^^^^93^123^int to = text.indexOf ( "?", from ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P2_Replace_Operator]^if  (  ( to == -1 )  &&  ( to == termnator )  )  {^109^^^^^94^124^if  (  ( to == -1 )  ||  ( to == termnator )  )  {^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P2_Replace_Operator]^if  (  ( to > -1 )  ||  ( to == termnator )  )  {^109^^^^^94^124^if  (  ( to == -1 )  ||  ( to == termnator )  )  {^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P2_Replace_Operator]^if  (  ( to == -1 )  ||  ( to >= termnator )  )  {^109^^^^^94^124^if  (  ( to == -1 )  ||  ( to == termnator )  )  {^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P3_Replace_Literal]^if  (  ( to == -to )  ||  ( to == termnator )  )  {^109^^^^^94^124^if  (  ( to == -1 )  ||  ( to == termnator )  )  {^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P5_Replace_Variable]^if  (  ( to == -1 )  ||  ( to == from )  )  {^109^^^^^94^124^if  (  ( to == -1 )  ||  ( to == termnator )  )  {^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P5_Replace_Variable]^if  (  ( termnator == -1 )  ||  ( to == to )  )  {^109^^^^^94^124^if  (  ( to == -1 )  ||  ( to == termnator )  )  {^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P6_Replace_Expression]^if  (  ( to == -1 )  ) {^109^^^^^94^124^if  (  ( to == -1 )  ||  ( to == termnator )  )  {^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P6_Replace_Expression]^if  (   ( to == termnator )  )  {^109^^^^^94^124^if  (  ( to == -1 )  ||  ( to == termnator )  )  {^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P6_Replace_Expression]^if  ( to == -1 )  {^109^^^^^94^124^if  (  ( to == -1 )  ||  ( to == termnator )  )  {^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P6_Replace_Expression]^if  ( to == termnator )  {^109^^^^^94^124^if  (  ( to == -1 )  ||  ( to == termnator )  )  {^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P8_Replace_Mix]^if  (  ( to == -3 )  ||  ( to == termnator )  )  {^109^^^^^94^124^if  (  ( to == -1 )  ||  ( to == termnator )  )  {^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P15_Unwrap_Block]^throw new org.apache.commons.codec.DecoderException("RFC 1522 violation: charset token not found");^109^110^111^^^94^124^if  (  ( to == -1 )  ||  ( to == termnator )  )  { throw new DecoderException  (" ")  ; }^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P16_Remove_Block]^^109^110^111^^^94^124^if  (  ( to == -1 )  ||  ( to == termnator )  )  { throw new DecoderException  (" ")  ; }^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P13_Insert_Block]^if  (  ( ! ( text.startsWith ( "=?" )  )  )  ||  ( ! ( text.endsWith ( "?=" )  )  )  )  {     throw new DecoderException ( "RFC 1522 violation: malformed encoded content" ) ; }^109^^^^^94^124^[Delete]^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P13_Insert_Block]^if  (  ( to ==  ( -1 )  )  ||  ( to == termnator )  )  {     throw new DecoderException ( "RFC 1522 violation: encoding token not found" ) ; }^109^^^^^94^124^[Delete]^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P13_Insert_Block]^if  ( ! ( getEncoding (  ) .equalsIgnoreCase ( encoding )  )  )  {     throw new DecoderException (  (  ( "This codec cannot decode " + encoding )  + " encoded content" )  ) ; }^109^^^^^94^124^[Delete]^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P13_Insert_Block]^if  ( charset.equals ( "" )  )  {     throw new DecoderException ( "RFC 1522 violation: charset not specified" ) ; }^109^^^^^94^124^[Delete]^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P4_Replace_Constructor]^throw throw  new DecoderException ( "RFC 1522 violation: charset not specified" )   ;^110^^^^^95^125^throw new DecoderException  (" ")  ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P13_Insert_Block]^if  (  ( to ==  ( -1 )  )  ||  ( to == termnator )  )  {     throw new DecoderException ( "RFC 1522 violation: charset token not found" ) ; }^110^^^^^95^125^[Delete]^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P13_Insert_Block]^if  (  ( to ==  ( -1 )  )  ||  ( to == termnator )  )  {     throw new DecoderException ( "RFC 1522 violation: encoding token not found" ) ; }^110^^^^^95^125^[Delete]^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P13_Insert_Block]^if  ( charset.equals ( "" )  )  {     throw new DecoderException ( "RFC 1522 violation: charset not specified" ) ; }^110^^^^^95^125^[Delete]^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P1_Replace_Type]^char charset = text.substring ( from, to ) ;^112^^^^^97^127^String charset = text.substring ( from, to ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P5_Replace_Variable]^String charset = encoding.substring ( from, to ) ;^112^^^^^97^127^String charset = text.substring ( from, to ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P5_Replace_Variable]^String charset = text.substring ( to, to ) ;^112^^^^^97^127^String charset = text.substring ( from, to ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P5_Replace_Variable]^String charset = text.substring ( from, termnator ) ;^112^^^^^97^127^String charset = text.substring ( from, to ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P5_Replace_Variable]^String charset = text.substring (  to ) ;^112^^^^^97^127^String charset = text.substring ( from, to ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P5_Replace_Variable]^String charset = text.substring ( from ) ;^112^^^^^97^127^String charset = text.substring ( from, to ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P5_Replace_Variable]^String charset = from.substring ( text, to ) ;^112^^^^^97^127^String charset = text.substring ( from, to ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P5_Replace_Variable]^String charset = text.substring ( to, from ) ;^112^^^^^97^127^String charset = text.substring ( from, to ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P7_Replace_Invocation]^String charset = text .String ( data , charset )  ;^112^^^^^97^127^String charset = text.substring ( from, to ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P11_Insert_Donor_Statement]^String encoding = text.substring ( from, to ) ;String charset = text.substring ( from, to ) ;^112^^^^^97^127^String charset = text.substring ( from, to ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P5_Replace_Variable]^String charset = text.substring ( termnator, to ) ;^112^^^^^97^127^String charset = text.substring ( from, to ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P5_Replace_Variable]^String charset = to.substring ( from, text ) ;^112^^^^^97^127^String charset = text.substring ( from, to ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P7_Replace_Invocation]^String charset = text .String ( data , text )  ;^112^^^^^97^127^String charset = text.substring ( from, to ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P14_Delete_Statement]^^112^^^^^97^127^String charset = text.substring ( from, to ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P5_Replace_Variable]^if  ( text.equals ( "" )  )  {^113^^^^^98^128^if  ( charset.equals ( "" )  )  {^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P7_Replace_Invocation]^if  ( charset.indexOf ( "" )  )  {^113^^^^^98^128^if  ( charset.equals ( "" )  )  {^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P7_Replace_Invocation]^if  ( charset .equalsIgnoreCase ( encoding )   )  {^113^^^^^98^128^if  ( charset.equals ( "" )  )  {^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P15_Unwrap_Block]^throw new org.apache.commons.codec.DecoderException("RFC 1522 violation: charset not specified");^113^114^115^^^98^128^if  ( charset.equals ( "" )  )  { throw new DecoderException  (" ")  ; }^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P16_Remove_Block]^^113^114^115^^^98^128^if  ( charset.equals ( "" )  )  { throw new DecoderException  (" ")  ; }^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P13_Insert_Block]^if  (  ( to ==  ( -1 )  )  ||  ( to == termnator )  )  {     throw new DecoderException ( "RFC 1522 violation: charset token not found" ) ; }^113^^^^^98^128^[Delete]^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P13_Insert_Block]^if  (  ( ! ( text.startsWith ( "=?" )  )  )  ||  ( ! ( text.endsWith ( "?=" )  )  )  )  {     throw new DecoderException ( "RFC 1522 violation: malformed encoded content" ) ; }^113^^^^^98^128^[Delete]^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P13_Insert_Block]^if  (  ( to ==  ( -1 )  )  ||  ( to == termnator )  )  {     throw new DecoderException ( "RFC 1522 violation: encoding token not found" ) ; }^113^^^^^98^128^[Delete]^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P13_Insert_Block]^if  ( ! ( getEncoding (  ) .equalsIgnoreCase ( encoding )  )  )  {     throw new DecoderException (  (  ( "This codec cannot decode " + encoding )  + " encoded content" )  ) ; }^113^^^^^98^128^[Delete]^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P4_Replace_Constructor]^throw throw  new DecoderException ( "RFC 1522 violation: charset token not found" )   ;^114^^^^^99^129^throw new DecoderException  (" ")  ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P13_Insert_Block]^if  (  ( to ==  ( -1 )  )  ||  ( to == termnator )  )  {     throw new DecoderException ( "RFC 1522 violation: charset token not found" ) ; }^114^^^^^99^129^[Delete]^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P13_Insert_Block]^if  ( charset.equals ( "" )  )  {     throw new DecoderException ( "RFC 1522 violation: charset not specified" ) ; }^114^^^^^99^129^[Delete]^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P13_Insert_Block]^if  (  ( to ==  ( -1 )  )  ||  ( to == termnator )  )  {     throw new DecoderException ( "RFC 1522 violation: encoding token not found" ) ; }^114^^^^^99^129^[Delete]^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P8_Replace_Mix]^return false;^114^^^^^99^129^throw new DecoderException  (" ")  ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P8_Replace_Mix]^if  ( text.indexOf ( "" )  )  {^113^^^^^98^128^if  ( charset.equals ( "" )  )  {^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P3_Replace_Literal]^from = to ;^116^^^^^101^131^from = to + 1;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P5_Replace_Variable]^from = termnator + 1;^116^^^^^101^131^from = to + 1;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P8_Replace_Mix]^from = to + 2;^116^^^^^101^131^from = to + 1;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P5_Replace_Variable]^to = text.indexOf ( "?", to ) ;^117^^^^^102^132^to = text.indexOf ( "?", from ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P5_Replace_Variable]^to = text.indexOf ( "?" ) ;^117^^^^^102^132^to = text.indexOf ( "?", from ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P5_Replace_Variable]^to = from.indexOf ( "?", text ) ;^117^^^^^102^132^to = text.indexOf ( "?", from ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P7_Replace_Invocation]^to = text .endsWith ( encoding )  ;^117^^^^^102^132^to = text.indexOf ( "?", from ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P8_Replace_Mix]^to =  encoding.indexOf ( "?", from ) ;^117^^^^^102^132^to = text.indexOf ( "?", from ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P3_Replace_Literal]^to = text.indexOf ( "", from ) ;^117^^^^^102^132^to = text.indexOf ( "?", from ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P7_Replace_Invocation]^to = text .endsWith ( charset )  ;^117^^^^^102^132^to = text.indexOf ( "?", from ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P14_Delete_Statement]^^117^^^^^102^132^to = text.indexOf ( "?", from ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P11_Insert_Donor_Statement]^int to = text.indexOf ( "?", from ) ;to = text.indexOf ( "?", from ) ;^117^^^^^102^132^to = text.indexOf ( "?", from ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P2_Replace_Operator]^if  (  ( to == -1 )  &&  ( to == termnator )  )  {^118^^^^^103^133^if  (  ( to == -1 )  ||  ( to == termnator )  )  {^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P2_Replace_Operator]^if  (  ( to != -1 )  ||  ( to == termnator )  )  {^118^^^^^103^133^if  (  ( to == -1 )  ||  ( to == termnator )  )  {^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P2_Replace_Operator]^if  (  ( to == -1 )  ||  ( to != termnator )  )  {^118^^^^^103^133^if  (  ( to == -1 )  ||  ( to == termnator )  )  {^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P3_Replace_Literal]^if  (  ( to == -termnator )  ||  ( to == termnator )  )  {^118^^^^^103^133^if  (  ( to == -1 )  ||  ( to == termnator )  )  {^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P5_Replace_Variable]^if  (  ( from == -1 )  ||  ( to == termnator )  )  {^118^^^^^103^133^if  (  ( to == -1 )  ||  ( to == termnator )  )  {^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P5_Replace_Variable]^if  (  ( to == -1 )  ||  ( to == from )  )  {^118^^^^^103^133^if  (  ( to == -1 )  ||  ( to == termnator )  )  {^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P5_Replace_Variable]^if  (  ( termnator == -1 )  ||  ( to == to )  )  {^118^^^^^103^133^if  (  ( to == -1 )  ||  ( to == termnator )  )  {^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P6_Replace_Expression]^if  (  ( to == -1 )  ) {^118^^^^^103^133^if  (  ( to == -1 )  ||  ( to == termnator )  )  {^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P6_Replace_Expression]^if  (   ( to == termnator )  )  {^118^^^^^103^133^if  (  ( to == -1 )  ||  ( to == termnator )  )  {^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P6_Replace_Expression]^if  ( to == -1 )  {^118^^^^^103^133^if  (  ( to == -1 )  ||  ( to == termnator )  )  {^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P6_Replace_Expression]^if  ( to == termnator )  {^118^^^^^103^133^if  (  ( to == -1 )  ||  ( to == termnator )  )  {^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P8_Replace_Mix]^if  (  ( to == -3 )  ) {^118^^^^^103^133^if  (  ( to == -1 )  ||  ( to == termnator )  )  {^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P15_Unwrap_Block]^throw new org.apache.commons.codec.DecoderException("RFC 1522 violation: encoding token not found");^118^119^120^^^103^133^if  (  ( to == -1 )  ||  ( to == termnator )  )  { throw new DecoderException  (" ")  ; }^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P16_Remove_Block]^^118^119^120^^^103^133^if  (  ( to == -1 )  ||  ( to == termnator )  )  { throw new DecoderException  (" ")  ; }^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P13_Insert_Block]^if  (  ( to ==  ( -1 )  )  ||  ( to == termnator )  )  {     throw new DecoderException ( "RFC 1522 violation: charset token not found" ) ; }^118^^^^^103^133^[Delete]^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P13_Insert_Block]^if  (  ( ! ( text.startsWith ( "=?" )  )  )  ||  ( ! ( text.endsWith ( "?=" )  )  )  )  {     throw new DecoderException ( "RFC 1522 violation: malformed encoded content" ) ; }^118^^^^^103^133^[Delete]^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P13_Insert_Block]^if  ( ! ( getEncoding (  ) .equalsIgnoreCase ( encoding )  )  )  {     throw new DecoderException (  (  ( "This codec cannot decode " + encoding )  + " encoded content" )  ) ; }^118^^^^^103^133^[Delete]^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P13_Insert_Block]^if  ( charset.equals ( "" )  )  {     throw new DecoderException ( "RFC 1522 violation: charset not specified" ) ; }^118^^^^^103^133^[Delete]^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P4_Replace_Constructor]^throw throw  new DecoderException ( "RFC 1522 violation: charset token not found" )   ;^119^^^^^104^134^throw new DecoderException  (" ")  ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P13_Insert_Block]^if  (  ( to ==  ( -1 )  )  ||  ( to == termnator )  )  {     throw new DecoderException ( "RFC 1522 violation: charset token not found" ) ; }^119^^^^^104^134^[Delete]^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P13_Insert_Block]^if  (  ( to ==  ( -1 )  )  ||  ( to == termnator )  )  {     throw new DecoderException ( "RFC 1522 violation: encoding token not found" ) ; }^119^^^^^104^134^[Delete]^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P13_Insert_Block]^if  ( charset.equals ( "" )  )  {     throw new DecoderException ( "RFC 1522 violation: charset not specified" ) ; }^119^^^^^104^134^[Delete]^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P8_Replace_Mix]^return 0;^119^^^^^104^134^throw new DecoderException  (" ")  ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P8_Replace_Mix]^return true;^119^^^^^104^134^throw new DecoderException  (" ")  ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P1_Replace_Type]^char encoding = text.substring ( from, to ) ;^121^^^^^106^136^String encoding = text.substring ( from, to ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P5_Replace_Variable]^String encoding = charset.substring ( from, to ) ;^121^^^^^106^136^String encoding = text.substring ( from, to ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P5_Replace_Variable]^String encoding = text.substring ( to, to ) ;^121^^^^^106^136^String encoding = text.substring ( from, to ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P5_Replace_Variable]^String encoding = text.substring ( from, termnator ) ;^121^^^^^106^136^String encoding = text.substring ( from, to ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P5_Replace_Variable]^String encoding = text.substring (  to ) ;^121^^^^^106^136^String encoding = text.substring ( from, to ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P5_Replace_Variable]^String encoding = text.substring ( from ) ;^121^^^^^106^136^String encoding = text.substring ( from, to ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P5_Replace_Variable]^String encoding = to.substring ( from, text ) ;^121^^^^^106^136^String encoding = text.substring ( from, to ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P5_Replace_Variable]^String encoding = text.substring ( to, from ) ;^121^^^^^106^136^String encoding = text.substring ( from, to ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P11_Insert_Donor_Statement]^String charset = text.substring ( from, to ) ;String encoding = text.substring ( from, to ) ;^121^^^^^106^136^String encoding = text.substring ( from, to ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P5_Replace_Variable]^String encoding = encoding.substring ( from, to ) ;^121^^^^^106^136^String encoding = text.substring ( from, to ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P5_Replace_Variable]^String encoding = text.substring ( termnator, to ) ;^121^^^^^106^136^String encoding = text.substring ( from, to ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P5_Replace_Variable]^String encoding = from.substring ( text, to ) ;^121^^^^^106^136^String encoding = text.substring ( from, to ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P7_Replace_Invocation]^String encoding = text .String ( data , text )  ;^121^^^^^106^136^String encoding = text.substring ( from, to ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P14_Delete_Statement]^^121^^^^^106^136^String encoding = text.substring ( from, to ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P6_Replace_Expression]^if  ( "This codec cannot decode " + encoding )  {^122^^^^^107^137^if  ( !getEncoding (  ) .equalsIgnoreCase ( encoding )  )  {^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P7_Replace_Invocation]^if  ( !getEncoding (  ) .getBytes ( encoding )  )  {^122^^^^^107^137^if  ( !getEncoding (  ) .equalsIgnoreCase ( encoding )  )  {^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P8_Replace_Mix]^if  ( !getEncoding (  ) .equalsIgnoreCase ( text )  )  {^122^^^^^107^137^if  ( !getEncoding (  ) .equalsIgnoreCase ( encoding )  )  {^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P15_Unwrap_Block]^throw new org.apache.commons.codec.DecoderException((("This codec cannot decode " + encoding) + " encoded content"));^122^123^124^125^^107^137^if  ( !getEncoding (  ) .equalsIgnoreCase ( encoding )  )  { throw new DecoderException ( "This codec cannot decode " + encoding + " encoded content" ) ; }^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P16_Remove_Block]^^122^123^124^125^^107^137^if  ( !getEncoding (  ) .equalsIgnoreCase ( encoding )  )  { throw new DecoderException ( "This codec cannot decode " + encoding + " encoded content" ) ; }^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P13_Insert_Block]^if  (  ( to ==  ( -1 )  )  ||  ( to == termnator )  )  {     throw new DecoderException ( "RFC 1522 violation: charset token not found" ) ; }^122^^^^^107^137^[Delete]^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P13_Insert_Block]^if  (  ( ! ( text.startsWith ( "=?" )  )  )  ||  ( ! ( text.endsWith ( "?=" )  )  )  )  {     throw new DecoderException ( "RFC 1522 violation: malformed encoded content" ) ; }^122^^^^^107^137^[Delete]^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P13_Insert_Block]^if  (  ( to ==  ( -1 )  )  ||  ( to == termnator )  )  {     throw new DecoderException ( "RFC 1522 violation: encoding token not found" ) ; }^122^^^^^107^137^[Delete]^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P13_Insert_Block]^if  ( charset.equals ( "" )  )  {     throw new DecoderException ( "RFC 1522 violation: charset not specified" ) ; }^122^^^^^107^137^[Delete]^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P2_Replace_Operator]^throw new DecoderException ( "This codec cannot decode "  ==  encoding  ==  " encoded content" ) ;^123^124^^^^108^138^throw new DecoderException ( "This codec cannot decode " + encoding + " encoded content" ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P2_Replace_Operator]^throw new DecoderException ( "This codec cannot decode "  |  encoding + " encoded content" ) ;^123^124^^^^108^138^throw new DecoderException ( "This codec cannot decode " + encoding + " encoded content" ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P3_Replace_Literal]^throw new DecoderException ( "hhis codec cannot decode " + encoding + " encoded content" ) ;^123^124^^^^108^138^throw new DecoderException ( "This codec cannot decode " + encoding + " encoded content" ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P3_Replace_Literal]^throw new DecoderException ( "This codec cannot decode " + encoding + " encoded content encoded " ) ;^123^124^^^^108^138^throw new DecoderException ( "This codec cannot decode " + encoding + " encoded content" ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P5_Replace_Variable]^throw new DecoderException ( "This codec cannot decode " + text + " encoded content" ) ;^123^124^^^^108^138^throw new DecoderException ( "This codec cannot decode " + encoding + " encoded content" ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P13_Insert_Block]^if  ( ! ( getEncoding (  ) .equalsIgnoreCase ( encoding )  )  )  {     throw new DecoderException (  (  ( "This codec cannot decode " + encoding )  + " encoded content" )  ) ; }^123^^^^^108^138^[Delete]^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P2_Replace_Operator]^throw new DecoderException ( "This codec cannot decode "  &  encoding  &  " encoded content" ) ;^123^124^^^^108^138^throw new DecoderException ( "This codec cannot decode " + encoding + " encoded content" ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P2_Replace_Operator]^throw new DecoderException ( "This codec cannot decode "  >=  encoding + " encoded content" ) ;^123^124^^^^108^138^throw new DecoderException ( "This codec cannot decode " + encoding + " encoded content" ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P3_Replace_Literal]^throw new DecoderException ( "This codec cannot decode his c" + encoding + " encoded content" ) ;^123^124^^^^108^138^throw new DecoderException ( "This codec cannot decode " + encoding + " encoded content" ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P3_Replace_Literal]^throw new DecoderException ( "This codec cannot decode " + encoding + " conencoded content" ) ;^123^124^^^^108^138^throw new DecoderException ( "This codec cannot decode " + encoding + " encoded content" ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P2_Replace_Operator]^throw new DecoderException ( "This codec cannot decode "  >=  encoding  >=  " encoded content" ) ;^123^124^^^^108^138^throw new DecoderException ( "This codec cannot decode " + encoding + " encoded content" ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P2_Replace_Operator]^throw new DecoderException ( "This codec cannot decode "  <  encoding + " encoded content" ) ;^123^124^^^^108^138^throw new DecoderException ( "This codec cannot decode " + encoding + " encoded content" ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P3_Replace_Literal]^throw new DecoderException ( " codhis codec cannot decode " + encoding + " encoded content" ) ;^123^124^^^^108^138^throw new DecoderException ( "This codec cannot decode " + encoding + " encoded content" ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P3_Replace_Literal]^throw new DecoderException ( "This codec cannot decode " + encoding + "" ) ;^123^124^^^^108^138^throw new DecoderException ( "This codec cannot decode " + encoding + " encoded content" ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P2_Replace_Operator]^throw new DecoderException ( "This codec cannot decode "  >>  encoding  >>  " encoded content" ) ;^123^124^^^^108^138^throw new DecoderException ( "This codec cannot decode " + encoding + " encoded content" ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P2_Replace_Operator]^throw new DecoderException ( "This codec cannot decode "  <=  encoding + " encoded content" ) ;^123^124^^^^108^138^throw new DecoderException ( "This codec cannot decode " + encoding + " encoded content" ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P3_Replace_Literal]^throw new DecoderException ( "This codec cannot decode codec " + encoding + " encoded content" ) ;^123^124^^^^108^138^throw new DecoderException ( "This codec cannot decode " + encoding + " encoded content" ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P8_Replace_Mix]^return false;^123^124^^^^108^138^throw new DecoderException ( "This codec cannot decode " + encoding + " encoded content" ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P3_Replace_Literal]^from = to ;^126^^^^^111^141^from = to + 1;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P5_Replace_Variable]^from = termnator + 1;^126^^^^^111^141^from = to + 1;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P8_Replace_Mix]^from = to + 4;^126^^^^^111^141^from = to + 1;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P3_Replace_Literal]^to = text.indexOf ( "", from ) ;^127^^^^^112^142^to = text.indexOf ( "?", from ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P5_Replace_Variable]^to = encoding.indexOf ( "?", from ) ;^127^^^^^112^142^to = text.indexOf ( "?", from ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P5_Replace_Variable]^to = text.indexOf ( "?", to ) ;^127^^^^^112^142^to = text.indexOf ( "?", from ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P5_Replace_Variable]^to = text.indexOf ( "?" ) ;^127^^^^^112^142^to = text.indexOf ( "?", from ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P5_Replace_Variable]^to = from.indexOf ( "?", text ) ;^127^^^^^112^142^to = text.indexOf ( "?", from ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P7_Replace_Invocation]^to = text .endsWith ( charset )  ;^127^^^^^112^142^to = text.indexOf ( "?", from ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P14_Delete_Statement]^^127^^^^^112^142^to = text.indexOf ( "?", from ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P11_Insert_Donor_Statement]^int to = text.indexOf ( "?", from ) ;to = text.indexOf ( "?", from ) ;^127^^^^^112^142^to = text.indexOf ( "?", from ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P5_Replace_Variable]^byte[] data = text.substring ( from, termnator ) .getBytes ( CharacterEncodingNames.US_ASCII ) ;^128^^^^^113^143^byte[] data = text.substring ( from, to ) .getBytes ( CharacterEncodingNames.US_ASCII ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P5_Replace_Variable]^byte[] data = text.substring (  to ) .getBytes ( CharacterEncodingNames.US_ASCII ) ;^128^^^^^113^143^byte[] data = text.substring ( from, to ) .getBytes ( CharacterEncodingNames.US_ASCII ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P5_Replace_Variable]^byte[] data = text.substring ( from ) .getBytes ( CharacterEncodingNames.US_ASCII ) ;^128^^^^^113^143^byte[] data = text.substring ( from, to ) .getBytes ( CharacterEncodingNames.US_ASCII ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P5_Replace_Variable]^byte[] data = to.substring ( from, text ) .getBytes ( CharacterEncodingNames.US_ASCII ) ;^128^^^^^113^143^byte[] data = text.substring ( from, to ) .getBytes ( CharacterEncodingNames.US_ASCII ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P5_Replace_Variable]^byte[] data = text.substring ( to, from ) .getBytes ( CharacterEncodingNames.US_ASCII ) ;^128^^^^^113^143^byte[] data = text.substring ( from, to ) .getBytes ( CharacterEncodingNames.US_ASCII ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P7_Replace_Invocation]^byte[] data = text.substring ( from, to )  .length (  )  ;^128^^^^^113^143^byte[] data = text.substring ( from, to ) .getBytes ( CharacterEncodingNames.US_ASCII ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P5_Replace_Variable]^byte[] data = encoding.substring ( from, to ) .getBytes ( CharacterEncodingNames.US_ASCII ) ;^128^^^^^113^143^byte[] data = text.substring ( from, to ) .getBytes ( CharacterEncodingNames.US_ASCII ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P5_Replace_Variable]^byte[] data = text.substring ( to, to ) .getBytes ( CharacterEncodingNames.US_ASCII ) ;^128^^^^^113^143^byte[] data = text.substring ( from, to ) .getBytes ( CharacterEncodingNames.US_ASCII ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P8_Replace_Mix]^byte[] data = text.substring ( from, termnator )  .length (  )  ;^128^^^^^113^143^byte[] data = text.substring ( from, to ) .getBytes ( CharacterEncodingNames.US_ASCII ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P14_Delete_Statement]^^128^^^^^113^143^byte[] data = text.substring ( from, to ) .getBytes ( CharacterEncodingNames.US_ASCII ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P5_Replace_Variable]^byte[] data = text.substring ( termnator, to ) .getBytes ( CharacterEncodingNames.US_ASCII ) ;^128^^^^^113^143^byte[] data = text.substring ( from, to ) .getBytes ( CharacterEncodingNames.US_ASCII ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P7_Replace_Invocation]^data = doEncoding ( data ) ;^129^^^^^114^144^data = doDecoding ( data ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P8_Replace_Mix]^data =  doDecoding ( null ) ;^129^^^^^114^144^data = doDecoding ( data ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P14_Delete_Statement]^^129^130^^^^114^144^data = doDecoding ( data ) ; return new String ( data, charset ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P1_Replace_Type]^return new char ( data, charset ) ;^130^^^^^115^145^return new String ( data, charset ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P4_Replace_Constructor]^return new String (  charset ) ;^130^^^^^115^145^return new String ( data, charset ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P4_Replace_Constructor]^return new String ( data ) ;^130^^^^^115^145^return new String ( data, charset ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P5_Replace_Variable]^return new String ( data, text ) ;^130^^^^^115^145^return new String ( data, charset ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
[P5_Replace_Variable]^return new String ( charset, data ) ;^130^^^^^115^145^return new String ( data, charset ) ;^[CLASS] RFC1522Codec  [METHOD] decodeText [RETURN_TYPE] String   String text [VARIABLES] byte[]  data  boolean  String  charset  encoding  text  int  from  termnator  to  
