[P2_Replace_Operator]^if  ( str == null && str.length (  )  == 0 )  {^41^^^^^40^56^if  ( str == null || str.length (  )  == 0 )  {^[CLASS] SoundexUtils  [METHOD] clean [RETURN_TYPE] String   String str [VARIABLES] boolean  String  str  int  count  i  len  char[]  chars  
[P2_Replace_Operator]^if  ( str != null || str.length (  )  == 0 )  {^41^^^^^40^56^if  ( str == null || str.length (  )  == 0 )  {^[CLASS] SoundexUtils  [METHOD] clean [RETURN_TYPE] String   String str [VARIABLES] boolean  String  str  int  count  i  len  char[]  chars  
[P2_Replace_Operator]^if  ( str == null || str.length (  )  != 0 )  {^41^^^^^40^56^if  ( str == null || str.length (  )  == 0 )  {^[CLASS] SoundexUtils  [METHOD] clean [RETURN_TYPE] String   String str [VARIABLES] boolean  String  str  int  count  i  len  char[]  chars  
[P3_Replace_Literal]^if  ( str == null || str.length (  )  == count )  {^41^^^^^40^56^if  ( str == null || str.length (  )  == 0 )  {^[CLASS] SoundexUtils  [METHOD] clean [RETURN_TYPE] String   String str [VARIABLES] boolean  String  str  int  count  i  len  char[]  chars  
[P3_Replace_Literal]^if  ( str == null || str.length() + 7  == 0 )  {^41^^^^^40^56^if  ( str == null || str.length (  )  == 0 )  {^[CLASS] SoundexUtils  [METHOD] clean [RETURN_TYPE] String   String str [VARIABLES] boolean  String  str  int  count  i  len  char[]  chars  
[P6_Replace_Expression]^if  ( str == null ) {^41^^^^^40^56^if  ( str == null || str.length (  )  == 0 )  {^[CLASS] SoundexUtils  [METHOD] clean [RETURN_TYPE] String   String str [VARIABLES] boolean  String  str  int  count  i  len  char[]  chars  
[P6_Replace_Expression]^if  (  str.length (  )  == 0 )  {^41^^^^^40^56^if  ( str == null || str.length (  )  == 0 )  {^[CLASS] SoundexUtils  [METHOD] clean [RETURN_TYPE] String   String str [VARIABLES] boolean  String  str  int  count  i  len  char[]  chars  
[P7_Replace_Invocation]^if  ( str == null || str.charAt (  )  == 0 )  {^41^^^^^40^56^if  ( str == null || str.length (  )  == 0 )  {^[CLASS] SoundexUtils  [METHOD] clean [RETURN_TYPE] String   String str [VARIABLES] boolean  String  str  int  count  i  len  char[]  chars  
[P8_Replace_Mix]^if  ( str == true || str.length (  )  == 0 )  {^41^^^^^40^56^if  ( str == null || str.length (  )  == 0 )  {^[CLASS] SoundexUtils  [METHOD] clean [RETURN_TYPE] String   String str [VARIABLES] boolean  String  str  int  count  i  len  char[]  chars  
[P15_Unwrap_Block]^return str;^41^42^43^^^40^56^if  ( str == null || str.length (  )  == 0 )  { return str; }^[CLASS] SoundexUtils  [METHOD] clean [RETURN_TYPE] String   String str [VARIABLES] boolean  String  str  int  count  i  len  char[]  chars  
[P16_Remove_Block]^^41^42^43^^^40^56^if  ( str == null || str.length (  )  == 0 )  { return str; }^[CLASS] SoundexUtils  [METHOD] clean [RETURN_TYPE] String   String str [VARIABLES] boolean  String  str  int  count  i  len  char[]  chars  
[P13_Insert_Block]^if  (  ( es1 == null )  ||  ( es2 == null )  )  {     return 0; }^41^^^^^40^56^[Delete]^[CLASS] SoundexUtils  [METHOD] clean [RETURN_TYPE] String   String str [VARIABLES] boolean  String  str  int  count  i  len  char[]  chars  
[P3_Replace_Literal]^if  ( str == null || str.length() - 3  == 0 )  {^41^^^^^40^56^if  ( str == null || str.length (  )  == 0 )  {^[CLASS] SoundexUtils  [METHOD] clean [RETURN_TYPE] String   String str [VARIABLES] boolean  String  str  int  count  i  len  char[]  chars  
[P1_Replace_Type]^short  len = str.length (  ) ;^44^^^^^40^56^int len = str.length (  ) ;^[CLASS] SoundexUtils  [METHOD] clean [RETURN_TYPE] String   String str [VARIABLES] boolean  String  str  int  count  i  len  char[]  chars  
[P3_Replace_Literal]^int len = str.length() - 0 ;^44^^^^^40^56^int len = str.length (  ) ;^[CLASS] SoundexUtils  [METHOD] clean [RETURN_TYPE] String   String str [VARIABLES] boolean  String  str  int  count  i  len  char[]  chars  
[P7_Replace_Invocation]^int len = str.charAt (  ) ;^44^^^^^40^56^int len = str.length (  ) ;^[CLASS] SoundexUtils  [METHOD] clean [RETURN_TYPE] String   String str [VARIABLES] boolean  String  str  int  count  i  len  char[]  chars  
[P3_Replace_Literal]^int len = str.length() - 1 ;^44^^^^^40^56^int len = str.length (  ) ;^[CLASS] SoundexUtils  [METHOD] clean [RETURN_TYPE] String   String str [VARIABLES] boolean  String  str  int  count  i  len  char[]  chars  
[P14_Delete_Statement]^^44^45^^^^40^56^int len = str.length (  ) ; char[] chars = new char[len];^[CLASS] SoundexUtils  [METHOD] clean [RETURN_TYPE] String   String str [VARIABLES] boolean  String  str  int  count  i  len  char[]  chars  
[P1_Replace_Type]^long  count = 0;^46^^^^^40^56^int count = 0;^[CLASS] SoundexUtils  [METHOD] clean [RETURN_TYPE] String   String str [VARIABLES] boolean  String  str  int  count  i  len  char[]  chars  
[P3_Replace_Literal]^int count = count;^46^^^^^40^56^int count = 0;^[CLASS] SoundexUtils  [METHOD] clean [RETURN_TYPE] String   String str [VARIABLES] boolean  String  str  int  count  i  len  char[]  chars  
[P11_Insert_Donor_Statement]^int diff = 0;int count = 0;^46^^^^^40^56^int count = 0;^[CLASS] SoundexUtils  [METHOD] clean [RETURN_TYPE] String   String str [VARIABLES] boolean  String  str  int  count  i  len  char[]  chars  
[P5_Replace_Variable]^if  ( Character.isLetter ( str.charAt ( len )  )  )  {^48^^^^^40^56^if  ( Character.isLetter ( str.charAt ( i )  )  )  {^[CLASS] SoundexUtils  [METHOD] clean [RETURN_TYPE] String   String str [VARIABLES] boolean  String  str  int  count  i  len  char[]  chars  
[P5_Replace_Variable]^if  ( Character.isLetter ( i.charAt ( str )  )  )  {^48^^^^^40^56^if  ( Character.isLetter ( str.charAt ( i )  )  )  {^[CLASS] SoundexUtils  [METHOD] clean [RETURN_TYPE] String   String str [VARIABLES] boolean  String  str  int  count  i  len  char[]  chars  
[P15_Unwrap_Block]^chars[(count++)] = str.charAt(i);^48^49^50^^^40^56^if  ( Character.isLetter ( str.charAt ( i )  )  )  { chars[count++] = str.charAt ( i ) ; }^[CLASS] SoundexUtils  [METHOD] clean [RETURN_TYPE] String   String str [VARIABLES] boolean  String  str  int  count  i  len  char[]  chars  
[P16_Remove_Block]^^48^49^50^^^40^56^if  ( Character.isLetter ( str.charAt ( i )  )  )  { chars[count++] = str.charAt ( i ) ; }^[CLASS] SoundexUtils  [METHOD] clean [RETURN_TYPE] String   String str [VARIABLES] boolean  String  str  int  count  i  len  char[]  chars  
[P5_Replace_Variable]^chars[count++] = str.charAt ( len ) ;^49^^^^^40^56^chars[count++] = str.charAt ( i ) ;^[CLASS] SoundexUtils  [METHOD] clean [RETURN_TYPE] String   String str [VARIABLES] boolean  String  str  int  count  i  len  char[]  chars  
[P5_Replace_Variable]^chars[count++] = i.charAt ( str ) ;^49^^^^^40^56^chars[count++] = str.charAt ( i ) ;^[CLASS] SoundexUtils  [METHOD] clean [RETURN_TYPE] String   String str [VARIABLES] boolean  String  str  int  count  i  len  char[]  chars  
[P8_Replace_Mix]^chars[count++] =  str.charAt ( i ) ;^49^^^^^40^56^chars[count++] = str.charAt ( i ) ;^[CLASS] SoundexUtils  [METHOD] clean [RETURN_TYPE] String   String str [VARIABLES] boolean  String  str  int  count  i  len  char[]  chars  
[P14_Delete_Statement]^^49^^^^^40^56^chars[count++] = str.charAt ( i ) ;^[CLASS] SoundexUtils  [METHOD] clean [RETURN_TYPE] String   String str [VARIABLES] boolean  String  str  int  count  i  len  char[]  chars  
[P1_Replace_Type]^for  (  long  i = 0; i < len; i++ )  {^47^^^^^40^56^for  ( int i = 0; i < len; i++ )  {^[CLASS] SoundexUtils  [METHOD] clean [RETURN_TYPE] String   String str [VARIABLES] boolean  String  str  int  count  i  len  char[]  chars  
[P2_Replace_Operator]^for  ( int i = 0; i == len; i++ )  {^47^^^^^40^56^for  ( int i = 0; i < len; i++ )  {^[CLASS] SoundexUtils  [METHOD] clean [RETURN_TYPE] String   String str [VARIABLES] boolean  String  str  int  count  i  len  char[]  chars  
[P3_Replace_Literal]^for  ( int i = -7; i < len; i++ )  {^47^^^^^40^56^for  ( int i = 0; i < len; i++ )  {^[CLASS] SoundexUtils  [METHOD] clean [RETURN_TYPE] String   String str [VARIABLES] boolean  String  str  int  count  i  len  char[]  chars  
[P5_Replace_Variable]^for  ( lennt i = 0; i < len; i++ )  {^47^^^^^40^56^for  ( int i = 0; i < len; i++ )  {^[CLASS] SoundexUtils  [METHOD] clean [RETURN_TYPE] String   String str [VARIABLES] boolean  String  str  int  count  i  len  char[]  chars  
[P5_Replace_Variable]^for  ( int i = 0; i < count; i++ )  {^47^^^^^40^56^for  ( int i = 0; i < len; i++ )  {^[CLASS] SoundexUtils  [METHOD] clean [RETURN_TYPE] String   String str [VARIABLES] boolean  String  str  int  count  i  len  char[]  chars  
[P5_Replace_Variable]^for  ( lennt i = 0; i < i; i++ )  {^47^^^^^40^56^for  ( int i = 0; i < len; i++ )  {^[CLASS] SoundexUtils  [METHOD] clean [RETURN_TYPE] String   String str [VARIABLES] boolean  String  str  int  count  i  len  char[]  chars  
[P1_Replace_Type]^for  (  short  i = 0; i < len; i++ )  {^47^^^^^40^56^for  ( int i = 0; i < len; i++ )  {^[CLASS] SoundexUtils  [METHOD] clean [RETURN_TYPE] String   String str [VARIABLES] boolean  String  str  int  count  i  len  char[]  chars  
[P3_Replace_Literal]^for  ( int i = 6; i < len; i++ )  {^47^^^^^40^56^for  ( int i = 0; i < len; i++ )  {^[CLASS] SoundexUtils  [METHOD] clean [RETURN_TYPE] String   String str [VARIABLES] boolean  String  str  int  count  i  len  char[]  chars  
[P2_Replace_Operator]^if  ( count != len )  {^52^^^^^40^56^if  ( count == len )  {^[CLASS] SoundexUtils  [METHOD] clean [RETURN_TYPE] String   String str [VARIABLES] boolean  String  str  int  count  i  len  char[]  chars  
[P5_Replace_Variable]^if  ( i == len )  {^52^^^^^40^56^if  ( count == len )  {^[CLASS] SoundexUtils  [METHOD] clean [RETURN_TYPE] String   String str [VARIABLES] boolean  String  str  int  count  i  len  char[]  chars  
[P5_Replace_Variable]^if  ( count == i )  {^52^^^^^40^56^if  ( count == len )  {^[CLASS] SoundexUtils  [METHOD] clean [RETURN_TYPE] String   String str [VARIABLES] boolean  String  str  int  count  i  len  char[]  chars  
[P5_Replace_Variable]^if  ( len == count )  {^52^^^^^40^56^if  ( count == len )  {^[CLASS] SoundexUtils  [METHOD] clean [RETURN_TYPE] String   String str [VARIABLES] boolean  String  str  int  count  i  len  char[]  chars  
[P8_Replace_Mix]^if  ( len == len )  {^52^^^^^40^56^if  ( count == len )  {^[CLASS] SoundexUtils  [METHOD] clean [RETURN_TYPE] String   String str [VARIABLES] boolean  String  str  int  count  i  len  char[]  chars  
[P15_Unwrap_Block]^return str.toUpperCase(java.util.Locale.ENGLISH);^52^53^54^^^40^56^if  ( count == len )  { return str.toUpperCase ( java.util.Locale.ENGLISH ) ; }^[CLASS] SoundexUtils  [METHOD] clean [RETURN_TYPE] String   String str [VARIABLES] boolean  String  str  int  count  i  len  char[]  chars  
[P16_Remove_Block]^^52^53^54^^^40^56^if  ( count == len )  { return str.toUpperCase ( java.util.Locale.ENGLISH ) ; }^[CLASS] SoundexUtils  [METHOD] clean [RETURN_TYPE] String   String str [VARIABLES] boolean  String  str  int  count  i  len  char[]  chars  
[P7_Replace_Invocation]^return str.toUpperCase ( ) ;^53^^^^^40^56^return str.toUpperCase ( java.util.Locale.ENGLISH ) ;^[CLASS] SoundexUtils  [METHOD] clean [RETURN_TYPE] String   String str [VARIABLES] boolean  String  str  int  count  i  len  char[]  chars  
[P7_Replace_Invocation]^return str .toUpperCase (  )  ;^53^^^^^40^56^return str.toUpperCase ( java.util.Locale.ENGLISH ) ;^[CLASS] SoundexUtils  [METHOD] clean [RETURN_TYPE] String   String str [VARIABLES] boolean  String  str  int  count  i  len  char[]  chars  
[P13_Insert_Block]^if  ( count == len )  {     return str.toUpperCase ( ENGLISH ) ; }^53^^^^^40^56^[Delete]^[CLASS] SoundexUtils  [METHOD] clean [RETURN_TYPE] String   String str [VARIABLES] boolean  String  str  int  count  i  len  char[]  chars  
[P14_Delete_Statement]^^53^^^^^40^56^return str.toUpperCase ( java.util.Locale.ENGLISH ) ;^[CLASS] SoundexUtils  [METHOD] clean [RETURN_TYPE] String   String str [VARIABLES] boolean  String  str  int  count  i  len  char[]  chars  
[P1_Replace_Type]^return new char ( chars, 0, count ) .toUpperCase ( java.util.Locale.ENGLISH ) ;^55^^^^^40^56^return new String ( chars, 0, count ) .toUpperCase ( java.util.Locale.ENGLISH ) ;^[CLASS] SoundexUtils  [METHOD] clean [RETURN_TYPE] String   String str [VARIABLES] boolean  String  str  int  count  i  len  char[]  chars  
[P3_Replace_Literal]^return new String ( chars, -2, count ) .toUpperCase ( java.util.Locale.ENGLISH ) ;^55^^^^^40^56^return new String ( chars, 0, count ) .toUpperCase ( java.util.Locale.ENGLISH ) ;^[CLASS] SoundexUtils  [METHOD] clean [RETURN_TYPE] String   String str [VARIABLES] boolean  String  str  int  count  i  len  char[]  chars  
[P4_Replace_Constructor]^return new String (  0, count ) .toUpperCase ( java.util.Locale.ENGLISH ) ;^55^^^^^40^56^return new String ( chars, 0, count ) .toUpperCase ( java.util.Locale.ENGLISH ) ;^[CLASS] SoundexUtils  [METHOD] clean [RETURN_TYPE] String   String str [VARIABLES] boolean  String  str  int  count  i  len  char[]  chars  
[P4_Replace_Constructor]^return new String ( chars, 0 ) .toUpperCase ( java.util.Locale.ENGLISH ) ;^55^^^^^40^56^return new String ( chars, 0, count ) .toUpperCase ( java.util.Locale.ENGLISH ) ;^[CLASS] SoundexUtils  [METHOD] clean [RETURN_TYPE] String   String str [VARIABLES] boolean  String  str  int  count  i  len  char[]  chars  
[P5_Replace_Variable]^return new String ( count, 0, chars ) .toUpperCase ( java.util.Locale.ENGLISH ) ;^55^^^^^40^56^return new String ( chars, 0, count ) .toUpperCase ( java.util.Locale.ENGLISH ) ;^[CLASS] SoundexUtils  [METHOD] clean [RETURN_TYPE] String   String str [VARIABLES] boolean  String  str  int  count  i  len  char[]  chars  
[P8_Replace_Mix]^return new String ( chars,  1, count ) .toUpperCase ( java.util.Locale.ENGLISH ) ;^55^^^^^40^56^return new String ( chars, 0, count ) .toUpperCase ( java.util.Locale.ENGLISH ) ;^[CLASS] SoundexUtils  [METHOD] clean [RETURN_TYPE] String   String str [VARIABLES] boolean  String  str  int  count  i  len  char[]  chars  
[P3_Replace_Literal]^return new String ( chars, i, count ) .toUpperCase ( java.util.Locale.ENGLISH ) ;^55^^^^^40^56^return new String ( chars, 0, count ) .toUpperCase ( java.util.Locale.ENGLISH ) ;^[CLASS] SoundexUtils  [METHOD] clean [RETURN_TYPE] String   String str [VARIABLES] boolean  String  str  int  count  i  len  char[]  chars  
[P5_Replace_Variable]^return new String ( chars, 0, len ) .toUpperCase ( java.util.Locale.ENGLISH ) ;^55^^^^^40^56^return new String ( chars, 0, count ) .toUpperCase ( java.util.Locale.ENGLISH ) ;^[CLASS] SoundexUtils  [METHOD] clean [RETURN_TYPE] String   String str [VARIABLES] boolean  String  str  int  count  i  len  char[]  chars  
[P14_Delete_Statement]^^55^^^^^40^56^return new String ( chars, 0, count ) .toUpperCase ( java.util.Locale.ENGLISH ) ;^[CLASS] SoundexUtils  [METHOD] clean [RETURN_TYPE] String   String str [VARIABLES] boolean  String  str  int  count  i  len  char[]  chars  
[P5_Replace_Variable]^return differenceEncoded ( encoder.encode ( s1 ) .encode ( s2 )  ) ;^85^^^^^84^86^return differenceEncoded ( encoder.encode ( s1 ) , encoder.encode ( s2 )  ) ;^[CLASS] SoundexUtils  [METHOD] difference [RETURN_TYPE] int   StringEncoder encoder String s1 String s2 [VARIABLES] StringEncoder  encoder  boolean  String  s1  s2  
[P5_Replace_Variable]^return differenceEncoded ( s2.encode ( s1 ) , encoder.encode ( encoder )  ) ;^85^^^^^84^86^return differenceEncoded ( encoder.encode ( s1 ) , encoder.encode ( s2 )  ) ;^[CLASS] SoundexUtils  [METHOD] difference [RETURN_TYPE] int   StringEncoder encoder String s1 String s2 [VARIABLES] StringEncoder  encoder  boolean  String  s1  s2  
[P5_Replace_Variable]^return differenceEncoded ( s1.encode ( encoder ) , encoder.encode ( s2 )  ) ;^85^^^^^84^86^return differenceEncoded ( encoder.encode ( s1 ) , encoder.encode ( s2 )  ) ;^[CLASS] SoundexUtils  [METHOD] difference [RETURN_TYPE] int   StringEncoder encoder String s1 String s2 [VARIABLES] StringEncoder  encoder  boolean  String  s1  s2  
[P5_Replace_Variable]^return differenceEncoded ( encoder.encode ( s2 ) , encoder.encode ( s1 )  ) ;^85^^^^^84^86^return differenceEncoded ( encoder.encode ( s1 ) , encoder.encode ( s2 )  ) ;^[CLASS] SoundexUtils  [METHOD] difference [RETURN_TYPE] int   StringEncoder encoder String s1 String s2 [VARIABLES] StringEncoder  encoder  boolean  String  s1  s2  
[P5_Replace_Variable]^return differenceEncoded ( encoder.encode ( s1 ) , encoder.encode ( s1 )  ) ;^85^^^^^84^86^return differenceEncoded ( encoder.encode ( s1 ) , encoder.encode ( s2 )  ) ;^[CLASS] SoundexUtils  [METHOD] difference [RETURN_TYPE] int   StringEncoder encoder String s1 String s2 [VARIABLES] StringEncoder  encoder  boolean  String  s1  s2  
[P14_Delete_Statement]^^85^86^^^^84^86^return differenceEncoded ( encoder.encode ( s1 ) , encoder.encode ( s2 )  ) ; }^[CLASS] SoundexUtils  [METHOD] difference [RETURN_TYPE] int   StringEncoder encoder String s1 String s2 [VARIABLES] StringEncoder  encoder  boolean  String  s1  s2  
[P8_Replace_Mix]^return differenceEncoded ( encoder.encode ( s2 ) , encoder.encode ( s2 )  ) ;^85^^^^^84^86^return differenceEncoded ( encoder.encode ( s1 ) , encoder.encode ( s2 )  ) ;^[CLASS] SoundexUtils  [METHOD] difference [RETURN_TYPE] int   StringEncoder encoder String s1 String s2 [VARIABLES] StringEncoder  encoder  boolean  String  s1  s2  
[P2_Replace_Operator]^if  ( es1 == null && es2 == null )  {^110^^^^^108^121^if  ( es1 == null || es2 == null )  {^[CLASS] SoundexUtils  [METHOD] differenceEncoded [RETURN_TYPE] int   String es1 String es2 [VARIABLES] boolean  String  es1  es2  int  diff  i  lengthToMatch  
[P2_Replace_Operator]^if  ( es1 != null || es2 == null )  {^110^^^^^108^121^if  ( es1 == null || es2 == null )  {^[CLASS] SoundexUtils  [METHOD] differenceEncoded [RETURN_TYPE] int   String es1 String es2 [VARIABLES] boolean  String  es1  es2  int  diff  i  lengthToMatch  
[P2_Replace_Operator]^if  ( es1 == null || es2 != null )  {^110^^^^^108^121^if  ( es1 == null || es2 == null )  {^[CLASS] SoundexUtils  [METHOD] differenceEncoded [RETURN_TYPE] int   String es1 String es2 [VARIABLES] boolean  String  es1  es2  int  diff  i  lengthToMatch  
[P5_Replace_Variable]^if  ( es2 == null || es1 == null )  {^110^^^^^108^121^if  ( es1 == null || es2 == null )  {^[CLASS] SoundexUtils  [METHOD] differenceEncoded [RETURN_TYPE] int   String es1 String es2 [VARIABLES] boolean  String  es1  es2  int  diff  i  lengthToMatch  
[P6_Replace_Expression]^if  ( es1 == null ) {^110^^^^^108^121^if  ( es1 == null || es2 == null )  {^[CLASS] SoundexUtils  [METHOD] differenceEncoded [RETURN_TYPE] int   String es1 String es2 [VARIABLES] boolean  String  es1  es2  int  diff  i  lengthToMatch  
[P6_Replace_Expression]^if  (  es2 == null )  {^110^^^^^108^121^if  ( es1 == null || es2 == null )  {^[CLASS] SoundexUtils  [METHOD] differenceEncoded [RETURN_TYPE] int   String es1 String es2 [VARIABLES] boolean  String  es1  es2  int  diff  i  lengthToMatch  
[P8_Replace_Mix]^if  ( es1 == this ) {^110^^^^^108^121^if  ( es1 == null || es2 == null )  {^[CLASS] SoundexUtils  [METHOD] differenceEncoded [RETURN_TYPE] int   String es1 String es2 [VARIABLES] boolean  String  es1  es2  int  diff  i  lengthToMatch  
[P15_Unwrap_Block]^return 0;^110^111^112^^^108^121^if  ( es1 == null || es2 == null )  { return 0; }^[CLASS] SoundexUtils  [METHOD] differenceEncoded [RETURN_TYPE] int   String es1 String es2 [VARIABLES] boolean  String  es1  es2  int  diff  i  lengthToMatch  
[P16_Remove_Block]^^110^111^112^^^108^121^if  ( es1 == null || es2 == null )  { return 0; }^[CLASS] SoundexUtils  [METHOD] differenceEncoded [RETURN_TYPE] int   String es1 String es2 [VARIABLES] boolean  String  es1  es2  int  diff  i  lengthToMatch  
[P13_Insert_Block]^if  (  ( str == null )  ||  (  ( str.length (  )  )  == 0 )  )  {     return str; }^110^^^^^108^121^[Delete]^[CLASS] SoundexUtils  [METHOD] differenceEncoded [RETURN_TYPE] int   String es1 String es2 [VARIABLES] boolean  String  es1  es2  int  diff  i  lengthToMatch  
[P3_Replace_Literal]^return diff;^111^^^^^108^121^return 0;^[CLASS] SoundexUtils  [METHOD] differenceEncoded [RETURN_TYPE] int   String es1 String es2 [VARIABLES] boolean  String  es1  es2  int  diff  i  lengthToMatch  
[P8_Replace_Mix]^return 0 - 2;^111^^^^^108^121^return 0;^[CLASS] SoundexUtils  [METHOD] differenceEncoded [RETURN_TYPE] int   String es1 String es2 [VARIABLES] boolean  String  es1  es2  int  diff  i  lengthToMatch  
[P3_Replace_Literal]^return 7;^111^^^^^108^121^return 0;^[CLASS] SoundexUtils  [METHOD] differenceEncoded [RETURN_TYPE] int   String es1 String es2 [VARIABLES] boolean  String  es1  es2  int  diff  i  lengthToMatch  
[P8_Replace_Mix]^return 0 * 3;^111^^^^^108^121^return 0;^[CLASS] SoundexUtils  [METHOD] differenceEncoded [RETURN_TYPE] int   String es1 String es2 [VARIABLES] boolean  String  es1  es2  int  diff  i  lengthToMatch  
[P1_Replace_Type]^short  lengthToMatch = Math.min ( es1.length (  ) , es2.length (  )  ) ;^113^^^^^108^121^int lengthToMatch = Math.min ( es1.length (  ) , es2.length (  )  ) ;^[CLASS] SoundexUtils  [METHOD] differenceEncoded [RETURN_TYPE] int   String es1 String es2 [VARIABLES] boolean  String  es1  es2  int  diff  i  lengthToMatch  
[P3_Replace_Literal]^int lengthToMatch = Math.min ( es1.length() - 8 , es2.length() - 8  ) ;^113^^^^^108^121^int lengthToMatch = Math.min ( es1.length (  ) , es2.length (  )  ) ;^[CLASS] SoundexUtils  [METHOD] differenceEncoded [RETURN_TYPE] int   String es1 String es2 [VARIABLES] boolean  String  es1  es2  int  diff  i  lengthToMatch  
[P5_Replace_Variable]^int lengthToMatch = Math.min ( es2.length (  ) , es2.length (  )  ) ;^113^^^^^108^121^int lengthToMatch = Math.min ( es1.length (  ) , es2.length (  )  ) ;^[CLASS] SoundexUtils  [METHOD] differenceEncoded [RETURN_TYPE] int   String es1 String es2 [VARIABLES] boolean  String  es1  es2  int  diff  i  lengthToMatch  
[P5_Replace_Variable]^int lengthToMatch = Math.min ( es1.length (  ) , es1.length (  )  ) ;^113^^^^^108^121^int lengthToMatch = Math.min ( es1.length (  ) , es2.length (  )  ) ;^[CLASS] SoundexUtils  [METHOD] differenceEncoded [RETURN_TYPE] int   String es1 String es2 [VARIABLES] boolean  String  es1  es2  int  diff  i  lengthToMatch  
[P5_Replace_Variable]^int lengthToMatch = Math.min ( es1.length (  ) .length (  )  ) ;^113^^^^^108^121^int lengthToMatch = Math.min ( es1.length (  ) , es2.length (  )  ) ;^[CLASS] SoundexUtils  [METHOD] differenceEncoded [RETURN_TYPE] int   String es1 String es2 [VARIABLES] boolean  String  es1  es2  int  diff  i  lengthToMatch  
[P5_Replace_Variable]^int lengthToMatch = Math.min ( es2.length (  ) , es1.length (  )  ) ;^113^^^^^108^121^int lengthToMatch = Math.min ( es1.length (  ) , es2.length (  )  ) ;^[CLASS] SoundexUtils  [METHOD] differenceEncoded [RETURN_TYPE] int   String es1 String es2 [VARIABLES] boolean  String  es1  es2  int  diff  i  lengthToMatch  
[P7_Replace_Invocation]^int lengthToMatch = Math.min ( es1.charAt (  ) , es2.length (  )  ) ;^113^^^^^108^121^int lengthToMatch = Math.min ( es1.length (  ) , es2.length (  )  ) ;^[CLASS] SoundexUtils  [METHOD] differenceEncoded [RETURN_TYPE] int   String es1 String es2 [VARIABLES] boolean  String  es1  es2  int  diff  i  lengthToMatch  
[P3_Replace_Literal]^int lengthToMatch = Math.min ( es1.length() + 3 , es2.length() + 3  ) ;^113^^^^^108^121^int lengthToMatch = Math.min ( es1.length (  ) , es2.length (  )  ) ;^[CLASS] SoundexUtils  [METHOD] differenceEncoded [RETURN_TYPE] int   String es1 String es2 [VARIABLES] boolean  String  es1  es2  int  diff  i  lengthToMatch  
[P14_Delete_Statement]^^113^114^^^^108^121^int lengthToMatch = Math.min ( es1.length (  ) , es2.length (  )  ) ; int diff = 0;^[CLASS] SoundexUtils  [METHOD] differenceEncoded [RETURN_TYPE] int   String es1 String es2 [VARIABLES] boolean  String  es1  es2  int  diff  i  lengthToMatch  
[P3_Replace_Literal]^int lengthToMatch = Math.min ( es1.length() + 2 , es2.length() + 2  ) ;^113^^^^^108^121^int lengthToMatch = Math.min ( es1.length (  ) , es2.length (  )  ) ;^[CLASS] SoundexUtils  [METHOD] differenceEncoded [RETURN_TYPE] int   String es1 String es2 [VARIABLES] boolean  String  es1  es2  int  diff  i  lengthToMatch  
[P14_Delete_Statement]^^113^^^^^108^121^int lengthToMatch = Math.min ( es1.length (  ) , es2.length (  )  ) ;^[CLASS] SoundexUtils  [METHOD] differenceEncoded [RETURN_TYPE] int   String es1 String es2 [VARIABLES] boolean  String  es1  es2  int  diff  i  lengthToMatch  
[P8_Replace_Mix]^int lengthToMatch = Math.min ( es1.charAt (  ) , es1.length (  )  ) ;^113^^^^^108^121^int lengthToMatch = Math.min ( es1.length (  ) , es2.length (  )  ) ;^[CLASS] SoundexUtils  [METHOD] differenceEncoded [RETURN_TYPE] int   String es1 String es2 [VARIABLES] boolean  String  es1  es2  int  diff  i  lengthToMatch  
[P1_Replace_Type]^long  diff = 0;^114^^^^^108^121^int diff = 0;^[CLASS] SoundexUtils  [METHOD] differenceEncoded [RETURN_TYPE] int   String es1 String es2 [VARIABLES] boolean  String  es1  es2  int  diff  i  lengthToMatch  
[P3_Replace_Literal]^int diff = lengthToMatch;^114^^^^^108^121^int diff = 0;^[CLASS] SoundexUtils  [METHOD] differenceEncoded [RETURN_TYPE] int   String es1 String es2 [VARIABLES] boolean  String  es1  es2  int  diff  i  lengthToMatch  
[P11_Insert_Donor_Statement]^int count = 0;int diff = 0;^114^^^^^108^121^int diff = 0;^[CLASS] SoundexUtils  [METHOD] differenceEncoded [RETURN_TYPE] int   String es1 String es2 [VARIABLES] boolean  String  es1  es2  int  diff  i  lengthToMatch  
[P2_Replace_Operator]^if  ( es1.charAt ( i )  > es2.charAt ( i )  )  {^116^^^^^108^121^if  ( es1.charAt ( i )  == es2.charAt ( i )  )  {^[CLASS] SoundexUtils  [METHOD] differenceEncoded [RETURN_TYPE] int   String es1 String es2 [VARIABLES] boolean  String  es1  es2  int  diff  i  lengthToMatch  
[P5_Replace_Variable]^if  ( es1.charAt ( lengthToMatch )  == es2.charAt ( i )  )  {^116^^^^^108^121^if  ( es1.charAt ( i )  == es2.charAt ( i )  )  {^[CLASS] SoundexUtils  [METHOD] differenceEncoded [RETURN_TYPE] int   String es1 String es2 [VARIABLES] boolean  String  es1  es2  int  diff  i  lengthToMatch  
[P5_Replace_Variable]^if  ( i.charAt ( es1 )  == es2.charAt ( i )  )  {^116^^^^^108^121^if  ( es1.charAt ( i )  == es2.charAt ( i )  )  {^[CLASS] SoundexUtils  [METHOD] differenceEncoded [RETURN_TYPE] int   String es1 String es2 [VARIABLES] boolean  String  es1  es2  int  diff  i  lengthToMatch  
[P5_Replace_Variable]^if  ( es2.charAt ( i )  == es1.charAt ( i )  )  {^116^^^^^108^121^if  ( es1.charAt ( i )  == es2.charAt ( i )  )  {^[CLASS] SoundexUtils  [METHOD] differenceEncoded [RETURN_TYPE] int   String es1 String es2 [VARIABLES] boolean  String  es1  es2  int  diff  i  lengthToMatch  
[P15_Unwrap_Block]^diff++;^116^117^118^^^108^121^if  ( es1.charAt ( i )  == es2.charAt ( i )  )  { diff++; }^[CLASS] SoundexUtils  [METHOD] differenceEncoded [RETURN_TYPE] int   String es1 String es2 [VARIABLES] boolean  String  es1  es2  int  diff  i  lengthToMatch  
[P16_Remove_Block]^^116^117^118^^^108^121^if  ( es1.charAt ( i )  == es2.charAt ( i )  )  { diff++; }^[CLASS] SoundexUtils  [METHOD] differenceEncoded [RETURN_TYPE] int   String es1 String es2 [VARIABLES] boolean  String  es1  es2  int  diff  i  lengthToMatch  
[P1_Replace_Type]^for  (  short  i = 0; i < lengthToMatch; i++ )  {^115^^^^^108^121^for  ( int i = 0; i < lengthToMatch; i++ )  {^[CLASS] SoundexUtils  [METHOD] differenceEncoded [RETURN_TYPE] int   String es1 String es2 [VARIABLES] boolean  String  es1  es2  int  diff  i  lengthToMatch  
[P2_Replace_Operator]^for  ( int i = 0; i <= lengthToMatch; i++ )  {^115^^^^^108^121^for  ( int i = 0; i < lengthToMatch; i++ )  {^[CLASS] SoundexUtils  [METHOD] differenceEncoded [RETURN_TYPE] int   String es1 String es2 [VARIABLES] boolean  String  es1  es2  int  diff  i  lengthToMatch  
[P3_Replace_Literal]^for  ( int i = ; i < lengthToMatch; i++ )  {^115^^^^^108^121^for  ( int i = 0; i < lengthToMatch; i++ )  {^[CLASS] SoundexUtils  [METHOD] differenceEncoded [RETURN_TYPE] int   String es1 String es2 [VARIABLES] boolean  String  es1  es2  int  diff  i  lengthToMatch  
[P5_Replace_Variable]^for  ( int i = 0; i < diff; i++ )  {^115^^^^^108^121^for  ( int i = 0; i < lengthToMatch; i++ )  {^[CLASS] SoundexUtils  [METHOD] differenceEncoded [RETURN_TYPE] int   String es1 String es2 [VARIABLES] boolean  String  es1  es2  int  diff  i  lengthToMatch  
[P5_Replace_Variable]^for  ( lengthToMatchnt i = 0; i < i; i++ )  {^115^^^^^108^121^for  ( int i = 0; i < lengthToMatch; i++ )  {^[CLASS] SoundexUtils  [METHOD] differenceEncoded [RETURN_TYPE] int   String es1 String es2 [VARIABLES] boolean  String  es1  es2  int  diff  i  lengthToMatch  
[P2_Replace_Operator]^if  ( es1.charAt ( i )  != es2.charAt ( i )  )  {^116^^^^^108^121^if  ( es1.charAt ( i )  == es2.charAt ( i )  )  {^[CLASS] SoundexUtils  [METHOD] differenceEncoded [RETURN_TYPE] int   String es1 String es2 [VARIABLES] boolean  String  es1  es2  int  diff  i  lengthToMatch  
[P5_Replace_Variable]^if  ( es1.charAt ( es2 )  == i.charAt ( i )  )  {^116^^^^^108^121^if  ( es1.charAt ( i )  == es2.charAt ( i )  )  {^[CLASS] SoundexUtils  [METHOD] differenceEncoded [RETURN_TYPE] int   String es1 String es2 [VARIABLES] boolean  String  es1  es2  int  diff  i  lengthToMatch  
[P8_Replace_Mix]^if  ( es1.charAt ( i )  == es1.charAt ( i )  )  {^116^^^^^108^121^if  ( es1.charAt ( i )  == es2.charAt ( i )  )  {^[CLASS] SoundexUtils  [METHOD] differenceEncoded [RETURN_TYPE] int   String es1 String es2 [VARIABLES] boolean  String  es1  es2  int  diff  i  lengthToMatch  
[P5_Replace_Variable]^if  ( es2.charAt ( i )  == es2.charAt ( i )  )  {^116^^^^^108^121^if  ( es1.charAt ( i )  == es2.charAt ( i )  )  {^[CLASS] SoundexUtils  [METHOD] differenceEncoded [RETURN_TYPE] int   String es1 String es2 [VARIABLES] boolean  String  es1  es2  int  diff  i  lengthToMatch  
[P3_Replace_Literal]^for  ( int i = diff; i < lengthToMatch; i++ )  {^115^^^^^108^121^for  ( int i = 0; i < lengthToMatch; i++ )  {^[CLASS] SoundexUtils  [METHOD] differenceEncoded [RETURN_TYPE] int   String es1 String es2 [VARIABLES] boolean  String  es1  es2  int  diff  i  lengthToMatch  
[P5_Replace_Variable]^return lengthToMatch;^120^^^^^108^121^return diff;^[CLASS] SoundexUtils  [METHOD] differenceEncoded [RETURN_TYPE] int   String es1 String es2 [VARIABLES] boolean  String  es1  es2  int  diff  i  lengthToMatch  
