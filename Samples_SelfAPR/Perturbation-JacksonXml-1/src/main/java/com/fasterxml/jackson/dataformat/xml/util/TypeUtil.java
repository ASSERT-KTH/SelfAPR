[P6_Replace_Expression]^if  ( cls == byte[].class )  {^16^^^^^14^30^if  ( type.isContainerType (  )  )  {^[CLASS] TypeUtil  [METHOD] isIndexedType [RETURN_TYPE] boolean   JavaType type [VARIABLES] JavaType  type  boolean  Class  cls  
[P6_Replace_Expression]^if  ( cls == char[].class )  {^16^^^^^14^30^if  ( type.isContainerType (  )  )  {^[CLASS] TypeUtil  [METHOD] isIndexedType [RETURN_TYPE] boolean   JavaType type [VARIABLES] JavaType  type  boolean  Class  cls  
[P7_Replace_Invocation]^if  ( type .getRawClass (  )   )  {^16^^^^^14^30^if  ( type.isContainerType (  )  )  {^[CLASS] TypeUtil  [METHOD] isIndexedType [RETURN_TYPE] boolean   JavaType type [VARIABLES] JavaType  type  boolean  Class  cls  
[P2_Replace_Operator]^if  ( cls == byte[].class && cls == char[].class )  {^20^^^^^14^30^if  ( cls == byte[].class || cls == char[].class )  {^[CLASS] TypeUtil  [METHOD] isIndexedType [RETURN_TYPE] boolean   JavaType type [VARIABLES] JavaType  type  boolean  Class  cls  
[P2_Replace_Operator]^if  ( cls != byte[].class || cls == char[].class )  {^20^^^^^14^30^if  ( cls == byte[].class || cls == char[].class )  {^[CLASS] TypeUtil  [METHOD] isIndexedType [RETURN_TYPE] boolean   JavaType type [VARIABLES] JavaType  type  boolean  Class  cls  
[P2_Replace_Operator]^if  ( cls == byte[].class || cls <= char[].class )  {^20^^^^^14^30^if  ( cls == byte[].class || cls == char[].class )  {^[CLASS] TypeUtil  [METHOD] isIndexedType [RETURN_TYPE] boolean   JavaType type [VARIABLES] JavaType  type  boolean  Class  cls  
[P3_Replace_Literal]^return true;^21^^^^^14^30^return false;^[CLASS] TypeUtil  [METHOD] isIndexedType [RETURN_TYPE] boolean   JavaType type [VARIABLES] JavaType  type  boolean  Class  cls  
[P15_Unwrap_Block]^return false;^24^25^26^^^14^30^if  ( Map.class.isAssignableFrom ( cls )  )  { return false; }^[CLASS] TypeUtil  [METHOD] isIndexedType [RETURN_TYPE] boolean   JavaType type [VARIABLES] JavaType  type  boolean  Class  cls  
[P16_Remove_Block]^^24^25^26^^^14^30^if  ( Map.class.isAssignableFrom ( cls )  )  { return false; }^[CLASS] TypeUtil  [METHOD] isIndexedType [RETURN_TYPE] boolean   JavaType type [VARIABLES] JavaType  type  boolean  Class  cls  
[P13_Insert_Block]^if  (  ( cls ==  ( byte[].class )  )  ||  ( cls ==  ( char[].class )  )  )  {     return false; }^24^^^^^14^30^[Delete]^[CLASS] TypeUtil  [METHOD] isIndexedType [RETURN_TYPE] boolean   JavaType type [VARIABLES] JavaType  type  boolean  Class  cls  
[P3_Replace_Literal]^return true;^25^^^^^14^30^return false;^[CLASS] TypeUtil  [METHOD] isIndexedType [RETURN_TYPE] boolean   JavaType type [VARIABLES] JavaType  type  boolean  Class  cls  
[P3_Replace_Literal]^return false;^27^^^^^14^30^return true;^[CLASS] TypeUtil  [METHOD] isIndexedType [RETURN_TYPE] boolean   JavaType type [VARIABLES] JavaType  type  boolean  Class  cls  
[P14_Delete_Statement]^^17^^^^^14^30^Class<?> cls = type.getRawClass (  ) ;^[CLASS] TypeUtil  [METHOD] isIndexedType [RETURN_TYPE] boolean   JavaType type [VARIABLES] JavaType  type  boolean  Class  cls  
[P13_Insert_Block]^if  ( isAssignableFrom ( cls )  )  {     return false; }^24^^^^^14^30^[Delete]^[CLASS] TypeUtil  [METHOD] isIndexedType [RETURN_TYPE] boolean   JavaType type [VARIABLES] JavaType  type  boolean  Class  cls  
[P2_Replace_Operator]^if  ( cls >= byte[].class || cls == char[].class )  {^20^^^^^14^30^if  ( cls == byte[].class || cls == char[].class )  {^[CLASS] TypeUtil  [METHOD] isIndexedType [RETURN_TYPE] boolean   JavaType type [VARIABLES] JavaType  type  boolean  Class  cls  
[P2_Replace_Operator]^if  ( cls == byte[].class || cls < char[].class )  {^20^^^^^14^30^if  ( cls == byte[].class || cls == char[].class )  {^[CLASS] TypeUtil  [METHOD] isIndexedType [RETURN_TYPE] boolean   JavaType type [VARIABLES] JavaType  type  boolean  Class  cls  
[P8_Replace_Mix]^if  ( Map.class .isArray (  )   )  {^24^^^^^14^30^if  ( Map.class.isAssignableFrom ( cls )  )  {^[CLASS] TypeUtil  [METHOD] isIndexedType [RETURN_TYPE] boolean   JavaType type [VARIABLES] JavaType  type  boolean  Class  cls  
[P7_Replace_Invocation]^Class<?> cls = type .isContainerType (  )  ;^17^^^^^14^30^Class<?> cls = type.getRawClass (  ) ;^[CLASS] TypeUtil  [METHOD] isIndexedType [RETURN_TYPE] boolean   JavaType type [VARIABLES] JavaType  type  boolean  Class  cls  
[P3_Replace_Literal]^return true;^29^^^^^14^30^return false;^[CLASS] TypeUtil  [METHOD] isIndexedType [RETURN_TYPE] boolean   JavaType type [VARIABLES] JavaType  type  boolean  Class  cls  
[P2_Replace_Operator]^return  ( cls.isArray (  )  && cls != byte[].class && cls != char[].class ) && Collection.class.isAssignableFrom ( cls ) ;^34^35^^^^32^36^return  ( cls.isArray (  )  && cls != byte[].class && cls != char[].class ) || Collection.class.isAssignableFrom ( cls ) ;^[CLASS] TypeUtil  [METHOD] isIndexedType [RETURN_TYPE] boolean   Class<?> cls [VARIABLES] boolean  Class  cls  
[P2_Replace_Operator]^return  ( cls.isArray (  )  || cls != byte[].class && cls != char[].class ) || Collection.class.isAssignableFrom ( cls ) ;^34^35^^^^32^36^return  ( cls.isArray (  )  && cls != byte[].class && cls != char[].class ) || Collection.class.isAssignableFrom ( cls ) ;^[CLASS] TypeUtil  [METHOD] isIndexedType [RETURN_TYPE] boolean   Class<?> cls [VARIABLES] boolean  Class  cls  
[P2_Replace_Operator]^return  ( cls.isArray (  )  && cls < byte[].class && cls != char[].class ) || Collection.class.isAssignableFrom ( cls ) ;^34^35^^^^32^36^return  ( cls.isArray (  )  && cls != byte[].class && cls != char[].class ) || Collection.class.isAssignableFrom ( cls ) ;^[CLASS] TypeUtil  [METHOD] isIndexedType [RETURN_TYPE] boolean   Class<?> cls [VARIABLES] boolean  Class  cls  
[P2_Replace_Operator]^return  ( cls.isArray (  )  && cls != byte[].class && cls == char[].class ) || Collection.class.isAssignableFrom ( cls ) ;^34^35^^^^32^36^return  ( cls.isArray (  )  && cls != byte[].class && cls != char[].class ) || Collection.class.isAssignableFrom ( cls ) ;^[CLASS] TypeUtil  [METHOD] isIndexedType [RETURN_TYPE] boolean   Class<?> cls [VARIABLES] boolean  Class  cls  
[P7_Replace_Invocation]^return  ( cls.isAssignableFrom (  )  && cls != byte[].class && cls != char[].class ) || Collection.class.isAssignableFrom ( cls ) ;^34^35^^^^32^36^return  ( cls.isArray (  )  && cls != byte[].class && cls != char[].class ) || Collection.class.isAssignableFrom ( cls ) ;^[CLASS] TypeUtil  [METHOD] isIndexedType [RETURN_TYPE] boolean   Class<?> cls [VARIABLES] boolean  Class  cls  
[P8_Replace_Mix]^return  ( 1.isArray (  )  && cls != byte[].class && cls != char[].class ) || Collection.class.isAssignableFrom ( cls ) ;^34^35^^^^32^36^return  ( cls.isArray (  )  && cls != byte[].class && cls != char[].class ) || Collection.class.isAssignableFrom ( cls ) ;^[CLASS] TypeUtil  [METHOD] isIndexedType [RETURN_TYPE] boolean   Class<?> cls [VARIABLES] boolean  Class  cls  
[P14_Delete_Statement]^^34^35^^^^32^36^return  ( cls.isArray (  )  && cls != byte[].class && cls != char[].class ) || Collection.class.isAssignableFrom ( cls ) ;^[CLASS] TypeUtil  [METHOD] isIndexedType [RETURN_TYPE] boolean   Class<?> cls [VARIABLES] boolean  Class  cls  
[P7_Replace_Invocation]^|| Collection.class .isArray (  )  ;^35^^^^^32^36^|| Collection.class.isAssignableFrom ( cls ) ;^[CLASS] TypeUtil  [METHOD] isIndexedType [RETURN_TYPE] boolean   Class<?> cls [VARIABLES] boolean  Class  cls  
[P14_Delete_Statement]^^35^^^^^32^36^|| Collection.class.isAssignableFrom ( cls ) ;^[CLASS] TypeUtil  [METHOD] isIndexedType [RETURN_TYPE] boolean   Class<?> cls [VARIABLES] boolean  Class  cls  
[P12_Insert_Condition]^if  ( Map.class.isAssignableFrom ( cls )  )  { || Collection.class.isAssignableFrom ( cls ) ; }^35^^^^^32^36^|| Collection.class.isAssignableFrom ( cls ) ;^[CLASS] TypeUtil  [METHOD] isIndexedType [RETURN_TYPE] boolean   Class<?> cls [VARIABLES] boolean  Class  cls  
