[P1_Replace_Type]^private static final  short  serialVersionUID = 1L;^56^^^^^51^61^private static final long serialVersionUID = 1L;^[CLASS] JSTypeExpression   [VARIABLES] 
[P8_Replace_Mix]^private static final long serialVersionUID = 1;^56^^^^^51^61^private static final long serialVersionUID = 1L;^[CLASS] JSTypeExpression   [VARIABLES] 
[P1_Replace_Type]^private final char sourceName;^62^^^^^57^67^private final String sourceName;^[CLASS] JSTypeExpression   [VARIABLES] 
[P8_Replace_Mix]^this.root =  null;^69^^^^^67^72^this.root = root;^[CLASS] JSTypeExpression  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   Node root String sourceName JSTypeRegistry registry [VARIABLES] JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[P11_Insert_Donor_Statement]^this.registry = registry;this.root = root;^69^^^^^67^72^this.root = root;^[CLASS] JSTypeExpression  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   Node root String sourceName JSTypeRegistry registry [VARIABLES] JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[P8_Replace_Mix]^this.sourceName =  null;^70^^^^^67^72^this.sourceName = sourceName;^[CLASS] JSTypeExpression  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   Node root String sourceName JSTypeRegistry registry [VARIABLES] JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[P8_Replace_Mix]^this.registry =  null;^71^^^^^67^72^this.registry = registry;^[CLASS] JSTypeExpression  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   Node root String sourceName JSTypeRegistry registry [VARIABLES] JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[P11_Insert_Donor_Statement]^this.root = root;this.registry = registry;^71^^^^^67^72^this.registry = registry;^[CLASS] JSTypeExpression  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   Node root String sourceName JSTypeRegistry registry [VARIABLES] JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[P2_Replace_Operator]^if  ( expr.isOptionalArg (  )  && expr.isVarArgs (  )  )  {^79^^^^^78^85^if  ( expr.isOptionalArg (  )  || expr.isVarArgs (  )  )  {^[CLASS] JSTypeExpression  [METHOD] makeOptionalArg [RETURN_TYPE] JSTypeExpression   JSTypeExpression expr [VARIABLES] JSTypeExpression  expr  JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[P6_Replace_Expression]^if  ( expr.isOptionalArg (  )  ) {^79^^^^^78^85^if  ( expr.isOptionalArg (  )  || expr.isVarArgs (  )  )  {^[CLASS] JSTypeExpression  [METHOD] makeOptionalArg [RETURN_TYPE] JSTypeExpression   JSTypeExpression expr [VARIABLES] JSTypeExpression  expr  JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[P6_Replace_Expression]^if  (  expr.isVarArgs (  )  )  {^79^^^^^78^85^if  ( expr.isOptionalArg (  )  || expr.isVarArgs (  )  )  {^[CLASS] JSTypeExpression  [METHOD] makeOptionalArg [RETURN_TYPE] JSTypeExpression   JSTypeExpression expr [VARIABLES] JSTypeExpression  expr  JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[P7_Replace_Invocation]^if  ( expr.equals (  )  || expr.isVarArgs (  )  )  {^79^^^^^78^85^if  ( expr.isOptionalArg (  )  || expr.isVarArgs (  )  )  {^[CLASS] JSTypeExpression  [METHOD] makeOptionalArg [RETURN_TYPE] JSTypeExpression   JSTypeExpression expr [VARIABLES] JSTypeExpression  expr  JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[P7_Replace_Invocation]^if  ( expr .makeOptionalArg ( expr )   || expr.isVarArgs (  )  )  {^79^^^^^78^85^if  ( expr.isOptionalArg (  )  || expr.isVarArgs (  )  )  {^[CLASS] JSTypeExpression  [METHOD] makeOptionalArg [RETURN_TYPE] JSTypeExpression   JSTypeExpression expr [VARIABLES] JSTypeExpression  expr  JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[P7_Replace_Invocation]^if  ( expr.isOptionalArg (  )  || expr.equals (  )  )  {^79^^^^^78^85^if  ( expr.isOptionalArg (  )  || expr.isVarArgs (  )  )  {^[CLASS] JSTypeExpression  [METHOD] makeOptionalArg [RETURN_TYPE] JSTypeExpression   JSTypeExpression expr [VARIABLES] JSTypeExpression  expr  JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[P7_Replace_Invocation]^if  ( expr.isOptionalArg (  )  || expr .isOptionalArg (  )   )  {^79^^^^^78^85^if  ( expr.isOptionalArg (  )  || expr.isVarArgs (  )  )  {^[CLASS] JSTypeExpression  [METHOD] makeOptionalArg [RETURN_TYPE] JSTypeExpression   JSTypeExpression expr [VARIABLES] JSTypeExpression  expr  JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[P15_Unwrap_Block]^return expr;^79^80^81^82^83^78^85^if  ( expr.isOptionalArg (  )  || expr.isVarArgs (  )  )  { return expr; } else { return new JSTypeExpression ( new Node ( Token.EQUALS, expr.root ) , expr.sourceName, expr.registry ) ; }^[CLASS] JSTypeExpression  [METHOD] makeOptionalArg [RETURN_TYPE] JSTypeExpression   JSTypeExpression expr [VARIABLES] JSTypeExpression  expr  JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[P16_Remove_Block]^^79^80^81^82^83^78^85^if  ( expr.isOptionalArg (  )  || expr.isVarArgs (  )  )  { return expr; } else { return new JSTypeExpression ( new Node ( Token.EQUALS, expr.root ) , expr.sourceName, expr.registry ) ; }^[CLASS] JSTypeExpression  [METHOD] makeOptionalArg [RETURN_TYPE] JSTypeExpression   JSTypeExpression expr [VARIABLES] JSTypeExpression  expr  JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[P5_Replace_Variable]^return new JSTypeExpression ( new Node ( Token.EQUALS, root ) , expr.sourceName, expr.registry ) ;^82^83^^^^78^85^return new JSTypeExpression ( new Node ( Token.EQUALS, expr.root ) , expr.sourceName, expr.registry ) ;^[CLASS] JSTypeExpression  [METHOD] makeOptionalArg [RETURN_TYPE] JSTypeExpression   JSTypeExpression expr [VARIABLES] JSTypeExpression  expr  JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[P5_Replace_Variable]^return new JSTypeExpression ( new Node ( Token.EQUALS, expr.root ) , sourceName, expr.registry ) ;^82^83^^^^78^85^return new JSTypeExpression ( new Node ( Token.EQUALS, expr.root ) , expr.sourceName, expr.registry ) ;^[CLASS] JSTypeExpression  [METHOD] makeOptionalArg [RETURN_TYPE] JSTypeExpression   JSTypeExpression expr [VARIABLES] JSTypeExpression  expr  JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[P5_Replace_Variable]^return new JSTypeExpression ( new Node ( Token.EQUALS, expr.root ) , expr.sourceName, registry ) ;^82^83^^^^78^85^return new JSTypeExpression ( new Node ( Token.EQUALS, expr.root ) , expr.sourceName, expr.registry ) ;^[CLASS] JSTypeExpression  [METHOD] makeOptionalArg [RETURN_TYPE] JSTypeExpression   JSTypeExpression expr [VARIABLES] JSTypeExpression  expr  JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[P5_Replace_Variable]^return new JSTypeExpression ( new Node ( Token.EQUALS.root ) , expr.sourceName, expr.registry ) ;^82^83^^^^78^85^return new JSTypeExpression ( new Node ( Token.EQUALS, expr.root ) , expr.sourceName, expr.registry ) ;^[CLASS] JSTypeExpression  [METHOD] makeOptionalArg [RETURN_TYPE] JSTypeExpression   JSTypeExpression expr [VARIABLES] JSTypeExpression  expr  JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[P5_Replace_Variable]^return new JSTypeExpression ( new Node (  expr.root ) , expr.sourceName, expr.registry ) ;^82^83^^^^78^85^return new JSTypeExpression ( new Node ( Token.EQUALS, expr.root ) , expr.sourceName, expr.registry ) ;^[CLASS] JSTypeExpression  [METHOD] makeOptionalArg [RETURN_TYPE] JSTypeExpression   JSTypeExpression expr [VARIABLES] JSTypeExpression  expr  JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[P5_Replace_Variable]^return new JSTypeExpression ( new Node ( Token.EQUALS ) , expr.sourceName, expr.registry ) ;^82^83^^^^78^85^return new JSTypeExpression ( new Node ( Token.EQUALS, expr.root ) , expr.sourceName, expr.registry ) ;^[CLASS] JSTypeExpression  [METHOD] makeOptionalArg [RETURN_TYPE] JSTypeExpression   JSTypeExpression expr [VARIABLES] JSTypeExpression  expr  JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[P5_Replace_Variable]^return new JSTypeExpression ( new Node ( Token.EQUALS, expr.root ) ,  expr.registry ) ;^82^83^^^^78^85^return new JSTypeExpression ( new Node ( Token.EQUALS, expr.root ) , expr.sourceName, expr.registry ) ;^[CLASS] JSTypeExpression  [METHOD] makeOptionalArg [RETURN_TYPE] JSTypeExpression   JSTypeExpression expr [VARIABLES] JSTypeExpression  expr  JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[P5_Replace_Variable]^return new JSTypeExpression ( new Node ( Token.EQUALS, expr.root ) , expr.sourceName ) ;^82^83^^^^78^85^return new JSTypeExpression ( new Node ( Token.EQUALS, expr.root ) , expr.sourceName, expr.registry ) ;^[CLASS] JSTypeExpression  [METHOD] makeOptionalArg [RETURN_TYPE] JSTypeExpression   JSTypeExpression expr [VARIABLES] JSTypeExpression  expr  JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[P5_Replace_Variable]^return new JSTypeExpression ( new Node ( Token.EQUALS, expr.registry.root ) , expr.sourceName, expr ) ;^82^83^^^^78^85^return new JSTypeExpression ( new Node ( Token.EQUALS, expr.root ) , expr.sourceName, expr.registry ) ;^[CLASS] JSTypeExpression  [METHOD] makeOptionalArg [RETURN_TYPE] JSTypeExpression   JSTypeExpression expr [VARIABLES] JSTypeExpression  expr  JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[P5_Replace_Variable]^return new JSTypeExpression ( new Node ( expr, Token.EQUALS.root ) , expr.sourceName, expr.registry ) ;^82^83^^^^78^85^return new JSTypeExpression ( new Node ( Token.EQUALS, expr.root ) , expr.sourceName, expr.registry ) ;^[CLASS] JSTypeExpression  [METHOD] makeOptionalArg [RETURN_TYPE] JSTypeExpression   JSTypeExpression expr [VARIABLES] JSTypeExpression  expr  JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[P5_Replace_Variable]^return new JSTypeExpression ( new Node ( Token.EQUALS, expr ) , expr.root.sourceName, expr.registry ) ;^82^83^^^^78^85^return new JSTypeExpression ( new Node ( Token.EQUALS, expr.root ) , expr.sourceName, expr.registry ) ;^[CLASS] JSTypeExpression  [METHOD] makeOptionalArg [RETURN_TYPE] JSTypeExpression   JSTypeExpression expr [VARIABLES] JSTypeExpression  expr  JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[P5_Replace_Variable]^return new JSTypeExpression ( new Node ( Token.EQUALS, expr.root ) , expr.registry, expr.sourceName ) ;^82^83^^^^78^85^return new JSTypeExpression ( new Node ( Token.EQUALS, expr.root ) , expr.sourceName, expr.registry ) ;^[CLASS] JSTypeExpression  [METHOD] makeOptionalArg [RETURN_TYPE] JSTypeExpression   JSTypeExpression expr [VARIABLES] JSTypeExpression  expr  JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[P5_Replace_Variable]^return new JSTypeExpression ( new Node ( expr, expr.root ) , expr.sourceName, expr.registry ) ;^82^83^^^^78^85^return new JSTypeExpression ( new Node ( Token.EQUALS, expr.root ) , expr.sourceName, expr.registry ) ;^[CLASS] JSTypeExpression  [METHOD] makeOptionalArg [RETURN_TYPE] JSTypeExpression   JSTypeExpression expr [VARIABLES] JSTypeExpression  expr  JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[P5_Replace_Variable]^return new JSTypeExpression ( new Node ( Token.EQUALS, expr.root.root ) , expr.sourceName, expr.registry ) ;^82^83^^^^78^85^return new JSTypeExpression ( new Node ( Token.EQUALS, expr.root ) , expr.sourceName, expr.registry ) ;^[CLASS] JSTypeExpression  [METHOD] makeOptionalArg [RETURN_TYPE] JSTypeExpression   JSTypeExpression expr [VARIABLES] JSTypeExpression  expr  JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[P5_Replace_Variable]^return new JSTypeExpression ( new Node ( expr.sourceName, expr.root ) , Token.EQUALS, expr.registry ) ;^82^83^^^^78^85^return new JSTypeExpression ( new Node ( Token.EQUALS, expr.root ) , expr.sourceName, expr.registry ) ;^[CLASS] JSTypeExpression  [METHOD] makeOptionalArg [RETURN_TYPE] JSTypeExpression   JSTypeExpression expr [VARIABLES] JSTypeExpression  expr  JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[P5_Replace_Variable]^return new JSTypeExpression ( new Node ( expr.root, Token.EQUALS ) , expr.sourceName, expr.registry ) ;^82^83^^^^78^85^return new JSTypeExpression ( new Node ( Token.EQUALS, expr.root ) , expr.sourceName, expr.registry ) ;^[CLASS] JSTypeExpression  [METHOD] makeOptionalArg [RETURN_TYPE] JSTypeExpression   JSTypeExpression expr [VARIABLES] JSTypeExpression  expr  JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[P5_Replace_Variable]^return new JSTypeExpression ( new Node ( Token.EQUALS, expr.registry ) , expr.sourceName, expr.root ) ;^82^83^^^^78^85^return new JSTypeExpression ( new Node ( Token.EQUALS, expr.root ) , expr.sourceName, expr.registry ) ;^[CLASS] JSTypeExpression  [METHOD] makeOptionalArg [RETURN_TYPE] JSTypeExpression   JSTypeExpression expr [VARIABLES] JSTypeExpression  expr  JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[P5_Replace_Variable]^new Node ( expr, expr.root ) , expr.sourceName, expr.registry ) ;^83^^^^^78^85^new Node ( Token.EQUALS, expr.root ) , expr.sourceName, expr.registry ) ;^[CLASS] JSTypeExpression  [METHOD] makeOptionalArg [RETURN_TYPE] JSTypeExpression   JSTypeExpression expr [VARIABLES] JSTypeExpression  expr  JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[P5_Replace_Variable]^new Node ( Token.EQUALS, root ) , expr.sourceName, expr.registry ) ;^83^^^^^78^85^new Node ( Token.EQUALS, expr.root ) , expr.sourceName, expr.registry ) ;^[CLASS] JSTypeExpression  [METHOD] makeOptionalArg [RETURN_TYPE] JSTypeExpression   JSTypeExpression expr [VARIABLES] JSTypeExpression  expr  JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[P5_Replace_Variable]^new Node ( Token.EQUALS.root ) , expr.sourceName, expr.registry ) ;^83^^^^^78^85^new Node ( Token.EQUALS, expr.root ) , expr.sourceName, expr.registry ) ;^[CLASS] JSTypeExpression  [METHOD] makeOptionalArg [RETURN_TYPE] JSTypeExpression   JSTypeExpression expr [VARIABLES] JSTypeExpression  expr  JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[P5_Replace_Variable]^new Node (  expr.root ) , expr.sourceName, expr.registry ) ;^83^^^^^78^85^new Node ( Token.EQUALS, expr.root ) , expr.sourceName, expr.registry ) ;^[CLASS] JSTypeExpression  [METHOD] makeOptionalArg [RETURN_TYPE] JSTypeExpression   JSTypeExpression expr [VARIABLES] JSTypeExpression  expr  JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[P5_Replace_Variable]^new Node ( Token.EQUALS ) , expr.sourceName, expr.registry ) ;^83^^^^^78^85^new Node ( Token.EQUALS, expr.root ) , expr.sourceName, expr.registry ) ;^[CLASS] JSTypeExpression  [METHOD] makeOptionalArg [RETURN_TYPE] JSTypeExpression   JSTypeExpression expr [VARIABLES] JSTypeExpression  expr  JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[P5_Replace_Variable]^new Node ( expr, Token.EQUALS.root ) , expr.sourceName, expr.registry ) ;^83^^^^^78^85^new Node ( Token.EQUALS, expr.root ) , expr.sourceName, expr.registry ) ;^[CLASS] JSTypeExpression  [METHOD] makeOptionalArg [RETURN_TYPE] JSTypeExpression   JSTypeExpression expr [VARIABLES] JSTypeExpression  expr  JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[P5_Replace_Variable]^new Node ( expr.root, Token.EQUALS ) , expr.sourceName, expr.registry ) ;^83^^^^^78^85^new Node ( Token.EQUALS, expr.root ) , expr.sourceName, expr.registry ) ;^[CLASS] JSTypeExpression  [METHOD] makeOptionalArg [RETURN_TYPE] JSTypeExpression   JSTypeExpression expr [VARIABLES] JSTypeExpression  expr  JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[P5_Replace_Variable]^return new JSTypeExpression ( new Node ( Token.EQUALS, expr.sourceName.root ) , expr, expr.registry ) ;^82^83^^^^78^85^return new JSTypeExpression ( new Node ( Token.EQUALS, expr.root ) , expr.sourceName, expr.registry ) ;^[CLASS] JSTypeExpression  [METHOD] makeOptionalArg [RETURN_TYPE] JSTypeExpression   JSTypeExpression expr [VARIABLES] JSTypeExpression  expr  JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[P5_Replace_Variable]^return new JSTypeExpression ( new Node ( Token.EQUALS, expr.sourceName ) , expr.root, expr.registry ) ;^82^83^^^^78^85^return new JSTypeExpression ( new Node ( Token.EQUALS, expr.root ) , expr.sourceName, expr.registry ) ;^[CLASS] JSTypeExpression  [METHOD] makeOptionalArg [RETURN_TYPE] JSTypeExpression   JSTypeExpression expr [VARIABLES] JSTypeExpression  expr  JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[P2_Replace_Operator]^return root.getType (  )  <= Token.EQUALS;^91^^^^^90^92^return root.getType (  )  == Token.EQUALS;^[CLASS] JSTypeExpression  [METHOD] isOptionalArg [RETURN_TYPE] boolean   [VARIABLES] JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[P5_Replace_Variable]^return root.getType (  )  == this;^91^^^^^90^92^return root.getType (  )  == Token.EQUALS;^[CLASS] JSTypeExpression  [METHOD] isOptionalArg [RETURN_TYPE] boolean   [VARIABLES] JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[P5_Replace_Variable]^return Token.EQUALS.getType (  )  == root;^91^^^^^90^92^return root.getType (  )  == Token.EQUALS;^[CLASS] JSTypeExpression  [METHOD] isOptionalArg [RETURN_TYPE] boolean   [VARIABLES] JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[P7_Replace_Invocation]^return root.toStringTree (  )  == Token.EQUALS;^91^^^^^90^92^return root.getType (  )  == Token.EQUALS;^[CLASS] JSTypeExpression  [METHOD] isOptionalArg [RETURN_TYPE] boolean   [VARIABLES] JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[P8_Replace_Mix]^return root.toStringTree (  )   ||  Token.EQUALS;^91^^^^^90^92^return root.getType (  )  == Token.EQUALS;^[CLASS] JSTypeExpression  [METHOD] isOptionalArg [RETURN_TYPE] boolean   [VARIABLES] JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[P7_Replace_Invocation]^return root .getBooleanProp (  )   == Token.EQUALS;^91^^^^^90^92^return root.getType (  )  == Token.EQUALS;^[CLASS] JSTypeExpression  [METHOD] isOptionalArg [RETURN_TYPE] boolean   [VARIABLES] JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[P14_Delete_Statement]^^91^^^^^90^92^return root.getType (  )  == Token.EQUALS;^[CLASS] JSTypeExpression  [METHOD] isOptionalArg [RETURN_TYPE] boolean   [VARIABLES] JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[P2_Replace_Operator]^return root.getType (  )  != Token.ELLIPSIS;^98^^^^^97^99^return root.getType (  )  == Token.ELLIPSIS;^[CLASS] JSTypeExpression  [METHOD] isVarArgs [RETURN_TYPE] boolean   [VARIABLES] JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[P5_Replace_Variable]^return Token.ELLIPSIS.getType (  )  == root;^98^^^^^97^99^return root.getType (  )  == Token.ELLIPSIS;^[CLASS] JSTypeExpression  [METHOD] isVarArgs [RETURN_TYPE] boolean   [VARIABLES] JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[P7_Replace_Invocation]^return root.toStringTree (  )  == Token.ELLIPSIS;^98^^^^^97^99^return root.getType (  )  == Token.ELLIPSIS;^[CLASS] JSTypeExpression  [METHOD] isVarArgs [RETURN_TYPE] boolean   [VARIABLES] JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[P8_Replace_Mix]^return root .getBooleanProp (  )   == Token.ELLIPSIS;^98^^^^^97^99^return root.getType (  )  == Token.ELLIPSIS;^[CLASS] JSTypeExpression  [METHOD] isVarArgs [RETURN_TYPE] boolean   [VARIABLES] JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[P14_Delete_Statement]^^98^^^^^97^99^return root.getType (  )  == Token.ELLIPSIS;^[CLASS] JSTypeExpression  [METHOD] isVarArgs [RETURN_TYPE] boolean   [VARIABLES] JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[P5_Replace_Variable]^JSType type = registry.createFromTypeNodes ( root, sourceName ) ;^105^^^^^104^110^JSType type = registry.createFromTypeNodes ( root, sourceName, scope ) ;^[CLASS] JSTypeExpression  [METHOD] evaluate [RETURN_TYPE] JSType   JSType> scope [VARIABLES] JSTypeRegistry  registry  JSType  type  boolean  Node  root  StaticScope  scope  String  sourceName  long  serialVersionUID  
[P5_Replace_Variable]^JSType type = registry.createFromTypeNodes (  sourceName, scope ) ;^105^^^^^104^110^JSType type = registry.createFromTypeNodes ( root, sourceName, scope ) ;^[CLASS] JSTypeExpression  [METHOD] evaluate [RETURN_TYPE] JSType   JSType> scope [VARIABLES] JSTypeRegistry  registry  JSType  type  boolean  Node  root  StaticScope  scope  String  sourceName  long  serialVersionUID  
[P5_Replace_Variable]^JSType type = registry.createFromTypeNodes ( root,  scope ) ;^105^^^^^104^110^JSType type = registry.createFromTypeNodes ( root, sourceName, scope ) ;^[CLASS] JSTypeExpression  [METHOD] evaluate [RETURN_TYPE] JSType   JSType> scope [VARIABLES] JSTypeRegistry  registry  JSType  type  boolean  Node  root  StaticScope  scope  String  sourceName  long  serialVersionUID  
[P5_Replace_Variable]^JSType type = registry.createFromTypeNodes ( scope, sourceName, root ) ;^105^^^^^104^110^JSType type = registry.createFromTypeNodes ( root, sourceName, scope ) ;^[CLASS] JSTypeExpression  [METHOD] evaluate [RETURN_TYPE] JSType   JSType> scope [VARIABLES] JSTypeRegistry  registry  JSType  type  boolean  Node  root  StaticScope  scope  String  sourceName  long  serialVersionUID  
[P5_Replace_Variable]^JSType type = root.createFromTypeNodes ( registry, sourceName, scope ) ;^105^^^^^104^110^JSType type = registry.createFromTypeNodes ( root, sourceName, scope ) ;^[CLASS] JSTypeExpression  [METHOD] evaluate [RETURN_TYPE] JSType   JSType> scope [VARIABLES] JSTypeRegistry  registry  JSType  type  boolean  Node  root  StaticScope  scope  String  sourceName  long  serialVersionUID  
[P5_Replace_Variable]^JSType type = registry.createFromTypeNodes ( sourceName, root, scope ) ;^105^^^^^104^110^JSType type = registry.createFromTypeNodes ( root, sourceName, scope ) ;^[CLASS] JSTypeExpression  [METHOD] evaluate [RETURN_TYPE] JSType   JSType> scope [VARIABLES] JSTypeRegistry  registry  JSType  type  boolean  Node  root  StaticScope  scope  String  sourceName  long  serialVersionUID  
[P5_Replace_Variable]^JSType type = scope.createFromTypeNodes ( root, sourceName, registry ) ;^105^^^^^104^110^JSType type = registry.createFromTypeNodes ( root, sourceName, scope ) ;^[CLASS] JSTypeExpression  [METHOD] evaluate [RETURN_TYPE] JSType   JSType> scope [VARIABLES] JSTypeRegistry  registry  JSType  type  boolean  Node  root  StaticScope  scope  String  sourceName  long  serialVersionUID  
[P5_Replace_Variable]^JSType type = sourceName.createFromTypeNodes ( root, registry, scope ) ;^105^^^^^104^110^JSType type = registry.createFromTypeNodes ( root, sourceName, scope ) ;^[CLASS] JSTypeExpression  [METHOD] evaluate [RETURN_TYPE] JSType   JSType> scope [VARIABLES] JSTypeRegistry  registry  JSType  type  boolean  Node  root  StaticScope  scope  String  sourceName  long  serialVersionUID  
[P14_Delete_Statement]^^105^^^^^104^110^JSType type = registry.createFromTypeNodes ( root, sourceName, scope ) ;^[CLASS] JSTypeExpression  [METHOD] evaluate [RETURN_TYPE] JSType   JSType> scope [VARIABLES] JSTypeRegistry  registry  JSType  type  boolean  Node  root  StaticScope  scope  String  sourceName  long  serialVersionUID  
[P7_Replace_Invocation]^if  ( root.getType ( Node.BRACELESS_TYPE )  )  {^106^^^^^104^110^if  ( root.getBooleanProp ( Node.BRACELESS_TYPE )  )  {^[CLASS] JSTypeExpression  [METHOD] evaluate [RETURN_TYPE] JSType   JSType> scope [VARIABLES] JSTypeRegistry  registry  JSType  type  boolean  Node  root  StaticScope  scope  String  sourceName  long  serialVersionUID  
[P15_Unwrap_Block]^type.forgiveUnknownNames();^106^107^108^^^104^110^if  ( root.getBooleanProp ( Node.BRACELESS_TYPE )  )  { type.forgiveUnknownNames (  ) ; }^[CLASS] JSTypeExpression  [METHOD] evaluate [RETURN_TYPE] JSType   JSType> scope [VARIABLES] JSTypeRegistry  registry  JSType  type  boolean  Node  root  StaticScope  scope  String  sourceName  long  serialVersionUID  
[P16_Remove_Block]^^106^107^108^^^104^110^if  ( root.getBooleanProp ( Node.BRACELESS_TYPE )  )  { type.forgiveUnknownNames (  ) ; }^[CLASS] JSTypeExpression  [METHOD] evaluate [RETURN_TYPE] JSType   JSType> scope [VARIABLES] JSTypeRegistry  registry  JSType  type  boolean  Node  root  StaticScope  scope  String  sourceName  long  serialVersionUID  
[P14_Delete_Statement]^^107^108^^^^104^110^type.forgiveUnknownNames (  ) ; }^[CLASS] JSTypeExpression  [METHOD] evaluate [RETURN_TYPE] JSType   JSType> scope [VARIABLES] JSTypeRegistry  registry  JSType  type  boolean  Node  root  StaticScope  scope  String  sourceName  long  serialVersionUID  
[P7_Replace_Invocation]^if  ( root .getType (  )   )  {^106^^^^^104^110^if  ( root.getBooleanProp ( Node.BRACELESS_TYPE )  )  {^[CLASS] JSTypeExpression  [METHOD] evaluate [RETURN_TYPE] JSType   JSType> scope [VARIABLES] JSTypeRegistry  registry  JSType  type  boolean  Node  root  StaticScope  scope  String  sourceName  long  serialVersionUID  
[P2_Replace_Operator]^return other instanceof JSTypeExpression || (  ( JSTypeExpression )  other ) .root.checkTreeEqualsSilent ( root ) ;^114^115^^^^113^116^return other instanceof JSTypeExpression && (  ( JSTypeExpression )  other ) .root.checkTreeEqualsSilent ( root ) ;^[CLASS] JSTypeExpression  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] JSTypeRegistry  registry  Object  other  String  sourceName  boolean  long  serialVersionUID  Node  root  
[P2_Replace_Operator]^return other  |  JSTypeExpression && (  ( JSTypeExpression )  other ) .root.checkTreeEqualsSilent ( root ) ;^114^115^^^^113^116^return other instanceof JSTypeExpression && (  ( JSTypeExpression )  other ) .root.checkTreeEqualsSilent ( root ) ;^[CLASS] JSTypeExpression  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] JSTypeRegistry  registry  Object  other  String  sourceName  boolean  long  serialVersionUID  Node  root  
[P7_Replace_Invocation]^return other instanceof JSTypeExpression && (  ( JSTypeExpression )  other ) .root .getType (  )  ;^114^115^^^^113^116^return other instanceof JSTypeExpression && (  ( JSTypeExpression )  other ) .root.checkTreeEqualsSilent ( root ) ;^[CLASS] JSTypeExpression  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] JSTypeRegistry  registry  Object  other  String  sourceName  boolean  long  serialVersionUID  Node  root  
[P8_Replace_Mix]^return other instanceof JSTypeExpression ;^114^115^^^^113^116^return other instanceof JSTypeExpression && (  ( JSTypeExpression )  other ) .root.checkTreeEqualsSilent ( root ) ;^[CLASS] JSTypeExpression  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] JSTypeRegistry  registry  Object  other  String  sourceName  boolean  long  serialVersionUID  Node  root  
[P14_Delete_Statement]^^115^^^^^113^116^(  ( JSTypeExpression )  other ) .root.checkTreeEqualsSilent ( root ) ;^[CLASS] JSTypeExpression  [METHOD] equals [RETURN_TYPE] boolean   Object other [VARIABLES] JSTypeRegistry  registry  Object  other  String  sourceName  boolean  long  serialVersionUID  Node  root  
[P7_Replace_Invocation]^return root.toStringTree (  )  .hashCode (  )  ;^120^^^^^119^121^return root.toStringTree (  ) .hashCode (  ) ;^[CLASS] JSTypeExpression  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[P7_Replace_Invocation]^return root.getType (  ) .hashCode (  ) ;^120^^^^^119^121^return root.toStringTree (  ) .hashCode (  ) ;^[CLASS] JSTypeExpression  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
[P14_Delete_Statement]^^120^^^^^119^121^return root.toStringTree (  ) .hashCode (  ) ;^[CLASS] JSTypeExpression  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] JSTypeRegistry  registry  String  sourceName  boolean  long  serialVersionUID  Node  root  
