[P1_Replace_Type]^private static final  short  serialVersionUID = 1L;^51^^^^^46^56^private static final long serialVersionUID = 1L;^[CLASS] BooleanType   [VARIABLES] 
[P8_Replace_Mix]^private static final long serialVersionUID ;^51^^^^^46^56^private static final long serialVersionUID = 1L;^[CLASS] BooleanType   [VARIABLES] 
[P14_Delete_Statement]^^54^^^^^53^55^super ( registry ) ;^[CLASS] BooleanType  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   JSTypeRegistry registry [VARIABLES] long  serialVersionUID  JSTypeRegistry  registry  boolean  
[P3_Replace_Literal]^return true;^59^^^^^58^60^return false;^[CLASS] BooleanType  [METHOD] isNullable [RETURN_TYPE] boolean   [VARIABLES] long  serialVersionUID  boolean  
[P7_Replace_Invocation]^if  ( UNKNOWN.equals ( super .testForEquality ( that )   )  )  {^64^^^^^63^73^if  ( UNKNOWN.equals ( super.testForEquality ( that )  )  )  {^[CLASS] BooleanType  [METHOD] testForEquality [RETURN_TYPE] TernaryValue   JSType that [VARIABLES] long  serialVersionUID  JSType  that  boolean  
[P15_Unwrap_Block]^return com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;^64^65^66^^^63^73^if  ( UNKNOWN.equals ( super.testForEquality ( that )  )  )  { return UNKNOWN; }^[CLASS] BooleanType  [METHOD] testForEquality [RETURN_TYPE] TernaryValue   JSType that [VARIABLES] long  serialVersionUID  JSType  that  boolean  
[P16_Remove_Block]^^64^65^66^^^63^73^if  ( UNKNOWN.equals ( super.testForEquality ( that )  )  )  { return UNKNOWN; }^[CLASS] BooleanType  [METHOD] testForEquality [RETURN_TYPE] TernaryValue   JSType that [VARIABLES] long  serialVersionUID  JSType  that  boolean  
[P13_Insert_Block]^if  (  (  ( that.isUnknownType (  )  )  ||  ( that.isSubtype ( getNativeType ( JSTypeNative.NUMBER_STRING_BOOLEAN )  )  )  )  ||  ( that.isObject (  )  )  )  {     return UNKNOWN; }^64^^^^^63^73^[Delete]^[CLASS] BooleanType  [METHOD] testForEquality [RETURN_TYPE] TernaryValue   JSType that [VARIABLES] long  serialVersionUID  JSType  that  boolean  
[P13_Insert_Block]^if  ( equals ( super.testForEquality ( that )  )  )  {     return UNKNOWN; }^64^^^^^63^73^[Delete]^[CLASS] BooleanType  [METHOD] testForEquality [RETURN_TYPE] TernaryValue   JSType that [VARIABLES] long  serialVersionUID  JSType  that  boolean  
[P2_Replace_Operator]^if  ( that.isUnknownType (  )  && that.isSubtype ( getNativeType ( JSTypeNative.NUMBER_STRING_BOOLEAN )  )  || that.isObject (  )  )  {^67^68^69^^^63^73^if  ( that.isUnknownType (  )  || that.isSubtype ( getNativeType ( JSTypeNative.NUMBER_STRING_BOOLEAN )  )  || that.isObject (  )  )  {^[CLASS] BooleanType  [METHOD] testForEquality [RETURN_TYPE] TernaryValue   JSType that [VARIABLES] long  serialVersionUID  JSType  that  boolean  
[P6_Replace_Expression]^if  ( that.isUnknownType (  )  ) {^67^68^69^^^63^73^if  ( that.isUnknownType (  )  || that.isSubtype ( getNativeType ( JSTypeNative.NUMBER_STRING_BOOLEAN )  )  || that.isObject (  )  )  {^[CLASS] BooleanType  [METHOD] testForEquality [RETURN_TYPE] TernaryValue   JSType that [VARIABLES] long  serialVersionUID  JSType  that  boolean  
[P6_Replace_Expression]^if  (  that.isSubtype ( getNativeType ( JSTypeNative.NUMBER_STRING_BOOLEAN )  )  || that.isObject (  )  )  {^67^68^69^^^63^73^if  ( that.isUnknownType (  )  || that.isSubtype ( getNativeType ( JSTypeNative.NUMBER_STRING_BOOLEAN )  )  || that.isObject (  )  )  {^[CLASS] BooleanType  [METHOD] testForEquality [RETURN_TYPE] TernaryValue   JSType that [VARIABLES] long  serialVersionUID  JSType  that  boolean  
[P6_Replace_Expression]^if  ( that.isUnknownType( || NUMBER_STRING_BOOLEAN))) )  {^67^68^69^^^63^73^if  ( that.isUnknownType (  )  || that.isSubtype ( getNativeType ( JSTypeNative.NUMBER_STRING_BOOLEAN )  )  || that.isObject (  )  )  {^[CLASS] BooleanType  [METHOD] testForEquality [RETURN_TYPE] TernaryValue   JSType that [VARIABLES] long  serialVersionUID  JSType  that  boolean  
[P15_Unwrap_Block]^return com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;^67^68^69^70^71^63^73^if  ( that.isUnknownType (  )  || that.isSubtype ( getNativeType ( JSTypeNative.NUMBER_STRING_BOOLEAN )  )  || that.isObject (  )  )  { return UNKNOWN; }^[CLASS] BooleanType  [METHOD] testForEquality [RETURN_TYPE] TernaryValue   JSType that [VARIABLES] long  serialVersionUID  JSType  that  boolean  
[P16_Remove_Block]^^67^68^69^70^71^63^73^if  ( that.isUnknownType (  )  || that.isSubtype ( getNativeType ( JSTypeNative.NUMBER_STRING_BOOLEAN )  )  || that.isObject (  )  )  { return UNKNOWN; }^[CLASS] BooleanType  [METHOD] testForEquality [RETURN_TYPE] TernaryValue   JSType that [VARIABLES] long  serialVersionUID  JSType  that  boolean  
[P13_Insert_Block]^if  ( equals ( super.testForEquality ( that )  )  )  {     return UNKNOWN; }^67^^^^^63^73^[Delete]^[CLASS] BooleanType  [METHOD] testForEquality [RETURN_TYPE] TernaryValue   JSType that [VARIABLES] long  serialVersionUID  JSType  that  boolean  
[P7_Replace_Invocation]^if  ( that .isSubtype (  )   || that.isSubtype ( getNativeType ( JSTypeNative.NUMBER_STRING_BOOLEAN )  )  || that.isObject (  )  )  {^67^68^69^^^63^73^if  ( that.isUnknownType (  )  || that.isSubtype ( getNativeType ( JSTypeNative.NUMBER_STRING_BOOLEAN )  )  || that.isObject (  )  )  {^[CLASS] BooleanType  [METHOD] testForEquality [RETURN_TYPE] TernaryValue   JSType that [VARIABLES] long  serialVersionUID  JSType  that  boolean  
[P8_Replace_Mix]^if  ( that.isUnknownType (  )  || that .isUnknownType (  )   || that.isObject (  )  )  {^67^68^69^^^63^73^if  ( that.isUnknownType (  )  || that.isSubtype ( getNativeType ( JSTypeNative.NUMBER_STRING_BOOLEAN )  )  || that.isObject (  )  )  {^[CLASS] BooleanType  [METHOD] testForEquality [RETURN_TYPE] TernaryValue   JSType that [VARIABLES] long  serialVersionUID  JSType  that  boolean  
[P14_Delete_Statement]^^68^69^70^^^63^73^getNativeType ( JSTypeNative.NUMBER_STRING_BOOLEAN )  )  || that.isObject (  )  )  { return UNKNOWN;^[CLASS] BooleanType  [METHOD] testForEquality [RETURN_TYPE] TernaryValue   JSType that [VARIABLES] long  serialVersionUID  JSType  that  boolean  
[P8_Replace_Mix]^that .isSubtype (  )   )  {^69^^^^^63^73^that.isObject (  )  )  {^[CLASS] BooleanType  [METHOD] testForEquality [RETURN_TYPE] TernaryValue   JSType that [VARIABLES] long  serialVersionUID  JSType  that  boolean  
[P14_Delete_Statement]^^69^70^^^^63^73^that.isObject (  )  )  { return UNKNOWN;^[CLASS] BooleanType  [METHOD] testForEquality [RETURN_TYPE] TernaryValue   JSType that [VARIABLES] long  serialVersionUID  JSType  that  boolean  
[P3_Replace_Literal]^return false;^77^^^^^76^78^return true;^[CLASS] BooleanType  [METHOD] isBooleanValueType [RETURN_TYPE] boolean   [VARIABLES] long  serialVersionUID  boolean  
[P3_Replace_Literal]^return false;^82^^^^^81^83^return true;^[CLASS] BooleanType  [METHOD] matchesNumberContext [RETURN_TYPE] boolean   [VARIABLES] long  serialVersionUID  boolean  
[P3_Replace_Literal]^return false;^87^^^^^86^88^return true;^[CLASS] BooleanType  [METHOD] matchesStringContext [RETURN_TYPE] boolean   [VARIABLES] long  serialVersionUID  boolean  
[P3_Replace_Literal]^return false;^93^^^^^91^94^return true;^[CLASS] BooleanType  [METHOD] matchesObjectContext [RETURN_TYPE] boolean   [VARIABLES] long  serialVersionUID  boolean  
[P14_Delete_Statement]^^98^^^^^97^99^return getNativeType ( JSTypeNative.BOOLEAN_OBJECT_TYPE ) ;^[CLASS] BooleanType  [METHOD] autoboxesTo [RETURN_TYPE] JSType   [VARIABLES] long  serialVersionUID  boolean  
[P3_Replace_Literal]^return "oolean";^103^^^^^102^104^return "boolean";^[CLASS] BooleanType  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] long  serialVersionUID  boolean  
[P8_Replace_Mix]^return 0.caseBooleanType (  ) ;^113^^^^^112^114^return visitor.caseBooleanType (  ) ;^[CLASS] BooleanType  [METHOD] visit [RETURN_TYPE] <T>   Visitor<T> visitor [VARIABLES] Visitor  visitor  long  serialVersionUID  boolean  
[P14_Delete_Statement]^^113^^^^^112^114^return visitor.caseBooleanType (  ) ;^[CLASS] BooleanType  [METHOD] visit [RETURN_TYPE] <T>   Visitor<T> visitor [VARIABLES] Visitor  visitor  long  serialVersionUID  boolean  
