[P1_Replace_Type]^private static final  int  serialVersionUID = 1L;^51^^^^^46^56^private static final long serialVersionUID = 1L;^[CLASS] NumberType   [VARIABLES] 
[P8_Replace_Mix]^private static final long serialVersionUID = 1;^51^^^^^46^56^private static final long serialVersionUID = 1L;^[CLASS] NumberType   [VARIABLES] 
[P14_Delete_Statement]^^54^^^^^53^55^super ( registry ) ;^[CLASS] NumberType  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   JSTypeRegistry registry [VARIABLES] long  serialVersionUID  JSTypeRegistry  registry  boolean  
[P3_Replace_Literal]^return true;^59^^^^^58^60^return false;^[CLASS] NumberType  [METHOD] isNullable [RETURN_TYPE] boolean   [VARIABLES] long  serialVersionUID  boolean  
[P8_Replace_Mix]^if  ( UNKNOWN.equals ( super .testForEquality ( that )   )  )  {^64^^^^^63^72^if  ( UNKNOWN.equals ( super.testForEquality ( that )  )  )  {^[CLASS] NumberType  [METHOD] testForEquality [RETURN_TYPE] TernaryValue   JSType that [VARIABLES] long  serialVersionUID  JSType  that  boolean  
[P15_Unwrap_Block]^return com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;^64^65^66^^^63^72^if  ( UNKNOWN.equals ( super.testForEquality ( that )  )  )  { return UNKNOWN; }^[CLASS] NumberType  [METHOD] testForEquality [RETURN_TYPE] TernaryValue   JSType that [VARIABLES] long  serialVersionUID  JSType  that  boolean  
[P16_Remove_Block]^^64^65^66^^^63^72^if  ( UNKNOWN.equals ( super.testForEquality ( that )  )  )  { return UNKNOWN; }^[CLASS] NumberType  [METHOD] testForEquality [RETURN_TYPE] TernaryValue   JSType that [VARIABLES] long  serialVersionUID  JSType  that  boolean  
[P13_Insert_Block]^if  (  ( that.isUnknownType (  )  )  ||  ( that.isSubtype ( getNativeType ( JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN )  )  )  )  {     return UNKNOWN; }^64^^^^^63^72^[Delete]^[CLASS] NumberType  [METHOD] testForEquality [RETURN_TYPE] TernaryValue   JSType that [VARIABLES] long  serialVersionUID  JSType  that  boolean  
[P5_Replace_Variable]^return 3;^65^^^^^63^72^return UNKNOWN;^[CLASS] NumberType  [METHOD] testForEquality [RETURN_TYPE] TernaryValue   JSType that [VARIABLES] long  serialVersionUID  JSType  that  boolean  
[P5_Replace_Variable]^return null;^65^^^^^63^72^return UNKNOWN;^[CLASS] NumberType  [METHOD] testForEquality [RETURN_TYPE] TernaryValue   JSType that [VARIABLES] long  serialVersionUID  JSType  that  boolean  
[P8_Replace_Mix]^return 0;^65^^^^^63^72^return UNKNOWN;^[CLASS] NumberType  [METHOD] testForEquality [RETURN_TYPE] TernaryValue   JSType that [VARIABLES] long  serialVersionUID  JSType  that  boolean  
[P13_Insert_Block]^if  ( equals ( super.testForEquality ( that )  )  )  {     return UNKNOWN; }^64^^^^^63^72^[Delete]^[CLASS] NumberType  [METHOD] testForEquality [RETURN_TYPE] TernaryValue   JSType that [VARIABLES] long  serialVersionUID  JSType  that  boolean  
[P2_Replace_Operator]^if  ( that.isUnknownType (  )  && that.isSubtype ( getNativeType ( JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN )  )  )  {^67^68^^^^63^72^if  ( that.isUnknownType (  )  || that.isSubtype ( getNativeType ( JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN )  )  )  {^[CLASS] NumberType  [METHOD] testForEquality [RETURN_TYPE] TernaryValue   JSType that [VARIABLES] long  serialVersionUID  JSType  that  boolean  
[P6_Replace_Expression]^if  ( that.isUnknownType (  )  ) {^67^68^^^^63^72^if  ( that.isUnknownType (  )  || that.isSubtype ( getNativeType ( JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN )  )  )  {^[CLASS] NumberType  [METHOD] testForEquality [RETURN_TYPE] TernaryValue   JSType that [VARIABLES] long  serialVersionUID  JSType  that  boolean  
[P6_Replace_Expression]^if  (  that.isSubtype ( getNativeType ( JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN )  )  )  {^67^68^^^^63^72^if  ( that.isUnknownType (  )  || that.isSubtype ( getNativeType ( JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN )  )  )  {^[CLASS] NumberType  [METHOD] testForEquality [RETURN_TYPE] TernaryValue   JSType that [VARIABLES] long  serialVersionUID  JSType  that  boolean  
[P7_Replace_Invocation]^if  ( that.isUnknownType (  )  || that .isUnknownType (  )   )  {^67^68^^^^63^72^if  ( that.isUnknownType (  )  || that.isSubtype ( getNativeType ( JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN )  )  )  {^[CLASS] NumberType  [METHOD] testForEquality [RETURN_TYPE] TernaryValue   JSType that [VARIABLES] long  serialVersionUID  JSType  that  boolean  
[P15_Unwrap_Block]^return com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;^67^68^69^70^^63^72^if  ( that.isUnknownType (  )  || that.isSubtype ( getNativeType ( JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN )  )  )  { return UNKNOWN; }^[CLASS] NumberType  [METHOD] testForEquality [RETURN_TYPE] TernaryValue   JSType that [VARIABLES] long  serialVersionUID  JSType  that  boolean  
[P16_Remove_Block]^^67^68^69^70^^63^72^if  ( that.isUnknownType (  )  || that.isSubtype ( getNativeType ( JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN )  )  )  { return UNKNOWN; }^[CLASS] NumberType  [METHOD] testForEquality [RETURN_TYPE] TernaryValue   JSType that [VARIABLES] long  serialVersionUID  JSType  that  boolean  
[P13_Insert_Block]^if  ( equals ( super.testForEquality ( that )  )  )  {     return UNKNOWN; }^67^^^^^63^72^[Delete]^[CLASS] NumberType  [METHOD] testForEquality [RETURN_TYPE] TernaryValue   JSType that [VARIABLES] long  serialVersionUID  JSType  that  boolean  
[P14_Delete_Statement]^^68^69^^^^63^72^getNativeType ( JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN )  )  )  { return UNKNOWN;^[CLASS] NumberType  [METHOD] testForEquality [RETURN_TYPE] TernaryValue   JSType that [VARIABLES] long  serialVersionUID  JSType  that  boolean  
[P3_Replace_Literal]^return false;^76^^^^^75^77^return true;^[CLASS] NumberType  [METHOD] isNumberValueType [RETURN_TYPE] boolean   [VARIABLES] long  serialVersionUID  boolean  
[P3_Replace_Literal]^return false;^81^^^^^80^82^return true;^[CLASS] NumberType  [METHOD] matchesNumberContext [RETURN_TYPE] boolean   [VARIABLES] long  serialVersionUID  boolean  
[P3_Replace_Literal]^return false;^86^^^^^85^87^return true;^[CLASS] NumberType  [METHOD] matchesStringContext [RETURN_TYPE] boolean   [VARIABLES] long  serialVersionUID  boolean  
[P3_Replace_Literal]^return false;^92^^^^^90^93^return true;^[CLASS] NumberType  [METHOD] matchesObjectContext [RETURN_TYPE] boolean   [VARIABLES] long  serialVersionUID  boolean  
[P3_Replace_Literal]^return "mbe";^97^^^^^96^98^return "number";^[CLASS] NumberType  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] long  serialVersionUID  boolean  
[P14_Delete_Statement]^^107^^^^^106^108^return visitor.caseNumberType (  ) ;^[CLASS] NumberType  [METHOD] visit [RETURN_TYPE] <T>   Visitor<T> visitor [VARIABLES] Visitor  visitor  long  serialVersionUID  boolean  
[P14_Delete_Statement]^^112^^^^^111^113^return getNativeType ( JSTypeNative.NUMBER_OBJECT_TYPE ) ;^[CLASS] NumberType  [METHOD] autoboxesTo [RETURN_TYPE] JSType   [VARIABLES] long  serialVersionUID  boolean  
