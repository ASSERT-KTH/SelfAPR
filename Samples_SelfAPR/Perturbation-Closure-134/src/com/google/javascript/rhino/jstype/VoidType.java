[P1_Replace_Type]^private static final  short  serialVersionUID = 1L;^52^^^^^47^57^private static final long serialVersionUID = 1L;^[CLASS] VoidType   [VARIABLES] 
[P8_Replace_Mix]^private static  long serialVersionUID = 1;^52^^^^^47^57^private static final long serialVersionUID = 1L;^[CLASS] VoidType   [VARIABLES] 
[P14_Delete_Statement]^^55^^^^^54^56^super ( registry ) ;^[CLASS] VoidType  [METHOD] <init> [RETURN_TYPE] JSTypeRegistry)   JSTypeRegistry registry [VARIABLES] long  serialVersionUID  JSTypeRegistry  registry  boolean  
[P7_Replace_Invocation]^return registry .getNativeType (  )  ;^60^^^^^59^61^return registry.getNativeType ( JSTypeNative.NO_TYPE ) ;^[CLASS] VoidType  [METHOD] restrictByNotNullOrUndefined [RETURN_TYPE] JSType   [VARIABLES] long  serialVersionUID  boolean  
[P14_Delete_Statement]^^60^^^^^59^61^return registry.getNativeType ( JSTypeNative.NO_TYPE ) ;^[CLASS] VoidType  [METHOD] restrictByNotNullOrUndefined [RETURN_TYPE] JSType   [VARIABLES] long  serialVersionUID  boolean  
[P15_Unwrap_Block]^return com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;^65^66^67^^^64^73^if  ( UNKNOWN.equals ( super.testForEquality ( that )  )  )  { return UNKNOWN; }^[CLASS] VoidType  [METHOD] testForEquality [RETURN_TYPE] TernaryValue   JSType that [VARIABLES] long  serialVersionUID  JSType  that  boolean  
[P16_Remove_Block]^^65^66^67^^^64^73^if  ( UNKNOWN.equals ( super.testForEquality ( that )  )  )  { return UNKNOWN; }^[CLASS] VoidType  [METHOD] testForEquality [RETURN_TYPE] TernaryValue   JSType that [VARIABLES] long  serialVersionUID  JSType  that  boolean  
[P13_Insert_Block]^if  (  ( that.isSubtype ( this )  )  ||  ( that.isSubtype ( getNativeType ( JSTypeNative.NULL_TYPE )  )  )  )  {     return TRUE; }^65^^^^^64^73^[Delete]^[CLASS] VoidType  [METHOD] testForEquality [RETURN_TYPE] TernaryValue   JSType that [VARIABLES] long  serialVersionUID  JSType  that  boolean  
[P13_Insert_Block]^if  ( equals ( super.testForEquality ( that )  )  )  {     return UNKNOWN; }^65^^^^^64^73^[Delete]^[CLASS] VoidType  [METHOD] testForEquality [RETURN_TYPE] TernaryValue   JSType that [VARIABLES] long  serialVersionUID  JSType  that  boolean  
[P7_Replace_Invocation]^if  ( UNKNOWN.equals ( super .testForEquality ( that )   )  )  {^65^^^^^64^73^if  ( UNKNOWN.equals ( super.testForEquality ( that )  )  )  {^[CLASS] VoidType  [METHOD] testForEquality [RETURN_TYPE] TernaryValue   JSType that [VARIABLES] long  serialVersionUID  JSType  that  boolean  
[P2_Replace_Operator]^if  ( that.isSubtype ( this )  && that.isSubtype ( getNativeType ( JSTypeNative.NULL_TYPE )  )  )  {^68^69^^^^64^73^if  ( that.isSubtype ( this )  || that.isSubtype ( getNativeType ( JSTypeNative.NULL_TYPE )  )  )  {^[CLASS] VoidType  [METHOD] testForEquality [RETURN_TYPE] TernaryValue   JSType that [VARIABLES] long  serialVersionUID  JSType  that  boolean  
[P6_Replace_Expression]^if  ( that.isSubtype ( this )  ) {^68^69^^^^64^73^if  ( that.isSubtype ( this )  || that.isSubtype ( getNativeType ( JSTypeNative.NULL_TYPE )  )  )  {^[CLASS] VoidType  [METHOD] testForEquality [RETURN_TYPE] TernaryValue   JSType that [VARIABLES] long  serialVersionUID  JSType  that  boolean  
[P6_Replace_Expression]^if  (  that.isSubtype ( getNativeType ( JSTypeNative.NULL_TYPE )  )  )  {^68^69^^^^64^73^if  ( that.isSubtype ( this )  || that.isSubtype ( getNativeType ( JSTypeNative.NULL_TYPE )  )  )  {^[CLASS] VoidType  [METHOD] testForEquality [RETURN_TYPE] TernaryValue   JSType that [VARIABLES] long  serialVersionUID  JSType  that  boolean  
[P15_Unwrap_Block]^return com.google.javascript.rhino.jstype.TernaryValue.TRUE;^68^69^70^71^^64^73^if  ( that.isSubtype ( this )  || that.isSubtype ( getNativeType ( JSTypeNative.NULL_TYPE )  )  )  { return TRUE; }^[CLASS] VoidType  [METHOD] testForEquality [RETURN_TYPE] TernaryValue   JSType that [VARIABLES] long  serialVersionUID  JSType  that  boolean  
[P16_Remove_Block]^^68^69^70^71^^64^73^if  ( that.isSubtype ( this )  || that.isSubtype ( getNativeType ( JSTypeNative.NULL_TYPE )  )  )  { return TRUE; }^[CLASS] VoidType  [METHOD] testForEquality [RETURN_TYPE] TernaryValue   JSType that [VARIABLES] long  serialVersionUID  JSType  that  boolean  
[P13_Insert_Block]^if  ( equals ( super.testForEquality ( that )  )  )  {     return UNKNOWN; }^68^^^^^64^73^[Delete]^[CLASS] VoidType  [METHOD] testForEquality [RETURN_TYPE] TernaryValue   JSType that [VARIABLES] long  serialVersionUID  JSType  that  boolean  
[P8_Replace_Mix]^return this;^70^^^^^64^73^return TRUE;^[CLASS] VoidType  [METHOD] testForEquality [RETURN_TYPE] TernaryValue   JSType that [VARIABLES] long  serialVersionUID  JSType  that  boolean  
[P14_Delete_Statement]^^69^70^^^^64^73^that.isSubtype ( getNativeType ( JSTypeNative.NULL_TYPE )  )  )  { return TRUE;^[CLASS] VoidType  [METHOD] testForEquality [RETURN_TYPE] TernaryValue   JSType that [VARIABLES] long  serialVersionUID  JSType  that  boolean  
[P8_Replace_Mix]^return 2;^72^^^^^64^73^return FALSE;^[CLASS] VoidType  [METHOD] testForEquality [RETURN_TYPE] TernaryValue   JSType that [VARIABLES] long  serialVersionUID  JSType  that  boolean  
[P3_Replace_Literal]^return true;^77^^^^^76^78^return false;^[CLASS] VoidType  [METHOD] matchesNumberContext [RETURN_TYPE] boolean   [VARIABLES] long  serialVersionUID  boolean  
[P3_Replace_Literal]^return true;^82^^^^^81^83^return false;^[CLASS] VoidType  [METHOD] matchesObjectContext [RETURN_TYPE] boolean   [VARIABLES] long  serialVersionUID  boolean  
[P3_Replace_Literal]^return false;^87^^^^^86^88^return true;^[CLASS] VoidType  [METHOD] matchesStringContext [RETURN_TYPE] boolean   [VARIABLES] long  serialVersionUID  boolean  
[P3_Replace_Literal]^return false;^92^^^^^91^93^return true;^[CLASS] VoidType  [METHOD] isVoidType [RETURN_TYPE] boolean   [VARIABLES] long  serialVersionUID  boolean  
[P3_Replace_Literal]^return "undefineddefine";^97^^^^^96^98^return "undefined";^[CLASS] VoidType  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] long  serialVersionUID  boolean  
[P14_Delete_Statement]^^107^^^^^106^108^return visitor.caseVoidType (  ) ;^[CLASS] VoidType  [METHOD] visit [RETURN_TYPE] <T>   Visitor<T> visitor [VARIABLES] Visitor  visitor  long  serialVersionUID  boolean  
