[P3_Replace_Literal]^static final char[] FIRST_CHAR = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$A".toCharArray (  ) ;^35^36^^^^35^36^static final char[] FIRST_CHAR = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$".toCharArray (  ) ;^[CLASS] NameGenerator   [VARIABLES] 
[P7_Replace_Invocation]^static final char[] FIRST_CHAR = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$".charAt (  ) ;^35^36^^^^35^36^static final char[] FIRST_CHAR = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$".toCharArray (  ) ;^[CLASS] NameGenerator   [VARIABLES] 
[P8_Replace_Mix]^final char[] FIRST_CHAR = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$".toCharArray (  ) ;^35^36^^^^35^36^static final char[] FIRST_CHAR = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$".toCharArray (  ) ;^[CLASS] NameGenerator   [VARIABLES] 
[P3_Replace_Literal]^static final char[] NONFIRST_CHAR = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789$qrstuvwxyzABCDEFGHIJKLMN" .toCharArray (  ) ;^39^40^41^^^39^41^static final char[] NONFIRST_CHAR = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789$" .toCharArray (  ) ;^[CLASS] NameGenerator   [VARIABLES] 
[P7_Replace_Invocation]^static final char[] NONFIRST_CHAR = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789$" .charAt (  ) ;^39^40^41^^^39^41^static final char[] NONFIRST_CHAR = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789$" .toCharArray (  ) ;^[CLASS] NameGenerator   [VARIABLES] 
[P8_Replace_Mix]^static  char[] NONFIRST_CHAR = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789$" .toCharArray (  ) ;^39^40^41^^^39^41^static final char[] NONFIRST_CHAR = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789$" .toCharArray (  ) ;^[CLASS] NameGenerator   [VARIABLES] 
[P8_Replace_Mix]^private  Set<String> reservedNames;^43^^^^^38^48^private final Set<String> reservedNames;^[CLASS] NameGenerator   [VARIABLES] 
[P1_Replace_Type]^private final char prefix;^44^^^^^39^49^private final String prefix;^[CLASS] NameGenerator   [VARIABLES] 
[P1_Replace_Type]^private  short  nameCount;^45^^^^^40^50^private int nameCount;^[CLASS] NameGenerator   [VARIABLES] 
[P8_Replace_Mix]^this.reservedNames =  null;^62^^^^^60^70^this.reservedNames = reservedNames;^[CLASS] NameGenerator  [METHOD] <init> [RETURN_TYPE] String,char[])   String> reservedNames String prefix Nullable
char[] reservedCharacters [VARIABLES] Set  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  firstChars  nonFirstChars  reservedCharacters  
[P8_Replace_Mix]^this.prefix =  null;^63^^^^^60^70^this.prefix = prefix;^[CLASS] NameGenerator  [METHOD] <init> [RETURN_TYPE] String,char[])   String> reservedNames String prefix Nullable
char[] reservedCharacters [VARIABLES] Set  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^this.firstChars = reserveCharacters ( FIRST_CHAR, nonFirstChars ) ;^66^^^^^60^70^this.firstChars = reserveCharacters ( FIRST_CHAR, reservedCharacters ) ;^[CLASS] NameGenerator  [METHOD] <init> [RETURN_TYPE] String,char[])   String> reservedNames String prefix Nullable
char[] reservedCharacters [VARIABLES] Set  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^this.firstChars = reserveCharacters ( nonFirstChars, reservedCharacters ) ;^66^^^^^60^70^this.firstChars = reserveCharacters ( FIRST_CHAR, reservedCharacters ) ;^[CLASS] NameGenerator  [METHOD] <init> [RETURN_TYPE] String,char[])   String> reservedNames String prefix Nullable
char[] reservedCharacters [VARIABLES] Set  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^this.firstChars = reserveCharacters ( FIRST_CHAR ) ;^66^^^^^60^70^this.firstChars = reserveCharacters ( FIRST_CHAR, reservedCharacters ) ;^[CLASS] NameGenerator  [METHOD] <init> [RETURN_TYPE] String,char[])   String> reservedNames String prefix Nullable
char[] reservedCharacters [VARIABLES] Set  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^this.firstChars = reserveCharacters (  reservedCharacters ) ;^66^^^^^60^70^this.firstChars = reserveCharacters ( FIRST_CHAR, reservedCharacters ) ;^[CLASS] NameGenerator  [METHOD] <init> [RETURN_TYPE] String,char[])   String> reservedNames String prefix Nullable
char[] reservedCharacters [VARIABLES] Set  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^this.firstChars = reserveCharacters ( reservedCharacters, FIRST_CHAR ) ;^66^^^^^60^70^this.firstChars = reserveCharacters ( FIRST_CHAR, reservedCharacters ) ;^[CLASS] NameGenerator  [METHOD] <init> [RETURN_TYPE] String,char[])   String> reservedNames String prefix Nullable
char[] reservedCharacters [VARIABLES] Set  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^this.firstChars = reserveCharacters ( reservedCharacters, FIRST_CHAR ) ;^66^^^^^60^70^this.firstChars = reserveCharacters ( FIRST_CHAR, reservedCharacters ) ;^[CLASS] NameGenerator  [METHOD] <init> [RETURN_TYPE] String,char[])   String> reservedNames String prefix Nullable
char[] reservedCharacters [VARIABLES] Set  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  firstChars  nonFirstChars  reservedCharacters  
[P7_Replace_Invocation]^this.firstChars = checkPrefix ( FIRST_CHAR, reservedCharacters ) ;^66^^^^^60^70^this.firstChars = reserveCharacters ( FIRST_CHAR, reservedCharacters ) ;^[CLASS] NameGenerator  [METHOD] <init> [RETURN_TYPE] String,char[])   String> reservedNames String prefix Nullable
char[] reservedCharacters [VARIABLES] Set  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  firstChars  nonFirstChars  reservedCharacters  
[P8_Replace_Mix]^this.firstChars =  reserveCharacters ( FIRST_CHAR, nonFirstChars ) ;^66^^^^^60^70^this.firstChars = reserveCharacters ( FIRST_CHAR, reservedCharacters ) ;^[CLASS] NameGenerator  [METHOD] <init> [RETURN_TYPE] String,char[])   String> reservedNames String prefix Nullable
char[] reservedCharacters [VARIABLES] Set  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  firstChars  nonFirstChars  reservedCharacters  
[P11_Insert_Donor_Statement]^this.nonFirstChars = reserveCharacters ( NONFIRST_CHAR, reservedCharacters ) ;this.firstChars = reserveCharacters ( FIRST_CHAR, reservedCharacters ) ;^66^^^^^60^70^this.firstChars = reserveCharacters ( FIRST_CHAR, reservedCharacters ) ;^[CLASS] NameGenerator  [METHOD] <init> [RETURN_TYPE] String,char[])   String> reservedNames String prefix Nullable
char[] reservedCharacters [VARIABLES] Set  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^this.firstChars = reserveCharacters ( FIRST_CHAR, nonFirstChars ) ;^66^^^^^60^70^this.firstChars = reserveCharacters ( FIRST_CHAR, reservedCharacters ) ;^[CLASS] NameGenerator  [METHOD] <init> [RETURN_TYPE] String,char[])   String> reservedNames String prefix Nullable
char[] reservedCharacters [VARIABLES] Set  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^this.firstChars = reserveCharacters ( nonFirstChars, reservedCharacters ) ;^66^^^^^60^70^this.firstChars = reserveCharacters ( FIRST_CHAR, reservedCharacters ) ;^[CLASS] NameGenerator  [METHOD] <init> [RETURN_TYPE] String,char[])   String> reservedNames String prefix Nullable
char[] reservedCharacters [VARIABLES] Set  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^this.firstChars = reserveCharacters ( FIRST_CHAR ) ;^66^^^^^60^70^this.firstChars = reserveCharacters ( FIRST_CHAR, reservedCharacters ) ;^[CLASS] NameGenerator  [METHOD] <init> [RETURN_TYPE] String,char[])   String> reservedNames String prefix Nullable
char[] reservedCharacters [VARIABLES] Set  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^this.firstChars = reserveCharacters (  reservedCharacters ) ;^66^^^^^60^70^this.firstChars = reserveCharacters ( FIRST_CHAR, reservedCharacters ) ;^[CLASS] NameGenerator  [METHOD] <init> [RETURN_TYPE] String,char[])   String> reservedNames String prefix Nullable
char[] reservedCharacters [VARIABLES] Set  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^this.firstChars = reserveCharacters ( reservedCharacters, FIRST_CHAR ) ;^66^^^^^60^70^this.firstChars = reserveCharacters ( FIRST_CHAR, reservedCharacters ) ;^[CLASS] NameGenerator  [METHOD] <init> [RETURN_TYPE] String,char[])   String> reservedNames String prefix Nullable
char[] reservedCharacters [VARIABLES] Set  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^this.firstChars = reserveCharacters ( reservedCharacters, FIRST_CHAR ) ;^66^^^^^60^70^this.firstChars = reserveCharacters ( FIRST_CHAR, reservedCharacters ) ;^[CLASS] NameGenerator  [METHOD] <init> [RETURN_TYPE] String,char[])   String> reservedNames String prefix Nullable
char[] reservedCharacters [VARIABLES] Set  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  firstChars  nonFirstChars  reservedCharacters  
[P7_Replace_Invocation]^this.firstChars = checkPrefix ( FIRST_CHAR, reservedCharacters ) ;^66^^^^^60^70^this.firstChars = reserveCharacters ( FIRST_CHAR, reservedCharacters ) ;^[CLASS] NameGenerator  [METHOD] <init> [RETURN_TYPE] String,char[])   String> reservedNames String prefix Nullable
char[] reservedCharacters [VARIABLES] Set  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  firstChars  nonFirstChars  reservedCharacters  
[P8_Replace_Mix]^this.firstChars = reserveCharacters ( FIRST_CHAR, nonFirstChars ) ;^66^^^^^60^70^this.firstChars = reserveCharacters ( FIRST_CHAR, reservedCharacters ) ;^[CLASS] NameGenerator  [METHOD] <init> [RETURN_TYPE] String,char[])   String> reservedNames String prefix Nullable
char[] reservedCharacters [VARIABLES] Set  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  firstChars  nonFirstChars  reservedCharacters  
[P14_Delete_Statement]^^66^^^^^60^70^this.firstChars = reserveCharacters ( FIRST_CHAR, reservedCharacters ) ;^[CLASS] NameGenerator  [METHOD] <init> [RETURN_TYPE] String,char[])   String> reservedNames String prefix Nullable
char[] reservedCharacters [VARIABLES] Set  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  firstChars  nonFirstChars  reservedCharacters  
[P11_Insert_Donor_Statement]^this.nonFirstChars = reserveCharacters ( NONFIRST_CHAR, reservedCharacters ) ;this.firstChars = reserveCharacters ( FIRST_CHAR, reservedCharacters ) ;^66^^^^^60^70^this.firstChars = reserveCharacters ( FIRST_CHAR, reservedCharacters ) ;^[CLASS] NameGenerator  [METHOD] <init> [RETURN_TYPE] String,char[])   String> reservedNames String prefix Nullable
char[] reservedCharacters [VARIABLES] Set  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^this.nonFirstChars = reserveCharacters ( NONFIRST_CHAR, nonFirstChars ) ;^67^^^^^60^70^this.nonFirstChars = reserveCharacters ( NONFIRST_CHAR, reservedCharacters ) ;^[CLASS] NameGenerator  [METHOD] <init> [RETURN_TYPE] String,char[])   String> reservedNames String prefix Nullable
char[] reservedCharacters [VARIABLES] Set  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^this.nonFirstChars = reserveCharacters ( nonFirstChars, reservedCharacters ) ;^67^^^^^60^70^this.nonFirstChars = reserveCharacters ( NONFIRST_CHAR, reservedCharacters ) ;^[CLASS] NameGenerator  [METHOD] <init> [RETURN_TYPE] String,char[])   String> reservedNames String prefix Nullable
char[] reservedCharacters [VARIABLES] Set  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^this.nonFirstChars = reserveCharacters ( NONFIRST_CHAR ) ;^67^^^^^60^70^this.nonFirstChars = reserveCharacters ( NONFIRST_CHAR, reservedCharacters ) ;^[CLASS] NameGenerator  [METHOD] <init> [RETURN_TYPE] String,char[])   String> reservedNames String prefix Nullable
char[] reservedCharacters [VARIABLES] Set  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^this.nonFirstChars = reserveCharacters (  reservedCharacters ) ;^67^^^^^60^70^this.nonFirstChars = reserveCharacters ( NONFIRST_CHAR, reservedCharacters ) ;^[CLASS] NameGenerator  [METHOD] <init> [RETURN_TYPE] String,char[])   String> reservedNames String prefix Nullable
char[] reservedCharacters [VARIABLES] Set  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^this.nonFirstChars = reserveCharacters ( reservedCharacters, NONFIRST_CHAR ) ;^67^^^^^60^70^this.nonFirstChars = reserveCharacters ( NONFIRST_CHAR, reservedCharacters ) ;^[CLASS] NameGenerator  [METHOD] <init> [RETURN_TYPE] String,char[])   String> reservedNames String prefix Nullable
char[] reservedCharacters [VARIABLES] Set  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^this.nonFirstChars = reserveCharacters ( reservedCharacters, NONFIRST_CHAR ) ;^67^^^^^60^70^this.nonFirstChars = reserveCharacters ( NONFIRST_CHAR, reservedCharacters ) ;^[CLASS] NameGenerator  [METHOD] <init> [RETURN_TYPE] String,char[])   String> reservedNames String prefix Nullable
char[] reservedCharacters [VARIABLES] Set  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  firstChars  nonFirstChars  reservedCharacters  
[P7_Replace_Invocation]^this.nonFirstChars = checkPrefix ( NONFIRST_CHAR, reservedCharacters ) ;^67^^^^^60^70^this.nonFirstChars = reserveCharacters ( NONFIRST_CHAR, reservedCharacters ) ;^[CLASS] NameGenerator  [METHOD] <init> [RETURN_TYPE] String,char[])   String> reservedNames String prefix Nullable
char[] reservedCharacters [VARIABLES] Set  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  firstChars  nonFirstChars  reservedCharacters  
[P8_Replace_Mix]^this.nonFirstChars =  reserveCharacters ( NONFIRST_CHAR, nonFirstChars ) ;^67^^^^^60^70^this.nonFirstChars = reserveCharacters ( NONFIRST_CHAR, reservedCharacters ) ;^[CLASS] NameGenerator  [METHOD] <init> [RETURN_TYPE] String,char[])   String> reservedNames String prefix Nullable
char[] reservedCharacters [VARIABLES] Set  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  firstChars  nonFirstChars  reservedCharacters  
[P11_Insert_Donor_Statement]^this.firstChars = reserveCharacters ( FIRST_CHAR, reservedCharacters ) ;this.nonFirstChars = reserveCharacters ( NONFIRST_CHAR, reservedCharacters ) ;^67^^^^^60^70^this.nonFirstChars = reserveCharacters ( NONFIRST_CHAR, reservedCharacters ) ;^[CLASS] NameGenerator  [METHOD] <init> [RETURN_TYPE] String,char[])   String> reservedNames String prefix Nullable
char[] reservedCharacters [VARIABLES] Set  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^this.nonFirstChars = reserveCharacters ( NONFIRST_CHAR, nonFirstChars ) ;^67^^^^^60^70^this.nonFirstChars = reserveCharacters ( NONFIRST_CHAR, reservedCharacters ) ;^[CLASS] NameGenerator  [METHOD] <init> [RETURN_TYPE] String,char[])   String> reservedNames String prefix Nullable
char[] reservedCharacters [VARIABLES] Set  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^this.nonFirstChars = reserveCharacters ( nonFirstChars, reservedCharacters ) ;^67^^^^^60^70^this.nonFirstChars = reserveCharacters ( NONFIRST_CHAR, reservedCharacters ) ;^[CLASS] NameGenerator  [METHOD] <init> [RETURN_TYPE] String,char[])   String> reservedNames String prefix Nullable
char[] reservedCharacters [VARIABLES] Set  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^this.nonFirstChars = reserveCharacters ( NONFIRST_CHAR ) ;^67^^^^^60^70^this.nonFirstChars = reserveCharacters ( NONFIRST_CHAR, reservedCharacters ) ;^[CLASS] NameGenerator  [METHOD] <init> [RETURN_TYPE] String,char[])   String> reservedNames String prefix Nullable
char[] reservedCharacters [VARIABLES] Set  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^this.nonFirstChars = reserveCharacters (  reservedCharacters ) ;^67^^^^^60^70^this.nonFirstChars = reserveCharacters ( NONFIRST_CHAR, reservedCharacters ) ;^[CLASS] NameGenerator  [METHOD] <init> [RETURN_TYPE] String,char[])   String> reservedNames String prefix Nullable
char[] reservedCharacters [VARIABLES] Set  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^this.nonFirstChars = reserveCharacters ( reservedCharacters, NONFIRST_CHAR ) ;^67^^^^^60^70^this.nonFirstChars = reserveCharacters ( NONFIRST_CHAR, reservedCharacters ) ;^[CLASS] NameGenerator  [METHOD] <init> [RETURN_TYPE] String,char[])   String> reservedNames String prefix Nullable
char[] reservedCharacters [VARIABLES] Set  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^this.nonFirstChars = reserveCharacters ( reservedCharacters, NONFIRST_CHAR ) ;^67^^^^^60^70^this.nonFirstChars = reserveCharacters ( NONFIRST_CHAR, reservedCharacters ) ;^[CLASS] NameGenerator  [METHOD] <init> [RETURN_TYPE] String,char[])   String> reservedNames String prefix Nullable
char[] reservedCharacters [VARIABLES] Set  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  firstChars  nonFirstChars  reservedCharacters  
[P7_Replace_Invocation]^this.nonFirstChars = checkPrefix ( NONFIRST_CHAR, reservedCharacters ) ;^67^^^^^60^70^this.nonFirstChars = reserveCharacters ( NONFIRST_CHAR, reservedCharacters ) ;^[CLASS] NameGenerator  [METHOD] <init> [RETURN_TYPE] String,char[])   String> reservedNames String prefix Nullable
char[] reservedCharacters [VARIABLES] Set  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  firstChars  nonFirstChars  reservedCharacters  
[P8_Replace_Mix]^this.nonFirstChars = checkPrefix ( NONFIRST_CHAR, nonFirstChars ) ;^67^^^^^60^70^this.nonFirstChars = reserveCharacters ( NONFIRST_CHAR, reservedCharacters ) ;^[CLASS] NameGenerator  [METHOD] <init> [RETURN_TYPE] String,char[])   String> reservedNames String prefix Nullable
char[] reservedCharacters [VARIABLES] Set  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  firstChars  nonFirstChars  reservedCharacters  
[P14_Delete_Statement]^^67^^^^^60^70^this.nonFirstChars = reserveCharacters ( NONFIRST_CHAR, reservedCharacters ) ;^[CLASS] NameGenerator  [METHOD] <init> [RETURN_TYPE] String,char[])   String> reservedNames String prefix Nullable
char[] reservedCharacters [VARIABLES] Set  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  firstChars  nonFirstChars  reservedCharacters  
[P11_Insert_Donor_Statement]^this.firstChars = reserveCharacters ( FIRST_CHAR, reservedCharacters ) ;this.nonFirstChars = reserveCharacters ( NONFIRST_CHAR, reservedCharacters ) ;^67^^^^^60^70^this.nonFirstChars = reserveCharacters ( NONFIRST_CHAR, reservedCharacters ) ;^[CLASS] NameGenerator  [METHOD] <init> [RETURN_TYPE] String,char[])   String> reservedNames String prefix Nullable
char[] reservedCharacters [VARIABLES] Set  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  firstChars  nonFirstChars  reservedCharacters  
[P14_Delete_Statement]^^69^^^^^60^70^checkPrefix ( prefix ) ;^[CLASS] NameGenerator  [METHOD] <init> [RETURN_TYPE] String,char[])   String> reservedNames String prefix Nullable
char[] reservedCharacters [VARIABLES] Set  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  firstChars  nonFirstChars  reservedCharacters  
[P2_Replace_Operator]^if  ( reservedCharacters == null && reservedCharacters.length == 0 )  {^80^^^^^79^88^if  ( reservedCharacters == null || reservedCharacters.length == 0 )  {^[CLASS] NameGenerator  [METHOD] reserveCharacters [RETURN_TYPE] char[]   char[] chars char[] reservedCharacters [VARIABLES] char  reservedCharacter  Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P2_Replace_Operator]^if  ( reservedCharacters != null || reservedCharacters.length == 0 )  {^80^^^^^79^88^if  ( reservedCharacters == null || reservedCharacters.length == 0 )  {^[CLASS] NameGenerator  [METHOD] reserveCharacters [RETURN_TYPE] char[]   char[] chars char[] reservedCharacters [VARIABLES] char  reservedCharacter  Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P2_Replace_Operator]^if  ( reservedCharacters == null || reservedCharacters.length != 0 )  {^80^^^^^79^88^if  ( reservedCharacters == null || reservedCharacters.length == 0 )  {^[CLASS] NameGenerator  [METHOD] reserveCharacters [RETURN_TYPE] char[]   char[] chars char[] reservedCharacters [VARIABLES] char  reservedCharacter  Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P3_Replace_Literal]^if  ( reservedCharacters == null || reservedCharacters.length == 6 )  {^80^^^^^79^88^if  ( reservedCharacters == null || reservedCharacters.length == 0 )  {^[CLASS] NameGenerator  [METHOD] reserveCharacters [RETURN_TYPE] char[]   char[] chars char[] reservedCharacters [VARIABLES] char  reservedCharacter  Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^if  ( nonFirstChars == null || reservedCharacters.length == 0 )  {^80^^^^^79^88^if  ( reservedCharacters == null || reservedCharacters.length == 0 )  {^[CLASS] NameGenerator  [METHOD] reserveCharacters [RETURN_TYPE] char[]   char[] chars char[] reservedCharacters [VARIABLES] char  reservedCharacter  Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^if  ( reservedCharacters == null || nameCount == 0 )  {^80^^^^^79^88^if  ( reservedCharacters == null || reservedCharacters.length == 0 )  {^[CLASS] NameGenerator  [METHOD] reserveCharacters [RETURN_TYPE] char[]   char[] chars char[] reservedCharacters [VARIABLES] char  reservedCharacter  Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^if  ( reservedCharacters.length == null || reservedCharacters == 0 )  {^80^^^^^79^88^if  ( reservedCharacters == null || reservedCharacters.length == 0 )  {^[CLASS] NameGenerator  [METHOD] reserveCharacters [RETURN_TYPE] char[]   char[] chars char[] reservedCharacters [VARIABLES] char  reservedCharacter  Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P6_Replace_Expression]^if  ( reservedCharacters == null ) {^80^^^^^79^88^if  ( reservedCharacters == null || reservedCharacters.length == 0 )  {^[CLASS] NameGenerator  [METHOD] reserveCharacters [RETURN_TYPE] char[]   char[] chars char[] reservedCharacters [VARIABLES] char  reservedCharacter  Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P6_Replace_Expression]^if  (  reservedCharacters.length == 0 )  {^80^^^^^79^88^if  ( reservedCharacters == null || reservedCharacters.length == 0 )  {^[CLASS] NameGenerator  [METHOD] reserveCharacters [RETURN_TYPE] char[]   char[] chars char[] reservedCharacters [VARIABLES] char  reservedCharacter  Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P8_Replace_Mix]^if  ( reservedCharacters == this || reservedCharacters.length == 0 )  {^80^^^^^79^88^if  ( reservedCharacters == null || reservedCharacters.length == 0 )  {^[CLASS] NameGenerator  [METHOD] reserveCharacters [RETURN_TYPE] char[]   char[] chars char[] reservedCharacters [VARIABLES] char  reservedCharacter  Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P15_Unwrap_Block]^return chars;^80^81^82^^^79^88^if  ( reservedCharacters == null || reservedCharacters.length == 0 )  { return chars; }^[CLASS] NameGenerator  [METHOD] reserveCharacters [RETURN_TYPE] char[]   char[] chars char[] reservedCharacters [VARIABLES] char  reservedCharacter  Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P16_Remove_Block]^^80^81^82^^^79^88^if  ( reservedCharacters == null || reservedCharacters.length == 0 )  { return chars; }^[CLASS] NameGenerator  [METHOD] reserveCharacters [RETURN_TYPE] char[]   char[] chars char[] reservedCharacters [VARIABLES] char  reservedCharacter  Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^return reservedCharacters;^81^^^^^79^88^return chars;^[CLASS] NameGenerator  [METHOD] reserveCharacters [RETURN_TYPE] char[]   char[] chars char[] reservedCharacters [VARIABLES] char  reservedCharacter  Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^return nonFirstChars;^81^^^^^79^88^return chars;^[CLASS] NameGenerator  [METHOD] reserveCharacters [RETURN_TYPE] char[]   char[] chars char[] reservedCharacters [VARIABLES] char  reservedCharacter  Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^Set<Character> charSet = Sets.newLinkedHashSet ( Chars.asList ( reservedCharacters )  ) ;^83^^^^^79^88^Set<Character> charSet = Sets.newLinkedHashSet ( Chars.asList ( chars )  ) ;^[CLASS] NameGenerator  [METHOD] reserveCharacters [RETURN_TYPE] char[]   char[] chars char[] reservedCharacters [VARIABLES] char  reservedCharacter  Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P7_Replace_Invocation]^Set<Character> charSet = Sets.newLinkedHashSet ( Chars.toArray ( chars )  ) ;^83^^^^^79^88^Set<Character> charSet = Sets.newLinkedHashSet ( Chars.asList ( chars )  ) ;^[CLASS] NameGenerator  [METHOD] reserveCharacters [RETURN_TYPE] char[]   char[] chars char[] reservedCharacters [VARIABLES] char  reservedCharacter  Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P8_Replace_Mix]^Set<Character> charSet = Sets.newLinkedHashSet ( Chars.asList ( nonFirstChars )  ) ;^83^^^^^79^88^Set<Character> charSet = Sets.newLinkedHashSet ( Chars.asList ( chars )  ) ;^[CLASS] NameGenerator  [METHOD] reserveCharacters [RETURN_TYPE] char[]   char[] chars char[] reservedCharacters [VARIABLES] char  reservedCharacter  Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P14_Delete_Statement]^^83^^^^^79^88^Set<Character> charSet = Sets.newLinkedHashSet ( Chars.asList ( chars )  ) ;^[CLASS] NameGenerator  [METHOD] reserveCharacters [RETURN_TYPE] char[]   char[] chars char[] reservedCharacters [VARIABLES] char  reservedCharacter  Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P8_Replace_Mix]^Set<Character> charSet = Sets.newLinkedHashSet ( Chars.toArray ( nonFirstChars )  ) ;^83^^^^^79^88^Set<Character> charSet = Sets.newLinkedHashSet ( Chars.asList ( chars )  ) ;^[CLASS] NameGenerator  [METHOD] reserveCharacters [RETURN_TYPE] char[]   char[] chars char[] reservedCharacters [VARIABLES] char  reservedCharacter  Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P1_Replace_Type]^for  ( int reservedCharacter : reservedCharacters )  {^84^^^^^79^88^for  ( char reservedCharacter : reservedCharacters )  {^[CLASS] NameGenerator  [METHOD] reserveCharacters [RETURN_TYPE] char[]   char[] chars char[] reservedCharacters [VARIABLES] char  reservedCharacter  Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P14_Delete_Statement]^^85^^^^^79^88^charSet.remove ( reservedCharacter ) ;^[CLASS] NameGenerator  [METHOD] reserveCharacters [RETURN_TYPE] char[]   char[] chars char[] reservedCharacters [VARIABLES] char  reservedCharacter  Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P7_Replace_Invocation]^return Chars.asList ( charSet ) ;^87^^^^^79^88^return Chars.toArray ( charSet ) ;^[CLASS] NameGenerator  [METHOD] reserveCharacters [RETURN_TYPE] char[]   char[] chars char[] reservedCharacters [VARIABLES] char  reservedCharacter  Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P14_Delete_Statement]^^87^^^^^79^88^return Chars.toArray ( charSet ) ;^[CLASS] NameGenerator  [METHOD] reserveCharacters [RETURN_TYPE] char[]   char[] chars char[] reservedCharacters [VARIABLES] char  reservedCharacter  Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P2_Replace_Operator]^if  ( prefix.length (  )  >= 0 )  {^92^^^^^91^106^if  ( prefix.length (  )  > 0 )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P3_Replace_Literal]^if  ( prefix.length (  )  > nameCount )  {^92^^^^^91^106^if  ( prefix.length (  )  > 0 )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P3_Replace_Literal]^if  ( prefix.length() + 6  > 0 )  {^92^^^^^91^106^if  ( prefix.length (  )  > 0 )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P6_Replace_Expression]^if  ( "prefix must start with one of: " + toString ( firstChars ) )  {^92^^^^^91^106^if  ( prefix.length (  )  > 0 )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P6_Replace_Expression]^if  ( pos < prefix.length() )  {^92^^^^^91^106^if  ( prefix.length (  )  > 0 )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P6_Replace_Expression]^if  ( "prefix has invalid characters, " + "must be one of: " + toString ( nonFirstChars ) )  {^92^^^^^91^106^if  ( prefix.length (  )  > 0 )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P6_Replace_Expression]^if  ( "prefix has invalid characters, " + "must be one of: " )  {^92^^^^^91^106^if  ( prefix.length (  )  > 0 )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P7_Replace_Invocation]^if  ( prefix.charAt (  )  > 0 )  {^92^^^^^91^106^if  ( prefix.length (  )  > 0 )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P7_Replace_Invocation]^if  ( prefix .isEmpty (  )   > 0 )  {^92^^^^^91^106^if  ( prefix.length (  )  > 0 )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P8_Replace_Mix]^if  ( prefix.length (  )  > 0  )  {^92^^^^^91^106^if  ( prefix.length (  )  > 0 )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P15_Unwrap_Block]^if (!(contains(firstChars, prefix.charAt(0)))) {    throw new java.lang.IllegalArgumentException(("prefix must start with one of: " + (java.util.Arrays.toString(firstChars))));}; for (int pos = 1; pos < (prefix.length()); ++pos) {    if (!(contains(nonFirstChars, prefix.charAt(pos)))) {        throw new java.lang.IllegalArgumentException((("prefix has invalid characters, " + "must be one of: ") + (java.util.Arrays.toString(nonFirstChars))));    }};^92^93^94^95^96^91^106^if  ( prefix.length (  )  > 0 )  {  if  ( !contains ( firstChars, prefix.charAt ( 0 )  )  )  { throw new IllegalArgumentException ( "prefix must start with one of: " + Arrays.toString ( firstChars )  ) ; }^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P16_Remove_Block]^^92^93^94^95^96^91^106^if  ( prefix.length (  )  > 0 )  {  if  ( !contains ( firstChars, prefix.charAt ( 0 )  )  )  { throw new IllegalArgumentException ( "prefix must start with one of: " + Arrays.toString ( firstChars )  ) ; }^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P3_Replace_Literal]^if  ( !contains ( firstChars, prefix.charAt ( pos )  )  )  {^94^^^^^91^106^if  ( !contains ( firstChars, prefix.charAt ( 0 )  )  )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^if  ( !contains ( reservedCharacters, prefix.charAt ( 0 )  )  )  {^94^^^^^91^106^if  ( !contains ( firstChars, prefix.charAt ( 0 )  )  )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^if  ( !contains ( firstChars.charAt ( 0 )  )  )  {^94^^^^^91^106^if  ( !contains ( firstChars, prefix.charAt ( 0 )  )  )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^if  ( !contains (  prefix.charAt ( 0 )  )  )  {^94^^^^^91^106^if  ( !contains ( firstChars, prefix.charAt ( 0 )  )  )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^if  ( !contains ( prefix, firstChars.charAt ( 0 )  )  )  {^94^^^^^91^106^if  ( !contains ( firstChars, prefix.charAt ( 0 )  )  )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P7_Replace_Invocation]^if  ( !reserveCharacters ( firstChars, prefix.charAt ( 0 )  )  )  {^94^^^^^91^106^if  ( !contains ( firstChars, prefix.charAt ( 0 )  )  )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P8_Replace_Mix]^if  ( !reserveCharacters ( nonFirstChars, prefix.charAt ( 1 )  )  )  {^94^^^^^91^106^if  ( !contains ( firstChars, prefix.charAt ( 0 )  )  )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P9_Replace_Statement]^if  ( !contains ( nonFirstChars, prefix.charAt ( pos )  )  )  {^94^^^^^91^106^if  ( !contains ( firstChars, prefix.charAt ( 0 )  )  )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException(("prefix must start with one of: " + (java.util.Arrays.toString(firstChars))));^94^95^96^97^^91^106^if  ( !contains ( firstChars, prefix.charAt ( 0 )  )  )  { throw new IllegalArgumentException ( "prefix must start with one of: " + Arrays.toString ( firstChars )  ) ; }^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P16_Remove_Block]^^94^95^96^97^^91^106^if  ( !contains ( firstChars, prefix.charAt ( 0 )  )  )  { throw new IllegalArgumentException ( "prefix must start with one of: " + Arrays.toString ( firstChars )  ) ; }^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P13_Insert_Block]^if  ( ! ( contains ( nonFirstChars, prefix.charAt ( pos )  )  )  )  {     throw new IllegalArgumentException (  (  ( "prefix has invalid characters, " + "must be one of: " )  +  ( toString ( nonFirstChars )  )  )  ) ; }^94^^^^^91^106^[Delete]^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "prefix must start with one of: " + Arrays.toString ( firstChars )  !=  ) ;^95^96^^^^91^106^throw new IllegalArgumentException ( "prefix must start with one of: " + Arrays.toString ( firstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "ix must star" + Arrays.toString ( firstChars )  ) ;^95^96^^^^91^106^throw new IllegalArgumentException ( "prefix must start with one of: " + Arrays.toString ( firstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException (  (  ( "prefix has invalid characters, " + "must be one of: " )  +  ( toString ( nonFirstChars )  )  )  )   ) ;^95^96^^^^91^106^throw new IllegalArgumentException ( "prefix must start with one of: " + Arrays.toString ( firstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^throw new IllegalArgumentException ( "prefix must start with one of: " + Arrays.toString ( reservedCharacters )  ) ;^95^96^^^^91^106^throw new IllegalArgumentException ( "prefix must start with one of: " + Arrays.toString ( firstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P13_Insert_Block]^if  ( ! ( contains ( firstChars, prefix.charAt ( 0 )  )  )  )  {     throw new IllegalArgumentException (  ( "prefix must start with one of: " +  ( toString ( firstChars )  )  )  ) ; }^95^^^^^91^106^[Delete]^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P13_Insert_Block]^if  ( ! ( contains ( nonFirstChars, prefix.charAt ( pos )  )  )  )  {     throw new IllegalArgumentException (  (  ( "prefix has invalid characters, " + "must be one of: " )  +  ( toString ( nonFirstChars )  )  )  ) ; }^95^^^^^91^106^[Delete]^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "prefix must start with one of: " + Arrays.toString ( firstChars )  >=  ) ;^95^96^^^^91^106^throw new IllegalArgumentException ( "prefix must start with one of: " + Arrays.toString ( firstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "th " + Arrays.toString ( firstChars )  ) ;^95^96^^^^91^106^throw new IllegalArgumentException ( "prefix must start with one of: " + Arrays.toString ( firstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P8_Replace_Mix]^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + ;^95^96^^^^91^106^throw new IllegalArgumentException ( "prefix must start with one of: " + Arrays.toString ( firstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^Arrays.toString ( nonFirstChars )  ) ;^96^^^^^91^106^Arrays.toString ( firstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P8_Replace_Mix]^Arrays.toString ( reservedCharacters )  ) ;^96^^^^^91^106^Arrays.toString ( firstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P14_Delete_Statement]^^96^^^^^91^106^Arrays.toString ( firstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P11_Insert_Donor_Statement]^Arrays.toString ( nonFirstChars )  ) ;Arrays.toString ( firstChars )  ) ;^96^^^^^91^106^Arrays.toString ( firstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P4_Replace_Constructor]^if  ( !contains ( nonFirstChars.charAt ( pos )  )  )  {^99^^^^^91^106^if  ( !contains ( nonFirstChars, prefix.charAt ( pos )  )  )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^if  ( !contains ( nonFirstChars, prefix.charAt ( nameCount )  )  )  {^99^^^^^91^106^if  ( !contains ( nonFirstChars, prefix.charAt ( pos )  )  )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^if  ( !contains ( reservedCharacters, prefix.charAt ( pos )  )  )  {^99^^^^^91^106^if  ( !contains ( nonFirstChars, prefix.charAt ( pos )  )  )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^if  ( !contains (  prefix.charAt ( pos )  )  )  {^99^^^^^91^106^if  ( !contains ( nonFirstChars, prefix.charAt ( pos )  )  )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^if  ( !contains ( prefix, nonFirstChars.charAt ( pos )  )  )  {^99^^^^^91^106^if  ( !contains ( nonFirstChars, prefix.charAt ( pos )  )  )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^if  ( !contains ( nonFirstChars, pos.charAt ( prefix )  )  )  {^99^^^^^91^106^if  ( !contains ( nonFirstChars, prefix.charAt ( pos )  )  )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P6_Replace_Expression]^if  ( "prefix has invalid characters, " + "must be one of: " )  {^99^^^^^91^106^if  ( !contains ( nonFirstChars, prefix.charAt ( pos )  )  )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P7_Replace_Invocation]^if  ( !reserveCharacters ( nonFirstChars, prefix.charAt ( pos )  )  )  {^99^^^^^91^106^if  ( !contains ( nonFirstChars, prefix.charAt ( pos )  )  )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P8_Replace_Mix]^if  ( !contains ( firstChars, prefix.charAt ( pos )  )  )  {^99^^^^^91^106^if  ( !contains ( nonFirstChars, prefix.charAt ( pos )  )  )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P9_Replace_Statement]^if  ( !contains ( firstChars, prefix.charAt ( 0 )  )  )  {^99^^^^^91^106^if  ( !contains ( nonFirstChars, prefix.charAt ( pos )  )  )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException((("prefix has invalid characters, " + "must be one of: ") + (java.util.Arrays.toString(nonFirstChars))));^99^100^101^102^103^91^106^if  ( !contains ( nonFirstChars, prefix.charAt ( pos )  )  )  { throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ; }^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P16_Remove_Block]^^99^100^101^102^103^91^106^if  ( !contains ( nonFirstChars, prefix.charAt ( pos )  )  )  { throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ; }^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P13_Insert_Block]^if  ( ! ( contains ( firstChars, prefix.charAt ( 0 )  )  )  )  {     throw new IllegalArgumentException (  ( "prefix must start with one of: " +  ( toString ( firstChars )  )  )  ) ; }^99^^^^^91^106^[Delete]^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  <  ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "prefix has invalid characters, "  &&  "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException (  ( "prefix must start with one of: " +  ( toString ( firstChars )  )  )  )   ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( reservedCharacters )  ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P13_Insert_Block]^if  ( ! ( contains ( nonFirstChars, prefix.charAt ( pos )  )  )  )  {     throw new IllegalArgumentException (  (  ( "prefix has invalid characters, " + "must be one of: " )  +  ( toString ( nonFirstChars )  )  )  ) ; }^100^^^^^91^106^[Delete]^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  &&  ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "prefix has invalid characters, "  >>  "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "harefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "prefix has invalid characters, " + "e" + Arrays.toString ( nonFirstChars )  ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( firstChars )  ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^Arrays.toString ( reservedCharacters )  ) ;^102^^^^^91^106^Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P14_Delete_Statement]^^102^^^^^91^106^Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P11_Insert_Donor_Statement]^Arrays.toString ( firstChars )  ) ;Arrays.toString ( nonFirstChars )  ) ;^102^^^^^91^106^Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P1_Replace_Type]^for  (  short  pos = 1; pos < prefix.length (  ) ; ++pos )  {^98^^^^^91^106^for  ( int pos = 1; pos < prefix.length (  ) ; ++pos )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P2_Replace_Operator]^for  ( int pos = 1; pos <= prefix.length (  ) ; ++pos )  {^98^^^^^91^106^for  ( int pos = 1; pos < prefix.length (  ) ; ++pos )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P2_Replace_Operator]^for  >  ( int pos = 1; pos < prefix.length (  ) ; ++pos )  {^98^^^^^91^106^for  ( int pos = 1; pos < prefix.length (  ) ; ++pos )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P3_Replace_Literal]^for  ( int pos = ; pos < prefix.length (  ) ; ++pos )  {^98^^^^^91^106^for  ( int pos = 1; pos < prefix.length (  ) ; ++pos )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P3_Replace_Literal]^for  ( int pos = 1; pos < prefix.length() - 5 ; ++pos )  {^98^^^^^91^106^for  ( int pos = 1; pos < prefix.length (  ) ; ++pos )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^for  ( int nameCount = 1; pos < prefix.length (  ) ; ++pos )  {^98^^^^^91^106^for  ( int pos = 1; pos < prefix.length (  ) ; ++pos )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P7_Replace_Invocation]^for  ( int pos = 1; pos < prefix.charAt (  ) ; ++pos )  {^98^^^^^91^106^for  ( int pos = 1; pos < prefix.length (  ) ; ++pos )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ==  ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "prefix has invalid characters, "   instanceof   "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "prefrefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "prefix has invalid characters, " + " be onust be one of: " + Arrays.toString ( nonFirstChars )  ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ^  ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "prefix has invalid characters, "  ==  "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "x has i" + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "prefix has invalid characters, " + "st " + Arrays.toString ( nonFirstChars )  ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P8_Replace_Mix]^throw new IllegalArgumentException ( "prefix must start with one of: " + Arrays.toString ( firstChars )  ) ; ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  !=  ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "prefix has invalid characters, "  ^  "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "f" + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "prefix has invalid characters, " + "ust be " + Arrays.toString ( nonFirstChars )  ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "prefix has invalid characters, arac" + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "prefix has invalid characters, " + " be on" + Arrays.toString ( nonFirstChars )  ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P8_Replace_Mix]^if  ( !reserveCharacters ( firstChars, prefix.charAt ( pos )  )  )  {^99^^^^^91^106^if  ( !contains ( nonFirstChars, prefix.charAt ( pos )  )  )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P7_Replace_Invocation]^if  ( !contains ( nonFirstChars, prefix .toCharArray (  )   )  )  {^99^^^^^91^106^if  ( !contains ( nonFirstChars, prefix.charAt ( pos )  )  )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P8_Replace_Mix]^Arrays.toString ( firstChars )  ) ;^102^^^^^91^106^Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "tart w" + Arrays.toString ( firstChars )  ) ;^95^96^^^^91^106^throw new IllegalArgumentException ( "prefix must start with one of: " + Arrays.toString ( firstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^throw new IllegalArgumentException ( "prefix must start with one of: " + Arrays.toString ( nonFirstChars )  ) ;^95^96^^^^91^106^throw new IllegalArgumentException ( "prefix must start with one of: " + Arrays.toString ( firstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )   instanceof   ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "prefix has invalid characters, efix " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "prefix has invalid characters, " + "mu" + Arrays.toString ( nonFirstChars )  ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P3_Replace_Literal]^for  ( int pos = -1; pos < prefix.length (  ) ; ++pos )  {^98^^^^^91^106^for  ( int pos = 1; pos < prefix.length (  ) ; ++pos )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P3_Replace_Literal]^for  ( int pos = 1; pos < prefix.length() - 1 ; ++pos )  {^98^^^^^91^106^for  ( int pos = 1; pos < prefix.length (  ) ; ++pos )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "prefi" + Arrays.toString ( firstChars )  ) ;^95^96^^^^91^106^throw new IllegalArgumentException ( "prefix must start with one of: " + Arrays.toString ( firstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "prefix has invalid characters, "  <=  "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "prefix has invalid characters, prefix has invalid charac" + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "prefix has invalid characters, " + "t beust be one of: " + Arrays.toString ( nonFirstChars )  ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P3_Replace_Literal]^if  ( !contains ( firstChars, prefix.charAt ( nameCount )  )  )  {^94^^^^^91^106^if  ( !contains ( firstChars, prefix.charAt ( 0 )  )  )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P7_Replace_Invocation]^if  ( !contains ( firstChars, prefix .toCharArray (  )   )  )  {^94^^^^^91^106^if  ( !contains ( firstChars, prefix.charAt ( 0 )  )  )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P3_Replace_Literal]^if  ( !contains ( firstChars, prefix.charAt ( 7 )  )  )  {^94^^^^^91^106^if  ( !contains ( firstChars, prefix.charAt ( 0 )  )  )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P3_Replace_Literal]^for  ( int pos = 1; pos < prefix.length() - 0 ; ++pos )  {^98^^^^^91^106^for  ( int pos = 1; pos < prefix.length (  ) ; ++pos )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P14_Delete_Statement]^^98^99^100^101^102^91^106^for  ( int pos = 1; pos < prefix.length (  ) ; ++pos )  { if  ( !contains ( nonFirstChars, prefix.charAt ( pos )  )  )  { throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ; }^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P8_Replace_Mix]^if  ( !contains ( firstChars, prefix.charAt ( 0 >>> 0 )  )  )  {^94^^^^^91^106^if  ( !contains ( firstChars, prefix.charAt ( 0 )  )  )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "prefix must start with one of: " + Arrays.toString ( firstChars )  ||  ) ;^95^96^^^^91^106^throw new IllegalArgumentException ( "prefix must start with one of: " + Arrays.toString ( firstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "rrefix must start with one of: " + Arrays.toString ( firstChars )  ) ;^95^96^^^^91^106^throw new IllegalArgumentException ( "prefix must start with one of: " + Arrays.toString ( firstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "prefix must start with one of: " + Arrays.toString ( firstChars )   instanceof   ) ;^95^96^^^^91^106^throw new IllegalArgumentException ( "prefix must start with one of: " + Arrays.toString ( firstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "ix must start with onrefix must start with one of: " + Arrays.toString ( firstChars )  ) ;^95^96^^^^91^106^throw new IllegalArgumentException ( "prefix must start with one of: " + Arrays.toString ( firstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P8_Replace_Mix]^return 0;^95^96^^^^91^106^throw new IllegalArgumentException ( "prefix must start with one of: " + Arrays.toString ( firstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P8_Replace_Mix]^if  ( !reserveCharacters ( reservedCharacters, prefix.charAt ( pos )  )  )  {^99^^^^^91^106^if  ( !contains ( nonFirstChars, prefix.charAt ( pos )  )  )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P3_Replace_Literal]^throw new IllegalArgumentException ( " charactersrefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one " + Arrays.toString ( nonFirstChars )  ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "prefix has invalid characters, "  &  "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "prefix has invalid characters, nvalid cha" + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: st" + Arrays.toString ( nonFirstChars )  ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P1_Replace_Type]^for  (  long  pos = 1; pos < prefix.length (  ) ; ++pos )  {^98^^^^^91^106^for  ( int pos = 1; pos < prefix.length (  ) ; ++pos )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P2_Replace_Operator]^for  <  ( int pos = 1; pos < prefix.length (  ) ; ++pos )  {^98^^^^^91^106^for  ( int pos = 1; pos < prefix.length (  ) ; ++pos )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P2_Replace_Operator]^for  ==  ( int pos = 1; pos < prefix.length (  ) ; ++pos )  {^98^^^^^91^106^for  ( int pos = 1; pos < prefix.length (  ) ; ++pos )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P3_Replace_Literal]^for  ( int pos = pos; pos < prefix.length (  ) ; ++pos )  {^98^^^^^91^106^for  ( int pos = 1; pos < prefix.length (  ) ; ++pos )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P3_Replace_Literal]^for  ( int pos = 1; pos < prefix.length() + 4 ; ++pos )  {^98^^^^^91^106^for  ( int pos = 1; pos < prefix.length (  ) ; ++pos )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^for  ( int prefix = 1; pos < pos.length (  ) ; ++pos )  {^98^^^^^91^106^for  ( int pos = 1; pos < prefix.length (  ) ; ++pos )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^if  ( !contains ( pos, prefix.charAt ( nonFirstChars )  )  )  {^99^^^^^91^106^if  ( !contains ( nonFirstChars, prefix.charAt ( pos )  )  )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "prefix has invalid characters, "  >=  "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P3_Replace_Literal]^throw new IllegalArgumentException ( " invalid" + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ||  ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "prefix has invalid characters, x ha" + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "prefix has invalid characters, " + "st bust be one of: " + Arrays.toString ( nonFirstChars )  ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P8_Replace_Mix]^return 0;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  |  ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "s inva" + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "prefix has invalid characters, " + "e oust be one of: " + Arrays.toString ( nonFirstChars )  ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  <=  ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "prefix ha" + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "prefix must start with one of: " + Arrays.toString ( firstChars )  &&  ) ;^95^96^^^^91^106^throw new IllegalArgumentException ( "prefix must start with one of: " + Arrays.toString ( firstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "rerefix must start with one of: " + Arrays.toString ( firstChars )  ) ;^95^96^^^^91^106^throw new IllegalArgumentException ( "prefix must start with one of: " + Arrays.toString ( firstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "prefix has invalid characters, "  ||  "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "as invalid " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "prefix has invalid characters, " + "e one of" + Arrays.toString ( nonFirstChars )  ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P3_Replace_Literal]^for  ( int pos = 6; pos < prefix.length (  ) ; ++pos )  {^98^^^^^91^106^for  ( int pos = 1; pos < prefix.length (  ) ; ++pos )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P3_Replace_Literal]^for  ( int pos = 1; pos < prefix.length() + 9 ; ++pos )  {^98^^^^^91^106^for  ( int pos = 1; pos < prefix.length (  ) ; ++pos )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "prefix must start with one of: " + Arrays.toString ( firstChars )  >  ) ;^95^96^^^^91^106^throw new IllegalArgumentException ( "prefix must start with one of: " + Arrays.toString ( firstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "fix must start with one " + Arrays.toString ( firstChars )  ) ;^95^96^^^^91^106^throw new IllegalArgumentException ( "prefix must start with one of: " + Arrays.toString ( firstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "prefix has invalid characters, " + "onust be one of: " + Arrays.toString ( nonFirstChars )  ) ;^100^101^102^^^91^106^throw new IllegalArgumentException ( "prefix has invalid characters, " + "must be one of: " + Arrays.toString ( nonFirstChars )  ) ;^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P3_Replace_Literal]^if  ( prefix.length() + 4  > 0 )  {^92^^^^^91^106^if  ( prefix.length (  )  > 0 )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P3_Replace_Literal]^if  ( !contains ( firstChars, prefix.charAt ( -8 )  )  )  {^94^^^^^91^106^if  ( !contains ( firstChars, prefix.charAt ( 0 )  )  )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P8_Replace_Mix]^if  ( !contains ( nonFirstChars, prefix.charAt ( 0 )  )  )  {^94^^^^^91^106^if  ( !contains ( firstChars, prefix.charAt ( 0 )  )  )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P3_Replace_Literal]^for  ( int pos = 1; pos < prefix.length() + 3 ; ++pos )  {^98^^^^^91^106^for  ( int pos = 1; pos < prefix.length (  ) ; ++pos )  {^[CLASS] NameGenerator  [METHOD] checkPrefix [RETURN_TYPE] void   String prefix [VARIABLES] Set  charSet  reservedNames  String  prefix  boolean  int  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  chars  firstChars  nonFirstChars  reservedCharacters  
[P2_Replace_Operator]^if  ( arr[i] < c )  {^110^^^^^108^115^if  ( arr[i] == c )  {^[CLASS] NameGenerator  [METHOD] contains [RETURN_TYPE] boolean   char[] arr char c [VARIABLES] char  c  Set  charSet  reservedNames  String  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^if  ( nonFirstChars[i] == c )  {^110^^^^^108^115^if  ( arr[i] == c )  {^[CLASS] NameGenerator  [METHOD] contains [RETURN_TYPE] boolean   char[] arr char c [VARIABLES] char  c  Set  charSet  reservedNames  String  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P8_Replace_Mix]^if  ( reservedCharacters[i] == c )  {^110^^^^^108^115^if  ( arr[i] == c )  {^[CLASS] NameGenerator  [METHOD] contains [RETURN_TYPE] boolean   char[] arr char c [VARIABLES] char  c  Set  charSet  reservedNames  String  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P15_Unwrap_Block]^return true;^110^111^112^^^108^115^if  ( arr[i] == c )  { return true; }^[CLASS] NameGenerator  [METHOD] contains [RETURN_TYPE] boolean   char[] arr char c [VARIABLES] char  c  Set  charSet  reservedNames  String  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P16_Remove_Block]^^110^111^112^^^108^115^if  ( arr[i] == c )  { return true; }^[CLASS] NameGenerator  [METHOD] contains [RETURN_TYPE] boolean   char[] arr char c [VARIABLES] char  c  Set  charSet  reservedNames  String  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P3_Replace_Literal]^return false;^111^^^^^108^115^return true;^[CLASS] NameGenerator  [METHOD] contains [RETURN_TYPE] boolean   char[] arr char c [VARIABLES] char  c  Set  charSet  reservedNames  String  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P1_Replace_Type]^for  (  short  i = 0; i < arr.length; i++ )  {^109^^^^^108^115^for  ( int i = 0; i < arr.length; i++ )  {^[CLASS] NameGenerator  [METHOD] contains [RETURN_TYPE] boolean   char[] arr char c [VARIABLES] char  c  Set  charSet  reservedNames  String  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P2_Replace_Operator]^for  ( int i = 0; i <= arr.length; i++ )  {^109^^^^^108^115^for  ( int i = 0; i < arr.length; i++ )  {^[CLASS] NameGenerator  [METHOD] contains [RETURN_TYPE] boolean   char[] arr char c [VARIABLES] char  c  Set  charSet  reservedNames  String  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P3_Replace_Literal]^for  ( int i = nameCount; i < arr.length; i++ )  {^109^^^^^108^115^for  ( int i = 0; i < arr.length; i++ )  {^[CLASS] NameGenerator  [METHOD] contains [RETURN_TYPE] boolean   char[] arr char c [VARIABLES] char  c  Set  charSet  reservedNames  String  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^for  ( posnt i = 0; i < arr.length; i++ )  {^109^^^^^108^115^for  ( int i = 0; i < arr.length; i++ )  {^[CLASS] NameGenerator  [METHOD] contains [RETURN_TYPE] boolean   char[] arr char c [VARIABLES] char  c  Set  charSet  reservedNames  String  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^for  ( int i = 0; i < nonFirstChars.length; i++ )  {^109^^^^^108^115^for  ( int i = 0; i < arr.length; i++ )  {^[CLASS] NameGenerator  [METHOD] contains [RETURN_TYPE] boolean   char[] arr char c [VARIABLES] char  c  Set  charSet  reservedNames  String  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^for  ( int i = 0; i < pos; i++ )  {^109^^^^^108^115^for  ( int i = 0; i < arr.length; i++ )  {^[CLASS] NameGenerator  [METHOD] contains [RETURN_TYPE] boolean   char[] arr char c [VARIABLES] char  c  Set  charSet  reservedNames  String  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^for  ( arr.lengthnt i = 0; i < i; i++ )  {^109^^^^^108^115^for  ( int i = 0; i < arr.length; i++ )  {^[CLASS] NameGenerator  [METHOD] contains [RETURN_TYPE] boolean   char[] arr char c [VARIABLES] char  c  Set  charSet  reservedNames  String  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^for  ( int i = 0; i < arr.length.length; i++ )  {^109^^^^^108^115^for  ( int i = 0; i < arr.length; i++ )  {^[CLASS] NameGenerator  [METHOD] contains [RETURN_TYPE] boolean   char[] arr char c [VARIABLES] char  c  Set  charSet  reservedNames  String  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P2_Replace_Operator]^if  ( arr[i] != c )  {^110^^^^^108^115^if  ( arr[i] == c )  {^[CLASS] NameGenerator  [METHOD] contains [RETURN_TYPE] boolean   char[] arr char c [VARIABLES] char  c  Set  charSet  reservedNames  String  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^if  ( c[i] == arr )  {^110^^^^^108^115^if  ( arr[i] == c )  {^[CLASS] NameGenerator  [METHOD] contains [RETURN_TYPE] boolean   char[] arr char c [VARIABLES] char  c  Set  charSet  reservedNames  String  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P8_Replace_Mix]^if  ( firstChars[i] == c )  {^110^^^^^108^115^if  ( arr[i] == c )  {^[CLASS] NameGenerator  [METHOD] contains [RETURN_TYPE] boolean   char[] arr char c [VARIABLES] char  c  Set  charSet  reservedNames  String  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P1_Replace_Type]^for  (  long  i = 0; i < arr.length; i++ )  {^109^^^^^108^115^for  ( int i = 0; i < arr.length; i++ )  {^[CLASS] NameGenerator  [METHOD] contains [RETURN_TYPE] boolean   char[] arr char c [VARIABLES] char  c  Set  charSet  reservedNames  String  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P3_Replace_Literal]^for  ( int i = 2; i < arr.length; i++ )  {^109^^^^^108^115^for  ( int i = 0; i < arr.length; i++ )  {^[CLASS] NameGenerator  [METHOD] contains [RETURN_TYPE] boolean   char[] arr char c [VARIABLES] char  c  Set  charSet  reservedNames  String  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P3_Replace_Literal]^return true;^114^^^^^108^115^return false;^[CLASS] NameGenerator  [METHOD] contains [RETURN_TYPE] boolean   char[] arr char c [VARIABLES] char  c  Set  charSet  reservedNames  String  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P3_Replace_Literal]^while  ( false )  {^121^^^^^120^148^while  ( true )  {^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P2_Replace_Operator]^while  ( i >= 0 )  {^132^^^^^120^148^while  ( i > 0 )  {^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P3_Replace_Literal]^while  ( i > nameCount )  {^132^^^^^120^148^while  ( i > 0 )  {^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^while  ( nameCount > 0 )  {^132^^^^^120^148^while  ( i > 0 )  {^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^name += firstChars[pos];^135^^^^^120^148^name += nonFirstChars[pos];^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P8_Replace_Mix]^name +=  nonFirstChars[nameCount];^135^^^^^120^148^name += nonFirstChars[pos];^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P11_Insert_Donor_Statement]^name += firstChars[pos];name += nonFirstChars[pos];^135^^^^^120^148^name += nonFirstChars[pos];^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P11_Insert_Donor_Statement]^i /= nonFirstChars.length;name += nonFirstChars[pos];^135^^^^^120^148^name += nonFirstChars[pos];^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^i /= nameCount;^136^^^^^120^148^i /= nonFirstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^i /= reservedCharacters.length;^136^^^^^120^148^i /= nonFirstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^i /= nonFirstChars;^136^^^^^120^148^i /= nonFirstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^i /= nonFirstChars.length.length;^136^^^^^120^148^i /= nonFirstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P8_Replace_Mix]^i /;^136^^^^^120^148^i /= nonFirstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P11_Insert_Donor_Statement]^name += nonFirstChars[pos];i /= nonFirstChars.length;^136^^^^^120^148^i /= nonFirstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P11_Insert_Donor_Statement]^i /= firstChars.length;i /= nonFirstChars.length;^136^^^^^120^148^i /= nonFirstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P1_Replace_Type]^long  pos = i % nonFirstChars.length;^134^^^^^120^148^int pos = i % nonFirstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P2_Replace_Operator]^int pos = i  !=  nonFirstChars.length;^134^^^^^120^148^int pos = i % nonFirstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^int pos = i % nameCount;^134^^^^^120^148^int pos = i % nonFirstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^int pos = i % reservedCharacters.length;^134^^^^^120^148^int pos = i % nonFirstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^int pos = nonFirstChars.length % i;^134^^^^^120^148^int pos = i % nonFirstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^int pos = i % nonFirstChars.length.length;^134^^^^^120^148^int pos = i % nonFirstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P8_Replace_Mix]^int pos = nameCount % nonFirstChars.length;^134^^^^^120^148^int pos = i % nonFirstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P11_Insert_Donor_Statement]^int pos = i % firstChars.length;int pos = i % nonFirstChars.length;^134^^^^^120^148^int pos = i % nonFirstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^if  ( prefix.isEmpty (  )  )  {^126^^^^^120^148^if  ( name.isEmpty (  )  )  {^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P7_Replace_Invocation]^if  ( name.charAt (  )  )  {^126^^^^^120^148^if  ( name.isEmpty (  )  )  {^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P15_Unwrap_Block]^int pos = i % (firstChars.length); name += firstChars[pos]; i /= firstChars.length;^126^127^128^129^130^120^148^if  ( name.isEmpty (  )  )  { int pos = i % firstChars.length; name += firstChars[pos]; i /= firstChars.length; }^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P16_Remove_Block]^^126^127^128^129^130^120^148^if  ( name.isEmpty (  )  )  { int pos = i % firstChars.length; name += firstChars[pos]; i /= firstChars.length; }^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^name += reservedCharacters[pos];^128^^^^^120^148^name += firstChars[pos];^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P8_Replace_Mix]^name +=  firstChars[null];^128^^^^^120^148^name += firstChars[pos];^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P11_Insert_Donor_Statement]^name += nonFirstChars[pos];name += firstChars[pos];^128^^^^^120^148^name += firstChars[pos];^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^i /= pos;^129^^^^^120^148^i /= firstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^i /= reservedCharacters.length;^129^^^^^120^148^i /= firstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^i /= firstChars;^129^^^^^120^148^i /= firstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^i /= firstChars.length.length;^129^^^^^120^148^i /= firstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P8_Replace_Mix]^i / =  i /;^129^^^^^120^148^i /= firstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P11_Insert_Donor_Statement]^i /= nonFirstChars.length;i /= firstChars.length;^129^^^^^120^148^i /= firstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P1_Replace_Type]^short  pos = i % firstChars.length;^127^^^^^120^148^int pos = i % firstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P2_Replace_Operator]^int pos = i  ==  firstChars.length;^127^^^^^120^148^int pos = i % firstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^int pos = nameCount % firstChars.length;^127^^^^^120^148^int pos = i % firstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^int pos = i % reservedCharacters.length;^127^^^^^120^148^int pos = i % firstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^int pos = firstChars.length % i;^127^^^^^120^148^int pos = i % firstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^int pos = firstChars % i.length;^127^^^^^120^148^int pos = i % firstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P11_Insert_Donor_Statement]^int pos = i % nonFirstChars.length;int pos = i % firstChars.length;^127^^^^^120^148^int pos = i % firstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P2_Replace_Operator]^if  ( TokenStream.isKeyword ( name )  && reservedNames.contains ( name )  )  {^142^^^^^120^148^if  ( TokenStream.isKeyword ( name )  || reservedNames.contains ( name )  )  {^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^if  ( TokenStream.isKeyword ( prefix )  || reservedNames.contains ( name )  )  {^142^^^^^120^148^if  ( TokenStream.isKeyword ( name )  || reservedNames.contains ( name )  )  {^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^if  ( TokenStream.isKeyword ( reservedNames )  || name.contains ( name )  )  {^142^^^^^120^148^if  ( TokenStream.isKeyword ( name )  || reservedNames.contains ( name )  )  {^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P6_Replace_Expression]^if  ( TokenStream.isKeyword ( name )  ) {^142^^^^^120^148^if  ( TokenStream.isKeyword ( name )  || reservedNames.contains ( name )  )  {^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P6_Replace_Expression]^if  (  reservedNames.contains ( name )  )  {^142^^^^^120^148^if  ( TokenStream.isKeyword ( name )  || reservedNames.contains ( name )  )  {^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P7_Replace_Invocation]^if  ( TokenStream.isKeyword ( name )  || reservedNames.remove ( name )  )  {^142^^^^^120^148^if  ( TokenStream.isKeyword ( name )  || reservedNames.contains ( name )  )  {^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P8_Replace_Mix]^if  ( TokenStream.isKeyword ( prefix )  ) {^142^^^^^120^148^if  ( TokenStream.isKeyword ( name )  || reservedNames.contains ( name )  )  {^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P15_Unwrap_Block]^continue;^142^143^144^^^120^148^if  ( TokenStream.isKeyword ( name )  || reservedNames.contains ( name )  )  { continue; }^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P16_Remove_Block]^^142^143^144^^^120^148^if  ( TokenStream.isKeyword ( name )  || reservedNames.contains ( name )  )  { continue; }^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P8_Replace_Mix]^name +=  firstChars[nameCount];^128^^^^^120^148^name += firstChars[pos];^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^i /= nameCount;^129^^^^^120^148^i /= firstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^i /= chars.length;^129^^^^^120^148^i /= firstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P8_Replace_Mix]^i /;^129^^^^^120^148^i /= firstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^name += chars[pos];^135^^^^^120^148^name += nonFirstChars[pos];^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P8_Replace_Mix]^i / =  i /;^136^^^^^120^148^i /= nonFirstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^return prefix;^146^^^^^120^148^return name;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P1_Replace_Type]^char name = prefix;^122^^^^^120^148^String name = prefix;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P1_Replace_Type]^short  i = nameCount;^124^^^^^120^148^int i = nameCount;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^int i = pos;^124^^^^^120^148^int i = nameCount;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P2_Replace_Operator]^int pos = i  |  firstChars.length;^127^^^^^120^148^int pos = i % firstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^int pos = i % nameCount;^127^^^^^120^148^int pos = i % firstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^int pos = i % firstChars;^127^^^^^120^148^int pos = i % firstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P2_Replace_Operator]^int pos = i  &  nonFirstChars.length;^134^^^^^120^148^int pos = i % nonFirstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^int pos = i % nonFirstChars;^134^^^^^120^148^int pos = i % nonFirstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P8_Replace_Mix]^if  ( TokenStream.isKeyword ( name )  || 4.remove ( name )  )  {^142^^^^^120^148^if  ( TokenStream.isKeyword ( name )  || reservedNames.contains ( name )  )  {^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P3_Replace_Literal]^while  ( i > -2 )  {^132^^^^^120^148^while  ( i > 0 )  {^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^name += reservedCharacters[pos];^135^^^^^120^148^name += nonFirstChars[pos];^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^i /= pos;^136^^^^^120^148^i /= nonFirstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P1_Replace_Type]^short  pos = i % nonFirstChars.length;^134^^^^^120^148^int pos = i % nonFirstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P2_Replace_Operator]^int pos = i  ^  nonFirstChars.length;^134^^^^^120^148^int pos = i % nonFirstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^int pos = nonFirstChars % i.length;^134^^^^^120^148^int pos = i % nonFirstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P8_Replace_Mix]^if  ( prefix.charAt (  )  )  {^126^^^^^120^148^if  ( name.isEmpty (  )  )  {^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P2_Replace_Operator]^int pos = i  &  firstChars.length;^127^^^^^120^148^int pos = i % firstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P5_Replace_Variable]^i /= firstChars.length;^136^^^^^120^148^i /= nonFirstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P1_Replace_Type]^long  i = nameCount;^124^^^^^120^148^int i = nameCount;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P2_Replace_Operator]^int pos = i  <=  firstChars.length;^127^^^^^120^148^int pos = i % firstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
[P8_Replace_Mix]^int pos = i % chars.length;^127^^^^^120^148^int pos = i % firstChars.length;^[CLASS] NameGenerator  [METHOD] generateNextName [RETURN_TYPE] String   [VARIABLES] Set  charSet  reservedNames  String  name  prefix  boolean  int  i  nameCount  pos  char[]  FIRST_CHAR  NONFIRST_CHAR  arr  chars  firstChars  nonFirstChars  reservedCharacters  
