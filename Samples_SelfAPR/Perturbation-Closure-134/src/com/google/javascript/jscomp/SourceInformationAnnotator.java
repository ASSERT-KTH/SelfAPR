[P1_Replace_Type]^private char sourceFile = null;^44^^^^^39^49^private String sourceFile = null;^[CLASS] SourceInformationAnnotator   [VARIABLES] 
[P8_Replace_Mix]^private char sourceFile = true;^44^^^^^39^49^private String sourceFile = null;^[CLASS] SourceInformationAnnotator   [VARIABLES] 
[P8_Replace_Mix]^this.sourceFile =  null;^47^^^^^46^48^this.sourceFile = sourceFile;^[CLASS] SourceInformationAnnotator  [METHOD] <init> [RETURN_TYPE] String)   String sourceFile [VARIABLES] String  sourceFile  boolean  
[P2_Replace_Operator]^if  ( sourceFile == null )  {^53^^^^^38^68^if  ( sourceFile != null )  {^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P5_Replace_Variable]^if  ( sourceFile != propNodeull )  {^53^^^^^38^68^if  ( sourceFile != null )  {^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P5_Replace_Variable]^if  ( n != sourceFileull )  {^53^^^^^38^68^if  ( sourceFile != null )  {^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P8_Replace_Mix]^if  ( sourceFile != true )  {^53^^^^^38^68^if  ( sourceFile != null )  {^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P15_Unwrap_Block]^n.putProp(Node.SOURCEFILE_PROP, sourceFile);^53^54^55^^^38^68^if  ( sourceFile != null )  { n.putProp ( Node.SOURCEFILE_PROP, sourceFile ) ; }^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P16_Remove_Block]^^53^54^55^^^38^68^if  ( sourceFile != null )  { n.putProp ( Node.SOURCEFILE_PROP, sourceFile ) ; }^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P5_Replace_Variable]^n.putProp ( Node.SOURCEFILE_PROP ) ;^54^^^^^39^69^n.putProp ( Node.SOURCEFILE_PROP, sourceFile ) ;^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P8_Replace_Mix]^n .getString (  )  ;^54^^^^^39^69^n.putProp ( Node.SOURCEFILE_PROP, sourceFile ) ;^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P14_Delete_Statement]^^54^^^^^39^69^n.putProp ( Node.SOURCEFILE_PROP, sourceFile ) ;^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P11_Insert_Donor_Statement]^n.putProp ( Node.ORIGINALNAME_PROP, propNode.getString (  )  ) ;n.putProp ( Node.SOURCEFILE_PROP, sourceFile ) ;^54^^^^^39^69^n.putProp ( Node.SOURCEFILE_PROP, sourceFile ) ;^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P11_Insert_Donor_Statement]^n.putProp ( Node.ORIGINALNAME_PROP, n.getString (  )  ) ;n.putProp ( Node.SOURCEFILE_PROP, sourceFile ) ;^54^^^^^39^69^n.putProp ( Node.SOURCEFILE_PROP, sourceFile ) ;^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P11_Insert_Donor_Statement]^key.putProp ( Node.ORIGINALNAME_PROP, key.getString (  )  ) ;n.putProp ( Node.SOURCEFILE_PROP, sourceFile ) ;^54^^^^^39^69^n.putProp ( Node.SOURCEFILE_PROP, sourceFile ) ;^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P13_Insert_Block]^if  (  ( sourceFile )  != null )  {     n.putProp ( Node.SOURCEFILE_PROP, sourceFile ) ; }^54^^^^^39^69^[Delete]^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P2_Replace_Operator]^if  ( propNode.getType (  )  <= Token.STRING )  {^61^^^^^46^76^if  ( propNode.getType (  )  == Token.STRING )  {^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.STRING )  {^61^^^^^46^76^if  ( propNode.getType (  )  == Token.STRING )  {^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P7_Replace_Invocation]^if  ( propNode.putProp (  )  == Token.STRING )  {^61^^^^^46^76^if  ( propNode.getType (  )  == Token.STRING )  {^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P7_Replace_Invocation]^if  ( propNode .getString (  )   == Token.STRING )  {^61^^^^^46^76^if  ( propNode.getType (  )  == Token.STRING )  {^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P8_Replace_Mix]^if  ( propNode.getType (  )  == Token.3 )  {^61^^^^^46^76^if  ( propNode.getType (  )  == Token.STRING )  {^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P9_Replace_Statement]^if  ( key.getType (  )  == Token.STRING )  {^61^^^^^46^76^if  ( propNode.getType (  )  == Token.STRING )  {^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P15_Unwrap_Block]^n.putProp(Node.ORIGINALNAME_PROP, propNode.getString());^61^62^63^^^46^76^if  ( propNode.getType (  )  == Token.STRING )  { n.putProp ( Node.ORIGINALNAME_PROP, propNode.getString (  )  ) ; }^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P16_Remove_Block]^^61^62^63^^^46^76^if  ( propNode.getType (  )  == Token.STRING )  { n.putProp ( Node.ORIGINALNAME_PROP, propNode.getString (  )  ) ; }^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P13_Insert_Block]^if  (  ( key.getType (  )  )  ==  ( STRING )  )  {     if  ( ! ( key.isQuotedString (  )  )  )  {         key.putProp ( Node.ORIGINALNAME_PROP, key.getString (  )  ) ;     } }^61^^^^^46^76^[Delete]^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P13_Insert_Block]^if  ( ! ( key.isQuotedString (  )  )  )  {     key.putProp ( Node.ORIGINALNAME_PROP, key.getString (  )  ) ; }^61^^^^^46^76^[Delete]^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P5_Replace_Variable]^n.putProp ( Node.ORIGINALNAME_PROP, parent.getString (  )  ) ;^62^^^^^47^77^n.putProp ( Node.ORIGINALNAME_PROP, propNode.getString (  )  ) ;^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P5_Replace_Variable]^n.putProp ( Node.ORIGINALNAME_PROP.getString (  )  ) ;^62^^^^^47^77^n.putProp ( Node.ORIGINALNAME_PROP, propNode.getString (  )  ) ;^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P7_Replace_Invocation]^n.putProp ( Node.ORIGINALNAME_PROP, propNode.putProp (  )  ) ;^62^^^^^47^77^n.putProp ( Node.ORIGINALNAME_PROP, propNode.getString (  )  ) ;^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P14_Delete_Statement]^^62^^^^^47^77^n.putProp ( Node.ORIGINALNAME_PROP, propNode.getString (  )  ) ;^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P7_Replace_Invocation]^n.putProp ( Node.ORIGINALNAME_PROP, propNode .isQuotedString (  )   ) ;^62^^^^^47^77^n.putProp ( Node.ORIGINALNAME_PROP, propNode.getString (  )  ) ;^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P2_Replace_Operator]^if  ( key.getType (  )  <= Token.STRING )  {^76^^^^^61^91^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P5_Replace_Variable]^if  ( propNode.getType (  )  == Token.STRING )  {^76^^^^^61^91^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P7_Replace_Invocation]^if  ( key.putProp (  )  == Token.STRING )  {^76^^^^^61^91^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P15_Unwrap_Block]^if (!(key.isQuotedString())) {    key.putProp(Node.ORIGINALNAME_PROP, key.getString());};^76^77^78^79^^61^91^if  ( key.getType (  )  == Token.STRING )  { if  ( !key.isQuotedString (  )  )  { key.putProp ( Node.ORIGINALNAME_PROP, key.getString (  )  ) ; }^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P16_Remove_Block]^^76^77^78^79^^61^91^if  ( key.getType (  )  == Token.STRING )  { if  ( !key.isQuotedString (  )  )  { key.putProp ( Node.ORIGINALNAME_PROP, key.getString (  )  ) ; }^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P13_Insert_Block]^if  (  ( propNode.getType (  )  )  ==  ( STRING )  )  {     n.putProp ( Node.ORIGINALNAME_PROP, propNode.getString (  )  ) ; }^76^^^^^61^91^[Delete]^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P13_Insert_Block]^if  ( ! ( key.isQuotedString (  )  )  )  {     key.putProp ( Node.ORIGINALNAME_PROP, key.getString (  )  ) ; }^76^^^^^61^91^[Delete]^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P7_Replace_Invocation]^if  ( !key.putProp (  )  )  {^77^^^^^62^92^if  ( !key.isQuotedString (  )  )  {^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P15_Unwrap_Block]^key.putProp(Node.ORIGINALNAME_PROP, key.getString());^77^78^79^^^62^92^if  ( !key.isQuotedString (  )  )  { key.putProp ( Node.ORIGINALNAME_PROP, key.getString (  )  ) ; }^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P16_Remove_Block]^^77^78^79^^^62^92^if  ( !key.isQuotedString (  )  )  { key.putProp ( Node.ORIGINALNAME_PROP, key.getString (  )  ) ; }^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P13_Insert_Block]^if  (  ( propNode.getType (  )  )  ==  ( STRING )  )  {     n.putProp ( Node.ORIGINALNAME_PROP, propNode.getString (  )  ) ; }^77^^^^^62^92^[Delete]^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P13_Insert_Block]^if  (  ( key.getType (  )  )  ==  ( STRING )  )  {     if  ( ! ( key.isQuotedString (  )  )  )  {         key.putProp ( Node.ORIGINALNAME_PROP, key.getString (  )  ) ;     } }^77^^^^^62^92^[Delete]^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P5_Replace_Variable]^key.putProp ( Node.ORIGINALNAME_PROP, propNode.getString (  )  ) ;^78^^^^^63^93^key.putProp ( Node.ORIGINALNAME_PROP, key.getString (  )  ) ;^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P7_Replace_Invocation]^key.putProp ( Node.ORIGINALNAME_PROP, key.putProp (  )  ) ;^78^^^^^63^93^key.putProp ( Node.ORIGINALNAME_PROP, key.getString (  )  ) ;^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P8_Replace_Mix]^key.putProp ( Node.ORIGINALNAME_PROP, propNode.putProp (  )  ) ;^78^^^^^63^93^key.putProp ( Node.ORIGINALNAME_PROP, key.getString (  )  ) ;^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P14_Delete_Statement]^^78^^^^^63^93^key.putProp ( Node.ORIGINALNAME_PROP, key.getString (  )  ) ;^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P13_Insert_Block]^if  ( ! ( key.isQuotedString (  )  )  )  {     key.putProp ( Node.ORIGINALNAME_PROP, key.getString (  )  ) ; }^78^^^^^63^93^[Delete]^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P7_Replace_Invocation]^key.putProp ( Node.ORIGINALNAME_PROP, key .isQuotedString (  )   ) ;^78^^^^^63^93^key.putProp ( Node.ORIGINALNAME_PROP, key.getString (  )  ) ;^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P7_Replace_Invocation]^if  ( !key .getString (  )   )  {^77^^^^^62^92^if  ( !key.isQuotedString (  )  )  {^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P2_Replace_Operator]^for  ( Node key = n.getFirstChild (  ) ; key == null;^72^^^^^57^87^for  ( Node key = n.getFirstChild (  ) ; key != null;^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P5_Replace_Variable]^for  ( Node key = propNode.getFirstChild (  ) ; key != null;^72^^^^^57^87^for  ( Node key = n.getFirstChild (  ) ; key != null;^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P5_Replace_Variable]^for  ( Node propNode = n.getFirstChild (  ) ; key != null;^72^^^^^57^87^for  ( Node key = n.getFirstChild (  ) ; key != null;^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P5_Replace_Variable]^for  ( Node n = key.getFirstChild (  ) ; key != null;^72^^^^^57^87^for  ( Node key = n.getFirstChild (  ) ; key != null;^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P7_Replace_Invocation]^for  ( Node key = n.putProp (  ) ; key != null;^72^^^^^57^87^for  ( Node key = n.getFirstChild (  ) ; key != null;^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P7_Replace_Invocation]^for  ( Node key = n .getString (  )  ; key != null;^72^^^^^57^87^for  ( Node key = n.getFirstChild (  ) ; key != null;^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P8_Replace_Mix]^for  ( Node propNode = n.putProp (  ) ; key != null;^72^^^^^57^87^for  ( Node key = n.getFirstChild (  ) ; key != null;^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P2_Replace_Operator]^if  ( key.getType (  )  <= Token.STRING )  {^76^^^^^72^81^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P5_Replace_Variable]^if  ( propNode.getType (  )  == Token.STRING )  {^76^^^^^72^81^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P7_Replace_Invocation]^if  ( key.putProp (  )  == Token.STRING )  {^76^^^^^72^81^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P15_Unwrap_Block]^if (!(key.isQuotedString())) {    key.putProp(Node.ORIGINALNAME_PROP, key.getString());};^76^77^78^79^^72^81^if  ( key.getType (  )  == Token.STRING )  { if  ( !key.isQuotedString (  )  )  { key.putProp ( Node.ORIGINALNAME_PROP, key.getString (  )  ) ; }^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P16_Remove_Block]^^76^77^78^79^^72^81^if  ( key.getType (  )  == Token.STRING )  { if  ( !key.isQuotedString (  )  )  { key.putProp ( Node.ORIGINALNAME_PROP, key.getString (  )  ) ; }^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P13_Insert_Block]^if  (  ( propNode.getType (  )  )  ==  ( STRING )  )  {     n.putProp ( Node.ORIGINALNAME_PROP, propNode.getString (  )  ) ; }^76^^^^^72^81^[Delete]^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P13_Insert_Block]^if  ( ! ( key.isQuotedString (  )  )  )  {     key.putProp ( Node.ORIGINALNAME_PROP, key.getString (  )  ) ; }^76^^^^^72^81^[Delete]^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P7_Replace_Invocation]^if  ( !key.putProp (  )  )  {^77^^^^^72^81^if  ( !key.isQuotedString (  )  )  {^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P15_Unwrap_Block]^key.putProp(Node.ORIGINALNAME_PROP, key.getString());^77^78^79^^^72^81^if  ( !key.isQuotedString (  )  )  { key.putProp ( Node.ORIGINALNAME_PROP, key.getString (  )  ) ; }^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P16_Remove_Block]^^77^78^79^^^72^81^if  ( !key.isQuotedString (  )  )  { key.putProp ( Node.ORIGINALNAME_PROP, key.getString (  )  ) ; }^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P13_Insert_Block]^if  (  ( propNode.getType (  )  )  ==  ( STRING )  )  {     n.putProp ( Node.ORIGINALNAME_PROP, propNode.getString (  )  ) ; }^77^^^^^72^81^[Delete]^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P13_Insert_Block]^if  (  ( key.getType (  )  )  ==  ( STRING )  )  {     if  ( ! ( key.isQuotedString (  )  )  )  {         key.putProp ( Node.ORIGINALNAME_PROP, key.getString (  )  ) ;     } }^77^^^^^72^81^[Delete]^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P5_Replace_Variable]^key.putProp ( Node.ORIGINALNAME_PROP, propNode.getString (  )  ) ;^78^^^^^72^81^key.putProp ( Node.ORIGINALNAME_PROP, key.getString (  )  ) ;^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P7_Replace_Invocation]^key.putProp ( Node.ORIGINALNAME_PROP, key.putProp (  )  ) ;^78^^^^^72^81^key.putProp ( Node.ORIGINALNAME_PROP, key.getString (  )  ) ;^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P7_Replace_Invocation]^key.putProp ( Node.ORIGINALNAME_PROP, key .isQuotedString (  )   ) ;^78^^^^^72^81^key.putProp ( Node.ORIGINALNAME_PROP, key.getString (  )  ) ;^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P14_Delete_Statement]^^78^^^^^72^81^key.putProp ( Node.ORIGINALNAME_PROP, key.getString (  )  ) ;^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P13_Insert_Block]^if  ( ! ( key.isQuotedString (  )  )  )  {     key.putProp ( Node.ORIGINALNAME_PROP, key.getString (  )  ) ; }^78^^^^^72^81^[Delete]^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P7_Replace_Invocation]^key .putProp ( sourceFile )  ;^78^^^^^72^81^key.putProp ( Node.ORIGINALNAME_PROP, key.getString (  )  ) ;^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P7_Replace_Invocation]^if  ( key .getString (  )   == Token.STRING )  {^76^^^^^72^81^if  ( key.getType (  )  == Token.STRING )  {^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P7_Replace_Invocation]^if  ( !key .getString (  )   )  {^77^^^^^72^81^if  ( !key.isQuotedString (  )  )  {^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P8_Replace_Mix]^key.putProp ( Node.ORIGINALNAME_PROP, propNode.putProp (  )  ) ;^78^^^^^72^81^key.putProp ( Node.ORIGINALNAME_PROP, key.getString (  )  ) ;^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P5_Replace_Variable]^key = propNode.getNext (  ) .getNext (  )  )  {^73^^^^^58^88^key = key.getNext (  ) .getNext (  )  )  {^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P7_Replace_Invocation]^key = key.putProp (  ) .getNext (  )  )  {^73^^^^^58^88^key = key.getNext (  ) .getNext (  )  )  {^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P5_Replace_Variable]^Node propNode = parent.getFirstChild (  ) .getNext (  ) ;^60^^^^^45^75^Node propNode = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P7_Replace_Invocation]^Node propNode = n.putProp (  ) .getNext (  ) ;^60^^^^^45^75^Node propNode = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P7_Replace_Invocation]^Node propNode = n .getString (  )  .getNext (  ) ;^60^^^^^45^75^Node propNode = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P11_Insert_Donor_Statement]^Node propNode = n.getFirstChild (  ) .getNext (  ) ;for  ( Node key = n.getFirstChild (  ) ; key != null;^72^^^^^57^87^for  ( Node key = n.getFirstChild (  ) ; key != null;^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P5_Replace_Variable]^switch  ( propNode.getType (  )  )  {^58^^^^^43^73^switch  ( n.getType (  )  )  {^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P7_Replace_Invocation]^switch  ( n.putProp (  )  )  {^58^^^^^43^73^switch  ( n.getType (  )  )  {^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P7_Replace_Invocation]^switch  ( n .getString (  )   )  {^58^^^^^43^73^switch  ( n.getType (  )  )  {^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P8_Replace_Mix]^switch  ( propNode.putProp (  )  )  {^58^^^^^43^73^switch  ( n.getType (  )  )  {^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P14_Delete_Statement]^^58^59^60^^^43^73^switch  ( n.getType (  )  )  { case Token.GETPROP: Node propNode = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P5_Replace_Variable]^Node propNode = propNode.getFirstChild (  ) .getNext (  ) ;^60^^^^^45^75^Node propNode = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P8_Replace_Mix]^Node propNode = propNode .getString (  )  .getNext (  ) ;^60^^^^^45^75^Node propNode = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P14_Delete_Statement]^^60^^^^^45^75^Node propNode = n.getFirstChild (  ) .getNext (  ) ;^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P7_Replace_Invocation]^n .putProp ( sourceFile )  ;^62^^^^^47^77^n.putProp ( Node.ORIGINALNAME_PROP, propNode.getString (  )  ) ;^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P5_Replace_Variable]^n.putProp ( Node.ORIGINALNAME_PROP, propNode.getString (  )  ) ;^68^^^^^53^83^n.putProp ( Node.ORIGINALNAME_PROP, n.getString (  )  ) ;^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P7_Replace_Invocation]^n.putProp ( Node.ORIGINALNAME_PROP, n.putProp (  )  ) ;^68^^^^^53^83^n.putProp ( Node.ORIGINALNAME_PROP, n.getString (  )  ) ;^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P14_Delete_Statement]^^68^69^^^^53^83^n.putProp ( Node.ORIGINALNAME_PROP, n.getString (  )  ) ; break;^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P7_Replace_Invocation]^n.putProp ( Node.ORIGINALNAME_PROP, n .isQuotedString (  )   ) ;^68^^^^^53^83^n.putProp ( Node.ORIGINALNAME_PROP, n.getString (  )  ) ;^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P14_Delete_Statement]^^68^^^^^53^83^n.putProp ( Node.ORIGINALNAME_PROP, n.getString (  )  ) ;^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P8_Replace_Mix]^for  ( Node key = propNode.putProp (  ) ; key != null;^72^^^^^57^87^for  ( Node key = n.getFirstChild (  ) ; key != null;^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
[P7_Replace_Invocation]^key .putProp ( sourceFile )  ;^78^^^^^63^93^key.putProp ( Node.ORIGINALNAME_PROP, key.getString (  )  ) ;^[CLASS] SourceInformationAnnotator  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] String  sourceFile  boolean  NodeTraversal  t  Node  key  n  parent  propNode  
