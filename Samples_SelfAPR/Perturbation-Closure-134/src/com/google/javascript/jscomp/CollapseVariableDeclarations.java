[P8_Replace_Mix]^private  AbstractCompiler compiler;^66^^^^^61^71^private final AbstractCompiler compiler;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [VARIABLES] 
[P8_Replace_Mix]^Node parent;^77^^^^^72^82^final Node parent;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [VARIABLES] 
[P8_Replace_Mix]^private final List<Collapse> collapses  = null ;^88^^^^^83^93^private final List<Collapse> collapses = Lists.newArrayList (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [VARIABLES] 
[P8_Replace_Mix]^private final Set<Node> nodesToCollapse  = null ;^95^^^^^90^100^private final Set<Node> nodesToCollapse = Sets.newHashSet (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [VARIABLES] 
[P5_Replace_Variable]^this.firstVarNode = parent;^80^^^^^79^82^this.firstVarNode = firstVarNode;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] <init> [RETURN_TYPE] Node)   Node firstVarNode Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  firstVarNode  parent  
[P5_Replace_Variable]^this.parent = firstVarNode;^81^^^^^79^82^this.parent = parent;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] <init> [RETURN_TYPE] Node)   Node firstVarNode Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  firstVarNode  parent  
[P11_Insert_Donor_Statement]^parent = next;this.parent = parent;^81^^^^^79^82^this.parent = parent;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] <init> [RETURN_TYPE] Node)   Node firstVarNode Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  firstVarNode  parent  
[P8_Replace_Mix]^this.compiler =  null;^98^^^^^97^99^this.compiler = compiler;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  firstVarNode  parent  
[P7_Replace_Invocation]^collapses.isEmpty (  ) ;^102^^^^^101^112^collapses.clear (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  externs  firstVarNode  parent  root  
[P14_Delete_Statement]^^102^^^^^101^112^collapses.clear (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  externs  firstVarNode  parent  root  
[P11_Insert_Donor_Statement]^nodesToCollapse.clear (  ) ;collapses.clear (  ) ;^102^^^^^101^112^collapses.clear (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  externs  firstVarNode  parent  root  
[P7_Replace_Invocation]^nodesToCollapse .isEmpty (  )  ;^103^^^^^101^112^nodesToCollapse.clear (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  externs  firstVarNode  parent  root  
[P14_Delete_Statement]^^103^^^^^101^112^nodesToCollapse.clear (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  externs  firstVarNode  parent  root  
[P4_Replace_Constructor]^new GatherCollapses (  )  , new GatherCollapses (  )  )  ) ;^107^^^^^101^112^new ExploitAssigns (  ) , new GatherCollapses (  )  )  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  externs  firstVarNode  parent  root  
[P4_Replace_Constructor]^ExploitAssigns (  ) ,  new Collapse ( varNode, parent )   )  ) ;^107^^^^^101^112^new ExploitAssigns (  ) , new GatherCollapses (  )  )  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  externs  firstVarNode  parent  root  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, parent, new CombinedCompilerPass ( compiler, new ExploitAssigns (  ) , new GatherCollapses (  )  )  ) ;^105^106^107^^^101^112^NodeTraversal.traverse ( compiler, root, new CombinedCompilerPass ( compiler, new ExploitAssigns (  ) , new GatherCollapses (  )  )  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  externs  firstVarNode  parent  root  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler,  new CombinedCompilerPass ( compiler, new ExploitAssigns (  ) , new GatherCollapses (  )  )  ) ;^105^106^107^^^101^112^NodeTraversal.traverse ( compiler, root, new CombinedCompilerPass ( compiler, new ExploitAssigns (  ) , new GatherCollapses (  )  )  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  externs  firstVarNode  parent  root  
[P5_Replace_Variable]^NodeTraversal.traverse (  root, new CombinedCompilerPass ( compiler, new ExploitAssigns (  ) , new GatherCollapses (  )  )  ) ;^105^106^107^^^101^112^NodeTraversal.traverse ( compiler, root, new CombinedCompilerPass ( compiler, new ExploitAssigns (  ) , new GatherCollapses (  )  )  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  externs  firstVarNode  parent  root  
[P5_Replace_Variable]^NodeTraversal.traverse ( root, compiler, new CombinedCompilerPass ( compiler, new ExploitAssigns (  ) , new GatherCollapses (  )  )  ) ;^105^106^107^^^101^112^NodeTraversal.traverse ( compiler, root, new CombinedCompilerPass ( compiler, new ExploitAssigns (  ) , new GatherCollapses (  )  )  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  externs  firstVarNode  parent  root  
[P7_Replace_Invocation]^NodeTraversal .getCompiler (  )   )  ) ;^105^106^107^^^101^112^NodeTraversal.traverse ( compiler, root, new CombinedCompilerPass ( compiler, new ExploitAssigns (  ) , new GatherCollapses (  )  )  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  externs  firstVarNode  parent  root  
[P14_Delete_Statement]^^105^106^107^^^101^112^NodeTraversal.traverse ( compiler, root, new CombinedCompilerPass ( compiler, new ExploitAssigns (  ) , new GatherCollapses (  )  )  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  externs  firstVarNode  parent  root  
[P7_Replace_Invocation]^if  ( !collapses.clear (  )  )  {^108^^^^^101^112^if  ( !collapses.isEmpty (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  externs  firstVarNode  parent  root  
[P15_Unwrap_Block]^applyCollapses(); compiler.reportCodeChange();^108^109^110^111^^101^112^if  ( !collapses.isEmpty (  )  )  { applyCollapses (  ) ; compiler.reportCodeChange (  ) ; }^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  externs  firstVarNode  parent  root  
[P16_Remove_Block]^^108^109^110^111^^101^112^if  ( !collapses.isEmpty (  )  )  { applyCollapses (  ) ; compiler.reportCodeChange (  ) ; }^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  externs  firstVarNode  parent  root  
[P14_Delete_Statement]^^109^110^^^^101^112^applyCollapses (  ) ; compiler.reportCodeChange (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  externs  firstVarNode  parent  root  
[P11_Insert_Donor_Statement]^nodesToCollapse.add ( n ) ;applyCollapses (  ) ;^109^^^^^101^112^applyCollapses (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  externs  firstVarNode  parent  root  
[P11_Insert_Donor_Statement]^nodesToCollapse.clear (  ) ;applyCollapses (  ) ;^109^^^^^101^112^applyCollapses (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  externs  firstVarNode  parent  root  
[P14_Delete_Statement]^^110^^^^^101^112^compiler.reportCodeChange (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  externs  firstVarNode  parent  root  
[P11_Insert_Donor_Statement]^t.getCompiler (  ) .reportCodeChange (  ) ;compiler.reportCodeChange (  ) ;^110^^^^^101^112^compiler.reportCodeChange (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  externs  firstVarNode  parent  root  
[P14_Delete_Statement]^^109^^^^^101^112^applyCollapses (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  externs  firstVarNode  parent  root  
[P5_Replace_Variable]^if  ( !NodeUtil.isExprAssign ( root )  )  {^117^^^^^116^122^if  ( !NodeUtil.isExprAssign ( expr )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  expr  exprParent  externs  firstVarNode  parent  root  
[P15_Unwrap_Block]^return ;^117^118^119^^^116^122^if  ( !NodeUtil.isExprAssign ( expr )  )  { return; }^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  expr  exprParent  externs  firstVarNode  parent  root  
[P16_Remove_Block]^^117^118^119^^^116^122^if  ( !NodeUtil.isExprAssign ( expr )  )  { return; }^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  expr  exprParent  externs  firstVarNode  parent  root  
[P13_Insert_Block]^if  ( ! ( isExprAssign ( expr )  )  )  {     return ; }^117^^^^^116^122^[Delete]^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  expr  exprParent  externs  firstVarNode  parent  root  
[P5_Replace_Variable]^collapseAssign ( t, root.getFirstChild (  ) , expr, exprParent ) ;^121^^^^^116^122^collapseAssign ( t, expr.getFirstChild (  ) , expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  expr  exprParent  externs  firstVarNode  parent  root  
[P5_Replace_Variable]^collapseAssign ( t, expr.getFirstChild (  ) , expr, root ) ;^121^^^^^116^122^collapseAssign ( t, expr.getFirstChild (  ) , expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  expr  exprParent  externs  firstVarNode  parent  root  
[P5_Replace_Variable]^collapseAssign (  expr.getFirstChild (  ) , expr, exprParent ) ;^121^^^^^116^122^collapseAssign ( t, expr.getFirstChild (  ) , expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  expr  exprParent  externs  firstVarNode  parent  root  
[P5_Replace_Variable]^collapseAssign ( t, expr.getFirstChild (  ) ,  exprParent ) ;^121^^^^^116^122^collapseAssign ( t, expr.getFirstChild (  ) , expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  expr  exprParent  externs  firstVarNode  parent  root  
[P5_Replace_Variable]^collapseAssign ( t, expr.getFirstChild (  ) , expr ) ;^121^^^^^116^122^collapseAssign ( t, expr.getFirstChild (  ) , expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  expr  exprParent  externs  firstVarNode  parent  root  
[P5_Replace_Variable]^collapseAssign ( exprParent, expr.getFirstChild (  ) , expr, t ) ;^121^^^^^116^122^collapseAssign ( t, expr.getFirstChild (  ) , expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  expr  exprParent  externs  firstVarNode  parent  root  
[P5_Replace_Variable]^collapseAssign ( t, exprParent.getFirstChild (  ) , expr, expr ) ;^121^^^^^116^122^collapseAssign ( t, expr.getFirstChild (  ) , expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  expr  exprParent  externs  firstVarNode  parent  root  
[P7_Replace_Invocation]^collapseAssign ( t, expr.removeChild (  ) , expr, exprParent ) ;^121^^^^^116^122^collapseAssign ( t, expr.getFirstChild (  ) , expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  expr  exprParent  externs  firstVarNode  parent  root  
[P7_Replace_Invocation]^collapseAssign ( t, expr .removeChild ( externs )  , expr, exprParent ) ;^121^^^^^116^122^collapseAssign ( t, expr.getFirstChild (  ) , expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  expr  exprParent  externs  firstVarNode  parent  root  
[P14_Delete_Statement]^^121^^^^^116^122^collapseAssign ( t, expr.getFirstChild (  ) , expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  expr  exprParent  externs  firstVarNode  parent  root  
[P11_Insert_Donor_Statement]^collapseAssign ( t, rightValue, expr, exprParent ) ;collapseAssign ( t, expr.getFirstChild (  ) , expr, exprParent ) ;^121^^^^^116^122^collapseAssign ( t, expr.getFirstChild (  ) , expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  expr  exprParent  externs  firstVarNode  parent  root  
[P11_Insert_Donor_Statement]^Node assign = expr.getFirstChild (  ) ;collapseAssign ( t, expr.getFirstChild (  ) , expr, exprParent ) ;^121^^^^^116^122^collapseAssign ( t, expr.getFirstChild (  ) , expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  expr  exprParent  externs  firstVarNode  parent  root  
[P7_Replace_Invocation]^collapseAssign ( t, expr .removeChild ( exprParent )  , expr, exprParent ) ;^121^^^^^116^122^collapseAssign ( t, expr.getFirstChild (  ) , expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  expr  exprParent  externs  firstVarNode  parent  root  
[P8_Replace_Mix]^collapseAssign ( t, parent.getFirstChild (  ) , expr, exprParent ) ;^121^^^^^116^122^collapseAssign ( t, expr.getFirstChild (  ) , expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  expr  exprParent  externs  firstVarNode  parent  root  
[P5_Replace_Variable]^Node leftValue = root.getFirstChild (  ) ;^129^^^^^127^141^Node leftValue = assign.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P7_Replace_Invocation]^Node leftValue = assign.removeChild (  ) ;^129^^^^^127^141^Node leftValue = assign.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P7_Replace_Invocation]^Node leftValue = assign .removeChild ( root )  ;^129^^^^^127^141^Node leftValue = assign.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P8_Replace_Mix]^Node leftValue = root.removeChild (  ) ;^129^^^^^127^141^Node leftValue = assign.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P11_Insert_Donor_Statement]^Node leftSide = next.getFirstChild (  ) ;Node leftValue = assign.getFirstChild (  ) ;^129^^^^^127^141^Node leftValue = assign.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P11_Insert_Donor_Statement]^Node name = node.getFirstChild (  ) ;Node leftValue = assign.getFirstChild (  ) ;^129^^^^^127^141^Node leftValue = assign.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P11_Insert_Donor_Statement]^Node assign = expr.getFirstChild (  ) ;Node leftValue = assign.getFirstChild (  ) ;^129^^^^^127^141^Node leftValue = assign.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P5_Replace_Variable]^Node leftValue = rightValue.getFirstChild (  ) ;^129^^^^^127^141^Node leftValue = assign.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P7_Replace_Invocation]^Node leftValue = assign .removeChild ( expr )  ;^129^^^^^127^141^Node leftValue = assign.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P14_Delete_Statement]^^129^130^^^^127^141^Node leftValue = assign.getFirstChild (  ) ; Node rightValue = leftValue.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P11_Insert_Donor_Statement]^parent = next.getFirstChild (  ) ;Node leftValue = assign.getFirstChild (  ) ;^129^^^^^127^141^Node leftValue = assign.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P11_Insert_Donor_Statement]^next = parent.getFirstChild (  ) ;Node leftValue = assign.getFirstChild (  ) ;^129^^^^^127^141^Node leftValue = assign.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P11_Insert_Donor_Statement]^next = next.getFirstChild (  ) ;Node leftValue = assign.getFirstChild (  ) ;^129^^^^^127^141^Node leftValue = assign.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P5_Replace_Variable]^Node rightValue = parent.getNext (  ) ;^130^^^^^127^141^Node rightValue = leftValue.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P7_Replace_Invocation]^Node rightValue = leftValue.removeChild (  ) ;^130^^^^^127^141^Node rightValue = leftValue.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P8_Replace_Mix]^Node rightValue = firstVarNode.getNext (  ) ;^130^^^^^127^141^Node rightValue = leftValue.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P11_Insert_Donor_Statement]^Node next = expr.getNext (  ) ;Node rightValue = leftValue.getNext (  ) ;^130^^^^^127^141^Node rightValue = leftValue.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P14_Delete_Statement]^^130^^^^^127^141^Node rightValue = leftValue.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P11_Insert_Donor_Statement]^next = leftSide.getNext (  ) ;Node rightValue = leftValue.getNext (  ) ;^130^^^^^127^141^Node rightValue = leftValue.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P2_Replace_Operator]^if  ( isCollapsibleValue ( leftValue, true )  || collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^131^132^^^^127^141^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P3_Replace_Literal]^if  ( isCollapsibleValue ( leftValue, false )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^131^132^^^^127^141^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P5_Replace_Variable]^if  ( isCollapsibleValue ( root, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^131^132^^^^127^141^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P5_Replace_Variable]^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( parent, exprParent, leftValue )  )  {^131^132^^^^127^141^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P5_Replace_Variable]^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, leftValue, leftValue )  )  {^131^132^^^^127^141^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P5_Replace_Variable]^if  ( isCollapsibleValue (  true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^131^132^^^^127^141^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P5_Replace_Variable]^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo (  exprParent, leftValue )  )  {^131^132^^^^127^141^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P5_Replace_Variable]^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr,  leftValue )  )  {^131^132^^^^127^141^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P5_Replace_Variable]^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParen leftValue )  )  {^131^132^^^^127^141^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P5_Replace_Variable]^if  ( isCollapsibleValue ( exprParent, true )  && collapseAssignEqualTo ( expr, leftValue, leftValue )  )  {^131^132^^^^127^141^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P5_Replace_Variable]^if  ( isCollapsibleValue ( expr, true )  && collapseAssignEqualTo ( leftValue, exprParent, leftValue )  )  {^131^132^^^^127^141^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P5_Replace_Variable]^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( exprParent, expr, leftValue )  )  {^131^132^^^^127^141^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P5_Replace_Variable]^if  ( isCollapsibleValue ( leftValue, exprrue )  && collapseAssignEqualTo ( t, exprParent, leftValue )  )  {^131^132^^^^127^141^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P6_Replace_Expression]^if  ( isCollapsibleValue ( leftValue, true )  ) {^131^132^^^^127^141^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P6_Replace_Expression]^if  (  collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^131^132^^^^127^141^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P6_Replace_Expression]^if  ( isCollapsibleValue(rightValue, false) && collapseAssignEqualTo(expr, exprParent, rightValue) )  {^131^132^^^^127^141^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P6_Replace_Expression]^if  ( rightValue.getType() == ASSIGN )  {^131^132^^^^127^141^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P7_Replace_Invocation]^if  ( isCollapsibleValue ( leftValue, true )  && visit ( expr, exprParent, leftValue )  )  {^131^132^^^^127^141^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P8_Replace_Mix]^if  ( isCollapsibleValue ( leftValue, false )  ) {^131^132^^^^127^141^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P13_Insert_Block]^if  (  ( isCollapsibleValue ( rightValue, false )  )  &&  ( collapseAssignEqualTo ( expr, exprParent, rightValue )  )  )  {     t.getCompiler (  ) .reportCodeChange (  ) ; }else     if  (  ( rightValue.getType (  )  )  ==  ( ASSIGN )  )  {         collapseAssign ( t, rightValue, expr, exprParent ) ;     }^131^^^^^127^141^[Delete]^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P2_Replace_Operator]^} else if  ( isCollapsibleValue ( rightValue, false )  || collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^134^135^^^^127^141^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P3_Replace_Literal]^} else if  ( isCollapsibleValue ( rightValue, true )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^134^135^^^^127^141^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P5_Replace_Variable]^} else if  ( isCollapsibleValue ( leftValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^134^135^^^^127^141^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P5_Replace_Variable]^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( leftValue, exprParent, rightValue )  )  {^134^135^^^^127^141^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P5_Replace_Variable]^} else if  ( isCollapsibleValue (  false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^134^135^^^^127^141^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P5_Replace_Variable]^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo (  exprParent, rightValue )  )  {^134^135^^^^127^141^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P5_Replace_Variable]^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr,  rightValue )  )  {^134^135^^^^127^141^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P5_Replace_Variable]^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParen rightValue )  )  {^134^135^^^^127^141^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P5_Replace_Variable]^} else if  ( isCollapsibleValue ( exprParent, false )  && collapseAssignEqualTo ( expr, rightValue, rightValue )  )  {^134^135^^^^127^141^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P5_Replace_Variable]^} else if  ( isCollapsibleValue ( expr, false )  && collapseAssignEqualTo ( rightValue, exprParent, rightValue )  )  {^134^135^^^^127^141^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P6_Replace_Expression]^} else if  ( isCollapsibleValue ( rightValue, false )  ) {^134^135^^^^127^141^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P6_Replace_Expression]^} else if  (  collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^134^135^^^^127^141^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P6_Replace_Expression]^} else if  ( rightValue.getType() == ASSIGN )  {^134^135^^^^127^141^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P6_Replace_Expression]^} else {^134^135^^^^127^141^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P7_Replace_Invocation]^} else if  ( isCollapsibleValue ( rightValue, false )  && visit ( expr, exprParent, rightValue )  )  {^134^135^^^^127^141^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P8_Replace_Mix]^}  if  (  collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^134^135^^^^127^141^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P2_Replace_Operator]^} else if  ( rightValue.getType (  )  <= Token.ASSIGN )  {^137^^^^^127^141^} else if  ( rightValue.getType (  )  == Token.ASSIGN )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P5_Replace_Variable]^} else if  ( root.getType (  )  == Token.ASSIGN )  {^137^^^^^127^141^} else if  ( rightValue.getType (  )  == Token.ASSIGN )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P6_Replace_Expression]^} else {^137^^^^^127^141^} else if  ( rightValue.getType (  )  == Token.ASSIGN )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P7_Replace_Invocation]^} else if  ( rightValue.removeChild (  )  == Token.ASSIGN )  {^137^^^^^127^141^} else if  ( rightValue.getType (  )  == Token.ASSIGN )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P8_Replace_Mix]^}  if  ( root.getType (  )  == Token.ASSIGN )  {^137^^^^^127^141^} else if  ( rightValue.getType (  )  == Token.ASSIGN )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P15_Unwrap_Block]^collapseAssign(t, rightValue, expr, exprParent);^137^138^139^140^^127^141^} else if  ( rightValue.getType (  )  == Token.ASSIGN )  {  collapseAssign ( t, rightValue, expr, exprParent ) ; }^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P16_Remove_Block]^^137^138^139^140^^127^141^} else if  ( rightValue.getType (  )  == Token.ASSIGN )  {  collapseAssign ( t, rightValue, expr, exprParent ) ; }^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P5_Replace_Variable]^collapseAssign ( t, parent, expr, exprParent ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P5_Replace_Variable]^collapseAssign ( t, rightValue, leftValue, exprParent ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P5_Replace_Variable]^collapseAssign ( t, rightValue, expr, parent ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P5_Replace_Variable]^collapseAssign (  rightValue, expr, exprParent ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P5_Replace_Variable]^collapseAssign ( t,  expr, exprParent ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P5_Replace_Variable]^collapseAssign ( t, rightValue,  exprParent ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P5_Replace_Variable]^collapseAssign ( t, rightValue, expr ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P5_Replace_Variable]^collapseAssign ( expr, rightValue, t, exprParent ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P5_Replace_Variable]^collapseAssign ( t, exprParent, expr, rightValue ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P5_Replace_Variable]^collapseAssign ( t, expr, rightValue, exprParent ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P5_Replace_Variable]^collapseAssign ( exprParent, rightValue, expr, t ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P8_Replace_Mix]^collapseAssign ( t, rightValue, expr, leftValue ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P14_Delete_Statement]^^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P11_Insert_Donor_Statement]^collapseAssign ( t, expr.getFirstChild (  ) , expr, exprParent ) ;collapseAssign ( t, rightValue, expr, exprParent ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P5_Replace_Variable]^} else if  ( parent.getType (  )  == Token.ASSIGN )  {^137^^^^^127^141^} else if  ( rightValue.getType (  )  == Token.ASSIGN )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P5_Replace_Variable]^collapseAssign ( t, root, expr, exprParent ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P5_Replace_Variable]^collapseAssign ( t, rightValue, rightValue, exprParent ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P5_Replace_Variable]^collapseAssign ( rightValue, t, expr, exprParent ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P5_Replace_Variable]^collapseAssign ( t, rightValue, exprParent, expr ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P14_Delete_Statement]^^136^^^^^127^141^t.getCompiler (  ) .reportCodeChange (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P11_Insert_Donor_Statement]^compiler.reportCodeChange (  ) ;t.getCompiler (  ) .reportCodeChange (  ) ;^136^^^^^127^141^t.getCompiler (  ) .reportCodeChange (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P7_Replace_Invocation]^t .traverse ( compiler , rightValue , null )  .reportCodeChange (  ) ;^136^^^^^127^141^t.getCompiler (  ) .reportCodeChange (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P2_Replace_Operator]^} else if  ( rightValue.getType (  )  != Token.ASSIGN )  {^137^^^^^127^141^} else if  ( rightValue.getType (  )  == Token.ASSIGN )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P7_Replace_Invocation]^} else if  ( rightValue .getString (  )   == Token.ASSIGN )  {^137^^^^^127^141^} else if  ( rightValue.getType (  )  == Token.ASSIGN )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P8_Replace_Mix]^}  if  ( root.removeChild (  )  == Token.ASSIGN )  {^137^^^^^127^141^} else if  ( rightValue.getType (  )  == Token.ASSIGN )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P5_Replace_Variable]^collapseAssign ( t, rightValue, root, exprParent ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P5_Replace_Variable]^collapseAssign ( t, rightValue, expr, root ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P8_Replace_Mix]^collapseAssign ( t, rightValue, parent, exprParent ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P5_Replace_Variable]^} else if  ( isCollapsibleValue ( root, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^134^135^^^^127^141^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P5_Replace_Variable]^collapseAssignEqualTo ( leftValue, exprParent, rightValue )  )  {^135^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P5_Replace_Variable]^collapseAssignEqualTo ( expr, parent, rightValue )  )  {^135^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P5_Replace_Variable]^collapseAssignEqualTo ( expr, exprParent, parent )  )  {^135^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P5_Replace_Variable]^collapseAssignEqualTo (  exprParent, rightValue )  )  {^135^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P5_Replace_Variable]^collapseAssignEqualTo ( expr,  rightValue )  )  {^135^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P5_Replace_Variable]^collapseAssignEqualTo ( expr, exprParent )  )  {^135^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P5_Replace_Variable]^collapseAssignEqualTo ( exprParent, expr, rightValue )  )  {^135^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P5_Replace_Variable]^collapseAssignEqualTo ( expr, rightValue, exprParent )  )  {^135^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P5_Replace_Variable]^collapseAssignEqualTo ( rightValue, exprParent, expr )  )  {^135^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P7_Replace_Invocation]^visit ( expr, exprParent, rightValue )  )  {^135^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P8_Replace_Mix]^collapseAssignEqualTo ( root, exprParent, rightValue )  )  {^135^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P14_Delete_Statement]^^135^136^^^^127^141^collapseAssignEqualTo ( expr, exprParent, rightValue )  )  { t.getCompiler (  ) .reportCodeChange (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P8_Replace_Mix]^} else if  ( firstVarNode.getType (  )  == Token.ASSIGN )  {^137^^^^^127^141^} else if  ( rightValue.getType (  )  == Token.ASSIGN )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P14_Delete_Statement]^^133^^^^^127^141^t.getCompiler (  ) .reportCodeChange (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P11_Insert_Donor_Statement]^compiler.reportCodeChange (  ) ;t.getCompiler (  ) .reportCodeChange (  ) ;^133^^^^^127^141^t.getCompiler (  ) .reportCodeChange (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P5_Replace_Variable]^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, leftValue, rightValue )  )  {^134^135^^^^127^141^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P2_Replace_Operator]^} else if  ( rightValue.getType (  )  >= Token.ASSIGN )  {^137^^^^^127^141^} else if  ( rightValue.getType (  )  == Token.ASSIGN )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P5_Replace_Variable]^collapseAssign ( t, leftValue, expr, exprParent ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P2_Replace_Operator]^} else if  ( rightValue.getType (  )  > Token.ASSIGN )  {^137^^^^^127^141^} else if  ( rightValue.getType (  )  == Token.ASSIGN )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P5_Replace_Variable]^} else if  ( leftValue.getType (  )  == Token.ASSIGN )  {^137^^^^^127^141^} else if  ( rightValue.getType (  )  == Token.ASSIGN )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P8_Replace_Mix]^}  if  ( firstVarNode.getType (  )  == Token.ASSIGN )  {^137^^^^^127^141^} else if  ( rightValue.getType (  )  == Token.ASSIGN )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P5_Replace_Variable]^if  ( isCollapsibleValue ( firstVarNode, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^131^132^^^^127^141^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P5_Replace_Variable]^collapseAssignEqualTo ( root, exprParent, leftValue )  )  {^132^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P5_Replace_Variable]^collapseAssignEqualTo ( expr, rightValue, leftValue )  )  {^132^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P5_Replace_Variable]^collapseAssignEqualTo (  exprParent, leftValue )  )  {^132^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P5_Replace_Variable]^collapseAssignEqualTo ( expr,  leftValue )  )  {^132^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P5_Replace_Variable]^collapseAssignEqualTo ( expr, exprParent )  )  {^132^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P5_Replace_Variable]^collapseAssignEqualTo ( leftValue, exprParent, expr )  )  {^132^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P5_Replace_Variable]^collapseAssignEqualTo ( exprParent, expr, leftValue )  )  {^132^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P7_Replace_Invocation]^visit ( expr, exprParent, leftValue )  )  {^132^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P8_Replace_Mix]^collapseAssignEqualTo ( expr, root, leftValue )  )  {^132^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P14_Delete_Statement]^^132^133^^^^127^141^collapseAssignEqualTo ( expr, exprParent, leftValue )  )  { t.getCompiler (  ) .reportCodeChange (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P5_Replace_Variable]^} else if  ( isCollapsibleValue ( firstVarNode, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^134^135^^^^127^141^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P5_Replace_Variable]^collapseAssignEqualTo ( parent, exprParent, rightValue )  )  {^135^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P5_Replace_Variable]^collapseAssignEqualTo ( expr, root, rightValue )  )  {^135^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P8_Replace_Mix]^} else if  ( firstVarNode.removeChild (  )  == Token.ASSIGN )  {^137^^^^^127^141^} else if  ( rightValue.getType (  )  == Token.ASSIGN )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  NodeTraversal  t  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  
[P2_Replace_Operator]^return !isLValue && value.getFirstChild (  ) .getType (  )  == Token.THIS;^164^^^^^157^176^return !isLValue || value.getFirstChild (  ) .getType (  )  == Token.THIS;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isCollapsibleValue [RETURN_TYPE] boolean   Node value boolean isLValue [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  isLValue  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  value  
[P2_Replace_Operator]^return !isLValue || value.getFirstChild (  ) .getType (  )  >= Token.THIS;^164^^^^^157^176^return !isLValue || value.getFirstChild (  ) .getType (  )  == Token.THIS;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isCollapsibleValue [RETURN_TYPE] boolean   Node value boolean isLValue [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  isLValue  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  value  
[P5_Replace_Variable]^return !isLValue || rightValue.getFirstChild (  ) .getType (  )  == Token.THIS;^164^^^^^157^176^return !isLValue || value.getFirstChild (  ) .getType (  )  == Token.THIS;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isCollapsibleValue [RETURN_TYPE] boolean   Node value boolean isLValue [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  isLValue  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  value  
[P7_Replace_Invocation]^return !isLValue || value.removeChild (  ) .getType (  )  == Token.THIS;^164^^^^^157^176^return !isLValue || value.getFirstChild (  ) .getType (  )  == Token.THIS;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isCollapsibleValue [RETURN_TYPE] boolean   Node value boolean isLValue [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  isLValue  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  value  
[P3_Replace_Literal]^return false;^172^^^^^157^176^return true;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isCollapsibleValue [RETURN_TYPE] boolean   Node value boolean isLValue [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  isLValue  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  value  
[P7_Replace_Invocation]^switch  ( value.removeChild (  )  )  {^158^^^^^157^176^switch  ( value.getType (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isCollapsibleValue [RETURN_TYPE] boolean   Node value boolean isLValue [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  isLValue  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  value  
[P7_Replace_Invocation]^switch  ( value .getString (  )   )  {^158^^^^^157^176^switch  ( value.getType (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isCollapsibleValue [RETURN_TYPE] boolean   Node value boolean isLValue [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  isLValue  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  value  
[P8_Replace_Mix]^switch  ( root.removeChild (  )  )  {^158^^^^^157^176^switch  ( value.getType (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isCollapsibleValue [RETURN_TYPE] boolean   Node value boolean isLValue [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  isLValue  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  value  
[P5_Replace_Variable]^return !isLValue || leftValue.getFirstChild (  ) .getType (  )  == Token.THIS;^164^^^^^157^176^return !isLValue || value.getFirstChild (  ) .getType (  )  == Token.THIS;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isCollapsibleValue [RETURN_TYPE] boolean   Node value boolean isLValue [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  isLValue  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  value  
[P8_Replace_Mix]^return !isLValue || root.getFirstChild (  ) .getType (  )  == Token.THIS;^164^^^^^157^176^return !isLValue || value.getFirstChild (  ) .getType (  )  == Token.THIS;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isCollapsibleValue [RETURN_TYPE] boolean   Node value boolean isLValue [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  isLValue  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  value  
[P14_Delete_Statement]^^164^^^^^157^176^return !isLValue || value.getFirstChild (  ) .getType (  )  == Token.THIS;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isCollapsibleValue [RETURN_TYPE] boolean   Node value boolean isLValue [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  isLValue  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  value  
[P7_Replace_Invocation]^return !isLValue || value .removeChild ( root )  .getType (  )  == Token.THIS;^164^^^^^157^176^return !isLValue || value.getFirstChild (  ) .getType (  )  == Token.THIS;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isCollapsibleValue [RETURN_TYPE] boolean   Node value boolean isLValue [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  isLValue  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  value  
[P3_Replace_Literal]^return true;^175^^^^^157^176^return false;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isCollapsibleValue [RETURN_TYPE] boolean   Node value boolean isLValue [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  isLValue  Node  assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  value  
[P5_Replace_Variable]^Node assign = parent.getFirstChild (  ) ;^195^^^^^180^210^Node assign = expr.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^Node assign = expr.removeChild (  ) ;^195^^^^^180^210^Node assign = expr.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^Node assign = value .removeChild ( firstVarNode )  ;^195^^^^^180^210^Node assign = expr.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^Node parent = node.getParent (  ) ;Node assign = expr.getFirstChild (  ) ;^195^^^^^180^210^Node assign = expr.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^Node leftSide = next.getFirstChild (  ) ;Node assign = expr.getFirstChild (  ) ;^195^^^^^180^210^Node assign = expr.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^Node next = expr.getNext (  ) ;Node assign = expr.getFirstChild (  ) ;^195^^^^^180^210^Node assign = expr.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^Node name = node.getFirstChild (  ) ;Node assign = expr.getFirstChild (  ) ;^195^^^^^180^210^Node assign = expr.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^Node leftValue = assign.getFirstChild (  ) ;Node assign = expr.getFirstChild (  ) ;^195^^^^^180^210^Node assign = expr.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^Node assign = rightValue.getFirstChild (  ) ;^195^^^^^180^210^Node assign = expr.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^Node assign = expr .removeChild ( parent )  ;^195^^^^^180^210^Node assign = expr.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^Node assign = next.removeChild (  ) ;^195^^^^^180^210^Node assign = expr.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P14_Delete_Statement]^^195^^^^^180^210^Node assign = expr.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^parent = next.getFirstChild (  ) ;Node assign = expr.getFirstChild (  ) ;^195^^^^^180^210^Node assign = expr.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^collapseAssign ( t, expr.getFirstChild (  ) , expr, exprParent ) ;Node assign = expr.getFirstChild (  ) ;^195^^^^^180^210^Node assign = expr.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^next = parent.getFirstChild (  ) ;Node assign = expr.getFirstChild (  ) ;^195^^^^^180^210^Node assign = expr.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^next = next.getFirstChild (  ) ;Node assign = expr.getFirstChild (  ) ;^195^^^^^180^210^Node assign = expr.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^Node parent = next;^196^^^^^181^211^Node parent = exprParent;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^Node parent = node.getParent (  ) ;Node parent = exprParent;^196^^^^^181^211^Node parent = exprParent;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^Node next = expr.removeChild (  ) ;^197^^^^^182^212^Node next = expr.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^Node next = expr .getParent (  )  ;^197^^^^^182^212^Node next = expr.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^Node parent = node.getParent (  ) ;Node next = expr.getNext (  ) ;^197^^^^^182^212^Node next = expr.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^Node leftSide = next.getFirstChild (  ) ;Node next = expr.getNext (  ) ;^197^^^^^182^212^Node next = expr.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^Node name = node.getFirstChild (  ) ;Node next = expr.getNext (  ) ;^197^^^^^182^212^Node next = expr.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^Node rightValue = leftValue.getNext (  ) ;Node next = expr.getNext (  ) ;^197^^^^^182^212^Node next = expr.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^Node assign = expr.getFirstChild (  ) ;Node next = expr.getNext (  ) ;^197^^^^^182^212^Node next = expr.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^Node next = next .getParent (  )  ;^197^^^^^182^212^Node next = expr.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P14_Delete_Statement]^^197^^^^^182^212^Node next = expr.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^n = n.getNext (  ) ;Node next = expr.getNext (  ) ;^197^^^^^182^212^Node next = expr.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^next = leftSide.getNext (  ) ;Node next = expr.getNext (  ) ;^197^^^^^182^212^Node next = expr.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P2_Replace_Operator]^while  ( next == null )  {^198^^^^^183^213^while  ( next != null )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^while  ( parent != null )  {^198^^^^^183^213^while  ( next != null )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^if  ( root.getFirstChild (  ) .hasChildren (  )  )  {^212^^^^^197^227^if  ( next.getFirstChild (  ) .hasChildren (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^if  ( next.removeChild (  ) .hasChildren (  )  )  {^212^^^^^197^227^if  ( next.getFirstChild (  ) .hasChildren (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^if  ( next .removeChild ( exprParent )  .hasChildren (  )  )  {^212^^^^^197^227^if  ( next.getFirstChild (  ) .hasChildren (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^if  ( next .removeChild ( firstVarNode )  .hasChildren (  )  )  {^212^^^^^197^227^if  ( next.getFirstChild (  ) .hasChildren (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^if  ( leftValue.getFirstChild (  ) .hasChildren (  )  )  {^212^^^^^197^227^if  ( next.getFirstChild (  ) .hasChildren (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P15_Unwrap_Block]^parent = next.getFirstChild(); next = parent.getFirstChild(); break;^212^213^214^215^216^197^227^if  ( next.getFirstChild (  ) .hasChildren (  )  )  { parent = next.getFirstChild (  ) ; next = parent.getFirstChild (  ) ; break; }^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P16_Remove_Block]^^212^213^214^215^216^197^227^if  ( next.getFirstChild (  ) .hasChildren (  )  )  { parent = next.getFirstChild (  ) ; next = parent.getFirstChild (  ) ; break; }^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^parent = rightValue.getFirstChild (  ) ;^213^^^^^198^228^parent = next.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^parent = next.removeChild (  ) ;^213^^^^^198^228^parent = next.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^parent =  value.getFirstChild (  ) ;^213^^^^^198^228^parent = next.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^next = parent.getFirstChild (  ) ;parent = next.getFirstChild (  ) ;^213^^^^^198^228^parent = next.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^next = next.getFirstChild (  ) ;parent = next.getFirstChild (  ) ;^213^^^^^198^228^parent = next.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^next = root.getFirstChild (  ) ;^214^^^^^199^229^next = parent.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^next = parent.removeChild (  ) ;^214^^^^^199^229^next = parent.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^next = parent .removeChild ( firstVarNode )  ;^214^^^^^199^229^next = parent.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^next =  value.getFirstChild (  ) ;^214^^^^^199^229^next = parent.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^parent = next.getFirstChild (  ) ;next = parent.getFirstChild (  ) ;^214^^^^^199^229^next = parent.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^next = next.getFirstChild (  ) ;next = parent.getFirstChild (  ) ;^214^^^^^199^229^next = parent.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^parent = parent.getFirstChild (  ) ;^213^^^^^198^228^parent = next.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^parent = next .removeChild ( rightValue )  ;^213^^^^^198^228^parent = next.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P14_Delete_Statement]^^213^^^^^198^228^parent = next.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^Node parent = node.getParent (  ) ;parent = next.getFirstChild (  ) ;^213^^^^^198^228^parent = next.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^Node leftSide = next.getFirstChild (  ) ;parent = next.getFirstChild (  ) ;^213^^^^^198^228^parent = next.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^Node name = node.getFirstChild (  ) ;parent = next.getFirstChild (  ) ;^213^^^^^198^228^parent = next.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^Node leftValue = assign.getFirstChild (  ) ;parent = next.getFirstChild (  ) ;^213^^^^^198^228^parent = next.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^Node assign = expr.getFirstChild (  ) ;parent = next.getFirstChild (  ) ;^213^^^^^198^228^parent = next.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^next = next.getFirstChild (  ) ;^214^^^^^199^229^next = parent.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P14_Delete_Statement]^^214^^^^^199^229^next = parent.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^Node leftSide = next.getFirstChild (  ) ;next = parent.getFirstChild (  ) ;^214^^^^^199^229^next = parent.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^Node name = node.getFirstChild (  ) ;next = parent.getFirstChild (  ) ;^214^^^^^199^229^next = parent.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^Node leftValue = assign.getFirstChild (  ) ;next = parent.getFirstChild (  ) ;^214^^^^^199^229^next = parent.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^exprParent.removeChild ( expr ) ;next = parent.getFirstChild (  ) ;^214^^^^^199^229^next = parent.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^Node assign = expr.getFirstChild (  ) ;next = parent.getFirstChild (  ) ;^214^^^^^199^229^next = parent.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^if  ( parent.isQualifiedName (  )  )  {^221^^^^^206^236^if  ( next.isQualifiedName (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^if  ( next.isEquivalentTo (  )  )  {^221^^^^^206^236^if  ( next.isQualifiedName (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^if  ( value .getQualifiedName (  )   )  {^221^^^^^206^236^if  ( next.isQualifiedName (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P2_Replace_Operator]^if  ( value.isQualifiedName (  )  || nextName.equals ( value.getQualifiedName (  )  )  )  {^223^224^^^^208^238^if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^if  ( rightValue.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^223^224^^^^208^238^if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^if  ( value.isQualifiedName (  )  && parentName.equals ( value.getQualifiedName (  )  )  )  {^223^224^^^^208^238^if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^if  ( next.isQualifiedName (  )  && valueName.equals ( value.getQualifiedName (  )  )  )  {^223^224^^^^208^238^if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P6_Replace_Expression]^if  ( value.isQualifiedName (  )  ) {^223^224^^^^208^238^if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P6_Replace_Expression]^if  (  nextName.equals ( value.getQualifiedName (  )  )  )  {^223^224^^^^208^238^if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^if  ( value.isEquivalentTo (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^223^224^^^^208^238^if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^if  ( value .getQualifiedName (  )   && nextName.equals ( value.getQualifiedName (  )  )  )  {^223^224^^^^208^238^if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^if  ( value.isQualifiedName (  )  && nextName.equals ( value.removeChild (  )  )  )  {^223^224^^^^208^238^if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^if  ( parent.isQualifiedName (  )  ) {^223^224^^^^208^238^if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^if  ( !isSafeReplacement ( value, assign )  )  {^230^^^^^223^238^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^if  ( !isSafeReplacement ( next, parent )  )  {^230^^^^^223^238^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^if  ( !isSafeReplacement (  assign )  )  {^230^^^^^223^238^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^if  ( !isSafeReplacement ( next )  )  {^230^^^^^223^238^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^if  ( !isSafeReplacement ( assign, next )  )  {^230^^^^^223^238^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^if  ( !process ( next, assign )  )  {^230^^^^^223^238^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^if  ( !isSafeReplacement ( next, value )  )  {^230^^^^^223^238^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P15_Unwrap_Block]^return false;^230^231^232^^^223^238^if  ( !isSafeReplacement ( next, assign )  )  { return false; }^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P16_Remove_Block]^^230^231^232^^^223^238^if  ( !isSafeReplacement ( next, assign )  )  { return false; }^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P13_Insert_Block]^if  ( name.equals ( node.getString (  )  )  )  {     return true; }^230^^^^^223^238^[Delete]^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P13_Insert_Block]^if  ( isNameAssignedTo ( name, c )  )  {     return true; }^230^^^^^223^238^[Delete]^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P3_Replace_Literal]^return true;^231^^^^^223^238^return false;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P3_Replace_Literal]^return false;^237^^^^^223^238^return true;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^if  ( !isSafeReplacement ( next, rightValue )  )  {^230^^^^^223^238^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P13_Insert_Block]^if  ( ! ( isSafeReplacement ( next, assign )  )  )  {     return false; }^230^^^^^223^238^[Delete]^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^exprParent.removeChild ( value ) ;^234^^^^^223^238^exprParent.removeChild ( expr ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^exprParent.replaceChild ( expr ) ;^234^^^^^223^238^exprParent.removeChild ( expr ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^exprParent.replaceChild ( root ) ;^234^^^^^223^238^exprParent.removeChild ( expr ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P14_Delete_Statement]^^234^^^^^223^238^exprParent.removeChild ( expr ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^expr.removeChild ( assign ) ;exprParent.removeChild ( expr ) ;^234^^^^^223^238^exprParent.removeChild ( expr ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^next = parent.getFirstChild (  ) ;exprParent.removeChild ( expr ) ;^234^^^^^223^238^exprParent.removeChild ( expr ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^parent.replaceChild ( next, assign ) ;exprParent.removeChild ( expr ) ;^234^^^^^223^238^exprParent.removeChild ( expr ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^expr.removeChild ( parent ) ;^235^^^^^223^238^expr.removeChild ( assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^expr.replaceChild ( assign ) ;^235^^^^^223^238^expr.removeChild ( assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P14_Delete_Statement]^^235^^^^^223^238^expr.removeChild ( assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^exprParent.removeChild ( expr ) ;expr.removeChild ( assign ) ;^235^^^^^223^238^expr.removeChild ( assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^parent.replaceChild ( next, assign ) ;expr.removeChild ( assign ) ;^235^^^^^223^238^expr.removeChild ( assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^parent.replaceChild ( rightValue, assign ) ;^236^^^^^223^238^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^parent.replaceChild ( next, value ) ;^236^^^^^223^238^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^parent.replaceChild (  assign ) ;^236^^^^^223^238^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^parent.replaceChild ( next ) ;^236^^^^^223^238^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^parent.replaceChild ( assign, next ) ;^236^^^^^223^238^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^parent .removeChild ( leftValue )  ;^236^^^^^223^238^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^parent.replaceChild ( next, rightValue ) ;^236^^^^^223^238^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P14_Delete_Statement]^^236^^^^^223^238^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^expr.removeChild ( assign ) ;parent.replaceChild ( next, assign ) ;^236^^^^^223^238^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^exprParent.removeChild ( expr ) ;parent.replaceChild ( next, assign ) ;^236^^^^^223^238^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^if  ( !isSafeReplacement ( value, assign )  )  {^230^^^^^215^245^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^if  ( !isSafeReplacement ( next, root )  )  {^230^^^^^215^245^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^if  ( !isSafeReplacement (  assign )  )  {^230^^^^^215^245^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^if  ( !isSafeReplacement ( next )  )  {^230^^^^^215^245^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^if  ( !isSafeReplacement ( assign, next )  )  {^230^^^^^215^245^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^if  ( !process ( next, assign )  )  {^230^^^^^215^245^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P15_Unwrap_Block]^return false;^230^231^232^^^215^245^if  ( !isSafeReplacement ( next, assign )  )  { return false; }^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P16_Remove_Block]^^230^231^232^^^215^245^if  ( !isSafeReplacement ( next, assign )  )  { return false; }^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P13_Insert_Block]^if  ( name.equals ( node.getString (  )  )  )  {     return true; }^230^^^^^215^245^[Delete]^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P13_Insert_Block]^if  ( isNameAssignedTo ( name, c )  )  {     return true; }^230^^^^^215^245^[Delete]^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P3_Replace_Literal]^return true;^231^^^^^216^246^return false;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P3_Replace_Literal]^return false;^237^^^^^222^252^return true;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P1_Replace_Type]^char nextName = next.getQualifiedName (  ) ;^222^^^^^207^237^String nextName = next.getQualifiedName (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^String parentName = next.getQualifiedName (  ) ;^222^^^^^207^237^String nextName = next.getQualifiedName (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^String nextName = next.removeChild (  ) ;^222^^^^^207^237^String nextName = next.getQualifiedName (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^String rootName = next.getQualifiedName (  ) ;^222^^^^^207^237^String nextName = next.getQualifiedName (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P12_Insert_Condition]^if  ( next.isQualifiedName (  )  )  { String nextName = next.getQualifiedName (  ) ; }^222^^^^^207^237^String nextName = next.getQualifiedName (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^String leftValueName = next.getQualifiedName (  ) ;^222^^^^^207^237^String nextName = next.getQualifiedName (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^if  ( next.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^223^224^^^^208^238^if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^if  ( leftValue.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^223^224^^^^208^238^if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^nextName.equals ( rightValue.getQualifiedName (  )  )  )  {^224^^^^^209^239^nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^nextName.equals ( value.removeChild (  )  )  )  {^224^^^^^209^239^nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^nextName.equals ( root.getQualifiedName (  )  )  )  {^224^^^^^209^239^nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^nextName.equals ( next.getQualifiedName (  )  )  )  {^224^^^^^209^239^nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^nextName.equals ( parent.removeChild (  )  )  )  {^224^^^^^209^239^nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^if  ( !isSafeReplacement ( next, value )  )  {^230^^^^^215^245^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^if  ( !isSafeReplacement ( next, rightValue )  )  {^230^^^^^215^245^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P13_Insert_Block]^if  ( ! ( isSafeReplacement ( next, assign )  )  )  {     return false; }^230^^^^^215^245^[Delete]^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^exprParent.removeChild ( rightValue ) ;^234^^^^^219^249^exprParent.removeChild ( expr ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^exprParent.replaceChild ( expr ) ;^234^^^^^219^249^exprParent.removeChild ( expr ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^exprParent .removeChildren (  )  ;^234^^^^^219^249^exprParent.removeChild ( expr ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^exprParent.replaceChild ( rightValue ) ;^234^^^^^219^249^exprParent.removeChild ( expr ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P14_Delete_Statement]^^234^235^^^^219^249^exprParent.removeChild ( expr ) ; expr.removeChild ( assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^expr.removeChild ( assign ) ;exprParent.removeChild ( expr ) ;^234^^^^^219^249^exprParent.removeChild ( expr ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^next = parent.getFirstChild (  ) ;exprParent.removeChild ( expr ) ;^234^^^^^219^249^exprParent.removeChild ( expr ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^parent.replaceChild ( next, assign ) ;exprParent.removeChild ( expr ) ;^234^^^^^219^249^exprParent.removeChild ( expr ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^expr.removeChild ( rightValue ) ;^235^^^^^220^250^expr.removeChild ( assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^expr.replaceChild ( assign ) ;^235^^^^^220^250^expr.removeChild ( assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P14_Delete_Statement]^^235^^^^^220^250^expr.removeChild ( assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^exprParent.removeChild ( expr ) ;expr.removeChild ( assign ) ;^235^^^^^220^250^expr.removeChild ( assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^parent.replaceChild ( next, assign ) ;expr.removeChild ( assign ) ;^235^^^^^220^250^expr.removeChild ( assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^parent.replaceChild ( parent, assign ) ;^236^^^^^221^251^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^parent.replaceChild ( next, parent ) ;^236^^^^^221^251^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^parent.replaceChild (  assign ) ;^236^^^^^221^251^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^parent.replaceChild ( next ) ;^236^^^^^221^251^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^parent.replaceChild ( assign, next ) ;^236^^^^^221^251^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^parent.replaceChild ( root, assign ) ;^236^^^^^221^251^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P14_Delete_Statement]^^236^237^^^^221^251^parent.replaceChild ( next, assign ) ; return true;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^expr.removeChild ( assign ) ;parent.replaceChild ( next, assign ) ;^236^^^^^221^251^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^exprParent.removeChild ( expr ) ;parent.replaceChild ( next, assign ) ;^236^^^^^221^251^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P12_Insert_Condition]^if  ( !isSafeReplacement ( next, assign )  )  { parent.replaceChild ( next, assign ) ; }^236^^^^^221^251^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^if  ( root.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^223^224^^^^208^238^if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^if  ( value.isQualifiedName (  )  && leftValueName.equals ( value.getQualifiedName (  )  )  )  {^223^224^^^^208^238^if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^if  ( !isSafeReplacement ( parent, assign )  )  {^230^^^^^223^238^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^if  ( !isSafeReplacement ( root, assign )  )  {^230^^^^^223^238^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^if  ( !isSafeReplacement ( rightValue, assign )  )  {^230^^^^^223^238^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^exprParent.removeChild ( rightValue ) ;^234^^^^^223^238^exprParent.removeChild ( expr ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^exprParent .removeChildren (  )  ;^234^^^^^223^238^exprParent.removeChild ( expr ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^exprParent.removeChild ( parent ) ;^234^^^^^223^238^exprParent.removeChild ( expr ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^expr.removeChild ( root ) ;^235^^^^^223^238^expr.removeChild ( assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^expr .removeChildren (  )  ;^235^^^^^223^238^expr.removeChild ( assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^parent.replaceChild ( leftValue, assign ) ;^236^^^^^223^238^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^parent.replaceChild ( next, parent ) ;^236^^^^^223^238^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^parent.replaceChild ( next, next ) ;^236^^^^^223^238^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P14_Delete_Statement]^^236^237^^^^223^238^parent.replaceChild ( next, assign ) ; return true;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^if  ( !isSafeReplacement ( parent, assign )  )  {^230^^^^^215^245^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^if  ( !isSafeReplacement ( next, parent )  )  {^230^^^^^215^245^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P2_Replace_Operator]^if  ( value.getType (  )  != next.getType (  )  )  {^247^^^^^232^262^if  ( value.getType (  )  == next.getType (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P2_Replace_Operator]^if  ( value.getType (  )  >= next.getType (  )  )  {^247^^^^^232^262^if  ( value.getType (  )  == next.getType (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^if  ( value.getType (  )  == value.getType (  )  )  {^247^^^^^232^262^if  ( value.getType (  )  == next.getType (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P6_Replace_Expression]^if  ( (next.getType() == STRING) || (next.getType() == NUMBER) && !(next.isEquivalentTo(value)) )  {^247^^^^^232^262^if  ( value.getType (  )  == next.getType (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P6_Replace_Expression]^if  ( (next.getType() == STRING || next.getType() == NUMBER) )  {^247^^^^^232^262^if  ( value.getType (  )  == next.getType (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P6_Replace_Expression]^if  ( next.getType (  )  == STRING )  {^247^^^^^232^262^if  ( value.getType (  )  == next.getType (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P6_Replace_Expression]^if  ( next.getType (  )  == NUMBER )  {^247^^^^^232^262^if  ( value.getType (  )  == next.getType (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^if  ( value.removeChild (  )  == next.getType (  )  )  {^247^^^^^232^262^if  ( value.getType (  )  == next.getType (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^if  ( value .getString (  )   == next^247^^^^^232^262^if  ( value.getType (  )  == next.getType (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^if  ( value.getType (  )  == parent.getType (  )  )  {^247^^^^^232^262^if  ( value.getType (  )  == next.getType (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P15_Unwrap_Block]^if ((((next.getType()) == (com.google.javascript.rhino.Token.STRING)) || ((next.getType()) == (com.google.javascript.rhino.Token.NUMBER))) && (!(next.isEquivalentTo(value)))) {    return false;}; exprParent.removeChild(expr); expr.removeChild(assign); parent.replaceChild(next, assign); return true;^247^248^249^250^251^232^262^if  ( value.getType (  )  == next.getType (  )  )  { if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  { return false; }^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P16_Remove_Block]^^247^248^249^250^251^232^262^if  ( value.getType (  )  == next.getType (  )  )  { if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  { return false; }^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P13_Insert_Block]^if  (  ( value.isQualifiedName (  )  )  &&  ( nextName.equals ( value.getQualifiedName (  )  )  )  )  {     if  ( ! ( isSafeReplacement ( next, assign )  )  )  {         return false;     }     exprParent.removeChild ( expr ) ;     expr.removeChild ( assign ) ;     parent.replaceChild ( next, assign ) ;     return true; }^247^^^^^232^262^[Delete]^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P13_Insert_Block]^if  (  (  (  ( next.getType (  )  )  ==  ( STRING )  )  ||  (  ( next.getType (  )  )  ==  ( NUMBER )  )  )  &&  ( ! ( next.isEquivalentTo ( value )  )  )  )  {     return false; }^247^^^^^232^262^[Delete]^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P2_Replace_Operator]^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  || !next.isEquivalentTo ( value )  )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P2_Replace_Operator]^if  (  ( next.getType (  )  == Token.STRING && next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P2_Replace_Operator]^if  (  ( next.getType (  )  != Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^if  (  ( parent.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( leftValue )  )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^if  (  ( value.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( next )  )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P6_Replace_Expression]^if  (  ( next.getType (  )  == Token.STRING ) {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P6_Replace_Expression]^if  (  next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P6_Replace_Expression]^if  ( (next.getType() == STRING || next.getType() == NUMBER) )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P6_Replace_Expression]^if  ( next.getType (  )  == STRING )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P6_Replace_Expression]^if  ( next.getType (  )  == NUMBER )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^if  (  ( next.removeChild (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^if  (  ( next .getString (  )   == Token.STRING || next^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.replaceChild ( value )  )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P15_Unwrap_Block]^return false;^248^249^250^251^252^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  { return false; }^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P16_Remove_Block]^^248^249^250^251^252^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  { return false; }^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P13_Insert_Block]^if  (  (  ( name.getType (  )  )  ==  ( NAME )  )  &&  ( isNameAssignedTo ( name.getString (  ) , replacement )  )  )  {     return false; }^248^^^^^233^263^[Delete]^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P13_Insert_Block]^if  (  ( value.getType (  )  )  ==  ( next.getType (  )  )  )  {     if  (  (  (  ( next.getType (  )  )  ==  ( STRING )  )  ||  (  ( next.getType (  )  )  ==  ( NUMBER )  )  )  &&  ( ! ( next.isEquivalentTo ( value )  )  )  )  {         return false;     }     exprParent.removeChild ( expr ) ;     expr.removeChild ( assign ) ;     parent.replaceChild ( next, assign ) ;     return true; }^248^^^^^233^263^[Delete]^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P3_Replace_Literal]^return true;^251^^^^^248^252^return false;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P3_Replace_Literal]^return true;^251^^^^^236^266^return false;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P3_Replace_Literal]^return false;^260^^^^^245^275^return true;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^if  (  ( rightValue.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^next.removeChild (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^249^250^^^^234^264^next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P14_Delete_Statement]^^249^250^251^^^234^264^next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  { return false;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^!next.isEquivalentTo ( parent )  )  {^250^^^^^235^265^!next.isEquivalentTo ( value )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^!next.replaceChild ( value )  )  {^250^^^^^235^265^!next.isEquivalentTo ( value )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^!next.isEquivalentTo ( leftValue )  )  {^250^^^^^235^265^!next.isEquivalentTo ( value )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P14_Delete_Statement]^^250^251^^^^235^265^!next.isEquivalentTo ( value )  )  { return false;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^exprParent.removeChild ( root ) ;^257^^^^^242^272^exprParent.removeChild ( expr ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^exprParent.replaceChild ( expr ) ;^257^^^^^242^272^exprParent.removeChild ( expr ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^exprParent .removeChildren (  )  ;^257^^^^^242^272^exprParent.removeChild ( expr ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P14_Delete_Statement]^^257^258^^^^242^272^exprParent.removeChild ( expr ) ; expr.removeChild ( assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^expr.removeChild ( assign ) ;exprParent.removeChild ( expr ) ;^257^^^^^242^272^exprParent.removeChild ( expr ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^next = parent.getFirstChild (  ) ;exprParent.removeChild ( expr ) ;^257^^^^^242^272^exprParent.removeChild ( expr ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^parent.replaceChild ( next, assign ) ;exprParent.removeChild ( expr ) ;^257^^^^^242^272^exprParent.removeChild ( expr ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^expr.removeChild ( parent ) ;^258^^^^^243^273^expr.removeChild ( assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^expr.replaceChild ( assign ) ;^258^^^^^243^273^expr.removeChild ( assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^expr .removeChildren (  )  ;^258^^^^^243^273^expr.removeChild ( assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^expr.replaceChild ( value ) ;^258^^^^^243^273^expr.removeChild ( assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P14_Delete_Statement]^^258^259^^^^243^273^expr.removeChild ( assign ) ; parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^exprParent.removeChild ( expr ) ;expr.removeChild ( assign ) ;^258^^^^^243^273^expr.removeChild ( assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^parent.replaceChild ( next, assign ) ;expr.removeChild ( assign ) ;^258^^^^^243^273^expr.removeChild ( assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^parent.replaceChild ( parent, assign ) ;^259^^^^^244^274^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^parent.replaceChild (  assign ) ;^259^^^^^244^274^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^parent.replaceChild ( next ) ;^259^^^^^244^274^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^parent.replaceChild ( assign, next ) ;^259^^^^^244^274^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^parent.replaceChild ( rightValue, assign ) ;^259^^^^^244^274^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P14_Delete_Statement]^^259^^^^^244^274^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^expr.removeChild ( assign ) ;parent.replaceChild ( next, assign ) ;^259^^^^^244^274^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^exprParent.removeChild ( expr ) ;parent.replaceChild ( next, assign ) ;^259^^^^^244^274^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P2_Replace_Operator]^if  (  ( next.getType (  )  >= Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( parent )  )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^if  (  ( root.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P2_Replace_Operator]^if  ( leftSide.getType (  )  == Token.NAME && leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^278^279^280^^^263^293^if  ( leftSide.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P2_Replace_Operator]^if  ( leftSide.getType (  )  < Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^278^279^280^^^263^293^if  ( leftSide.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P2_Replace_Operator]^if  ( leftSide.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP || leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^278^279^280^^^263^293^if  ( leftSide.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P2_Replace_Operator]^if  ( leftSide.getType (  )  >= Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^278^279^280^^^263^293^if  ( leftSide.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P2_Replace_Operator]^if  ( leftSide.getType (  )  != Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^278^279^280^^^263^293^if  ( leftSide.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^278^279^280^^^263^293^if  ( leftSide.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P6_Replace_Expression]^if  ( leftSide.getType (  )  == Token.NAME ) {^278^279^280^^^263^293^if  ( leftSide.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P6_Replace_Expression]^if  (  leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^278^279^280^^^263^293^if  ( leftSide.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P6_Replace_Expression]^if  ( leftSide.getType (  )  == NAME )  {^278^279^280^^^263^293^if  ( leftSide.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P6_Replace_Expression]^if  ( (leftSide.getType() == GETPROP && getType() == THIS) )  {^278^279^280^^^263^293^if  ( leftSide.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P6_Replace_Expression]^if  ( leftSide.getType (  )  == GETPROP )  {^278^279^280^^^263^293^if  ( leftSide.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P6_Replace_Expression]^if  ( leftSide.getFirstChild (  ) .getType (  )  == THIS )  {^278^279^280^^^263^293^if  ( leftSide.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^if  ( leftSide.removeChild (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^278^279^280^^^263^293^if  ( leftSide.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^if  ( leftSide .getString (  )   == Token.NAME || leftSide^278^279^280^^^263^293^if  ( leftSide.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^if  ( leftSide.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.removeChild (  ) .getType (  )  == Token.THIS )  {^278^279^280^^^263^293^if  ( leftSide.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P3_Replace_Literal]^return true;^286^^^^^278^287^return false;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^parent = rightValue;^282^^^^^278^287^parent = next;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^parent =  root;^282^^^^^278^287^parent = next;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^this.parent = parent;parent = next;^282^^^^^278^287^parent = next;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^next = leftSide.removeChild (  ) ;^283^^^^^278^287^next = leftSide.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^next = leftSide .getParent (  )  ;^283^^^^^278^287^next = leftSide.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^next =  parent.getNext (  ) ;^283^^^^^278^287^next = leftSide.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^n = n.getNext (  ) ;next = leftSide.getNext (  ) ;^283^^^^^278^287^next = leftSide.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^next = next.getFirstChild (  ) ;next = leftSide.getNext (  ) ;^283^^^^^278^287^next = leftSide.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^next = value.getNext (  ) ;^283^^^^^278^287^next = leftSide.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^next = root.removeChild (  ) ;^283^^^^^278^287^next = leftSide.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P14_Delete_Statement]^^283^^^^^278^287^next = leftSide.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^Node parent = node.getParent (  ) ;next = leftSide.getNext (  ) ;^283^^^^^278^287^next = leftSide.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^Node next = expr.getNext (  ) ;next = leftSide.getNext (  ) ;^283^^^^^278^287^next = leftSide.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^Node rightValue = leftValue.getNext (  ) ;next = leftSide.getNext (  ) ;^283^^^^^278^287^next = leftSide.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^parent = parent;^207^^^^^192^222^parent = next;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^parent =  root;^207^^^^^192^222^parent = next;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^this.parent = parent;parent = next;^207^^^^^192^222^parent = next;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^next = next.removeChild (  ) ;^208^^^^^193^223^next = next.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^next = next .removeChild ( rightValue )  ;^208^^^^^193^223^next = next.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^next =  root.getFirstChild (  ) ;^208^^^^^193^223^next = next.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^parent = next.getFirstChild (  ) ;next = next.getFirstChild (  ) ;^208^^^^^193^223^next = next.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^n = n.getNext (  ) ;next = next.getFirstChild (  ) ;^208^^^^^193^223^next = next.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^next = leftSide.getNext (  ) ;next = next.getFirstChild (  ) ;^208^^^^^193^223^next = next.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^next = parent.getFirstChild (  ) ;next = next.getFirstChild (  ) ;^208^^^^^193^223^next = next.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^parent = next .removeChild ( root )  ;^213^^^^^198^228^parent = next.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^parent =  leftValue.getFirstChild (  ) ;^213^^^^^198^228^parent = next.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^next = leftValue.getFirstChild (  ) ;^214^^^^^199^229^next = parent.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^next = parent .removeChild ( expr )  ;^214^^^^^199^229^next = parent.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^parent =  leftValue;^282^^^^^267^297^parent = next;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^this.parent = parent;parent = next;^282^^^^^267^297^parent = next;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^next = rightValue.getNext (  ) ;^283^^^^^268^298^next = leftSide.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^next = leftSide.removeChild (  ) ;^283^^^^^268^298^next = leftSide.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^next =  root.getNext (  ) ;^283^^^^^268^298^next = leftSide.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^n = n.getNext (  ) ;next = leftSide.getNext (  ) ;^283^^^^^268^298^next = leftSide.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^next = next.getFirstChild (  ) ;next = leftSide.getNext (  ) ;^283^^^^^268^298^next = leftSide.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P3_Replace_Literal]^return true;^217^^^^^202^232^return false;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P3_Replace_Literal]^return true;^240^^^^^225^255^return false;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P3_Replace_Literal]^return true;^262^^^^^247^277^return false;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P3_Replace_Literal]^return true;^286^^^^^271^301^return false;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P3_Replace_Literal]^return true;^291^^^^^276^306^return false;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^String valueName = next.removeChild (  ) ;^222^^^^^207^237^String nextName = next.getQualifiedName (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^Node leftSide = value.getFirstChild (  ) ;^277^^^^^262^292^Node leftSide = next.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^Node leftSide = next.removeChild (  ) ;^277^^^^^262^292^Node leftSide = next.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^Node leftSide = parent.getFirstChild (  ) ;^277^^^^^262^292^Node leftSide = next.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^Node parent = node.getParent (  ) ;Node leftSide = next.getFirstChild (  ) ;^277^^^^^262^292^Node leftSide = next.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^Node next = expr.getNext (  ) ;Node leftSide = next.getFirstChild (  ) ;^277^^^^^262^292^Node leftSide = next.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^Node name = node.getFirstChild (  ) ;Node leftSide = next.getFirstChild (  ) ;^277^^^^^262^292^Node leftSide = next.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^Node leftValue = assign.getFirstChild (  ) ;Node leftSide = next.getFirstChild (  ) ;^277^^^^^262^292^Node leftSide = next.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^Node assign = expr.getFirstChild (  ) ;Node leftSide = next.getFirstChild (  ) ;^277^^^^^262^292^Node leftSide = next.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^switch  ( rightValue.getType (  )  )  {^199^^^^^184^214^switch  ( next.getType (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^switch  ( next.removeChild (  )  )  {^199^^^^^184^214^switch  ( next.getType (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^switch  ( parent.getType (  )  )  {^199^^^^^184^214^switch  ( next.getType (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^next = rightValue.getFirstChild (  ) ;^208^^^^^193^223^next = next.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^next = parent.getFirstChild (  ) ;^208^^^^^193^223^next = next.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P14_Delete_Statement]^^208^209^^^^193^223^next = next.getFirstChild (  ) ; break;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^Node leftSide = next.getFirstChild (  ) ;next = next.getFirstChild (  ) ;^208^^^^^193^223^next = next.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^Node name = node.getFirstChild (  ) ;next = next.getFirstChild (  ) ;^208^^^^^193^223^next = next.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^Node leftValue = assign.getFirstChild (  ) ;next = next.getFirstChild (  ) ;^208^^^^^193^223^next = next.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^Node assign = expr.getFirstChild (  ) ;next = next.getFirstChild (  ) ;^208^^^^^193^223^next = next.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P12_Insert_Condition]^if  ( next.getFirstChild (  ) .hasChildren (  )  )  { next = next.getFirstChild (  ) ; break; }^208^209^^^^193^223^next = next.getFirstChild (  ) ; break;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^if  ( rightValue.getFirstChild (  ) .hasChildren (  )  )  {^212^^^^^197^227^if  ( next.getFirstChild (  ) .hasChildren (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^if  ( value.getFirstChild (  ) .hasChildren (  )  )  {^212^^^^^197^227^if  ( next.getFirstChild (  ) .hasChildren (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^parent = next .removeChild ( expr )  ;^213^^^^^198^228^parent = next.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P14_Delete_Statement]^^213^214^^^^198^228^parent = next.getFirstChild (  ) ; next = parent.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^next = leftValue.removeChild (  ) ;^214^^^^^199^229^next = parent.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^if  ( rightValue.isQualifiedName (  )  )  {^221^^^^^206^236^if  ( next.isQualifiedName (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^if  ( value.isEquivalentTo (  )  )  {^221^^^^^206^236^if  ( next.isQualifiedName (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^nextName.equals ( leftValue.getQualifiedName (  )  )  )  {^224^^^^^209^239^nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^nextName.equals ( value .isQualifiedName (  )   )  )  {^224^^^^^209^239^nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^nextName.equals ( parent.getQualifiedName (  )  )  )  {^224^^^^^209^239^nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^if  ( !isSafeReplacement ( rightValue, assign )  )  {^230^^^^^215^245^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^if  ( !process ( next, root )  )  {^230^^^^^215^245^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^exprParent.removeChild ( parent ) ;^234^^^^^219^249^exprParent.removeChild ( expr ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^expr.removeChild ( parent ) ;^235^^^^^220^250^expr.removeChild ( assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P14_Delete_Statement]^^235^236^^^^220^250^expr.removeChild ( assign ) ; parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^parent.replaceChild ( leftValue, assign ) ;^236^^^^^221^251^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^parent.replaceChild ( next, next ) ;^236^^^^^221^251^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P14_Delete_Statement]^^236^^^^^221^251^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^if  ( leftValue.getType (  )  == next.getType (  )  )  {^247^^^^^232^262^if  ( value.getType (  )  == next.getType (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^if  ( value.getType (  )  == rightValue.getType (  )  )  {^247^^^^^232^262^if  ( value.getType (  )  == next.getType (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^if  ( value.getType (  )  == leftValue.getType (  )  )  {^247^^^^^232^262^if  ( value.getType (  )  == next.getType (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^if  (  ( rightValue.removeChild (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^!next.isEquivalentTo ( root )  )  {^250^^^^^235^265^!next.isEquivalentTo ( value )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^!next.replaceChild ( root )  )  {^250^^^^^235^265^!next.isEquivalentTo ( value )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^exprParent.removeChild ( parent ) ;^257^^^^^242^272^exprParent.removeChild ( expr ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^expr.removeChild ( root ) ;^258^^^^^243^273^expr.removeChild ( assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P14_Delete_Statement]^^258^^^^^243^273^expr.removeChild ( assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^parent.replaceChild ( value, assign ) ;^259^^^^^244^274^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^parent.replaceChild ( next, parent ) ;^259^^^^^244^274^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^parent.replaceChild ( leftValue, assign ) ;^259^^^^^244^274^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P14_Delete_Statement]^^259^260^^^^244^274^parent.replaceChild ( next, assign ) ; return true;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P12_Insert_Condition]^if  ( !isSafeReplacement ( next, assign )  )  { parent.replaceChild ( next, assign ) ; }^259^^^^^244^274^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^Node leftSide = rightValue.getFirstChild (  ) ;^277^^^^^262^292^Node leftSide = next.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^Node leftSide = next .removeChild ( expr )  ;^277^^^^^262^292^Node leftSide = next.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^Node leftSide = leftValue.removeChild (  ) ;^277^^^^^262^292^Node leftSide = next.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P14_Delete_Statement]^^277^^^^^262^292^Node leftSide = next.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^parent = next.getFirstChild (  ) ;Node leftSide = next.getFirstChild (  ) ;^277^^^^^262^292^Node leftSide = next.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^next = parent.getFirstChild (  ) ;Node leftSide = next.getFirstChild (  ) ;^277^^^^^262^292^Node leftSide = next.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^next = next.getFirstChild (  ) ;Node leftSide = next.getFirstChild (  ) ;^277^^^^^262^292^Node leftSide = next.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^if  ( next.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^278^279^280^^^263^293^if  ( leftSide.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^leftSide.getType (  )  == Token.GETPROP && next.getFirstChild (  ) .getType (  )  == Token.THIS )  {^279^280^^^^264^294^leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^leftSide.removeChild (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^279^280^^^^264^294^leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^leftSide .getString (  )   == Token.GETPROP && leftSide.getFirstChild (  )^279^280^^^^264^294^leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^leftSide.getType (  )  == Token.GETPROP && value.getFirstChild (  ) .getType (  )  == Token.THIS )  {^279^280^^^^264^294^leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^leftSide.removeChild (  ) .getType (  )  == Token.THIS )  {^280^^^^^265^295^leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^leftSide.getFirstChild (  )  .getString (  )   == Token.THIS )  {^280^^^^^265^295^leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P14_Delete_Statement]^^280^281^282^^^265^295^leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {  parent = next;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^next = next.getNext (  ) ;^283^^^^^268^298^next = leftSide.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P14_Delete_Statement]^^283^^^^^268^298^next = leftSide.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^Node parent = node.getParent (  ) ;next = leftSide.getNext (  ) ;^283^^^^^268^298^next = leftSide.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^Node next = expr.getNext (  ) ;next = leftSide.getNext (  ) ;^283^^^^^268^298^next = leftSide.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P11_Insert_Donor_Statement]^Node rightValue = leftValue.getNext (  ) ;next = leftSide.getNext (  ) ;^283^^^^^268^298^next = leftSide.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^if  ( next .removeChild ( externs )  .hasChildren (  )  )  {^212^^^^^197^227^if  ( next.getFirstChild (  ) .hasChildren (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^next =  rightValue.getFirstChild (  ) ;^214^^^^^199^229^next = parent.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P14_Delete_Statement]^^214^215^^^^199^229^next = parent.getFirstChild (  ) ; break;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^if  ( value.isQualifiedName (  )  )  {^221^^^^^206^236^if  ( next.isQualifiedName (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^if  ( root.isQualifiedName (  )  )  {^221^^^^^206^236^if  ( next.isQualifiedName (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^if  ( value.isQualifiedName (  )  && nextName.equals ( value .isQualifiedName (  )   )  )  {^223^224^^^^208^238^if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P14_Delete_Statement]^^234^235^^^^223^238^exprParent.removeChild ( expr ) ; expr.removeChild ( assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^expr.removeChild ( rightValue ) ;^235^^^^^223^238^expr.removeChild ( assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^parent.replaceChild ( parent, assign ) ;^236^^^^^223^238^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^parent .removeChild ( next )  ;^236^^^^^223^238^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^parent.replaceChild ( root, assign ) ;^236^^^^^223^238^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^String valueName = next.getQualifiedName (  ) ;^222^^^^^207^237^String nextName = next.getQualifiedName (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^String rootName = next.removeChild (  ) ;^222^^^^^207^237^String nextName = next.getQualifiedName (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^nextName.equals ( root.removeChild (  )  )  )  {^224^^^^^209^239^nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^exprParent.removeChild ( value ) ;^234^^^^^219^249^exprParent.removeChild ( expr ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^exprParent.removeChild ( root ) ;^234^^^^^219^249^exprParent.removeChild ( expr ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^expr.replaceChild ( parent ) ;^235^^^^^220^250^expr.removeChild ( assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^parent.replaceChild ( value, assign ) ;^236^^^^^221^251^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^parent.replaceChild ( next, value ) ;^236^^^^^221^251^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^parent .removeChild ( root )  ;^236^^^^^221^251^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^expr.removeChild ( value ) ;^235^^^^^223^238^expr.removeChild ( assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P14_Delete_Statement]^^235^236^^^^223^238^expr.removeChild ( assign ) ; parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^parent.replaceChild ( value, assign ) ;^236^^^^^223^238^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^parent .removeChild ( assign )  ;^236^^^^^223^238^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^if  ( !isSafeReplacement ( root, assign )  )  {^230^^^^^215^245^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^if  ( root.getType (  )  == next.getType (  )  )  {^247^^^^^232^262^if  ( value.getType (  )  == next.getType (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^if  ( next.getType (  )  == value.getType (  )  )  {^247^^^^^232^262^if  ( value.getType (  )  == next.getType (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P2_Replace_Operator]^if  (  ( next.getType (  )  < Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( rightValue )  )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next .getParent (  )   )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^if  (  ( leftValue.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^!next .getParent (  )   )  {^250^^^^^235^265^!next.isEquivalentTo ( value )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^exprParent.removeChild ( rightValue ) ;^257^^^^^242^272^exprParent.removeChild ( expr ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P14_Delete_Statement]^^257^^^^^242^272^exprParent.removeChild ( expr ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^expr.replaceChild ( rightValue ) ;^258^^^^^243^273^expr.removeChild ( assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^parent.replaceChild ( root, assign ) ;^259^^^^^244^274^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^parent.replaceChild ( next, rightValue ) ;^259^^^^^244^274^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^parent .removeChild ( root )  ;^259^^^^^244^274^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( root )  )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^if  (  ( next.getType (  )  == Token.null || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P2_Replace_Operator]^if  ( leftSide.getType (  )  > Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^278^279^280^^^263^293^if  ( leftSide.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^if  ( leftSide.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide .removeChild ( externs )  .getType (  )  == Token.THIS )  {^278^279^280^^^263^293^if  ( leftSide.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^if  ( parent.getType (  )  == Token.NAME ) {^278^279^280^^^263^293^if  ( leftSide.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^parent = leftValue;^282^^^^^278^287^parent = next;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^next =  rightValue.getNext (  ) ;^283^^^^^278^287^next = leftSide.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^parent =  leftValue;^207^^^^^192^222^parent = next;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^next = next .removeChild ( root )  ;^208^^^^^193^223^next = next.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^next =  null.getFirstChild (  ) ;^208^^^^^193^223^next = next.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^parent =  root.getFirstChild (  ) ;^213^^^^^198^228^parent = next.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^parent = root;^282^^^^^267^297^parent = next;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^parent =  value;^282^^^^^267^297^parent = next;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^switch  ( leftValue.removeChild (  )  )  {^199^^^^^184^214^switch  ( next.getType (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^next = value.getFirstChild (  ) ;^208^^^^^193^223^next = next.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P14_Delete_Statement]^^208^^^^^193^223^next = next.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^if  ( parent.getFirstChild (  ) .hasChildren (  )  )  {^212^^^^^197^227^if  ( next.getFirstChild (  ) .hasChildren (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^next = next.removeChild (  ) ;^214^^^^^199^229^next = parent.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^if  ( next .getQualifiedName (  )   )  {^221^^^^^206^236^if  ( next.isQualifiedName (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^String rightValueName = next.getQualifiedName (  ) ;^222^^^^^207^237^String nextName = next.getQualifiedName (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^String nextName = next .isQualifiedName (  )  ;^222^^^^^207^237^String nextName = next.getQualifiedName (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^if  ( root .getQualifiedName (  )   && nextName.equals ( value.getQualifiedName (  )  )  )  {^223^224^^^^208^238^if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^nextName.equals ( leftValue.removeChild (  )  )  )  {^224^^^^^209^239^nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^expr.removeChild ( root ) ;^235^^^^^220^250^expr.removeChild ( assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^expr .removeChildren (  )  ;^235^^^^^220^250^expr.removeChild ( assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^parent.replaceChild ( rightValue, assign ) ;^236^^^^^221^251^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^if  ( next.getType (  )  == next.getType (  )  )  {^247^^^^^232^262^if  ( value.getType (  )  == next.getType (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^if  (  ( value.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^exprParent.removeChild ( value ) ;^257^^^^^242^272^exprParent.removeChild ( expr ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^expr.replaceChild ( parent ) ;^258^^^^^243^273^expr.removeChild ( assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^parent.replaceChild ( next, root ) ;^259^^^^^244^274^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^parent .removeChild ( externs )  ;^259^^^^^244^274^parent.replaceChild ( next, assign ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P5_Replace_Variable]^Node leftSide = leftValue.getFirstChild (  ) ;^277^^^^^262^292^Node leftSide = next.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^Node leftSide = next .removeChild ( exprParent )  ;^277^^^^^262^292^Node leftSide = next.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^if  ( value.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^278^279^280^^^263^293^if  ( leftSide.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^leftSide.getType (  )  == Token.GETPROP && parent.getFirstChild (  ) .getType (  )  == Token.THIS )  {^279^280^^^^264^294^leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P7_Replace_Invocation]^leftSide .removeChild ( next )  .getType (  )  == Token.THIS )  {^280^^^^^265^295^leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P8_Replace_Mix]^next = parent.getNext (  ) ;^283^^^^^268^298^next = leftSide.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P14_Delete_Statement]^^283^284^^^^268^298^next = leftSide.getNext (  ) ; break;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P3_Replace_Literal]^return true;^295^^^^^280^310^return false;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  nextName  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value  
[P2_Replace_Operator]^if  ( node.getType (  )  <= Token.NAME )  {^306^^^^^304^318^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P7_Replace_Invocation]^if  ( node.removeChild (  )  == Token.NAME )  {^306^^^^^304^318^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P8_Replace_Mix]^if  ( name.getType (  )  == Token.NAME )  {^306^^^^^304^318^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P15_Unwrap_Block]^return true;^306^307^308^^^304^318^if  ( node.getType (  )  == Token.NAME )  { return true; }^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P16_Remove_Block]^^306^307^308^^^304^318^if  ( node.getType (  )  == Token.NAME )  { return true; }^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P3_Replace_Literal]^return false;^307^^^^^304^318^return true;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P5_Replace_Variable]^if  ( value.getType (  )  == Token.NAME )  {^306^^^^^304^318^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P7_Replace_Invocation]^if  ( node .getString (  )   == Token.NAME )  {^306^^^^^304^318^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P2_Replace_Operator]^Preconditions.checkArgument ( node.getType (  )  != Token.GETPROP ) ;^309^^^^^304^318^Preconditions.checkArgument ( node.getType (  )  == Token.GETPROP ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P5_Replace_Variable]^Preconditions.checkArgument ( name.getType (  )  == Token.GETPROP ) ;^309^^^^^304^318^Preconditions.checkArgument ( node.getType (  )  == Token.GETPROP ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P7_Replace_Invocation]^Preconditions.checkArgument ( node.removeChild (  )  == Token.GETPROP ) ;^309^^^^^304^318^Preconditions.checkArgument ( node.getType (  )  == Token.GETPROP ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P7_Replace_Invocation]^Preconditions.checkArgument ( node .getString (  )   == Token.GETPROP ) ;^309^^^^^304^318^Preconditions.checkArgument ( node.getType (  )  == Token.GETPROP ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P8_Replace_Mix]^Preconditions.checkArgument ( parent.getType (  )  == Token.GETPROP ) ;^309^^^^^304^318^Preconditions.checkArgument ( node.getType (  )  == Token.GETPROP ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P14_Delete_Statement]^^309^^^^^304^318^Preconditions.checkArgument ( node.getType (  )  == Token.GETPROP ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P5_Replace_Variable]^Preconditions.checkArgument ( replacement.getType (  )  == Token.GETPROP ) ;^309^^^^^304^318^Preconditions.checkArgument ( node.getType (  )  == Token.GETPROP ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P8_Replace_Mix]^Preconditions.checkArgument ( next.getType (  )  == Token.GETPROP ) ;^309^^^^^304^318^Preconditions.checkArgument ( node.getType (  )  == Token.GETPROP ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P5_Replace_Variable]^Node name = replacement.getFirstChild (  ) ;^311^^^^^304^318^Node name = node.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P7_Replace_Invocation]^Node name = node.removeChild (  ) ;^311^^^^^304^318^Node name = node.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P7_Replace_Invocation]^Node name = node .removeChild ( rightValue )  ;^311^^^^^304^318^Node name = node.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P11_Insert_Donor_Statement]^Node parent = node.getParent (  ) ;Node name = node.getFirstChild (  ) ;^311^^^^^304^318^Node name = node.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P11_Insert_Donor_Statement]^Node leftSide = next.getFirstChild (  ) ;Node name = node.getFirstChild (  ) ;^311^^^^^304^318^Node name = node.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P11_Insert_Donor_Statement]^Node next = expr.getNext (  ) ;Node name = node.getFirstChild (  ) ;^311^^^^^304^318^Node name = node.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P11_Insert_Donor_Statement]^Node leftValue = assign.getFirstChild (  ) ;Node name = node.getFirstChild (  ) ;^311^^^^^304^318^Node name = node.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P11_Insert_Donor_Statement]^Node assign = expr.getFirstChild (  ) ;Node name = node.getFirstChild (  ) ;^311^^^^^304^318^Node name = node.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P5_Replace_Variable]^Node name = next.getFirstChild (  ) ;^311^^^^^304^318^Node name = node.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P14_Delete_Statement]^^311^^^^^304^318^Node name = node.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P11_Insert_Donor_Statement]^parent = next.getFirstChild (  ) ;Node name = node.getFirstChild (  ) ;^311^^^^^304^318^Node name = node.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P11_Insert_Donor_Statement]^next = parent.getFirstChild (  ) ;Node name = node.getFirstChild (  ) ;^311^^^^^304^318^Node name = node.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P11_Insert_Donor_Statement]^next = next.getFirstChild (  ) ;Node name = node.getFirstChild (  ) ;^311^^^^^304^318^Node name = node.getFirstChild (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P2_Replace_Operator]^if  ( name.getType (  )  == Token.NAME || isNameAssignedTo ( name.getString (  ) , replacement )  )  {^312^313^^^^304^318^if  ( name.getType (  )  == Token.NAME && isNameAssignedTo ( name.getString (  ) , replacement )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P2_Replace_Operator]^if  ( name.getType (  )  <= Token.NAME && isNameAssignedTo ( name.getString (  ) , replacement )  )  {^312^313^^^^304^318^if  ( name.getType (  )  == Token.NAME && isNameAssignedTo ( name.getString (  ) , replacement )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P5_Replace_Variable]^if  ( replacement.getType (  )  == Token.NAME && isNameAssignedTo ( name.getString (  ) , replacement )  )  {^312^313^^^^304^318^if  ( name.getType (  )  == Token.NAME && isNameAssignedTo ( name.getString (  ) , replacement )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P5_Replace_Variable]^if  ( name.getType (  )  == Token.NAME && isNameAssignedTo ( name.getString (  ) , next )  )  {^312^313^^^^304^318^if  ( name.getType (  )  == Token.NAME && isNameAssignedTo ( name.getString (  ) , replacement )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P5_Replace_Variable]^if  ( name.getType (  )  == Token.NAME && isNameAssignedTo ( name.getString (  )  )  )  {^312^313^^^^304^318^if  ( name.getType (  )  == Token.NAME && isNameAssignedTo ( name.getString (  ) , replacement )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P5_Replace_Variable]^if  ( replacement.getType (  )  == Token.NAME && isNameAssignedTo ( name.getString (  ) , name )  )  {^312^313^^^^304^318^if  ( name.getType (  )  == Token.NAME && isNameAssignedTo ( name.getString (  ) , replacement )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P6_Replace_Expression]^if  ( name.getType (  )  == Token.NAME ) {^312^313^^^^304^318^if  ( name.getType (  )  == Token.NAME && isNameAssignedTo ( name.getString (  ) , replacement )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P6_Replace_Expression]^if  (  isNameAssignedTo ( name.getString (  ) , replacement )  )  {^312^313^^^^304^318^if  ( name.getType (  )  == Token.NAME && isNameAssignedTo ( name.getString (  ) , replacement )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P6_Replace_Expression]^if  ( name.getType (  )  == NAME )  {^312^313^^^^304^318^if  ( name.getType (  )  == Token.NAME && isNameAssignedTo ( name.getString (  ) , replacement )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P7_Replace_Invocation]^if  ( name.removeChild (  )  == Token.NAME && isNameAssignedTo ( name.getString (  ) , replacement )  )  {^312^313^^^^304^318^if  ( name.getType (  )  == Token.NAME && isNameAssignedTo ( name.getString (  ) , replacement )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P7_Replace_Invocation]^if  ( name.getType (  )  == Token.NAME && process ( name.getString (  ) , replacement )  )  {^312^313^^^^304^318^if  ( name.getType (  )  == Token.NAME && isNameAssignedTo ( name.getString (  ) , replacement )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P7_Replace_Invocation]^if  ( name.getType (  )  == Token.NAME && isNameAssignedTo ( name.removeChild (  ) , replacement )  )  {^312^313^^^^304^318^if  ( name.getType (  )  == Token.NAME && isNameAssignedTo ( name.getString (  ) , replacement )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P8_Replace_Mix]^if  ( value.getType (  )  == Token.NAME && isNameAssignedTo ( name.getString (  ) , replacement )  )  {^312^313^^^^304^318^if  ( name.getType (  )  == Token.NAME && isNameAssignedTo ( name.getString (  ) , replacement )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P15_Unwrap_Block]^return false;^312^313^314^315^^304^318^if  ( name.getType (  )  == Token.NAME && isNameAssignedTo ( name.getString (  ) , replacement )  )  { return false; }^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P16_Remove_Block]^^312^313^314^315^^304^318^if  ( name.getType (  )  == Token.NAME && isNameAssignedTo ( name.getString (  ) , replacement )  )  { return false; }^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P3_Replace_Literal]^return true;^314^^^^^304^318^return false;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P7_Replace_Invocation]^if  ( name .getString (  )   == Token.NAME && isNameAssignedTo ( name.getString (  ) , replacement )  )  {^312^313^^^^304^318^if  ( name.getType (  )  == Token.NAME && isNameAssignedTo ( name.getString (  ) , replacement )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P8_Replace_Mix]^if  ( next.getType (  )  == Token.NAME && isNameAssignedTo ( name.getString (  ) , replacement )  )  {^312^313^^^^304^318^if  ( name.getType (  )  == Token.NAME && isNameAssignedTo ( name.getString (  ) , replacement )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P5_Replace_Variable]^&& isNameAssignedTo ( value.getString (  ) , replacement )  )  {^313^^^^^304^318^&& isNameAssignedTo ( name.getString (  ) , replacement )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P5_Replace_Variable]^&& isNameAssignedTo ( name.getString (  ) , node )  )  {^313^^^^^304^318^&& isNameAssignedTo ( name.getString (  ) , replacement )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P5_Replace_Variable]^&& isNameAssignedTo ( name.getString (  )  )  )  {^313^^^^^304^318^&& isNameAssignedTo ( name.getString (  ) , replacement )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P5_Replace_Variable]^&& isNameAssignedTo ( replacement.getString (  ) , name )  )  {^313^^^^^304^318^&& isNameAssignedTo ( name.getString (  ) , replacement )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P7_Replace_Invocation]^&& process ( name.getString (  ) , replacement )  )  {^313^^^^^304^318^&& isNameAssignedTo ( name.getString (  ) , replacement )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P7_Replace_Invocation]^&& isNameAssignedTo ( name.removeChild (  ) , replacement )  )  {^313^^^^^304^318^&& isNameAssignedTo ( name.getString (  ) , replacement )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P7_Replace_Invocation]^&& isNameAssignedTo ( name .getParent (  )  , replacement )  )  {^313^^^^^304^318^&& isNameAssignedTo ( name.getString (  ) , replacement )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P8_Replace_Mix]^&& isNameAssignedTo ( name.getString (  ) , next )  )  {^313^^^^^304^318^&& isNameAssignedTo ( name.getString (  ) , replacement )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P14_Delete_Statement]^^313^314^^^^304^318^&& isNameAssignedTo ( name.getString (  ) , replacement )  )  { return false;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P5_Replace_Variable]^&& isNameAssignedTo ( rightValue.getString (  ) , replacement )  )  {^313^^^^^304^318^&& isNameAssignedTo ( name.getString (  ) , replacement )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P8_Replace_Mix]^&& isNameAssignedTo ( root .getParent (  )  , replacement )  )  {^313^^^^^304^318^&& isNameAssignedTo ( name.getString (  ) , replacement )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P3_Replace_Literal]^return false;^317^^^^^304^318^return true;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isSafeReplacement [RETURN_TYPE] boolean   Node node Node replacement [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P5_Replace_Variable]^if  ( isNameAssignedTo ( name, root )  )  {^325^^^^^323^340^if  ( isNameAssignedTo ( name, c )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P5_Replace_Variable]^if  ( isNameAssignedTo (  c )  )  {^325^^^^^323^340^if  ( isNameAssignedTo ( name, c )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P5_Replace_Variable]^if  ( isNameAssignedTo ( name )  )  {^325^^^^^323^340^if  ( isNameAssignedTo ( name, c )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P5_Replace_Variable]^if  ( isNameAssignedTo ( c, name )  )  {^325^^^^^323^340^if  ( isNameAssignedTo ( name, c )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P7_Replace_Invocation]^if  ( process ( name, c )  )  {^325^^^^^323^340^if  ( isNameAssignedTo ( name, c )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P8_Replace_Mix]^if  ( isNameAssignedTo ( name, replacement )  )  {^325^^^^^323^340^if  ( isNameAssignedTo ( name, c )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P15_Unwrap_Block]^return true;^325^326^327^^^323^340^if  ( isNameAssignedTo ( name, c )  )  { return true; }^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P16_Remove_Block]^^325^326^327^^^323^340^if  ( isNameAssignedTo ( name, c )  )  { return true; }^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P13_Insert_Block]^if  ( ! ( isSafeReplacement ( next, assign )  )  )  {     return false; }^325^^^^^323^340^[Delete]^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P13_Insert_Block]^if  ( name.equals ( node.getString (  )  )  )  {     return true; }^325^^^^^323^340^[Delete]^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P3_Replace_Literal]^return false;^326^^^^^323^340^return true;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P2_Replace_Operator]^for  ( Node c = node.getFirstChild (  ) ; c == null; c = c.getNext (  )  )  {^324^^^^^323^340^for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P5_Replace_Variable]^for  ( Node c = value.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^324^^^^^323^340^for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P5_Replace_Variable]^for  ( Node parent = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^324^^^^^323^340^for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P5_Replace_Variable]^for  ( Node node = c.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^324^^^^^323^340^for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P7_Replace_Invocation]^for  ( Node c = node.removeChild (  ) ; c != null; c = c.getNext (  )  )  {^324^^^^^323^340^for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P7_Replace_Invocation]^for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.removeChild (  )  )  {^324^^^^^323^340^for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P8_Replace_Mix]^for  ( Node c = root.getFirstChild (  ) ; c != null; c = c.removeChild (  )  )  {^324^^^^^323^340^for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P5_Replace_Variable]^if  ( isNameAssignedTo ( name, node )  )  {^325^^^^^323^340^if  ( isNameAssignedTo ( name, c )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P5_Replace_Variable]^if  ( isNameAssignedTo ( name, rightValue )  )  {^325^^^^^323^340^if  ( isNameAssignedTo ( name, c )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P5_Replace_Variable]^for  ( Node next = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^324^^^^^323^340^for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P8_Replace_Mix]^for  ( Node c =  node.getFirstChild (  ) ; null !^324^^^^^323^340^for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P5_Replace_Variable]^for  ( Node c = replacement.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^324^^^^^323^340^for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P8_Replace_Mix]^for  ( Node c = value.removeChild (  ) ; c != null; c = c.getNext (  )  )  {^324^^^^^323^340^for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P5_Replace_Variable]^for  ( Node c = root.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^324^^^^^323^340^for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P7_Replace_Invocation]^for  ( Node c = node .removeChild ( node )  ; c != null; c = c.getNext (  )  )  {^324^^^^^323^340^for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P8_Replace_Mix]^for  ( Node c = name.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^324^^^^^323^340^for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P14_Delete_Statement]^^324^325^326^327^^323^340^for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  { if  ( isNameAssignedTo ( name, c )  )  { return true; }^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P5_Replace_Variable]^for  ( Node replacement = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^324^^^^^323^340^for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P8_Replace_Mix]^for  ( Node replacement = node.getFirstChild (  ) ; c != null; c = c.removeChild (  )  )  {^324^^^^^323^340^for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P2_Replace_Operator]^if  ( node.getType (  )  <= Token.NAME )  {^330^^^^^323^340^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P2_Replace_Operator]^if  ( node.getType (  )  >= Token.NAME )  {^330^^^^^323^340^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P2_Replace_Operator]^if  ( node.getType (  )  != Token.NAME )  {^330^^^^^323^340^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P5_Replace_Variable]^if  ( name.getType (  )  == Token.NAME )  {^330^^^^^323^340^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P6_Replace_Expression]^if  ( parent.getType() == ASSIGN && parent.getFirstChild() == node )  {^330^^^^^323^340^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P6_Replace_Expression]^if  ( parent.getType (  )  == ASSIGN )  {^330^^^^^323^340^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P6_Replace_Expression]^if  ( parent.getFirstChild (  )  == node )  {^330^^^^^323^340^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P7_Replace_Invocation]^if  ( node.removeChild (  )  == Token.NAME )  {^330^^^^^323^340^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P7_Replace_Invocation]^if  ( node .getString (  )   == Token.NAME )  {^330^^^^^323^340^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P8_Replace_Mix]^if  ( name .getString (  )   == Token.NAME )  {^330^^^^^323^340^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P15_Unwrap_Block]^com.google.javascript.rhino.Node parent = node.getParent(); if (((parent.getType()) == (com.google.javascript.rhino.Token.ASSIGN)) && ((parent.getFirstChild()) == node)) {    if (name.equals(node.getString())) {        return true;    }};^330^331^332^333^334^323^340^if  ( node.getType (  )  == Token.NAME )  { Node parent = node.getParent (  ) ; if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == node )  { if  ( name.equals ( node.getString (  )  )  )  { return true; }^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P16_Remove_Block]^^330^331^332^333^334^323^340^if  ( node.getType (  )  == Token.NAME )  { Node parent = node.getParent (  ) ; if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == node )  { if  ( name.equals ( node.getString (  )  )  )  { return true; }^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P13_Insert_Block]^if  (  (  ( parent.getType (  )  )  ==  ( ASSIGN )  )  &&  (  ( parent.getFirstChild (  )  )  == node )  )  {     if  ( name.equals ( node.getString (  )  )  )  {         return true;     } }^330^^^^^323^340^[Delete]^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P2_Replace_Operator]^if  ( parent.getType (  )  == Token.ASSIGN || parent.getFirstChild (  )  == node )  {^332^^^^^323^340^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == node )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P2_Replace_Operator]^if  ( parent.getType (  )  <= Token.ASSIGN && parent.getFirstChild (  )  == node )  {^332^^^^^323^340^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == node )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P2_Replace_Operator]^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  != node )  {^332^^^^^323^340^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == node )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P5_Replace_Variable]^if  ( value.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == node )  {^332^^^^^323^340^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == node )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == name )  {^332^^^^^323^340^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == node )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P5_Replace_Variable]^if  ( node.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == parent )  {^332^^^^^323^340^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == node )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P6_Replace_Expression]^if  ( parent.getType (  )  == Token.ASSIGN ) {^332^^^^^323^340^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == node )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P6_Replace_Expression]^if  (  parent.getFirstChild (  )  == node )  {^332^^^^^323^340^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == node )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P6_Replace_Expression]^if  ( parent.getType (  )  == ASSIGN )  {^332^^^^^323^340^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == node )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P7_Replace_Invocation]^if  ( parent.removeChild (  )  == Token.ASSIGN && parent.getFirstChild (  )  == node )  {^332^^^^^323^340^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == node )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P7_Replace_Invocation]^if  ( parent .getString (  )   == Token.ASSIGN && parent.getFirstChild (  )  == node )  {^332^^^^^323^340^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == node )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P7_Replace_Invocation]^if  ( parent.getType (  )  == Token.ASSIGN && parent.removeChild (  )  == node )  {^332^^^^^323^340^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == node )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P7_Replace_Invocation]^if  ( parent.getType (  )  == Token.ASSIGN && parent .removeChild ( value )   == node )  {^332^^^^^323^340^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == node )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P15_Unwrap_Block]^if (name.equals(node.getString())) {    return true;};^332^333^334^335^^323^340^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == node )  { if  ( name.equals ( node.getString (  )  )  )  { return true; }^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P16_Remove_Block]^^332^333^334^335^^323^340^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == node )  { if  ( name.equals ( node.getString (  )  )  )  { return true; }^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P13_Insert_Block]^if  (  ( node.getType (  )  )  ==  ( NAME )  )  {     Node parent = node.getParent (  ) ;     if  (  (  ( parent.getType (  )  )  ==  ( ASSIGN )  )  &&  (  ( parent.getFirstChild (  )  )  == node )  )  {         if  ( name.equals ( node.getString (  )  )  )  {             return true;         }     } }^332^^^^^323^340^[Delete]^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P13_Insert_Block]^if  (  (  ( name.getType (  )  )  ==  ( NAME )  )  &&  ( isNameAssignedTo ( name.getString (  ) , replacement )  )  )  {     return false; }^332^^^^^323^340^[Delete]^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P1_Replace_Type]^if  ( name.equals ( node.getchar (  )  )  )  {^333^^^^^323^340^if  ( name.equals ( node.getString (  )  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P5_Replace_Variable]^if  ( name.equals ( replacement.getString (  )  )  )  {^333^^^^^323^340^if  ( name.equals ( node.getString (  )  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P5_Replace_Variable]^if  ( node.equals ( name.getString (  )  )  )  {^333^^^^^323^340^if  ( name.equals ( node.getString (  )  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P7_Replace_Invocation]^if  ( name.equals ( node.removeChild (  )  )  )  {^333^^^^^323^340^if  ( name.equals ( node.getString (  )  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P7_Replace_Invocation]^if  ( name.equals ( node .getParent (  )   )  )  {^333^^^^^323^340^if  ( name.equals ( node.getString (  )  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P8_Replace_Mix]^if  ( name.equals ( rightValue.getString (  )  )  )  {^333^^^^^323^340^if  ( name.equals ( node.getString (  )  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P15_Unwrap_Block]^return true;^333^334^335^^^323^340^if  ( name.equals ( node.getString (  )  )  )  { return true; }^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P16_Remove_Block]^^333^334^335^^^323^340^if  ( name.equals ( node.getString (  )  )  )  { return true; }^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P3_Replace_Literal]^return false;^334^^^^^323^340^return true;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P8_Replace_Mix]^if  ( name.equals ( rightValue .getParent (  )   )  )  {^333^^^^^323^340^if  ( name.equals ( node.getString (  )  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P13_Insert_Block]^if  ( name.equals ( node.getString (  )  )  )  {     return true; }^333^^^^^323^340^[Delete]^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P5_Replace_Variable]^if  ( name.equals ( value.getString (  )  )  )  {^333^^^^^323^340^if  ( name.equals ( node.getString (  )  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P8_Replace_Mix]^if  ( name.equals ( parent.removeChild (  )  )  )  {^333^^^^^323^340^if  ( name.equals ( node.getString (  )  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P5_Replace_Variable]^Node parent = value.getParent (  ) ;^331^^^^^323^340^Node parent = node.getParent (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P7_Replace_Invocation]^Node parent = node.removeChild (  ) ;^331^^^^^323^340^Node parent = node.getParent (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P8_Replace_Mix]^Node parent = rightValue.getParent (  ) ;^331^^^^^323^340^Node parent = node.getParent (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P11_Insert_Donor_Statement]^Node leftSide = next.getFirstChild (  ) ;Node parent = node.getParent (  ) ;^331^^^^^323^340^Node parent = node.getParent (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P11_Insert_Donor_Statement]^Node next = expr.getNext (  ) ;Node parent = node.getParent (  ) ;^331^^^^^323^340^Node parent = node.getParent (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P11_Insert_Donor_Statement]^Node name = node.getFirstChild (  ) ;Node parent = node.getParent (  ) ;^331^^^^^323^340^Node parent = node.getParent (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P11_Insert_Donor_Statement]^Node parent = exprParent;Node parent = node.getParent (  ) ;^331^^^^^323^340^Node parent = node.getParent (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P11_Insert_Donor_Statement]^Node assign = expr.getFirstChild (  ) ;Node parent = node.getParent (  ) ;^331^^^^^323^340^Node parent = node.getParent (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P5_Replace_Variable]^Node parent = root.getParent (  ) ;^331^^^^^323^340^Node parent = node.getParent (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P8_Replace_Mix]^Node parent = replacement.getParent (  ) ;^331^^^^^323^340^Node parent = node.getParent (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P14_Delete_Statement]^^331^^^^^323^340^Node parent = node.getParent (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P11_Insert_Donor_Statement]^parent = next.getFirstChild (  ) ;Node parent = node.getParent (  ) ;^331^^^^^323^340^Node parent = node.getParent (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P11_Insert_Donor_Statement]^n = n.getNext (  ) ;Node parent = node.getParent (  ) ;^331^^^^^323^340^Node parent = node.getParent (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P11_Insert_Donor_Statement]^next = leftSide.getNext (  ) ;Node parent = node.getParent (  ) ;^331^^^^^323^340^Node parent = node.getParent (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P5_Replace_Variable]^if  ( name.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == node )  {^332^^^^^323^340^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == node )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P5_Replace_Variable]^if  ( next.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == node )  {^332^^^^^323^340^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == node )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P7_Replace_Invocation]^if  ( parent.getType (  )  == Token.ASSIGN && parent .removeChild ( leftValue )   == node )  {^332^^^^^323^340^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == node )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P8_Replace_Mix]^if  ( replacement.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == node )  {^332^^^^^323^340^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == node )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P8_Replace_Mix]^if  ( name.equals ( root.getString (  )  )  )  {^333^^^^^323^340^if  ( name.equals ( node.getString (  )  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P5_Replace_Variable]^if  ( name.equals ( parent.getString (  )  )  )  {^333^^^^^323^340^if  ( name.equals ( node.getString (  )  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P8_Replace_Mix]^if  ( name.equals ( name.getString (  )  )  )  {^333^^^^^323^340^if  ( name.equals ( node.getString (  )  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P2_Replace_Operator]^if  ( parent.getType (  )  >= Token.ASSIGN && parent.getFirstChild (  )  == node )  {^332^^^^^323^340^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == node )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == replacement )  {^332^^^^^323^340^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == node )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P8_Replace_Mix]^if  ( value.getType (  )  == Token.ASSIGN ) {^332^^^^^323^340^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == node )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P5_Replace_Variable]^if  ( name.equals ( next.getString (  )  )  )  {^333^^^^^323^340^if  ( name.equals ( node.getString (  )  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P8_Replace_Mix]^if  ( name.equals ( name .getParent (  )   )  )  {^333^^^^^323^340^if  ( name.equals ( node.getString (  )  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P5_Replace_Variable]^Node parent = name.getParent (  ) ;^331^^^^^323^340^Node parent = node.getParent (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P8_Replace_Mix]^Node parent = name.removeChild (  ) ;^331^^^^^323^340^Node parent = node.getParent (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P5_Replace_Variable]^if  ( replacement.getType (  )  == Token.NAME )  {^330^^^^^323^340^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P8_Replace_Mix]^if  ( next.removeChild (  )  == Token.NAME )  {^330^^^^^323^340^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P7_Replace_Invocation]^Node parent = node .getNext (  )  ;^331^^^^^323^340^Node parent = node.getParent (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P8_Replace_Mix]^if  ( rightValue.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == node )  {^332^^^^^323^340^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == node )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P5_Replace_Variable]^if  ( node.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == node )  {^332^^^^^323^340^if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == node )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P8_Replace_Mix]^if  ( name.equals ( name.removeChild (  )  )  )  {^333^^^^^323^340^if  ( name.equals ( node.getString (  )  )  )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P3_Replace_Literal]^return true;^339^^^^^323^340^return false;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] isNameAssignedTo [RETURN_TYPE] boolean   String name Node node [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  String  name  boolean  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value  
[P2_Replace_Operator]^if  ( n.getType (  )  <= Token.VAR )  return;^351^^^^^349^378^if  ( n.getType (  )  != Token.VAR )  return;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P5_Replace_Variable]^if  ( replacement.getType (  )  != Token.VAR )  return;^351^^^^^349^378^if  ( n.getType (  )  != Token.VAR )  return;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P7_Replace_Invocation]^if  ( n.removeChild (  )  != Token.VAR )  return;^351^^^^^349^378^if  ( n.getType (  )  != Token.VAR )  return;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P8_Replace_Mix]^if  ( next.removeChild (  )  != Token.VAR )  return;^351^^^^^349^378^if  ( n.getType (  )  != Token.VAR )  return;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P5_Replace_Variable]^if  ( node.getType (  )  != Token.VAR )  return;^351^^^^^349^378^if  ( n.getType (  )  != Token.VAR )  return;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P5_Replace_Variable]^if  ( parentodesToCollapse.contains ( n )  )  return;^354^^^^^349^378^if  ( nodesToCollapse.contains ( n )  )  return;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P5_Replace_Variable]^if  ( nodesToCollapseodesToCollapse.contains ( n )  )  return;^354^^^^^349^378^if  ( nodesToCollapse.contains ( n )  )  return;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P5_Replace_Variable]^if  ( n.contains ( nodesToCollapse )  )  return;^354^^^^^349^378^if  ( nodesToCollapse.contains ( n )  )  return;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P7_Replace_Invocation]^if  ( nodesToCollapse.add ( n )  )  return;^354^^^^^349^378^if  ( nodesToCollapse.contains ( n )  )  return;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P8_Replace_Mix]^if  ( rightValueodesToCollapse.contains ( n )  )  return;^354^^^^^349^378^if  ( nodesToCollapse.contains ( n )  )  return;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P13_Insert_Block]^if  ( name.equals ( node.getString (  )  )  )  {     return true; }^354^^^^^349^378^[Delete]^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P5_Replace_Variable]^if  ( nextodesToCollapse.contains ( n )  )  return;^354^^^^^349^378^if  ( nodesToCollapse.contains ( n )  )  return;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P2_Replace_Operator]^if  ( parent.getType (  )  != Token.IF )  return;^358^^^^^349^378^if  ( parent.getType (  )  == Token.IF )  return;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P5_Replace_Variable]^if  ( value.getType (  )  == Token.IF )  return;^358^^^^^349^378^if  ( parent.getType (  )  == Token.IF )  return;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P7_Replace_Invocation]^if  ( parent.removeChild (  )  == Token.IF )  return;^358^^^^^349^378^if  ( parent.getType (  )  == Token.IF )  return;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P8_Replace_Mix]^if  ( replacement.getType (  )  == Token.IF )  return;^358^^^^^349^378^if  ( parent.getType (  )  == Token.IF )  return;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P5_Replace_Variable]^if  ( root.getType (  )  == Token.IF )  return;^358^^^^^349^378^if  ( parent.getType (  )  == Token.IF )  return;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P8_Replace_Mix]^if  ( name.removeChild (  )  == Token.IF )  return;^358^^^^^349^378^if  ( parent.getType (  )  == Token.IF )  return;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P5_Replace_Variable]^Node varNode = next;^360^^^^^349^378^Node varNode = n;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P8_Replace_Mix]^Node varNode = root;^360^^^^^349^378^Node varNode = n;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P7_Replace_Invocation]^n = n.removeChild (  ) ;^363^^^^^349^378^n = n.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P8_Replace_Mix]^n =  parent.getNext (  ) ;^363^^^^^349^378^n = n.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P11_Insert_Donor_Statement]^next = leftSide.getNext (  ) ;n = n.getNext (  ) ;^363^^^^^349^378^n = n.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P11_Insert_Donor_Statement]^next = next.getFirstChild (  ) ;n = n.getNext (  ) ;^363^^^^^349^378^n = n.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P5_Replace_Variable]^n = next.getNext (  ) ;^363^^^^^349^378^n = n.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P7_Replace_Invocation]^n = n .getParent (  )  ;^363^^^^^349^378^n = n.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P14_Delete_Statement]^^363^^^^^349^378^n = n.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P11_Insert_Donor_Statement]^Node parent = node.getParent (  ) ;n = n.getNext (  ) ;^363^^^^^349^378^n = n.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P11_Insert_Donor_Statement]^Node next = expr.getNext (  ) ;n = n.getNext (  ) ;^363^^^^^349^378^n = n.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P3_Replace_Literal]^boolean hasNodesToCollapse = true;^365^^^^^349^378^boolean hasNodesToCollapse = false;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P12_Insert_Condition]^if  ( hasNodesToCollapse )  { boolean hasNodesToCollapse = false; }^365^^^^^349^378^boolean hasNodesToCollapse = false;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P2_Replace_Operator]^while  ( n != null || n.getType (  )  == Token.VAR )  {^366^^^^^349^378^while  ( n != null && n.getType (  )  == Token.VAR )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P2_Replace_Operator]^while  ( n == null && n.getType (  )  == Token.VAR )  {^366^^^^^349^378^while  ( n != null && n.getType (  )  == Token.VAR )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P2_Replace_Operator]^while  ( n != null && n.getType (  )  != Token.VAR )  {^366^^^^^349^378^while  ( n != null && n.getType (  )  == Token.VAR )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P5_Replace_Variable]^while  ( next != null && n.getType (  )  == Token.VAR )  {^366^^^^^349^378^while  ( n != null && n.getType (  )  == Token.VAR )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P7_Replace_Invocation]^while  ( n != null && n.removeChild (  )  == Token.VAR )  {^366^^^^^349^378^while  ( n != null && n.getType (  )  == Token.VAR )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P8_Replace_Mix]^while  ( next != null && n.removeChild (  )  == Token.VAR )  {^366^^^^^349^378^while  ( n != null && n.getType (  )  == Token.VAR )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P3_Replace_Literal]^hasNodesToCollapse = false;^368^^^^^349^378^hasNodesToCollapse = true;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P12_Insert_Condition]^if  ( hasNodesToCollapse )  { hasNodesToCollapse = true; }^368^^^^^349^378^hasNodesToCollapse = true;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P5_Replace_Variable]^n = node.getNext (  ) ;^370^^^^^349^378^n = n.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P7_Replace_Invocation]^n = n.removeChild (  ) ;^370^^^^^349^378^n = n.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P8_Replace_Mix]^n =  next.getNext (  ) ;^370^^^^^349^378^n = n.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P11_Insert_Donor_Statement]^next = leftSide.getNext (  ) ;n = n.getNext (  ) ;^370^^^^^349^378^n = n.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P11_Insert_Donor_Statement]^next = next.getFirstChild (  ) ;n = n.getNext (  ) ;^370^^^^^349^378^n = n.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P7_Replace_Invocation]^nodesToCollapse.contains ( n ) ;^367^^^^^349^378^nodesToCollapse.add ( n ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P7_Replace_Invocation]^nodesToCollapse .contains ( parent )  ;^367^^^^^349^378^nodesToCollapse.add ( n ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P8_Replace_Mix]^nodesToCollapse.contains ( rightValue ) ;^367^^^^^349^378^nodesToCollapse.add ( n ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P14_Delete_Statement]^^367^^^^^349^378^nodesToCollapse.add ( n ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P8_Replace_Mix]^n = parent.getNext (  ) ;^370^^^^^349^378^n = n.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P14_Delete_Statement]^^370^^^^^349^378^n = n.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P11_Insert_Donor_Statement]^Node parent = node.getParent (  ) ;n = n.getNext (  ) ;^370^^^^^349^378^n = n.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P11_Insert_Donor_Statement]^Node next = expr.getNext (  ) ;n = n.getNext (  ) ;^370^^^^^349^378^n = n.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P5_Replace_Variable]^n = root.getNext (  ) ;^370^^^^^349^378^n = n.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P7_Replace_Invocation]^n = n .getParent (  )  ;^370^^^^^349^378^n = n.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P7_Replace_Invocation]^while  ( n != null && n .getString (  )   == Token.VAR )  {^366^^^^^349^378^while  ( n != null && n.getType (  )  == Token.VAR )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P8_Replace_Mix]^while  ( varNode != null && n.getType (  )  == Token.VAR )  {^366^^^^^349^378^while  ( n != null && n.getType (  )  == Token.VAR )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P14_Delete_Statement]^^366^367^^^^349^378^while  ( n != null && n.getType (  )  == Token.VAR )  { nodesToCollapse.add ( n ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P5_Replace_Variable]^nodesToCollapse.add ( varNode ) ;^367^^^^^349^378^nodesToCollapse.add ( n ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P7_Replace_Invocation]^nodesToCollapse .contains ( c )  ;^367^^^^^349^378^nodesToCollapse.add ( n ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P8_Replace_Mix]^nodesToCollapse.add ( node ) ;^367^^^^^349^378^nodesToCollapse.add ( n ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P5_Replace_Variable]^n = replacement.getNext (  ) ;^370^^^^^349^378^n = n.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P8_Replace_Mix]^n = next .getParent (  )  ;^370^^^^^349^378^n = n.getNext (  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P15_Unwrap_Block]^nodesToCollapse.add(varNode); collapses.add(new com.google.javascript.jscomp.CollapseVariableDeclarations.Collapse(varNode, parent));^373^374^375^376^^349^378^if  ( hasNodesToCollapse )  { nodesToCollapse.add ( varNode ) ; collapses.add ( new Collapse ( varNode, parent )  ) ; }^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P16_Remove_Block]^^373^374^375^376^^349^378^if  ( hasNodesToCollapse )  { nodesToCollapse.add ( varNode ) ; collapses.add ( new Collapse ( varNode, parent )  ) ; }^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P4_Replace_Constructor]^collapses.add ( collapses.add (  new GatherCollapses (  )   ) ;^375^^^^^349^378^collapses.add ( new Collapse ( varNode, parent )  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P4_Replace_Constructor]^collapses.add ( new Collapse (  parent )  ) ;^375^^^^^349^378^collapses.add ( new Collapse ( varNode, parent )  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P4_Replace_Constructor]^collapses.add ( new Collapse ( varNode )  ) ;^375^^^^^349^378^collapses.add ( new Collapse ( varNode, parent )  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P5_Replace_Variable]^collapses.add ( new Collapse ( next, parent )  ) ;^375^^^^^349^378^collapses.add ( new Collapse ( varNode, parent )  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P5_Replace_Variable]^collapses.add ( new Collapse ( varNode, root )  ) ;^375^^^^^349^378^collapses.add ( new Collapse ( varNode, parent )  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P5_Replace_Variable]^collapses.add ( new Collapse ( parent, varNode )  ) ;^375^^^^^349^378^collapses.add ( new Collapse ( varNode, parent )  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P8_Replace_Mix]^collapses.add ( new Collapse ( rightValue, parent )  ) ;^375^^^^^349^378^collapses.add ( new Collapse ( varNode, parent )  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P5_Replace_Variable]^nodesToCollapse.add ( node ) ;^374^^^^^349^378^nodesToCollapse.add ( varNode ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P7_Replace_Invocation]^nodesToCollapse.contains ( varNode ) ;^374^^^^^349^378^nodesToCollapse.add ( varNode ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P7_Replace_Invocation]^nodesToCollapse .contains ( replacement )  ;^374^^^^^349^378^nodesToCollapse.add ( varNode ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P8_Replace_Mix]^nodesToCollapse.add ( value ) ;^374^^^^^349^378^nodesToCollapse.add ( varNode ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P14_Delete_Statement]^^374^^^^^349^378^nodesToCollapse.add ( varNode ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P11_Insert_Donor_Statement]^nodesToCollapse.add ( n ) ;nodesToCollapse.add ( varNode ) ;^374^^^^^349^378^nodesToCollapse.add ( varNode ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P11_Insert_Donor_Statement]^nodesToCollapse.clear (  ) ;nodesToCollapse.add ( varNode ) ;^374^^^^^349^378^nodesToCollapse.add ( varNode ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P5_Replace_Variable]^collapses.add ( new Collapse ( root, parent )  ) ;^375^^^^^349^378^collapses.add ( new Collapse ( varNode, parent )  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P5_Replace_Variable]^collapses.add ( new Collapse ( varNode, replacement )  ) ;^375^^^^^349^378^collapses.add ( new Collapse ( varNode, parent )  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P7_Replace_Invocation]^collapses .add ( firstVarNode )  ;^375^^^^^349^378^collapses.add ( new Collapse ( varNode, parent )  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P8_Replace_Mix]^collapses.add ( new Collapse ( value, parent )  ) ;^375^^^^^349^378^collapses.add ( new Collapse ( varNode, parent )  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P14_Delete_Statement]^^375^^^^^349^378^collapses.add ( new Collapse ( varNode, parent )  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P5_Replace_Variable]^collapses.add ( new Collapse ( varNode, name )  ) ;^375^^^^^349^378^collapses.add ( new Collapse ( varNode, parent )  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P8_Replace_Mix]^nodesToCollapse.add ( rightValue ) ;^374^^^^^349^378^nodesToCollapse.add ( varNode ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P14_Delete_Statement]^^374^375^^^^349^378^nodesToCollapse.add ( varNode ) ; collapses.add ( new Collapse ( varNode, parent )  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P5_Replace_Variable]^collapses.add ( new Collapse ( varNode, node )  ) ;^375^^^^^349^378^collapses.add ( new Collapse ( varNode, parent )  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  hasNodesToCollapse  NodeTraversal  t  Node  assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P2_Replace_Operator]^while  ( first.getNext (  )  != null || first.getNext (  ) .getType (  )  == Token.VAR )  {^384^385^^^^381^392^while  ( first.getNext (  )  != null && first.getNext (  ) .getType (  )  == Token.VAR )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] applyCollapses [RETURN_TYPE] void   [VARIABLES] Collapse  collapse  AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P2_Replace_Operator]^while  ( first.getNext (  )  == null && first.getNext (  ) .getType (  )  == Token.VAR )  {^384^385^^^^381^392^while  ( first.getNext (  )  != null && first.getNext (  ) .getType (  )  == Token.VAR )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] applyCollapses [RETURN_TYPE] void   [VARIABLES] Collapse  collapse  AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P2_Replace_Operator]^while  ( first.getNext (  )  != null && first.getNext (  ) .getType (  )  != Token.VAR )  {^384^385^^^^381^392^while  ( first.getNext (  )  != null && first.getNext (  ) .getType (  )  == Token.VAR )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] applyCollapses [RETURN_TYPE] void   [VARIABLES] Collapse  collapse  AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P7_Replace_Invocation]^while  ( first.removeChild (  )  != null && first.getNext (  ) .getType (  )  == Token.VAR )  {^384^385^^^^381^392^while  ( first.getNext (  )  != null && first.getNext (  ) .getType (  )  == Token.VAR )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] applyCollapses [RETURN_TYPE] void   [VARIABLES] Collapse  collapse  AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P8_Replace_Mix]^while  ( parent.getNext (  )  != null && first.getNext (  ) .getType (  )  == Token.VAR )  {^384^385^^^^381^392^while  ( first.getNext (  )  != null && first.getNext (  ) .getType (  )  == Token.VAR )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] applyCollapses [RETURN_TYPE] void   [VARIABLES] Collapse  collapse  AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P5_Replace_Variable]^Node next = collapse.parent.removeChildAfter ( value ) ;^386^^^^^381^392^Node next = collapse.parent.removeChildAfter ( first ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] applyCollapses [RETURN_TYPE] void   [VARIABLES] Collapse  collapse  AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P5_Replace_Variable]^Node next = n.removeChildAfter ( first ) ;^386^^^^^381^392^Node next = collapse.parent.removeChildAfter ( first ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] applyCollapses [RETURN_TYPE] void   [VARIABLES] Collapse  collapse  AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P5_Replace_Variable]^Node next = collapse.parent.parent.removeChildAfter ( first ) ;^386^^^^^381^392^Node next = collapse.parent.removeChildAfter ( first ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] applyCollapses [RETURN_TYPE] void   [VARIABLES] Collapse  collapse  AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P5_Replace_Variable]^Node next = first.removeChildAfter ( collapse.parent ) ;^386^^^^^381^392^Node next = collapse.parent.removeChildAfter ( first ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] applyCollapses [RETURN_TYPE] void   [VARIABLES] Collapse  collapse  AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P7_Replace_Invocation]^Node next = collapse.parent.replaceChild ( first ) ;^386^^^^^381^392^Node next = collapse.parent.removeChildAfter ( first ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] applyCollapses [RETURN_TYPE] void   [VARIABLES] Collapse  collapse  AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P8_Replace_Mix]^Node next = collapse.parent.replaceChild ( node ) ;^386^^^^^381^392^Node next = collapse.parent.removeChildAfter ( first ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] applyCollapses [RETURN_TYPE] void   [VARIABLES] Collapse  collapse  AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P5_Replace_Variable]^Node next = collapse.parent.removeChildAfter ( name ) ;^386^^^^^381^392^Node next = collapse.parent.removeChildAfter ( first ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] applyCollapses [RETURN_TYPE] void   [VARIABLES] Collapse  collapse  AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P5_Replace_Variable]^Node next = name.removeChildAfter ( first ) ;^386^^^^^381^392^Node next = collapse.parent.removeChildAfter ( first ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] applyCollapses [RETURN_TYPE] void   [VARIABLES] Collapse  collapse  AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P5_Replace_Variable]^Node next = first.parent.removeChildAfter ( collapse ) ;^386^^^^^381^392^Node next = collapse.parent.removeChildAfter ( first ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] applyCollapses [RETURN_TYPE] void   [VARIABLES] Collapse  collapse  AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P8_Replace_Mix]^Node next = next.removeChildAfter ( first ) ;^386^^^^^381^392^Node next = collapse.parent.removeChildAfter ( first ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] applyCollapses [RETURN_TYPE] void   [VARIABLES] Collapse  collapse  AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P14_Delete_Statement]^^386^^^^^381^392^Node next = collapse.parent.removeChildAfter ( first ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] applyCollapses [RETURN_TYPE] void   [VARIABLES] Collapse  collapse  AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P11_Insert_Donor_Statement]^first.getNext (  ) .getType (  )  == Token.VAR )  { Node next = collapse.parent.removeChildAfter ( first ) ;Node next = collapse.parent.removeChildAfter ( first ) ;^386^^^^^381^392^Node next = collapse.parent.removeChildAfter ( first ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] applyCollapses [RETURN_TYPE] void   [VARIABLES] Collapse  collapse  AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P7_Replace_Invocation]^first.replaceChild ( next.removeChildren (  )  ) ;^389^^^^^381^392^first.addChildrenToBack ( next.removeChildren (  )  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] applyCollapses [RETURN_TYPE] void   [VARIABLES] Collapse  collapse  AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P7_Replace_Invocation]^first.addChildrenToBack ( next.removeChild (  )  ) ;^389^^^^^381^392^first.addChildrenToBack ( next.removeChildren (  )  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] applyCollapses [RETURN_TYPE] void   [VARIABLES] Collapse  collapse  AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P8_Replace_Mix]^first.addChildrenToBack ( name.removeChildren (  )  ) ;^389^^^^^381^392^first.addChildrenToBack ( next.removeChildren (  )  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] applyCollapses [RETURN_TYPE] void   [VARIABLES] Collapse  collapse  AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P14_Delete_Statement]^^389^^^^^381^392^first.addChildrenToBack ( next.removeChildren (  )  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] applyCollapses [RETURN_TYPE] void   [VARIABLES] Collapse  collapse  AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P5_Replace_Variable]^first.addChildrenToBack ( node.removeChildren (  )  ) ;^389^^^^^381^392^first.addChildrenToBack ( next.removeChildren (  )  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] applyCollapses [RETURN_TYPE] void   [VARIABLES] Collapse  collapse  AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P7_Replace_Invocation]^first.addChildrenToBack ( next .removeChild ( name )   ) ;^389^^^^^381^392^first.addChildrenToBack ( next.removeChildren (  )  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] applyCollapses [RETURN_TYPE] void   [VARIABLES] Collapse  collapse  AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P8_Replace_Mix]^first.addChildrenToBack ( n.removeChildren (  )  ) ;^389^^^^^381^392^first.addChildrenToBack ( next.removeChildren (  )  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] applyCollapses [RETURN_TYPE] void   [VARIABLES] Collapse  collapse  AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P5_Replace_Variable]^Node first = parent;^383^^^^^381^392^Node first = collapse.firstVarNode;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] applyCollapses [RETURN_TYPE] void   [VARIABLES] Collapse  collapse  AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P5_Replace_Variable]^Node first = collapse.firstVarNode.firstVarNode;^383^^^^^381^392^Node first = collapse.firstVarNode;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] applyCollapses [RETURN_TYPE] void   [VARIABLES] Collapse  collapse  AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P5_Replace_Variable]^Node first = collapse;^383^^^^^381^392^Node first = collapse.firstVarNode;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] applyCollapses [RETURN_TYPE] void   [VARIABLES] Collapse  collapse  AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P8_Replace_Mix]^Node first = name;^383^^^^^381^392^Node first = collapse.firstVarNode;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] applyCollapses [RETURN_TYPE] void   [VARIABLES] Collapse  collapse  AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P7_Replace_Invocation]^while  ( first .getParent (  )   != null && first^384^385^^^^381^392^while  ( first.getNext (  )  != null && first.getNext (  ) .getType (  )  == Token.VAR )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] applyCollapses [RETURN_TYPE] void   [VARIABLES] Collapse  collapse  AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P8_Replace_Mix]^while  ( rightValue.removeChild (  )  != null && first.getNext (  ) .getType (  )  == Token.VAR )  {^384^385^^^^381^392^while  ( first.getNext (  )  != null && first.getNext (  ) .getType (  )  == Token.VAR )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] applyCollapses [RETURN_TYPE] void   [VARIABLES] Collapse  collapse  AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P14_Delete_Statement]^^384^385^386^^^381^392^while  ( first.getNext (  )  != null && first.getNext (  ) .getType (  )  == Token.VAR )  { Node next = collapse.parent.removeChildAfter ( first ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] applyCollapses [RETURN_TYPE] void   [VARIABLES] Collapse  collapse  AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P7_Replace_Invocation]^first.removeChild (  ) .getType (  )  == Token.VAR )  {^385^^^^^381^392^first.getNext (  ) .getType (  )  == Token.VAR )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] applyCollapses [RETURN_TYPE] void   [VARIABLES] Collapse  collapse  AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P7_Replace_Invocation]^first .getParent (  )  .getType (  )  == Token.VAR )  {^385^^^^^381^392^first.getNext (  ) .getType (  )  == Token.VAR )  {^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] applyCollapses [RETURN_TYPE] void   [VARIABLES] Collapse  collapse  AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P14_Delete_Statement]^^385^386^^^^381^392^first.getNext (  ) .getType (  )  == Token.VAR )  { Node next = collapse.parent.removeChildAfter ( first ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] applyCollapses [RETURN_TYPE] void   [VARIABLES] Collapse  collapse  AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P5_Replace_Variable]^Node next = collapse.parent.removeChildAfter ( next ) ;^386^^^^^381^392^Node next = collapse.parent.removeChildAfter ( first ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] applyCollapses [RETURN_TYPE] void   [VARIABLES] Collapse  collapse  AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P5_Replace_Variable]^first.addChildrenToBack ( varNode.removeChildren (  )  ) ;^389^^^^^381^392^first.addChildrenToBack ( next.removeChildren (  )  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] applyCollapses [RETURN_TYPE] void   [VARIABLES] Collapse  collapse  AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P7_Replace_Invocation]^first .removeChildren (  )  ;^389^^^^^381^392^first.addChildrenToBack ( next.removeChildren (  )  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] applyCollapses [RETURN_TYPE] void   [VARIABLES] Collapse  collapse  AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P7_Replace_Invocation]^first.addChildrenToBack ( next .removeChild ( leftValue )   ) ;^389^^^^^381^392^first.addChildrenToBack ( next.removeChildren (  )  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] applyCollapses [RETURN_TYPE] void   [VARIABLES] Collapse  collapse  AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P8_Replace_Mix]^first.addChildrenToBack ( parent.removeChildren (  )  ) ;^389^^^^^381^392^first.addChildrenToBack ( next.removeChildren (  )  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] applyCollapses [RETURN_TYPE] void   [VARIABLES] Collapse  collapse  AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P8_Replace_Mix]^first.addChildrenToBack ( node.removeChild (  )  ) ;^389^^^^^381^392^first.addChildrenToBack ( next.removeChildren (  )  ) ;^[CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  [METHOD] applyCollapses [RETURN_TYPE] void   [VARIABLES] Collapse  collapse  AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P8_Replace_Mix]^Node firstVarNode;^74^^^^^69^79^final Node firstVarNode;^[CLASS] Collapse  [METHOD] applyCollapses [RETURN_TYPE] void   [VARIABLES] Collapse  collapse  AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P8_Replace_Mix]^Node parent;^77^^^^^72^82^final Node parent;^[CLASS] Collapse  [METHOD] applyCollapses [RETURN_TYPE] void   [VARIABLES] Collapse  collapse  AbstractCompiler  compiler  List  collapses  Set  nodesToCollapse  boolean  Node  assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode  
[P5_Replace_Variable]^this.firstVarNode = parent;^80^^^^^79^82^this.firstVarNode = firstVarNode;^[CLASS] Collapse  [METHOD] <init> [RETURN_TYPE] Node)   Node firstVarNode Node parent [VARIABLES] Node  firstVarNode  parent  boolean  
[P5_Replace_Variable]^this.parent = firstVarNode;^81^^^^^79^82^this.parent = parent;^[CLASS] Collapse  [METHOD] <init> [RETURN_TYPE] Node)   Node firstVarNode Node parent [VARIABLES] Node  firstVarNode  parent  boolean  
[P5_Replace_Variable]^if  ( !NodeUtil.isExprAssign ( exprParent )  )  {^117^^^^^116^122^if  ( !NodeUtil.isExprAssign ( expr )  )  {^[CLASS] ExploitAssigns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  expr  exprParent  
[P15_Unwrap_Block]^return ;^117^118^119^^^116^122^if  ( !NodeUtil.isExprAssign ( expr )  )  { return; }^[CLASS] ExploitAssigns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  expr  exprParent  
[P16_Remove_Block]^^117^118^119^^^116^122^if  ( !NodeUtil.isExprAssign ( expr )  )  { return; }^[CLASS] ExploitAssigns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  expr  exprParent  
[P13_Insert_Block]^if  ( ! ( isExprAssign ( expr )  )  )  {     return ; }^117^^^^^116^122^[Delete]^[CLASS] ExploitAssigns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  expr  exprParent  
[P5_Replace_Variable]^collapseAssign (  expr.getFirstChild (  ) , expr, exprParent ) ;^121^^^^^116^122^collapseAssign ( t, expr.getFirstChild (  ) , expr, exprParent ) ;^[CLASS] ExploitAssigns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  expr  exprParent  
[P5_Replace_Variable]^collapseAssign ( t, expr.getFirstChild (  ) ,  exprParent ) ;^121^^^^^116^122^collapseAssign ( t, expr.getFirstChild (  ) , expr, exprParent ) ;^[CLASS] ExploitAssigns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  expr  exprParent  
[P5_Replace_Variable]^collapseAssign ( t, expr.getFirstChild (  ) , expr ) ;^121^^^^^116^122^collapseAssign ( t, expr.getFirstChild (  ) , expr, exprParent ) ;^[CLASS] ExploitAssigns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  expr  exprParent  
[P5_Replace_Variable]^collapseAssign ( exprParent, expr.getFirstChild (  ) , expr, t ) ;^121^^^^^116^122^collapseAssign ( t, expr.getFirstChild (  ) , expr, exprParent ) ;^[CLASS] ExploitAssigns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  expr  exprParent  
[P5_Replace_Variable]^collapseAssign ( t, exprParent.getFirstChild (  ) , expr, expr ) ;^121^^^^^116^122^collapseAssign ( t, expr.getFirstChild (  ) , expr, exprParent ) ;^[CLASS] ExploitAssigns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  expr  exprParent  
[P7_Replace_Invocation]^collapseAssign ( t, expr.removeChild (  ) , expr, exprParent ) ;^121^^^^^116^122^collapseAssign ( t, expr.getFirstChild (  ) , expr, exprParent ) ;^[CLASS] ExploitAssigns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  expr  exprParent  
[P14_Delete_Statement]^^121^^^^^116^122^collapseAssign ( t, expr.getFirstChild (  ) , expr, exprParent ) ;^[CLASS] ExploitAssigns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  expr  exprParent  
[P11_Insert_Donor_Statement]^collapseAssign ( t, rightValue, expr, exprParent ) ;collapseAssign ( t, expr.getFirstChild (  ) , expr, exprParent ) ;^121^^^^^116^122^collapseAssign ( t, expr.getFirstChild (  ) , expr, exprParent ) ;^[CLASS] ExploitAssigns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  expr  exprParent  
[P11_Insert_Donor_Statement]^Node assign = expr.getFirstChild (  ) ;collapseAssign ( t, expr.getFirstChild (  ) , expr, exprParent ) ;^121^^^^^116^122^collapseAssign ( t, expr.getFirstChild (  ) , expr, exprParent ) ;^[CLASS] ExploitAssigns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  expr  exprParent  
[P5_Replace_Variable]^collapseAssign ( t, exprParent.getFirstChild (  ) , expr, exprParent ) ;^121^^^^^116^122^collapseAssign ( t, expr.getFirstChild (  ) , expr, exprParent ) ;^[CLASS] ExploitAssigns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  expr  exprParent  
[P7_Replace_Invocation]^collapseAssign ( t, expr .removeChild ( expr )  , expr, exprParent ) ;^121^^^^^116^122^collapseAssign ( t, expr.getFirstChild (  ) , expr, exprParent ) ;^[CLASS] ExploitAssigns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  expr  exprParent  
[P8_Replace_Mix]^collapseAssign ( t, exprParent.removeChild (  ) , expr, exprParent ) ;^121^^^^^116^122^collapseAssign ( t, expr.getFirstChild (  ) , expr, exprParent ) ;^[CLASS] ExploitAssigns  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  expr  exprParent  
[P5_Replace_Variable]^Node leftValue = rightValue.getFirstChild (  ) ;^129^^^^^127^141^Node leftValue = assign.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P7_Replace_Invocation]^Node leftValue = assign.removeChild (  ) ;^129^^^^^127^141^Node leftValue = assign.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P7_Replace_Invocation]^Node leftValue = assign .removeChild ( expr )  ;^129^^^^^127^141^Node leftValue = assign.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P11_Insert_Donor_Statement]^Node leftSide = next.getFirstChild (  ) ;Node leftValue = assign.getFirstChild (  ) ;^129^^^^^127^141^Node leftValue = assign.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P11_Insert_Donor_Statement]^Node assign = expr.getFirstChild (  ) ;Node leftValue = assign.getFirstChild (  ) ;^129^^^^^127^141^Node leftValue = assign.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P8_Replace_Mix]^Node leftValue = leftValue.removeChild (  ) ;^129^^^^^127^141^Node leftValue = assign.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P14_Delete_Statement]^^129^130^^^^127^141^Node leftValue = assign.getFirstChild (  ) ; Node rightValue = leftValue.getNext (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P11_Insert_Donor_Statement]^parent = next.getFirstChild (  ) ;Node leftValue = assign.getFirstChild (  ) ;^129^^^^^127^141^Node leftValue = assign.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P11_Insert_Donor_Statement]^next = parent.getFirstChild (  ) ;Node leftValue = assign.getFirstChild (  ) ;^129^^^^^127^141^Node leftValue = assign.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P11_Insert_Donor_Statement]^next = next.getFirstChild (  ) ;Node leftValue = assign.getFirstChild (  ) ;^129^^^^^127^141^Node leftValue = assign.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P7_Replace_Invocation]^Node rightValue = leftValue.removeChild (  ) ;^130^^^^^127^141^Node rightValue = leftValue.getNext (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P8_Replace_Mix]^Node rightValue = leftValue .getType (  )  ;^130^^^^^127^141^Node rightValue = leftValue.getNext (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P11_Insert_Donor_Statement]^Node next = expr.getNext (  ) ;Node rightValue = leftValue.getNext (  ) ;^130^^^^^127^141^Node rightValue = leftValue.getNext (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P5_Replace_Variable]^Node rightValue = rightValue.getNext (  ) ;^130^^^^^127^141^Node rightValue = leftValue.getNext (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P8_Replace_Mix]^Node rightValue = exprParent.removeChild (  ) ;^130^^^^^127^141^Node rightValue = leftValue.getNext (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P14_Delete_Statement]^^130^^^^^127^141^Node rightValue = leftValue.getNext (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P11_Insert_Donor_Statement]^next = leftSide.getNext (  ) ;Node rightValue = leftValue.getNext (  ) ;^130^^^^^127^141^Node rightValue = leftValue.getNext (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P2_Replace_Operator]^if  ( isCollapsibleValue ( leftValue, true )  || collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^131^132^^^^127^141^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P3_Replace_Literal]^if  ( isCollapsibleValue ( leftValue, false )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^131^132^^^^127^141^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P5_Replace_Variable]^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, rightValue, leftValue )  )  {^131^132^^^^127^141^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P5_Replace_Variable]^if  ( isCollapsibleValue (  true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^131^132^^^^127^141^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P5_Replace_Variable]^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo (  exprParent, leftValue )  )  {^131^132^^^^127^141^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P5_Replace_Variable]^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr,  leftValue )  )  {^131^132^^^^127^141^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P5_Replace_Variable]^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParen leftValue )  )  {^131^132^^^^127^141^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P5_Replace_Variable]^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( exprParent, expr, leftValue )  )  {^131^132^^^^127^141^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P5_Replace_Variable]^if  ( isCollapsibleValue ( leftValue, exprrue )  && collapseAssignEqualTo ( t, exprParent, leftValue )  )  {^131^132^^^^127^141^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P6_Replace_Expression]^if  ( isCollapsibleValue ( leftValue, true )  ) {^131^132^^^^127^141^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P6_Replace_Expression]^if  (  collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^131^132^^^^127^141^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P6_Replace_Expression]^if  ( isCollapsibleValue(rightValue, false) && collapseAssignEqualTo(expr, exprParent, rightValue) )  {^131^132^^^^127^141^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P6_Replace_Expression]^if  ( rightValue.getType() == ASSIGN )  {^131^132^^^^127^141^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P7_Replace_Invocation]^if  ( isCollapsibleValue ( leftValue, true )  && visit ( expr, exprParent, leftValue )  )  {^131^132^^^^127^141^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P13_Insert_Block]^if  (  ( isCollapsibleValue ( rightValue, false )  )  &&  ( collapseAssignEqualTo ( expr, exprParent, rightValue )  )  )  {     t.getCompiler (  ) .reportCodeChange (  ) ; }else     if  (  ( rightValue.getType (  )  )  ==  ( ASSIGN )  )  {         collapseAssign ( t, rightValue, expr, exprParent ) ;     }^131^^^^^127^141^[Delete]^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P2_Replace_Operator]^} else if  ( isCollapsibleValue ( rightValue, false )  || collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^134^135^^^^127^141^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P3_Replace_Literal]^} else if  ( isCollapsibleValue ( rightValue, true )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^134^135^^^^127^141^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P5_Replace_Variable]^} else if  ( isCollapsibleValue ( leftValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^134^135^^^^127^141^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P5_Replace_Variable]^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( rightValue, exprParent, rightValue )  )  {^134^135^^^^127^141^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P5_Replace_Variable]^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, rightValue, rightValue )  )  {^134^135^^^^127^141^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P5_Replace_Variable]^} else if  ( isCollapsibleValue (  false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^134^135^^^^127^141^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P5_Replace_Variable]^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo (  exprParent, rightValue )  )  {^134^135^^^^127^141^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P5_Replace_Variable]^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr,  rightValue )  )  {^134^135^^^^127^141^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P5_Replace_Variable]^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParen rightValue )  )  {^134^135^^^^127^141^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P5_Replace_Variable]^} else if  ( isCollapsibleValue ( exprParent, false )  && collapseAssignEqualTo ( expr, rightValue, rightValue )  )  {^134^135^^^^127^141^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P5_Replace_Variable]^} else if  ( isCollapsibleValue ( expr, false )  && collapseAssignEqualTo ( rightValue, exprParent, rightValue )  )  {^134^135^^^^127^141^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P6_Replace_Expression]^} else if  ( isCollapsibleValue ( rightValue, false )  ) {^134^135^^^^127^141^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P6_Replace_Expression]^} else if  (  collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^134^135^^^^127^141^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P6_Replace_Expression]^} else if  ( rightValue.getType() == ASSIGN )  {^134^135^^^^127^141^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P6_Replace_Expression]^} else {^134^135^^^^127^141^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P7_Replace_Invocation]^} else if  ( isCollapsibleValue ( rightValue, false )  && visit ( expr, exprParent, rightValue )  )  {^134^135^^^^127^141^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P8_Replace_Mix]^}  if  ( isCollapsibleValue ( rightValue, true )  && collapseAssignEqualTo ( rightValue, exprParent, rightValue )  )  {^134^135^^^^127^141^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P2_Replace_Operator]^} else if  ( rightValue.getType (  )  <= Token.ASSIGN )  {^137^^^^^127^141^} else if  ( rightValue.getType (  )  == Token.ASSIGN )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P5_Replace_Variable]^} else if  ( leftValue.getType (  )  == Token.ASSIGN )  {^137^^^^^127^141^} else if  ( rightValue.getType (  )  == Token.ASSIGN )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P6_Replace_Expression]^} else {^137^^^^^127^141^} else if  ( rightValue.getType (  )  == Token.ASSIGN )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P7_Replace_Invocation]^} else if  ( rightValue.removeChild (  )  == Token.ASSIGN )  {^137^^^^^127^141^} else if  ( rightValue.getType (  )  == Token.ASSIGN )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P15_Unwrap_Block]^collapseAssign(t, rightValue, expr, exprParent);^137^138^139^140^^127^141^} else if  ( rightValue.getType (  )  == Token.ASSIGN )  {  collapseAssign ( t, rightValue, expr, exprParent ) ; }^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P16_Remove_Block]^^137^138^139^140^^127^141^} else if  ( rightValue.getType (  )  == Token.ASSIGN )  {  collapseAssign ( t, rightValue, expr, exprParent ) ; }^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P5_Replace_Variable]^collapseAssign ( t, leftValue, expr, exprParent ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P5_Replace_Variable]^collapseAssign ( t, rightValue, leftValue, exprParent ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P5_Replace_Variable]^collapseAssign (  rightValue, expr, exprParent ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P5_Replace_Variable]^collapseAssign ( t,  expr, exprParent ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P5_Replace_Variable]^collapseAssign ( t, rightValue,  exprParent ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P5_Replace_Variable]^collapseAssign ( t, rightValue, expr ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P5_Replace_Variable]^collapseAssign ( rightValue, t, expr, exprParent ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P5_Replace_Variable]^collapseAssign ( t, exprParent, expr, rightValue ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P5_Replace_Variable]^collapseAssign ( t, expr, rightValue, exprParent ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P5_Replace_Variable]^collapseAssign ( t, rightValue, exprParent, expr ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P8_Replace_Mix]^collapseAssign ( t, rightValue, expr, leftValue ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P14_Delete_Statement]^^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P11_Insert_Donor_Statement]^collapseAssign ( t, expr.getFirstChild (  ) , expr, exprParent ) ;collapseAssign ( t, rightValue, expr, exprParent ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P7_Replace_Invocation]^} else if  ( rightValue .getNext (  )   == Token.ASSIGN )  {^137^^^^^127^141^} else if  ( rightValue.getType (  )  == Token.ASSIGN )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P5_Replace_Variable]^collapseAssign ( t, rightValue, rightValue, exprParent ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P5_Replace_Variable]^collapseAssign ( exprParent, rightValue, expr, t ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P8_Replace_Mix]^t.getCompiler (  )  .getType (  )  ;^136^^^^^127^141^t.getCompiler (  ) .reportCodeChange (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P14_Delete_Statement]^^136^^^^^127^141^t.getCompiler (  ) .reportCodeChange (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P2_Replace_Operator]^} else if  ( rightValue.getType (  )  >= Token.ASSIGN )  {^137^^^^^127^141^} else if  ( rightValue.getType (  )  == Token.ASSIGN )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P5_Replace_Variable]^collapseAssign ( t, rightValue, expr, rightValue ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P5_Replace_Variable]^collapseAssignEqualTo ( rightValue, exprParent, rightValue )  )  {^135^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P5_Replace_Variable]^collapseAssignEqualTo ( expr, leftValue, rightValue )  )  {^135^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P5_Replace_Variable]^collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^135^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P5_Replace_Variable]^collapseAssignEqualTo (  exprParent, rightValue )  )  {^135^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P5_Replace_Variable]^collapseAssignEqualTo ( expr,  rightValue )  )  {^135^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P5_Replace_Variable]^collapseAssignEqualTo ( expr, exprParent )  )  {^135^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P5_Replace_Variable]^collapseAssignEqualTo ( rightValue, exprParent, expr )  )  {^135^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P5_Replace_Variable]^collapseAssignEqualTo ( exprParent, expr, rightValue )  )  {^135^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P7_Replace_Invocation]^visit ( expr, exprParent, rightValue )  )  {^135^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P14_Delete_Statement]^^135^136^^^^127^141^collapseAssignEqualTo ( expr, exprParent, rightValue )  )  { t.getCompiler (  ) .reportCodeChange (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P14_Delete_Statement]^^133^^^^^127^141^t.getCompiler (  ) .reportCodeChange (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P5_Replace_Variable]^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( leftValue, exprParent, rightValue )  )  {^134^135^^^^127^141^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P5_Replace_Variable]^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( exprParent, expr, rightValue )  )  {^134^135^^^^127^141^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P8_Replace_Mix]^} else if  ( isCollapsibleValue ( rightValue, true )  ) {^134^135^^^^127^141^} else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P8_Replace_Mix]^}  if  ( leftValue.removeChild (  )  == Token.ASSIGN )  {^137^^^^^127^141^} else if  ( rightValue.getType (  )  == Token.ASSIGN )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P8_Replace_Mix]^} else if  ( leftValue.removeChild (  )  == Token.ASSIGN )  {^137^^^^^127^141^} else if  ( rightValue.getType (  )  == Token.ASSIGN )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P5_Replace_Variable]^collapseAssign ( expr, rightValue, t, exprParent ) ;^139^^^^^127^141^collapseAssign ( t, rightValue, expr, exprParent ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P2_Replace_Operator]^} else if  ( rightValue.getType (  )  != Token.ASSIGN )  {^137^^^^^127^141^} else if  ( rightValue.getType (  )  == Token.ASSIGN )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P5_Replace_Variable]^} else if  ( exprParent.getType (  )  == Token.ASSIGN )  {^137^^^^^127^141^} else if  ( rightValue.getType (  )  == Token.ASSIGN )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P5_Replace_Variable]^if  ( isCollapsibleValue ( rightValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^131^132^^^^127^141^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P8_Replace_Mix]^if  ( isCollapsibleValue ( exprParent, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^131^132^^^^127^141^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P5_Replace_Variable]^collapseAssignEqualTo ( rightValue, exprParent, leftValue )  )  {^132^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P5_Replace_Variable]^collapseAssignEqualTo ( expr, rightValue, leftValue )  )  {^132^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P5_Replace_Variable]^collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^132^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P5_Replace_Variable]^collapseAssignEqualTo (  exprParent, leftValue )  )  {^132^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P5_Replace_Variable]^collapseAssignEqualTo ( expr,  leftValue )  )  {^132^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P5_Replace_Variable]^collapseAssignEqualTo ( expr, exprParent )  )  {^132^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P5_Replace_Variable]^collapseAssignEqualTo ( exprParent, expr, leftValue )  )  {^132^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P5_Replace_Variable]^collapseAssignEqualTo ( leftValue, exprParent, expr )  )  {^132^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P7_Replace_Invocation]^visit ( expr, exprParent, leftValue )  )  {^132^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P8_Replace_Mix]^visit ( expr, rightValue, leftValue )  )  {^132^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P14_Delete_Statement]^^132^133^^^^127^141^collapseAssignEqualTo ( expr, exprParent, leftValue )  )  { t.getCompiler (  ) .reportCodeChange (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P7_Replace_Invocation]^t.getCompiler (  )  .getType (  )  ;^133^^^^^127^141^t.getCompiler (  ) .reportCodeChange (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P5_Replace_Variable]^collapseAssignEqualTo ( expr, rightValue, rightValue )  )  {^135^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P5_Replace_Variable]^collapseAssignEqualTo ( expr, rightValue, exprParent )  )  {^135^^^^^127^141^collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssign [RETURN_TYPE] void   NodeTraversal t Node assign Node expr Node exprParent [VARIABLES] boolean  NodeTraversal  t  Node  assign  expr  exprParent  leftValue  rightValue  
[P2_Replace_Operator]^return !isLValue && value.getFirstChild (  ) .getType (  )  == Token.THIS;^164^^^^^157^176^return !isLValue || value.getFirstChild (  ) .getType (  )  == Token.THIS;^[CLASS] ExploitAssigns  [METHOD] isCollapsibleValue [RETURN_TYPE] boolean   Node value boolean isLValue [VARIABLES] boolean  isLValue  Node  value  
[P2_Replace_Operator]^return !isLValue || value.getFirstChild (  ) .getType (  )  != Token.THIS;^164^^^^^157^176^return !isLValue || value.getFirstChild (  ) .getType (  )  == Token.THIS;^[CLASS] ExploitAssigns  [METHOD] isCollapsibleValue [RETURN_TYPE] boolean   Node value boolean isLValue [VARIABLES] boolean  isLValue  Node  value  
[P7_Replace_Invocation]^return !isLValue || value.removeChild (  ) .getType (  )  == Token.THIS;^164^^^^^157^176^return !isLValue || value.getFirstChild (  ) .getType (  )  == Token.THIS;^[CLASS] ExploitAssigns  [METHOD] isCollapsibleValue [RETURN_TYPE] boolean   Node value boolean isLValue [VARIABLES] boolean  isLValue  Node  value  
[P7_Replace_Invocation]^return !isLValue || value .removeChild ( value )  .getType (  )  == Token.THIS;^164^^^^^157^176^return !isLValue || value.getFirstChild (  ) .getType (  )  == Token.THIS;^[CLASS] ExploitAssigns  [METHOD] isCollapsibleValue [RETURN_TYPE] boolean   Node value boolean isLValue [VARIABLES] boolean  isLValue  Node  value  
[P8_Replace_Mix]^returnisLValue ;^164^^^^^157^176^return !isLValue || value.getFirstChild (  ) .getType (  )  == Token.THIS;^[CLASS] ExploitAssigns  [METHOD] isCollapsibleValue [RETURN_TYPE] boolean   Node value boolean isLValue [VARIABLES] boolean  isLValue  Node  value  
[P3_Replace_Literal]^return false;^172^^^^^157^176^return true;^[CLASS] ExploitAssigns  [METHOD] isCollapsibleValue [RETURN_TYPE] boolean   Node value boolean isLValue [VARIABLES] boolean  isLValue  Node  value  
[P7_Replace_Invocation]^switch  ( value.removeChild (  )  )  {^158^^^^^157^176^switch  ( value.getType (  )  )  {^[CLASS] ExploitAssigns  [METHOD] isCollapsibleValue [RETURN_TYPE] boolean   Node value boolean isLValue [VARIABLES] boolean  isLValue  Node  value  
[P7_Replace_Invocation]^switch  ( value .getNext (  )   )  {^158^^^^^157^176^switch  ( value.getType (  )  )  {^[CLASS] ExploitAssigns  [METHOD] isCollapsibleValue [RETURN_TYPE] boolean   Node value boolean isLValue [VARIABLES] boolean  isLValue  Node  value  
[P14_Delete_Statement]^^164^^^^^157^176^return !isLValue || value.getFirstChild (  ) .getType (  )  == Token.THIS;^[CLASS] ExploitAssigns  [METHOD] isCollapsibleValue [RETURN_TYPE] boolean   Node value boolean isLValue [VARIABLES] boolean  isLValue  Node  value  
[P3_Replace_Literal]^return true;^175^^^^^157^176^return false;^[CLASS] ExploitAssigns  [METHOD] isCollapsibleValue [RETURN_TYPE] boolean   Node value boolean isLValue [VARIABLES] boolean  isLValue  Node  value  
[P5_Replace_Variable]^Node assign = value.getFirstChild (  ) ;^195^^^^^180^210^Node assign = expr.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^Node assign = expr.removeChild (  ) ;^195^^^^^180^210^Node assign = expr.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^Node assign = expr .removeChild ( expr )  ;^195^^^^^180^210^Node assign = expr.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P8_Replace_Mix]^Node assign = parent.removeChild (  ) ;^195^^^^^180^210^Node assign = expr.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P11_Insert_Donor_Statement]^Node leftSide = next.getFirstChild (  ) ;Node assign = expr.getFirstChild (  ) ;^195^^^^^180^210^Node assign = expr.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P11_Insert_Donor_Statement]^Node next = expr.getNext (  ) ;Node assign = expr.getFirstChild (  ) ;^195^^^^^180^210^Node assign = expr.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P11_Insert_Donor_Statement]^Node leftValue = assign.getFirstChild (  ) ;Node assign = expr.getFirstChild (  ) ;^195^^^^^180^210^Node assign = expr.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^Node assign = next.getFirstChild (  ) ;^195^^^^^180^210^Node assign = expr.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P14_Delete_Statement]^^195^^^^^180^210^Node assign = expr.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P11_Insert_Donor_Statement]^parent = next.getFirstChild (  ) ;Node assign = expr.getFirstChild (  ) ;^195^^^^^180^210^Node assign = expr.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P11_Insert_Donor_Statement]^collapseAssign ( t, expr.getFirstChild (  ) , expr, exprParent ) ;Node assign = expr.getFirstChild (  ) ;^195^^^^^180^210^Node assign = expr.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P11_Insert_Donor_Statement]^next = parent.getFirstChild (  ) ;Node assign = expr.getFirstChild (  ) ;^195^^^^^180^210^Node assign = expr.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P11_Insert_Donor_Statement]^next = next.getFirstChild (  ) ;Node assign = expr.getFirstChild (  ) ;^195^^^^^180^210^Node assign = expr.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^Node parent = value;^196^^^^^181^211^Node parent = exprParent;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P8_Replace_Mix]^Node parent = next;^196^^^^^181^211^Node parent = exprParent;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^Node next = value.getNext (  ) ;^197^^^^^182^212^Node next = expr.getNext (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^Node next = expr.removeChild (  ) ;^197^^^^^182^212^Node next = expr.getNext (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P8_Replace_Mix]^Node next = parent.getNext (  ) ;^197^^^^^182^212^Node next = expr.getNext (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P11_Insert_Donor_Statement]^Node leftSide = next.getFirstChild (  ) ;Node next = expr.getNext (  ) ;^197^^^^^182^212^Node next = expr.getNext (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P11_Insert_Donor_Statement]^Node rightValue = leftValue.getNext (  ) ;Node next = expr.getNext (  ) ;^197^^^^^182^212^Node next = expr.getNext (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P11_Insert_Donor_Statement]^Node assign = expr.getFirstChild (  ) ;Node next = expr.getNext (  ) ;^197^^^^^182^212^Node next = expr.getNext (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^Node next = next.getNext (  ) ;^197^^^^^182^212^Node next = expr.getNext (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P14_Delete_Statement]^^197^^^^^182^212^Node next = expr.getNext (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P11_Insert_Donor_Statement]^next = leftSide.getNext (  ) ;Node next = expr.getNext (  ) ;^197^^^^^182^212^Node next = expr.getNext (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P2_Replace_Operator]^while  ( next == null )  {^198^^^^^183^213^while  ( next != null )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^while  ( value != null )  {^198^^^^^183^213^while  ( next != null )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^if  ( value.getFirstChild (  ) .hasChildren (  )  )  {^212^^^^^197^227^if  ( next.getFirstChild (  ) .hasChildren (  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^if  ( next.removeChild (  ) .hasChildren (  )  )  {^212^^^^^197^227^if  ( next.getFirstChild (  ) .hasChildren (  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^if  ( next .removeChild ( parent )  .hasChildren (  )  )  {^212^^^^^197^227^if  ( next.getFirstChild (  ) .hasChildren (  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P8_Replace_Mix]^if  ( leftSide .removeChild ( next )  .hasChildren (  )  )  {^212^^^^^197^227^if  ( next.getFirstChild (  ) .hasChildren (  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P15_Unwrap_Block]^parent = next.getFirstChild(); next = parent.getFirstChild(); break;^212^213^214^215^216^197^227^if  ( next.getFirstChild (  ) .hasChildren (  )  )  { parent = next.getFirstChild (  ) ; next = parent.getFirstChild (  ) ; break; }^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P16_Remove_Block]^^212^213^214^215^216^197^227^if  ( next.getFirstChild (  ) .hasChildren (  )  )  { parent = next.getFirstChild (  ) ; next = parent.getFirstChild (  ) ; break; }^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^parent = parent.getFirstChild (  ) ;^213^^^^^198^228^parent = next.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^parent = next.removeChild (  ) ;^213^^^^^198^228^parent = next.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P8_Replace_Mix]^parent =  value.getFirstChild (  ) ;^213^^^^^198^228^parent = next.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P11_Insert_Donor_Statement]^next = parent.getFirstChild (  ) ;parent = next.getFirstChild (  ) ;^213^^^^^198^228^parent = next.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P11_Insert_Donor_Statement]^next = next.getFirstChild (  ) ;parent = next.getFirstChild (  ) ;^213^^^^^198^228^parent = next.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^next = leftSide.getFirstChild (  ) ;^214^^^^^199^229^next = parent.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^next = parent.removeChild (  ) ;^214^^^^^199^229^next = parent.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P8_Replace_Mix]^next =  value.getFirstChild (  ) ;^214^^^^^199^229^next = parent.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P11_Insert_Donor_Statement]^parent = next.getFirstChild (  ) ;next = parent.getFirstChild (  ) ;^214^^^^^199^229^next = parent.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P11_Insert_Donor_Statement]^next = next.getFirstChild (  ) ;next = parent.getFirstChild (  ) ;^214^^^^^199^229^next = parent.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^parent = next .removeChild ( value )  ;^213^^^^^198^228^parent = next.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P14_Delete_Statement]^^213^214^^^^198^228^parent = next.getFirstChild (  ) ; next = parent.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P11_Insert_Donor_Statement]^Node leftSide = next.getFirstChild (  ) ;parent = next.getFirstChild (  ) ;^213^^^^^198^228^parent = next.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P11_Insert_Donor_Statement]^Node leftValue = assign.getFirstChild (  ) ;parent = next.getFirstChild (  ) ;^213^^^^^198^228^parent = next.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P11_Insert_Donor_Statement]^Node assign = expr.getFirstChild (  ) ;parent = next.getFirstChild (  ) ;^213^^^^^198^228^parent = next.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^next = parent .removeChild ( leftSide )  ;^214^^^^^199^229^next = parent.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P8_Replace_Mix]^next = leftSide.removeChild (  ) ;^214^^^^^199^229^next = parent.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P14_Delete_Statement]^^214^215^^^^199^229^next = parent.getFirstChild (  ) ; break;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P11_Insert_Donor_Statement]^Node leftSide = next.getFirstChild (  ) ;next = parent.getFirstChild (  ) ;^214^^^^^199^229^next = parent.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P11_Insert_Donor_Statement]^Node leftValue = assign.getFirstChild (  ) ;next = parent.getFirstChild (  ) ;^214^^^^^199^229^next = parent.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P11_Insert_Donor_Statement]^exprParent.removeChild ( expr ) ;next = parent.getFirstChild (  ) ;^214^^^^^199^229^next = parent.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P11_Insert_Donor_Statement]^Node assign = expr.getFirstChild (  ) ;next = parent.getFirstChild (  ) ;^214^^^^^199^229^next = parent.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^if  ( parent.isQualifiedName (  )  )  {^221^^^^^206^236^if  ( next.isQualifiedName (  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^if  ( next.isEquivalentTo (  )  )  {^221^^^^^206^236^if  ( next.isQualifiedName (  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P8_Replace_Mix]^if  ( leftSide.isQualifiedName (  )  )  {^221^^^^^206^236^if  ( next.isQualifiedName (  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P2_Replace_Operator]^if  ( value.isQualifiedName (  )  || nextName.equals ( value.getQualifiedName (  )  )  )  {^223^224^^^^208^238^if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^if  ( parent.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^223^224^^^^208^238^if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^if  ( value.isQualifiedName (  )  && valueName.equals ( value.getQualifiedName (  )  )  )  {^223^224^^^^208^238^if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P6_Replace_Expression]^if  ( value.isQualifiedName (  )  ) {^223^224^^^^208^238^if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P6_Replace_Expression]^if  (  nextName.equals ( value.getQualifiedName (  )  )  )  {^223^224^^^^208^238^if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^if  ( value.isEquivalentTo (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^223^224^^^^208^238^if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^if  ( value.isQualifiedName (  )  && nextName.equals ( value.removeChild (  )  )  )  {^223^224^^^^208^238^if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P8_Replace_Mix]^if  ( value.isEquivalentTo (  )  && valueName.equals ( value.getQualifiedName (  )  )  )  {^223^224^^^^208^238^if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^if  ( !isSafeReplacement ( value, assign )  )  {^230^^^^^223^238^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^if  ( !isSafeReplacement ( next, parent )  )  {^230^^^^^223^238^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^if  ( !isSafeReplacement (  assign )  )  {^230^^^^^223^238^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^if  ( !isSafeReplacement ( next )  )  {^230^^^^^223^238^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^if  ( !isSafeReplacement ( assign, next )  )  {^230^^^^^223^238^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P8_Replace_Mix]^if  ( !isSafeReplacement ( next, value )  )  {^230^^^^^223^238^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P15_Unwrap_Block]^return false;^230^231^232^^^223^238^if  ( !isSafeReplacement ( next, assign )  )  { return false; }^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P16_Remove_Block]^^230^231^232^^^223^238^if  ( !isSafeReplacement ( next, assign )  )  { return false; }^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P3_Replace_Literal]^return true;^231^^^^^223^238^return false;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P3_Replace_Literal]^return false;^237^^^^^223^238^return true;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P13_Insert_Block]^if  ( ! ( isSafeReplacement ( next, assign )  )  )  {     return false; }^230^^^^^223^238^[Delete]^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^exprParent.removeChild ( parent ) ;^234^^^^^223^238^exprParent.removeChild ( expr ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^exprParent.replaceChild ( expr ) ;^234^^^^^223^238^exprParent.removeChild ( expr ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P8_Replace_Mix]^exprParent.removeChild ( value ) ;^234^^^^^223^238^exprParent.removeChild ( expr ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P14_Delete_Statement]^^234^^^^^223^238^exprParent.removeChild ( expr ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P11_Insert_Donor_Statement]^expr.removeChild ( assign ) ;exprParent.removeChild ( expr ) ;^234^^^^^223^238^exprParent.removeChild ( expr ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P11_Insert_Donor_Statement]^next = parent.getFirstChild (  ) ;exprParent.removeChild ( expr ) ;^234^^^^^223^238^exprParent.removeChild ( expr ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P11_Insert_Donor_Statement]^parent.replaceChild ( next, assign ) ;exprParent.removeChild ( expr ) ;^234^^^^^223^238^exprParent.removeChild ( expr ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^expr.removeChild ( value ) ;^235^^^^^223^238^expr.removeChild ( assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^expr.replaceChild ( assign ) ;^235^^^^^223^238^expr.removeChild ( assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P14_Delete_Statement]^^235^^^^^223^238^expr.removeChild ( assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P11_Insert_Donor_Statement]^exprParent.removeChild ( expr ) ;expr.removeChild ( assign ) ;^235^^^^^223^238^expr.removeChild ( assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P11_Insert_Donor_Statement]^parent.replaceChild ( next, assign ) ;expr.removeChild ( assign ) ;^235^^^^^223^238^expr.removeChild ( assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^parent.replaceChild ( parent, assign ) ;^236^^^^^223^238^parent.replaceChild ( next, assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^parent.replaceChild ( next, value ) ;^236^^^^^223^238^parent.replaceChild ( next, assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^parent.replaceChild (  assign ) ;^236^^^^^223^238^parent.replaceChild ( next, assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^parent.replaceChild ( next ) ;^236^^^^^223^238^parent.replaceChild ( next, assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^parent.replaceChild ( assign, next ) ;^236^^^^^223^238^parent.replaceChild ( next, assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P14_Delete_Statement]^^236^^^^^223^238^parent.replaceChild ( next, assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P11_Insert_Donor_Statement]^expr.removeChild ( assign ) ;parent.replaceChild ( next, assign ) ;^236^^^^^223^238^parent.replaceChild ( next, assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P11_Insert_Donor_Statement]^exprParent.removeChild ( expr ) ;parent.replaceChild ( next, assign ) ;^236^^^^^223^238^parent.replaceChild ( next, assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P12_Insert_Condition]^if  ( !isSafeReplacement ( next, assign )  )  { parent.replaceChild ( next, assign ) ; }^236^^^^^223^238^parent.replaceChild ( next, assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^if  ( !isSafeReplacement ( value, assign )  )  {^230^^^^^215^245^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^if  ( !isSafeReplacement ( next, parent )  )  {^230^^^^^215^245^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^if  ( !isSafeReplacement (  assign )  )  {^230^^^^^215^245^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^if  ( !isSafeReplacement ( next )  )  {^230^^^^^215^245^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^if  ( !isSafeReplacement ( assign, next )  )  {^230^^^^^215^245^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P15_Unwrap_Block]^return false;^230^231^232^^^215^245^if  ( !isSafeReplacement ( next, assign )  )  { return false; }^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P16_Remove_Block]^^230^231^232^^^215^245^if  ( !isSafeReplacement ( next, assign )  )  { return false; }^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P3_Replace_Literal]^return true;^231^^^^^216^246^return false;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P3_Replace_Literal]^return false;^237^^^^^222^252^return true;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P1_Replace_Type]^char nextName = next.getQualifiedName (  ) ;^222^^^^^207^237^String nextName = next.getQualifiedName (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^String parentName = next.getQualifiedName (  ) ;^222^^^^^207^237^String nextName = next.getQualifiedName (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^String nextName = next.removeChild (  ) ;^222^^^^^207^237^String nextName = next.getQualifiedName (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P8_Replace_Mix]^String leftSideName = next.getQualifiedName (  ) ;^222^^^^^207^237^String nextName = next.getQualifiedName (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P12_Insert_Condition]^if  ( next.isQualifiedName (  )  )  { String nextName = next.getQualifiedName (  ) ; }^222^^^^^207^237^String nextName = next.getQualifiedName (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^String nextName = next .isQualifiedName (  )  ;^222^^^^^207^237^String nextName = next.getQualifiedName (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^if  ( leftSide.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^223^224^^^^208^238^if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^nextName.equals ( next.getQualifiedName (  )  )  )  {^224^^^^^209^239^nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^nextName.equals ( value.removeChild (  )  )  )  {^224^^^^^209^239^nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^nextName.equals ( value .isQualifiedName (  )   )  )  {^224^^^^^209^239^nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P8_Replace_Mix]^nextName.equals ( parent.getQualifiedName (  )  )  )  {^224^^^^^209^239^nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P8_Replace_Mix]^if  ( !isSafeReplacement ( parent, assign )  )  {^230^^^^^215^245^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P13_Insert_Block]^if  ( ! ( isSafeReplacement ( next, assign )  )  )  {     return false; }^230^^^^^215^245^[Delete]^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^exprParent.removeChild ( parent ) ;^234^^^^^219^249^exprParent.removeChild ( expr ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^exprParent.replaceChild ( expr ) ;^234^^^^^219^249^exprParent.removeChild ( expr ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^exprParent .replaceChild ( expr , next )  ;^234^^^^^219^249^exprParent.removeChild ( expr ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P8_Replace_Mix]^exprParent.replaceChild ( parent ) ;^234^^^^^219^249^exprParent.removeChild ( expr ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P14_Delete_Statement]^^234^^^^^219^249^exprParent.removeChild ( expr ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P11_Insert_Donor_Statement]^expr.removeChild ( assign ) ;exprParent.removeChild ( expr ) ;^234^^^^^219^249^exprParent.removeChild ( expr ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P11_Insert_Donor_Statement]^next = parent.getFirstChild (  ) ;exprParent.removeChild ( expr ) ;^234^^^^^219^249^exprParent.removeChild ( expr ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P11_Insert_Donor_Statement]^parent.replaceChild ( next, assign ) ;exprParent.removeChild ( expr ) ;^234^^^^^219^249^exprParent.removeChild ( expr ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^expr.removeChild ( value ) ;^235^^^^^220^250^expr.removeChild ( assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^expr.replaceChild ( assign ) ;^235^^^^^220^250^expr.removeChild ( assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^expr .replaceChild ( next , value )  ;^235^^^^^220^250^expr.removeChild ( assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P8_Replace_Mix]^expr.removeChild ( parent ) ;^235^^^^^220^250^expr.removeChild ( assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P14_Delete_Statement]^^235^236^^^^220^250^expr.removeChild ( assign ) ; parent.replaceChild ( next, assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P11_Insert_Donor_Statement]^exprParent.removeChild ( expr ) ;expr.removeChild ( assign ) ;^235^^^^^220^250^expr.removeChild ( assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P11_Insert_Donor_Statement]^parent.replaceChild ( next, assign ) ;expr.removeChild ( assign ) ;^235^^^^^220^250^expr.removeChild ( assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^parent.replaceChild ( value, assign ) ;^236^^^^^221^251^parent.replaceChild ( next, assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^parent.replaceChild ( next, value ) ;^236^^^^^221^251^parent.replaceChild ( next, assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^parent.replaceChild (  assign ) ;^236^^^^^221^251^parent.replaceChild ( next, assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^parent.replaceChild ( next ) ;^236^^^^^221^251^parent.replaceChild ( next, assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^parent.replaceChild ( assign, next ) ;^236^^^^^221^251^parent.replaceChild ( next, assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P14_Delete_Statement]^^236^^^^^221^251^parent.replaceChild ( next, assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P11_Insert_Donor_Statement]^expr.removeChild ( assign ) ;parent.replaceChild ( next, assign ) ;^236^^^^^221^251^parent.replaceChild ( next, assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P11_Insert_Donor_Statement]^exprParent.removeChild ( expr ) ;parent.replaceChild ( next, assign ) ;^236^^^^^221^251^parent.replaceChild ( next, assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^if  ( nextName.isQualifiedName (  )  && value.equals ( value.getQualifiedName (  )  )  )  {^223^224^^^^208^238^if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^if  ( next.isQualifiedName (  )  && valueName.equals ( value.getQualifiedName (  )  )  )  {^223^224^^^^208^238^if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P8_Replace_Mix]^if  ( parent.isQualifiedName (  )  ) {^223^224^^^^208^238^if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^expr.removeChild ( parent ) ;^235^^^^^223^238^expr.removeChild ( assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^parent.replaceChild ( next, next ) ;^236^^^^^223^238^parent.replaceChild ( next, assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^parent .removeChild ( expr )  ;^236^^^^^223^238^parent.replaceChild ( next, assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P14_Delete_Statement]^^236^237^^^^223^238^parent.replaceChild ( next, assign ) ; return true;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^if  ( !isSafeReplacement ( next, value )  )  {^230^^^^^215^245^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P2_Replace_Operator]^if  ( value.getType (  )  != next.getType (  )  )  {^247^^^^^232^262^if  ( value.getType (  )  == next.getType (  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P2_Replace_Operator]^if  ( value.getType (  )  <= next.getType (  )  )  {^247^^^^^232^262^if  ( value.getType (  )  == next.getType (  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^if  ( parent.getType (  )  == next.getType (  )  )  {^247^^^^^232^262^if  ( value.getType (  )  == next.getType (  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^if  ( value.getType (  )  == parent.getType (  )  )  {^247^^^^^232^262^if  ( value.getType (  )  == next.getType (  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P6_Replace_Expression]^if  ( (next.getType() == STRING) || (next.getType() == NUMBER) && !(next.isEquivalentTo(value)) )  {^247^^^^^232^262^if  ( value.getType (  )  == next.getType (  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P6_Replace_Expression]^if  ( (next.getType() == STRING || next.getType() == NUMBER) )  {^247^^^^^232^262^if  ( value.getType (  )  == next.getType (  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P6_Replace_Expression]^if  ( next.getType (  )  == STRING )  {^247^^^^^232^262^if  ( value.getType (  )  == next.getType (  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P6_Replace_Expression]^if  ( next.getType (  )  == NUMBER )  {^247^^^^^232^262^if  ( value.getType (  )  == next.getType (  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^if  ( value.removeChild (  )  == next.getType (  )  )  {^247^^^^^232^262^if  ( value.getType (  )  == next.getType (  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P8_Replace_Mix]^if  ( value.getType (  )  == value.getType (  )  )  {^247^^^^^232^262^if  ( value.getType (  )  == next.getType (  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P15_Unwrap_Block]^if ((((next.getType()) == (com.google.javascript.rhino.Token.STRING)) || ((next.getType()) == (com.google.javascript.rhino.Token.NUMBER))) && (!(next.isEquivalentTo(value)))) {    return false;}; exprParent.removeChild(expr); expr.removeChild(assign); parent.replaceChild(next, assign); return true;^247^248^249^250^251^232^262^if  ( value.getType (  )  == next.getType (  )  )  { if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  { return false; }^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P16_Remove_Block]^^247^248^249^250^251^232^262^if  ( value.getType (  )  == next.getType (  )  )  { if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  { return false; }^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P13_Insert_Block]^if  (  ( value.isQualifiedName (  )  )  &&  ( nextName.equals ( value.getQualifiedName (  )  )  )  )  {     if  ( ! ( isSafeReplacement ( next, assign )  )  )  {         return false;     }     exprParent.removeChild ( expr ) ;     expr.removeChild ( assign ) ;     parent.replaceChild ( next, assign ) ;     return true; }^247^^^^^232^262^[Delete]^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P13_Insert_Block]^if  (  (  (  ( next.getType (  )  )  ==  ( STRING )  )  ||  (  ( next.getType (  )  )  ==  ( NUMBER )  )  )  &&  ( ! ( next.isEquivalentTo ( value )  )  )  )  {     return false; }^247^^^^^232^262^[Delete]^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P2_Replace_Operator]^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  || !next.isEquivalentTo ( value )  )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P2_Replace_Operator]^if  (  ( next.getType (  )  == Token.STRING && next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P2_Replace_Operator]^if  (  ( next.getType (  )  >= Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P2_Replace_Operator]^if  (  ( next.getType (  )  != Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^if  (  ( parent.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( leftSide )  )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.null )  && !next.isEquivalentTo ( value )  )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^if  (  ( value.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( next )  )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P6_Replace_Expression]^if  (  ( next.getType (  )  == Token.STRING ) {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P6_Replace_Expression]^if  (  next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P6_Replace_Expression]^if  ( (next.getType() == STRING || next.getType() == NUMBER) )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P6_Replace_Expression]^if  ( next.getType (  )  == STRING )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P6_Replace_Expression]^if  ( next.getType (  )  == NUMBER )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^if  (  ( next.removeChild (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^if  (  ( next .getNext (  )   == Token.STRING || next^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.replaceChild ( value )  )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next .isQualifiedName (  )   )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P15_Unwrap_Block]^return false;^248^249^250^251^252^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  { return false; }^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P16_Remove_Block]^^248^249^250^251^252^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  { return false; }^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P13_Insert_Block]^if  (  ( value.getType (  )  )  ==  ( next.getType (  )  )  )  {     if  (  (  (  ( next.getType (  )  )  ==  ( STRING )  )  ||  (  ( next.getType (  )  )  ==  ( NUMBER )  )  )  &&  ( ! ( next.isEquivalentTo ( value )  )  )  )  {         return false;     }     exprParent.removeChild ( expr ) ;     expr.removeChild ( assign ) ;     parent.replaceChild ( next, assign ) ;     return true; }^248^^^^^233^263^[Delete]^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P3_Replace_Literal]^return true;^251^^^^^248^252^return false;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P3_Replace_Literal]^return true;^251^^^^^236^266^return false;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P3_Replace_Literal]^return false;^260^^^^^245^275^return true;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^if  (  ( leftSide.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P8_Replace_Mix]^if  (  ( value.removeChild (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^next.removeChild (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^249^250^^^^234^264^next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^next .getNext (  )   == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^249^250^^^^234^264^next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P14_Delete_Statement]^^249^250^251^^^234^264^next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  { return false;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^!next.isEquivalentTo ( parent )  )  {^250^^^^^235^265^!next.isEquivalentTo ( value )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^!next.replaceChild ( value )  )  {^250^^^^^235^265^!next.isEquivalentTo ( value )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^!next .isQualifiedName (  )   )  {^250^^^^^235^265^!next.isEquivalentTo ( value )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P8_Replace_Mix]^!next.isEquivalentTo ( leftSide )  )  {^250^^^^^235^265^!next.isEquivalentTo ( value )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P14_Delete_Statement]^^250^251^^^^235^265^!next.isEquivalentTo ( value )  )  { return false;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^exprParent.removeChild ( value ) ;^257^^^^^242^272^exprParent.removeChild ( expr ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^exprParent.replaceChild ( expr ) ;^257^^^^^242^272^exprParent.removeChild ( expr ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^exprParent .replaceChild ( assign , leftSide )  ;^257^^^^^242^272^exprParent.removeChild ( expr ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P14_Delete_Statement]^^257^^^^^242^272^exprParent.removeChild ( expr ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P11_Insert_Donor_Statement]^expr.removeChild ( assign ) ;exprParent.removeChild ( expr ) ;^257^^^^^242^272^exprParent.removeChild ( expr ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P11_Insert_Donor_Statement]^next = parent.getFirstChild (  ) ;exprParent.removeChild ( expr ) ;^257^^^^^242^272^exprParent.removeChild ( expr ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P11_Insert_Donor_Statement]^parent.replaceChild ( next, assign ) ;exprParent.removeChild ( expr ) ;^257^^^^^242^272^exprParent.removeChild ( expr ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^expr.removeChild ( value ) ;^258^^^^^243^273^expr.removeChild ( assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^expr.replaceChild ( assign ) ;^258^^^^^243^273^expr.removeChild ( assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^expr .replaceChild ( next , value )  ;^258^^^^^243^273^expr.removeChild ( assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P8_Replace_Mix]^expr.replaceChild ( parent ) ;^258^^^^^243^273^expr.removeChild ( assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P14_Delete_Statement]^^258^^^^^243^273^expr.removeChild ( assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P11_Insert_Donor_Statement]^exprParent.removeChild ( expr ) ;expr.removeChild ( assign ) ;^258^^^^^243^273^expr.removeChild ( assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P11_Insert_Donor_Statement]^parent.replaceChild ( next, assign ) ;expr.removeChild ( assign ) ;^258^^^^^243^273^expr.removeChild ( assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^parent.replaceChild ( leftSide, assign ) ;^259^^^^^244^274^parent.replaceChild ( next, assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^parent.replaceChild ( next, parent ) ;^259^^^^^244^274^parent.replaceChild ( next, assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^parent.replaceChild (  assign ) ;^259^^^^^244^274^parent.replaceChild ( next, assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^parent.replaceChild ( next ) ;^259^^^^^244^274^parent.replaceChild ( next, assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^parent.replaceChild ( assign, next ) ;^259^^^^^244^274^parent.replaceChild ( next, assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P8_Replace_Mix]^parent.replaceChild ( value, assign ) ;^259^^^^^244^274^parent.replaceChild ( next, assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P14_Delete_Statement]^^259^260^^^^244^274^parent.replaceChild ( next, assign ) ; return true;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P11_Insert_Donor_Statement]^expr.removeChild ( assign ) ;parent.replaceChild ( next, assign ) ;^259^^^^^244^274^parent.replaceChild ( next, assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P11_Insert_Donor_Statement]^exprParent.removeChild ( expr ) ;parent.replaceChild ( next, assign ) ;^259^^^^^244^274^parent.replaceChild ( next, assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( parent )  )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P2_Replace_Operator]^if  ( leftSide.getType (  )  == Token.NAME && leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^278^279^280^^^263^293^if  ( leftSide.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P2_Replace_Operator]^if  ( leftSide.getType (  )  <= Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^278^279^280^^^263^293^if  ( leftSide.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P2_Replace_Operator]^if  ( leftSide.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP || leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^278^279^280^^^263^293^if  ( leftSide.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P2_Replace_Operator]^if  ( leftSide.getType (  )  != Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^278^279^280^^^263^293^if  ( leftSide.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P6_Replace_Expression]^if  ( leftSide.getType (  )  == Token.NAME ) {^278^279^280^^^263^293^if  ( leftSide.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P6_Replace_Expression]^if  (  leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^278^279^280^^^263^293^if  ( leftSide.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P6_Replace_Expression]^if  ( leftSide.getType (  )  == NAME )  {^278^279^280^^^263^293^if  ( leftSide.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P6_Replace_Expression]^if  ( (leftSide.getType() == GETPROP && getType() == THIS) )  {^278^279^280^^^263^293^if  ( leftSide.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P6_Replace_Expression]^if  ( leftSide.getType (  )  == GETPROP )  {^278^279^280^^^263^293^if  ( leftSide.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P6_Replace_Expression]^if  ( leftSide.getFirstChild (  ) .getType (  )  == THIS )  {^278^279^280^^^263^293^if  ( leftSide.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^if  ( leftSide.removeChild (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^278^279^280^^^263^293^if  ( leftSide.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^if  ( leftSide.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.removeChild (  ) .getType (  )  == Token.THIS )  {^278^279^280^^^263^293^if  ( leftSide.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P8_Replace_Mix]^if  ( value.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^278^279^280^^^263^293^if  ( leftSide.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P3_Replace_Literal]^return true;^286^^^^^278^287^return false;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^parent = value;^282^^^^^278^287^parent = next;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P8_Replace_Mix]^parent =  leftSide;^282^^^^^278^287^parent = next;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^next = value.getNext (  ) ;^283^^^^^278^287^next = leftSide.getNext (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^next = leftSide.removeChild (  ) ;^283^^^^^278^287^next = leftSide.getNext (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P11_Insert_Donor_Statement]^next = next.getFirstChild (  ) ;next = leftSide.getNext (  ) ;^283^^^^^278^287^next = leftSide.getNext (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^next = leftSide .getType (  )  ;^283^^^^^278^287^next = leftSide.getNext (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P8_Replace_Mix]^next = value .getType (  )  ;^283^^^^^278^287^next = leftSide.getNext (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P14_Delete_Statement]^^283^^^^^278^287^next = leftSide.getNext (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P11_Insert_Donor_Statement]^Node next = expr.getNext (  ) ;next = leftSide.getNext (  ) ;^283^^^^^278^287^next = leftSide.getNext (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P11_Insert_Donor_Statement]^Node rightValue = leftValue.getNext (  ) ;next = leftSide.getNext (  ) ;^283^^^^^278^287^next = leftSide.getNext (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^parent = parent;^207^^^^^192^222^parent = next;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P8_Replace_Mix]^parent =  value;^207^^^^^192^222^parent = next;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^next = leftSide.getFirstChild (  ) ;^208^^^^^193^223^next = next.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^next = next.removeChild (  ) ;^208^^^^^193^223^next = next.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^next = next .removeChild ( assign )  ;^208^^^^^193^223^next = next.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P8_Replace_Mix]^next =  parent.getFirstChild (  ) ;^208^^^^^193^223^next = next.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P11_Insert_Donor_Statement]^parent = next.getFirstChild (  ) ;next = next.getFirstChild (  ) ;^208^^^^^193^223^next = next.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P11_Insert_Donor_Statement]^next = leftSide.getNext (  ) ;next = next.getFirstChild (  ) ;^208^^^^^193^223^next = next.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P11_Insert_Donor_Statement]^next = parent.getFirstChild (  ) ;next = next.getFirstChild (  ) ;^208^^^^^193^223^next = next.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P8_Replace_Mix]^parent =  leftSide.getFirstChild (  ) ;^213^^^^^198^228^parent = next.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^parent = value;^282^^^^^267^297^parent = next;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^next = value.getNext (  ) ;^283^^^^^268^298^next = leftSide.getNext (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^next = leftSide.removeChild (  ) ;^283^^^^^268^298^next = leftSide.getNext (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P8_Replace_Mix]^next =  parent.getNext (  ) ;^283^^^^^268^298^next = leftSide.getNext (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P11_Insert_Donor_Statement]^next = next.getFirstChild (  ) ;next = leftSide.getNext (  ) ;^283^^^^^268^298^next = leftSide.getNext (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P3_Replace_Literal]^return true;^217^^^^^202^232^return false;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P3_Replace_Literal]^return true;^240^^^^^225^255^return false;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P3_Replace_Literal]^return true;^262^^^^^247^277^return false;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P3_Replace_Literal]^return true;^286^^^^^271^301^return false;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P3_Replace_Literal]^return true;^291^^^^^276^306^return false;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^Node leftSide = value.getFirstChild (  ) ;^277^^^^^262^292^Node leftSide = next.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^Node leftSide = next.removeChild (  ) ;^277^^^^^262^292^Node leftSide = next.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P8_Replace_Mix]^Node leftSide = parent.getFirstChild (  ) ;^277^^^^^262^292^Node leftSide = next.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P11_Insert_Donor_Statement]^Node next = expr.getNext (  ) ;Node leftSide = next.getFirstChild (  ) ;^277^^^^^262^292^Node leftSide = next.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P11_Insert_Donor_Statement]^Node leftValue = assign.getFirstChild (  ) ;Node leftSide = next.getFirstChild (  ) ;^277^^^^^262^292^Node leftSide = next.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P11_Insert_Donor_Statement]^Node assign = expr.getFirstChild (  ) ;Node leftSide = next.getFirstChild (  ) ;^277^^^^^262^292^Node leftSide = next.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^switch  ( value.getType (  )  )  {^199^^^^^184^214^switch  ( next.getType (  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^switch  ( next.removeChild (  )  )  {^199^^^^^184^214^switch  ( next.getType (  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P8_Replace_Mix]^switch  ( value.removeChild (  )  )  {^199^^^^^184^214^switch  ( next.getType (  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^next = value.getFirstChild (  ) ;^208^^^^^193^223^next = next.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P14_Delete_Statement]^^208^^^^^193^223^next = next.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P11_Insert_Donor_Statement]^Node leftSide = next.getFirstChild (  ) ;next = next.getFirstChild (  ) ;^208^^^^^193^223^next = next.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P11_Insert_Donor_Statement]^Node leftValue = assign.getFirstChild (  ) ;next = next.getFirstChild (  ) ;^208^^^^^193^223^next = next.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P11_Insert_Donor_Statement]^Node assign = expr.getFirstChild (  ) ;next = next.getFirstChild (  ) ;^208^^^^^193^223^next = next.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^if  ( leftSide.getFirstChild (  ) .hasChildren (  )  )  {^212^^^^^197^227^if  ( next.getFirstChild (  ) .hasChildren (  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P8_Replace_Mix]^if  ( parent.removeChild (  ) .hasChildren (  )  )  {^212^^^^^197^227^if  ( next.getFirstChild (  ) .hasChildren (  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^parent = next .removeChild ( expr )  ;^213^^^^^198^228^parent = next.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P8_Replace_Mix]^parent = value .removeChild ( exprParent )  ;^213^^^^^198^228^parent = next.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P8_Replace_Mix]^next = value.removeChild (  ) ;^214^^^^^199^229^next = parent.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P14_Delete_Statement]^^214^^^^^199^229^next = parent.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P8_Replace_Mix]^if  ( value.isQualifiedName (  )  )  {^221^^^^^206^236^if  ( next.isQualifiedName (  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P8_Replace_Mix]^if  ( leftSide.isEquivalentTo (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^223^224^^^^208^238^if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^exprParent.removeChild ( value ) ;^234^^^^^219^249^exprParent.removeChild ( expr ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P8_Replace_Mix]^exprParent.replaceChild ( value ) ;^234^^^^^219^249^exprParent.removeChild ( expr ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P14_Delete_Statement]^^234^235^^^^219^249^exprParent.removeChild ( expr ) ; expr.removeChild ( assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^expr .replaceChild ( expr , exprParent )  ;^235^^^^^220^250^expr.removeChild ( assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P14_Delete_Statement]^^235^^^^^220^250^expr.removeChild ( assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P14_Delete_Statement]^^236^237^^^^221^251^parent.replaceChild ( next, assign ) ; return true;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^if  ( leftSide.getType (  )  == next.getType (  )  )  {^247^^^^^232^262^if  ( value.getType (  )  == next.getType (  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^if  ( value .getNext (  )   == next^247^^^^^232^262^if  ( value.getType (  )  == next.getType (  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^if  ( value.getType (  )  == leftSide.getType (  )  )  {^247^^^^^232^262^if  ( value.getType (  )  == next.getType (  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^if  (  ( value.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^exprParent .replaceChild ( value , parent )  ;^257^^^^^242^272^exprParent.removeChild ( expr ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P8_Replace_Mix]^exprParent.replaceChild ( parent ) ;^257^^^^^242^272^exprParent.removeChild ( expr ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^expr .replaceChild ( value , exprParent )  ;^258^^^^^243^273^expr.removeChild ( assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P8_Replace_Mix]^expr.removeChild ( parent ) ;^258^^^^^243^273^expr.removeChild ( assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^parent.replaceChild ( parent, assign ) ;^259^^^^^244^274^parent.replaceChild ( next, assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^parent.replaceChild ( next, value ) ;^259^^^^^244^274^parent.replaceChild ( next, assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^parent .removeChild ( value )  ;^259^^^^^244^274^parent.replaceChild ( next, assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P8_Replace_Mix]^parent .removeChild ( assign )  ;^259^^^^^244^274^parent.replaceChild ( next, assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P12_Insert_Condition]^if  ( !isSafeReplacement ( next, assign )  )  { parent.replaceChild ( next, assign ) ; }^259^^^^^244^274^parent.replaceChild ( next, assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P14_Delete_Statement]^^277^^^^^262^292^Node leftSide = next.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P11_Insert_Donor_Statement]^parent = next.getFirstChild (  ) ;Node leftSide = next.getFirstChild (  ) ;^277^^^^^262^292^Node leftSide = next.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P11_Insert_Donor_Statement]^next = parent.getFirstChild (  ) ;Node leftSide = next.getFirstChild (  ) ;^277^^^^^262^292^Node leftSide = next.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P11_Insert_Donor_Statement]^next = next.getFirstChild (  ) ;Node leftSide = next.getFirstChild (  ) ;^277^^^^^262^292^Node leftSide = next.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^278^279^280^^^263^293^if  ( leftSide.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^leftSide.getType (  )  == Token.GETPROP && parent.getFirstChild (  ) .getType (  )  == Token.THIS )  {^279^280^^^^264^294^leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^leftSide.removeChild (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^279^280^^^^264^294^leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^leftSide .getNext (  )   == Token.GETPROP && leftSide.getFirstChild (  )^279^280^^^^264^294^leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P8_Replace_Mix]^leftSide.getType (  )  == Token.GETPROP && value.getFirstChild (  ) .getType (  )  == Token.THIS )  {^279^280^^^^264^294^leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^leftSide.getFirstChild (  )  .getNext (  )   == Token.THIS )  {^280^^^^^265^295^leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^leftSide.removeChild (  ) .getType (  )  == Token.THIS )  {^280^^^^^265^295^leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P8_Replace_Mix]^leftSide .removeChild ( next )  .getType (  )  == Token.THIS )  {^280^^^^^265^295^leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P14_Delete_Statement]^^280^281^282^^^265^295^leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {  parent = next;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^next = next.getNext (  ) ;^283^^^^^268^298^next = leftSide.getNext (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P14_Delete_Statement]^^283^284^^^^268^298^next = leftSide.getNext (  ) ; break;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P11_Insert_Donor_Statement]^Node next = expr.getNext (  ) ;next = leftSide.getNext (  ) ;^283^^^^^268^298^next = leftSide.getNext (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P11_Insert_Donor_Statement]^Node rightValue = leftValue.getNext (  ) ;next = leftSide.getNext (  ) ;^283^^^^^268^298^next = leftSide.getNext (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^if  ( next .removeChild ( assign )  .hasChildren (  )  )  {^212^^^^^197^227^if  ( next.getFirstChild (  ) .hasChildren (  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P8_Replace_Mix]^parent =  null.getFirstChild (  ) ;^213^^^^^198^228^parent = next.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^parent = next .removeChild ( parent )  ;^213^^^^^198^228^parent = next.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P8_Replace_Mix]^if  ( value.isEquivalentTo (  )  )  {^221^^^^^206^236^if  ( next.isQualifiedName (  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^if  ( next.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^223^224^^^^208^238^if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P8_Replace_Mix]^if  ( !isSafeReplacement ( parent, assign )  )  {^230^^^^^223^238^if  ( !isSafeReplacement ( next, assign )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P8_Replace_Mix]^exprParent.replaceChild ( value ) ;^234^^^^^223^238^exprParent.removeChild ( expr ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^expr .replaceChild ( next , assign )  ;^235^^^^^223^238^expr.removeChild ( assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P8_Replace_Mix]^expr.replaceChild ( parent ) ;^235^^^^^223^238^expr.removeChild ( assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P14_Delete_Statement]^^235^236^^^^223^238^expr.removeChild ( assign ) ; parent.replaceChild ( next, assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^parent.replaceChild ( value, assign ) ;^236^^^^^223^238^parent.replaceChild ( next, assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^String valueName = next.getQualifiedName (  ) ;^222^^^^^207^237^String nextName = next.getQualifiedName (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P8_Replace_Mix]^String leftSideName = next.removeChild (  ) ;^222^^^^^207^237^String nextName = next.getQualifiedName (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P8_Replace_Mix]^nextName.equals ( next.removeChild (  )  )  )  {^224^^^^^209^239^nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P8_Replace_Mix]^nextName.equals ( leftSide .isQualifiedName (  )   )  )  {^224^^^^^209^239^nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^exprParent .replaceChild ( expr , parent )  ;^234^^^^^219^249^exprParent.removeChild ( expr ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^parent.replaceChild ( parent, assign ) ;^236^^^^^221^251^parent.replaceChild ( next, assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^parent .removeChild ( expr )  ;^236^^^^^221^251^parent.replaceChild ( next, assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^if  ( value.isQualifiedName (  )  && leftSideName.equals ( value.getQualifiedName (  )  )  )  {^223^224^^^^208^238^if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^if  ( value .getQualifiedName (  )   && nextName.equals ( value.getQualifiedName (  )  )  )  {^223^224^^^^208^238^if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^if  ( value.isQualifiedName (  )  && nextName.equals ( value .isQualifiedName (  )   )  )  {^223^224^^^^208^238^if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P8_Replace_Mix]^if  ( value.isQualifiedName (  )  && parentName.equals ( value.removeChild (  )  )  )  {^223^224^^^^208^238^if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P8_Replace_Mix]^exprParent .replaceChild ( leftSide , leftSide )  ;^234^^^^^223^238^exprParent.removeChild ( expr ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P8_Replace_Mix]^if  (  next.getType (  )  == Token.this )  && !next .isQualifiedName (  )   )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P8_Replace_Mix]^exprParent.removeChild ( parent ) ;^257^^^^^242^272^exprParent.removeChild ( expr ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^expr .replaceChild ( exprParent , leftSide )  ;^258^^^^^243^273^expr.removeChild ( assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P14_Delete_Statement]^^258^259^^^^243^273^expr.removeChild ( assign ) ; parent.replaceChild ( next, assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P8_Replace_Mix]^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( next )  )  {^248^249^250^^^233^263^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P2_Replace_Operator]^if  ( leftSide.getType (  )  >= Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^278^279^280^^^263^293^if  ( leftSide.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^if  ( leftSide .getNext (  )   == Token.NAME || leftSide^278^279^280^^^263^293^if  ( leftSide.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^if  ( leftSide.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide .removeChild ( parent )  .getType (  )  == Token.THIS )  {^278^279^280^^^263^293^if  ( leftSide.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P8_Replace_Mix]^if  ( value .getNext (  )   == Token.NAME || leftSide^278^279^280^^^263^293^if  ( leftSide.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P8_Replace_Mix]^next =  parent.getNext (  ) ;^283^^^^^278^287^next = leftSide.getNext (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P14_Delete_Statement]^^283^284^^^^278^287^next = leftSide.getNext (  ) ; break;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P8_Replace_Mix]^parent =  leftSide;^207^^^^^192^222^parent = next;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^parent = parent;^282^^^^^267^297^parent = next;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^Node leftSide = next .removeChild ( value )  ;^277^^^^^262^292^Node leftSide = next.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P8_Replace_Mix]^Node leftSide = next .removeChild ( exprParent )  ;^277^^^^^262^292^Node leftSide = next.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^if  ( next.getFirstChild (  )  .reportCodeChange (  )   )  {^212^^^^^197^227^if  ( next.getFirstChild (  ) .hasChildren (  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P8_Replace_Mix]^if  ( value.removeChild (  ) .hasChildren (  )  )  {^212^^^^^197^227^if  ( next.getFirstChild (  ) .hasChildren (  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^if  ( next .removeChild ( next )  .hasChildren (  )  )  {^212^^^^^197^227^if  ( next.getFirstChild (  ) .hasChildren (  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P8_Replace_Mix]^nextName.equals ( parent .isQualifiedName (  )   )  )  {^224^^^^^209^239^nextName.equals ( value.getQualifiedName (  )  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P8_Replace_Mix]^expr.replaceChild ( value ) ;^235^^^^^220^250^expr.removeChild ( assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^parent .removeChild ( parent )  ;^236^^^^^221^251^parent.replaceChild ( next, assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P12_Insert_Condition]^if  ( !isSafeReplacement ( next, assign )  )  { parent.replaceChild ( next, assign ) ; }^236^^^^^221^251^parent.replaceChild ( next, assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^if  ( next.getType (  )  == next.getType (  )  )  {^247^^^^^232^262^if  ( value.getType (  )  == next.getType (  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P8_Replace_Mix]^if  ( next.removeChild (  )  == next.getType (  )  )  {^247^^^^^232^262^if  ( value.getType (  )  == next.getType (  )  )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P14_Delete_Statement]^^257^258^^^^242^272^exprParent.removeChild ( expr ) ; expr.removeChild ( assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^expr .replaceChild ( next , exprParent )  ;^258^^^^^243^273^expr.removeChild ( assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P14_Delete_Statement]^^259^^^^^244^274^parent.replaceChild ( next, assign ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^Node leftSide = leftSide.getFirstChild (  ) ;^277^^^^^262^292^Node leftSide = next.getFirstChild (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P8_Replace_Mix]^if  ( next .getNext (  )   == Token.NAME || leftSide^278^279^280^^^263^293^if  ( leftSide.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P5_Replace_Variable]^leftSide.getType (  )  == Token.GETPROP && next.getFirstChild (  ) .getType (  )  == Token.THIS )  {^279^280^^^^264^294^leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P7_Replace_Invocation]^next = leftSide .getType (  )  ;^283^^^^^268^298^next = leftSide.getNext (  ) ;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P3_Replace_Literal]^return true;^295^^^^^280^310^return false;^[CLASS] ExploitAssigns  [METHOD] collapseAssignEqualTo [RETURN_TYPE] boolean   Node expr Node exprParent Node value [VARIABLES] boolean  Node  assign  expr  exprParent  leftSide  next  parent  value  String  nextName  
[P2_Replace_Operator]^if  ( n.getType (  )  == Token.VAR )  return;^351^^^^^349^378^if  ( n.getType (  )  != Token.VAR )  return;^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[P5_Replace_Variable]^if  ( varNode.getType (  )  != Token.VAR )  return;^351^^^^^349^378^if  ( n.getType (  )  != Token.VAR )  return;^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[P7_Replace_Invocation]^if  ( n .getNext (  )   != Token.VAR )  return;^351^^^^^349^378^if  ( n.getType (  )  != Token.VAR )  return;^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[P5_Replace_Variable]^if  ( varNodeodesToCollapse.contains ( n )  )  return;^354^^^^^349^378^if  ( nodesToCollapse.contains ( n )  )  return;^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[P5_Replace_Variable]^if  ( nodesToCollapseodesToCollapse.contains ( n )  )  return;^354^^^^^349^378^if  ( nodesToCollapse.contains ( n )  )  return;^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[P5_Replace_Variable]^if  ( n.contains ( nodesToCollapse )  )  return;^354^^^^^349^378^if  ( nodesToCollapse.contains ( n )  )  return;^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[P7_Replace_Invocation]^if  ( nodesToCollapse.add ( n )  )  return;^354^^^^^349^378^if  ( nodesToCollapse.contains ( n )  )  return;^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[P8_Replace_Mix]^if  ( varNodeodesToCollapse.add ( n )  )  return;^354^^^^^349^378^if  ( nodesToCollapse.contains ( n )  )  return;^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[P2_Replace_Operator]^if  ( parent.getType (  )  >= Token.IF )  return;^358^^^^^349^378^if  ( parent.getType (  )  == Token.IF )  return;^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[P5_Replace_Variable]^if  ( varNode.getType (  )  == Token.IF )  return;^358^^^^^349^378^if  ( parent.getType (  )  == Token.IF )  return;^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[P7_Replace_Invocation]^if  ( parent .getNext (  )   == Token.IF )  return;^358^^^^^349^378^if  ( parent.getType (  )  == Token.IF )  return;^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[P5_Replace_Variable]^Node varNode = parent;^360^^^^^349^378^Node varNode = n;^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[P5_Replace_Variable]^n = varNode.getNext (  ) ;^363^^^^^349^378^n = n.getNext (  ) ;^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[P7_Replace_Invocation]^n = n .getType (  )  ;^363^^^^^349^378^n = n.getNext (  ) ;^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[P14_Delete_Statement]^^363^^^^^349^378^n = n.getNext (  ) ;^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[P3_Replace_Literal]^boolean hasNodesToCollapse = true;^365^^^^^349^378^boolean hasNodesToCollapse = false;^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[P12_Insert_Condition]^if  ( hasNodesToCollapse )  { boolean hasNodesToCollapse = false; }^365^^^^^349^378^boolean hasNodesToCollapse = false;^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[P2_Replace_Operator]^while  ( n != null || n.getType (  )  == Token.VAR )  {^366^^^^^349^378^while  ( n != null && n.getType (  )  == Token.VAR )  {^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[P2_Replace_Operator]^while  ( n == null && n.getType (  )  == Token.VAR )  {^366^^^^^349^378^while  ( n != null && n.getType (  )  == Token.VAR )  {^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[P2_Replace_Operator]^while  ( n != null && n.getType (  )  != Token.VAR )  {^366^^^^^349^378^while  ( n != null && n.getType (  )  == Token.VAR )  {^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[P5_Replace_Variable]^while  ( varNode != null && n.getType (  )  == Token.VAR )  {^366^^^^^349^378^while  ( n != null && n.getType (  )  == Token.VAR )  {^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[P3_Replace_Literal]^hasNodesToCollapse = false;^368^^^^^349^378^hasNodesToCollapse = true;^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[P12_Insert_Condition]^if  ( hasNodesToCollapse )  { hasNodesToCollapse = true; }^368^^^^^349^378^hasNodesToCollapse = true;^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[P5_Replace_Variable]^n = varNode.getNext (  ) ;^370^^^^^349^378^n = n.getNext (  ) ;^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[P7_Replace_Invocation]^nodesToCollapse .contains ( parent )  ;^367^^^^^349^378^nodesToCollapse.add ( n ) ;^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[P8_Replace_Mix]^nodesToCollapse.add ( varNode ) ;^367^^^^^349^378^nodesToCollapse.add ( n ) ;^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[P14_Delete_Statement]^^367^368^^^^349^378^nodesToCollapse.add ( n ) ; hasNodesToCollapse = true;^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[P7_Replace_Invocation]^n = n .getType (  )  ;^370^^^^^349^378^n = n.getNext (  ) ;^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[P14_Delete_Statement]^^370^^^^^349^378^n = n.getNext (  ) ;^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[P7_Replace_Invocation]^while  ( n != null && n .getNext (  )   == Token.VAR )  {^366^^^^^349^378^while  ( n != null && n.getType (  )  == Token.VAR )  {^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[P8_Replace_Mix]^while  ( varNode != null && n .getNext (  )   == Token.VAR )  {^366^^^^^349^378^while  ( n != null && n.getType (  )  == Token.VAR )  {^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[P14_Delete_Statement]^^366^367^^^^349^378^while  ( n != null && n.getType (  )  == Token.VAR )  { nodesToCollapse.add ( n ) ;^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[P15_Unwrap_Block]^nodesToCollapse.add(varNode); collapses.add(new com.google.javascript.jscomp.CollapseVariableDeclarations.Collapse(varNode, parent));^373^374^375^376^^349^378^if  ( hasNodesToCollapse )  { nodesToCollapse.add ( varNode ) ; collapses.add ( new Collapse ( varNode, parent )  ) ; }^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[P16_Remove_Block]^^373^374^375^376^^349^378^if  ( hasNodesToCollapse )  { nodesToCollapse.add ( varNode ) ; collapses.add ( new Collapse ( varNode, parent )  ) ; }^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[P4_Replace_Constructor]^collapses.add ( new Collapse (  parent )  ) ;^375^^^^^349^378^collapses.add ( new Collapse ( varNode, parent )  ) ;^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[P4_Replace_Constructor]^collapses.add ( new Collapse ( varNode )  ) ;^375^^^^^349^378^collapses.add ( new Collapse ( varNode, parent )  ) ;^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[P5_Replace_Variable]^collapses.add ( new Collapse ( n, parent )  ) ;^375^^^^^349^378^collapses.add ( new Collapse ( varNode, parent )  ) ;^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[P5_Replace_Variable]^collapses.add ( new Collapse ( varNode, n )  ) ;^375^^^^^349^378^collapses.add ( new Collapse ( varNode, parent )  ) ;^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[P5_Replace_Variable]^collapses.add ( new Collapse ( parent, varNode )  ) ;^375^^^^^349^378^collapses.add ( new Collapse ( varNode, parent )  ) ;^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[P5_Replace_Variable]^nodesToCollapse.add ( parent ) ;^374^^^^^349^378^nodesToCollapse.add ( varNode ) ;^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[P14_Delete_Statement]^^374^^^^^349^378^nodesToCollapse.add ( varNode ) ;^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[P11_Insert_Donor_Statement]^nodesToCollapse.add ( n ) ;nodesToCollapse.add ( varNode ) ;^374^^^^^349^378^nodesToCollapse.add ( varNode ) ;^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[P14_Delete_Statement]^^375^^^^^349^378^collapses.add ( new Collapse ( varNode, parent )  ) ;^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[P7_Replace_Invocation]^nodesToCollapse .contains ( n )  ;^374^^^^^349^378^nodesToCollapse.add ( varNode ) ;^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[P5_Replace_Variable]^collapses.add ( new Collapse ( parent, parent )  ) ;^375^^^^^349^378^collapses.add ( new Collapse ( varNode, parent )  ) ;^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
[P5_Replace_Variable]^collapses.add ( new Collapse ( varNode, varNode )  ) ;^375^^^^^349^378^collapses.add ( new Collapse ( varNode, parent )  ) ;^[CLASS] GatherCollapses  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] boolean  hasNodesToCollapse  NodeTraversal  t  Node  n  parent  varNode  
