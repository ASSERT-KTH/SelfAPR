[P7_Replace_Invocation]^private static Logger logger = Logger .info ( 0 )  ;^45^46^^^^45^46^private static Logger logger = Logger.getLogger ( NameAnonymousFunctionsMapped.class.getName (  )  ) ;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer   [VARIABLES] 
[P7_Replace_Invocation]^private static Logger logger = Logger.getLogger ( NameAnonymousFunctionsMapped.class .getName (  )   ) ;^45^46^^^^45^46^private static Logger logger = Logger.getLogger ( NameAnonymousFunctionsMapped.class.getName (  )  ) ;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer   [VARIABLES] 
[P8_Replace_Mix]^private  Logger logger = Logger.getLogger ( NameAnonymousFunctionsMapped.class.getName (  )  ) ;^45^46^^^^45^46^private static Logger logger = Logger.getLogger ( NameAnonymousFunctionsMapped.class.getName (  )  ) ;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer   [VARIABLES] 
[P1_Replace_Type]^static final int PREFIX = '$';^48^^^^^43^53^static final char PREFIX = '$';^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer   [VARIABLES] 
[P1_Replace_Type]^static final char PREFIX_STRING = "$";^49^^^^^44^54^static final String PREFIX_STRING = "$";^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer   [VARIABLES] 
[P3_Replace_Literal]^static final String PREFIX_STRING = "";^49^^^^^44^54^static final String PREFIX_STRING = "$";^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer   [VARIABLES] 
[P8_Replace_Mix]^private  AbstractCompiler compiler;^51^^^^^46^56^private final AbstractCompiler compiler;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer   [VARIABLES] 
[P8_Replace_Mix]^private  NameGenerator nameGenerator;^52^^^^^47^57^private final NameGenerator nameGenerator;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer   [VARIABLES] 
[P1_Replace_Type]^private  short  namedCount = 0;^55^^^^^50^60^private int namedCount = 0;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer   [VARIABLES] 
[P3_Replace_Literal]^private int namedCount = ;^55^^^^^50^60^private int namedCount = 0;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer   [VARIABLES] 
[P8_Replace_Mix]^private int namedCount = 4;^55^^^^^50^60^private int namedCount = 0;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer   [VARIABLES] 
[P1_Replace_Type]^private  long  bytesUsed = 0;^56^^^^^51^61^private int bytesUsed = 0;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer   [VARIABLES] 
[P3_Replace_Literal]^private int bytesUsed = -3;^56^^^^^51^61^private int bytesUsed = 0;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer   [VARIABLES] 
[P8_Replace_Mix]^private int bytesUsed  = null ;^56^^^^^51^61^private int bytesUsed = 0;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer   [VARIABLES] 
[P1_Replace_Type]^static final int DELIMITER = '.';^85^^^^^80^90^static final char DELIMITER = '.';^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer   [VARIABLES] 
[P8_Replace_Mix]^this.compiler =  null;^59^^^^^58^63^this.compiler = compiler;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P8_Replace_Mix]^nameGenerator = new NameGenerator ( Collections.<String>emptySet (  ) , PREFIX_STRING, this ) ;^60^61^^^^58^63^nameGenerator = new NameGenerator ( Collections.<String>emptySet (  ) , PREFIX_STRING, null ) ;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P14_Delete_Statement]^^61^62^^^^58^63^Collections.<String>emptySet (  ) , PREFIX_STRING, null ) ; renameMap = Maps.newHashMap (  ) ;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P8_Replace_Mix]^renameMap  =  renameMap ;^62^^^^^58^63^renameMap = Maps.newHashMap (  ) ;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P14_Delete_Statement]^^62^^^^^58^63^renameMap = Maps.newHashMap (  ) ;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, externs, namingCallback ) ;^69^^^^^66^75^NodeTraversal.traverse ( compiler, root, namingCallback ) ;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  AnonymousFunctionNamingCallback  namingCallback  Node  externs  root  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler,  namingCallback ) ;^69^^^^^66^75^NodeTraversal.traverse ( compiler, root, namingCallback ) ;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  AnonymousFunctionNamingCallback  namingCallback  Node  externs  root  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, root ) ;^69^^^^^66^75^NodeTraversal.traverse ( compiler, root, namingCallback ) ;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  AnonymousFunctionNamingCallback  namingCallback  Node  externs  root  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P5_Replace_Variable]^NodeTraversal.traverse (  root, namingCallback ) ;^69^^^^^66^75^NodeTraversal.traverse ( compiler, root, namingCallback ) ;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  AnonymousFunctionNamingCallback  namingCallback  Node  externs  root  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, namingCallback, root ) ;^69^^^^^66^75^NodeTraversal.traverse ( compiler, root, namingCallback ) ;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  AnonymousFunctionNamingCallback  namingCallback  Node  externs  root  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P5_Replace_Variable]^NodeTraversal.traverse ( namingCallback, root, compiler ) ;^69^^^^^66^75^NodeTraversal.traverse ( compiler, root, namingCallback ) ;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  AnonymousFunctionNamingCallback  namingCallback  Node  externs  root  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P5_Replace_Variable]^NodeTraversal.traverse ( root, compiler, namingCallback ) ;^69^^^^^66^75^NodeTraversal.traverse ( compiler, root, namingCallback ) ;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  AnonymousFunctionNamingCallback  namingCallback  Node  externs  root  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P14_Delete_Statement]^^69^^^^^66^75^NodeTraversal.traverse ( compiler, root, namingCallback ) ;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  AnonymousFunctionNamingCallback  namingCallback  Node  externs  root  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P2_Replace_Operator]^logger.info ( "Named "  ==  namedCount + " anon functions using " + bytesUsed + " bytes" ) ;^70^71^^^^66^75^logger.info ( "Named " + namedCount + " anon functions using " + bytesUsed + " bytes" ) ;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  AnonymousFunctionNamingCallback  namingCallback  Node  externs  root  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P3_Replace_Literal]^logger.info ( "Named Nam" + namedCount + " anon functions using " + bytesUsed + " bytes" ) ;^70^71^^^^66^75^logger.info ( "Named " + namedCount + " anon functions using " + bytesUsed + " bytes" ) ;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  AnonymousFunctionNamingCallback  namingCallback  Node  externs  root  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P3_Replace_Literal]^logger.info ( "Named " + namedCount + "ons usinanon functions using " + bytesUsed + " bytes" ) ;^70^71^^^^66^75^logger.info ( "Named " + namedCount + " anon functions using " + bytesUsed + " bytes" ) ;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  AnonymousFunctionNamingCallback  namingCallback  Node  externs  root  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P3_Replace_Literal]^logger.info ( "Named " + namedCount + " anon functions using " + bytesUsed + "by" ) ;^70^71^^^^66^75^logger.info ( "Named " + namedCount + " anon functions using " + bytesUsed + " bytes" ) ;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  AnonymousFunctionNamingCallback  namingCallback  Node  externs  root  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P5_Replace_Variable]^logger.info ( "Named " + bytesUsed + " anon functions using " + namedCount + " bytes" ) ;^70^71^^^^66^75^logger.info ( "Named " + namedCount + " anon functions using " + bytesUsed + " bytes" ) ;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  AnonymousFunctionNamingCallback  namingCallback  Node  externs  root  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P8_Replace_Mix]^logger.info ( "Named " + namedCount + " anon functions using " + namedCount + " bytes" ) ;^70^71^^^^66^75^logger.info ( "Named " + namedCount + " anon functions using " + bytesUsed + " bytes" ) ;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  AnonymousFunctionNamingCallback  namingCallback  Node  externs  root  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P14_Delete_Statement]^^70^71^^^^66^75^logger.info ( "Named " + namedCount + " anon functions using " + bytesUsed + " bytes" ) ;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  AnonymousFunctionNamingCallback  namingCallback  Node  externs  root  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P2_Replace_Operator]^if  ( namedCount >= 0 )  {^72^^^^^66^75^if  ( namedCount > 0 )  {^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  AnonymousFunctionNamingCallback  namingCallback  Node  externs  root  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P3_Replace_Literal]^if  ( namedCount > namedCount )  {^72^^^^^66^75^if  ( namedCount > 0 )  {^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  AnonymousFunctionNamingCallback  namingCallback  Node  externs  root  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P5_Replace_Variable]^if  ( bytesUsed > 0 )  {^72^^^^^66^75^if  ( namedCount > 0 )  {^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  AnonymousFunctionNamingCallback  namingCallback  Node  externs  root  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P8_Replace_Mix]^if  ( namedCount > 2 )  {^72^^^^^66^75^if  ( namedCount > 0 )  {^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  AnonymousFunctionNamingCallback  namingCallback  Node  externs  root  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P15_Unwrap_Block]^compiler.reportCodeChange();^72^73^74^^^66^75^if  ( namedCount > 0 )  { compiler.reportCodeChange (  ) ; }^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  AnonymousFunctionNamingCallback  namingCallback  Node  externs  root  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P16_Remove_Block]^^72^73^74^^^66^75^if  ( namedCount > 0 )  { compiler.reportCodeChange (  ) ; }^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  AnonymousFunctionNamingCallback  namingCallback  Node  externs  root  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P14_Delete_Statement]^^73^^^^^66^75^compiler.reportCodeChange (  ) ;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  boolean  AnonymousFunctionNamingCallback  namingCallback  Node  externs  root  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P7_Replace_Invocation]^return node.setString (  ) ;^92^^^^^88^96^return node.getString (  ) ;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] getName [RETURN_TYPE] String   Node node [VARIABLES] AbstractCompiler  compiler  boolean  Node  node  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P7_Replace_Invocation]^switch  ( node.setString (  )  )  {^89^^^^^88^96^switch  ( node.getType (  )  )  {^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] getName [RETURN_TYPE] String   Node node [VARIABLES] AbstractCompiler  compiler  boolean  Node  node  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P7_Replace_Invocation]^switch  ( node .getString (  )   )  {^89^^^^^88^96^switch  ( node.getType (  )  )  {^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] getName [RETURN_TYPE] String   Node node [VARIABLES] AbstractCompiler  compiler  boolean  Node  node  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P7_Replace_Invocation]^return node .setString ( PREFIX_STRING )  ;^92^^^^^88^96^return node.getString (  ) ;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] getName [RETURN_TYPE] String   Node node [VARIABLES] AbstractCompiler  compiler  boolean  Node  node  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P14_Delete_Statement]^^92^^^^^88^96^return node.getString (  ) ;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] getName [RETURN_TYPE] String   Node node [VARIABLES] AbstractCompiler  compiler  boolean  Node  node  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P14_Delete_Statement]^^94^^^^^88^96^return new CodePrinter.Builder ( node ) .build (  ) ;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] getName [RETURN_TYPE] String   Node node [VARIABLES] AbstractCompiler  compiler  boolean  Node  node  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P7_Replace_Invocation]^Node fnNameNode = fnNode.setString (  ) ;^100^^^^^99^109^Node fnNameNode = fnNode.getFirstChild (  ) ;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] AbstractCompiler  compiler  boolean  Node  fnNameNode  fnNode  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  name  newName  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P7_Replace_Invocation]^Node fnNameNode = fnNode .getString (  )  ;^100^^^^^99^109^Node fnNameNode = fnNode.getFirstChild (  ) ;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] AbstractCompiler  compiler  boolean  Node  fnNameNode  fnNode  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  name  newName  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P14_Delete_Statement]^^100^101^^^^99^109^Node fnNameNode = fnNode.getFirstChild (  ) ; String newName = renameMap.get ( name ) ;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] AbstractCompiler  compiler  boolean  Node  fnNameNode  fnNode  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  name  newName  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P1_Replace_Type]^char newName = renameMap.get ( name ) ;^101^^^^^99^109^String newName = renameMap.get ( name ) ;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] AbstractCompiler  compiler  boolean  Node  fnNameNode  fnNode  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  name  newName  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P5_Replace_Variable]^String newName = renameMap.get ( PREFIX_STRING ) ;^101^^^^^99^109^String newName = renameMap.get ( name ) ;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] AbstractCompiler  compiler  boolean  Node  fnNameNode  fnNode  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  name  newName  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P5_Replace_Variable]^String newName = name.get ( renameMap ) ;^101^^^^^99^109^String newName = renameMap.get ( name ) ;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] AbstractCompiler  compiler  boolean  Node  fnNameNode  fnNode  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  name  newName  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P8_Replace_Mix]^String newName = null.get ( name ) ;^101^^^^^99^109^String newName = renameMap.get ( name ) ;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] AbstractCompiler  compiler  boolean  Node  fnNameNode  fnNode  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  name  newName  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P5_Replace_Variable]^String newName = renameMap.get ( newName ) ;^101^^^^^99^109^String newName = renameMap.get ( name ) ;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] AbstractCompiler  compiler  boolean  Node  fnNameNode  fnNode  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  name  newName  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P14_Delete_Statement]^^101^^^^^99^109^String newName = renameMap.get ( name ) ;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] AbstractCompiler  compiler  boolean  Node  fnNameNode  fnNode  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  name  newName  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P2_Replace_Operator]^if  ( newName != null )  {^102^^^^^99^109^if  ( newName == null )  {^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] AbstractCompiler  compiler  boolean  Node  fnNameNode  fnNode  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  name  newName  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P5_Replace_Variable]^if  ( PREFIX_STRING == null )  {^102^^^^^99^109^if  ( newName == null )  {^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] AbstractCompiler  compiler  boolean  Node  fnNameNode  fnNode  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  name  newName  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P8_Replace_Mix]^if  ( newName == this )  {^102^^^^^99^109^if  ( newName == null )  {^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] AbstractCompiler  compiler  boolean  Node  fnNameNode  fnNode  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  name  newName  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P15_Unwrap_Block]^newName = nameGenerator.generateNextName(); renameMap.put(name, newName);^102^103^104^105^^99^109^if  ( newName == null )  { newName = nameGenerator.generateNextName (  ) ; renameMap.put ( name, newName ) ; }^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] AbstractCompiler  compiler  boolean  Node  fnNameNode  fnNode  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  name  newName  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P16_Remove_Block]^^102^103^104^105^^99^109^if  ( newName == null )  { newName = nameGenerator.generateNextName (  ) ; renameMap.put ( name, newName ) ; }^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] AbstractCompiler  compiler  boolean  Node  fnNameNode  fnNode  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  name  newName  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P8_Replace_Mix]^newName  = null ;^103^^^^^99^109^newName = nameGenerator.generateNextName (  ) ;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] AbstractCompiler  compiler  boolean  Node  fnNameNode  fnNode  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  name  newName  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P14_Delete_Statement]^^103^^^^^99^109^newName = nameGenerator.generateNextName (  ) ;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] AbstractCompiler  compiler  boolean  Node  fnNameNode  fnNode  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  name  newName  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P5_Replace_Variable]^renameMap.put ( newName, newName ) ;^104^^^^^99^109^renameMap.put ( name, newName ) ;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] AbstractCompiler  compiler  boolean  Node  fnNameNode  fnNode  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  name  newName  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P5_Replace_Variable]^renameMap.put ( name, PREFIX_STRING ) ;^104^^^^^99^109^renameMap.put ( name, newName ) ;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] AbstractCompiler  compiler  boolean  Node  fnNameNode  fnNode  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  name  newName  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P5_Replace_Variable]^renameMap.put (  newName ) ;^104^^^^^99^109^renameMap.put ( name, newName ) ;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] AbstractCompiler  compiler  boolean  Node  fnNameNode  fnNode  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  name  newName  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P5_Replace_Variable]^renameMap.put ( name ) ;^104^^^^^99^109^renameMap.put ( name, newName ) ;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] AbstractCompiler  compiler  boolean  Node  fnNameNode  fnNode  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  name  newName  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P5_Replace_Variable]^renameMap.put ( newName, name ) ;^104^^^^^99^109^renameMap.put ( name, newName ) ;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] AbstractCompiler  compiler  boolean  Node  fnNameNode  fnNode  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  name  newName  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P8_Replace_Mix]^renameMap.put ( PREFIX_STRING, newName ) ;^104^^^^^99^109^renameMap.put ( name, newName ) ;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] AbstractCompiler  compiler  boolean  Node  fnNameNode  fnNode  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  name  newName  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P14_Delete_Statement]^^104^^^^^99^109^renameMap.put ( name, newName ) ;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] AbstractCompiler  compiler  boolean  Node  fnNameNode  fnNode  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  name  newName  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P11_Insert_Donor_Statement]^fnNameNode.setString ( newName ) ;renameMap.put ( name, newName ) ;^104^^^^^99^109^renameMap.put ( name, newName ) ;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] AbstractCompiler  compiler  boolean  Node  fnNameNode  fnNode  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  name  newName  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P8_Replace_Mix]^newName ;^103^^^^^99^109^newName = nameGenerator.generateNextName (  ) ;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] AbstractCompiler  compiler  boolean  Node  fnNameNode  fnNode  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  name  newName  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P5_Replace_Variable]^fnNameNode.setString ( name ) ;^106^^^^^99^109^fnNameNode.setString ( newName ) ;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] AbstractCompiler  compiler  boolean  Node  fnNameNode  fnNode  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  name  newName  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P14_Delete_Statement]^^106^107^^^^99^109^fnNameNode.setString ( newName ) ; namedCount++;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] AbstractCompiler  compiler  boolean  Node  fnNameNode  fnNode  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  name  newName  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P11_Insert_Donor_Statement]^renameMap.put ( name, newName ) ;fnNameNode.setString ( newName ) ;^106^^^^^99^109^fnNameNode.setString ( newName ) ;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] AbstractCompiler  compiler  boolean  Node  fnNameNode  fnNode  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  name  newName  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P11_Insert_Donor_Statement]^return node.getString (  ) ;fnNameNode.setString ( newName ) ;^106^^^^^99^109^fnNameNode.setString ( newName ) ;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] AbstractCompiler  compiler  boolean  Node  fnNameNode  fnNode  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  name  newName  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P3_Replace_Literal]^bytesUsed += newName.length() + 8 ;^108^^^^^99^109^bytesUsed += newName.length (  ) ;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] AbstractCompiler  compiler  boolean  Node  fnNameNode  fnNode  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  name  newName  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P5_Replace_Variable]^bytesUsed += name.length (  ) ;^108^^^^^99^109^bytesUsed += newName.length (  ) ;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] AbstractCompiler  compiler  boolean  Node  fnNameNode  fnNode  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  name  newName  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P3_Replace_Literal]^bytesUsed += newName.length() - 7 ;^108^^^^^99^109^bytesUsed += newName.length (  ) ;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] AbstractCompiler  compiler  boolean  Node  fnNameNode  fnNode  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  name  newName  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P14_Delete_Statement]^^108^^^^^99^109^bytesUsed += newName.length (  ) ;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] AbstractCompiler  compiler  boolean  Node  fnNameNode  fnNode  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  name  newName  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P2_Replace_Operator]^return lhs  <=  DELIMITER + rhs;^113^^^^^112^114^return lhs + DELIMITER + rhs;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] getCombinedName [RETURN_TYPE] String   String lhs String rhs [VARIABLES] AbstractCompiler  compiler  boolean  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  lhs  name  newName  rhs  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P5_Replace_Variable]^return newName + DELIMITER + rhs;^113^^^^^112^114^return lhs + DELIMITER + rhs;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] getCombinedName [RETURN_TYPE] String   String lhs String rhs [VARIABLES] AbstractCompiler  compiler  boolean  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  lhs  name  newName  rhs  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P5_Replace_Variable]^return lhs + DELIMITER + newName;^113^^^^^112^114^return lhs + DELIMITER + rhs;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] getCombinedName [RETURN_TYPE] String   String lhs String rhs [VARIABLES] AbstractCompiler  compiler  boolean  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  lhs  name  newName  rhs  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P5_Replace_Variable]^return lhs + PREFIX + rhs;^113^^^^^112^114^return lhs + DELIMITER + rhs;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] getCombinedName [RETURN_TYPE] String   String lhs String rhs [VARIABLES] AbstractCompiler  compiler  boolean  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  lhs  name  newName  rhs  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P5_Replace_Variable]^return rhs + DELIMITER + lhs;^113^^^^^112^114^return lhs + DELIMITER + rhs;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] getCombinedName [RETURN_TYPE] String   String lhs String rhs [VARIABLES] AbstractCompiler  compiler  boolean  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  lhs  name  newName  rhs  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P5_Replace_Variable]^return lhs + rhs + DELIMITER;^113^^^^^112^114^return lhs + DELIMITER + rhs;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] getCombinedName [RETURN_TYPE] String   String lhs String rhs [VARIABLES] AbstractCompiler  compiler  boolean  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  lhs  name  newName  rhs  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P5_Replace_Variable]^return DELIMITER + lhs + rhs;^113^^^^^112^114^return lhs + DELIMITER + rhs;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] getCombinedName [RETURN_TYPE] String   String lhs String rhs [VARIABLES] AbstractCompiler  compiler  boolean  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  lhs  name  newName  rhs  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P8_Replace_Mix]^return lhs  ;^113^^^^^112^114^return lhs + DELIMITER + rhs;^[CLASS] NameAnonymousFunctionsMapped MappedFunctionNamer  [METHOD] getCombinedName [RETURN_TYPE] String   String lhs String rhs [VARIABLES] AbstractCompiler  compiler  boolean  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  lhs  name  newName  rhs  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P1_Replace_Type]^static final int DELIMITER = '.';^85^^^^^80^90^static final char DELIMITER = '.';^[CLASS] MappedFunctionNamer  [METHOD] getFunctionMap [RETURN_TYPE] VariableMap   [VARIABLES] AbstractCompiler  compiler  boolean  char  DELIMITER  PREFIX  NameGenerator  nameGenerator  String  PREFIX_STRING  lhs  name  newName  rhs  Logger  logger  Map  renameMap  int  bytesUsed  namedCount  
[P7_Replace_Invocation]^return node.setString (  ) ;^92^^^^^88^96^return node.getString (  ) ;^[CLASS] MappedFunctionNamer  [METHOD] getName [RETURN_TYPE] String   Node node [VARIABLES] char  DELIMITER  Node  node  boolean  
[P7_Replace_Invocation]^switch  ( node.setString (  )  )  {^89^^^^^88^96^switch  ( node.getType (  )  )  {^[CLASS] MappedFunctionNamer  [METHOD] getName [RETURN_TYPE] String   Node node [VARIABLES] char  DELIMITER  Node  node  boolean  
[P14_Delete_Statement]^^92^^^^^88^96^return node.getString (  ) ;^[CLASS] MappedFunctionNamer  [METHOD] getName [RETURN_TYPE] String   Node node [VARIABLES] char  DELIMITER  Node  node  boolean  
[P14_Delete_Statement]^^94^^^^^88^96^return new CodePrinter.Builder ( node ) .build (  ) ;^[CLASS] MappedFunctionNamer  [METHOD] getName [RETURN_TYPE] String   Node node [VARIABLES] char  DELIMITER  Node  node  boolean  
[P7_Replace_Invocation]^Node fnNameNode = fnNode.setString (  ) ;^100^^^^^99^109^Node fnNameNode = fnNode.getFirstChild (  ) ;^[CLASS] MappedFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] char  DELIMITER  String  name  newName  boolean  Node  fnNameNode  fnNode  
[P8_Replace_Mix]^Node fnNameNode = fnNode .getString (  )  ;^100^^^^^99^109^Node fnNameNode = fnNode.getFirstChild (  ) ;^[CLASS] MappedFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] char  DELIMITER  String  name  newName  boolean  Node  fnNameNode  fnNode  
[P5_Replace_Variable]^Node fnNameNode = fnNameNode.getFirstChild (  ) ;^100^^^^^99^109^Node fnNameNode = fnNode.getFirstChild (  ) ;^[CLASS] MappedFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] char  DELIMITER  String  name  newName  boolean  Node  fnNameNode  fnNode  
[P14_Delete_Statement]^^100^^^^^99^109^Node fnNameNode = fnNode.getFirstChild (  ) ;^[CLASS] MappedFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] char  DELIMITER  String  name  newName  boolean  Node  fnNameNode  fnNode  
[P1_Replace_Type]^char newName = renameMap.get ( name ) ;^101^^^^^99^109^String newName = renameMap.get ( name ) ;^[CLASS] MappedFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] char  DELIMITER  String  name  newName  boolean  Node  fnNameNode  fnNode  
[P5_Replace_Variable]^String newName = name.get ( renameMap ) ;^101^^^^^99^109^String newName = renameMap.get ( name ) ;^[CLASS] MappedFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] char  DELIMITER  String  name  newName  boolean  Node  fnNameNode  fnNode  
[P5_Replace_Variable]^String newName = renameMap.get ( newName ) ;^101^^^^^99^109^String newName = renameMap.get ( name ) ;^[CLASS] MappedFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] char  DELIMITER  String  name  newName  boolean  Node  fnNameNode  fnNode  
[P14_Delete_Statement]^^101^^^^^99^109^String newName = renameMap.get ( name ) ;^[CLASS] MappedFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] char  DELIMITER  String  name  newName  boolean  Node  fnNameNode  fnNode  
[P2_Replace_Operator]^if  ( newName != null )  {^102^^^^^99^109^if  ( newName == null )  {^[CLASS] MappedFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] char  DELIMITER  String  name  newName  boolean  Node  fnNameNode  fnNode  
[P5_Replace_Variable]^if  ( name == null )  {^102^^^^^99^109^if  ( newName == null )  {^[CLASS] MappedFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] char  DELIMITER  String  name  newName  boolean  Node  fnNameNode  fnNode  
[P8_Replace_Mix]^if  ( newName == true )  {^102^^^^^99^109^if  ( newName == null )  {^[CLASS] MappedFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] char  DELIMITER  String  name  newName  boolean  Node  fnNameNode  fnNode  
[P15_Unwrap_Block]^newName = nameGenerator.generateNextName(); renameMap.put(name, newName);^102^103^104^105^^99^109^if  ( newName == null )  { newName = nameGenerator.generateNextName (  ) ; renameMap.put ( name, newName ) ; }^[CLASS] MappedFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] char  DELIMITER  String  name  newName  boolean  Node  fnNameNode  fnNode  
[P16_Remove_Block]^^102^103^104^105^^99^109^if  ( newName == null )  { newName = nameGenerator.generateNextName (  ) ; renameMap.put ( name, newName ) ; }^[CLASS] MappedFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] char  DELIMITER  String  name  newName  boolean  Node  fnNameNode  fnNode  
[P8_Replace_Mix]^newName  =  newName ;^103^^^^^99^109^newName = nameGenerator.generateNextName (  ) ;^[CLASS] MappedFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] char  DELIMITER  String  name  newName  boolean  Node  fnNameNode  fnNode  
[P14_Delete_Statement]^^103^^^^^99^109^newName = nameGenerator.generateNextName (  ) ;^[CLASS] MappedFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] char  DELIMITER  String  name  newName  boolean  Node  fnNameNode  fnNode  
[P5_Replace_Variable]^renameMap.put (  newName ) ;^104^^^^^99^109^renameMap.put ( name, newName ) ;^[CLASS] MappedFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] char  DELIMITER  String  name  newName  boolean  Node  fnNameNode  fnNode  
[P5_Replace_Variable]^renameMap.put ( name ) ;^104^^^^^99^109^renameMap.put ( name, newName ) ;^[CLASS] MappedFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] char  DELIMITER  String  name  newName  boolean  Node  fnNameNode  fnNode  
[P5_Replace_Variable]^renameMap.put ( newName, name ) ;^104^^^^^99^109^renameMap.put ( name, newName ) ;^[CLASS] MappedFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] char  DELIMITER  String  name  newName  boolean  Node  fnNameNode  fnNode  
[P8_Replace_Mix]^renameMap.put ( name, name ) ;^104^^^^^99^109^renameMap.put ( name, newName ) ;^[CLASS] MappedFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] char  DELIMITER  String  name  newName  boolean  Node  fnNameNode  fnNode  
[P14_Delete_Statement]^^104^^^^^99^109^renameMap.put ( name, newName ) ;^[CLASS] MappedFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] char  DELIMITER  String  name  newName  boolean  Node  fnNameNode  fnNode  
[P11_Insert_Donor_Statement]^fnNameNode.setString ( newName ) ;renameMap.put ( name, newName ) ;^104^^^^^99^109^renameMap.put ( name, newName ) ;^[CLASS] MappedFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] char  DELIMITER  String  name  newName  boolean  Node  fnNameNode  fnNode  
[P5_Replace_Variable]^newName = 4.generateNextName (  ) ;^103^^^^^99^109^newName = nameGenerator.generateNextName (  ) ;^[CLASS] MappedFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] char  DELIMITER  String  name  newName  boolean  Node  fnNameNode  fnNode  
[P8_Replace_Mix]^newName ;^103^^^^^99^109^newName = nameGenerator.generateNextName (  ) ;^[CLASS] MappedFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] char  DELIMITER  String  name  newName  boolean  Node  fnNameNode  fnNode  
[P8_Replace_Mix]^newName = 2.generateNextName (  ) ;^103^^^^^99^109^newName = nameGenerator.generateNextName (  ) ;^[CLASS] MappedFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] char  DELIMITER  String  name  newName  boolean  Node  fnNameNode  fnNode  
[P5_Replace_Variable]^fnNameNode.setString ( name ) ;^106^^^^^99^109^fnNameNode.setString ( newName ) ;^[CLASS] MappedFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] char  DELIMITER  String  name  newName  boolean  Node  fnNameNode  fnNode  
[P7_Replace_Invocation]^fnNameNode .getString (  )  ;^106^^^^^99^109^fnNameNode.setString ( newName ) ;^[CLASS] MappedFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] char  DELIMITER  String  name  newName  boolean  Node  fnNameNode  fnNode  
[P14_Delete_Statement]^^106^^^^^99^109^fnNameNode.setString ( newName ) ;^[CLASS] MappedFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] char  DELIMITER  String  name  newName  boolean  Node  fnNameNode  fnNode  
[P11_Insert_Donor_Statement]^renameMap.put ( name, newName ) ;fnNameNode.setString ( newName ) ;^106^^^^^99^109^fnNameNode.setString ( newName ) ;^[CLASS] MappedFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] char  DELIMITER  String  name  newName  boolean  Node  fnNameNode  fnNode  
[P11_Insert_Donor_Statement]^return node.getString (  ) ;fnNameNode.setString ( newName ) ;^106^^^^^99^109^fnNameNode.setString ( newName ) ;^[CLASS] MappedFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] char  DELIMITER  String  name  newName  boolean  Node  fnNameNode  fnNode  
[P3_Replace_Literal]^bytesUsed += newName.length() + 2 ;^108^^^^^99^109^bytesUsed += newName.length (  ) ;^[CLASS] MappedFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] char  DELIMITER  String  name  newName  boolean  Node  fnNameNode  fnNode  
[P5_Replace_Variable]^bytesUsed += name.length (  ) ;^108^^^^^99^109^bytesUsed += newName.length (  ) ;^[CLASS] MappedFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] char  DELIMITER  String  name  newName  boolean  Node  fnNameNode  fnNode  
[P8_Replace_Mix]^bytesUsed +=  null.length (  ) ;^108^^^^^99^109^bytesUsed += newName.length (  ) ;^[CLASS] MappedFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] char  DELIMITER  String  name  newName  boolean  Node  fnNameNode  fnNode  
[P3_Replace_Literal]^bytesUsed += newName.length() + 3 ;^108^^^^^99^109^bytesUsed += newName.length (  ) ;^[CLASS] MappedFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] char  DELIMITER  String  name  newName  boolean  Node  fnNameNode  fnNode  
[P14_Delete_Statement]^^108^^^^^99^109^bytesUsed += newName.length (  ) ;^[CLASS] MappedFunctionNamer  [METHOD] setFunctionName [RETURN_TYPE] void   String name Node fnNode [VARIABLES] char  DELIMITER  String  name  newName  boolean  Node  fnNameNode  fnNode  
[P2_Replace_Operator]^return lhs  >=  DELIMITER + rhs;^113^^^^^112^114^return lhs + DELIMITER + rhs;^[CLASS] MappedFunctionNamer  [METHOD] getCombinedName [RETURN_TYPE] String   String lhs String rhs [VARIABLES] char  DELIMITER  String  lhs  rhs  boolean  
[P5_Replace_Variable]^return rhs + DELIMITER + rhs;^113^^^^^112^114^return lhs + DELIMITER + rhs;^[CLASS] MappedFunctionNamer  [METHOD] getCombinedName [RETURN_TYPE] String   String lhs String rhs [VARIABLES] char  DELIMITER  String  lhs  rhs  boolean  
[P5_Replace_Variable]^return rhs + DELIMITER + lhs;^113^^^^^112^114^return lhs + DELIMITER + rhs;^[CLASS] MappedFunctionNamer  [METHOD] getCombinedName [RETURN_TYPE] String   String lhs String rhs [VARIABLES] char  DELIMITER  String  lhs  rhs  boolean  
[P5_Replace_Variable]^return lhs + rhs + DELIMITER;^113^^^^^112^114^return lhs + DELIMITER + rhs;^[CLASS] MappedFunctionNamer  [METHOD] getCombinedName [RETURN_TYPE] String   String lhs String rhs [VARIABLES] char  DELIMITER  String  lhs  rhs  boolean  
[P8_Replace_Mix]^return lhs + DELIMITER +lhs;^113^^^^^112^114^return lhs + DELIMITER + rhs;^[CLASS] MappedFunctionNamer  [METHOD] getCombinedName [RETURN_TYPE] String   String lhs String rhs [VARIABLES] char  DELIMITER  String  lhs  rhs  boolean  
